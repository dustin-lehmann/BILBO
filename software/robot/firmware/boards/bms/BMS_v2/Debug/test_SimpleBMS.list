
test_SimpleBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003100  08003100  00004100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003140  08003140  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003140  08003140  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003140  08003140  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003140  08003140  00004140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003144  08003144  00004144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003148  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003154  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003154  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bfd  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e4  00000000  00000000  0000dc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0000f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069e  00000000  00000000  0000ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020318  00000000  00000000  0001059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ddc  00000000  00000000  000308b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8d81  00000000  00000000  0003a692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002320  00000000  00000000  00103458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00105778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080030e8 	.word	0x080030e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080030e8 	.word	0x080030e8

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 faaf 	bl	8000732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f82e 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8fa 	bl	80003d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f8da 	bl	8000394 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f874 	bl	80002cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ee:	f001 fdd1 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80001f2:	20fa      	movs	r0, #250	@ 0xfa
 80001f4:	f000 fb12 	bl	800081c <HAL_Delay>
  // Set all Outputs to ON
  HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, 1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2120      	movs	r1, #32
 80001fc:	480c      	ldr	r0, [pc, #48]	@ (8000230 <main+0x64>)
 80001fe:	f001 fdc9 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	480a      	ldr	r0, [pc, #40]	@ (8000230 <main+0x64>)
 8000208:	f001 fdc4 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, 1);
 800020c:	2201      	movs	r2, #1
 800020e:	2140      	movs	r1, #64	@ 0x40
 8000210:	4807      	ldr	r0, [pc, #28]	@ (8000230 <main+0x64>)
 8000212:	f001 fdbf 	bl	8001d94 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 8000216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800021a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021e:	f001 fdd1 	bl	8001dc4 <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 8000222:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000226:	f000 faf9 	bl	800081c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 800022a:	bf00      	nop
 800022c:	e7f3      	b.n	8000216 <main+0x4a>
 800022e:	bf00      	nop
 8000230:	48000400 	.word	0x48000400

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b096      	sub	sp, #88	@ 0x58
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	2244      	movs	r2, #68	@ 0x44
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 ff24 	bl	8003090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	463b      	mov	r3, r7
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000256:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800025a:	f001 fddb 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000264:	f000 f918 	bl	8000498 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000268:	2312      	movs	r3, #18
 800026a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000270:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800027e:	2360      	movs	r3, #96	@ 0x60
 8000280:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe18 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000296:	f000 f8ff 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029e:	2301      	movs	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ae:	463b      	mov	r3, r7
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fa18 	bl	80026e8 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002be:	f000 f8eb 	bl	8000498 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3758      	adds	r7, #88	@ 0x58
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e2:	4b29      	ldr	r3, [pc, #164]	@ (8000388 <MX_ADC1_Init+0xbc>)
 80002e4:	4a29      	ldr	r2, [pc, #164]	@ (800038c <MX_ADC1_Init+0xc0>)
 80002e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e8:	4b27      	ldr	r3, [pc, #156]	@ (8000388 <MX_ADC1_Init+0xbc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ee:	4b26      	ldr	r3, [pc, #152]	@ (8000388 <MX_ADC1_Init+0xbc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f4:	4b24      	ldr	r3, [pc, #144]	@ (8000388 <MX_ADC1_Init+0xbc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fa:	4b23      	ldr	r3, [pc, #140]	@ (8000388 <MX_ADC1_Init+0xbc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000300:	4b21      	ldr	r3, [pc, #132]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000302:	2204      	movs	r2, #4
 8000304:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000306:	4b20      	ldr	r3, [pc, #128]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000308:	2200      	movs	r2, #0
 800030a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800030c:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <MX_ADC1_Init+0xbc>)
 800030e:	2200      	movs	r2, #0
 8000310:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000312:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000314:	2201      	movs	r2, #1
 8000316:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <MX_ADC1_Init+0xbc>)
 800031a:	2200      	movs	r2, #0
 800031c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000322:	2200      	movs	r2, #0
 8000324:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000326:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800032c:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <MX_ADC1_Init+0xbc>)
 800032e:	2200      	movs	r2, #0
 8000330:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000336:	2200      	movs	r2, #0
 8000338:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <MX_ADC1_Init+0xbc>)
 800033c:	2200      	movs	r2, #0
 800033e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000342:	4811      	ldr	r0, [pc, #68]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000344:	f000 fc1a 	bl	8000b7c <HAL_ADC_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800034e:	f000 f8a3 	bl	8000498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <MX_ADC1_Init+0xc4>)
 8000354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000356:	2306      	movs	r3, #6
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035e:	237f      	movs	r3, #127	@ 0x7f
 8000360:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000362:	2304      	movs	r3, #4
 8000364:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	4619      	mov	r1, r3
 800036e:	4806      	ldr	r0, [pc, #24]	@ (8000388 <MX_ADC1_Init+0xbc>)
 8000370:	f000 fd4c 	bl	8000e0c <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800037a:	f000 f88d 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000028 	.word	0x20000028
 800038c:	50040000 	.word	0x50040000
 8000390:	3ef08000 	.word	0x3ef08000

08000394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <MX_DMA_Init+0x38>)
 800039c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800039e:	4a0b      	ldr	r2, [pc, #44]	@ (80003cc <MX_DMA_Init+0x38>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <MX_DMA_Init+0x38>)
 80003a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	200b      	movs	r0, #11
 80003b8:	f001 f9e3 	bl	8001782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003bc:	200b      	movs	r0, #11
 80003be:	f001 f9fc 	bl	80017ba <HAL_NVIC_EnableIRQ>

}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ea:	4a29      	ldr	r2, [pc, #164]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003f2:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <MX_GPIO_Init+0xc0>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000402:	4a23      	ldr	r2, [pc, #140]	@ (8000490 <MX_GPIO_Init+0xc0>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800040a:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <MX_GPIO_Init+0xc0>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_MEAS_1_Pin|ENABLE_MEAS_3_Pin|LED_LOW_Pin|LED_USER_Pin
 8000416:	2200      	movs	r2, #0
 8000418:	f641 1122 	movw	r1, #6434	@ 0x1922
 800041c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000420:	f001 fcb8 	bl	8001d94 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_MEAS_4_Pin|OUT_2_Pin|OUT_1_Pin|OUT_3_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	216a      	movs	r1, #106	@ 0x6a
 8000428:	481a      	ldr	r0, [pc, #104]	@ (8000494 <MX_GPIO_Init+0xc4>)
 800042a:	f001 fcb3 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_MEAS_1_Pin ENABLE_MEAS_3_Pin LED_LOW_Pin LED_USER_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = ENABLE_MEAS_1_Pin|ENABLE_MEAS_3_Pin|LED_LOW_Pin|LED_USER_Pin
 800042e:	f641 1322 	movw	r3, #6434	@ 0x1922
 8000432:	60fb      	str	r3, [r7, #12]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	4619      	mov	r1, r3
 8000446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044a:	f001 fb39 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_MEAS_4_Pin OUT_2_Pin OUT_1_Pin OUT_3_Pin */
  GPIO_InitStruct.Pin = ENABLE_MEAS_4_Pin|OUT_2_Pin|OUT_1_Pin|OUT_3_Pin;
 800044e:	236a      	movs	r3, #106	@ 0x6a
 8000450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	4619      	mov	r1, r3
 8000464:	480b      	ldr	r0, [pc, #44]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000466:	f001 fb2b 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800046a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800046e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000470:	2303      	movs	r3, #3
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000482:	f001 fb1d 	bl	8001ac0 <HAL_GPIO_Init>

}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	48000400 	.word	0x48000400

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <HAL_MspInit+0x44>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <HAL_MspInit+0x44>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <HAL_MspInit+0x44>)
 80004b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <HAL_MspInit+0x44>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <HAL_MspInit+0x44>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <HAL_MspInit+0x44>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b0a0      	sub	sp, #128	@ 0x80
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	2254      	movs	r2, #84	@ 0x54
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f002 fdbf 	bl	8003090 <memset>
  if(hadc->Instance==ADC1)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a47      	ldr	r2, [pc, #284]	@ (8000634 <HAL_ADC_MspInit+0x148>)
 8000518:	4293      	cmp	r3, r2
 800051a:	f040 8087 	bne.w	800062c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800051e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000522:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000524:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000528:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800052a:	2301      	movs	r3, #1
 800052c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000532:	2310      	movs	r3, #16
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000536:	2307      	movs	r3, #7
 8000538:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000542:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000546:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4618      	mov	r0, r3
 800054e:	f002 fab7 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000558:	f7ff ff9e 	bl	8000498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800055c:	4b36      	ldr	r3, [pc, #216]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 800055e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000560:	4a35      	ldr	r2, [pc, #212]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 8000562:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000568:	4b33      	ldr	r3, [pc, #204]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 800056a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b30      	ldr	r3, [pc, #192]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 8000576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000578:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000580:	4b2d      	ldr	r3, [pc, #180]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 8000582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000590:	4a29      	ldr	r2, [pc, #164]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <HAL_ADC_MspInit+0x14c>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC_CELL_3_Pin;
 80005a4:	2310      	movs	r3, #16
 80005a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005a8:	230b      	movs	r3, #11
 80005aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(ADC_CELL_3_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ba:	f001 fa81 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_CELL_4_Pin;
 80005be:	2301      	movs	r3, #1
 80005c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005c2:	230b      	movs	r3, #11
 80005c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(ADC_CELL_4_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005ce:	4619      	mov	r1, r3
 80005d0:	481a      	ldr	r0, [pc, #104]	@ (800063c <HAL_ADC_MspInit+0x150>)
 80005d2:	f001 fa75 	bl	8001ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000644 <HAL_ADC_MspInit+0x158>)
 80005da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 80005fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000602:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000610:	480b      	ldr	r0, [pc, #44]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 8000612:	f001 f8ed 	bl	80017f0 <HAL_DMA_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800061c:	f7ff ff3c 	bl	8000498 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a07      	ldr	r2, [pc, #28]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 8000624:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000626:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <HAL_ADC_MspInit+0x154>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3780      	adds	r7, #128	@ 0x80
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	50040000 	.word	0x50040000
 8000638:	40021000 	.word	0x40021000
 800063c:	48000400 	.word	0x48000400
 8000640:	2000008c 	.word	0x2000008c
 8000644:	40020008 	.word	0x40020008

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <NMI_Handler+0x4>

08000650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <MemManage_Handler+0x4>

08000660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <UsageFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069e:	f000 f89d 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <DMA1_Channel1_IRQHandler+0x10>)
 80006ae:	f001 f957 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000008c 	.word	0x2000008c

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <SystemInit+0x20>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <SystemInit+0x20>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000718 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e4:	f7ff ffea 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	@ (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	@ (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	@ (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f002 fcc7 	bl	80030a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fd5b 	bl	80001cc <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000718:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000724:	08003148 	.word	0x08003148
  ldr r2, =_sbss
 8000728:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800072c:	200000d8 	.word	0x200000d8

08000730 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_IRQHandler>

08000732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f001 f815 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	200f      	movs	r0, #15
 8000744:	f000 f80e 	bl	8000764 <HAL_InitTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e001      	b.n	8000758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000754:	f7ff fea6 	bl	80004a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000758:	79fb      	ldrb	r3, [r7, #7]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <HAL_InitTick+0x6c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d023      	beq.n	80007c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <HAL_InitTick+0x70>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <HAL_InitTick+0x6c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f821 	bl	80017d6 <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10f      	bne.n	80007ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d809      	bhi.n	80007b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 ffeb 	bl	8001782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_InitTick+0x74>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	e007      	b.n	80007c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e004      	b.n	80007c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	e001      	b.n	80007c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	200000d4 	.word	0x200000d4

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	200000d4 	.word	0x200000d4

0800081c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000824:	f7ff ffee 	bl	8000804 <HAL_GetTick>
 8000828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000834:	d005      	beq.n	8000842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_Delay+0x44>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000842:	bf00      	nop
 8000844:	f7ff ffde 	bl	8000804 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	429a      	cmp	r2, r3
 8000852:	d8f7      	bhi.n	8000844 <HAL_Delay+0x28>
  {
  }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008

08000864 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	609a      	str	r2, [r3, #8]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	609a      	str	r2, [r3, #8]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3360      	adds	r3, #96	@ 0x60
 80008de:	461a      	mov	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <LL_ADC_SetOffset+0x44>)
 80008ee:	4013      	ands	r3, r2
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	4313      	orrs	r3, r2
 80008fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000904:	bf00      	nop
 8000906:	371c      	adds	r7, #28
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	03fff000 	.word	0x03fff000

08000914 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3360      	adds	r3, #96	@ 0x60
 8000922:	461a      	mov	r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000934:	4618      	mov	r0, r3
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3360      	adds	r3, #96	@ 0x60
 8000950:	461a      	mov	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	431a      	orrs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800096a:	bf00      	nop
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000976:	b480      	push	{r7}
 8000978:	b087      	sub	sp, #28
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3330      	adds	r3, #48	@ 0x30
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	f003 030c 	and.w	r3, r3, #12
 8000992:	4413      	add	r3, r2
 8000994:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	f003 031f 	and.w	r3, r3, #31
 80009a0:	211f      	movs	r1, #31
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	401a      	ands	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0e9b      	lsrs	r3, r3, #26
 80009ae:	f003 011f 	and.w	r1, r3, #31
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f003 031f 	and.w	r3, r3, #31
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	431a      	orrs	r2, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b087      	sub	sp, #28
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3314      	adds	r3, #20
 80009de:	461a      	mov	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	0e5b      	lsrs	r3, r3, #25
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	0d1b      	lsrs	r3, r3, #20
 80009f6:	f003 031f 	and.w	r3, r3, #31
 80009fa:	2107      	movs	r1, #7
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	401a      	ands	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	0d1b      	lsrs	r3, r3, #20
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a18:	bf00      	nop
 8000a1a:	371c      	adds	r7, #28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	401a      	ands	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0318 	and.w	r3, r3, #24
 8000a46:	4908      	ldr	r1, [pc, #32]	@ (8000a68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a48:	40d9      	lsrs	r1, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	400b      	ands	r3, r1
 8000a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a52:	431a      	orrs	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	0007ffff 	.word	0x0007ffff

08000a6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	6093      	str	r3, [r2, #8]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aa4:	d101      	bne.n	8000aaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000acc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000af4:	d101      	bne.n	8000afa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d101      	bne.n	8000b20 <LL_ADC_IsEnabled+0x18>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <LL_ADC_IsEnabled+0x1a>
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d101      	bne.n	8000b46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d101      	bne.n	8000b6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e12c      	b.n	8000df0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fca1 	bl	80004ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff67 	bl	8000a90 <LL_ADC_IsDeepPowerDownEnabled>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff4d 	bl	8000a6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff82 	bl	8000ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d115      	bne.n	8000c0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff66 	bl	8000ab8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bec:	4b82      	ldr	r3, [pc, #520]	@ (8000df8 <HAL_ADC_Init+0x27c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	099b      	lsrs	r3, r3, #6
 8000bf2:	4a82      	ldr	r2, [pc, #520]	@ (8000dfc <HAL_ADC_Init+0x280>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	099b      	lsrs	r3, r3, #6
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c00:	e002      	b.n	8000c08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f9      	bne.n	8000c02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff64 	bl	8000ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10d      	bne.n	8000c3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c22:	f043 0210 	orr.w	r2, r3, #16
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff75 	bl	8000b2e <LL_ADC_REG_IsConversionOngoing>
 8000c44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 80c5 	bne.w	8000dde <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 80c1 	bne.w	8000dde <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c60:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c64:	f043 0202 	orr.w	r2, r3, #2
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff49 	bl	8000b08 <LL_ADC_IsEnabled>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10b      	bne.n	8000c94 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c7c:	4860      	ldr	r0, [pc, #384]	@ (8000e00 <HAL_ADC_Init+0x284>)
 8000c7e:	f7ff ff43 	bl	8000b08 <LL_ADC_IsEnabled>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	485d      	ldr	r0, [pc, #372]	@ (8000e04 <HAL_ADC_Init+0x288>)
 8000c90:	f7ff fde8 	bl	8000864 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e5b      	ldrb	r3, [r3, #25]
 8000c98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ca4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000caa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d106      	bne.n	8000cd0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	045b      	lsls	r3, r3, #17
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d009      	beq.n	8000cec <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cdc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	4b45      	ldr	r3, [pc, #276]	@ (8000e08 <HAL_ADC_Init+0x28c>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff12 	bl	8000b2e <LL_ADC_REG_IsConversionOngoing>
 8000d0a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff1f 	bl	8000b54 <LL_ADC_INJ_IsConversionOngoing>
 8000d16:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d13d      	bne.n	8000d9a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d13a      	bne.n	8000d9a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d28:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d30:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d40:	f023 0302 	bic.w	r3, r3, #2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	69b9      	ldr	r1, [r7, #24]
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d118      	bne.n	8000d8a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000d62:	f023 0304 	bic.w	r3, r3, #4
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000d6e:	4311      	orrs	r1, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000d74:	4311      	orrs	r1, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	e007      	b.n	8000d9a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0201 	bic.w	r2, r2, #1
 8000d98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10c      	bne.n	8000dbc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	f023 010f 	bic.w	r1, r3, #15
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	1e5a      	subs	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dba:	e007      	b.n	8000dcc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 020f 	bic.w	r2, r2, #15
 8000dca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd0:	f023 0303 	bic.w	r3, r3, #3
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ddc:	e007      	b.n	8000dee <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de2:	f043 0210 	orr.w	r2, r3, #16
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	053e2d63 	.word	0x053e2d63
 8000e00:	50040000 	.word	0x50040000
 8000e04:	50040300 	.word	0x50040300
 8000e08:	fff0c007 	.word	0xfff0c007

08000e0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0b6      	sub	sp, #216	@ 0xd8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_ADC_ConfigChannel+0x22>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e3b9      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x796>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe77 	bl	8000b2e <LL_ADC_REG_IsConversionOngoing>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 839e 	bne.w	8001584 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d824      	bhi.n	8000e9a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	3b02      	subs	r3, #2
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d81b      	bhi.n	8000e92 <HAL_ADC_ConfigChannel+0x86>
 8000e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e60 <HAL_ADC_ConfigChannel+0x54>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000e79 	.word	0x08000e79
 8000e68:	08000e81 	.word	0x08000e81
 8000e6c:	08000e89 	.word	0x08000e89
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	220c      	movs	r2, #12
 8000e74:	605a      	str	r2, [r3, #4]
          break;
 8000e76:	e010      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2212      	movs	r2, #18
 8000e7c:	605a      	str	r2, [r3, #4]
          break;
 8000e7e:	e00c      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2218      	movs	r2, #24
 8000e84:	605a      	str	r2, [r3, #4]
          break;
 8000e86:	e008      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e8e:	605a      	str	r2, [r3, #4]
          break;
 8000e90:	e003      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2206      	movs	r2, #6
 8000e96:	605a      	str	r2, [r3, #4]
          break;
 8000e98:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f7ff fd65 	bl	8000976 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe3c 	bl	8000b2e <LL_ADC_REG_IsConversionOngoing>
 8000eb6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fe48 	bl	8000b54 <LL_ADC_INJ_IsConversionOngoing>
 8000ec4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ec8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f040 81a6 	bne.w	800121e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 81a1 	bne.w	800121e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6819      	ldr	r1, [r3, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f7ff fd70 	bl	80009ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d00a      	beq.n	8000f26 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6919      	ldr	r1, [r3, #16]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000f20:	f7ff fcd4 	bl	80008cc <LL_ADC_SetOffset>
 8000f24:	e17b      	b.n	800121e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fcf1 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <HAL_ADC_ConfigChannel+0x146>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fce6 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	0e9b      	lsrs	r3, r3, #26
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	e01e      	b.n	8000f90 <HAL_ADC_ConfigChannel+0x184>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fcdb 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8000f80:	2320      	movs	r3, #32
 8000f82:	e004      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8000f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x19c>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	0e9b      	lsrs	r3, r3, #26
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	e018      	b.n	8000fda <HAL_ADC_ConfigChannel+0x1ce>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8000fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8000fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8000fcc:	2320      	movs	r3, #32
 8000fce:	e004      	b.n	8000fda <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8000fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d106      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fcaa 	bl	8000940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fc8e 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10a      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x20c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2101      	movs	r1, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fc83 	bl	8000914 <LL_ADC_GetOffsetChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	0e9b      	lsrs	r3, r3, #26
 8001012:	f003 021f 	and.w	r2, r3, #31
 8001016:	e01e      	b.n	8001056 <HAL_ADC_ConfigChannel+0x24a>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fc78 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800103e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8001046:	2320      	movs	r3, #32
 8001048:	e004      	b.n	8001054 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800104a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800105e:	2b00      	cmp	r3, #0
 8001060:	d105      	bne.n	800106e <HAL_ADC_ConfigChannel+0x262>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	0e9b      	lsrs	r3, r3, #26
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	e018      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x294>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001082:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800108a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8001092:	2320      	movs	r3, #32
 8001094:	e004      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8001096:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d106      	bne.n	80010b2 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fc47 	bl	8000940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2102      	movs	r1, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc2b 	bl	8000914 <LL_ADC_GetOffsetChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10a      	bne.n	80010de <HAL_ADC_ConfigChannel+0x2d2>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc20 	bl	8000914 <LL_ADC_GetOffsetChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	0e9b      	lsrs	r3, r3, #26
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	e01e      	b.n	800111c <HAL_ADC_ConfigChannel+0x310>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fc15 	bl	8000914 <LL_ADC_GetOffsetChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80010fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800110c:	2320      	movs	r3, #32
 800110e:	e004      	b.n	800111a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001110:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x328>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0e9b      	lsrs	r3, r3, #26
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	e016      	b.n	8001162 <HAL_ADC_ConfigChannel+0x356>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800114c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8001154:	2320      	movs	r3, #32
 8001156:	e004      	b.n	8001162 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001162:	429a      	cmp	r2, r3
 8001164:	d106      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	2102      	movs	r1, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fbe6 	bl	8000940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2103      	movs	r1, #3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fbca 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10a      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x394>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2103      	movs	r1, #3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fbbf 	bl	8000914 <LL_ADC_GetOffsetChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	0e9b      	lsrs	r3, r3, #26
 800119a:	f003 021f 	and.w	r2, r3, #31
 800119e:	e017      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x3c4>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2103      	movs	r1, #3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fbb4 	bl	8000914 <LL_ADC_GetOffsetChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80011b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80011bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80011c2:	2320      	movs	r3, #32
 80011c4:	e003      	b.n	80011ce <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80011c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x3dc>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0e9b      	lsrs	r3, r3, #26
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	e011      	b.n	800120c <HAL_ADC_ConfigChannel+0x400>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80011f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80011fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001200:	2320      	movs	r3, #32
 8001202:	e003      	b.n	800120c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800120c:	429a      	cmp	r2, r3
 800120e:	d106      	bne.n	800121e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	2103      	movs	r1, #3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fb91 	bl	8000940 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fc70 	bl	8000b08 <LL_ADC_IsEnabled>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 8140 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6819      	ldr	r1, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	461a      	mov	r2, r3
 800123e:	f7ff fbf1 	bl	8000a24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	4a8f      	ldr	r2, [pc, #572]	@ (8001484 <HAL_ADC_ConfigChannel+0x678>)
 8001248:	4293      	cmp	r3, r2
 800124a:	f040 8131 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10b      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x46a>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0e9b      	lsrs	r3, r3, #26
 8001264:	3301      	adds	r3, #1
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	2b09      	cmp	r3, #9
 800126c:	bf94      	ite	ls
 800126e:	2301      	movls	r3, #1
 8001270:	2300      	movhi	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	e019      	b.n	80012aa <HAL_ADC_ConfigChannel+0x49e>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001286:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800128e:	2320      	movs	r3, #32
 8001290:	e003      	b.n	800129a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3301      	adds	r3, #1
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	bf94      	ite	ls
 80012a4:	2301      	movls	r3, #1
 80012a6:	2300      	movhi	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d079      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d107      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x4be>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0e9b      	lsrs	r3, r3, #26
 80012c0:	3301      	adds	r3, #1
 80012c2:	069b      	lsls	r3, r3, #26
 80012c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012c8:	e015      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x4ea>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80012d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80012dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80012e2:	2320      	movs	r3, #32
 80012e4:	e003      	b.n	80012ee <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80012e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	069b      	lsls	r3, r3, #26
 80012f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x50a>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0e9b      	lsrs	r3, r3, #26
 8001308:	3301      	adds	r3, #1
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	e017      	b.n	8001346 <HAL_ADC_ConfigChannel+0x53a>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001326:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800132e:	2320      	movs	r3, #32
 8001330:	e003      	b.n	800133a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	ea42 0103 	orr.w	r1, r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10a      	bne.n	800136c <HAL_ADC_ConfigChannel+0x560>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0e9b      	lsrs	r3, r3, #26
 800135c:	3301      	adds	r3, #1
 800135e:	f003 021f 	and.w	r2, r3, #31
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	051b      	lsls	r3, r3, #20
 800136a:	e018      	b.n	800139e <HAL_ADC_ConfigChannel+0x592>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800137a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800137c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800137e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001384:	2320      	movs	r3, #32
 8001386:	e003      	b.n	8001390 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	f003 021f 	and.w	r2, r3, #31
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800139e:	430b      	orrs	r3, r1
 80013a0:	e081      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_ADC_ConfigChannel+0x5b2>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	0e9b      	lsrs	r3, r3, #26
 80013b4:	3301      	adds	r3, #1
 80013b6:	069b      	lsls	r3, r3, #26
 80013b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013bc:	e015      	b.n	80013ea <HAL_ADC_ConfigChannel+0x5de>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80013cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80013d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80013d6:	2320      	movs	r3, #32
 80013d8:	e003      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80013da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	069b      	lsls	r3, r3, #26
 80013e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_ADC_ConfigChannel+0x5fe>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0e9b      	lsrs	r3, r3, #26
 80013fc:	3301      	adds	r3, #1
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	e017      	b.n	800143a <HAL_ADC_ConfigChannel+0x62e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	61fb      	str	r3, [r7, #28]
  return result;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001422:	2320      	movs	r3, #32
 8001424:	e003      	b.n	800142e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	ea42 0103 	orr.w	r1, r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x65a>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	3301      	adds	r3, #1
 8001452:	f003 021f 	and.w	r2, r3, #31
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3b1e      	subs	r3, #30
 800145e:	051b      	lsls	r3, r3, #20
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001464:	e01e      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x698>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	613b      	str	r3, [r7, #16]
  return result;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d104      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800147e:	2320      	movs	r3, #32
 8001480:	e006      	b.n	8001490 <HAL_ADC_ConfigChannel+0x684>
 8001482:	bf00      	nop
 8001484:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f003 021f 	and.w	r2, r3, #31
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	3b1e      	subs	r3, #30
 800149e:	051b      	lsls	r3, r3, #20
 80014a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014a4:	430b      	orrs	r3, r1
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	6892      	ldr	r2, [r2, #8]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fa8f 	bl	80009ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <HAL_ADC_ConfigChannel+0x7a0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d06c      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014bc:	483c      	ldr	r0, [pc, #240]	@ (80015b0 <HAL_ADC_ConfigChannel+0x7a4>)
 80014be:	f7ff f9f7 	bl	80008b0 <LL_ADC_GetCommonPathInternalCh>
 80014c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a3a      	ldr	r2, [pc, #232]	@ (80015b4 <HAL_ADC_ConfigChannel+0x7a8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d127      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80014d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d121      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a35      	ldr	r2, [pc, #212]	@ (80015b8 <HAL_ADC_ConfigChannel+0x7ac>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d157      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80014ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ee:	4619      	mov	r1, r3
 80014f0:	482f      	ldr	r0, [pc, #188]	@ (80015b0 <HAL_ADC_ConfigChannel+0x7a4>)
 80014f2:	f7ff f9ca 	bl	800088a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <HAL_ADC_ConfigChannel+0x7b0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	099b      	lsrs	r3, r3, #6
 80014fc:	4a30      	ldr	r2, [pc, #192]	@ (80015c0 <HAL_ADC_ConfigChannel+0x7b4>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	099b      	lsrs	r3, r3, #6
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001510:	e002      	b.n	8001518 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3b01      	subs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800151e:	e03a      	b.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d113      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x746>
 800152a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800152e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10d      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_ADC_ConfigChannel+0x7ac>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d12a      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001544:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001548:	4619      	mov	r1, r3
 800154a:	4819      	ldr	r0, [pc, #100]	@ (80015b0 <HAL_ADC_ConfigChannel+0x7a4>)
 800154c:	f7ff f99d 	bl	800088a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001550:	e021      	b.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d11c      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800155c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d116      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <HAL_ADC_ConfigChannel+0x7ac>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d111      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001576:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <HAL_ADC_ConfigChannel+0x7a4>)
 800157e:	f7ff f984 	bl	800088a <LL_ADC_SetCommonPathInternalCh>
 8001582:	e008      	b.n	8001596 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800159e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	37d8      	adds	r7, #216	@ 0xd8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	80080000 	.word	0x80080000
 80015b0:	50040300 	.word	0x50040300
 80015b4:	c7520000 	.word	0xc7520000
 80015b8:	50040000 	.word	0x50040000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	053e2d63 	.word	0x053e2d63
 80015c4:	cb840000 	.word	0xcb840000
 80015c8:	80000001 	.word	0x80000001

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	@ (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	@ (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff3e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff31 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e098      	b.n	8001934 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <HAL_DMA_Init+0x150>)
 800180a:	429a      	cmp	r2, r3
 800180c:	d80f      	bhi.n	800182e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b4b      	ldr	r3, [pc, #300]	@ (8001944 <HAL_DMA_Init+0x154>)
 8001816:	4413      	add	r3, r2
 8001818:	4a4b      	ldr	r2, [pc, #300]	@ (8001948 <HAL_DMA_Init+0x158>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a48      	ldr	r2, [pc, #288]	@ (800194c <HAL_DMA_Init+0x15c>)
 800182a:	641a      	str	r2, [r3, #64]	@ 0x40
 800182c:	e00e      	b.n	800184c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b46      	ldr	r3, [pc, #280]	@ (8001950 <HAL_DMA_Init+0x160>)
 8001836:	4413      	add	r3, r2
 8001838:	4a43      	ldr	r2, [pc, #268]	@ (8001948 <HAL_DMA_Init+0x158>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	009a      	lsls	r2, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a42      	ldr	r2, [pc, #264]	@ (8001954 <HAL_DMA_Init+0x164>)
 800184a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018a6:	d039      	beq.n	800191c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	4a27      	ldr	r2, [pc, #156]	@ (800194c <HAL_DMA_Init+0x15c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d11a      	bne.n	80018e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018b2:	4b29      	ldr	r3, [pc, #164]	@ (8001958 <HAL_DMA_Init+0x168>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f003 031c 	and.w	r3, r3, #28
 80018be:	210f      	movs	r1, #15
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4924      	ldr	r1, [pc, #144]	@ (8001958 <HAL_DMA_Init+0x168>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <HAL_DMA_Init+0x168>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f003 031c 	and.w	r3, r3, #28
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	491d      	ldr	r1, [pc, #116]	@ (8001958 <HAL_DMA_Init+0x168>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
 80018e6:	e019      	b.n	800191c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018e8:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <HAL_DMA_Init+0x16c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f0:	f003 031c 	and.w	r3, r3, #28
 80018f4:	210f      	movs	r1, #15
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4917      	ldr	r1, [pc, #92]	@ (800195c <HAL_DMA_Init+0x16c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_DMA_Init+0x16c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f003 031c 	and.w	r3, r3, #28
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4911      	ldr	r1, [pc, #68]	@ (800195c <HAL_DMA_Init+0x16c>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40020407 	.word	0x40020407
 8001944:	bffdfff8 	.word	0xbffdfff8
 8001948:	cccccccd 	.word	0xcccccccd
 800194c:	40020000 	.word	0x40020000
 8001950:	bffdfbf8 	.word	0xbffdfbf8
 8001954:	40020400 	.word	0x40020400
 8001958:	400200a8 	.word	0x400200a8
 800195c:	400204a8 	.word	0x400204a8

08001960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	f003 031c 	and.w	r3, r3, #28
 8001980:	2204      	movs	r2, #4
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d026      	beq.n	80019da <HAL_DMA_IRQHandler+0x7a>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d021      	beq.n	80019da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	f003 021c 	and.w	r2, r3, #28
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	2104      	movs	r1, #4
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d071      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	e06c      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f003 031c 	and.w	r3, r3, #28
 80019e2:	2202      	movs	r2, #2
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02e      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xec>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d029      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10b      	bne.n	8001a1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 020a 	bic.w	r2, r2, #10
 8001a14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f003 021c 	and.w	r2, r3, #28
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d038      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a4a:	e033      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	f003 031c 	and.w	r3, r3, #28
 8001a54:	2208      	movs	r2, #8
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d02a      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d025      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 020e 	bic.w	r2, r2, #14
 8001a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f003 021c 	and.w	r2, r3, #28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
}
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e148      	b.n	8001d62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 813a 	beq.w	8001d5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_GPIO_Init+0x40>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d017      	beq.n	8001b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d123      	bne.n	8001bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	6939      	ldr	r1, [r7, #16]
 8001bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0203 	and.w	r2, r3, #3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8094 	beq.w	8001d5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c34:	4b52      	ldr	r3, [pc, #328]	@ (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c38:	4a51      	ldr	r2, [pc, #324]	@ (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c40:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c76:	d00d      	beq.n	8001c94 <HAL_GPIO_Init+0x1d4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a43      	ldr	r2, [pc, #268]	@ (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d007      	beq.n	8001c90 <HAL_GPIO_Init+0x1d0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a42      	ldr	r2, [pc, #264]	@ (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_GPIO_Init+0x1cc>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e004      	b.n	8001c96 <HAL_GPIO_Init+0x1d6>
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x1d6>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_GPIO_Init+0x1d6>
 8001c94:	2300      	movs	r3, #0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	f002 0203 	and.w	r2, r2, #3
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	4093      	lsls	r3, r2
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca6:	4937      	ldr	r1, [pc, #220]	@ (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb4:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cde:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2c:	4a18      	ldr	r2, [pc, #96]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d56:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f aeaf 	bne.w	8001ad0 <HAL_GPIO_Init+0x10>
  }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010000 	.word	0x40010000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43d9      	mvns	r1, r3
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	400b      	ands	r3, r1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e22:	d130      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e30:	d038      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2232      	movs	r2, #50	@ 0x32
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e58:	e002      	b.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6c:	d102      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f2      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e80:	d110      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e92:	d007      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e9c:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f000 bc02 	b.w	80026d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed4:	4b96      	ldr	r3, [pc, #600]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ede:	4b94      	ldr	r3, [pc, #592]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80e4 	beq.w	80020be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4c>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	f040 808b 	bne.w	800201a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	f040 8087 	bne.w	800201a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0c:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x64>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e3d9      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4b81      	ldr	r3, [pc, #516]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_RCC_OscConfig+0x7e>
 8001f34:	4b7e      	ldr	r3, [pc, #504]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f3c:	e005      	b.n	8001f4a <HAL_RCC_OscConfig+0x8a>
 8001f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d223      	bcs.n	8001f96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fd54 	bl	8002a00 <RCC_SetFlashLatencyFromMSIRange>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e3ba      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f62:	4b73      	ldr	r3, [pc, #460]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a72      	ldr	r2, [pc, #456]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b70      	ldr	r3, [pc, #448]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	496d      	ldr	r1, [pc, #436]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f80:	4b6b      	ldr	r3, [pc, #428]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4968      	ldr	r1, [pc, #416]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e025      	b.n	8001fe2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f96:	4b66      	ldr	r3, [pc, #408]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a65      	ldr	r2, [pc, #404]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b63      	ldr	r3, [pc, #396]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4960      	ldr	r1, [pc, #384]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	495b      	ldr	r1, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fd14 	bl	8002a00 <RCC_SetFlashLatencyFromMSIRange>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e37a      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe2:	f000 fc81 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b51      	ldr	r3, [pc, #324]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	4950      	ldr	r1, [pc, #320]	@ (8002134 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a4e      	ldr	r2, [pc, #312]	@ (8002138 <HAL_RCC_OscConfig+0x278>)
 8002000:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002002:	4b4e      	ldr	r3, [pc, #312]	@ (800213c <HAL_RCC_OscConfig+0x27c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fbac 	bl	8000764 <HAL_InitTick>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d052      	beq.n	80020bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	e35e      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d032      	beq.n	8002088 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002022:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a42      	ldr	r2, [pc, #264]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202e:	f7fe fbe9 	bl	8000804 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002036:	f7fe fbe5 	bl	8000804 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e347      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002048:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a35      	ldr	r2, [pc, #212]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4930      	ldr	r1, [pc, #192]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002072:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	492b      	ldr	r1, [pc, #172]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	e01a      	b.n	80020be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a28      	ldr	r2, [pc, #160]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002094:	f7fe fbb6 	bl	8000804 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209c:	f7fe fbb2 	bl	8000804 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e314      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ae:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1dc>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d073      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x21c>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d10e      	bne.n	80020f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d10b      	bne.n	80020f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	4b14      	ldr	r3, [pc, #80]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d063      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d15f      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e2f1      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x24c>
 80020fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e025      	b.n	8002158 <HAL_RCC_OscConfig+0x298>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002114:	d114      	bne.n	8002140 <HAL_RCC_OscConfig+0x280>
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a02      	ldr	r2, [pc, #8]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x298>
 8002130:	40021000 	.word	0x40021000
 8002134:	08003100 	.word	0x08003100
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004
 8002140:	4ba0      	ldr	r3, [pc, #640]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a9f      	ldr	r2, [pc, #636]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b9d      	ldr	r3, [pc, #628]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a9c      	ldr	r2, [pc, #624]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fb50 	bl	8000804 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe fb4c 	bl	8000804 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	@ 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e2ae      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4b92      	ldr	r3, [pc, #584]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2a8>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fb3c 	bl	8000804 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe fb38 	bl	8000804 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e29a      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a2:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d0>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d060      	beq.n	8002280 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x310>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d0:	4b7c      	ldr	r3, [pc, #496]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x328>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e277      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b76      	ldr	r3, [pc, #472]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4973      	ldr	r1, [pc, #460]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	e040      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	4b6f      	ldr	r3, [pc, #444]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe faf7 	bl	8000804 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe faf3 	bl	8000804 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e255      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b65      	ldr	r3, [pc, #404]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b62      	ldr	r3, [pc, #392]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	495f      	ldr	r1, [pc, #380]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b5d      	ldr	r3, [pc, #372]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5c      	ldr	r2, [pc, #368]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fad3 	bl	8000804 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe facf 	bl	8000804 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e231      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002294:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229a:	4a4a      	ldr	r2, [pc, #296]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe faae 	bl	8000804 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe faaa 	bl	8000804 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e20c      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d4:	4a3b      	ldr	r2, [pc, #236]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe fa91 	bl	8000804 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe fa8d 	bl	8000804 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1ef      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b32      	ldr	r3, [pc, #200]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a6 	beq.w	8002460 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002318:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	4a26      	ldr	r2, [pc, #152]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002330:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002358:	f7fe fa54 	bl	8000804 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe fa50 	bl	8000804 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1b2      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002386:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002396:	e029      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d115      	bne.n	80023cc <HAL_RCC_OscConfig+0x50c>
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	4a07      	ldr	r2, [pc, #28]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	4a03      	ldr	r2, [pc, #12]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a99      	ldr	r2, [pc, #612]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023dc:	4b96      	ldr	r3, [pc, #600]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a95      	ldr	r2, [pc, #596]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fa06 	bl	8000804 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fa02 	bl	8000804 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e162      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	4b89      	ldr	r3, [pc, #548]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ed      	beq.n	80023fc <HAL_RCC_OscConfig+0x53c>
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe f9ef 	bl	8000804 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe f9eb 	bl	8000804 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e14b      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	4b7d      	ldr	r3, [pc, #500]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ed      	bne.n	800242a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b78      	ldr	r3, [pc, #480]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	4a77      	ldr	r2, [pc, #476]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002474:	4b70      	ldr	r3, [pc, #448]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800247a:	4a6f      	ldr	r2, [pc, #444]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe f9be 	bl	8000804 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800248c:	f7fe f9ba 	bl	8000804 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e11c      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249e:	4b66      	ldr	r3, [pc, #408]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80024a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x5cc>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ae:	4b62      	ldr	r3, [pc, #392]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80024b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b4:	4a60      	ldr	r2, [pc, #384]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe f9a1 	bl	8000804 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c6:	f7fe f99d 	bl	8000804 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0ff      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d8:	4b57      	ldr	r3, [pc, #348]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80024da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80f3 	beq.w	80026d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	f040 80c9 	bne.w	800268c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 0203 	and.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	429a      	cmp	r2, r3
 800250c:	d12c      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	3b01      	subs	r3, #1
 800251a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d123      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d11b      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d113      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d109      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d06b      	beq.n	8002640 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d062      	beq.n	8002634 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800256e:	4b32      	ldr	r3, [pc, #200]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0ac      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800257e:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2d      	ldr	r2, [pc, #180]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002584:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002588:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800258a:	f7fe f93b 	bl	8000804 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe f937 	bl	8000804 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e099      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b0:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b21      	ldr	r3, [pc, #132]	@ (800263c <HAL_RCC_OscConfig+0x77c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025c0:	3a01      	subs	r2, #1
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025ca:	0212      	lsls	r2, r2, #8
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0552      	lsls	r2, r2, #21
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025de:	0852      	lsrs	r2, r2, #1
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0652      	lsls	r2, r2, #25
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025ea:	06d2      	lsls	r2, r2, #27
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4912      	ldr	r1, [pc, #72]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a0c      	ldr	r2, [pc, #48]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260c:	f7fe f8fa 	bl	8000804 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe f8f6 	bl	8000804 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e058      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <HAL_RCC_OscConfig+0x778>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002632:	e050      	b.n	80026d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e04f      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
 8002638:	40021000 	.word	0x40021000
 800263c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002640:	4b27      	ldr	r3, [pc, #156]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d144      	bne.n	80026d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800264c:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002658:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a20      	ldr	r2, [pc, #128]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 800265e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002662:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002664:	f7fe f8ce 	bl	8000804 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe f8ca 	bl	8000804 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e02c      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x7ac>
 800268a:	e024      	b.n	80026d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d01f      	beq.n	80026d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 8002698:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe f8b1 	bl	8000804 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe f8ad 	bl	8000804 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e00f      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4905      	ldr	r1, [pc, #20]	@ (80026e0 <HAL_RCC_OscConfig+0x820>)
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_RCC_OscConfig+0x824>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
 80026d0:	e001      	b.n	80026d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	feeefffc 	.word	0xfeeefffc

080026e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0e7      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b75      	ldr	r3, [pc, #468]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b72      	ldr	r3, [pc, #456]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4970      	ldr	r1, [pc, #448]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b6e      	ldr	r3, [pc, #440]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0cf      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d010      	beq.n	800275a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b66      	ldr	r3, [pc, #408]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002744:	429a      	cmp	r2, r3
 8002746:	d908      	bls.n	800275a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b63      	ldr	r3, [pc, #396]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4960      	ldr	r1, [pc, #384]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04c      	beq.n	8002800 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b5a      	ldr	r3, [pc, #360]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0a6      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b54      	ldr	r3, [pc, #336]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e09a      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279e:	4b4e      	ldr	r3, [pc, #312]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08e      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ae:	4b4a      	ldr	r3, [pc, #296]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e086      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b46      	ldr	r3, [pc, #280]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4943      	ldr	r1, [pc, #268]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe f818 	bl	8000804 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe f814 	bl	8000804 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e06e      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b3a      	ldr	r3, [pc, #232]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d010      	beq.n	800282e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002818:	429a      	cmp	r2, r3
 800281a:	d208      	bcs.n	800282e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b2e      	ldr	r3, [pc, #184]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	492b      	ldr	r1, [pc, #172]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282e:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d210      	bcs.n	800285e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	4923      	ldr	r1, [pc, #140]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284c:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e036      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286a:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4918      	ldr	r1, [pc, #96]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4910      	ldr	r1, [pc, #64]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800289c:	f000 f824 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	490b      	ldr	r1, [pc, #44]	@ (80028dc <HAL_RCC_ClockConfig+0x1f4>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f8>)
 80028ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1fc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd ff4f 	bl	8000764 <HAL_InitTick>
 80028c6:	4603      	mov	r3, r0
 80028c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ca:	7afb      	ldrb	r3, [r7, #11]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08003100 	.word	0x08003100
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b3e      	ldr	r3, [pc, #248]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002900:	4b3b      	ldr	r3, [pc, #236]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d121      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d11e      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800291c:	4b34      	ldr	r3, [pc, #208]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e005      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002938:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002944:	4a2b      	ldr	r2, [pc, #172]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d102      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002960:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e004      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d101      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x114>)
 800296e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d134      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0xa6>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d003      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xac>
 800298c:	e005      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002990:	617b      	str	r3, [r7, #20]
      break;
 8002992:	e005      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002996:	617b      	str	r3, [r7, #20]
      break;
 8002998:	e002      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	617b      	str	r3, [r7, #20]
      break;
 800299e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	fb03 f202 	mul.w	r2, r3, r2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0e5b      	lsrs	r3, r3, #25
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	3301      	adds	r3, #1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029e0:	69bb      	ldr	r3, [r7, #24]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	@ 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08003110 	.word	0x08003110
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a18:	f7ff f9ee 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a1c:	6178      	str	r0, [r7, #20]
 8002a1e:	e014      	b.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a38:	f7ff f9de 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a50:	d10b      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	@ 0x80
 8002a56:	d919      	bls.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a5c:	d902      	bls.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a5e:	2302      	movs	r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e013      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e010      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b80      	cmp	r3, #128	@ 0x80
 8002a6e:	d902      	bls.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a70:	2303      	movs	r3, #3
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	e00a      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d102      	bne.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e004      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b70      	cmp	r3, #112	@ 0x70
 8002a86:	d101      	bne.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a88:	2301      	movs	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0207 	bic.w	r2, r3, #7
 8002a94:	4909      	ldr	r1, [pc, #36]	@ (8002abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a9c:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40022000 	.word	0x40022000

08002ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ac8:	2300      	movs	r3, #0
 8002aca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002acc:	2300      	movs	r3, #0
 8002ace:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d031      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ae4:	d01a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ae6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002aea:	d814      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002af0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002af6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a5c      	ldr	r2, [pc, #368]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b02:	e00c      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f9ce 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b14:	e003      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	74fb      	strb	r3, [r7, #19]
      break;
 8002b1a:	e000      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b24:	4b51      	ldr	r3, [pc, #324]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	494e      	ldr	r1, [pc, #312]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b3a:	e001      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 809e 	beq.w	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b52:	4b46      	ldr	r3, [pc, #280]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	4b40      	ldr	r3, [pc, #256]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b74:	4b3d      	ldr	r3, [pc, #244]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b84:	4b3a      	ldr	r3, [pc, #232]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a39      	ldr	r2, [pc, #228]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b90:	f7fd fe38 	bl	8000804 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b96:	e009      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b98:	f7fd fe34 	bl	8000804 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	74fb      	strb	r3, [r7, #19]
        break;
 8002baa:	e005      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bac:	4b30      	ldr	r3, [pc, #192]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ef      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d15a      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01e      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d019      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002be6:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	4a1f      	ldr	r2, [pc, #124]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c06:	4a19      	ldr	r2, [pc, #100]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d016      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fd fdf4 	bl	8000804 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fd fdf0 	bl	8000804 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d902      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	74fb      	strb	r3, [r7, #19]
            break;
 8002c36:	e006      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ec      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4c:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5a:	4904      	ldr	r1, [pc, #16]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c62:	e009      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c78:	7c7b      	ldrb	r3, [r7, #17]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	4a89      	ldr	r2, [pc, #548]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c96:	4b84      	ldr	r3, [pc, #528]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9c:	f023 0203 	bic.w	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4980      	ldr	r1, [pc, #512]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cbe:	f023 020c 	bic.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	4978      	ldr	r1, [pc, #480]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cda:	4b73      	ldr	r3, [pc, #460]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	496f      	ldr	r1, [pc, #444]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d02:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0a:	4967      	ldr	r1, [pc, #412]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d24:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2c:	495e      	ldr	r1, [pc, #376]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d40:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	4956      	ldr	r1, [pc, #344]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d62:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	494d      	ldr	r1, [pc, #308]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d028      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d84:	4b48      	ldr	r3, [pc, #288]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	4945      	ldr	r1, [pc, #276]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da4:	4b40      	ldr	r3, [pc, #256]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dae:	60d3      	str	r3, [r2, #12]
 8002db0:	e011      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f872 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	492d      	ldr	r1, [pc, #180]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e0c:	60d3      	str	r3, [r2, #12]
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f843 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01c      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e40:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4e:	4916      	ldr	r1, [pc, #88]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f820 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e94:	4904      	ldr	r1, [pc, #16]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eba:	4b74      	ldr	r3, [pc, #464]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ec6:	4b71      	ldr	r3, [pc, #452]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0203 	and.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ede:	4b6b      	ldr	r3, [pc, #428]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
       ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d047      	beq.n	8002f82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
 8002ef6:	e044      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d018      	beq.n	8002f32 <RCCEx_PLLSAI1_Config+0x86>
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d825      	bhi.n	8002f50 <RCCEx_PLLSAI1_Config+0xa4>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d002      	beq.n	8002f0e <RCCEx_PLLSAI1_Config+0x62>
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d009      	beq.n	8002f20 <RCCEx_PLLSAI1_Config+0x74>
 8002f0c:	e020      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1e:	e01a      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f20:	4b5a      	ldr	r3, [pc, #360]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d116      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e013      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f32:	4b56      	ldr	r3, [pc, #344]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f3e:	4b53      	ldr	r3, [pc, #332]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f4e:	e006      	b.n	8002f5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      break;
 8002f54:	e004      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f66:	4b49      	ldr	r3, [pc, #292]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	4943      	ldr	r1, [pc, #268]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d17c      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f88:	4b40      	ldr	r3, [pc, #256]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fd fc36 	bl	8000804 <HAL_GetTick>
 8002f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f9a:	e009      	b.n	8002fb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f9c:	f7fd fc32 	bl	8000804 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	73fb      	strb	r3, [r7, #15]
        break;
 8002fae:	e005      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fb0:	4b36      	ldr	r3, [pc, #216]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ef      	bne.n	8002f9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d15f      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d110      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc8:	4b30      	ldr	r3, [pc, #192]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002fd0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	06d2      	lsls	r2, r2, #27
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	492a      	ldr	r1, [pc, #168]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
 8002fe8:	e027      	b.n	800303a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d112      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff0:	4b26      	ldr	r3, [pc, #152]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ff8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	0211      	lsls	r1, r2, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6912      	ldr	r2, [r2, #16]
 8003006:	0852      	lsrs	r2, r2, #1
 8003008:	3a01      	subs	r2, #1
 800300a:	0552      	lsls	r2, r2, #21
 800300c:	430a      	orrs	r2, r1
 800300e:	491f      	ldr	r1, [pc, #124]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	610b      	str	r3, [r1, #16]
 8003014:	e011      	b.n	800303a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003016:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800301e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	0211      	lsls	r1, r2, #8
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6952      	ldr	r2, [r2, #20]
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0652      	lsls	r2, r2, #25
 8003032:	430a      	orrs	r2, r1
 8003034:	4915      	ldr	r1, [pc, #84]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800303a:	4b14      	ldr	r3, [pc, #80]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a13      	ldr	r2, [pc, #76]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003040:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003044:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fd fbdd 	bl	8000804 <HAL_GetTick>
 800304a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304c:	e009      	b.n	8003062 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304e:	f7fd fbd9 	bl	8000804 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d902      	bls.n	8003062 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	73fb      	strb	r3, [r7, #15]
          break;
 8003060:	e005      	b.n	800306e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ef      	beq.n	800304e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4903      	ldr	r1, [pc, #12]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000

08003090 <memset>:
 8003090:	4402      	add	r2, r0
 8003092:	4603      	mov	r3, r0
 8003094:	4293      	cmp	r3, r2
 8003096:	d100      	bne.n	800309a <memset+0xa>
 8003098:	4770      	bx	lr
 800309a:	f803 1b01 	strb.w	r1, [r3], #1
 800309e:	e7f9      	b.n	8003094 <memset+0x4>

080030a0 <__libc_init_array>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4d0d      	ldr	r5, [pc, #52]	@ (80030d8 <__libc_init_array+0x38>)
 80030a4:	4c0d      	ldr	r4, [pc, #52]	@ (80030dc <__libc_init_array+0x3c>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	2600      	movs	r6, #0
 80030ac:	42a6      	cmp	r6, r4
 80030ae:	d109      	bne.n	80030c4 <__libc_init_array+0x24>
 80030b0:	4d0b      	ldr	r5, [pc, #44]	@ (80030e0 <__libc_init_array+0x40>)
 80030b2:	4c0c      	ldr	r4, [pc, #48]	@ (80030e4 <__libc_init_array+0x44>)
 80030b4:	f000 f818 	bl	80030e8 <_init>
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	2600      	movs	r6, #0
 80030be:	42a6      	cmp	r6, r4
 80030c0:	d105      	bne.n	80030ce <__libc_init_array+0x2e>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c8:	4798      	blx	r3
 80030ca:	3601      	adds	r6, #1
 80030cc:	e7ee      	b.n	80030ac <__libc_init_array+0xc>
 80030ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d2:	4798      	blx	r3
 80030d4:	3601      	adds	r6, #1
 80030d6:	e7f2      	b.n	80030be <__libc_init_array+0x1e>
 80030d8:	08003140 	.word	0x08003140
 80030dc:	08003140 	.word	0x08003140
 80030e0:	08003140 	.word	0x08003140
 80030e4:	08003144 	.word	0x08003144

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
