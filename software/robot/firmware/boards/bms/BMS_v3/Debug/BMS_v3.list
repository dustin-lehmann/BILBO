
BMS_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e1c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004fa8  08004fa8  00005fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe8  08004fe8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fe8  08004fe8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fe8  08004fe8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe8  08004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fec  08004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ff0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08004ffc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004ffc  00006140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f049  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027da  00000000  00000000  00015085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00017860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  000185f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021369  00000000  00000000  0001903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f929  00000000  00000000  0003a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceb92  00000000  00000000  00049cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  001188a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0011c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004f90 	.word	0x08004f90

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004f90 	.word	0x08004f90

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fbdb 	bl	800098a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f846 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f974 	bl	80004c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001dc:	f000 f8f2 	bl	80003c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80001e0:	f000 f88c 	bl	80002fc <MX_ADC1_Init>
  MX_I2C3_Init();
 80001e4:	f000 f92e 	bl	8000444 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  firmware();
 80001e8:	f004 fce6 	bl	8004bb8 <firmware>

  HAL_Delay(250);
 80001ec:	20fa      	movs	r0, #250	@ 0xfa
 80001ee:	f000 fc41 	bl	8000a74 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(OUT_4_GPIO_Port, OUT_4_Pin, 1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2180      	movs	r1, #128	@ 0x80
 80001f6:	481a      	ldr	r0, [pc, #104]	@ (8000260 <main+0x94>)
 80001f8:	f001 fdf2 	bl	8001de0 <HAL_GPIO_WritePin>

	  if (HAL_GPIO_ReadPin(DETECT_CHG_GPIO_Port, DETECT_CHG_Pin)) {
 80001fc:	2140      	movs	r1, #64	@ 0x40
 80001fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000202:	f001 fdd5 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d00f      	beq.n	800022c <main+0x60>
		  HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, 1);
 800020c:	2201      	movs	r2, #1
 800020e:	2120      	movs	r1, #32
 8000210:	4813      	ldr	r0, [pc, #76]	@ (8000260 <main+0x94>)
 8000212:	f001 fde5 	bl	8001de0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	2108      	movs	r1, #8
 800021a:	4811      	ldr	r0, [pc, #68]	@ (8000260 <main+0x94>)
 800021c:	f001 fde0 	bl	8001de0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, 1);
 8000220:	2201      	movs	r2, #1
 8000222:	2140      	movs	r1, #64	@ 0x40
 8000224:	480e      	ldr	r0, [pc, #56]	@ (8000260 <main+0x94>)
 8000226:	f001 fddb 	bl	8001de0 <HAL_GPIO_WritePin>
 800022a:	e00e      	b.n	800024a <main+0x7e>
	  } else {
		  HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2120      	movs	r1, #32
 8000230:	480b      	ldr	r0, [pc, #44]	@ (8000260 <main+0x94>)
 8000232:	f001 fdd5 	bl	8001de0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2108      	movs	r1, #8
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <main+0x94>)
 800023c:	f001 fdd0 	bl	8001de0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2140      	movs	r1, #64	@ 0x40
 8000244:	4806      	ldr	r0, [pc, #24]	@ (8000260 <main+0x94>)
 8000246:	f001 fdcb 	bl	8001de0 <HAL_GPIO_WritePin>
	  }

	  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 800024a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800024e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000252:	f001 fddd 	bl	8001e10 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000256:	20fa      	movs	r0, #250	@ 0xfa
 8000258:	f000 fc0c 	bl	8000a74 <HAL_Delay>
	  HAL_GPIO_WritePin(OUT_4_GPIO_Port, OUT_4_Pin, 1);
 800025c:	e7c9      	b.n	80001f2 <main+0x26>
 800025e:	bf00      	nop
 8000260:	48000400 	.word	0x48000400

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	@ 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	@ 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f004 fe5f 	bl	8004f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000286:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800028a:	f003 fb57 	bl	800393c <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000294:	f000 f986 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000298:	2312      	movs	r3, #18
 800029a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ae:	2360      	movs	r3, #96	@ 0x60
 80002b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fb94 	bl	80039e8 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c6:	f000 f96d 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	2301      	movs	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002d2:	2380      	movs	r3, #128	@ 0x80
 80002d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	463b      	mov	r3, r7
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 ff94 	bl	8004210 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ee:	f000 f959 	bl	80005a4 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3758      	adds	r7, #88	@ 0x58
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	463b      	mov	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000312:	4b29      	ldr	r3, [pc, #164]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000314:	4a29      	ldr	r2, [pc, #164]	@ (80003bc <MX_ADC1_Init+0xc0>)
 8000316:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000318:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031e:	4b26      	ldr	r3, [pc, #152]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b23      	ldr	r3, [pc, #140]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 800033e:	2200      	movs	r2, #0
 8000340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000342:	4b1d      	ldr	r3, [pc, #116]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000344:	2201      	movs	r2, #1
 8000346:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 800034a:	2200      	movs	r2, #0
 800034c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000352:	2200      	movs	r2, #0
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000358:	2200      	movs	r2, #0
 800035a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 800035e:	2200      	movs	r2, #0
 8000360:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000366:	2200      	movs	r2, #0
 8000368:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 800036c:	2200      	movs	r2, #0
 800036e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000372:	4811      	ldr	r0, [pc, #68]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 8000374:	f000 fd2e 	bl	8000dd4 <HAL_ADC_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800037e:	f000 f911 	bl	80005a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_ADC1_Init+0xc4>)
 8000384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2306      	movs	r3, #6
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038e:	237f      	movs	r3, #127	@ 0x7f
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2304      	movs	r3, #4
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0xbc>)
 80003a0:	f000 fe5a 	bl	8001058 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003aa:	f000 f8fb 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000028 	.word	0x20000028
 80003bc:	50040000 	.word	0x50040000
 80003c0:	14f00020 	.word	0x14f00020

080003c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	@ (800043c <MX_I2C1_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000440 <MX_I2C1_Init+0x7c>)
 80003d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 8;
 80003d4:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003d6:	2208      	movs	r2, #8
 80003d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003da:	4b17      	ldr	r3, [pc, #92]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003dc:	2201      	movs	r2, #1
 80003de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003e6:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ec:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f2:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003fe:	480e      	ldr	r0, [pc, #56]	@ (8000438 <MX_I2C1_Init+0x74>)
 8000400:	f001 fd20 	bl	8001e44 <HAL_I2C_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800040a:	f000 f8cb 	bl	80005a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040e:	2100      	movs	r1, #0
 8000410:	4809      	ldr	r0, [pc, #36]	@ (8000438 <MX_I2C1_Init+0x74>)
 8000412:	f003 f9ed 	bl	80037f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800041c:	f000 f8c2 	bl	80005a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000420:	2100      	movs	r1, #0
 8000422:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_I2C1_Init+0x74>)
 8000424:	f003 fa2f 	bl	8003886 <HAL_I2CEx_ConfigDigitalFilter>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8b9 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000008c 	.word	0x2000008c
 800043c:	40005400 	.word	0x40005400
 8000440:	2000090e 	.word	0x2000090e

08000444 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_I2C3_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	@ (80004bc <MX_I2C3_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000450:	4a1b      	ldr	r2, [pc, #108]	@ (80004c0 <MX_I2C3_Init+0x7c>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <MX_I2C3_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000460:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000466:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046c:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <MX_I2C3_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000472:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_I2C3_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800047e:	480e      	ldr	r0, [pc, #56]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000480:	f001 fce0 	bl	8001e44 <HAL_I2C_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800048a:	f000 f88b 	bl	80005a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048e:	2100      	movs	r1, #0
 8000490:	4809      	ldr	r0, [pc, #36]	@ (80004b8 <MX_I2C3_Init+0x74>)
 8000492:	f003 f9ad 	bl	80037f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800049c:	f000 f882 	bl	80005a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80004a0:	2100      	movs	r1, #0
 80004a2:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <MX_I2C3_Init+0x74>)
 80004a4:	f003 f9ef 	bl	8003886 <HAL_I2CEx_ConfigDigitalFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 f879 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200000e0 	.word	0x200000e0
 80004bc:	40005c00 	.word	0x40005c00
 80004c0:	2000090e 	.word	0x2000090e

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b30      	ldr	r3, [pc, #192]	@ (800059c <MX_GPIO_Init+0xd8>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	4a2f      	ldr	r2, [pc, #188]	@ (800059c <MX_GPIO_Init+0xd8>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e6:	4b2d      	ldr	r3, [pc, #180]	@ (800059c <MX_GPIO_Init+0xd8>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b2a      	ldr	r3, [pc, #168]	@ (800059c <MX_GPIO_Init+0xd8>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	4a29      	ldr	r2, [pc, #164]	@ (800059c <MX_GPIO_Init+0xd8>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fe:	4b27      	ldr	r3, [pc, #156]	@ (800059c <MX_GPIO_Init+0xd8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_MEAS_1_Pin|ENABLE_MEAS_3_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f640 0122 	movw	r1, #2082	@ 0x822
 8000510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000514:	f001 fc64 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_MEAS_4_Pin|OUT_2_Pin|OUT_1_Pin|OUT_3_Pin
 8000518:	2200      	movs	r2, #0
 800051a:	21ea      	movs	r1, #234	@ 0xea
 800051c:	4820      	ldr	r0, [pc, #128]	@ (80005a0 <MX_GPIO_Init+0xdc>)
 800051e:	f001 fc5f 	bl	8001de0 <HAL_GPIO_WritePin>
                          |OUT_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENABLE_MEAS_1_Pin ENABLE_MEAS_3_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = ENABLE_MEAS_1_Pin|ENABLE_MEAS_3_Pin|LED_USER_Pin;
 8000522:	f640 0322 	movw	r3, #2082	@ 0x822
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f001 facd 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT_CHG_Pin */
  GPIO_InitStruct.Pin = DETECT_CHG_Pin;
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DETECT_CHG_GPIO_Port, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000558:	f001 fac0 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_MEAS_4_Pin OUT_2_Pin OUT_1_Pin OUT_3_Pin
                           OUT_4_Pin */
  GPIO_InitStruct.Pin = ENABLE_MEAS_4_Pin|OUT_2_Pin|OUT_1_Pin|OUT_3_Pin
 800055c:	23ea      	movs	r3, #234	@ 0xea
 800055e:	60fb      	str	r3, [r7, #12]
                          |OUT_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <MX_GPIO_Init+0xdc>)
 8000574:	f001 fab2 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800057c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057e:	2303      	movs	r3, #3
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f001 faa4 	bl	8001adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000400 	.word	0x48000400

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <Error_Handler+0x8>

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_MspInit+0x44>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ba:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <HAL_MspInit+0x44>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_MspInit+0x44>)
 80005c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <HAL_MspInit+0x44>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005d2:	4a08      	ldr	r2, [pc, #32]	@ (80005f4 <HAL_MspInit+0x44>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <HAL_MspInit+0x44>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a0      	sub	sp, #128	@ 0x80
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	2254      	movs	r2, #84	@ 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f004 fc8c 	bl	8004f36 <memset>
  if(hadc->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a31      	ldr	r2, [pc, #196]	@ (80006e8 <HAL_ADC_MspInit+0xf0>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d15b      	bne.n	80006e0 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000628:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800062e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000632:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000640:	2307      	movs	r3, #7
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800064c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	4618      	mov	r0, r3
 8000658:	f003 ffc6 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000662:	f7ff ff9f 	bl	80005a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a20      	ldr	r2, [pc, #128]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 800066c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a1a      	ldr	r2, [pc, #104]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_ADC_MspInit+0xf4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 80006ae:	2315      	movs	r3, #21
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b2:	230b      	movs	r3, #11
 80006b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f001 fa0a 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c8:	2301      	movs	r3, #1
 80006ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006cc:	230b      	movs	r3, #11
 80006ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <HAL_ADC_MspInit+0xf8>)
 80006dc:	f001 f9fe 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3780      	adds	r7, #128	@ 0x80
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	50040000 	.word	0x50040000
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0a2      	sub	sp, #136	@ 0x88
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	2254      	movs	r2, #84	@ 0x54
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fc0e 	bl	8004f36 <memset>
  if(hi2c->Instance==I2C1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a57      	ldr	r2, [pc, #348]	@ (800087c <HAL_I2C_MspInit+0x188>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d14a      	bne.n	80007ba <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000724:	2340      	movs	r3, #64	@ 0x40
 8000726:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f003 ff59 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800073c:	f7ff ff32 	bl	80005a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b4f      	ldr	r3, [pc, #316]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000744:	4a4e      	ldr	r2, [pc, #312]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074c:	4b4c      	ldr	r3, [pc, #304]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 800074e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000758:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800075c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075e:	2312      	movs	r3, #18
 8000760:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076c:	2304      	movs	r3, #4
 800076e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077c:	f001 f9ae 	bl	8001adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000780:	4b3f      	ldr	r3, [pc, #252]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000784:	4a3e      	ldr	r2, [pc, #248]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000786:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800078a:	6593      	str	r3, [r2, #88]	@ 0x58
 800078c:	4b3c      	ldr	r3, [pc, #240]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	201f      	movs	r0, #31
 800079e:	f001 f918 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007a2:	201f      	movs	r0, #31
 80007a4:	f001 f931 	bl	8001a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2020      	movs	r0, #32
 80007ae:	f001 f910 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007b2:	2020      	movs	r0, #32
 80007b4:	f001 f929 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80007b8:	e05c      	b.n	8000874 <HAL_I2C_MspInit+0x180>
  else if(hi2c->Instance==I2C3)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a31      	ldr	r2, [pc, #196]	@ (8000884 <HAL_I2C_MspInit+0x190>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d157      	bne.n	8000874 <HAL_I2C_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 ff08 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80007de:	f7ff fee1 	bl	80005a4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a26      	ldr	r2, [pc, #152]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000824:	2304      	movs	r3, #4
 8000826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000834:	f001 f952 	bl	8001adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000838:	2310      	movs	r3, #16
 800083a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083c:	2312      	movs	r3, #18
 800083e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800084a:	2304      	movs	r3, #4
 800084c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	@ (8000888 <HAL_I2C_MspInit+0x194>)
 8000858:	f001 f940 	bl	8001adc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000860:	4a07      	ldr	r2, [pc, #28]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 8000862:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000866:	6593      	str	r3, [r2, #88]	@ 0x58
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_I2C_MspInit+0x18c>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	bf00      	nop
 8000876:	3788      	adds	r7, #136	@ 0x88
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40005400 	.word	0x40005400
 8000880:	40021000 	.word	0x40021000
 8000884:	40005c00 	.word	0x40005c00
 8000888:	48000400 	.word	0x48000400

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <NMI_Handler+0x4>

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 f8a7 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <I2C1_EV_IRQHandler+0x10>)
 80008f2:	f001 fcc7 	bl	8002284 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000008c 	.word	0x2000008c

08000900 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <I2C1_ER_IRQHandler+0x10>)
 8000906:	f001 fcd7 	bl	80022b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c

08000914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff ffea 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	@ (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f004 faef 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096a:	f7ff fc2f 	bl	80001cc <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000970:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	08004ff0 	.word	0x08004ff0
  ldr r2, =_sbss
 8000980:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000984:	20000140 	.word	0x20000140

08000988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_IRQHandler>

0800098a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000990:	2300      	movs	r3, #0
 8000992:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f001 f811 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f80e 	bl	80009bc <HAL_InitTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	e001      	b.n	80009b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ac:	f7ff fe00 	bl	80005b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_InitTick+0x6c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d023      	beq.n	8000a18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <HAL_InitTick+0x70>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_InitTick+0x6c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f81d 	bl	8001a26 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10f      	bne.n	8000a12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d809      	bhi.n	8000a0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a00:	f000 ffe7 	bl	80019d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_InitTick+0x74>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e007      	b.n	8000a1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	e004      	b.n	8000a1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e001      	b.n	8000a1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000134 	.word	0x20000134

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000134 	.word	0x20000134

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008

08000abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	609a      	str	r2, [r3, #8]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3360      	adds	r3, #96	@ 0x60
 8000b36:	461a      	mov	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <LL_ADC_SetOffset+0x44>)
 8000b46:	4013      	ands	r3, r2
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	4313      	orrs	r3, r2
 8000b54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	03fff000 	.word	0x03fff000

08000b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3360      	adds	r3, #96	@ 0x60
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3360      	adds	r3, #96	@ 0x60
 8000ba8:	461a      	mov	r2, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bc2:	bf00      	nop
 8000bc4:	371c      	adds	r7, #28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3330      	adds	r3, #48	@ 0x30
 8000bde:	461a      	mov	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	4413      	add	r3, r2
 8000bec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	f003 031f 	and.w	r3, r3, #31
 8000bf8:	211f      	movs	r1, #31
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0e9b      	lsrs	r3, r3, #26
 8000c06:	f003 011f 	and.w	r1, r3, #31
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	f003 031f 	and.w	r3, r3, #31
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	431a      	orrs	r2, r3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b087      	sub	sp, #28
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3314      	adds	r3, #20
 8000c36:	461a      	mov	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	0e5b      	lsrs	r3, r3, #25
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	4413      	add	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	0d1b      	lsrs	r3, r3, #20
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	2107      	movs	r1, #7
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	0d1b      	lsrs	r3, r3, #20
 8000c60:	f003 031f 	and.w	r3, r3, #31
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0318 	and.w	r3, r3, #24
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ca0:	40d9      	lsrs	r1, r3
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000caa:	431a      	orrs	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	0007ffff 	.word	0x0007ffff

08000cc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000cd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6093      	str	r3, [r2, #8]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cfc:	d101      	bne.n	8000d02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d4c:	d101      	bne.n	8000d52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <LL_ADC_IsEnabled+0x18>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <LL_ADC_IsEnabled+0x1a>
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d101      	bne.n	8000d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d101      	bne.n	8000dc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e126      	b.n	800103c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fbfb 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff67 	bl	8000ce8 <LL_ADC_IsDeepPowerDownEnabled>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff4d 	bl	8000cc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff82 	bl	8000d38 <LL_ADC_IsInternalRegulatorEnabled>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d115      	bne.n	8000e66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff66 	bl	8000d10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e44:	4b7f      	ldr	r3, [pc, #508]	@ (8001044 <HAL_ADC_Init+0x270>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	099b      	lsrs	r3, r3, #6
 8000e4a:	4a7f      	ldr	r2, [pc, #508]	@ (8001048 <HAL_ADC_Init+0x274>)
 8000e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e50:	099b      	lsrs	r3, r3, #6
 8000e52:	3301      	adds	r3, #1
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e58:	e002      	b.n	8000e60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f9      	bne.n	8000e5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff64 	bl	8000d38 <LL_ADC_IsInternalRegulatorEnabled>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7a:	f043 0210 	orr.w	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff75 	bl	8000d86 <LL_ADC_REG_IsConversionOngoing>
 8000e9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80bf 	bne.w	800102a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 80bb 	bne.w	800102a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ebc:	f043 0202 	orr.w	r2, r3, #2
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff49 	bl	8000d60 <LL_ADC_IsEnabled>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ed4:	485d      	ldr	r0, [pc, #372]	@ (800104c <HAL_ADC_Init+0x278>)
 8000ed6:	f7ff ff43 	bl	8000d60 <LL_ADC_IsEnabled>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	485a      	ldr	r0, [pc, #360]	@ (8001050 <HAL_ADC_Init+0x27c>)
 8000ee8:	f7ff fde8 	bl	8000abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e5b      	ldrb	r3, [r3, #25]
 8000ef0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ef6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000efc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f02:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f0a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d106      	bne.n	8000f28 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	045b      	lsls	r3, r3, #17
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	4b42      	ldr	r3, [pc, #264]	@ (8001054 <HAL_ADC_Init+0x280>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff25 	bl	8000dac <LL_ADC_INJ_IsConversionOngoing>
 8000f62:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d13d      	bne.n	8000fe6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d13a      	bne.n	8000fe6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f74:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f7c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	69b9      	ldr	r1, [r7, #24]
 8000f96:	430b      	orrs	r3, r1
 8000f98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d118      	bne.n	8000fd6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fba:	4311      	orrs	r1, r2
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	e007      	b.n	8000fe6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10c      	bne.n	8001008 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	f023 010f 	bic.w	r1, r3, #15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	1e5a      	subs	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	631a      	str	r2, [r3, #48]	@ 0x30
 8001006:	e007      	b.n	8001018 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 020f 	bic.w	r2, r2, #15
 8001016:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101c:	f023 0303 	bic.w	r3, r3, #3
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	655a      	str	r2, [r3, #84]	@ 0x54
 8001028:	e007      	b.n	800103a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102e:	f043 0210 	orr.w	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800103a:	7ffb      	ldrb	r3, [r7, #31]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	053e2d63 	.word	0x053e2d63
 800104c:	50040000 	.word	0x50040000
 8001050:	50040300 	.word	0x50040300
 8001054:	fff0c007 	.word	0xfff0c007

08001058 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0b6      	sub	sp, #216	@ 0xd8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_ConfigChannel+0x22>
 8001076:	2302      	movs	r3, #2
 8001078:	e3bb      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x79a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe7d 	bl	8000d86 <LL_ADC_REG_IsConversionOngoing>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 83a0 	bne.w	80017d4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d824      	bhi.n	80010ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	3b02      	subs	r3, #2
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d81b      	bhi.n	80010e6 <HAL_ADC_ConfigChannel+0x8e>
 80010ae:	a201      	add	r2, pc, #4	@ (adr r2, 80010b4 <HAL_ADC_ConfigChannel+0x5c>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080010c5 	.word	0x080010c5
 80010b8:	080010cd 	.word	0x080010cd
 80010bc:	080010d5 	.word	0x080010d5
 80010c0:	080010dd 	.word	0x080010dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80010c4:	230c      	movs	r3, #12
 80010c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010ca:	e010      	b.n	80010ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80010cc:	2312      	movs	r3, #18
 80010ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010d2:	e00c      	b.n	80010ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80010d4:	2318      	movs	r3, #24
 80010d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010da:	e008      	b.n	80010ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80010dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010e4:	e003      	b.n	80010ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80010fc:	f7ff fd67 	bl	8000bce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fe3e 	bl	8000d86 <LL_ADC_REG_IsConversionOngoing>
 800110a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe4a 	bl	8000dac <LL_ADC_INJ_IsConversionOngoing>
 8001118:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800111c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001120:	2b00      	cmp	r3, #0
 8001122:	f040 81a4 	bne.w	800146e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 819f 	bne.w	800146e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	461a      	mov	r2, r3
 800113e:	f7ff fd72 	bl	8000c26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d00a      	beq.n	800117a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6919      	ldr	r1, [r3, #16]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001174:	f7ff fcd6 	bl	8000b24 <LL_ADC_SetOffset>
 8001178:	e179      	b.n	800146e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fcf3 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10a      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x14e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fce8 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	0e9b      	lsrs	r3, r3, #26
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	e01e      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x18c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fcdd 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80011d4:	2320      	movs	r3, #32
 80011d6:	e004      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80011d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1a4>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0e9b      	lsrs	r3, r3, #26
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	e018      	b.n	800122e <HAL_ADC_ConfigChannel+0x1d6>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001218:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001220:	2320      	movs	r3, #32
 8001222:	e004      	b.n	800122e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800122e:	429a      	cmp	r2, r3
 8001230:	d106      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fcac 	bl	8000b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc90 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10a      	bne.n	800126c <HAL_ADC_ConfigChannel+0x214>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fc85 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	0e9b      	lsrs	r3, r3, #26
 8001266:	f003 021f 	and.w	r2, r3, #31
 800126a:	e01e      	b.n	80012aa <HAL_ADC_ConfigChannel+0x252>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fc7a 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800128a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800128e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800129a:	2320      	movs	r3, #32
 800129c:	e004      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800129e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x26a>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	0e9b      	lsrs	r3, r3, #26
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	e018      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x29c>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80012d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80012de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e004      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80012ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d106      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	2101      	movs	r1, #1
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fc49 	bl	8000b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2102      	movs	r1, #2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fc2d 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10a      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x2da>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2102      	movs	r1, #2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc22 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	0e9b      	lsrs	r3, r3, #26
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	e01e      	b.n	8001370 <HAL_ADC_ConfigChannel+0x318>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2102      	movs	r1, #2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fc17 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001358:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001360:	2320      	movs	r3, #32
 8001362:	e004      	b.n	800136e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x330>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0e9b      	lsrs	r3, r3, #26
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	e014      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x35a>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001396:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800139c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80013a4:	2320      	movs	r3, #32
 80013a6:	e004      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80013a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d106      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fbea 	bl	8000b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2103      	movs	r1, #3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fbce 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x398>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2103      	movs	r1, #3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fbc3 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	0e9b      	lsrs	r3, r3, #26
 80013ea:	f003 021f 	and.w	r2, r3, #31
 80013ee:	e017      	b.n	8001420 <HAL_ADC_ConfigChannel+0x3c8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2103      	movs	r1, #3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fbb8 	bl	8000b6c <LL_ADC_GetOffsetChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800140a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800140c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001412:	2320      	movs	r3, #32
 8001414:	e003      	b.n	800141e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x3e0>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	e011      	b.n	800145c <HAL_ADC_ConfigChannel+0x404>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001448:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800144a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001450:	2320      	movs	r3, #32
 8001452:	e003      	b.n	800145c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800145c:	429a      	cmp	r2, r3
 800145e:	d106      	bne.n	800146e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	2103      	movs	r1, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb95 	bl	8000b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc74 	bl	8000d60 <LL_ADC_IsEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8140 	bne.w	8001700 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	461a      	mov	r2, r3
 800148e:	f7ff fbf5 	bl	8000c7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	4a8f      	ldr	r2, [pc, #572]	@ (80016d4 <HAL_ADC_ConfigChannel+0x67c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	f040 8131 	bne.w	8001700 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x46e>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0e9b      	lsrs	r3, r3, #26
 80014b4:	3301      	adds	r3, #1
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2b09      	cmp	r3, #9
 80014bc:	bf94      	ite	ls
 80014be:	2301      	movls	r3, #1
 80014c0:	2300      	movhi	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	e019      	b.n	80014fa <HAL_ADC_ConfigChannel+0x4a2>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80014d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80014d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80014de:	2320      	movs	r3, #32
 80014e0:	e003      	b.n	80014ea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80014e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d079      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_ADC_ConfigChannel+0x4c2>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0e9b      	lsrs	r3, r3, #26
 8001510:	3301      	adds	r3, #1
 8001512:	069b      	lsls	r3, r3, #26
 8001514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001518:	e015      	b.n	8001546 <HAL_ADC_ConfigChannel+0x4ee>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800152a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800152c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001532:	2320      	movs	r3, #32
 8001534:	e003      	b.n	800153e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	069b      	lsls	r3, r3, #26
 8001542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x50e>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e9b      	lsrs	r3, r3, #26
 8001558:	3301      	adds	r3, #1
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	e017      	b.n	8001596 <HAL_ADC_ConfigChannel+0x53e>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001576:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800157e:	2320      	movs	r3, #32
 8001580:	e003      	b.n	800158a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	ea42 0103 	orr.w	r1, r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x564>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0e9b      	lsrs	r3, r3, #26
 80015ac:	3301      	adds	r3, #1
 80015ae:	f003 021f 	and.w	r2, r3, #31
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	051b      	lsls	r3, r3, #20
 80015ba:	e018      	b.n	80015ee <HAL_ADC_ConfigChannel+0x596>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80015ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80015ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80015d4:	2320      	movs	r3, #32
 80015d6:	e003      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80015d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	f003 021f 	and.w	r2, r3, #31
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015ee:	430b      	orrs	r3, r1
 80015f0:	e081      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <HAL_ADC_ConfigChannel+0x5b6>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	3301      	adds	r3, #1
 8001606:	069b      	lsls	r3, r3, #26
 8001608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800160c:	e015      	b.n	800163a <HAL_ADC_ConfigChannel+0x5e2>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001626:	2320      	movs	r3, #32
 8001628:	e003      	b.n	8001632 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3301      	adds	r3, #1
 8001634:	069b      	lsls	r3, r3, #26
 8001636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ADC_ConfigChannel+0x602>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	3301      	adds	r3, #1
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	e017      	b.n	800168a <HAL_ADC_ConfigChannel+0x632>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	61bb      	str	r3, [r7, #24]
  return result;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001672:	2320      	movs	r3, #32
 8001674:	e003      	b.n	800167e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	ea42 0103 	orr.w	r1, r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x65e>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0e9b      	lsrs	r3, r3, #26
 80016a0:	3301      	adds	r3, #1
 80016a2:	f003 021f 	and.w	r2, r3, #31
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	3b1e      	subs	r3, #30
 80016ae:	051b      	lsls	r3, r3, #20
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016b4:	e01e      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x69c>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  return result;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d104      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80016ce:	2320      	movs	r3, #32
 80016d0:	e006      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x688>
 80016d2:	bf00      	nop
 80016d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	f003 021f 	and.w	r2, r3, #31
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	3b1e      	subs	r3, #30
 80016ee:	051b      	lsls	r3, r3, #20
 80016f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa93 	bl	8000c26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <HAL_ADC_ConfigChannel+0x7a4>)
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d06c      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800170c:	483c      	ldr	r0, [pc, #240]	@ (8001800 <HAL_ADC_ConfigChannel+0x7a8>)
 800170e:	f7ff f9fb 	bl	8000b08 <LL_ADC_GetCommonPathInternalCh>
 8001712:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3a      	ldr	r2, [pc, #232]	@ (8001804 <HAL_ADC_ConfigChannel+0x7ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d127      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d121      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a35      	ldr	r2, [pc, #212]	@ (8001808 <HAL_ADC_ConfigChannel+0x7b0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d157      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800173a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800173e:	4619      	mov	r1, r3
 8001740:	482f      	ldr	r0, [pc, #188]	@ (8001800 <HAL_ADC_ConfigChannel+0x7a8>)
 8001742:	f7ff f9ce 	bl	8000ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <HAL_ADC_ConfigChannel+0x7b4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	099b      	lsrs	r3, r3, #6
 800174c:	4a30      	ldr	r2, [pc, #192]	@ (8001810 <HAL_ADC_ConfigChannel+0x7b8>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001760:	e002      	b.n	8001768 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800176e:	e03a      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <HAL_ADC_ConfigChannel+0x7bc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d113      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800177a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800177e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10d      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <HAL_ADC_ConfigChannel+0x7b0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d12a      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001794:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001798:	4619      	mov	r1, r3
 800179a:	4819      	ldr	r0, [pc, #100]	@ (8001800 <HAL_ADC_ConfigChannel+0x7a8>)
 800179c:	f7ff f9a1 	bl	8000ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017a0:	e021      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <HAL_ADC_ConfigChannel+0x7c0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d11c      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d116      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <HAL_ADC_ConfigChannel+0x7b0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d111      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <HAL_ADC_ConfigChannel+0x7a8>)
 80017ce:	f7ff f988 	bl	8000ae2 <LL_ADC_SetCommonPathInternalCh>
 80017d2:	e008      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d8:	f043 0220 	orr.w	r2, r3, #32
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80017ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	37d8      	adds	r7, #216	@ 0xd8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	80080000 	.word	0x80080000
 8001800:	50040300 	.word	0x50040300
 8001804:	c7520000 	.word	0xc7520000
 8001808:	50040000 	.word	0x50040000
 800180c:	20000000 	.word	0x20000000
 8001810:	053e2d63 	.word	0x053e2d63
 8001814:	cb840000 	.word	0xcb840000
 8001818:	80000001 	.word	0x80000001

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d005      	beq.n	8001a62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e029      	b.n	8001ab6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 020e 	bic.w	r2, r2, #14
 8001a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f003 021c 	and.w	r2, r3, #28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
    }
  }
  return status;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ace:	b2db      	uxtb	r3, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e148      	b.n	8001d7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 813a 	beq.w	8001d78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_Init+0x40>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 0201 	and.w	r2, r3, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d017      	beq.n	8001bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d123      	bne.n	8001c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	6939      	ldr	r1, [r7, #16]
 8001c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0203 	and.w	r2, r3, #3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8094 	beq.w	8001d78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	4b52      	ldr	r3, [pc, #328]	@ (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c54:	4a51      	ldr	r2, [pc, #324]	@ (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c68:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1d4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a43      	ldr	r2, [pc, #268]	@ (8001da4 <HAL_GPIO_Init+0x2c8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1d0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <HAL_GPIO_Init+0x2cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e004      	b.n	8001cb2 <HAL_GPIO_Init+0x1d6>
 8001ca8:	2307      	movs	r3, #7
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x1d6>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_Init+0x1d6>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc2:	4937      	ldr	r1, [pc, #220]	@ (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd0:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d1e:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d24:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d48:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d72:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f aeaf 	bne.w	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	48000400 	.word	0x48000400
 8001da8:	48000800 	.word	0x48000800
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43d9      	mvns	r1, r3
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	400b      	ands	r3, r1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e08d      	b.n	8001f72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fc42 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	@ 0x24
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d108      	bne.n	8001ee6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	e007      	b.n	8001ef6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69d9      	ldr	r1, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001f98:	2b28      	cmp	r3, #40	@ 0x28
 8001f9a:	f040 8098 	bne.w	80020ce <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e08c      	b.n	80020d0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001fb6:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f001 fbba 	bl	8003734 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e080      	b.n	80020d0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fe0:	d12a      	bne.n	8002038 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f001 fba5 	bl	8003734 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff8:	d11e      	bne.n	8002038 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002008:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002016:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8002018:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd0d 	bl	8001a3e <HAL_DMA_Abort_IT>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002034:	4610      	mov	r0, r2
 8002036:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2229      	movs	r2, #41	@ 0x29
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b08      	cmp	r3, #8
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d106      	bne.n	80020b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2208      	movs	r2, #8
 80020b6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80020c0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f001 fab1 	bl	800362c <I2C_Enable_IRQ>

    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
  }
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	0800358b 	.word	0x0800358b
 80020dc:	080023bf 	.word	0x080023bf

080020e0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80020fc:	2b28      	cmp	r3, #40	@ 0x28
 80020fe:	f040 8098 	bne.w	8002232 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e08c      	b.n	8002234 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800211a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f001 fb08 	bl	8003734 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800212e:	2302      	movs	r3, #2
 8002130:	e080      	b.n	8002234 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b29      	cmp	r3, #41	@ 0x29
 8002144:	d12a      	bne.n	800219c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002146:	2101      	movs	r1, #1
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f001 faf3 	bl	8003734 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800215c:	d11e      	bne.n	800219c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800216c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002172:	2b00      	cmp	r3, #0
 8002174:	d012      	beq.n	800219c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	4a30      	ldr	r2, [pc, #192]	@ (800223c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 800217c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc5b 	bl	8001a3e <HAL_DMA_Abort_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002198:	4610      	mov	r0, r2
 800219a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	222a      	movs	r2, #42	@ 0x2a
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2208      	movs	r2, #8
 800221a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002224:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f001 f9ff 	bl	800362c <I2C_Enable_IRQ>

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	0800358b 	.word	0x0800358b
 8002240:	080023bf 	.word	0x080023bf

08002244 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	d10d      	bne.n	8002274 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2228      	movs	r2, #40	@ 0x28
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a07      	ldr	r2, [pc, #28]	@ (8002280 <HAL_I2C_EnableListen_IT+0x3c>)
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f001 f9de 	bl	800362c <I2C_Enable_IRQ>

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	080023bf 	.word	0x080023bf

08002284 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
  }
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00f      	beq.n	80022fa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00f      	beq.n	8002324 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f043 0208 	orr.w	r2, r3, #8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002322:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00f      	beq.n	800234e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 030b 	and.w	r3, r3, #11
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 ffd7 	bl	8003314 <I2C_ITError>
  }
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <I2C_Slave_ISR_IT+0x24>
 80023de:	2302      	movs	r3, #2
 80023e0:	e0e2      	b.n	80025a8 <I2C_Slave_ISR_IT+0x1ea>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80023fe:	6939      	ldr	r1, [r7, #16]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fdcf 	bl	8002fa4 <I2C_ITSlaveCplt>
 8002406:	e0ca      	b.n	800259e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04b      	beq.n	80024aa <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002418:	2b00      	cmp	r3, #0
 800241a:	d046      	beq.n	80024aa <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d128      	bne.n	8002478 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b28      	cmp	r3, #40	@ 0x28
 8002430:	d108      	bne.n	8002444 <I2C_Slave_ISR_IT+0x86>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002438:	d104      	bne.n	8002444 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800243a:	6939      	ldr	r1, [r7, #16]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 ff15 	bl	800326c <I2C_ITListenCplt>
 8002442:	e031      	b.n	80024a8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b29      	cmp	r3, #41	@ 0x29
 800244e:	d10e      	bne.n	800246e <I2C_Slave_ISR_IT+0xb0>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002456:	d00a      	beq.n	800246e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2210      	movs	r2, #16
 800245e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f001 f86e 	bl	8003542 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fc78 	bl	8002d5c <I2C_ITSlaveSeqCplt>
 800246c:	e01c      	b.n	80024a8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002476:	e08f      	b.n	8002598 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2210      	movs	r2, #16
 800247e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <I2C_Slave_ISR_IT+0xdc>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d17e      	bne.n	8002598 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	4619      	mov	r1, r3
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 ff37 	bl	8003314 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80024a6:	e077      	b.n	8002598 <I2C_Slave_ISR_IT+0x1da>
 80024a8:	e076      	b.n	8002598 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02f      	beq.n	8002514 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d02a      	beq.n	8002514 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d018      	beq.n	80024fa <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d14b      	bne.n	800259c <I2C_Slave_ISR_IT+0x1de>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800250a:	d047      	beq.n	800259c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fc25 	bl	8002d5c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002512:	e043      	b.n	800259c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fb55 	bl	8002bda <I2C_ITAddrCplt>
 8002530:	e035      	b.n	800259e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d030      	beq.n	800259e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002542:	2b00      	cmp	r3, #0
 8002544:	d02b      	beq.n	800259e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d018      	beq.n	8002582 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002580:	e00d      	b.n	800259e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002588:	d002      	beq.n	8002590 <I2C_Slave_ISR_IT+0x1d2>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fbe3 	bl	8002d5c <I2C_ITSlaveSeqCplt>
 8002596:	e002      	b.n	800259e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800259c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <I2C_Master_ISR_DMA+0x1a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0e7      	b.n	800279a <I2C_Master_ISR_DMA+0x1ea>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d011      	beq.n	800260a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2210      	movs	r2, #16
 80025ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f043 0204 	orr.w	r2, r3, #4
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80025fa:	2120      	movs	r1, #32
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f001 f815 	bl	800362c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 ff9d 	bl	8003542 <I2C_Flush_TXDR>
 8002608:	e0c2      	b.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d07f      	beq.n	8002714 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07a      	beq.n	8002714 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800262c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05c      	beq.n	80026f2 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002644:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2bff      	cmp	r3, #255	@ 0xff
 800264e:	d914      	bls.n	800267a <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d103      	bne.n	800266c <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	851a      	strh	r2, [r3, #40]	@ 0x28
 800266a:	e002      	b.n	8002672 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	22ff      	movs	r2, #255	@ 0xff
 8002670:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8002672:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e010      	b.n	800269c <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800268c:	d003      	beq.n	8002696 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e002      	b.n	800269c <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002696:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800269a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	8a79      	ldrh	r1, [r7, #18]
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 ff8c 	bl	80035c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b22      	cmp	r3, #34	@ 0x22
 80026cc:	d108      	bne.n	80026e0 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80026de:	e057      	b.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80026f0:	e04e      	b.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002700:	d003      	beq.n	800270a <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 faed 	bl	8002ce2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002708:	e042      	b.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800270a:	2140      	movs	r1, #64	@ 0x40
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fe01 	bl	8003314 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002712:	e03d      	b.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d028      	beq.n	8002770 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d023      	beq.n	8002770 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d119      	bne.n	8002766 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002740:	d025      	beq.n	800278e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800274a:	d108      	bne.n	800275e <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800275a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800275c:	e017      	b.n	800278e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fabf 	bl	8002ce2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002764:	e013      	b.n	800278e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002766:	2140      	movs	r1, #64	@ 0x40
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fdd3 	bl	8003314 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800276e:	e00e      	b.n	800278e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fb44 	bl	8002e14 <I2C_ITMasterCplt>
 800278c:	e000      	b.n	8002790 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800278e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80027b0:	4b90      	ldr	r3, [pc, #576]	@ (80029f4 <I2C_Mem_ISR_DMA+0x250>)
 80027b2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <I2C_Mem_ISR_DMA+0x1e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e12f      	b.n	8002a22 <I2C_Mem_ISR_DMA+0x27e>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d011      	beq.n	8002802 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2210      	movs	r2, #16
 80027e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80027f2:	2120      	movs	r1, #32
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 ff19 	bl	800362c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fea1 	bl	8003542 <I2C_Flush_TXDR>
 8002800:	e10a      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800281e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002826:	651a      	str	r2, [r3, #80]	@ 0x50
 8002828:	e0f6      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d06d      	beq.n	8002910 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800283a:	2b00      	cmp	r3, #0
 800283c:	d068      	beq.n	8002910 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800283e:	2101      	movs	r1, #1
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 ff77 	bl	8003734 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002846:	2110      	movs	r1, #16
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 feef 	bl	800362c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d056      	beq.n	8002906 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2bff      	cmp	r3, #255	@ 0xff
 8002860:	d91e      	bls.n	80028a0 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d103      	bne.n	800287e <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800287c:	e002      	b.n	8002884 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	22ff      	movs	r2, #255	@ 0xff
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002888:	b299      	uxth	r1, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	b2da      	uxtb	r2, r3
 8002890:	2300      	movs	r3, #0
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fe95 	bl	80035c8 <I2C_TransferConfig>
 800289e:	e011      	b.n	80028c4 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	b299      	uxth	r1, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fe82 	bl	80035c8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b22      	cmp	r3, #34	@ 0x22
 80028e0:	d108      	bne.n	80028f4 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80028f2:	e091      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002902:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002904:	e088      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002906:	2140      	movs	r1, #64	@ 0x40
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fd03 	bl	8003314 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800290e:	e083      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d070      	beq.n	80029fc <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002920:	2b00      	cmp	r3, #0
 8002922:	d06b      	beq.n	80029fc <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002924:	2101      	movs	r1, #1
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 ff04 	bl	8003734 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800292c:	2110      	movs	r1, #16
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fe7c 	bl	800362c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b22      	cmp	r3, #34	@ 0x22
 800293e:	d101      	bne.n	8002944 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002940:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <I2C_Mem_ISR_DMA+0x254>)
 8002942:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2bff      	cmp	r3, #255	@ 0xff
 800294c:	d91e      	bls.n	800298c <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d103      	bne.n	800296a <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002968:	e002      	b.n	8002970 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	@ 0xff
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	b299      	uxth	r1, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	b2da      	uxtb	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fe1f 	bl	80035c8 <I2C_TransferConfig>
 800298a:	e011      	b.n	80029b0 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	b299      	uxth	r1, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fe0c 	bl	80035c8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b22      	cmp	r3, #34	@ 0x22
 80029cc:	d108      	bne.n	80029e0 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029dc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029de:	e01b      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ee:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f0:	e012      	b.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
 80029f2:	bf00      	nop
 80029f4:	80002000 	.word	0x80002000
 80029f8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f9fe 	bl	8002e14 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop

08002a2c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <I2C_Slave_ISR_DMA+0x24>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e0c0      	b.n	8002bd2 <I2C_Slave_ISR_DMA+0x1a6>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fa98 	bl	8002fa4 <I2C_ITSlaveCplt>
 8002a74:	e0a8      	b.n	8002bc8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8095 	beq.w	8002bac <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 808f 	beq.w	8002bac <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07d      	beq.n	8002b9e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00c      	beq.n	8002ae6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d128      	bne.n	8002b3e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b28      	cmp	r3, #40	@ 0x28
 8002af6:	d108      	bne.n	8002b0a <I2C_Slave_ISR_DMA+0xde>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002afe:	d104      	bne.n	8002b0a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fbb2 	bl	800326c <I2C_ITListenCplt>
 8002b08:	e048      	b.n	8002b9c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b29      	cmp	r3, #41	@ 0x29
 8002b14:	d10e      	bne.n	8002b34 <I2C_Slave_ISR_DMA+0x108>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b1c:	d00a      	beq.n	8002b34 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2210      	movs	r2, #16
 8002b24:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fd0b 	bl	8003542 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f915 	bl	8002d5c <I2C_ITSlaveSeqCplt>
 8002b32:	e033      	b.n	8002b9c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002b3c:	e034      	b.n	8002ba8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2210      	movs	r2, #16
 8002b44:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b58:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <I2C_Slave_ISR_DMA+0x13c>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b66:	d11f      	bne.n	8002ba8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b21      	cmp	r3, #33	@ 0x21
 8002b6c:	d002      	beq.n	8002b74 <I2C_Slave_ISR_DMA+0x148>
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b29      	cmp	r3, #41	@ 0x29
 8002b72:	d103      	bne.n	8002b7c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2221      	movs	r2, #33	@ 0x21
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b7a:	e008      	b.n	8002b8e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b22      	cmp	r3, #34	@ 0x22
 8002b80:	d002      	beq.n	8002b88 <I2C_Slave_ISR_DMA+0x15c>
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b86:	d102      	bne.n	8002b8e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2222      	movs	r2, #34	@ 0x22
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	4619      	mov	r1, r3
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fbbd 	bl	8003314 <I2C_ITError>
      if (treatdmanack == 1U)
 8002b9a:	e005      	b.n	8002ba8 <I2C_Slave_ISR_DMA+0x17c>
 8002b9c:	e004      	b.n	8002ba8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ba6:	e00f      	b.n	8002bc8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002ba8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002baa:	e00d      	b.n	8002bc8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f809 	bl	8002bda <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bf0:	2b28      	cmp	r3, #40	@ 0x28
 8002bf2:	d16a      	bne.n	8002cca <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c12:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c2e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d138      	bne.n	8002caa <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	09db      	lsrs	r3, r3, #7
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	89bb      	ldrh	r3, [r7, #12]
 8002c40:	4053      	eors	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f003 0306 	and.w	r3, r3, #6
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11c      	bne.n	8002c86 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c4c:	897b      	ldrh	r3, [r7, #10]
 8002c4e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d13b      	bne.n	8002cda <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c78:	89ba      	ldrh	r2, [r7, #12]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 ffe2 	bl	8004c48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c84:	e029      	b.n	8002cda <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fd50 	bl	8003734 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c9c:	89ba      	ldrh	r2, [r7, #12]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f001 ffd0 	bl	8004c48 <HAL_I2C_AddrCallback>
}
 8002ca8:	e017      	b.n	8002cda <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002caa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd40 	bl	8003734 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cbc:	89ba      	ldrh	r2, [r7, #12]
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f001 ffc0 	bl	8004c48 <HAL_I2C_AddrCallback>
}
 8002cc8:	e007      	b.n	8002cda <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2208      	movs	r2, #8
 8002cd0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b21      	cmp	r3, #33	@ 0x21
 8002cfc:	d115      	bne.n	8002d2a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2211      	movs	r2, #17
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d12:	2101      	movs	r1, #1
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fd0d 	bl	8003734 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fb23 	bl	800236e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d28:	e014      	b.n	8002d54 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2212      	movs	r2, #18
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d3e:	2102      	movs	r1, #2
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fcf7 	bl	8003734 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fb17 	bl	8002382 <HAL_I2C_MasterRxCpltCallback>
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e00c      	b.n	8002daa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b29      	cmp	r3, #41	@ 0x29
 8002db4:	d112      	bne.n	8002ddc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2228      	movs	r2, #40	@ 0x28
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2221      	movs	r2, #33	@ 0x21
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fcb4 	bl	8003734 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f001 ff62 	bl	8004c9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dda:	e017      	b.n	8002e0c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002de6:	d111      	bne.n	8002e0c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2228      	movs	r2, #40	@ 0x28
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2222      	movs	r2, #34	@ 0x22
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002df6:	2102      	movs	r1, #2
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fc9b 	bl	8003734 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f001 ff37 	bl	8004c7a <HAL_I2C_SlaveRxCpltCallback>
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b21      	cmp	r3, #33	@ 0x21
 8002e34:	d107      	bne.n	8002e46 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e36:	2101      	movs	r1, #1
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fc7b 	bl	8003734 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2211      	movs	r2, #17
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e44:	e00c      	b.n	8002e60 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b22      	cmp	r3, #34	@ 0x22
 8002e50:	d106      	bne.n	8002e60 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e52:	2102      	movs	r1, #2
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fc6d 	bl	8003734 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2212      	movs	r2, #18
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f9c <I2C_ITMasterCplt+0x188>)
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a49      	ldr	r2, [pc, #292]	@ (8002fa0 <I2C_ITMasterCplt+0x18c>)
 8002e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b60      	cmp	r3, #96	@ 0x60
 8002ea4:	d10a      	bne.n	8002ebc <I2C_ITMasterCplt+0xa8>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002eba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fb40 	bl	8003542 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b60      	cmp	r3, #96	@ 0x60
 8002ed2:	d002      	beq.n	8002eda <I2C_ITMasterCplt+0xc6>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fa17 	bl	8003314 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ee6:	e054      	b.n	8002f92 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b21      	cmp	r3, #33	@ 0x21
 8002ef2:	d124      	bne.n	8002f3e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b40      	cmp	r3, #64	@ 0x40
 8002f0c:	d10b      	bne.n	8002f26 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fa39 	bl	8002396 <HAL_I2C_MemTxCpltCallback>
}
 8002f24:	e035      	b.n	8002f92 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fa19 	bl	800236e <HAL_I2C_MasterTxCpltCallback>
}
 8002f3c:	e029      	b.n	8002f92 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b22      	cmp	r3, #34	@ 0x22
 8002f48:	d123      	bne.n	8002f92 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b40      	cmp	r3, #64	@ 0x40
 8002f62:	d10b      	bne.n	8002f7c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fa18 	bl	80023aa <HAL_I2C_MemRxCpltCallback>
}
 8002f7a:	e00a      	b.n	8002f92 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff f9f8 	bl	8002382 <HAL_I2C_MasterRxCpltCallback>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	fe00e800 	.word	0xfe00e800
 8002fa0:	ffff0000 	.word	0xffff0000

08002fa4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	2b21      	cmp	r3, #33	@ 0x21
 8002fd4:	d002      	beq.n	8002fdc <I2C_ITSlaveCplt+0x38>
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	2b29      	cmp	r3, #41	@ 0x29
 8002fda:	d108      	bne.n	8002fee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002fdc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fba7 	bl	8003734 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2221      	movs	r2, #33	@ 0x21
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fec:	e019      	b.n	8003022 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	2b22      	cmp	r3, #34	@ 0x22
 8002ff2:	d002      	beq.n	8002ffa <I2C_ITSlaveCplt+0x56>
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ff8:	d108      	bne.n	800300c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ffa:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fb98 	bl	8003734 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2222      	movs	r2, #34	@ 0x22
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
 800300a:	e00a      	b.n	8003022 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	2b28      	cmp	r3, #40	@ 0x28
 8003010:	d107      	bne.n	8003022 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003012:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fb8c 	bl	8003734 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003030:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b89      	ldr	r3, [pc, #548]	@ (8003264 <I2C_ITSlaveCplt+0x2c0>)
 800303e:	400b      	ands	r3, r1
 8003040:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa7d 	bl	8003542 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003060:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01f      	beq.n	80030aa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003078:	e017      	b.n	80030aa <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d012      	beq.n	80030aa <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003092:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d049      	beq.n	80031aa <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800311c:	2b00      	cmp	r3, #0
 800311e:	d044      	beq.n	80031aa <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d128      	bne.n	800317c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b28      	cmp	r3, #40	@ 0x28
 8003134:	d108      	bne.n	8003148 <I2C_ITSlaveCplt+0x1a4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800313c:	d104      	bne.n	8003148 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800313e:	6979      	ldr	r1, [r7, #20]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f893 	bl	800326c <I2C_ITListenCplt>
 8003146:	e030      	b.n	80031aa <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b29      	cmp	r3, #41	@ 0x29
 8003152:	d10e      	bne.n	8003172 <I2C_ITSlaveCplt+0x1ce>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800315a:	d00a      	beq.n	8003172 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f9ec 	bl	8003542 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fdf6 	bl	8002d5c <I2C_ITSlaveSeqCplt>
 8003170:	e01b      	b.n	80031aa <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2210      	movs	r2, #16
 8003178:	61da      	str	r2, [r3, #28]
 800317a:	e016      	b.n	80031aa <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2210      	movs	r2, #16
 8003182:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <I2C_ITSlaveCplt+0x1fa>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800319c:	d105      	bne.n	80031aa <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8b5 	bl	8003314 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8a4 	bl	8003314 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b28      	cmp	r3, #40	@ 0x28
 80031d6:	d141      	bne.n	800325c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031d8:	6979      	ldr	r1, [r7, #20]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f846 	bl	800326c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031e0:	e03c      	b.n	800325c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ea:	d014      	beq.n	8003216 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fdb5 	bl	8002d5c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <I2C_ITSlaveCplt+0x2c4>)
 80031f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f001 fd08 	bl	8004c24 <HAL_I2C_ListenCpltCallback>
}
 8003214:	e022      	b.n	800325c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b22      	cmp	r3, #34	@ 0x22
 8003220:	d10e      	bne.n	8003240 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f001 fd1e 	bl	8004c7a <HAL_I2C_SlaveRxCpltCallback>
}
 800323e:	e00d      	b.n	800325c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 fd21 	bl	8004c9e <HAL_I2C_SlaveTxCpltCallback>
}
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	fe00e800 	.word	0xfe00e800
 8003268:	ffff0000 	.word	0xffff0000

0800326c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	@ (8003310 <I2C_ITListenCplt+0xa4>)
 800327a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d022      	beq.n	80032e8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e0:	f043 0204 	orr.w	r2, r3, #4
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032e8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fa21 	bl	8003734 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2210      	movs	r2, #16
 80032f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f001 fc8e 	bl	8004c24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	ffff0000 	.word	0xffff0000

08003314 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003324:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a6d      	ldr	r2, [pc, #436]	@ (80034e8 <I2C_ITError+0x1d4>)
 8003332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b28      	cmp	r3, #40	@ 0x28
 800334a:	d005      	beq.n	8003358 <I2C_ITError+0x44>
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b29      	cmp	r3, #41	@ 0x29
 8003350:	d002      	beq.n	8003358 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b2a      	cmp	r3, #42	@ 0x2a
 8003356:	d10b      	bne.n	8003370 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003358:	2103      	movs	r1, #3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9ea 	bl	8003734 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2228      	movs	r2, #40	@ 0x28
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a60      	ldr	r2, [pc, #384]	@ (80034ec <I2C_ITError+0x1d8>)
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34
 800336e:	e030      	b.n	80033d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003370:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f9dd 	bl	8003734 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8e1 	bl	8003542 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b60      	cmp	r3, #96	@ 0x60
 800338a:	d01f      	beq.n	80033cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d114      	bne.n	80033cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d109      	bne.n	80033c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2210      	movs	r2, #16
 80033b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d039      	beq.n	8003454 <I2C_ITError+0x140>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b11      	cmp	r3, #17
 80033e4:	d002      	beq.n	80033ec <I2C_ITError+0xd8>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b21      	cmp	r3, #33	@ 0x21
 80033ea:	d133      	bne.n	8003454 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033fa:	d107      	bne.n	800340c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800340a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fb55 	bl	8001ac0 <HAL_DMA_GetState>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	d017      	beq.n	800344c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	4a33      	ldr	r2, [pc, #204]	@ (80034f0 <I2C_ITError+0x1dc>)
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fb04 	bl	8001a3e <HAL_DMA_Abort_IT>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d04d      	beq.n	80034d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003446:	4610      	mov	r0, r2
 8003448:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800344a:	e045      	b.n	80034d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f851 	bl	80034f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003452:	e041      	b.n	80034d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d039      	beq.n	80034d0 <I2C_ITError+0x1bc>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b12      	cmp	r3, #18
 8003460:	d002      	beq.n	8003468 <I2C_ITError+0x154>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b22      	cmp	r3, #34	@ 0x22
 8003466:	d133      	bne.n	80034d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003476:	d107      	bne.n	8003488 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003486:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fb17 	bl	8001ac0 <HAL_DMA_GetState>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d017      	beq.n	80034c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	4a14      	ldr	r2, [pc, #80]	@ (80034f0 <I2C_ITError+0x1dc>)
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fac6 	bl	8001a3e <HAL_DMA_Abort_IT>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d011      	beq.n	80034dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034c2:	4610      	mov	r0, r2
 80034c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034c6:	e009      	b.n	80034dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f813 	bl	80034f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ce:	e005      	b.n	80034dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f80f 	bl	80034f4 <I2C_TreatErrorCallback>
  }
}
 80034d6:	e002      	b.n	80034de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034dc:	bf00      	nop
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	ffff0000 	.word	0xffff0000
 80034ec:	080023bf 	.word	0x080023bf
 80034f0:	0800358b 	.word	0x0800358b

080034f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b60      	cmp	r3, #96	@ 0x60
 8003506:	d10e      	bne.n	8003526 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f001 fbe1 	bl	8004ce6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003524:	e009      	b.n	800353a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f001 fbc4 	bl	8004cc2 <HAL_I2C_ErrorCallback>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d103      	bne.n	8003560 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d007      	beq.n	800357e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	619a      	str	r2, [r3, #24]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	2200      	movs	r2, #0
 80035a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	2200      	movs	r2, #0
 80035b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff ff9b 	bl	80034f4 <I2C_TreatErrorCallback>
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	817b      	strh	r3, [r7, #10]
 80035d6:	4613      	mov	r3, r2
 80035d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035e0:	7a7b      	ldrb	r3, [r7, #9]
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	0d5b      	lsrs	r3, r3, #21
 8003602:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <I2C_TransferConfig+0x60>)
 8003608:	430b      	orrs	r3, r1
 800360a:	43db      	mvns	r3, r3
 800360c:	ea02 0103 	and.w	r1, r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	03ff63ff 	.word	0x03ff63ff

0800362c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003640:	4a39      	ldr	r2, [pc, #228]	@ (8003728 <I2C_Enable_IRQ+0xfc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d032      	beq.n	80036ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800364a:	4a38      	ldr	r2, [pc, #224]	@ (800372c <I2C_Enable_IRQ+0x100>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d02d      	beq.n	80036ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003654:	4a36      	ldr	r2, [pc, #216]	@ (8003730 <I2C_Enable_IRQ+0x104>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d028      	beq.n	80036ac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800365a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800365e:	2b00      	cmp	r3, #0
 8003660:	da03      	bge.n	800366a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003668:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800367a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800368c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d103      	bne.n	800369c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800369a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d133      	bne.n	800370a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f043 0320 	orr.w	r3, r3, #32
 80036a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036aa:	e02e      	b.n	800370a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da03      	bge.n	80036bc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80036ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80036cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80036de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d103      	bne.n	80036ee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80036ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d103      	bne.n	80036fc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	2b40      	cmp	r3, #64	@ 0x40
 8003700:	d103      	bne.n	800370a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003708:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	080025b1 	.word	0x080025b1
 800372c:	08002a2d 	.word	0x08002a2d
 8003730:	080027a5 	.word	0x080027a5

08003734 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00f      	beq.n	800376e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003754:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003762:	2b28      	cmp	r3, #40	@ 0x28
 8003764:	d003      	beq.n	800376e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800376c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00f      	beq.n	8003798 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800377e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800378c:	2b28      	cmp	r3, #40	@ 0x28
 800378e:	d003      	beq.n	8003798 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003796:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800379c:	2b00      	cmp	r3, #0
 800379e:	da03      	bge.n	80037a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80037a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d103      	bne.n	80037b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d103      	bne.n	80037c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f043 0320 	orr.w	r3, r3, #32
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d103      	bne.n	80037d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43da      	mvns	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b20      	cmp	r3, #32
 8003804:	d138      	bne.n	8003878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003810:	2302      	movs	r3, #2
 8003812:	e032      	b.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	@ 0x24
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	d139      	bne.n	8003910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e033      	b.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2224      	movs	r2, #36	@ 0x24
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <HAL_PWREx_GetVoltageRange+0x18>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394a:	d130      	bne.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800394c:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003958:	d038      	beq.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800396a:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2232      	movs	r2, #50	@ 0x32
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003980:	e002      	b.n	8003988 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3b01      	subs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003988:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003994:	d102      	bne.n	800399c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f2      	bne.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800399c:	4b0f      	ldr	r3, [pc, #60]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a8:	d110      	bne.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ba:	d007      	beq.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039bc:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039c4:	4a05      	ldr	r2, [pc, #20]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40007000 	.word	0x40007000
 80039e0:	20000000 	.word	0x20000000
 80039e4:	431bde83 	.word	0x431bde83

080039e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f000 bc02 	b.w	8004200 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fc:	4b96      	ldr	r3, [pc, #600]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a06:	4b94      	ldr	r3, [pc, #592]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80e4 	beq.w	8003be6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4c>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	f040 808b 	bne.w	8003b42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 8087 	bne.w	8003b42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a34:	4b88      	ldr	r3, [pc, #544]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_OscConfig+0x64>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e3d9      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	4b81      	ldr	r3, [pc, #516]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCC_OscConfig+0x7e>
 8003a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a64:	e005      	b.n	8003a72 <HAL_RCC_OscConfig+0x8a>
 8003a66:	4b7c      	ldr	r3, [pc, #496]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d223      	bcs.n	8003abe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fd54 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e3ba      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a8a:	4b73      	ldr	r3, [pc, #460]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a72      	ldr	r2, [pc, #456]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b70      	ldr	r3, [pc, #448]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	496d      	ldr	r1, [pc, #436]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	4968      	ldr	r1, [pc, #416]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	e025      	b.n	8003b0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003abe:	4b66      	ldr	r3, [pc, #408]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a65      	ldr	r2, [pc, #404]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b63      	ldr	r3, [pc, #396]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4960      	ldr	r1, [pc, #384]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003adc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	495b      	ldr	r1, [pc, #364]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fd14 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e37a      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b0a:	f000 fc81 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b51      	ldr	r3, [pc, #324]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	4950      	ldr	r1, [pc, #320]	@ (8003c5c <HAL_RCC_OscConfig+0x274>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a4e      	ldr	r2, [pc, #312]	@ (8003c60 <HAL_RCC_OscConfig+0x278>)
 8003b28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c64 <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fc ff44 	bl	80009bc <HAL_InitTick>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d052      	beq.n	8003be4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	e35e      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d032      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b4a:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a42      	ldr	r2, [pc, #264]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b56:	f7fc ff81 	bl	8000a5c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b5e:	f7fc ff7d 	bl	8000a5c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e347      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b70:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b7c:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a35      	ldr	r2, [pc, #212]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b33      	ldr	r3, [pc, #204]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4930      	ldr	r1, [pc, #192]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	492b      	ldr	r1, [pc, #172]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
 8003bae:	e01a      	b.n	8003be6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bb0:	4b29      	ldr	r3, [pc, #164]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a28      	ldr	r2, [pc, #160]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bbc:	f7fc ff4e 	bl	8000a5c <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc4:	f7fc ff4a 	bl	8000a5c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e314      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1dc>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d073      	beq.n	8003cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x21c>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d10e      	bne.n	8003c1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d10b      	bne.n	8003c1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d063      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2f0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d15f      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e2f1      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_OscConfig+0x24c>
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e025      	b.n	8003c80 <HAL_RCC_OscConfig+0x298>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c3c:	d114      	bne.n	8003c68 <HAL_RCC_OscConfig+0x280>
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a05      	ldr	r2, [pc, #20]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a02      	ldr	r2, [pc, #8]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e013      	b.n	8003c80 <HAL_RCC_OscConfig+0x298>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08004fa8 	.word	0x08004fa8
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000004 	.word	0x20000004
 8003c68:	4ba0      	ldr	r3, [pc, #640]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b9d      	ldr	r3, [pc, #628]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a9c      	ldr	r2, [pc, #624]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fc fee8 	bl	8000a5c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fc fee4 	bl	8000a5c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e2ae      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca2:	4b92      	ldr	r3, [pc, #584]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2a8>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fc fed4 	bl	8000a5c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fc fed0 	bl	8000a5c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e29a      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cca:	4b88      	ldr	r3, [pc, #544]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d0>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d060      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x310>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d119      	bne.n	8003d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d116      	bne.n	8003d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x328>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e277      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b76      	ldr	r3, [pc, #472]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	4973      	ldr	r1, [pc, #460]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d24:	e040      	b.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d023      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6e      	ldr	r2, [pc, #440]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fc fe8f 	bl	8000a5c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fc fe8b 	bl	8000a5c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e255      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d54:	4b65      	ldr	r3, [pc, #404]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b62      	ldr	r3, [pc, #392]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	495f      	ldr	r1, [pc, #380]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
 8003d74:	e018      	b.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b5d      	ldr	r3, [pc, #372]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fc fe6b 	bl	8000a5c <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8a:	f7fc fe67 	bl	8000a5c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e231      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9c:	4b53      	ldr	r3, [pc, #332]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fc fe46 	bl	8000a5c <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fc fe42 	bl	8000a5c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e20c      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de6:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x3ec>
 8003df4:	e01b      	b.n	8003e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fc fe29 	bl	8000a5c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fc fe25 	bl	8000a5c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1ef      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e20:	4b32      	ldr	r3, [pc, #200]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1ef      	bne.n	8003e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e58:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d118      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e80:	f7fc fdec 	bl	8000a5c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fc fde8 	bl	8000a5c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1b2      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d108      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4d8>
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ebe:	e029      	b.n	8003f14 <HAL_RCC_OscConfig+0x52c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d115      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x50c>
 8003ec8:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	4a03      	ldr	r2, [pc, #12]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x52c>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	4b9a      	ldr	r3, [pc, #616]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	4a99      	ldr	r2, [pc, #612]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f04:	4b96      	ldr	r3, [pc, #600]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	4a95      	ldr	r2, [pc, #596]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d016      	beq.n	8003f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fc fd9e 	bl	8000a5c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fc fd9a 	bl	8000a5c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e162      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	4b89      	ldr	r3, [pc, #548]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ed      	beq.n	8003f24 <HAL_RCC_OscConfig+0x53c>
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fc fd87 	bl	8000a5c <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fc fd83 	bl	8000a5c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e14b      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f68:	4b7d      	ldr	r3, [pc, #500]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ed      	bne.n	8003f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f76:	7ffb      	ldrb	r3, [r7, #31]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b78      	ldr	r3, [pc, #480]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	4a77      	ldr	r2, [pc, #476]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d03c      	beq.n	800400e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f9c:	4b70      	ldr	r3, [pc, #448]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fa2:	4a6f      	ldr	r2, [pc, #444]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fc fd56 	bl	8000a5c <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb4:	f7fc fd52 	bl	8000a5c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e11c      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fc6:	4b66      	ldr	r3, [pc, #408]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ef      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x5cc>
 8003fd4:	e01b      	b.n	800400e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fd6:	4b62      	ldr	r3, [pc, #392]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fdc:	4a60      	ldr	r2, [pc, #384]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fc fd39 	bl	8000a5c <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fee:	f7fc fd35 	bl	8000a5c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0ff      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004000:	4b57      	ldr	r3, [pc, #348]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8004002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ef      	bne.n	8003fee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80f3 	beq.w	80041fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	2b02      	cmp	r3, #2
 800401e:	f040 80c9 	bne.w	80041b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004022:	4b4f      	ldr	r3, [pc, #316]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0203 	and.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d12c      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	3b01      	subs	r3, #1
 8004042:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d123      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004052:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d11b      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d113      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	3b01      	subs	r3, #1
 8004076:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d109      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	3b01      	subs	r3, #1
 800408a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d06b      	beq.n	8004168 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d062      	beq.n	800415c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004096:	4b32      	ldr	r3, [pc, #200]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0ac      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 80040ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b2:	f7fc fcd3 	bl	8000a5c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fc fccf 	bl	8000a5c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e099      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040cc:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	4b21      	ldr	r3, [pc, #132]	@ (8004164 <HAL_RCC_OscConfig+0x77c>)
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040f2:	0212      	lsls	r2, r2, #8
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040fa:	0852      	lsrs	r2, r2, #1
 80040fc:	3a01      	subs	r2, #1
 80040fe:	0552      	lsls	r2, r2, #21
 8004100:	4311      	orrs	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	4311      	orrs	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004112:	06d2      	lsls	r2, r2, #27
 8004114:	430a      	orrs	r2, r1
 8004116:	4912      	ldr	r1, [pc, #72]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8004118:	4313      	orrs	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0f      	ldr	r2, [pc, #60]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a0c      	ldr	r2, [pc, #48]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004134:	f7fc fc92 	bl	8000a5c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fc fc8e 	bl	8000a5c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e058      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <HAL_RCC_OscConfig+0x778>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415a:	e050      	b.n	80041fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e04f      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
 8004160:	40021000 	.word	0x40021000
 8004164:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004168:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d144      	bne.n	80041fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004174:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 8004186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800418c:	f7fc fc66 	bl	8000a5c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fc fc62 	bl	8000a5c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e02c      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a6:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x7ac>
 80041b2:	e024      	b.n	80041fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d01f      	beq.n	80041fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 80041c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fc fc49 	bl	8000a5c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fc fc45 	bl	8000a5c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e00f      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f0      	bne.n	80041ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	4905      	ldr	r1, [pc, #20]	@ (8004208 <HAL_RCC_OscConfig+0x820>)
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <HAL_RCC_OscConfig+0x824>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e001      	b.n	80041fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	feeefffc 	.word	0xfeeefffc

08004210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0e7      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b75      	ldr	r3, [pc, #468]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b72      	ldr	r3, [pc, #456]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	4970      	ldr	r1, [pc, #448]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b6e      	ldr	r3, [pc, #440]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0cf      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4b66      	ldr	r3, [pc, #408]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800426c:	429a      	cmp	r2, r3
 800426e:	d908      	bls.n	8004282 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b63      	ldr	r3, [pc, #396]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4960      	ldr	r1, [pc, #384]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04c      	beq.n	8004328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	4b5a      	ldr	r3, [pc, #360]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d121      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0a6      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ae:	4b54      	ldr	r3, [pc, #336]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d115      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e09a      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e08e      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e086      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b46      	ldr	r3, [pc, #280]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4943      	ldr	r1, [pc, #268]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fc fbb0 	bl	8000a5c <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fc fbac 	bl	8000a5c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e06e      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	492b      	ldr	r1, [pc, #172]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004356:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d210      	bcs.n	8004386 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004364:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 0207 	bic.w	r2, r3, #7
 800436c:	4923      	ldr	r1, [pc, #140]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004374:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e036      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4918      	ldr	r1, [pc, #96]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b0:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4910      	ldr	r1, [pc, #64]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c4:	f000 f824 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	490b      	ldr	r1, [pc, #44]	@ (8004404 <HAL_RCC_ClockConfig+0x1f4>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	4a09      	ldr	r2, [pc, #36]	@ (8004408 <HAL_RCC_ClockConfig+0x1f8>)
 80043e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043e4:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_ClockConfig+0x1fc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc fae7 	bl	80009bc <HAL_InitTick>
 80043ee:	4603      	mov	r3, r0
 80043f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80043f2:	7afb      	ldrb	r3, [r7, #11]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	08004fa8 	.word	0x08004fa8
 8004408:	20000000 	.word	0x20000000
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	@ 0x24
 8004414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441e:	4b3e      	ldr	r3, [pc, #248]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004428:	4b3b      	ldr	r3, [pc, #236]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x34>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d121      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d11e      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004444:	4b34      	ldr	r3, [pc, #208]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004450:	4b31      	ldr	r3, [pc, #196]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e005      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004460:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800446c:	4a2b      	ldr	r2, [pc, #172]	@ (800451c <HAL_RCC_GetSysClockFreq+0x10c>)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d102      	bne.n	800448e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004488:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x110>)
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e004      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d101      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004494:	4b23      	ldr	r3, [pc, #140]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x114>)
 8004496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d134      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d003      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0xac>
 80044b4:	e005      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x110>)
 80044b8:	617b      	str	r3, [r7, #20]
      break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x114>)
 80044be:	617b      	str	r3, [r7, #20]
      break;
 80044c0:	e002      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	617b      	str	r3, [r7, #20]
      break;
 80044c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044c8:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	3301      	adds	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	fb03 f202 	mul.w	r2, r3, r2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	0e5b      	lsrs	r3, r3, #25
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	3301      	adds	r3, #1
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004508:	69bb      	ldr	r3, [r7, #24]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3724      	adds	r7, #36	@ 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	08004fb8 	.word	0x08004fb8
 8004520:	00f42400 	.word	0x00f42400
 8004524:	007a1200 	.word	0x007a1200

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	4b2a      	ldr	r3, [pc, #168]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004540:	f7ff f9ee 	bl	8003920 <HAL_PWREx_GetVoltageRange>
 8004544:	6178      	str	r0, [r7, #20]
 8004546:	e014      	b.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b25      	ldr	r3, [pc, #148]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f9de 	bl	8003920 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b1e      	ldr	r3, [pc, #120]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004578:	d10b      	bne.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	d919      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2ba0      	cmp	r3, #160	@ 0xa0
 8004584:	d902      	bls.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004586:	2302      	movs	r3, #2
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e013      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800458c:	2301      	movs	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e010      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	@ 0x80
 8004596:	d902      	bls.n	800459e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004598:	2303      	movs	r3, #3
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e00a      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d102      	bne.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e004      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b70      	cmp	r3, #112	@ 0x70
 80045ae:	d101      	bne.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0207 	bic.w	r2, r3, #7
 80045bc:	4909      	ldr	r1, [pc, #36]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40022000 	.word	0x40022000

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045f0:	2300      	movs	r3, #0
 80045f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045f4:	2300      	movs	r3, #0
 80045f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004600:	2b00      	cmp	r3, #0
 8004602:	d031      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800460c:	d01a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800460e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004612:	d814      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800461c:	d10f      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800461e:	4b5d      	ldr	r3, [pc, #372]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4a5c      	ldr	r2, [pc, #368]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462a:	e00c      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f9ce 	bl	80049d4 <RCCEx_PLLSAI1_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	74fb      	strb	r3, [r7, #19]
      break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800464c:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	494e      	ldr	r1, [pc, #312]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 809e 	beq.w	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800467a:	4b46      	ldr	r3, [pc, #280]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b40      	ldr	r3, [pc, #256]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004694:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6593      	str	r3, [r2, #88]	@ 0x58
 800469c:	4b3d      	ldr	r3, [pc, #244]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a39      	ldr	r2, [pc, #228]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b8:	f7fc f9d0 	bl	8000a5c <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fc f9cc 	bl	8000a5c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	74fb      	strb	r3, [r7, #19]
        break;
 80046d2:	e005      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d4:	4b30      	ldr	r3, [pc, #192]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d15a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d019      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800470e:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004714:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800472e:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d016      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fc f98c 	bl	8000a5c <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004746:	e00b      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fc f988 	bl	8000a5c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d902      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	74fb      	strb	r3, [r7, #19]
            break;
 800475e:	e006      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ec      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004774:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	4904      	ldr	r1, [pc, #16]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800478a:	e009      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
 8004790:	e006      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a0:	7c7b      	ldrb	r3, [r7, #17]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d105      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4b8a      	ldr	r3, [pc, #552]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	4a89      	ldr	r2, [pc, #548]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047be:	4b84      	ldr	r3, [pc, #528]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4980      	ldr	r1, [pc, #512]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e0:	4b7b      	ldr	r3, [pc, #492]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	f023 020c 	bic.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	4978      	ldr	r1, [pc, #480]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004802:	4b73      	ldr	r3, [pc, #460]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	496f      	ldr	r1, [pc, #444]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004824:	4b6a      	ldr	r3, [pc, #424]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004832:	4967      	ldr	r1, [pc, #412]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004846:	4b62      	ldr	r3, [pc, #392]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	495e      	ldr	r1, [pc, #376]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	4956      	ldr	r1, [pc, #344]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800488a:	4b51      	ldr	r3, [pc, #324]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	494d      	ldr	r1, [pc, #308]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ac:	4b48      	ldr	r3, [pc, #288]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	4945      	ldr	r1, [pc, #276]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ca:	d106      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048cc:	4b40      	ldr	r3, [pc, #256]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a3f      	ldr	r2, [pc, #252]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	e011      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048e2:	d10c      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f872 	bl	80049d4 <RCCEx_PLLSAI1_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800490a:	4b31      	ldr	r3, [pc, #196]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	492d      	ldr	r1, [pc, #180]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004928:	d106      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492a:	4b29      	ldr	r3, [pc, #164]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004934:	60d3      	str	r3, [r2, #12]
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f843 	bl	80049d4 <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01c      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004968:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004976:	4916      	ldr	r1, [pc, #88]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004986:	d10c      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f820 	bl	80049d4 <RCCEx_PLLSAI1_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ae:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049bc:	4904      	ldr	r1, [pc, #16]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000

080049d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049e2:	4b74      	ldr	r3, [pc, #464]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049ee:	4b71      	ldr	r3, [pc, #452]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0203 	and.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d10d      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
       ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a06:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
       ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d047      	beq.n	8004aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
 8004a1e:	e044      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d018      	beq.n	8004a5a <RCCEx_PLLSAI1_Config+0x86>
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d825      	bhi.n	8004a78 <RCCEx_PLLSAI1_Config+0xa4>
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d002      	beq.n	8004a36 <RCCEx_PLLSAI1_Config+0x62>
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d009      	beq.n	8004a48 <RCCEx_PLLSAI1_Config+0x74>
 8004a34:	e020      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a36:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11d      	bne.n	8004a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a46:	e01a      	b.n	8004a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a48:	4b5a      	ldr	r3, [pc, #360]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d116      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a58:	e013      	b.n	8004a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a5a:	4b56      	ldr	r3, [pc, #344]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a66:	4b53      	ldr	r3, [pc, #332]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a76:	e006      	b.n	8004a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7c:	e004      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10d      	bne.n	8004aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a8e:	4b49      	ldr	r3, [pc, #292]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	4943      	ldr	r1, [pc, #268]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d17c      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ab0:	4b40      	ldr	r3, [pc, #256]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abc:	f7fb ffce 	bl	8000a5c <HAL_GetTick>
 8004ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ac2:	e009      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ac4:	f7fb ffca 	bl	8000a5c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d902      	bls.n	8004ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad6:	e005      	b.n	8004ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad8:	4b36      	ldr	r3, [pc, #216]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ef      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d15f      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d110      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004af0:	4b30      	ldr	r3, [pc, #192]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004af8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6892      	ldr	r2, [r2, #8]
 8004b00:	0211      	lsls	r1, r2, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	06d2      	lsls	r2, r2, #27
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	492a      	ldr	r1, [pc, #168]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	610b      	str	r3, [r1, #16]
 8004b10:	e027      	b.n	8004b62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d112      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b18:	4b26      	ldr	r3, [pc, #152]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6892      	ldr	r2, [r2, #8]
 8004b28:	0211      	lsls	r1, r2, #8
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6912      	ldr	r2, [r2, #16]
 8004b2e:	0852      	lsrs	r2, r2, #1
 8004b30:	3a01      	subs	r2, #1
 8004b32:	0552      	lsls	r2, r2, #21
 8004b34:	430a      	orrs	r2, r1
 8004b36:	491f      	ldr	r1, [pc, #124]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	610b      	str	r3, [r1, #16]
 8004b3c:	e011      	b.n	8004b62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b46:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6892      	ldr	r2, [r2, #8]
 8004b4e:	0211      	lsls	r1, r2, #8
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6952      	ldr	r2, [r2, #20]
 8004b54:	0852      	lsrs	r2, r2, #1
 8004b56:	3a01      	subs	r2, #1
 8004b58:	0652      	lsls	r2, r2, #25
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	4915      	ldr	r1, [pc, #84]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b62:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a13      	ldr	r2, [pc, #76]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fb ff75 	bl	8000a5c <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b74:	e009      	b.n	8004b8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b76:	f7fb ff71 	bl	8000a5c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	73fb      	strb	r3, [r7, #15]
          break;
 8004b88:	e005      	b.n	8004b96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ef      	beq.n	8004b76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <firmware>:

#include "main.h"
#include "firmware_c.h"
#include "firmware.h"

void firmware() {
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0

}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <_Z3nopv>:
#include "i2c_slave.h"

I2C_Slave *registered_i2c_slaves[FIRMWARE_NUM_I2C_SLAVES];
uint8_t num_i2c_slave = 0;

void nop() {
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0

}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>:

I2C_Slave* get_I2C_slave(I2C_HandleTypeDef *hi2c) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_i2c_slave; i++) {
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e00f      	b.n	8004c02 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x2e>
		if (registered_i2c_slaves[i]->hi2c == hi2c) {
 8004be2:	4a0e      	ldr	r2, [pc, #56]	@ (8004c1c <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d104      	bne.n	8004bfc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x28>
			return registered_i2c_slaves[i];
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004c1c <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	e009      	b.n	8004c10 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x3c>
	for (int i = 0; i < num_i2c_slave; i++) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x4c>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	dbe9      	blt.n	8004be2 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0xe>
		}
	}
	return NULL;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000138 	.word	0x20000138
 8004c20:	2000013c 	.word	0x2000013c

08004c24 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ffd1 	bl	8004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8004c32:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_I2C_ListenCpltCallback+0x1c>
		slave->i2c_listenCompleteCallback();
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f89c 	bl	8004d78 <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>
	}
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	70fb      	strb	r3, [r7, #3]
 8004c54:	4613      	mov	r3, r2
 8004c56:	803b      	strh	r3, [r7, #0]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ffbb 	bl	8004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8004c5e:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_I2C_AddrCallback+0x2a>
		slave->i2c_addrCallback(TransferDirection, AddrMatchCode);
 8004c66:	883a      	ldrh	r2, [r7, #0]
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f84c 	bl	8004d0a <_ZN9I2C_Slave16i2c_addrCallbackEht>
	}
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffa6 	bl	8004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8004c88:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_I2C_SlaveRxCpltCallback+0x1c>
		slave->i2c_rxCompleteCallback();
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f89f 	bl	8004dd4 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>
	}
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff ff94 	bl	8004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8004cac:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_I2C_SlaveTxCpltCallback+0x1c>
		slave->i2c_txCompleteCallback();
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f8b7 	bl	8004e28 <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>
	}
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff ff82 	bl	8004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8004cd0:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_I2C_ErrorCallback+0x1c>
		slave->i2c_errorCallback();
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f8ca 	bl	8004e72 <_ZN9I2C_Slave17i2c_errorCallbackEv>
	}
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff ff70 	bl	8004bd4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8004cf4:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_I2C_AbortCpltCallback+0x1c>
		slave->i2c_abortCompleteCallback();
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f8c7 	bl	8004e90 <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>
	}
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_ZN9I2C_Slave16i2c_addrCallbackEht>:
void I2C_Slave::start() {
	HAL_I2C_EnableListen_IT(this->hi2c);
}

void I2C_Slave::i2c_addrCallback(uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
 8004d16:	4613      	mov	r3, r2
 8004d18:	803b      	strh	r3, [r7, #0]

	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d113      	bne.n	8004d48 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x3e>
		this->direction = I2C_SLAVE_DIRECTION_TRANSMIT;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		if (this->_received_bytes == 0) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11e      	bne.n	8004d70 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x66>
			HAL_I2C_Slave_Seq_Receive_IT(this->hi2c, &this->bufferAddress, 1,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d40:	2201      	movs	r2, #1
 8004d42:	f7fd f9cd 	bl	80020e0 <HAL_I2C_Slave_Seq_Receive_IT>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
	}
}
 8004d46:	e013      	b.n	8004d70 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x66>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d110      	bne.n	8004d70 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x66>
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8004d64:	1899      	adds	r1, r3, r2
 8004d66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f7fd f906 	bl	8001f7c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>:
void I2C_Slave::i2c_listenCompleteCallback() {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

	uint8_t startAddress = this->bufferAddress - this->_received_bytes;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	73fb      	strb	r3, [r7, #15]
	this->lastReceivedBytes = this->_received_bytes;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

	this->_received_bytes = 0;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	this->_sent_bytes = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	HAL_I2C_EnableListen_IT(this->hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fd fa47 	bl	8002244 <HAL_I2C_EnableListen_IT>

	if (this->callbacks.listen_cmplt_callback.registered) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7d1b      	ldrb	r3, [r3, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d006      	beq.n	8004dcc <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv+0x54>
		this->callbacks.listen_cmplt_callback.call(startAddress);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f86c 	bl	8004ea4 <_ZN19core_utils_CallbackIvhE4callEh>
	}
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>:

void I2C_Slave::i2c_rxCompleteCallback() {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	this->_received_bytes++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de2:	3301      	adds	r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	if (this->_received_bytes > 1) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d907      	bls.n	8004e06 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv+0x32>
		this->bufferAddress++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 8004e14:	1899      	adds	r1, r3, r2
 8004e16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f7fd f960 	bl	80020e0 <HAL_I2C_Slave_Seq_Receive_IT>
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>:
void I2C_Slave::i2c_txCompleteCallback() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	this->bufferAddress++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	this->_sent_bytes++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e46:	3301      	adds	r3, #1
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8004e5e:	1899      	adds	r1, r3, r2
 8004e60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e64:	2201      	movs	r2, #1
 8004e66:	f7fd f889 	bl	8001f7c <HAL_I2C_Slave_Seq_Transmit_IT>

}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZN9I2C_Slave17i2c_errorCallbackEv>:
void I2C_Slave::i2c_errorCallback() {
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
	nop();
 8004e7a:	f7ff fea4 	bl	8004bc6 <_Z3nopv>
	HAL_I2C_EnableListen_IT(this->hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd f9de 	bl	8002244 <HAL_I2C_EnableListen_IT>
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>:
void I2C_Slave::i2c_abortCompleteCallback() {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	nop();
 8004e98:	f7ff fe95 	bl	8004bc6 <_Z3nopv>
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZN19core_utils_CallbackIvhE4callEh>:
		this->_fp = core_utils_FunctionPointer<void, input_type>(object,
				member);
		this->registered = 1;
	}

	void call(input_type input) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
		this->_fp(input);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f804 	bl	8004ec6 <_ZN26core_utils_FunctionPointerIvhEclEh>
	}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_ZN26core_utils_FunctionPointerIvhEclEh>:
    R(*get_function(A1))() {
        return _membercaller ? (R(*)(A1))0 : (R(*)(A1))_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(A1 a) {
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
        return call(a);
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f804 	bl	8004ee4 <_ZN26core_utils_FunctionPointerIvhE4callEh>
 8004edc:	bf00      	nop
    }
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_ZN26core_utils_FunctionPointerIvhE4callEh>:
    R call(A1 a) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <_ZN26core_utils_FunctionPointerIvhE4callEh+0x28>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <_ZN26core_utils_FunctionPointerIvhE4callEh+0x28>
           return _p.function(a);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	4610      	mov	r0, r2
 8004f08:	4798      	blx	r3
 8004f0a:	e011      	b.n	8004f30 <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4c>
        } else if (_membercaller && _p.object) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4a>
           return _membercaller(_p.object, _member, a);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6810      	ldr	r0, [r2, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	1d11      	adds	r1, r2, #4
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4798      	blx	r3
 8004f2c:	e000      	b.n	8004f30 <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4c>
        return R();
 8004f2e:	bf00      	nop
    }
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <memset>:
 8004f36:	4402      	add	r2, r0
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d100      	bne.n	8004f40 <memset+0xa>
 8004f3e:	4770      	bx	lr
 8004f40:	f803 1b01 	strb.w	r1, [r3], #1
 8004f44:	e7f9      	b.n	8004f3a <memset+0x4>
	...

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	@ (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f000 f818 	bl	8004f90 <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	08004fe8 	.word	0x08004fe8
 8004f84:	08004fe8 	.word	0x08004fe8
 8004f88:	08004fe8 	.word	0x08004fe8
 8004f8c:	08004fec 	.word	0x08004fec

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
