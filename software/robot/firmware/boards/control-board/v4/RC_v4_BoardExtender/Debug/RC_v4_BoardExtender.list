
RC_v4_BoardExtender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e20  08006e20  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006e20  08006e20  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e20  08006e20  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e28  08006e28  00007e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006e2c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  2000000c  08006e38  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  08006e38  00008adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fab  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003896  00000000  00000000  0001efe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00022880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e56  00000000  00000000  00023b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b80  00000000  00000000  00024976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017867  00000000  00000000  000494f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1554  00000000  00000000  00060d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001322b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  001322f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  00136f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006db8 	.word	0x08006db8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006db8 	.word	0x08006db8

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fd99 	bl	8000d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f813 	bl	80001fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa74 	bl	80006c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 fa4c 	bl	8000678 <MX_DMA_Init>
  MX_I2C1_Init();
 80001e0:	f000 f860 	bl	80002a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001e4:	f000 f89e 	bl	8000324 <MX_I2C2_Init>
  MX_TIM15_Init();
 80001e8:	f000 f9c2 	bl	8000570 <MX_TIM15_Init>
  MX_TIM1_Init();
 80001ec:	f000 f8da 	bl	80003a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001f0:	f000 f966 	bl	80004c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  firmware_init();
 80001f4:	f005 fe24 	bl	8005e40 <firmware_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  firmware_update();
 80001f8:	f005 fe9a 	bl	8005f30 <firmware_update>
 80001fc:	e7fc      	b.n	80001f8 <main+0x2c>

080001fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b096      	sub	sp, #88	@ 0x58
 8000202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2244      	movs	r2, #68	@ 0x44
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f006 fda6 	bl	8006d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000212:	463b      	mov	r3, r7
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000220:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000224:	f003 f82c 	bl	8003280 <HAL_PWREx_ControlVoltageScaling>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800022e:	f000 fabb 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000232:	2310      	movs	r3, #16
 8000234:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800023e:	2360      	movs	r3, #96	@ 0x60
 8000240:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000246:	2301      	movs	r3, #1
 8000248:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800024e:	2310      	movs	r3, #16
 8000250:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000252:	2307      	movs	r3, #7
 8000254:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000256:	2302      	movs	r3, #2
 8000258:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800025a:	2302      	movs	r3, #2
 800025c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f862 	bl	800332c <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800026e:	f000 fa9b 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2303      	movs	r3, #3
 8000278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fc62 	bl	8003b54 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000296:	f000 fa87 	bl	80007a8 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	@ 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002aa:	4a1c      	ldr	r2, [pc, #112]	@ (800031c <MX_I2C1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000320 <MX_I2C1_Init+0x7c>)
 80002b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ba:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002bc:	2201      	movs	r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002c6:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d2:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002de:	480e      	ldr	r0, [pc, #56]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002e0:	f001 fac6 	bl	8001870 <HAL_I2C_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002ea:	f000 fa5d 	bl	80007a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4809      	ldr	r0, [pc, #36]	@ (8000318 <MX_I2C1_Init+0x74>)
 80002f2:	f002 ff1f 	bl	8003134 <HAL_I2CEx_ConfigAnalogFilter>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002fc:	f000 fa54 	bl	80007a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000300:	2100      	movs	r1, #0
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_I2C1_Init+0x74>)
 8000304:	f002 ff61 	bl	80031ca <HAL_I2CEx_ConfigDigitalFilter>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800030e:	f000 fa4b 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028
 800031c:	40005400 	.word	0x40005400
 8000320:	00707cbb 	.word	0x00707cbb

08000324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000328:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <MX_I2C2_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	@ (800039c <MX_I2C2_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800032e:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	@ (80003a0 <MX_I2C2_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 2;
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000336:	2202      	movs	r2, #2
 8000338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_I2C2_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_I2C2_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_I2C2_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800035e:	480e      	ldr	r0, [pc, #56]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000360:	f001 fa86 	bl	8001870 <HAL_I2C_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 fa1d 	bl	80007a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	2100      	movs	r1, #0
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000372:	f002 fedf 	bl	8003134 <HAL_I2CEx_ConfigAnalogFilter>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 fa14 	bl	80007a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000380:	2100      	movs	r1, #0
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <MX_I2C2_Init+0x74>)
 8000384:	f002 ff21 	bl	80031ca <HAL_I2CEx_ConfigDigitalFilter>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 fa0b 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000007c 	.word	0x2000007c
 800039c:	40005800 	.word	0x40005800
 80003a0:	00707cbb 	.word	0x00707cbb

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b096      	sub	sp, #88	@ 0x58
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
 80003c6:	615a      	str	r2, [r3, #20]
 80003c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	222c      	movs	r2, #44	@ 0x2c
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f006 fcc4 	bl	8006d5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003d8:	4a38      	ldr	r2, [pc, #224]	@ (80004bc <MX_TIM1_Init+0x118>)
 80003da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003dc:	4b36      	ldr	r3, [pc, #216]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e2:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 80003e8:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003ea:	2227      	movs	r2, #39	@ 0x27
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b2f      	ldr	r3, [pc, #188]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000400:	482d      	ldr	r0, [pc, #180]	@ (80004b8 <MX_TIM1_Init+0x114>)
 8000402:	f004 f89d 	bl	8004540 <HAL_TIM_PWM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800040c:	f000 f9cc 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000420:	4619      	mov	r1, r3
 8000422:	4825      	ldr	r0, [pc, #148]	@ (80004b8 <MX_TIM1_Init+0x114>)
 8000424:	f005 fa2c 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800042e:	f000 f9bb 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000432:	2360      	movs	r3, #96	@ 0x60
 8000434:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800043e:	2300      	movs	r3, #0
 8000440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800044e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4818      	ldr	r0, [pc, #96]	@ (80004b8 <MX_TIM1_Init+0x114>)
 8000458:	f004 fd10 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000462:	f000 f9a1 	bl	80007a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800047a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800047e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800048c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4807      	ldr	r0, [pc, #28]	@ (80004b8 <MX_TIM1_Init+0x114>)
 800049c:	f005 fa56 	bl	800594c <HAL_TIMEx_ConfigBreakDeadTime>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80004a6:	f000 f97f 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004aa:	4803      	ldr	r0, [pc, #12]	@ (80004b8 <MX_TIM1_Init+0x114>)
 80004ac:	f000 fb04 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 80004b0:	bf00      	nop
 80004b2:	3758      	adds	r7, #88	@ 0x58
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200000d0 	.word	0x200000d0
 80004bc:	40012c00 	.word	0x40012c00

080004c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	@ 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e4:	4b21      	ldr	r3, [pc, #132]	@ (800056c <MX_TIM2_Init+0xac>)
 80004e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_TIM2_Init+0xac>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <MX_TIM2_Init+0xac>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <MX_TIM2_Init+0xac>)
 80004fa:	2227      	movs	r2, #39	@ 0x27
 80004fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_TIM2_Init+0xac>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <MX_TIM2_Init+0xac>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800050a:	4818      	ldr	r0, [pc, #96]	@ (800056c <MX_TIM2_Init+0xac>)
 800050c:	f004 f818 	bl	8004540 <HAL_TIM_PWM_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000516:	f000 f947 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	4619      	mov	r1, r3
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <MX_TIM2_Init+0xac>)
 800052a:	f005 f9a9 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000534:	f000 f938 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000538:	2360      	movs	r3, #96	@ 0x60
 800053a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	4619      	mov	r1, r3
 800054e:	4807      	ldr	r0, [pc, #28]	@ (800056c <MX_TIM2_Init+0xac>)
 8000550:	f004 fc94 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800055a:	f000 f925 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <MX_TIM2_Init+0xac>)
 8000560:	f000 faaa 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	@ 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000011c 	.word	0x2000011c

08000570 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	@ 0x58
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000576:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000582:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	222c      	movs	r2, #44	@ 0x2c
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f006 fbde 	bl	8006d5e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80005a2:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005a4:	4a33      	ldr	r2, [pc, #204]	@ (8000674 <MX_TIM15_Init+0x104>)
 80005a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5;
 80005a8:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005aa:	2205      	movs	r2, #5
 80005ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80005b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80005ce:	4828      	ldr	r0, [pc, #160]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005d0:	f003 ffb6 	bl	8004540 <HAL_TIM_PWM_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 f8e5 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80005e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005ea:	4619      	mov	r1, r3
 80005ec:	4820      	ldr	r0, [pc, #128]	@ (8000670 <MX_TIM15_Init+0x100>)
 80005ee:	f005 f947 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f8d6 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005fc:	2360      	movs	r3, #96	@ 0x60
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000618:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	4813      	ldr	r0, [pc, #76]	@ (8000670 <MX_TIM15_Init+0x100>)
 8000622:	f004 fc2b 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800062c:	f000 f8bc 	bl	80007a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000648:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <MX_TIM15_Init+0x100>)
 8000654:	f005 f97a 	bl	800594c <HAL_TIMEx_ConfigBreakDeadTime>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800065e:	f000 f8a3 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <MX_TIM15_Init+0x100>)
 8000664:	f000 fa28 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	@ 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000168 	.word	0x20000168
 8000674:	40014000 	.word	0x40014000

08000678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_DMA_Init+0x48>)
 8000680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000682:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <MX_DMA_Init+0x48>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6493      	str	r3, [r2, #72]	@ 0x48
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_DMA_Init+0x48>)
 800068c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	200c      	movs	r0, #12
 800069c:	f000 fca7 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006a0:	200c      	movs	r0, #12
 80006a2:	f000 fcc0 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 fc9f 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006b0:	200f      	movs	r0, #15
 80006b2:	f000 fcb8 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_GPIO_Init+0xdc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <MX_GPIO_Init+0xdc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <MX_GPIO_Init+0xdc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <MX_GPIO_Init+0xdc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a2a      	ldr	r2, [pc, #168]	@ (80007a0 <MX_GPIO_Init+0xdc>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <MX_GPIO_Init+0xdc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_SD_Pin|LED_ERROR_Pin|ENABLE_CM4_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f242 0148 	movw	r1, #8264	@ 0x2048
 8000710:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000712:	f001 f87b 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000720:	f001 f874 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_1_Pin SD_CARD_SWITCH_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin|SD_CARD_SWITCH_Pin;
 8000724:	f241 0304 	movw	r3, #4100	@ 0x1004
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 800073a:	f000 fed5 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_SD_Pin LED_ERROR_Pin ENABLE_CM4_Pin */
  GPIO_InitStruct.Pin = ENABLE_SD_Pin|LED_ERROR_Pin|ENABLE_CM4_Pin;
 800073e:	f242 0348 	movw	r3, #8264	@ 0x2048
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4813      	ldr	r0, [pc, #76]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000758:	f000 fec6 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_ON_BOARD_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_ON_BOARD_Pin;
 800075c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_ON_BOARD_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f000 feb8 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000794:	f000 fea8 	bl	80014e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a2      	sub	sp, #136	@ 0x88
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	225c      	movs	r2, #92	@ 0x5c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fa9e 	bl	8006d5e <memset>
  if(hi2c->Instance==I2C1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a50      	ldr	r2, [pc, #320]	@ (8000968 <HAL_I2C_MspInit+0x16c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d14a      	bne.n	80008c2 <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fb77 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000844:	f7ff ffb0 	bl	80007a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b48      	ldr	r3, [pc, #288]	@ (800096c <HAL_I2C_MspInit+0x170>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	4a47      	ldr	r2, [pc, #284]	@ (800096c <HAL_I2C_MspInit+0x170>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000854:	4b45      	ldr	r3, [pc, #276]	@ (800096c <HAL_I2C_MspInit+0x170>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000860:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000864:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000874:	2304      	movs	r3, #4
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fe30 	bl	80014e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	@ (800096c <HAL_I2C_MspInit+0x170>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088c:	4a37      	ldr	r2, [pc, #220]	@ (800096c <HAL_I2C_MspInit+0x170>)
 800088e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000892:	6593      	str	r3, [r2, #88]	@ 0x58
 8000894:	4b35      	ldr	r3, [pc, #212]	@ (800096c <HAL_I2C_MspInit+0x170>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	201f      	movs	r0, #31
 80008a6:	f000 fba2 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008aa:	201f      	movs	r0, #31
 80008ac:	f000 fbbb 	bl	8001026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2020      	movs	r0, #32
 80008b6:	f000 fb9a 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ba:	2020      	movs	r0, #32
 80008bc:	f000 fbb3 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008c0:	e04d      	b.n	800095e <HAL_I2C_MspInit+0x162>
  else if(hi2c->Instance==I2C2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <HAL_I2C_MspInit+0x174>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d148      	bne.n	800095e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fb27 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_I2C_MspInit+0xec>
      Error_Handler();
 80008e4:	f7ff ff60 	bl	80007a8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <HAL_I2C_MspInit+0x170>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	4a1f      	ldr	r2, [pc, #124]	@ (800096c <HAL_I2C_MspInit+0x170>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f4:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <HAL_I2C_MspInit+0x170>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000900:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000904:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000914:	2304      	movs	r3, #4
 8000916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800091e:	4619      	mov	r1, r3
 8000920:	4814      	ldr	r0, [pc, #80]	@ (8000974 <HAL_I2C_MspInit+0x178>)
 8000922:	f000 fde1 	bl	80014e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_I2C_MspInit+0x170>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <HAL_I2C_MspInit+0x170>)
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000930:	6593      	str	r3, [r2, #88]	@ 0x58
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_I2C_MspInit+0x170>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2021      	movs	r0, #33	@ 0x21
 8000944:	f000 fb53 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000948:	2021      	movs	r0, #33	@ 0x21
 800094a:	f000 fb6c 	bl	8001026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2022      	movs	r0, #34	@ 0x22
 8000954:	f000 fb4b 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000958:	2022      	movs	r0, #34	@ 0x22
 800095a:	f000 fb64 	bl	8001026 <HAL_NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3788      	adds	r7, #136	@ 0x88
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40005400 	.word	0x40005400
 800096c:	40021000 	.word	0x40021000
 8000970:	40005800 	.word	0x40005800
 8000974:	48000400 	.word	0x48000400

08000978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a45      	ldr	r2, [pc, #276]	@ (8000a9c <HAL_TIM_PWM_MspInit+0x124>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d136      	bne.n	80009f8 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098a:	4b45      	ldr	r3, [pc, #276]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098e:	4a44      	ldr	r2, [pc, #272]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000990:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000994:	6613      	str	r3, [r2, #96]	@ 0x60
 8000996:	4b42      	ldr	r3, [pc, #264]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009a2:	4b40      	ldr	r3, [pc, #256]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009a4:	4a40      	ldr	r2, [pc, #256]	@ (8000aa8 <HAL_TIM_PWM_MspInit+0x130>)
 80009a6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80009a8:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ae:	4b3d      	ldr	r3, [pc, #244]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009b0:	2210      	movs	r2, #16
 80009b2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b4:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009ba:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c0:	4b38      	ldr	r3, [pc, #224]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c8:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80009ce:	4b35      	ldr	r3, [pc, #212]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009d4:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80009da:	4832      	ldr	r0, [pc, #200]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009dc:	f000 fb3e 	bl	800105c <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80009e6:	f7ff fedf 	bl	80007a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80009f0:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80009f6:	e04c      	b.n	8000a92 <HAL_TIM_PWM_MspInit+0x11a>
  else if(htim_pwm->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a00:	d136      	bne.n	8000a70 <HAL_TIM_PWM_MspInit+0xf8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	4a26      	ldr	r2, [pc, #152]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0e:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a1c:	4a24      	ldr	r2, [pc, #144]	@ (8000ab0 <HAL_TIM_PWM_MspInit+0x138>)
 8000a1e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a26:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a3e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a52:	4816      	ldr	r0, [pc, #88]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a54:	f000 fb02 	bl	800105c <HAL_DMA_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_TIM_PWM_MspInit+0xea>
      Error_Handler();
 8000a5e:	f7ff fea3 	bl	80007a8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a11      	ldr	r2, [pc, #68]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000a6e:	e010      	b.n	8000a92 <HAL_TIM_PWM_MspInit+0x11a>
  else if(htim_pwm->Instance==TIM15)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10b      	bne.n	8000a92 <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	200001b4 	.word	0x200001b4
 8000aa8:	4002001c 	.word	0x4002001c
 8000aac:	200001fc 	.word	0x200001fc
 8000ab0:	40020058 	.word	0x40020058
 8000ab4:	40014000 	.word	0x40014000

08000ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a35      	ldr	r2, [pc, #212]	@ (8000bac <HAL_TIM_MspPostInit+0xf4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d11e      	bne.n	8000b18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b35      	ldr	r3, [pc, #212]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a34      	ldr	r2, [pc, #208]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b12:	f000 fce9 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000b16:	e044      	b.n	8000ba2 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b20:	d11d      	bne.n	8000b5e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b58:	f000 fcc6 	bl	80014e8 <HAL_GPIO_Init>
}
 8000b5c:	e021      	b.n	8000ba2 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <HAL_TIM_MspPostInit+0xfc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d11c      	bne.n	8000ba2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b80:	2304      	movs	r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000b90:	230e      	movs	r3, #14
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f000 fca3 	bl	80014e8 <HAL_GPIO_Init>
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40012c00 	.word	0x40012c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40014000 	.word	0x40014000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f8cf 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <DMA1_Channel2_IRQHandler+0x10>)
 8000c1e:	f000 fb76 	bl	800130e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001b4 	.word	0x200001b4

08000c2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <DMA1_Channel5_IRQHandler+0x10>)
 8000c32:	f000 fb6c 	bl	800130e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001fc 	.word	0x200001fc

08000c40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <I2C1_EV_IRQHandler+0x10>)
 8000c46:	f001 f833 	bl	8001cb0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000028 	.word	0x20000028

08000c54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <I2C1_ER_IRQHandler+0x10>)
 8000c5a:	f001 f843 	bl	8001ce4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000028 	.word	0x20000028

08000c68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <I2C2_EV_IRQHandler+0x10>)
 8000c6e:	f001 f81f 	bl	8001cb0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000007c 	.word	0x2000007c

08000c7c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <I2C2_ER_IRQHandler+0x10>)
 8000c82:	f001 f82f 	bl	8001ce4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000007c 	.word	0x2000007c

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f006 f845 	bl	8006d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fa71 	bl	80001cc <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf8:	08006e2c 	.word	0x08006e2c
  ldr r2, =_sbss
 8000cfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d00:	20000adc 	.word	0x20000adc

08000d04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_IRQHandler>

08000d06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f961 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f80e 	bl	8000d38 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d28:	f7ff fd44 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_InitTick+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f96d 	bl	8001042 <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d809      	bhi.n	8000d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f937 	bl	8000fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_InitTick+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000244 	.word	0x20000244

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000244 	.word	0x20000244

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	@ (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e098      	b.n	80011a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b4d      	ldr	r3, [pc, #308]	@ (80011ac <HAL_DMA_Init+0x150>)
 8001076:	429a      	cmp	r2, r3
 8001078:	d80f      	bhi.n	800109a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b4b      	ldr	r3, [pc, #300]	@ (80011b0 <HAL_DMA_Init+0x154>)
 8001082:	4413      	add	r3, r2
 8001084:	4a4b      	ldr	r2, [pc, #300]	@ (80011b4 <HAL_DMA_Init+0x158>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	009a      	lsls	r2, r3, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a48      	ldr	r2, [pc, #288]	@ (80011b8 <HAL_DMA_Init+0x15c>)
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
 8001098:	e00e      	b.n	80010b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <HAL_DMA_Init+0x160>)
 80010a2:	4413      	add	r3, r2
 80010a4:	4a43      	ldr	r2, [pc, #268]	@ (80011b4 <HAL_DMA_Init+0x158>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	009a      	lsls	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a42      	ldr	r2, [pc, #264]	@ (80011c0 <HAL_DMA_Init+0x164>)
 80010b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80010d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001112:	d039      	beq.n	8001188 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <HAL_DMA_Init+0x15c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11a      	bne.n	8001154 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <HAL_DMA_Init+0x168>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f003 031c 	and.w	r3, r3, #28
 800112a:	210f      	movs	r1, #15
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4924      	ldr	r1, [pc, #144]	@ (80011c4 <HAL_DMA_Init+0x168>)
 8001134:	4013      	ands	r3, r2
 8001136:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HAL_DMA_Init+0x168>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001144:	f003 031c 	and.w	r3, r3, #28
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	491d      	ldr	r1, [pc, #116]	@ (80011c4 <HAL_DMA_Init+0x168>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
 8001152:	e019      	b.n	8001188 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <HAL_DMA_Init+0x16c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115c:	f003 031c 	and.w	r3, r3, #28
 8001160:	210f      	movs	r1, #15
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	4917      	ldr	r1, [pc, #92]	@ (80011c8 <HAL_DMA_Init+0x16c>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HAL_DMA_Init+0x16c>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6859      	ldr	r1, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f003 031c 	and.w	r3, r3, #28
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	4911      	ldr	r1, [pc, #68]	@ (80011c8 <HAL_DMA_Init+0x16c>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40020407 	.word	0x40020407
 80011b0:	bffdfff8 	.word	0xbffdfff8
 80011b4:	cccccccd 	.word	0xcccccccd
 80011b8:	40020000 	.word	0x40020000
 80011bc:	bffdfbf8 	.word	0xbffdfbf8
 80011c0:	40020400 	.word	0x40020400
 80011c4:	400200a8 	.word	0x400200a8
 80011c8:	400204a8 	.word	0x400204a8

080011cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_DMA_Start_IT+0x20>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e04b      	b.n	8001284 <HAL_DMA_Start_IT+0xb8>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d13a      	bne.n	8001276 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 f92f 	bl	8001488 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	2b00      	cmp	r3, #0
 8001230:	d008      	beq.n	8001244 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 020e 	orr.w	r2, r2, #14
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e00f      	b.n	8001264 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0204 	bic.w	r2, r2, #4
 8001252:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 020a 	orr.w	r2, r2, #10
 8001262:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e005      	b.n	8001282 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800127e:	2302      	movs	r3, #2
 8001280:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001282:	7dfb      	ldrb	r3, [r7, #23]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d005      	beq.n	80012b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2204      	movs	r2, #4
 80012a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e029      	b.n	8001304 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 020e 	bic.w	r2, r2, #14
 80012be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d4:	f003 021c 	and.w	r2, r3, #28
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f202 	lsl.w	r2, r1, r2
 80012e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
    }
  }
  return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f003 031c 	and.w	r3, r3, #28
 800132e:	2204      	movs	r2, #4
 8001330:	409a      	lsls	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d026      	beq.n	8001388 <HAL_DMA_IRQHandler+0x7a>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d021      	beq.n	8001388 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	2b00      	cmp	r3, #0
 8001350:	d107      	bne.n	8001362 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0204 	bic.w	r2, r2, #4
 8001360:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f003 021c 	and.w	r2, r3, #28
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	2104      	movs	r1, #4
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	2b00      	cmp	r3, #0
 800137c:	d071      	beq.n	8001462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001386:	e06c      	b.n	8001462 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138c:	f003 031c 	and.w	r3, r3, #28
 8001390:	2202      	movs	r2, #2
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d02e      	beq.n	80013fa <HAL_DMA_IRQHandler+0xec>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d029      	beq.n	80013fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020a 	bic.w	r2, r2, #10
 80013c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	f003 021c 	and.w	r2, r3, #28
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	2102      	movs	r1, #2
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d038      	beq.n	8001462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013f8:	e033      	b.n	8001462 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f003 031c 	and.w	r3, r3, #28
 8001402:	2208      	movs	r2, #8
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d02a      	beq.n	8001464 <HAL_DMA_IRQHandler+0x156>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d025      	beq.n	8001464 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 020e 	bic.w	r2, r2, #14
 8001426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142c:	f003 021c 	and.w	r2, r3, #28
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
 800143a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001462:	bf00      	nop
 8001464:	bf00      	nop
}
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800147a:	b2db      	uxtb	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f003 021c 	and.w	r2, r3, #28
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d108      	bne.n	80014cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014ca:	e007      	b.n	80014dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e154      	b.n	80017a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8146 	beq.w	800179c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d005      	beq.n	8001528 <HAL_GPIO_Init+0x40>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0201 	and.w	r2, r3, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b03      	cmp	r3, #3
 8001594:	d017      	beq.n	80015c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d123      	bne.n	800161a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	6939      	ldr	r1, [r7, #16]
 8001616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0203 	and.w	r2, r3, #3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80a0 	beq.w	800179c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165c:	4b58      	ldr	r3, [pc, #352]	@ (80017c0 <HAL_GPIO_Init+0x2d8>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001660:	4a57      	ldr	r2, [pc, #348]	@ (80017c0 <HAL_GPIO_Init+0x2d8>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6613      	str	r3, [r2, #96]	@ 0x60
 8001668:	4b55      	ldr	r3, [pc, #340]	@ (80017c0 <HAL_GPIO_Init+0x2d8>)
 800166a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001674:	4a53      	ldr	r2, [pc, #332]	@ (80017c4 <HAL_GPIO_Init+0x2dc>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800169e:	d019      	beq.n	80016d4 <HAL_GPIO_Init+0x1ec>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a49      	ldr	r2, [pc, #292]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d013      	beq.n	80016d0 <HAL_GPIO_Init+0x1e8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a48      	ldr	r2, [pc, #288]	@ (80017cc <HAL_GPIO_Init+0x2e4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_GPIO_Init+0x1e4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a47      	ldr	r2, [pc, #284]	@ (80017d0 <HAL_GPIO_Init+0x2e8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_Init+0x1e0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a46      	ldr	r2, [pc, #280]	@ (80017d4 <HAL_GPIO_Init+0x2ec>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_GPIO_Init+0x1dc>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e008      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016c4:	2307      	movs	r3, #7
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d4:	2300      	movs	r3, #0
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e6:	4937      	ldr	r1, [pc, #220]	@ (80017c4 <HAL_GPIO_Init+0x2dc>)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001718:	4a2f      	ldr	r2, [pc, #188]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001742:	4a25      	ldr	r2, [pc, #148]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001748:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800176c:	4a1a      	ldr	r2, [pc, #104]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f aea3 	bne.w	80014f8 <HAL_GPIO_Init+0x10>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	48000400 	.word	0x48000400
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000c00 	.word	0x48000c00
 80017d4:	48001000 	.word	0x48001000
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001828:	e002      	b.n	8001830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43d9      	mvns	r1, r3
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	400b      	ands	r3, r1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e08d      	b.n	800199e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe ffb0 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	@ 0x24
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e006      	b.n	80018f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d108      	bne.n	8001912 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	e007      	b.n	8001922 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001920:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001934:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001944:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69d9      	ldr	r1, [r3, #28]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80019c4:	2b28      	cmp	r3, #40	@ 0x28
 80019c6:	f040 8098 	bne.w	8001afa <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e08c      	b.n	8001afc <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80019e2:	f248 0101 	movw	r1, #32769	@ 0x8001
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f001 fb46 	bl	8003078 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e080      	b.n	8001afc <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a0c:	d12a      	bne.n	8001a64 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a0e:	2102      	movs	r1, #2
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f001 fb31 	bl	8003078 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a24:	d11e      	bne.n	8001a64 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a34:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d012      	beq.n	8001a64 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a42:	4a30      	ldr	r2, [pc, #192]	@ (8001b04 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001a44:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fc1e 	bl	800128c <HAL_DMA_Abort_IT>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a60:	4610      	mov	r0, r2
 8001a62:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2229      	movs	r2, #41	@ 0x29
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a88:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8001aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001aec:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f001 fa3d 	bl	8002f70 <I2C_Enable_IRQ>

    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	08002ecf 	.word	0x08002ecf
 8001b08:	08001e03 	.word	0x08001e03

08001b0c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001b28:	2b28      	cmp	r3, #40	@ 0x28
 8001b2a:	f040 8098 	bne.w	8001c5e <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b40:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e08c      	b.n	8001c60 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b46:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f001 fa94 	bl	8003078 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e080      	b.n	8001c60 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b29      	cmp	r3, #41	@ 0x29
 8001b70:	d12a      	bne.n	8001bc8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b72:	2101      	movs	r1, #1
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f001 fa7f 	bl	8003078 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b88:	d11e      	bne.n	8001bc8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b98:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	4a30      	ldr	r2, [pc, #192]	@ (8001c68 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001ba8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fb6c 	bl	800128c <HAL_DMA_Abort_IT>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	222a      	movs	r2, #42	@ 0x2a
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	88fa      	ldrh	r2, [r7, #6]
 8001bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001c0e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001c50:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f001 f98b 	bl	8002f70 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08002ecf 	.word	0x08002ecf
 8001c6c:	08001e03 	.word	0x08001e03

08001c70 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d10d      	bne.n	8001ca0 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2228      	movs	r2, #40	@ 0x28
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_I2C_EnableListen_IT+0x3c>)
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f001 f96a 	bl	8002f70 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08001e03 	.word	0x08001e03

08001cb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00f      	beq.n	8001d26 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d24:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00f      	beq.n	8001d50 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f043 0208 	orr.w	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00f      	beq.n	8001d7a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d78:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 030b 	and.w	r3, r3, #11
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 ff63 	bl	8002c58 <I2C_ITError>
  }
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <I2C_Slave_ISR_IT+0x24>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e0e1      	b.n	8001fea <I2C_Slave_ISR_IT+0x1e8>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fda1 	bl	800298c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d04b      	beq.n	8001eec <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d046      	beq.n	8001eec <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d128      	bne.n	8001eba <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b28      	cmp	r3, #40	@ 0x28
 8001e72:	d108      	bne.n	8001e86 <I2C_Slave_ISR_IT+0x84>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e7a:	d104      	bne.n	8001e86 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fe96 	bl	8002bb0 <I2C_ITListenCplt>
 8001e84:	e031      	b.n	8001eea <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b29      	cmp	r3, #41	@ 0x29
 8001e90:	d10e      	bne.n	8001eb0 <I2C_Slave_ISR_IT+0xae>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e98:	d00a      	beq.n	8001eb0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 ffef 	bl	8002e86 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fc4a 	bl	8002742 <I2C_ITSlaveSeqCplt>
 8001eae:	e01c      	b.n	8001eea <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001eb8:	e08f      	b.n	8001fda <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <I2C_Slave_ISR_IT+0xda>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eda:	d17e      	bne.n	8001fda <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 feb8 	bl	8002c58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ee8:	e077      	b.n	8001fda <I2C_Slave_ISR_IT+0x1d8>
 8001eea:	e076      	b.n	8001fda <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02f      	beq.n	8001f56 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02a      	beq.n	8001f56 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d018      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d14b      	bne.n	8001fde <I2C_Slave_ISR_IT+0x1dc>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f4c:	d047      	beq.n	8001fde <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fbf7 	bl	8002742 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f54:	e043      	b.n	8001fde <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001f6a:	6939      	ldr	r1, [r7, #16]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fb27 	bl	80025c0 <I2C_ITAddrCplt>
 8001f72:	e035      	b.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d030      	beq.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02b      	beq.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d018      	beq.n	8001fc4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001fc2:	e00d      	b.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fca:	d002      	beq.n	8001fd2 <I2C_Slave_ISR_IT+0x1d0>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fbb5 	bl	8002742 <I2C_ITSlaveSeqCplt>
 8001fd8:	e002      	b.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001fda:	bf00      	nop
 8001fdc:	e000      	b.n	8001fe0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001fde:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b088      	sub	sp, #32
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <I2C_Master_ISR_DMA+0x1a>
 8002008:	2302      	movs	r3, #2
 800200a:	e0d9      	b.n	80021c0 <I2C_Master_ISR_DMA+0x1ce>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002024:	2b00      	cmp	r3, #0
 8002026:	d011      	beq.n	800204c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800203c:	2120      	movs	r1, #32
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 ff96 	bl	8002f70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 ff1e 	bl	8002e86 <I2C_Flush_TXDR>
 800204a:	e0b4      	b.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d071      	beq.n	800213a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800205c:	2b00      	cmp	r3, #0
 800205e:	d06c      	beq.n	800213a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800206e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04e      	beq.n	8002118 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002086:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	2bff      	cmp	r3, #255	@ 0xff
 8002090:	d906      	bls.n	80020a0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	22ff      	movs	r2, #255	@ 0xff
 8002096:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002098:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e010      	b.n	80020c2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020b2:	d003      	beq.n	80020bc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e002      	b.n	80020c2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80020bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020c0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	8a79      	ldrh	r1, [r7, #18]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 ff1b 	bl	8002f0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b22      	cmp	r3, #34	@ 0x22
 80020f2:	d108      	bne.n	8002106 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002102:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002104:	e057      	b.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002114:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002116:	e04e      	b.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002126:	d003      	beq.n	8002130 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 facd 	bl	80026c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800212e:	e042      	b.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fd90 	bl	8002c58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002138:	e03d      	b.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d028      	beq.n	8002196 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800214a:	2b00      	cmp	r3, #0
 800214c:	d023      	beq.n	8002196 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d119      	bne.n	800218c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002166:	d025      	beq.n	80021b4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002170:	d108      	bne.n	8002184 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002180:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002182:	e017      	b.n	80021b4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fa9f 	bl	80026c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800218a:	e013      	b.n	80021b4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800218c:	2140      	movs	r1, #64	@ 0x40
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fd62 	bl	8002c58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002194:	e00e      	b.n	80021b4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fb25 	bl	80027fc <I2C_ITMasterCplt>
 80021b2:	e000      	b.n	80021b6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80021b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80021d4:	4b8d      	ldr	r3, [pc, #564]	@ (800240c <I2C_Mem_ISR_DMA+0x244>)
 80021d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <I2C_Mem_ISR_DMA+0x1e>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e10e      	b.n	8002404 <I2C_Mem_ISR_DMA+0x23c>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d016      	beq.n	8002226 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d011      	beq.n	8002226 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002216:	2120      	movs	r1, #32
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fea9 	bl	8002f70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fe31 	bl	8002e86 <I2C_Flush_TXDR>
 8002224:	e0e9      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f04f 32ff 	mov.w	r2, #4294967295
 800224a:	651a      	str	r2, [r3, #80]	@ 0x50
 800224c:	e0d5      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05f      	beq.n	8002318 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800225e:	2b00      	cmp	r3, #0
 8002260:	d05a      	beq.n	8002318 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002262:	2101      	movs	r1, #1
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 ff07 	bl	8003078 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800226a:	2110      	movs	r1, #16
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fe7f 	bl	8002f70 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d048      	beq.n	800230e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2bff      	cmp	r3, #255	@ 0xff
 8002284:	d910      	bls.n	80022a8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	22ff      	movs	r2, #255	@ 0xff
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	b299      	uxth	r1, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002296:	b2da      	uxtb	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fe33 	bl	8002f0c <I2C_TransferConfig>
 80022a6:	e011      	b.n	80022cc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	b299      	uxth	r1, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	2300      	movs	r3, #0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fe20 	bl	8002f0c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b22      	cmp	r3, #34	@ 0x22
 80022e8:	d108      	bne.n	80022fc <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022fa:	e07e      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800230a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800230c:	e075      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800230e:	2140      	movs	r1, #64	@ 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fca1 	bl	8002c58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002316:	e070      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d05d      	beq.n	80023de <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002328:	2b00      	cmp	r3, #0
 800232a:	d058      	beq.n	80023de <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800232c:	2101      	movs	r1, #1
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fea2 	bl	8003078 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002334:	2110      	movs	r1, #16
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fe1a 	bl	8002f70 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b22      	cmp	r3, #34	@ 0x22
 8002346:	d101      	bne.n	800234c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002348:	4b31      	ldr	r3, [pc, #196]	@ (8002410 <I2C_Mem_ISR_DMA+0x248>)
 800234a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2bff      	cmp	r3, #255	@ 0xff
 8002354:	d910      	bls.n	8002378 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	22ff      	movs	r2, #255	@ 0xff
 800235a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002360:	b299      	uxth	r1, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002366:	b2da      	uxtb	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fdcb 	bl	8002f0c <I2C_TransferConfig>
 8002376:	e011      	b.n	800239c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	b299      	uxth	r1, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	b2da      	uxtb	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fdb8 	bl	8002f0c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b22      	cmp	r3, #34	@ 0x22
 80023b8:	d108      	bne.n	80023cc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023ca:	e016      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023da:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023dc:	e00d      	b.n	80023fa <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fa01 	bl	80027fc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	80002000 	.word	0x80002000
 8002410:	80002400 	.word	0x80002400

08002414 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <I2C_Slave_ISR_DMA+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e0bf      	b.n	80025b8 <I2C_Slave_ISR_DMA+0x1a4>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa98 	bl	800298c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8095 	beq.w	8002592 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 808f 	beq.w	8002592 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002484:	2b00      	cmp	r3, #0
 8002486:	d07d      	beq.n	8002584 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d128      	bne.n	8002524 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b28      	cmp	r3, #40	@ 0x28
 80024dc:	d108      	bne.n	80024f0 <I2C_Slave_ISR_DMA+0xdc>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e4:	d104      	bne.n	80024f0 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fb61 	bl	8002bb0 <I2C_ITListenCplt>
 80024ee:	e048      	b.n	8002582 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b29      	cmp	r3, #41	@ 0x29
 80024fa:	d10e      	bne.n	800251a <I2C_Slave_ISR_DMA+0x106>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002502:	d00a      	beq.n	800251a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fcba 	bl	8002e86 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f915 	bl	8002742 <I2C_ITSlaveSeqCplt>
 8002518:	e033      	b.n	8002582 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2210      	movs	r2, #16
 8002520:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002522:	e034      	b.n	800258e <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002530:	f043 0204 	orr.w	r2, r3, #4
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <I2C_Slave_ISR_DMA+0x13a>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254c:	d11f      	bne.n	800258e <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b21      	cmp	r3, #33	@ 0x21
 8002552:	d002      	beq.n	800255a <I2C_Slave_ISR_DMA+0x146>
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b29      	cmp	r3, #41	@ 0x29
 8002558:	d103      	bne.n	8002562 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	@ 0x21
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002560:	e008      	b.n	8002574 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b22      	cmp	r3, #34	@ 0x22
 8002566:	d002      	beq.n	800256e <I2C_Slave_ISR_DMA+0x15a>
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b2a      	cmp	r3, #42	@ 0x2a
 800256c:	d102      	bne.n	8002574 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2222      	movs	r2, #34	@ 0x22
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002578:	4619      	mov	r1, r3
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fb6c 	bl	8002c58 <I2C_ITError>
      if (treatdmanack == 1U)
 8002580:	e005      	b.n	800258e <I2C_Slave_ISR_DMA+0x17a>
 8002582:	e004      	b.n	800258e <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2210      	movs	r2, #16
 800258a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800258c:	e00f      	b.n	80025ae <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800258e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002590:	e00d      	b.n	80025ae <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f809 	bl	80025c0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025d6:	2b28      	cmp	r3, #40	@ 0x28
 80025d8:	d16a      	bne.n	80026b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80025f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	b29b      	uxth	r3, r3
 8002602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002606:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002614:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d138      	bne.n	8002690 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	09db      	lsrs	r3, r3, #7
 8002622:	b29a      	uxth	r2, r3
 8002624:	89bb      	ldrh	r3, [r7, #12]
 8002626:	4053      	eors	r3, r2
 8002628:	b29b      	uxth	r3, r3
 800262a:	f003 0306 	and.w	r3, r3, #6
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11c      	bne.n	800266c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002644:	2b02      	cmp	r3, #2
 8002646:	d13b      	bne.n	80026c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2208      	movs	r2, #8
 8002654:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800265e:	89ba      	ldrh	r2, [r7, #12]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f003 fefd 	bl	8006464 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800266a:	e029      	b.n	80026c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800266c:	893b      	ldrh	r3, [r7, #8]
 800266e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fcff 	bl	8003078 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002682:	89ba      	ldrh	r2, [r7, #12]
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f003 feeb 	bl	8006464 <HAL_I2C_AddrCallback>
}
 800268e:	e017      	b.n	80026c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fcef 	bl	8003078 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026a2:	89ba      	ldrh	r2, [r7, #12]
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f003 fedb 	bl	8006464 <HAL_I2C_AddrCallback>
}
 80026ae:	e007      	b.n	80026c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2208      	movs	r2, #8
 80026b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b21      	cmp	r3, #33	@ 0x21
 80026e2:	d115      	bne.n	8002710 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2211      	movs	r2, #17
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026f8:	2101      	movs	r1, #1
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fcbc 	bl	8003078 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fb46 	bl	8001d9a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800270e:	e014      	b.n	800273a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2212      	movs	r2, #18
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002724:	2102      	movs	r1, #2
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fca6 	bl	8003078 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fb3a 	bl	8001dae <HAL_I2C_MasterRxCpltCallback>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e00c      	b.n	8002790 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b29      	cmp	r3, #41	@ 0x29
 800279a:	d112      	bne.n	80027c2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2228      	movs	r2, #40	@ 0x28
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2221      	movs	r2, #33	@ 0x21
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027aa:	2101      	movs	r1, #1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fc63 	bl	8003078 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f003 fe7d 	bl	80064ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027c0:	e017      	b.n	80027f2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80027cc:	d111      	bne.n	80027f2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2228      	movs	r2, #40	@ 0x28
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2222      	movs	r2, #34	@ 0x22
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027dc:	2102      	movs	r1, #2
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fc4a 	bl	8003078 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f003 fe52 	bl	8006496 <HAL_I2C_SlaveRxCpltCallback>
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2220      	movs	r2, #32
 8002810:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b21      	cmp	r3, #33	@ 0x21
 800281c:	d107      	bne.n	800282e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800281e:	2101      	movs	r1, #1
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fc29 	bl	8003078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2211      	movs	r2, #17
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
 800282c:	e00c      	b.n	8002848 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b22      	cmp	r3, #34	@ 0x22
 8002838:	d106      	bne.n	8002848 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800283a:	2102      	movs	r1, #2
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fc1b 	bl	8003078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2212      	movs	r2, #18
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b4c      	ldr	r3, [pc, #304]	@ (8002984 <I2C_ITMasterCplt+0x188>)
 8002854:	400b      	ands	r3, r1
 8002856:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a49      	ldr	r2, [pc, #292]	@ (8002988 <I2C_ITMasterCplt+0x18c>)
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2210      	movs	r2, #16
 8002874:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b60      	cmp	r3, #96	@ 0x60
 800288c:	d10a      	bne.n	80028a4 <I2C_ITMasterCplt+0xa8>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80028a2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 faee 	bl	8002e86 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b60      	cmp	r3, #96	@ 0x60
 80028ba:	d002      	beq.n	80028c2 <I2C_ITMasterCplt+0xc6>
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f9c5 	bl	8002c58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028ce:	e054      	b.n	800297a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b21      	cmp	r3, #33	@ 0x21
 80028da:	d124      	bne.n	8002926 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b40      	cmp	r3, #64	@ 0x40
 80028f4:	d10b      	bne.n	800290e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fa5b 	bl	8001dc2 <HAL_I2C_MemTxCpltCallback>
}
 800290c:	e035      	b.n	800297a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fa3b 	bl	8001d9a <HAL_I2C_MasterTxCpltCallback>
}
 8002924:	e029      	b.n	800297a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b22      	cmp	r3, #34	@ 0x22
 8002930:	d123      	bne.n	800297a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b40      	cmp	r3, #64	@ 0x40
 800294a:	d10b      	bne.n	8002964 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fa3a 	bl	8001dd6 <HAL_I2C_MemRxCpltCallback>
}
 8002962:	e00a      	b.n	800297a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff fa1a 	bl	8001dae <HAL_I2C_MasterRxCpltCallback>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	fe00e800 	.word	0xfe00e800
 8002988:	ffff0000 	.word	0xffff0000

0800298c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2220      	movs	r2, #32
 80029b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b21      	cmp	r3, #33	@ 0x21
 80029b6:	d002      	beq.n	80029be <I2C_ITSlaveCplt+0x32>
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b29      	cmp	r3, #41	@ 0x29
 80029bc:	d108      	bne.n	80029d0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80029be:	f248 0101 	movw	r1, #32769	@ 0x8001
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fb58 	bl	8003078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2221      	movs	r2, #33	@ 0x21
 80029cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80029ce:	e019      	b.n	8002a04 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b22      	cmp	r3, #34	@ 0x22
 80029d4:	d002      	beq.n	80029dc <I2C_ITSlaveCplt+0x50>
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80029da:	d108      	bne.n	80029ee <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80029dc:	f248 0102 	movw	r1, #32770	@ 0x8002
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fb49 	bl	8003078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2222      	movs	r2, #34	@ 0x22
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80029ec:	e00a      	b.n	8002a04 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b28      	cmp	r3, #40	@ 0x28
 80029f2:	d107      	bne.n	8002a04 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80029f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fb3d 	bl	8003078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ba8 <I2C_ITSlaveCplt+0x21c>)
 8002a20:	400b      	ands	r3, r1
 8002a22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fa2e 	bl	8002e86 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01f      	beq.n	8002a8c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a5a:	e017      	b.n	8002a8c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d020      	beq.n	8002ad8 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f043 0204 	orr.w	r2, r3, #4
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8a4 	bl	8002c58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b28      	cmp	r3, #40	@ 0x28
 8002b1a:	d141      	bne.n	8002ba0 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f846 	bl	8002bb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b24:	e03c      	b.n	8002ba0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b2e:	d014      	beq.n	8002b5a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fe06 	bl	8002742 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1c      	ldr	r2, [pc, #112]	@ (8002bac <I2C_ITSlaveCplt+0x220>)
 8002b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f003 fc74 	bl	8006440 <HAL_I2C_ListenCpltCallback>
}
 8002b58:	e022      	b.n	8002ba0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b22      	cmp	r3, #34	@ 0x22
 8002b64:	d10e      	bne.n	8002b84 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f003 fc8a 	bl	8006496 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b82:	e00d      	b.n	8002ba0 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f003 fc8d 	bl	80064ba <HAL_I2C_SlaveTxCpltCallback>
}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	fe00e800 	.word	0xfe00e800
 8002bac:	ffff0000 	.word	0xffff0000

08002bb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a25      	ldr	r2, [pc, #148]	@ (8002c54 <I2C_ITListenCplt+0xa4>)
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d022      	beq.n	8002c2c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c2c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fa21 	bl	8003078 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f003 fbfa 	bl	8006440 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	ffff0000 	.word	0xffff0000

08002c58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c68:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a6d      	ldr	r2, [pc, #436]	@ (8002e2c <I2C_ITError+0x1d4>)
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b28      	cmp	r3, #40	@ 0x28
 8002c8e:	d005      	beq.n	8002c9c <I2C_ITError+0x44>
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b29      	cmp	r3, #41	@ 0x29
 8002c94:	d002      	beq.n	8002c9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c9a:	d10b      	bne.n	8002cb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9ea 	bl	8003078 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2228      	movs	r2, #40	@ 0x28
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a60      	ldr	r2, [pc, #384]	@ (8002e30 <I2C_ITError+0x1d8>)
 8002cb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cb2:	e030      	b.n	8002d16 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cb4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f9dd 	bl	8003078 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8e1 	bl	8002e86 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b60      	cmp	r3, #96	@ 0x60
 8002cce:	d01f      	beq.n	8002d10 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d114      	bne.n	8002d10 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d109      	bne.n	8002d08 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d039      	beq.n	8002d98 <I2C_ITError+0x140>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b11      	cmp	r3, #17
 8002d28:	d002      	beq.n	8002d30 <I2C_ITError+0xd8>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b21      	cmp	r3, #33	@ 0x21
 8002d2e:	d133      	bne.n	8002d98 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d3e:	d107      	bne.n	8002d50 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fb89 	bl	800146c <HAL_DMA_GetState>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d017      	beq.n	8002d90 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	4a33      	ldr	r2, [pc, #204]	@ (8002e34 <I2C_ITError+0x1dc>)
 8002d66:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fa89 	bl	800128c <HAL_DMA_Abort_IT>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d04d      	beq.n	8002e1c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d8e:	e045      	b.n	8002e1c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f851 	bl	8002e38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d96:	e041      	b.n	8002e1c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d039      	beq.n	8002e14 <I2C_ITError+0x1bc>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b12      	cmp	r3, #18
 8002da4:	d002      	beq.n	8002dac <I2C_ITError+0x154>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b22      	cmp	r3, #34	@ 0x22
 8002daa:	d133      	bne.n	8002e14 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dba:	d107      	bne.n	8002dcc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fb4b 	bl	800146c <HAL_DMA_GetState>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d017      	beq.n	8002e0c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <I2C_ITError+0x1dc>)
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fa4b 	bl	800128c <HAL_DMA_Abort_IT>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d011      	beq.n	8002e20 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e06:	4610      	mov	r0, r2
 8002e08:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e0a:	e009      	b.n	8002e20 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f813 	bl	8002e38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e12:	e005      	b.n	8002e20 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f80f 	bl	8002e38 <I2C_TreatErrorCallback>
  }
}
 8002e1a:	e002      	b.n	8002e22 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e20:	bf00      	nop
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	ffff0000 	.word	0xffff0000
 8002e30:	08001e03 	.word	0x08001e03
 8002e34:	08002ecf 	.word	0x08002ecf

08002e38 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b60      	cmp	r3, #96	@ 0x60
 8002e4a:	d10e      	bne.n	8002e6a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f003 fb51 	bl	800650a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e68:	e009      	b.n	8002e7e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f003 fb30 	bl	80064de <HAL_I2C_ErrorCallback>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d103      	bne.n	8002ea4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d007      	beq.n	8002ec2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	619a      	str	r2, [r3, #24]
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	2200      	movs	r2, #0
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff ff9b 	bl	8002e38 <I2C_TreatErrorCallback>
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	817b      	strh	r3, [r7, #10]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f24:	7a7b      	ldrb	r3, [r7, #9]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	0d5b      	lsrs	r3, r3, #21
 8002f46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <I2C_TransferConfig+0x60>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	ea02 0103 	and.w	r1, r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	03ff63ff 	.word	0x03ff63ff

08002f70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f84:	4a39      	ldr	r2, [pc, #228]	@ (800306c <I2C_Enable_IRQ+0xfc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d032      	beq.n	8002ff0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f8e:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <I2C_Enable_IRQ+0x100>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02d      	beq.n	8002ff0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f98:	4a36      	ldr	r2, [pc, #216]	@ (8003074 <I2C_Enable_IRQ+0x104>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d028      	beq.n	8002ff0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da03      	bge.n	8002fae <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002fac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002fbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002fd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d103      	bne.n	8002fe0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002fde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d133      	bne.n	800304e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f043 0320 	orr.w	r3, r3, #32
 8002fec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fee:	e02e      	b.n	800304e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da03      	bge.n	8003000 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002ffe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003010:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003022:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d103      	bne.n	8003032 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003030:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	2b20      	cmp	r3, #32
 8003036:	d103      	bne.n	8003040 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800303e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	d103      	bne.n	800304e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800304c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	08001ff3 	.word	0x08001ff3
 8003070:	08002415 	.word	0x08002415
 8003074:	080021c9 	.word	0x080021c9

08003078 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00f      	beq.n	80030b2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003098:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030a6:	2b28      	cmp	r3, #40	@ 0x28
 80030a8:	d003      	beq.n	80030b2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80030b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00f      	beq.n	80030dc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80030c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030d0:	2b28      	cmp	r3, #40	@ 0x28
 80030d2:	d003      	beq.n	80030dc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80030da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da03      	bge.n	80030ec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d103      	bne.n	80030fa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d103      	bne.n	8003108 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f043 0320 	orr.w	r3, r3, #32
 8003106:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	2b40      	cmp	r3, #64	@ 0x40
 800310c:	d103      	bne.n	8003116 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003114:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43da      	mvns	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	400a      	ands	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b20      	cmp	r3, #32
 8003148:	d138      	bne.n	80031bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003154:	2302      	movs	r3, #2
 8003156:	e032      	b.n	80031be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	@ 0x24
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d139      	bne.n	8003254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e033      	b.n	8003256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2224      	movs	r2, #36	@ 0x24
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800321c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <HAL_PWREx_GetVoltageRange+0x18>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40007000 	.word	0x40007000

08003280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328e:	d130      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003290:	4b23      	ldr	r3, [pc, #140]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800329c:	d038      	beq.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329e:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2232      	movs	r2, #50	@ 0x32
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003328 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0c9b      	lsrs	r3, r3, #18
 80032c0:	3301      	adds	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c4:	e002      	b.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032cc:	4b14      	ldr	r3, [pc, #80]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d8:	d102      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ec:	d110      	bne.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fe:	d007      	beq.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003300:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003308:	4a05      	ldr	r2, [pc, #20]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000
 8003324:	20000000 	.word	0x20000000
 8003328:	431bde83 	.word	0x431bde83

0800332c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f000 bc02 	b.w	8003b44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003340:	4b96      	ldr	r3, [pc, #600]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334a:	4b94      	ldr	r3, [pc, #592]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80e4 	beq.w	800352a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_RCC_OscConfig+0x4c>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	f040 808b 	bne.w	8003486 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b01      	cmp	r3, #1
 8003374:	f040 8087 	bne.w	8003486 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003378:	4b88      	ldr	r3, [pc, #544]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x64>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e3d9      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	4b81      	ldr	r3, [pc, #516]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <HAL_RCC_OscConfig+0x7e>
 80033a0:	4b7e      	ldr	r3, [pc, #504]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a8:	e005      	b.n	80033b6 <HAL_RCC_OscConfig+0x8a>
 80033aa:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d223      	bcs.n	8003402 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd54 	bl	8003e6c <RCC_SetFlashLatencyFromMSIRange>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e3ba      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ce:	4b73      	ldr	r3, [pc, #460]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a72      	ldr	r2, [pc, #456]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b70      	ldr	r3, [pc, #448]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	496d      	ldr	r1, [pc, #436]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ec:	4b6b      	ldr	r3, [pc, #428]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	4968      	ldr	r1, [pc, #416]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e025      	b.n	800344e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b66      	ldr	r3, [pc, #408]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a65      	ldr	r2, [pc, #404]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b63      	ldr	r3, [pc, #396]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4960      	ldr	r1, [pc, #384]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003420:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	495b      	ldr	r1, [pc, #364]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd14 	bl	8003e6c <RCC_SetFlashLatencyFromMSIRange>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e37a      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344e:	f000 fc81 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b51      	ldr	r3, [pc, #324]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4950      	ldr	r1, [pc, #320]	@ (80035a0 <HAL_RCC_OscConfig+0x274>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a4e      	ldr	r2, [pc, #312]	@ (80035a4 <HAL_RCC_OscConfig+0x278>)
 800346c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800346e:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <HAL_RCC_OscConfig+0x27c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fc60 	bl	8000d38 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d052      	beq.n	8003528 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	e35e      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d032      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800348e:	4b43      	ldr	r3, [pc, #268]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a42      	ldr	r2, [pc, #264]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800349a:	f7fd fc9d 	bl	8000dd8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a2:	f7fd fc99 	bl	8000dd8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e347      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b4:	4b39      	ldr	r3, [pc, #228]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c0:	4b36      	ldr	r3, [pc, #216]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a35      	ldr	r2, [pc, #212]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b33      	ldr	r3, [pc, #204]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4930      	ldr	r1, [pc, #192]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034de:	4b2f      	ldr	r3, [pc, #188]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	492b      	ldr	r1, [pc, #172]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e01a      	b.n	800352a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f4:	4b29      	ldr	r3, [pc, #164]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a28      	ldr	r2, [pc, #160]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003500:	f7fd fc6a 	bl	8000dd8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003508:	f7fd fc66 	bl	8000dd8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e314      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1dc>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d073      	beq.n	800361e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x21c>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d10e      	bne.n	8003560 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d063      	beq.n	800361c <HAL_RCC_OscConfig+0x2f0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d15f      	bne.n	800361c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e2f1      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x24c>
 800356a:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a0b      	ldr	r2, [pc, #44]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e025      	b.n	80035c4 <HAL_RCC_OscConfig+0x298>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003580:	d114      	bne.n	80035ac <HAL_RCC_OscConfig+0x280>
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a05      	ldr	r2, [pc, #20]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b03      	ldr	r3, [pc, #12]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a02      	ldr	r2, [pc, #8]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e013      	b.n	80035c4 <HAL_RCC_OscConfig+0x298>
 800359c:	40021000 	.word	0x40021000
 80035a0:	08006de0 	.word	0x08006de0
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004
 80035ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fd fc04 	bl	8000dd8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fd fc00 	bl	8000dd8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e2ae      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4b92      	ldr	r3, [pc, #584]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2a8>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fbf0 	bl	8000dd8 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fd fbec 	bl	8000dd8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	@ 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e29a      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360e:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d0>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d060      	beq.n	80036ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x310>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d119      	bne.n	800366a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	4b7c      	ldr	r3, [pc, #496]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x328>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e277      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b76      	ldr	r3, [pc, #472]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	4973      	ldr	r1, [pc, #460]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	e040      	b.n	80036ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003672:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6e      	ldr	r2, [pc, #440]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fd fbab 	bl	8000dd8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fd fba7 	bl	8000dd8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e255      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003698:	4b65      	ldr	r3, [pc, #404]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b62      	ldr	r3, [pc, #392]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	495f      	ldr	r1, [pc, #380]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
 80036b8:	e018      	b.n	80036ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a5c      	ldr	r2, [pc, #368]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fd fb87 	bl	8000dd8 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fd fb83 	bl	8000dd8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e231      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d03c      	beq.n	8003772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01c      	beq.n	800373a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003706:	4a4a      	ldr	r2, [pc, #296]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd fb62 	bl	8000dd8 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003718:	f7fd fb5e 	bl	8000dd8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e20c      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800372c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ef      	beq.n	8003718 <HAL_RCC_OscConfig+0x3ec>
 8003738:	e01b      	b.n	8003772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373a:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003740:	4a3b      	ldr	r2, [pc, #236]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fd fb45 	bl	8000dd8 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003752:	f7fd fb41 	bl	8000dd8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1ef      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003764:	4b32      	ldr	r3, [pc, #200]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ef      	bne.n	8003752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a6 	beq.w	80038cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003784:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003790:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	4a26      	ldr	r2, [pc, #152]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	@ 0x58
 800379c:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d118      	bne.n	80037ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c4:	f7fd fb08 	bl	8000dd8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037cc:	f7fd fb04 	bl	8000dd8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1b2      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d108      	bne.n	8003804 <HAL_RCC_OscConfig+0x4d8>
 80037f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003802:	e029      	b.n	8003858 <HAL_RCC_OscConfig+0x52c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d115      	bne.n	8003838 <HAL_RCC_OscConfig+0x50c>
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	4a03      	ldr	r2, [pc, #12]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x52c>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	4b9a      	ldr	r3, [pc, #616]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	4a99      	ldr	r2, [pc, #612]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003848:	4b96      	ldr	r3, [pc, #600]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a95      	ldr	r2, [pc, #596]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d016      	beq.n	800388e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd faba 	bl	8000dd8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd fab6 	bl	8000dd8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e162      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	4b89      	ldr	r3, [pc, #548]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ed      	beq.n	8003868 <HAL_RCC_OscConfig+0x53c>
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd faa3 	bl	8000dd8 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fd fa9f 	bl	8000dd8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e14b      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ac:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ed      	bne.n	8003896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c0:	4b78      	ldr	r3, [pc, #480]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c4:	4a77      	ldr	r2, [pc, #476]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d03c      	beq.n	8003952 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01c      	beq.n	800391a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e0:	4b70      	ldr	r3, [pc, #448]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80038e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038e6:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fa72 	bl	8000dd8 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f8:	f7fd fa6e 	bl	8000dd8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e11c      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390a:	4b66      	ldr	r3, [pc, #408]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 800390c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <HAL_RCC_OscConfig+0x5cc>
 8003918:	e01b      	b.n	8003952 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800391a:	4b62      	ldr	r3, [pc, #392]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 800391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003920:	4a60      	ldr	r2, [pc, #384]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd fa55 	bl	8000dd8 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003932:	f7fd fa51 	bl	8000dd8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0ff      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003944:	4b57      	ldr	r3, [pc, #348]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ef      	bne.n	8003932 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80f3 	beq.w	8003b42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	2b02      	cmp	r3, #2
 8003962:	f040 80c9 	bne.w	8003af8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003966:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 0203 	and.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	d12c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	3b01      	subs	r3, #1
 8003986:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d123      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003996:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d11b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d113      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d109      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	3b01      	subs	r3, #1
 80039ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d06b      	beq.n	8003aac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d062      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039da:	4b32      	ldr	r3, [pc, #200]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0ac      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039ea:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 80039f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f6:	f7fd f9ef 	bl	8000dd8 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd f9eb 	bl	8000dd8 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e099      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a10:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1c:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	4b21      	ldr	r3, [pc, #132]	@ (8003aa8 <HAL_RCC_OscConfig+0x77c>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a36:	0212      	lsls	r2, r2, #8
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0552      	lsls	r2, r2, #21
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0652      	lsls	r2, r2, #25
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a56:	06d2      	lsls	r2, r2, #27
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	4912      	ldr	r1, [pc, #72]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a78:	f7fd f9ae 	bl	8000dd8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd f9aa 	bl	8000dd8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e058      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <HAL_RCC_OscConfig+0x778>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9e:	e050      	b.n	8003b42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e04f      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aac:	4b27      	ldr	r3, [pc, #156]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d144      	bne.n	8003b42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a23      	ldr	r2, [pc, #140]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac4:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ad0:	f7fd f982 	bl	8000dd8 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd f97e 	bl	8000dd8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e02c      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aea:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x7ac>
 8003af6:	e024      	b.n	8003b42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d01f      	beq.n	8003b3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd f965 	bl	8000dd8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd f961 	bl	8000dd8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4905      	ldr	r1, [pc, #20]	@ (8003b4c <HAL_RCC_OscConfig+0x820>)
 8003b36:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0x824>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60cb      	str	r3, [r1, #12]
 8003b3c:	e001      	b.n	8003b42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	feeefffc 	.word	0xfeeefffc

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0e7      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b75      	ldr	r3, [pc, #468]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d910      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b72      	ldr	r3, [pc, #456]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 0207 	bic.w	r2, r3, #7
 8003b7e:	4970      	ldr	r1, [pc, #448]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b6e      	ldr	r3, [pc, #440]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0cf      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d010      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	4b66      	ldr	r3, [pc, #408]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d908      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b63      	ldr	r3, [pc, #396]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4960      	ldr	r1, [pc, #384]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d04c      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	4b5a      	ldr	r3, [pc, #360]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d121      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0a6      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf2:	4b54      	ldr	r3, [pc, #336]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d115      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e09a      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e08e      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e086      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b46      	ldr	r3, [pc, #280]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4943      	ldr	r1, [pc, #268]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3c:	f7fd f8cc 	bl	8000dd8 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fd f8c8 	bl	8000dd8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e06e      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b31      	ldr	r3, [pc, #196]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d208      	bcs.n	8003c9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b2e      	ldr	r3, [pc, #184]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	492b      	ldr	r1, [pc, #172]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9a:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d210      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 0207 	bic.w	r2, r3, #7
 8003cb0:	4923      	ldr	r1, [pc, #140]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb8:	4b21      	ldr	r3, [pc, #132]	@ (8003d40 <HAL_RCC_ClockConfig+0x1ec>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e036      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4918      	ldr	r1, [pc, #96]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf4:	4b13      	ldr	r3, [pc, #76]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4910      	ldr	r1, [pc, #64]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d08:	f000 f824 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	490b      	ldr	r1, [pc, #44]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f4>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <HAL_RCC_ClockConfig+0x1f8>)
 8003d26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d28:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_RCC_ClockConfig+0x1fc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f803 	bl	8000d38 <HAL_InitTick>
 8003d32:	4603      	mov	r3, r0
 8003d34:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d36:	7afb      	ldrb	r3, [r7, #11]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40022000 	.word	0x40022000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08006de0 	.word	0x08006de0
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d62:	4b3e      	ldr	r3, [pc, #248]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x34>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d121      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d11e      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d88:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e005      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003da4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003db0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d102      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dcc:	4b25      	ldr	r3, [pc, #148]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	e004      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dd8:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d134      	bne.n	8003e4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003de2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0xa6>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d003      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0xac>
 8003df8:	e005      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dfc:	617b      	str	r3, [r7, #20]
      break;
 8003dfe:	e005      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e02:	617b      	str	r3, [r7, #20]
      break;
 8003e04:	e002      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	617b      	str	r3, [r7, #20]
      break;
 8003e0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e0c:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	3301      	adds	r3, #1
 8003e18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	0e5b      	lsrs	r3, r3, #25
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3724      	adds	r7, #36	@ 0x24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08006df0 	.word	0x08006df0
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	007a1200 	.word	0x007a1200

08003e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e78:	4b2a      	ldr	r3, [pc, #168]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e84:	f7ff f9ee 	bl	8003264 <HAL_PWREx_GetVoltageRange>
 8003e88:	6178      	str	r0, [r7, #20]
 8003e8a:	e014      	b.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e8c:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	4a24      	ldr	r2, [pc, #144]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e98:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ea4:	f7ff f9de 	bl	8003264 <HAL_PWREx_GetVoltageRange>
 8003ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eae:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ebc:	d10b      	bne.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b80      	cmp	r3, #128	@ 0x80
 8003ec2:	d919      	bls.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ec8:	d902      	bls.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eca:	2302      	movs	r3, #2
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	e013      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e010      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b80      	cmp	r3, #128	@ 0x80
 8003eda:	d902      	bls.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003edc:	2303      	movs	r3, #3
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e00a      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b80      	cmp	r3, #128	@ 0x80
 8003ee6:	d102      	bne.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ee8:	2302      	movs	r3, #2
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e004      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b70      	cmp	r3, #112	@ 0x70
 8003ef2:	d101      	bne.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 0207 	bic.w	r2, r3, #7
 8003f00:	4909      	ldr	r1, [pc, #36]	@ (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d001      	beq.n	8003f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40022000 	.word	0x40022000

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f34:	2300      	movs	r3, #0
 8003f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d031      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f50:	d01a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f56:	d814      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f60:	d10f      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f62:	4b5d      	ldr	r3, [pc, #372]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a5c      	ldr	r2, [pc, #368]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f6e:	e00c      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f9f0 	bl	800435c <RCCEx_PLLSAI1_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	74fb      	strb	r3, [r7, #19]
      break;
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f90:	4b51      	ldr	r3, [pc, #324]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	494e      	ldr	r1, [pc, #312]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 809e 	beq.w	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fbe:	4b46      	ldr	r3, [pc, #280]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd4:	4b40      	ldr	r3, [pc, #256]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	4a3f      	ldr	r2, [pc, #252]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fec:	2301      	movs	r3, #1
 8003fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a39      	ldr	r2, [pc, #228]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ffc:	f7fc feec 	bl	8000dd8 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004002:	e009      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004004:	f7fc fee8 	bl	8000dd8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d902      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	74fb      	strb	r3, [r7, #19]
        break;
 8004016:	e005      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004018:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ef      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d15a      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800402a:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01e      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	429a      	cmp	r2, r3
 8004044:	d019      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004046:	4b24      	ldr	r3, [pc, #144]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004050:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004052:	4b21      	ldr	r3, [pc, #132]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004062:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	4a1b      	ldr	r2, [pc, #108]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004072:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d016      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fc fea8 	bl	8000dd8 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fc fea4 	bl	8000dd8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	74fb      	strb	r3, [r7, #19]
            break;
 80040a2:	e006      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ec      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040b2:	7cfb      	ldrb	r3, [r7, #19]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b8:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ce:	e009      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e4:	7c7b      	ldrb	r3, [r7, #17]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b9b      	ldr	r3, [pc, #620]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	4a9a      	ldr	r2, [pc, #616]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004102:	4b95      	ldr	r3, [pc, #596]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4991      	ldr	r1, [pc, #580]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004124:	4b8c      	ldr	r3, [pc, #560]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	4989      	ldr	r1, [pc, #548]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004146:	4b84      	ldr	r3, [pc, #528]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	4980      	ldr	r1, [pc, #512]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004168:	4b7b      	ldr	r3, [pc, #492]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	4978      	ldr	r1, [pc, #480]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418a:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	496f      	ldr	r1, [pc, #444]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	4967      	ldr	r1, [pc, #412]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ce:	4b62      	ldr	r3, [pc, #392]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	495e      	ldr	r1, [pc, #376]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f0:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	4956      	ldr	r1, [pc, #344]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004212:	4b51      	ldr	r3, [pc, #324]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004220:	494d      	ldr	r1, [pc, #308]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d028      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004234:	4b48      	ldr	r3, [pc, #288]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004242:	4945      	ldr	r1, [pc, #276]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004252:	d106      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004254:	4b40      	ldr	r3, [pc, #256]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a3f      	ldr	r2, [pc, #252]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800425a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425e:	60d3      	str	r3, [r2, #12]
 8004260:	e011      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f872 	bl	800435c <RCCEx_PLLSAI1_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004292:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a0:	492d      	ldr	r1, [pc, #180]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b0:	d106      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b2:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a28      	ldr	r2, [pc, #160]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042bc:	60d3      	str	r3, [r2, #12]
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f843 	bl	800435c <RCCEx_PLLSAI1_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01c      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f0:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fe:	4916      	ldr	r1, [pc, #88]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800430e:	d10c      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f820 	bl	800435c <RCCEx_PLLSAI1_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800434c:	7cbb      	ldrb	r3, [r7, #18]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800436a:	4b74      	ldr	r3, [pc, #464]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d018      	beq.n	80043a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004376:	4b71      	ldr	r3, [pc, #452]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0203 	and.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d10d      	bne.n	80043a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
       ||
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800438e:	4b6b      	ldr	r3, [pc, #428]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
       ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d047      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
 80043a6:	e044      	b.n	8004432 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d018      	beq.n	80043e2 <RCCEx_PLLSAI1_Config+0x86>
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d825      	bhi.n	8004400 <RCCEx_PLLSAI1_Config+0xa4>
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d002      	beq.n	80043be <RCCEx_PLLSAI1_Config+0x62>
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d009      	beq.n	80043d0 <RCCEx_PLLSAI1_Config+0x74>
 80043bc:	e020      	b.n	8004400 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043be:	4b5f      	ldr	r3, [pc, #380]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11d      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ce:	e01a      	b.n	8004406 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043d0:	4b5a      	ldr	r3, [pc, #360]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e0:	e013      	b.n	800440a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043e2:	4b56      	ldr	r3, [pc, #344]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ee:	4b53      	ldr	r3, [pc, #332]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fe:	e006      	b.n	800440e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e004      	b.n	8004410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800440e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004416:	4b49      	ldr	r3, [pc, #292]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	430b      	orrs	r3, r1
 800442c:	4943      	ldr	r1, [pc, #268]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d17c      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004438:	4b40      	ldr	r3, [pc, #256]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3f      	ldr	r2, [pc, #252]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 800443e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004444:	f7fc fcc8 	bl	8000dd8 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800444a:	e009      	b.n	8004460 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800444c:	f7fc fcc4 	bl	8000dd8 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d902      	bls.n	8004460 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	73fb      	strb	r3, [r7, #15]
        break;
 800445e:	e005      	b.n	800446c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004460:	4b36      	ldr	r3, [pc, #216]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ef      	bne.n	800444c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d15f      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004478:	4b30      	ldr	r3, [pc, #192]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004480:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	0211      	lsls	r1, r2, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	06d2      	lsls	r2, r2, #27
 8004490:	430a      	orrs	r2, r1
 8004492:	492a      	ldr	r1, [pc, #168]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
 8004498:	e027      	b.n	80044ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d112      	bne.n	80044c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044a0:	4b26      	ldr	r3, [pc, #152]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80044a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	0211      	lsls	r1, r2, #8
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6912      	ldr	r2, [r2, #16]
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0552      	lsls	r2, r2, #21
 80044bc:	430a      	orrs	r2, r1
 80044be:	491f      	ldr	r1, [pc, #124]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	610b      	str	r3, [r1, #16]
 80044c4:	e011      	b.n	80044ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c6:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6892      	ldr	r2, [r2, #8]
 80044d6:	0211      	lsls	r1, r2, #8
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6952      	ldr	r2, [r2, #20]
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	3a01      	subs	r2, #1
 80044e0:	0652      	lsls	r2, r2, #25
 80044e2:	430a      	orrs	r2, r1
 80044e4:	4915      	ldr	r1, [pc, #84]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044ea:	4b14      	ldr	r3, [pc, #80]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a13      	ldr	r2, [pc, #76]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fc fc6f 	bl	8000dd8 <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044fc:	e009      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fe:	f7fc fc6b 	bl	8000dd8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d902      	bls.n	8004512 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	73fb      	strb	r3, [r7, #15]
          break;
 8004510:	e005      	b.n	800451e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ef      	beq.n	80044fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4903      	ldr	r1, [pc, #12]	@ (800453c <RCCEx_PLLSAI1_Config+0x1e0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000

08004540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e049      	b.n	80045e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fa06 	bl	8000978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fe76 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x24>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e03c      	b.n	800468e <HAL_TIM_PWM_Start+0x9e>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d109      	bne.n	800462e <HAL_TIM_PWM_Start+0x3e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e02f      	b.n	800468e <HAL_TIM_PWM_Start+0x9e>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d109      	bne.n	8004648 <HAL_TIM_PWM_Start+0x58>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e022      	b.n	800468e <HAL_TIM_PWM_Start+0x9e>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d109      	bne.n	8004662 <HAL_TIM_PWM_Start+0x72>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	e015      	b.n	800468e <HAL_TIM_PWM_Start+0x9e>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b10      	cmp	r3, #16
 8004666:	d109      	bne.n	800467c <HAL_TIM_PWM_Start+0x8c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e008      	b.n	800468e <HAL_TIM_PWM_Start+0x9e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e07e      	b.n	8004794 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xb6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a4:	e023      	b.n	80046ee <HAL_TIM_PWM_Start+0xfe>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xc6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046b4:	e01b      	b.n	80046ee <HAL_TIM_PWM_Start+0xfe>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0xd6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c4:	e013      	b.n	80046ee <HAL_TIM_PWM_Start+0xfe>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xe6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d4:	e00b      	b.n	80046ee <HAL_TIM_PWM_Start+0xfe>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Start+0xf6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e4:	e003      	b.n	80046ee <HAL_TIM_PWM_Start+0xfe>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2201      	movs	r2, #1
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 f89c 	bl	8005834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a26      	ldr	r2, [pc, #152]	@ (800479c <HAL_TIM_PWM_Start+0x1ac>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_TIM_PWM_Start+0x12a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a25      	ldr	r2, [pc, #148]	@ (80047a0 <HAL_TIM_PWM_Start+0x1b0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIM_PWM_Start+0x12a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <HAL_TIM_PWM_Start+0x1b4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_TIM_PWM_Start+0x12e>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_TIM_PWM_Start+0x130>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004732:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	@ (800479c <HAL_TIM_PWM_Start+0x1ac>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_PWM_Start+0x162>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004746:	d004      	beq.n	8004752 <HAL_TIM_PWM_Start+0x162>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a14      	ldr	r2, [pc, #80]	@ (80047a0 <HAL_TIM_PWM_Start+0x1b0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b13      	ldr	r3, [pc, #76]	@ (80047a8 <HAL_TIM_PWM_Start+0x1b8>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	00010007 	.word	0x00010007

080047ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f838 	bl	8005834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a39      	ldr	r2, [pc, #228]	@ (80048b0 <HAL_TIM_PWM_Stop+0x104>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIM_PWM_Stop+0x36>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a38      	ldr	r2, [pc, #224]	@ (80048b4 <HAL_TIM_PWM_Stop+0x108>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIM_PWM_Stop+0x36>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a36      	ldr	r2, [pc, #216]	@ (80048b8 <HAL_TIM_PWM_Stop+0x10c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_PWM_Stop+0x3a>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_TIM_PWM_Stop+0x3c>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d017      	beq.n	800481c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <HAL_TIM_PWM_Stop+0x70>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	f240 4344 	movw	r3, #1092	@ 0x444
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_TIM_PWM_Stop+0x70>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800481a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <HAL_TIM_PWM_Stop+0xa0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a1a      	ldr	r2, [r3, #32]
 8004832:	f240 4344 	movw	r3, #1092	@ 0x444
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <HAL_TIM_PWM_Stop+0xa0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <HAL_TIM_PWM_Stop+0xb0>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800485a:	e023      	b.n	80048a4 <HAL_TIM_PWM_Stop+0xf8>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d104      	bne.n	800486c <HAL_TIM_PWM_Stop+0xc0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800486a:	e01b      	b.n	80048a4 <HAL_TIM_PWM_Stop+0xf8>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d104      	bne.n	800487c <HAL_TIM_PWM_Stop+0xd0>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800487a:	e013      	b.n	80048a4 <HAL_TIM_PWM_Stop+0xf8>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d104      	bne.n	800488c <HAL_TIM_PWM_Stop+0xe0>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800488a:	e00b      	b.n	80048a4 <HAL_TIM_PWM_Stop+0xf8>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b10      	cmp	r3, #16
 8004890:	d104      	bne.n	800489c <HAL_TIM_PWM_Stop+0xf0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800489a:	e003      	b.n	80048a4 <HAL_TIM_PWM_Stop+0xf8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400

080048bc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e03c      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0xa6>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d109      	bne.n	8004902 <HAL_TIM_PWM_Start_DMA+0x46>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e02f      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d109      	bne.n	800491c <HAL_TIM_PWM_Start_DMA+0x60>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e022      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0xa6>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d109      	bne.n	8004936 <HAL_TIM_PWM_Start_DMA+0x7a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e015      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b10      	cmp	r3, #16
 800493a:	d109      	bne.n	8004950 <HAL_TIM_PWM_Start_DMA+0x94>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e008      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	e18d      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e03c      	b.n	80049fe <HAL_TIM_PWM_Start_DMA+0x142>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b04      	cmp	r3, #4
 8004988:	d109      	bne.n	800499e <HAL_TIM_PWM_Start_DMA+0xe2>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e02f      	b.n	80049fe <HAL_TIM_PWM_Start_DMA+0x142>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d109      	bne.n	80049b8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e022      	b.n	80049fe <HAL_TIM_PWM_Start_DMA+0x142>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d109      	bne.n	80049d2 <HAL_TIM_PWM_Start_DMA+0x116>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e015      	b.n	80049fe <HAL_TIM_PWM_Start_DMA+0x142>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d109      	bne.n	80049ec <HAL_TIM_PWM_Start_DMA+0x130>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e008      	b.n	80049fe <HAL_TIM_PWM_Start_DMA+0x142>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d034      	beq.n	8004a6c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_TIM_PWM_Start_DMA+0x152>
 8004a08:	887b      	ldrh	r3, [r7, #2]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e139      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start_DMA+0x166>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a20:	e026      	b.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x176>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a30:	e01e      	b.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x186>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a40:	e016      	b.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start_DMA+0x196>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a50:	e00e      	b.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a60:	e006      	b.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a6a:	e001      	b.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e10a      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	f200 80ae 	bhi.w	8004bd4 <HAL_TIM_PWM_Start_DMA+0x318>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004bd5 	.word	0x08004bd5
 8004a88:	08004bd5 	.word	0x08004bd5
 8004a8c:	08004bd5 	.word	0x08004bd5
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004bd5 	.word	0x08004bd5
 8004a98:	08004bd5 	.word	0x08004bd5
 8004a9c:	08004bd5 	.word	0x08004bd5
 8004aa0:	08004b45 	.word	0x08004b45
 8004aa4:	08004bd5 	.word	0x08004bd5
 8004aa8:	08004bd5 	.word	0x08004bd5
 8004aac:	08004bd5 	.word	0x08004bd5
 8004ab0:	08004b8d 	.word	0x08004b8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	4a75      	ldr	r2, [pc, #468]	@ (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004aba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	4a74      	ldr	r2, [pc, #464]	@ (8004c94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	4a73      	ldr	r2, [pc, #460]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004aca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3334      	adds	r3, #52	@ 0x34
 8004ad8:	461a      	mov	r2, r3
 8004ada:	887b      	ldrh	r3, [r7, #2]
 8004adc:	f7fc fb76 	bl	80011cc <HAL_DMA_Start_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0cd      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af8:	60da      	str	r2, [r3, #12]
      break;
 8004afa:	e06e      	b.n	8004bda <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	4a63      	ldr	r2, [pc, #396]	@ (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004b02:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	4a62      	ldr	r2, [pc, #392]	@ (8004c94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	4a61      	ldr	r2, [pc, #388]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004b12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3338      	adds	r3, #56	@ 0x38
 8004b20:	461a      	mov	r2, r3
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	f7fc fb52 	bl	80011cc <HAL_DMA_Start_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0a9      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b40:	60da      	str	r2, [r3, #12]
      break;
 8004b42:	e04a      	b.n	8004bda <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	4a51      	ldr	r2, [pc, #324]	@ (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	4a50      	ldr	r2, [pc, #320]	@ (8004c94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	4a4f      	ldr	r2, [pc, #316]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004b5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	333c      	adds	r3, #60	@ 0x3c
 8004b68:	461a      	mov	r2, r3
 8004b6a:	887b      	ldrh	r3, [r7, #2]
 8004b6c:	f7fc fb2e 	bl	80011cc <HAL_DMA_Start_IT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e085      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b88:	60da      	str	r2, [r3, #12]
      break;
 8004b8a:	e026      	b.n	8004bda <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b90:	4a3f      	ldr	r2, [pc, #252]	@ (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004b92:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	4a3e      	ldr	r2, [pc, #248]	@ (8004c94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	4a3d      	ldr	r2, [pc, #244]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004ba2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3340      	adds	r3, #64	@ 0x40
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	f7fc fb0a 	bl	80011cc <HAL_DMA_Start_IT>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e061      	b.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bd0:	60da      	str	r2, [r3, #12]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d151      	bne.n	8004c84 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fe23 	bl	8005834 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_TIM_PWM_Start_DMA+0x350>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	@ (8004ca0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_TIM_PWM_Start_DMA+0x350>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x354>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c9c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_TIM_PWM_Start_DMA+0x388>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c38:	d004      	beq.n	8004c44 <HAL_TIM_PWM_Start_DMA+0x388>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d115      	bne.n	8004c70 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ca8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d015      	beq.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5c:	d011      	beq.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	e008      	b.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	0800515f 	.word	0x0800515f
 8004c94:	08005207 	.word	0x08005207
 8004c98:	080050cd 	.word	0x080050cd
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	00010007 	.word	0x00010007

08004cac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d855      	bhi.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cfd 	.word	0x08004cfd
 8004ccc:	08004d6d 	.word	0x08004d6d
 8004cd0:	08004d6d 	.word	0x08004d6d
 8004cd4:	08004d6d 	.word	0x08004d6d
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d6d 	.word	0x08004d6d
 8004ce0:	08004d6d 	.word	0x08004d6d
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d35 	.word	0x08004d35
 8004cec:	08004d6d 	.word	0x08004d6d
 8004cf0:	08004d6d 	.word	0x08004d6d
 8004cf4:	08004d6d 	.word	0x08004d6d
 8004cf8:	08004d51 	.word	0x08004d51
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc fabb 	bl	800128c <HAL_DMA_Abort_IT>
      break;
 8004d16:	e02c      	b.n	8004d72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fc faad 	bl	800128c <HAL_DMA_Abort_IT>
      break;
 8004d32:	e01e      	b.n	8004d72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fc fa9f 	bl	800128c <HAL_DMA_Abort_IT>
      break;
 8004d4e:	e010      	b.n	8004d72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc fa91 	bl	800128c <HAL_DMA_Abort_IT>
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d70:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d176      	bne.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fd57 	bl	8005834 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a39      	ldr	r2, [pc, #228]	@ (8004e70 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a37      	ldr	r2, [pc, #220]	@ (8004e74 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a36      	ldr	r2, [pc, #216]	@ (8004e78 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d017      	beq.n	8004dde <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <HAL_TIM_PWM_Stop_DMA+0x132>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_PWM_Stop_DMA+0x132>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_TIM_PWM_Stop_DMA+0x162>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_PWM_Stop_DMA+0x162>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Stop_DMA+0x172>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_PWM_Stop_DMA+0x182>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e2c:	e01b      	b.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Stop_DMA+0x192>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e3c:	e013      	b.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e4c:	e00b      	b.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40014400 	.word	0x40014400

08004e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e0ff      	b.n	800509a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b14      	cmp	r3, #20
 8004ea6:	f200 80f0 	bhi.w	800508a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004f05 	.word	0x08004f05
 8004eb4:	0800508b 	.word	0x0800508b
 8004eb8:	0800508b 	.word	0x0800508b
 8004ebc:	0800508b 	.word	0x0800508b
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	0800508b 	.word	0x0800508b
 8004ec8:	0800508b 	.word	0x0800508b
 8004ecc:	0800508b 	.word	0x0800508b
 8004ed0:	08004f87 	.word	0x08004f87
 8004ed4:	0800508b 	.word	0x0800508b
 8004ed8:	0800508b 	.word	0x0800508b
 8004edc:	0800508b 	.word	0x0800508b
 8004ee0:	08004fc7 	.word	0x08004fc7
 8004ee4:	0800508b 	.word	0x0800508b
 8004ee8:	0800508b 	.word	0x0800508b
 8004eec:	0800508b 	.word	0x0800508b
 8004ef0:	08005009 	.word	0x08005009
 8004ef4:	0800508b 	.word	0x0800508b
 8004ef8:	0800508b 	.word	0x0800508b
 8004efc:	0800508b 	.word	0x0800508b
 8004f00:	08005049 	.word	0x08005049
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fa14 	bl	8005338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	619a      	str	r2, [r3, #24]
      break;
 8004f42:	e0a5      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa70 	bl	8005430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
      break;
 8004f84:	e084      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fac9 	bl	8005524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0208 	orr.w	r2, r2, #8
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0204 	bic.w	r2, r2, #4
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
      break;
 8004fc4:	e064      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fb21 	bl	8005614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	021a      	lsls	r2, r3, #8
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	61da      	str	r2, [r3, #28]
      break;
 8005006:	e043      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fb5e 	bl	80056d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0208 	orr.w	r2, r2, #8
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0204 	bic.w	r2, r2, #4
 8005032:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005046:	e023      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb96 	bl	8005780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005062:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005088:	e002      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
      break;
 800508e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005098:	7dfb      	ldrb	r3, [r7, #23]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop

080050a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f2:	e02a      	b.n	800514a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d107      	bne.n	800510e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2202      	movs	r2, #2
 8005102:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510c:	e01d      	b.n	800514a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d107      	bne.n	8005128 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2204      	movs	r2, #4
 800511c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005126:	e010      	b.n	800514a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d107      	bne.n	8005142 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2208      	movs	r2, #8
 8005136:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005140:	e003      	b.n	800514a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff ffb4 	bl	80050b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	771a      	strb	r2, [r3, #28]
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	d10b      	bne.n	800518e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d136      	bne.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800518c:	e031      	b.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d10b      	bne.n	80051b0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2202      	movs	r2, #2
 800519c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d125      	bne.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ae:	e020      	b.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d10b      	bne.n	80051d2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d114      	bne.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d0:	e00f      	b.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d10a      	bne.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2208      	movs	r2, #8
 80051e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f001 fd72 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005212:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d103      	bne.n	8005226 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	771a      	strb	r2, [r3, #28]
 8005224:	e019      	b.n	800525a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d103      	bne.n	8005238 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2202      	movs	r2, #2
 8005234:	771a      	strb	r2, [r3, #28]
 8005236:	e010      	b.n	800525a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d103      	bne.n	800524a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2204      	movs	r2, #4
 8005246:	771a      	strb	r2, [r3, #28]
 8005248:	e007      	b.n	800525a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d102      	bne.n	800525a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2208      	movs	r2, #8
 8005258:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff ff22 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	771a      	strb	r2, [r3, #28]
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a2a      	ldr	r2, [pc, #168]	@ (800532c <TIM_Base_SetConfig+0xbc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x20>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a21      	ldr	r2, [pc, #132]	@ (800532c <TIM_Base_SetConfig+0xbc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x52>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x52>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005330 <TIM_Base_SetConfig+0xc0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x52>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005334 <TIM_Base_SetConfig+0xc4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a0c      	ldr	r2, [pc, #48]	@ (800532c <TIM_Base_SetConfig+0xbc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_Base_SetConfig+0xa0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0b      	ldr	r2, [pc, #44]	@ (8005330 <TIM_Base_SetConfig+0xc0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_Base_SetConfig+0xa0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a0a      	ldr	r2, [pc, #40]	@ (8005334 <TIM_Base_SetConfig+0xc4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d103      	bne.n	8005318 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	615a      	str	r2, [r3, #20]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40014000 	.word	0x40014000
 8005334:	40014400 	.word	0x40014400

08005338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f023 0201 	bic.w	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0302 	bic.w	r3, r3, #2
 8005384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a24      	ldr	r2, [pc, #144]	@ (8005424 <TIM_OC1_SetConfig+0xec>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_OC1_SetConfig+0x70>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a23      	ldr	r2, [pc, #140]	@ (8005428 <TIM_OC1_SetConfig+0xf0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC1_SetConfig+0x70>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a22      	ldr	r2, [pc, #136]	@ (800542c <TIM_OC1_SetConfig+0xf4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10c      	bne.n	80053c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0308 	bic.w	r3, r3, #8
 80053ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a17      	ldr	r2, [pc, #92]	@ (8005424 <TIM_OC1_SetConfig+0xec>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_OC1_SetConfig+0xa2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a16      	ldr	r2, [pc, #88]	@ (8005428 <TIM_OC1_SetConfig+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC1_SetConfig+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a15      	ldr	r2, [pc, #84]	@ (800542c <TIM_OC1_SetConfig+0xf4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d111      	bne.n	80053fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400

08005430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f023 0210 	bic.w	r2, r3, #16
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0320 	bic.w	r3, r3, #32
 800547e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a22      	ldr	r2, [pc, #136]	@ (8005518 <TIM_OC2_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10d      	bne.n	80054b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a19      	ldr	r2, [pc, #100]	@ (8005518 <TIM_OC2_SetConfig+0xe8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_OC2_SetConfig+0x98>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a18      	ldr	r2, [pc, #96]	@ (800551c <TIM_OC2_SetConfig+0xec>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC2_SetConfig+0x98>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a17      	ldr	r2, [pc, #92]	@ (8005520 <TIM_OC2_SetConfig+0xf0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d113      	bne.n	80054f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400

08005524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a21      	ldr	r2, [pc, #132]	@ (8005608 <TIM_OC3_SetConfig+0xe4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10d      	bne.n	80055a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800558c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <TIM_OC3_SetConfig+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_OC3_SetConfig+0x96>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a17      	ldr	r2, [pc, #92]	@ (800560c <TIM_OC3_SetConfig+0xe8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_OC3_SetConfig+0x96>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <TIM_OC3_SetConfig+0xec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d113      	bne.n	80055e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	621a      	str	r2, [r3, #32]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400

08005614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	031b      	lsls	r3, r3, #12
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a14      	ldr	r2, [pc, #80]	@ (80056c4 <TIM_OC4_SetConfig+0xb0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_OC4_SetConfig+0x74>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a13      	ldr	r2, [pc, #76]	@ (80056c8 <TIM_OC4_SetConfig+0xb4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC4_SetConfig+0x74>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a12      	ldr	r2, [pc, #72]	@ (80056cc <TIM_OC4_SetConfig+0xb8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d109      	bne.n	800569c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800568e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	019b      	lsls	r3, r3, #6
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400

080056d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005714:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a13      	ldr	r2, [pc, #76]	@ (8005774 <TIM_OC5_SetConfig+0xa4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_OC5_SetConfig+0x6a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a12      	ldr	r2, [pc, #72]	@ (8005778 <TIM_OC5_SetConfig+0xa8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC5_SetConfig+0x6a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a11      	ldr	r2, [pc, #68]	@ (800577c <TIM_OC5_SetConfig+0xac>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d109      	bne.n	800574e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400

08005780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	051b      	lsls	r3, r3, #20
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a14      	ldr	r2, [pc, #80]	@ (8005828 <TIM_OC6_SetConfig+0xa8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_OC6_SetConfig+0x6c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a13      	ldr	r2, [pc, #76]	@ (800582c <TIM_OC6_SetConfig+0xac>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC6_SetConfig+0x6c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <TIM_OC6_SetConfig+0xb0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d109      	bne.n	8005800 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400

08005834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2201      	movs	r2, #1
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	43db      	mvns	r3, r3
 8005856:	401a      	ands	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	431a      	orrs	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e04f      	b.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d108      	bne.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005900:	d004      	beq.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a10      	ldr	r2, [pc, #64]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d10c      	bne.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	4313      	orrs	r3, r2
 800591c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000

0800594c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005964:	2302      	movs	r3, #2
 8005966:	e060      	b.n	8005a2a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d115      	bne.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	051b      	lsls	r3, r3, #20
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00

08005a3c <_ZN13elapsedMillis5resetEv>:

class elapsedMillis {
private:
	unsigned long ms;
public:
	void reset() {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
		ms = millis();
 8005a44:	f001 f984 	bl	8006d50 <_Z6millisv>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
	}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZN13elapsedMillisC1Ev>:
	elapsedMillis(void) {
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
		ms = millis();
 8005a5e:	f001 f977 	bl	8006d50 <_Z6millisv>
 8005a62:	4602      	mov	r2, r0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	601a      	str	r2, [r3, #0]
	}
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <_ZNK13elapsedMilliscvmEv>:
		ms = millis() - val;
	}
	elapsedMillis(const elapsedMillis &orig) {
		ms = orig.ms;
	}
	operator unsigned long() const {
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
		return millis() - ms;
 8005a7a:	f001 f969 	bl	8006d50 <_Z6millisv>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	1ad3      	subs	r3, r2, r3
	}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <_ZN6BuzzerC1EP17TIM_HandleTypeDefm>:
 *      Author: Dustin Lehmann
 */

#include "buzzer.h"

Buzzer::Buzzer(TIM_HandleTypeDef *tim, uint32_t channel) {
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ffd9 	bl	8005a56 <_ZN13elapsedMillisC1Ev>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	751a      	strb	r2, [r3, #20]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	755a      	strb	r2, [r3, #21]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	759a      	strb	r2, [r3, #22]
	this->tim = tim;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	60da      	str	r2, [r3, #12]
	this->channel = channel;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]
}
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <_ZN6Buzzer8pwmStartEv>:

void Buzzer::pwmStart() {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	uint32_t arr = (uint32_t) (BUZZER_TIMER_BASE_FREQUENCY
			/ (this->config.frequency * BUZZER_TIMER_PSC + this->config.frequency)) - 1;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	edd3 7a00 	vldr	s15, [r3]
 8005ada:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8005ade:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	edd3 7a00 	vldr	s15, [r3]
 8005ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aec:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8005c70 <_ZN6Buzzer8pwmStartEv+0x1a4>
 8005af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	uint32_t arr = (uint32_t) (BUZZER_TIMER_BASE_FREQUENCY
 8005af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af8:	ee17 3a90 	vmov	r3, s15
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start(this->tim, this->channel);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fd70 	bl	80045f0 <HAL_TIM_PWM_Start>

	if (this->tim->Instance == TIM2) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1a:	d146      	bne.n	8005baa <_ZN6Buzzer8pwmStartEv+0xde>

		__HAL_TIM_SetAutoreload(this->tim, (uint32_t) arr)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	60da      	str	r2, [r3, #12]
		;

		__HAL_TIM_SetCompare(this->tim,this->channel,(uint32_t) arr/2);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <_ZN6Buzzer8pwmStartEv+0x78>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	0852      	lsrs	r2, r2, #1
 8005b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b42:	e08d      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d106      	bne.n	8005b5a <_ZN6Buzzer8pwmStartEv+0x8e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	0852      	lsrs	r2, r2, #1
 8005b56:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b58:	e082      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d106      	bne.n	8005b70 <_ZN6Buzzer8pwmStartEv+0xa4>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	0852      	lsrs	r2, r2, #1
 8005b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b6e:	e077      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d106      	bne.n	8005b86 <_ZN6Buzzer8pwmStartEv+0xba>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	0852      	lsrs	r2, r2, #1
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b84:	e06c      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d106      	bne.n	8005b9c <_ZN6Buzzer8pwmStartEv+0xd0>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	0852      	lsrs	r2, r2, #1
 8005b98:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b9a:	e061      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	0852      	lsrs	r2, r2, #1
 8005ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ba8:	e05a      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>

	} else {
		if (arr > 65535) {
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb0:	d302      	bcc.n	8005bb8 <_ZN6Buzzer8pwmStartEv+0xec>
			arr = 65535;
 8005bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bb6:	60fb      	str	r3, [r7, #12]
		}
		__HAL_TIM_SetAutoreload(this->tim, (uint16_t) arr)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	60da      	str	r2, [r3, #12]
		;

		__HAL_TIM_SetCompare(this->tim,this->channel,(uint16_t) arr/2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <_ZN6Buzzer8pwmStartEv+0x11c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005be6:	e03b      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d108      	bne.n	8005c02 <_ZN6Buzzer8pwmStartEv+0x136>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c00:	e02e      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d108      	bne.n	8005c1c <_ZN6Buzzer8pwmStartEv+0x150>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c1a:	e021      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	d108      	bne.n	8005c36 <_ZN6Buzzer8pwmStartEv+0x16a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c34:	e014      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d108      	bne.n	8005c50 <_ZN6Buzzer8pwmStartEv+0x184>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c4e:	e007      	b.n	8005c60 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
	this->pwm_on = 1;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	751a      	strb	r2, [r3, #20]
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	4bf42400 	.word	0x4bf42400

08005c74 <_ZN6Buzzer7pwmStopEv>:
void Buzzer::pwmStop() {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(this->tim, this->channel);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f7fe fd90 	bl	80047ac <HAL_TIM_PWM_Stop>
	this->pwm_on = 0;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	751a      	strb	r2, [r3, #20]
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZN6Buzzer9setConfigEfta>:


void Buzzer::setConfig(Buzzer_config config) {
	this->config = config;
}
void Buzzer::setConfig(float frequency, uint16_t on_time_ms, int8_t counter) {
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	80fb      	strh	r3, [r7, #6]
 8005caa:	4613      	mov	r3, r2
 8005cac:	717b      	strb	r3, [r7, #5]
	this->config.frequency = frequency;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	601a      	str	r2, [r3, #0]
	this->config.on_time_ms = on_time_ms;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	809a      	strh	r2, [r3, #4]
	this->config.counter = counter;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	797a      	ldrb	r2, [r7, #5]
 8005cbe:	719a      	strb	r2, [r3, #6]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <_ZN6Buzzer5startEv>:

void Buzzer::start() {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	this->buzzerTimer.reset();
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff feaf 	bl	8005a3c <_ZN13elapsedMillis5resetEv>
	this->output_state = 1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	755a      	strb	r2, [r3, #21]
	this->counter = this->config.counter * 2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	759a      	strb	r2, [r3, #22]
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <_ZN6Buzzer6updateEv>:
void Buzzer::stop() {
	this->counter = 0;
	this->output_state = 0;
}

void Buzzer::update() {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
// TODO: continious buzzer
	if (this->counter > 0) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7d9b      	ldrb	r3, [r3, #22]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02a      	beq.n	8005d62 <_ZN6Buzzer6updateEv+0x66>

		if (this->buzzerTimer >= this->config.on_time_ms) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff feae 	bl	8005a72 <_ZNK13elapsedMilliscvmEv>
 8005d16:	4602      	mov	r2, r0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	889b      	ldrh	r3, [r3, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf2c      	ite	cs
 8005d20:	2301      	movcs	r3, #1
 8005d22:	2300      	movcc	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <_ZN6Buzzer6updateEv+0x66>
			this->buzzerTimer.reset();
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fe84 	bl	8005a3c <_ZN13elapsedMillis5resetEv>

			this->output_state = !this->output_state;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7d5b      	ldrb	r3, [r3, #21]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	755a      	strb	r2, [r3, #21]
			this->counter--;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	7d9b      	ldrb	r3, [r3, #22]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	759a      	strb	r2, [r3, #22]

			if (this->counter == 0){
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7d9b      	ldrb	r3, [r3, #22]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <_ZN6Buzzer6updateEv+0x66>
				this->output_state = 0;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	755a      	strb	r2, [r3, #21]
			}
		}
	}

	if (this->output_state == 1 && this->pwm_on == 0) {
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7d5b      	ldrb	r3, [r3, #21]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <_ZN6Buzzer6updateEv+0x7e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7d1b      	ldrb	r3, [r3, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <_ZN6Buzzer6updateEv+0x7e>
		this->pwmStart();
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff feaa 	bl	8005acc <_ZN6Buzzer8pwmStartEv>
//
//	if (this->state == 0 && this->pwm_on) {
//		this->stop();
//	}

}
 8005d78:	e00a      	b.n	8005d90 <_ZN6Buzzer6updateEv+0x94>
	} else if (this->output_state == 0 && this->pwm_on == 1) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	7d5b      	ldrb	r3, [r3, #21]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <_ZN6Buzzer6updateEv+0x94>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7d1b      	ldrb	r3, [r3, #20]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <_ZN6Buzzer6updateEv+0x94>
		this->pwmStop();
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff ff72 	bl	8005c74 <_ZN6Buzzer7pwmStopEv>
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_ZN19core_utils_CallbackC1Ev>:


#include "callback.h"


core_utils_Callback::core_utils_Callback() {
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	721a      	strb	r2, [r3, #8]

}
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <_ZN19core_utils_Callback4callEPv>:
	this->callback = callback;
	this->params = params;
}


void core_utils_Callback::call(void *argument) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	this->callback(argument, this->params);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6852      	ldr	r2, [r2, #4]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	6838      	ldr	r0, [r7, #0]
 8005dca:	4798      	blx	r3
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <_ZN6EEPROMC1EP19__I2C_HandleTypeDefh>:
 *      Author: Dustin Lehmann
 */

#include "eeprom.h"

EEPROM::EEPROM(I2C_HandleTypeDef *hi2c,
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
		uint8_t address) {
	this->hi2c = hi2c;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	601a      	str	r2, [r3, #0]
	this->address = address;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	79fa      	ldrb	r2, [r7, #7]
 8005dec:	711a      	strb	r2, [r3, #4]
}
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <_ZN13elapsedMillisC1Em>:
	elapsedMillis(unsigned long val) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 8005e06:	f000 ffa3 	bl	8006d50 <_Z6millisv>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
	}
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <_ZN13elapsedMillisaSEm>:
	elapsedMillis & operator =(const elapsedMillis &rhs) {
		ms = rhs.ms;
		return *this;
	}
	elapsedMillis & operator =(unsigned long val) {
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 8005e28:	f000 ff92 	bl	8006d50 <_Z6millisv>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
		return *this;
 8005e36:	687b      	ldr	r3, [r7, #4]
	}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <firmware_init>:
I2C_Slave i2c_slave_intern(&hi2c1, 0x02, register_map, 255);

elapsedMillis timer_test = 10000;

/* ================================================================================= */
void firmware_init() {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0

	neopixel_intern.init();
 8005e46:	4832      	ldr	r0, [pc, #200]	@ (8005f10 <firmware_init+0xd0>)
 8005e48:	f000 fe10 	bl	8006a6c <_ZN13WS2812_Strand4initEv>
	neopixel_extern.init();
 8005e4c:	4831      	ldr	r0, [pc, #196]	@ (8005f14 <firmware_init+0xd4>)
 8005e4e:	f000 fe0d 	bl	8006a6c <_ZN13WS2812_Strand4initEv>

	neopixel_intern.update();
 8005e52:	482f      	ldr	r0, [pc, #188]	@ (8005f10 <firmware_init+0xd0>)
 8005e54:	f000 fe42 	bl	8006adc <_ZN13WS2812_Strand6updateEv>
	neopixel_intern.send();
 8005e58:	482d      	ldr	r0, [pc, #180]	@ (8005f10 <firmware_init+0xd0>)
 8005e5a:	f000 fed2 	bl	8006c02 <_ZN13WS2812_Strand4sendEv>

	neopixel_extern.update();
 8005e5e:	482d      	ldr	r0, [pc, #180]	@ (8005f14 <firmware_init+0xd4>)
 8005e60:	f000 fe3c 	bl	8006adc <_ZN13WS2812_Strand6updateEv>
	neopixel_extern.send();
 8005e64:	482b      	ldr	r0, [pc, #172]	@ (8005f14 <firmware_init+0xd4>)
 8005e66:	f000 fecc 	bl	8006c02 <_ZN13WS2812_Strand4sendEv>

	i2c_slave_cm4.init();
 8005e6a:	482b      	ldr	r0, [pc, #172]	@ (8005f18 <firmware_init+0xd8>)
 8005e6c:	f000 fba6 	bl	80065bc <_ZN9I2C_Slave4initEv>
	i2c_slave_cm4.start();
 8005e70:	4829      	ldr	r0, [pc, #164]	@ (8005f18 <firmware_init+0xd8>)
 8005e72:	f000 fbad 	bl	80065d0 <_ZN9I2C_Slave5startEv>

	i2c_slave_intern.init();
 8005e76:	4829      	ldr	r0, [pc, #164]	@ (8005f1c <firmware_init+0xdc>)
 8005e78:	f000 fba0 	bl	80065bc <_ZN9I2C_Slave4initEv>
	i2c_slave_intern.start();
 8005e7c:	4827      	ldr	r0, [pc, #156]	@ (8005f1c <firmware_init+0xdc>)
 8005e7e:	f000 fba7 	bl	80065d0 <_ZN9I2C_Slave5startEv>

	HAL_GPIO_WritePin(ENABLE_CM4_GPIO_Port, ENABLE_CM4_Pin, GPIO_PIN_SET);
 8005e82:	2201      	movs	r2, #1
 8005e84:	2140      	movs	r1, #64	@ 0x40
 8005e86:	4826      	ldr	r0, [pc, #152]	@ (8005f20 <firmware_init+0xe0>)
 8005e88:	f7fb fcc0 	bl	800180c <HAL_GPIO_WritePin>
//	neopixel_intern.led[1].continious_output = 1;
//	neopixel_intern.led[1].setColor(0, 0, 100);
//	neopixel_intern.led[1].blink_config.on_time_ms = 400;
//	neopixel_intern.led[1].blink_config.counter = 1;
//
	neopixel_intern.led[0].continious_output = 1;
 8005e8c:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <firmware_init+0xd0>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	729a      	strb	r2, [r3, #10]
	neopixel_intern.led[0].setColor(100, 0, 0);
 8005e92:	2300      	movs	r3, #0
 8005e94:	2200      	movs	r2, #0
 8005e96:	2164      	movs	r1, #100	@ 0x64
 8005e98:	481d      	ldr	r0, [pc, #116]	@ (8005f10 <firmware_init+0xd0>)
 8005e9a:	f000 fccf 	bl	800683c <_ZN10WS2812_LED8setColorEhhh>
	neopixel_intern.led[0].blink_config.on_time_ms = 400;
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f10 <firmware_init+0xd0>)
 8005ea0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005ea4:	811a      	strh	r2, [r3, #8]
	neopixel_intern.led[0].blink_config.counter = 10;
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <firmware_init+0xd0>)
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	719a      	strb	r2, [r3, #6]

	for (int i = 0;i<16; i++){
 8005eac:	2300      	movs	r3, #0
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	e018      	b.n	8005ee4 <firmware_init+0xa4>
		neopixel_extern.led[i].continious_output = 1;
 8005eb2:	4918      	ldr	r1, [pc, #96]	@ (8005f14 <firmware_init+0xd4>)
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	440b      	add	r3, r1
 8005ec0:	330a      	adds	r3, #10
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	701a      	strb	r2, [r3, #0]
		neopixel_extern.led[i].setColor(0, 0, 0);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4a10      	ldr	r2, [pc, #64]	@ (8005f14 <firmware_init+0xd4>)
 8005ed2:	1898      	adds	r0, r3, r2
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f000 fcaf 	bl	800683c <_ZN10WS2812_LED8setColorEhhh>
	for (int i = 0;i<16; i++){
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	dde3      	ble.n	8005eb2 <firmware_init+0x72>
	}


	rc_buzzer.config.frequency = 440;
 8005eea:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <firmware_init+0xe4>)
 8005eec:	4a0e      	ldr	r2, [pc, #56]	@ (8005f28 <firmware_init+0xe8>)
 8005eee:	601a      	str	r2, [r3, #0]
	rc_buzzer.config.on_time_ms = 250;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <firmware_init+0xe4>)
 8005ef2:	22fa      	movs	r2, #250	@ 0xfa
 8005ef4:	809a      	strh	r2, [r3, #4]
	rc_buzzer.config.counter = 3;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <firmware_init+0xe4>)
 8005ef8:	2203      	movs	r2, #3
 8005efa:	719a      	strb	r2, [r3, #6]

	led_status.off();
 8005efc:	480b      	ldr	r0, [pc, #44]	@ (8005f2c <firmware_init+0xec>)
 8005efe:	f000 fc4b 	bl	8006798 <_ZN3LED3offEv>
	rc_buzzer.start();
 8005f02:	4808      	ldr	r0, [pc, #32]	@ (8005f24 <firmware_init+0xe4>)
 8005f04:	f7ff fee2 	bl	8005ccc <_ZN6Buzzer5startEv>


}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000248 	.word	0x20000248
 8005f14:	200005c8 	.word	0x200005c8
 8005f18:	20000a84 	.word	0x20000a84
 8005f1c:	20000aa4 	.word	0x20000aa4
 8005f20:	48000400 	.word	0x48000400
 8005f24:	20000948 	.word	0x20000948
 8005f28:	43dc0000 	.word	0x43dc0000
 8005f2c:	20000960 	.word	0x20000960

08005f30 <firmware_update>:

/* ================================================================================= */
void firmware_update() {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0

	if (timer_check >= 250) {
 8005f34:	4822      	ldr	r0, [pc, #136]	@ (8005fc0 <firmware_update+0x90>)
 8005f36:	f7ff fd9c 	bl	8005a72 <_ZNK13elapsedMilliscvmEv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2bf9      	cmp	r3, #249	@ 0xf9
 8005f3e:	bf8c      	ite	hi
 8005f40:	2301      	movhi	r3, #1
 8005f42:	2300      	movls	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d006      	beq.n	8005f58 <firmware_update+0x28>
		timer_check.reset();
 8005f4a:	481d      	ldr	r0, [pc, #116]	@ (8005fc0 <firmware_update+0x90>)
 8005f4c:	f7ff fd76 	bl	8005a3c <_ZN13elapsedMillis5resetEv>
		checkUsb();
 8005f50:	f000 f842 	bl	8005fd8 <_Z8checkUsbv>
		checkSD();
 8005f54:	f000 f848 	bl	8005fe8 <_Z7checkSDv>
//		led_error.toggle();
//		led_status.toggle();

	}

	if (timer_led_update >= 10) {
 8005f58:	481a      	ldr	r0, [pc, #104]	@ (8005fc4 <firmware_update+0x94>)
 8005f5a:	f7ff fd8a 	bl	8005a72 <_ZNK13elapsedMilliscvmEv>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b09      	cmp	r3, #9
 8005f62:	bf8c      	ite	hi
 8005f64:	2301      	movhi	r3, #1
 8005f66:	2300      	movls	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <firmware_update+0x70>
		timer_led_update = 0;
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4814      	ldr	r0, [pc, #80]	@ (8005fc4 <firmware_update+0x94>)
 8005f72:	f7ff ff54 	bl	8005e1e <_ZN13elapsedMillisaSEm>
		updateInternRGBLEDsFromRegisters();
 8005f76:	f000 f885 	bl	8006084 <_Z32updateInternRGBLEDsFromRegistersv>
		updateStatusLEDFromRegisters();
 8005f7a:	f000 f855 	bl	8006028 <_Z28updateStatusLEDFromRegistersv>
		updateBuzzerFromRegisters();
 8005f7e:	f000 f915 	bl	80061ac <_Z25updateBuzzerFromRegistersv>
		neopixel_extern.update();
 8005f82:	4811      	ldr	r0, [pc, #68]	@ (8005fc8 <firmware_update+0x98>)
 8005f84:	f000 fdaa 	bl	8006adc <_ZN13WS2812_Strand6updateEv>
		neopixel_extern.send();
 8005f88:	480f      	ldr	r0, [pc, #60]	@ (8005fc8 <firmware_update+0x98>)
 8005f8a:	f000 fe3a 	bl	8006c02 <_ZN13WS2812_Strand4sendEv>
		neopixel_intern.update();
 8005f8e:	480f      	ldr	r0, [pc, #60]	@ (8005fcc <firmware_update+0x9c>)
 8005f90:	f000 fda4 	bl	8006adc <_ZN13WS2812_Strand6updateEv>
		neopixel_intern.send();
 8005f94:	480d      	ldr	r0, [pc, #52]	@ (8005fcc <firmware_update+0x9c>)
 8005f96:	f000 fe34 	bl	8006c02 <_ZN13WS2812_Strand4sendEv>

		rc_buzzer.update();
 8005f9a:	480d      	ldr	r0, [pc, #52]	@ (8005fd0 <firmware_update+0xa0>)
 8005f9c:	f7ff feae 	bl	8005cfc <_ZN6Buzzer6updateEv>
	}

	if (timer_test >= 70) {
 8005fa0:	480c      	ldr	r0, [pc, #48]	@ (8005fd4 <firmware_update+0xa4>)
 8005fa2:	f7ff fd66 	bl	8005a72 <_ZNK13elapsedMilliscvmEv>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b45      	cmp	r3, #69	@ 0x45
 8005faa:	bf8c      	ite	hi
 8005fac:	2301      	movhi	r3, #1
 8005fae:	2300      	movls	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <firmware_update+0x8c>
		timer_test.reset();
 8005fb6:	4807      	ldr	r0, [pc, #28]	@ (8005fd4 <firmware_update+0xa4>)
 8005fb8:	f7ff fd40 	bl	8005a3c <_ZN13elapsedMillis5resetEv>
	}

}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000978 	.word	0x20000978
 8005fc4:	2000097c 	.word	0x2000097c
 8005fc8:	200005c8 	.word	0x200005c8
 8005fcc:	20000248 	.word	0x20000248
 8005fd0:	20000948 	.word	0x20000948
 8005fd4:	20000ac4 	.word	0x20000ac4

08005fd8 <_Z8checkUsbv>:

/* ================================================================================= */
void checkUsb() {
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
}
 8005fdc:	bf00      	nop
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <_Z7checkSDv>:

/* ================================================================================= */
void checkSD() {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SD_CARD_SWITCH_GPIO_Port, SD_CARD_SWITCH_Pin) == 0) {
 8005fec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ff0:	480c      	ldr	r0, [pc, #48]	@ (8006024 <_Z7checkSDv+0x3c>)
 8005ff2:	f7fb fbf3 	bl	80017dc <HAL_GPIO_ReadPin>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d006      	beq.n	8006014 <_Z7checkSDv+0x2c>
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_SET);
 8006006:	2201      	movs	r2, #1
 8006008:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800600c:	4805      	ldr	r0, [pc, #20]	@ (8006024 <_Z7checkSDv+0x3c>)
 800600e:	f7fb fbfd 	bl	800180c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_RESET);
	}
}
 8006012:	e005      	b.n	8006020 <_Z7checkSDv+0x38>
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_RESET);
 8006014:	2200      	movs	r2, #0
 8006016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800601a:	4802      	ldr	r0, [pc, #8]	@ (8006024 <_Z7checkSDv+0x3c>)
 800601c:	f7fb fbf6 	bl	800180c <HAL_GPIO_WritePin>
}
 8006020:	bf00      	nop
 8006022:	bd80      	pop	{r7, pc}
 8006024:	48000400 	.word	0x48000400

08006028 <_Z28updateStatusLEDFromRegistersv>:

/* ================================================================================= */
void updateStatusLEDFromRegisters(){
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
	int8_t status = (int8_t) register_map[REG_ERROR_LED_CONFIG];
 800602e:	4b13      	ldr	r3, [pc, #76]	@ (800607c <_Z28updateStatusLEDFromRegistersv+0x54>)
 8006030:	7f1b      	ldrb	r3, [r3, #28]
 8006032:	71fb      	strb	r3, [r7, #7]

	switch (status) {
 8006034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d016      	beq.n	800606a <_Z28updateStatusLEDFromRegistersv+0x42>
 800603c:	2b01      	cmp	r3, #1
 800603e:	dc18      	bgt.n	8006072 <_Z28updateStatusLEDFromRegistersv+0x4a>
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d002      	beq.n	800604c <_Z28updateStatusLEDFromRegistersv+0x24>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <_Z28updateStatusLEDFromRegistersv+0x3a>
			break;
		case 1:
			led_status.on();
			break;
	}
}
 800604a:	e012      	b.n	8006072 <_Z28updateStatusLEDFromRegistersv+0x4a>
			led_status.toggle();
 800604c:	480c      	ldr	r0, [pc, #48]	@ (8006080 <_Z28updateStatusLEDFromRegistersv+0x58>)
 800604e:	f000 fbb3 	bl	80067b8 <_ZN3LED6toggleEv>
			register_map[REG_ERROR_LED_CONFIG] = (uint8_t) led_status.getState();
 8006052:	480b      	ldr	r0, [pc, #44]	@ (8006080 <_Z28updateStatusLEDFromRegistersv+0x58>)
 8006054:	f000 fbc0 	bl	80067d8 <_ZN3LED8getStateEv>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	4b07      	ldr	r3, [pc, #28]	@ (800607c <_Z28updateStatusLEDFromRegistersv+0x54>)
 800605e:	771a      	strb	r2, [r3, #28]
			break;
 8006060:	e007      	b.n	8006072 <_Z28updateStatusLEDFromRegistersv+0x4a>
			led_status.off();
 8006062:	4807      	ldr	r0, [pc, #28]	@ (8006080 <_Z28updateStatusLEDFromRegistersv+0x58>)
 8006064:	f000 fb98 	bl	8006798 <_ZN3LED3offEv>
			break;
 8006068:	e003      	b.n	8006072 <_Z28updateStatusLEDFromRegistersv+0x4a>
			led_status.on();
 800606a:	4805      	ldr	r0, [pc, #20]	@ (8006080 <_Z28updateStatusLEDFromRegistersv+0x58>)
 800606c:	f000 fb84 	bl	8006778 <_ZN3LED2onEv>
			break;
 8006070:	bf00      	nop
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000984 	.word	0x20000984
 8006080:	20000960 	.word	0x20000960

08006084 <_Z32updateInternRGBLEDsFromRegistersv>:


/* ================================================================================= */

void updateInternRGBLEDsFromRegisters() {
 8006084:	b5b0      	push	{r4, r5, r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af04      	add	r7, sp, #16
	set_rgb_led_data(&neopixel_intern.led[0],
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 800608c:	f893 0020 	ldrb.w	r0, [r3, #32]
 8006090:	4b41      	ldr	r3, [pc, #260]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006092:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 8006096:	4b40      	ldr	r3, [pc, #256]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006098:	f893 5022 	ldrb.w	r5, [r3, #34]	@ 0x22
 800609c:	4b3e      	ldr	r3, [pc, #248]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 800609e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80060a2:	4a3d      	ldr	r2, [pc, #244]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060a4:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80060a8:	493b      	ldr	r1, [pc, #236]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060aa:	f891 1025 	ldrb.w	r1, [r1, #37]	@ 0x25
 80060ae:	9102      	str	r1, [sp, #8]
 80060b0:	9201      	str	r2, [sp, #4]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	462b      	mov	r3, r5
 80060b6:	4622      	mov	r2, r4
 80060b8:	4601      	mov	r1, r0
 80060ba:	4838      	ldr	r0, [pc, #224]	@ (800619c <_Z32updateInternRGBLEDsFromRegistersv+0x118>)
 80060bc:	f000 f8b8 	bl	8006230 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>
			register_map[REG_STATUS_RGB_LED_1_RED],
			register_map[REG_STATUS_RGB_LED_1_GREEN],
			register_map[REG_STATUS_RGB_LED_1_BLUE],
			register_map[REG_STATUS_RGB_LED_1_BLINK_TIME],
			register_map[REG_STATUS_RGB_LED_1_BLINK_COUNTER]);
	set_rgb_led_data(&neopixel_intern.led[1],
 80060c0:	4b35      	ldr	r3, [pc, #212]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060c2:	f893 0026 	ldrb.w	r0, [r3, #38]	@ 0x26
 80060c6:	4b34      	ldr	r3, [pc, #208]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060c8:	f893 4027 	ldrb.w	r4, [r3, #39]	@ 0x27
 80060cc:	4b32      	ldr	r3, [pc, #200]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060ce:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 80060d2:	4b31      	ldr	r3, [pc, #196]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80060d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060da:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80060de:	492e      	ldr	r1, [pc, #184]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060e0:	f891 102b 	ldrb.w	r1, [r1, #43]	@ 0x2b
 80060e4:	9102      	str	r1, [sp, #8]
 80060e6:	9201      	str	r2, [sp, #4]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	462b      	mov	r3, r5
 80060ec:	4622      	mov	r2, r4
 80060ee:	4601      	mov	r1, r0
 80060f0:	482b      	ldr	r0, [pc, #172]	@ (80061a0 <_Z32updateInternRGBLEDsFromRegistersv+0x11c>)
 80060f2:	f000 f89d 	bl	8006230 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>
			register_map[REG_STATUS_RGB_LED_2_RED],
			register_map[REG_STATUS_RGB_LED_2_GREEN],
			register_map[REG_STATUS_RGB_LED_2_BLUE],
			register_map[REG_STATUS_RGB_LED_2_BLINK_TIME],
			register_map[REG_STATUS_RGB_LED_2_BLINK_COUNTER]);
	set_rgb_led_data(&neopixel_intern.led[2],
 80060f6:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060f8:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
 80060fc:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 80060fe:	f893 402d 	ldrb.w	r4, [r3, #45]	@ 0x2d
 8006102:	4b25      	ldr	r3, [pc, #148]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006104:	f893 502e 	ldrb.w	r5, [r3, #46]	@ 0x2e
 8006108:	4b23      	ldr	r3, [pc, #140]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 800610a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800610e:	4a22      	ldr	r2, [pc, #136]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006110:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006114:	4920      	ldr	r1, [pc, #128]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006116:	f891 1031 	ldrb.w	r1, [r1, #49]	@ 0x31
 800611a:	9102      	str	r1, [sp, #8]
 800611c:	9201      	str	r2, [sp, #4]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	462b      	mov	r3, r5
 8006122:	4622      	mov	r2, r4
 8006124:	4601      	mov	r1, r0
 8006126:	481f      	ldr	r0, [pc, #124]	@ (80061a4 <_Z32updateInternRGBLEDsFromRegistersv+0x120>)
 8006128:	f000 f882 	bl	8006230 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>
			register_map[REG_STATUS_RGB_LED_3_GREEN],
			register_map[REG_STATUS_RGB_LED_3_BLUE],
			register_map[REG_STATUS_RGB_LED_3_BLINK_TIME],
			register_map[REG_STATUS_RGB_LED_3_BLINK_COUNTER]);

	for (int i = 0;i<16; i++){
 800612c:	2300      	movs	r3, #0
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	e01e      	b.n	8006170 <_Z32updateInternRGBLEDsFromRegistersv+0xec>
		neopixel_extern.led[i].continious_output = 1;
 8006132:	491d      	ldr	r1, [pc, #116]	@ (80061a8 <_Z32updateInternRGBLEDsFromRegistersv+0x124>)
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	4413      	add	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	440b      	add	r3, r1
 8006140:	330a      	adds	r3, #10
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
		neopixel_extern.led[i].setColor(register_map[REG_STATUS_RGB_LED_2_RED], register_map[REG_STATUS_RGB_LED_2_GREEN], register_map[REG_STATUS_RGB_LED_2_BLUE]);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4a15      	ldr	r2, [pc, #84]	@ (80061a8 <_Z32updateInternRGBLEDsFromRegistersv+0x124>)
 8006152:	1898      	adds	r0, r3, r2
 8006154:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006156:	f893 1027 	ldrb.w	r1, [r3, #39]	@ 0x27
 800615a:	4b0f      	ldr	r3, [pc, #60]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 800615c:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8006160:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006162:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006166:	f000 fb69 	bl	800683c <_ZN10WS2812_LED8setColorEhhh>
	for (int i = 0;i<16; i++){
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3301      	adds	r3, #1
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	dddd      	ble.n	8006132 <_Z32updateInternRGBLEDsFromRegistersv+0xae>
	}

	register_map[REG_STATUS_RGB_LED_1_BLINK_COUNTER] = 0;
 8006176:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	register_map[REG_STATUS_RGB_LED_2_BLINK_COUNTER] = 0;
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006180:	2200      	movs	r2, #0
 8006182:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	register_map[REG_STATUS_RGB_LED_3_BLINK_COUNTER] = 0;
 8006186:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <_Z32updateInternRGBLEDsFromRegistersv+0x114>)
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bdb0      	pop	{r4, r5, r7, pc}
 8006196:	bf00      	nop
 8006198:	20000984 	.word	0x20000984
 800619c:	20000248 	.word	0x20000248
 80061a0:	20000260 	.word	0x20000260
 80061a4:	20000278 	.word	0x20000278
 80061a8:	200005c8 	.word	0x200005c8

080061ac <_Z25updateBuzzerFromRegistersv>:

void updateBuzzerFromRegisters() {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
	uint8_t reg_config = register_map[REG_BUZZER_CONFIG];
 80061b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <_Z25updateBuzzerFromRegistersv+0x7c>)
 80061b4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80061b8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_data = register_map[REG_BUZZER_DATA];
 80061ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <_Z25updateBuzzerFromRegistersv+0x7c>)
 80061bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061c0:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_freq = register_map[REG_BUZZER_FREQ];
 80061c2:	4b19      	ldr	r3, [pc, #100]	@ (8006228 <_Z25updateBuzzerFromRegistersv+0x7c>)
 80061c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061c8:	717b      	strb	r3, [r7, #5]
	uint8_t reg_blink_time = register_map[REG_BUZZER_BLINK_TIME];
 80061ca:	4b17      	ldr	r3, [pc, #92]	@ (8006228 <_Z25updateBuzzerFromRegistersv+0x7c>)
 80061cc:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80061d0:	713b      	strb	r3, [r7, #4]
	uint8_t reg_blink_counter = register_map[REG_BUZZER_BLINK_COUNTER];
 80061d2:	4b15      	ldr	r3, [pc, #84]	@ (8006228 <_Z25updateBuzzerFromRegistersv+0x7c>)
 80061d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80061d8:	70fb      	strb	r3, [r7, #3]

	rc_buzzer.setConfig((float) (reg_freq * 10), (uint16_t)(reg_blink_time * 10), reg_blink_counter);
 80061da:	797a      	ldrb	r2, [r7, #5]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ec:	793b      	ldrb	r3, [r7, #4]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	0092      	lsls	r2, r2, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80061fe:	4619      	mov	r1, r3
 8006200:	eeb0 0a67 	vmov.f32	s0, s15
 8006204:	4809      	ldr	r0, [pc, #36]	@ (800622c <_Z25updateBuzzerFromRegistersv+0x80>)
 8006206:	f7ff fd48 	bl	8005c9a <_ZN6Buzzer9setConfigEfta>

	if(reg_data == 1){
 800620a:	79bb      	ldrb	r3, [r7, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d106      	bne.n	800621e <_Z25updateBuzzerFromRegistersv+0x72>
		register_map[REG_BUZZER_DATA] = 0;
 8006210:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <_Z25updateBuzzerFromRegistersv+0x7c>)
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		rc_buzzer.start();
 8006218:	4804      	ldr	r0, [pc, #16]	@ (800622c <_Z25updateBuzzerFromRegistersv+0x80>)
 800621a:	f7ff fd57 	bl	8005ccc <_ZN6Buzzer5startEv>
	}

}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000984 	.word	0x20000984
 800622c:	20000948 	.word	0x20000948

08006230 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>:

void set_rgb_led_data(WS2812_LED *led, uint8_t reg_config, uint8_t reg_red,
		uint8_t reg_green, uint8_t reg_blue, uint8_t reg_blink_time,
		uint8_t reg_blink_counter) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	4603      	mov	r3, r0
 8006240:	70fb      	strb	r3, [r7, #3]
 8006242:	460b      	mov	r3, r1
 8006244:	70bb      	strb	r3, [r7, #2]
 8006246:	4613      	mov	r3, r2
 8006248:	707b      	strb	r3, [r7, #1]

	uint8_t config_mode = reg_config;
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	73bb      	strb	r3, [r7, #14]

	WS2812_LED_Mode mode;
	switch (config_mode) {
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x2a>
 8006254:	2b01      	cmp	r3, #1
 8006256:	d003      	beq.n	8006260 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x30>
 8006258:	e005      	b.n	8006266 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x36>
	case 0: {
		mode = WS2812_LED_MODE_CONTINIOUS;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
		break;
 800625e:	e005      	b.n	800626c <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x3c>
	}
	case 1: {
		mode = WS2812_LED_MODE_BLINK;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
		break;
 8006264:	e002      	b.n	800626c <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x3c>
	}
	default: {
		mode = WS2812_LED_MODE_CONTINIOUS;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
		break;
 800626a:	bf00      	nop
	}
	}

	// Set the Color based on the register entries
	led->setColor(reg_red, reg_green, reg_blue);
 800626c:	7e3b      	ldrb	r3, [r7, #24]
 800626e:	787a      	ldrb	r2, [r7, #1]
 8006270:	78b9      	ldrb	r1, [r7, #2]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fae2 	bl	800683c <_ZN10WS2812_LED8setColorEhhh>


	if (led->mode == WS2812_LED_MODE_CONTINIOUS){
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d118      	bne.n	80062b2 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x82>
		led->continious_output  = (reg_config >> 7);
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	09db      	lsrs	r3, r3, #7
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	729a      	strb	r2, [r3, #10]

		if (mode == WS2812_LED_MODE_BLINK){
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d121      	bne.n	80062d4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xa4>
			led->setBlinkConfig((uint16_t) reg_blink_time * 10, -1);
 8006290:	7f3b      	ldrb	r3, [r7, #28]
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	4413      	add	r3, r2
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fafc 	bl	80068a2 <_ZN10WS2812_LED14setBlinkConfigEta>
			led->blink();
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fb0d 	bl	80068ca <_ZN10WS2812_LED5blinkEv>
			led->setMode(mode);
			led->continious_output  = (reg_config >> 7);
		}
	}

}
 80062b0:	e010      	b.n	80062d4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xa4>
	} else if(led->mode == WS2812_LED_MODE_BLINK) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	791b      	ldrb	r3, [r3, #4]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d10c      	bne.n	80062d4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xa4>
		if (mode == WS2812_LED_MODE_CONTINIOUS){
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xa4>
			led->setMode(mode);
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fad5 	bl	8006874 <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode>
			led->continious_output  = (reg_config >> 7);
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	729a      	strb	r2, [r3, #10]
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <_Z41__static_initialization_and_destruction_0ii>:
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d146      	bne.n	800637a <_Z41__static_initialization_and_destruction_0ii+0x9e>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d141      	bne.n	800637a <_Z41__static_initialization_and_destruction_0ii+0x9e>
FIRMWARE_NEOPIXEL_INTERN_CHANNEL, 2);
 80062f6:	2302      	movs	r3, #2
 80062f8:	2200      	movs	r2, #0
 80062fa:	4922      	ldr	r1, [pc, #136]	@ (8006384 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80062fc:	4822      	ldr	r0, [pc, #136]	@ (8006388 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80062fe:	f000 fb8a 	bl	8006a16 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>
FIRMWARE_NEOPIXEL_EXTERN_CHANNEL, 16);
 8006302:	2310      	movs	r3, #16
 8006304:	2200      	movs	r2, #0
 8006306:	4921      	ldr	r1, [pc, #132]	@ (800638c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8006308:	4821      	ldr	r0, [pc, #132]	@ (8006390 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800630a:	f000 fb84 	bl	8006a16 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>
Buzzer rc_buzzer(FIRMWARE_PWM_BUZZER_TIM, FIRMWARE_PWM_BUZZER_CHANNEL);
 800630e:	2200      	movs	r2, #0
 8006310:	4920      	ldr	r1, [pc, #128]	@ (8006394 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8006312:	4821      	ldr	r0, [pc, #132]	@ (8006398 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8006314:	f7ff fbbb 	bl	8005a8e <_ZN6BuzzerC1EP17TIM_HandleTypeDefm>
LED led_status(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8006318:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800631c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8006320:	481e      	ldr	r0, [pc, #120]	@ (800639c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8006322:	f000 fa15 	bl	8006750 <_ZN3LEDC1EP12GPIO_TypeDeft>
LED led_error(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 8006326:	2208      	movs	r2, #8
 8006328:	491d      	ldr	r1, [pc, #116]	@ (80063a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800632a:	481e      	ldr	r0, [pc, #120]	@ (80063a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800632c:	f000 fa10 	bl	8006750 <_ZN3LEDC1EP12GPIO_TypeDeft>
EEPROM eeprom_config(FIRMWARE_I2C_INTERN, BOARD_EEPROM_CONFIG_ADDRESS);
 8006330:	22a0      	movs	r2, #160	@ 0xa0
 8006332:	491d      	ldr	r1, [pc, #116]	@ (80063a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8006334:	481d      	ldr	r0, [pc, #116]	@ (80063ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8006336:	f7ff fd4d 	bl	8005dd4 <_ZN6EEPROMC1EP19__I2C_HandleTypeDefh>
elapsedMillis timer_check = 1000;
 800633a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800633e:	481c      	ldr	r0, [pc, #112]	@ (80063b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8006340:	f7ff fd5c 	bl	8005dfc <_ZN13elapsedMillisC1Em>
elapsedMillis timer_led_update;
 8006344:	481b      	ldr	r0, [pc, #108]	@ (80063b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8006346:	f7ff fb86 	bl	8005a56 <_ZN13elapsedMillisC1Ev>
elapsedMillis timer_led_register_read;
 800634a:	481b      	ldr	r0, [pc, #108]	@ (80063b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800634c:	f7ff fb83 	bl	8005a56 <_ZN13elapsedMillisC1Ev>
I2C_Slave i2c_slave_cm4(&hi2c2, 0x02, register_map, 255);
 8006350:	23ff      	movs	r3, #255	@ 0xff
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4b19      	ldr	r3, [pc, #100]	@ (80063bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8006356:	2202      	movs	r2, #2
 8006358:	4919      	ldr	r1, [pc, #100]	@ (80063c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800635a:	481a      	ldr	r0, [pc, #104]	@ (80063c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800635c:	f000 f8f4 	bl	8006548 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>
I2C_Slave i2c_slave_intern(&hi2c1, 0x02, register_map, 255);
 8006360:	23ff      	movs	r3, #255	@ 0xff
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4b15      	ldr	r3, [pc, #84]	@ (80063bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8006366:	2202      	movs	r2, #2
 8006368:	490f      	ldr	r1, [pc, #60]	@ (80063a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800636a:	4817      	ldr	r0, [pc, #92]	@ (80063c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800636c:	f000 f8ec 	bl	8006548 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>
elapsedMillis timer_test = 10000;
 8006370:	f242 7110 	movw	r1, #10000	@ 0x2710
 8006374:	4815      	ldr	r0, [pc, #84]	@ (80063cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8006376:	f7ff fd41 	bl	8005dfc <_ZN13elapsedMillisC1Em>
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	2000011c 	.word	0x2000011c
 8006388:	20000248 	.word	0x20000248
 800638c:	200000d0 	.word	0x200000d0
 8006390:	200005c8 	.word	0x200005c8
 8006394:	20000168 	.word	0x20000168
 8006398:	20000948 	.word	0x20000948
 800639c:	20000960 	.word	0x20000960
 80063a0:	48000400 	.word	0x48000400
 80063a4:	20000968 	.word	0x20000968
 80063a8:	20000028 	.word	0x20000028
 80063ac:	20000970 	.word	0x20000970
 80063b0:	20000978 	.word	0x20000978
 80063b4:	2000097c 	.word	0x2000097c
 80063b8:	20000980 	.word	0x20000980
 80063bc:	20000984 	.word	0x20000984
 80063c0:	2000007c 	.word	0x2000007c
 80063c4:	20000a84 	.word	0x20000a84
 80063c8:	20000aa4 	.word	0x20000aa4
 80063cc:	20000ac4 	.word	0x20000ac4

080063d0 <_GLOBAL__sub_I_neopixel_intern>:
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80063d8:	2001      	movs	r0, #1
 80063da:	f7ff ff7f 	bl	80062dc <_Z41__static_initialization_and_destruction_0ii>
 80063de:	bd80      	pop	{r7, pc}

080063e0 <_Z3nopv>:
#include "i2c_slave.h"

I2C_Slave *registered_i2c_slaves[FIRMWARE_NUM_I2C_SLAVES];
uint8_t num_i2c_slave = 0;

void nop() {
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0

}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>:

I2C_Slave* get_I2C_slave(I2C_HandleTypeDef *hi2c) {
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_i2c_slave; i++) {
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e00f      	b.n	800641e <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x2e>
		if (registered_i2c_slaves[i]->hi2c == hi2c) {
 80063fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006438 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d104      	bne.n	8006418 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x28>
			return registered_i2c_slaves[i];
 800640e:	4a0a      	ldr	r2, [pc, #40]	@ (8006438 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006416:	e009      	b.n	800642c <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x3c>
	for (int i = 0; i < num_i2c_slave; i++) {
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	4b07      	ldr	r3, [pc, #28]	@ (800643c <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x4c>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4293      	cmp	r3, r2
 8006428:	dbe9      	blt.n	80063fe <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0xe>
		}
	}
	return NULL;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20000ac8 	.word	0x20000ac8
 800643c:	20000ad0 	.word	0x20000ad0

08006440 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ffd1 	bl	80063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 800644e:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_I2C_ListenCpltCallback+0x1c>
		slave->i2c_listenCompleteCallback();
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f901 	bl	800665e <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>
	}
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
 8006470:	4613      	mov	r3, r2
 8006472:	803b      	strh	r3, [r7, #0]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff ffbb 	bl	80063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 800647a:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_I2C_AddrCallback+0x2a>
		slave->i2c_addrCallback(TransferDirection, AddrMatchCode);
 8006482:	883a      	ldrh	r2, [r7, #0]
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f8ae 	bl	80065ea <_ZN9I2C_Slave16i2c_addrCallbackEht>
	}
}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ffa6 	bl	80063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80064a4:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_I2C_SlaveRxCpltCallback+0x1c>
		slave->i2c_rxCompleteCallback();
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f8f2 	bl	8006696 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>
	}
}
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff ff94 	bl	80063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80064c8:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_I2C_SlaveTxCpltCallback+0x1c>
		slave->i2c_txCompleteCallback();
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f904 	bl	80066de <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>
	}
}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ff82 	bl	80063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80064ec:	60f8      	str	r0, [r7, #12]
	uint32_t x = HAL_I2C_GetError(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb fc7b 	bl	8001dea <HAL_I2C_GetError>
 80064f4:	60b8      	str	r0, [r7, #8]
	if (slave != NULL) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_I2C_ErrorCallback+0x24>
		slave->i2c_errorCallback();
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f90e 	bl	800671e <_ZN9I2C_Slave17i2c_errorCallbackEv>
	}
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c) {
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff6c 	bl	80063f0 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8006518:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_I2C_AbortCpltCallback+0x1c>
		slave->i2c_abortCompleteCallback();
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f90b 	bl	800673c <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>
	}
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <_ZN19I2C_Slave_callbacksC1Ev>:

typedef struct I2C_Slave_config {
	I2C_Slave_mode mode;
} I2C_Slave_config;

struct I2C_Slave_callbacks {
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fc2d 	bl	8005d98 <_ZN19core_utils_CallbackC1Ev>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>:

/* ===================================================================== */
I2C_Slave::I2C_Slave(I2C_HandleTypeDef *hi2c, uint8_t address,
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
		uint8_t *registerMap, uint8_t num_registers) {
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff ffe7 	bl	800652e <_ZN19I2C_Slave_callbacksC1Ev>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	615a      	str	r2, [r3, #20]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	761a      	strb	r2, [r3, #24]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	76da      	strb	r2, [r3, #27]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
	this->hi2c = hi2c;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	611a      	str	r2, [r3, #16]
	this->address = address;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	79fa      	ldrb	r2, [r7, #7]
 8006582:	775a      	strb	r2, [r3, #29]
	this->register_map = registerMap;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	615a      	str	r2, [r3, #20]
	this->register_map_length = num_registers;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	7e3a      	ldrb	r2, [r7, #24]
 800658e:	765a      	strb	r2, [r3, #25]

	registered_i2c_slaves[num_i2c_slave] = this;
 8006590:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x6c>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	4619      	mov	r1, r3
 8006596:	4a08      	ldr	r2, [pc, #32]	@ (80065b8 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x70>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	num_i2c_slave++;
 800659e:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x6c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	4b03      	ldr	r3, [pc, #12]	@ (80065b4 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x6c>)
 80065a8:	701a      	strb	r2, [r3, #0]
}
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000ad0 	.word	0x20000ad0
 80065b8:	20000ac8 	.word	0x20000ac8

080065bc <_ZN9I2C_Slave4initEv>:

	registered_i2c_slaves[num_i2c_slave] = this;
	num_i2c_slave++;
}

void I2C_Slave::init() {
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <_ZN9I2C_Slave5startEv>:

void I2C_Slave::start() {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(this->hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fb fb47 	bl	8001c70 <HAL_I2C_EnableListen_IT>
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <_ZN9I2C_Slave16i2c_addrCallbackEht>:
	}
	}
}

void I2C_Slave::i2c_addrCallback(uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
 80065f6:	4613      	mov	r3, r2
 80065f8:	803b      	strh	r3, [r7, #0]

	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d118      	bne.n	8006632 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x48>
		this->direction = I2C_SLAVE_DIRECTION_TRANSMIT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	769a      	strb	r2, [r3, #26]
		if (this->received_bytes == 0) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7edb      	ldrb	r3, [r3, #27]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10e      	bne.n	800662c <_ZN9I2C_Slave16i2c_addrCallbackEht+0x42>
			HAL_StatusTypeDef status = HAL_I2C_Slave_Seq_Receive_IT(this->hi2c, &this->bufferAddress, 1,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6918      	ldr	r0, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f103 0118 	add.w	r1, r3, #24
 8006618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800661c:	2201      	movs	r2, #1
 800661e:	f7fb fa75 	bl	8001b0c <HAL_I2C_Slave_Seq_Receive_IT>
 8006622:	4603      	mov	r3, r0
 8006624:	73fb      	strb	r3, [r7, #15]
			I2C_NEXT_FRAME);
			nop();
 8006626:	f7ff fedb 	bl	80063e0 <_Z3nopv>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
	}
}
 800662a:	e014      	b.n	8006656 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x6c>
			nop();
 800662c:	f7ff fed8 	bl	80063e0 <_Z3nopv>
}
 8006630:	e011      	b.n	8006656 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x6c>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d10e      	bne.n	8006656 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x6c>
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	769a      	strb	r2, [r3, #26]
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6918      	ldr	r0, [r3, #16]
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	7e12      	ldrb	r2, [r2, #24]
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 800664a:	1899      	adds	r1, r3, r2
 800664c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006650:	2201      	movs	r2, #1
 8006652:	f7fb f9a9 	bl	80019a8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>:
void I2C_Slave::i2c_listenCompleteCallback() {
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]

	this->received_bytes = 0;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	76da      	strb	r2, [r3, #27]
	this->sent_bytes = 0;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	771a      	strb	r2, [r3, #28]
	HAL_I2C_EnableListen_IT(this->hi2c);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fb fafa 	bl	8001c70 <HAL_I2C_EnableListen_IT>
	if (this->callbacks.listen_cmplt_callback.registered) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7a1b      	ldrb	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv+0x30>
		this->callbacks.listen_cmplt_callback.call(this);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fb93 	bl	8005db4 <_ZN19core_utils_Callback4callEPv>
	}
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>:
void I2C_Slave::i2c_rxCompleteCallback() {
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
	this->received_bytes++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7edb      	ldrb	r3, [r3, #27]
 80066a2:	3301      	adds	r3, #1
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	76da      	strb	r2, [r3, #27]
	if (this->received_bytes > 1) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7edb      	ldrb	r3, [r3, #27]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d905      	bls.n	80066be <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv+0x28>

		this->bufferAddress++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7e1b      	ldrb	r3, [r3, #24]
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	761a      	strb	r2, [r3, #24]

	}
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6918      	ldr	r0, [r3, #16]
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	7e12      	ldrb	r2, [r2, #24]
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 80066ca:	1899      	adds	r1, r3, r2
 80066cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066d0:	2201      	movs	r2, #1
 80066d2:	f7fb fa1b 	bl	8001b0c <HAL_I2C_Slave_Seq_Receive_IT>

}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>:
void I2C_Slave::i2c_txCompleteCallback() {
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
	this->bufferAddress++;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7e1b      	ldrb	r3, [r3, #24]
 80066ea:	3301      	adds	r3, #1
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	761a      	strb	r2, [r3, #24]
	this->sent_bytes++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	7f1b      	ldrb	r3, [r3, #28]
 80066f6:	3301      	adds	r3, #1
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	771a      	strb	r2, [r3, #28]
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6918      	ldr	r0, [r3, #16]
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	7e12      	ldrb	r2, [r2, #24]
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 800670a:	1899      	adds	r1, r3, r2
 800670c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006710:	2201      	movs	r2, #1
 8006712:	f7fb f949 	bl	80019a8 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <_ZN9I2C_Slave17i2c_errorCallbackEv>:
void I2C_Slave::i2c_errorCallback() {
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
	nop();
 8006726:	f7ff fe5b 	bl	80063e0 <_Z3nopv>
	HAL_I2C_EnableListen_IT(this->hi2c);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb fa9e 	bl	8001c70 <HAL_I2C_EnableListen_IT>
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>:
void I2C_Slave::i2c_abortCompleteCallback() {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	nop();
 8006744:	f7ff fe4c 	bl	80063e0 <_Z3nopv>
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <_ZN3LEDC1EP12GPIO_TypeDeft>:
 */


#include "led.h"

LED::LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	809a      	strh	r2, [r3, #4]
}
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <_ZN3LED2onEv>:

void LED::on() {
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	889b      	ldrh	r3, [r3, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	4619      	mov	r1, r3
 800678c:	f7fb f83e 	bl	800180c <HAL_GPIO_WritePin>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN3LED3offEv>:


void LED::off() {
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	889b      	ldrh	r3, [r3, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	4619      	mov	r1, r3
 80067ac:	f7fb f82e 	bl	800180c <HAL_GPIO_WritePin>
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <_ZN3LED6toggleEv>:

void LED::toggle() {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	889b      	ldrh	r3, [r3, #4]
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7fb f836 	bl	800183c <HAL_GPIO_TogglePin>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ZN3LED8getStateEv>:

uint8_t LED::getState(){
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_ReadPin(this->GPIOx, this->PINx);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	889b      	ldrh	r3, [r3, #4]
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fa fff6 	bl	80017dc <HAL_GPIO_ReadPin>
}
 80067f0:	bf00      	nop
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <_ZN10WS2812_LEDC1Ev>:
#include <ws2812.h>

uint8_t num_neopixel = 0;
WS2812_Strand *neopixel_handler[2] = { 0 };

WS2812_LED::WS2812_LED() {
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	705a      	strb	r2, [r3, #1]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	709a      	strb	r2, [r3, #2]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	70da      	strb	r2, [r3, #3]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	729a      	strb	r2, [r3, #10]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	330c      	adds	r3, #12
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff f919 	bl	8005a56 <_ZN13elapsedMillisC1Ev>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3310      	adds	r3, #16
 8006828:	2100      	movs	r1, #0
 800682a:	460a      	mov	r2, r1
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	460a      	mov	r2, r1
 8006830:	709a      	strb	r2, [r3, #2]
}
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <_ZN10WS2812_LED8setColorEhhh>:

WS2812_LED::WS2812_LED(uint8_t position) {
	this->strand_position = position;
}

void WS2812_LED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	461a      	mov	r2, r3
 800684a:	4603      	mov	r3, r0
 800684c:	70fb      	strb	r3, [r7, #3]
 800684e:	460b      	mov	r3, r1
 8006850:	70bb      	strb	r3, [r7, #2]
 8006852:	4613      	mov	r3, r2
 8006854:	707b      	strb	r3, [r7, #1]
	this->red = red;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	705a      	strb	r2, [r3, #1]
	this->green = green;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	78ba      	ldrb	r2, [r7, #2]
 8006860:	709a      	strb	r2, [r3, #2]
	this->blue = blue;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	787a      	ldrb	r2, [r7, #1]
 8006866:	70da      	strb	r2, [r3, #3]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode>:

void WS2812_LED::setMode(WS2812_LED_Mode mode) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
	if (this->mode == WS2812_LED_MODE_CONTINIOUS && mode == WS2812_LED_MODE_BLINK){
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode+0x20>
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d102      	bne.n	8006894 <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode+0x20>
		this->blink();
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f81b 	bl	80068ca <_ZN10WS2812_LED5blinkEv>
	}
	this->mode = mode;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	711a      	strb	r2, [r3, #4]
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <_ZN10WS2812_LED14setBlinkConfigEta>:
void WS2812_LED::setBlinkConfig(WS2812_blink_config config) {
	this->blink_config = config;
}

void WS2812_LED::setBlinkConfig(uint16_t on_time_ms, int8_t counter) {
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	807b      	strh	r3, [r7, #2]
 80068ae:	4613      	mov	r3, r2
 80068b0:	707b      	strb	r3, [r7, #1]
	this->blink_config.on_time_ms = on_time_ms;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	887a      	ldrh	r2, [r7, #2]
 80068b6:	811a      	strh	r2, [r3, #8]
	this->blink_config.counter = counter;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	787a      	ldrb	r2, [r7, #1]
 80068bc:	719a      	strb	r2, [r3, #6]
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <_ZN10WS2812_LED5blinkEv>:

void WS2812_LED::setContiniousOutput(uint8_t output) {
	this->continious_output = output;
}

void WS2812_LED::blink() {
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
	if (this->mode == WS2812_LED_MODE_CONTINIOUS){
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	791b      	ldrb	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11a      	bne.n	8006910 <_ZN10WS2812_LED5blinkEv+0x46>
		this->mode = WS2812_LED_MODE_BLINK;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	711a      	strb	r2, [r3, #4]
		this->blink_output = !this->continious_output;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7a9b      	ldrb	r3, [r3, #10]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	74da      	strb	r2, [r3, #19]
		this->blink_counter = this->blink_config.counter*2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	b25a      	sxtb	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	751a      	strb	r2, [r3, #20]
		this->blinkTimer.reset();
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	330c      	adds	r3, #12
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff f896 	bl	8005a3c <_ZN13elapsedMillis5resetEv>
	}
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZN10WS2812_LED6updateEv>:

void WS2812_LED::update() {
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

	if (this->mode == WS2812_LED_MODE_CONTINIOUS) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11b      	bne.n	8006960 <_ZN10WS2812_LED6updateEv+0x48>

		this->led_data[0] = this->green * this->continious_output;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	789a      	ldrb	r2, [r3, #2]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7a9b      	ldrb	r3, [r3, #10]
 8006930:	fb12 f303 	smulbb	r3, r2, r3
 8006934:	b2da      	uxtb	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	741a      	strb	r2, [r3, #16]
		this->led_data[1] = this->red * this->continious_output;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	785a      	ldrb	r2, [r3, #1]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7a9b      	ldrb	r3, [r3, #10]
 8006942:	fb12 f303 	smulbb	r3, r2, r3
 8006946:	b2da      	uxtb	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	745a      	strb	r2, [r3, #17]
		this->led_data[2] = this->blue * this->continious_output;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	78da      	ldrb	r2, [r3, #3]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7a9b      	ldrb	r3, [r3, #10]
 8006954:	fb12 f303 	smulbb	r3, r2, r3
 8006958:	b2da      	uxtb	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	749a      	strb	r2, [r3, #18]

		this->led_data[0] = this->green * this->blink_output;
		this->led_data[1] = this->red * this->blink_output;
		this->led_data[2] = this->blue * this->blink_output;
	}
}
 800695e:	e056      	b.n	8006a0e <_ZN10WS2812_LED6updateEv+0xf6>
	} else if (this->mode == WS2812_LED_MODE_BLINK) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	791b      	ldrb	r3, [r3, #4]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d152      	bne.n	8006a0e <_ZN10WS2812_LED6updateEv+0xf6>
		if (this->blinkTimer >= this->blink_config.on_time_ms){
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	330c      	adds	r3, #12
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff f880 	bl	8005a72 <_ZNK13elapsedMilliscvmEv>
 8006972:	4602      	mov	r2, r0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	891b      	ldrh	r3, [r3, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	bf2c      	ite	cs
 800697c:	2301      	movcs	r3, #1
 800697e:	2300      	movcc	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d028      	beq.n	80069d8 <_ZN10WS2812_LED6updateEv+0xc0>
			this->blinkTimer.reset();
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	330c      	adds	r3, #12
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff f856 	bl	8005a3c <_ZN13elapsedMillis5resetEv>
			this->blink_output = !this->blink_output;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7cdb      	ldrb	r3, [r3, #19]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	74da      	strb	r2, [r3, #19]
			if (this->blink_counter > 0){
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd14      	ble.n	80069d8 <_ZN10WS2812_LED6updateEv+0xc0>
				this->blink_counter--;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	b25a      	sxtb	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	751a      	strb	r2, [r3, #20]
				if (this->blink_counter == 0){
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <_ZN10WS2812_LED6updateEv+0xc0>
					this->mode = WS2812_LED_MODE_CONTINIOUS;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	711a      	strb	r2, [r3, #4]
					this->blink_output = this->continious_output;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7a9a      	ldrb	r2, [r3, #10]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	74da      	strb	r2, [r3, #19]
		this->led_data[0] = this->green * this->blink_output;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	789a      	ldrb	r2, [r3, #2]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	7cdb      	ldrb	r3, [r3, #19]
 80069e0:	fb12 f303 	smulbb	r3, r2, r3
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	741a      	strb	r2, [r3, #16]
		this->led_data[1] = this->red * this->blink_output;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	785a      	ldrb	r2, [r3, #1]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	7cdb      	ldrb	r3, [r3, #19]
 80069f2:	fb12 f303 	smulbb	r3, r2, r3
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	745a      	strb	r2, [r3, #17]
		this->led_data[2] = this->blue * this->blink_output;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	78da      	ldrb	r2, [r3, #3]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	7cdb      	ldrb	r3, [r3, #19]
 8006a04:	fb12 f303 	smulbb	r3, r2, r3
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	749a      	strb	r2, [r3, #18]
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>:
	this->tim = tim;
	this->timer_channel = timer_channel;
	this->num_led = MAX_LED;
}

WS2812_Strand::WS2812_Strand(TIM_HandleTypeDef *tim, uint32_t timer_channel,
 8006a16:	b5b0      	push	{r4, r5, r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	70fb      	strb	r3, [r7, #3]
		uint8_t num_led) {
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	240f      	movs	r4, #15
 8006a28:	461d      	mov	r5, r3
 8006a2a:	e004      	b.n	8006a36 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh+0x20>
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f7ff fee4 	bl	80067fa <_ZN10WS2812_LEDC1Ev>
 8006a32:	3c01      	subs	r4, #1
 8006a34:	3518      	adds	r5, #24
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	daf8      	bge.n	8006a2c <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh+0x16>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	this->tim = tim;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	this->timer_channel = timer_channel;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
	this->num_led = num_led;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
}
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bdb0      	pop	{r4, r5, r7, pc}

08006a6c <_ZN13WS2812_Strand4initEv>:

void WS2812_Strand::init() {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	neopixel_handler[num_neopixel] = this;
 8006a74:	4b17      	ldr	r3, [pc, #92]	@ (8006ad4 <_ZN13WS2812_Strand4initEv+0x68>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <_ZN13WS2812_Strand4initEv+0x6c>)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	num_neopixel++;
 8006a82:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <_ZN13WS2812_Strand4initEv+0x68>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <_ZN13WS2812_Strand4initEv+0x68>)
 8006a8c:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < this->num_led; i++) {
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e00d      	b.n	8006ab0 <_ZN13WS2812_Strand4initEv+0x44>
		this->led[i].strand_position = i;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	b2d8      	uxtb	r0, r3
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	440b      	add	r3, r1
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < this->num_led; i++) {
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4293      	cmp	r3, r2
 8006abc:	dbea      	blt.n	8006a94 <_ZN13WS2812_Strand4initEv+0x28>
	}

	this->datasent = 0;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	this->reset();
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8c2 	bl	8006c50 <_ZN13WS2812_Strand5resetEv>
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000ad1 	.word	0x20000ad1
 8006ad8:	20000ad4 	.word	0x20000ad4

08006adc <_ZN13WS2812_Strand6updateEv>:

void WS2812_Strand::update() {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	this->data_index = 0;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	uint32_t color;

	for (int i = 0; i < this->num_led; i++) {
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	e00c      	b.n	8006b0c <_ZN13WS2812_Strand6updateEv+0x30>
		this->led[i].update();
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	4613      	mov	r3, r2
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	4413      	add	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff ff09 	bl	8006918 <_ZN10WS2812_LED6updateEv>
	for (int i = 0; i < this->num_led; i++) {
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	61fb      	str	r3, [r7, #28]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8006b12:	461a      	mov	r2, r3
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	dbeb      	blt.n	8006af2 <_ZN13WS2812_Strand6updateEv+0x16>
	}

	for (int i = 0; i < this->num_led; i++) {
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	e04c      	b.n	8006bba <_ZN13WS2812_Strand6updateEv+0xde>
		color = ((this->led[i].led_data[0] << 16)
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3310      	adds	r3, #16
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	0419      	lsls	r1, r3, #16
				| (this->led[i].led_data[1] << 8) | (this->led[i].led_data[2]));
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	4403      	add	r3, r0
 8006b42:	3311      	adds	r3, #17
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	4319      	orrs	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	4413      	add	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4403      	add	r3, r0
 8006b58:	3312      	adds	r3, #18
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	430b      	orrs	r3, r1
		color = ((this->led[i].led_data[0] << 16)
 8006b5e:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--) {
 8006b60:	2317      	movs	r3, #23
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	e023      	b.n	8006bae <_ZN13WS2812_Strand6updateEv+0xd2>
			if (color & (1 << i)) {
 8006b66:	2201      	movs	r2, #1
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <_ZN13WS2812_Strand6updateEv+0xae>
				this->pwm_data[this->data_index] = WS2812_LONG_PULSE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4413      	add	r3, r2
 8006b82:	221c      	movs	r2, #28
 8006b84:	f883 21ca 	strb.w	r2, [r3, #458]	@ 0x1ca
 8006b88:	e007      	b.n	8006b9a <_ZN13WS2812_Strand6updateEv+0xbe>
			}

			else {
				this->pwm_data[this->data_index] = WS2812_SHORT_PULSE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4413      	add	r3, r2
 8006b94:	220b      	movs	r2, #11
 8006b96:	f883 21ca 	strb.w	r2, [r3, #458]	@ 0x1ca
			}

			this->data_index++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
		for (int i = 23; i >= 0; i--) {
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dad8      	bge.n	8006b66 <_ZN13WS2812_Strand6updateEv+0x8a>
	for (int i = 0; i < this->num_led; i++) {
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	dbab      	blt.n	8006b20 <_ZN13WS2812_Strand6updateEv+0x44>
		}
	}

	for (int i = 0; i < 10; i++) {
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	e011      	b.n	8006bf2 <_ZN13WS2812_Strand6updateEv+0x116>
		this->pwm_data[this->data_index] = 0;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 21ca 	strb.w	r2, [r3, #458]	@ 0x1ca
		this->data_index++;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	for (int i = 0; i < 10; i++) {
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b09      	cmp	r3, #9
 8006bf6:	ddea      	ble.n	8006bce <_ZN13WS2812_Strand6updateEv+0xf2>
	}
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <_ZN13WS2812_Strand4sendEv>:

void WS2812_Strand::send() {
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 1184 	ldr.w	r1, [r3, #388]	@ 0x184
			(uint32_t*) this->pwm_data, this->data_index);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 72e5 	add.w	r2, r3, #458	@ 0x1ca
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel,
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f7fd fe4a 	bl	80048bc <HAL_TIM_PWM_Start_DMA>
	while (this->datasent == 0) {
 8006c28:	bf00      	nop
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf0c      	ite	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	2300      	movne	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f4      	bne.n	8006c2a <_ZN13WS2812_Strand4sendEv+0x28>

	};
	this->datasent = 0;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <_ZN13WS2812_Strand5resetEv>:

void WS2812_Strand::reset() {
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b089      	sub	sp, #36	@ 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e020      	b.n	8006ca0 <_ZN13WS2812_Strand5resetEv+0x50>
		this->led_data[i][0] = i;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	b2d9      	uxtb	r1, r3
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3362      	adds	r3, #98	@ 0x62
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	709a      	strb	r2, [r3, #2]
		this->led_data[i][1] = 0;
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
		this->led_data[i][2] = 0;
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
		this->led_data[i][3] = 0;
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	for (int i = 0; i < MAX_LED; i++) {
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b0f      	cmp	r3, #15
 8006ca4:	dddb      	ble.n	8006c5e <_ZN13WS2812_Strand5resetEv+0xe>
	}
	uint32_t init_data[4] = { 50, 0, 50, 0 };
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <_ZN13WS2812_Strand5resetEv+0x88>)
 8006ca8:	f107 040c 	add.w	r4, r7, #12
 8006cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel, (uint32_t*) init_data,
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 1184 	ldr.w	r1, [r3, #388]	@ 0x184
 8006cbe:	f107 020c 	add.w	r2, r7, #12
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	f7fd fdfa 	bl	80048bc <HAL_TIM_PWM_Start_DMA>
			4);
	HAL_Delay(10);
 8006cc8:	200a      	movs	r0, #10
 8006cca:	f7fa f891 	bl	8000df0 <HAL_Delay>
}
 8006cce:	bf00      	nop
 8006cd0:	3724      	adds	r7, #36	@ 0x24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08006dd0 	.word	0x08006dd0

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_neopixel; i++) {
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e022      	b.n	8006d30 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
		if (htim == neopixel_handler[i]->tim) {
 8006cea:	4a17      	ldr	r2, [pc, #92]	@ (8006d48 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d116      	bne.n	8006d2a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
			HAL_TIM_PWM_Stop_DMA(neopixel_handler[i]->tim,
 8006cfc:	4a12      	ldr	r2, [pc, #72]	@ (8006d48 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d04:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
					neopixel_handler[i]->timer_channel);
 8006d08:	490f      	ldr	r1, [pc, #60]	@ (8006d48 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			HAL_TIM_PWM_Stop_DMA(neopixel_handler[i]->tim,
 8006d10:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fd ffc8 	bl	8004cac <HAL_TIM_PWM_Stop_DMA>
			neopixel_handler[i]->datasent = 1;
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d48 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	for (int i = 0; i < num_neopixel; i++) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	dbd6      	blt.n	8006cea <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		}
	}

}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000ad4 	.word	0x20000ad4
 8006d4c:	20000ad1 	.word	0x20000ad1

08006d50 <_Z6millisv>:
 *      Author: Dustin Lehmann
 */

#include "elapsedMillis.h"

uint32_t millis() {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8006d54:	f7fa f840 	bl	8000dd8 <HAL_GetTick>
 8006d58:	4603      	mov	r3, r0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <memset>:
 8006d5e:	4402      	add	r2, r0
 8006d60:	4603      	mov	r3, r0
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d100      	bne.n	8006d68 <memset+0xa>
 8006d66:	4770      	bx	lr
 8006d68:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6c:	e7f9      	b.n	8006d62 <memset+0x4>
	...

08006d70 <__libc_init_array>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	4d0d      	ldr	r5, [pc, #52]	@ (8006da8 <__libc_init_array+0x38>)
 8006d74:	4c0d      	ldr	r4, [pc, #52]	@ (8006dac <__libc_init_array+0x3c>)
 8006d76:	1b64      	subs	r4, r4, r5
 8006d78:	10a4      	asrs	r4, r4, #2
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	42a6      	cmp	r6, r4
 8006d7e:	d109      	bne.n	8006d94 <__libc_init_array+0x24>
 8006d80:	4d0b      	ldr	r5, [pc, #44]	@ (8006db0 <__libc_init_array+0x40>)
 8006d82:	4c0c      	ldr	r4, [pc, #48]	@ (8006db4 <__libc_init_array+0x44>)
 8006d84:	f000 f818 	bl	8006db8 <_init>
 8006d88:	1b64      	subs	r4, r4, r5
 8006d8a:	10a4      	asrs	r4, r4, #2
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	42a6      	cmp	r6, r4
 8006d90:	d105      	bne.n	8006d9e <__libc_init_array+0x2e>
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d98:	4798      	blx	r3
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7ee      	b.n	8006d7c <__libc_init_array+0xc>
 8006d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da2:	4798      	blx	r3
 8006da4:	3601      	adds	r6, #1
 8006da6:	e7f2      	b.n	8006d8e <__libc_init_array+0x1e>
 8006da8:	08006e20 	.word	0x08006e20
 8006dac:	08006e20 	.word	0x08006e20
 8006db0:	08006e20 	.word	0x08006e20
 8006db4:	08006e28 	.word	0x08006e28

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
