
RC_v4_H743_TWIPR_24062024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024674  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016e4  08024918  08024918  00025918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025ffc  08025ffc  00026ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000024  08026004  08026004  00027004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08026028  08026028  00027028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  08026030  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00028938  24000208  08026238  00028208  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24028b40  08026238  00028b40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00028208  2**0
                  CONTENTS, READONLY
 10 .ramd2block   00000000  30000000  30000000  00028236  2**0
                  CONTENTS
 11 .debug_info   000a90c7  00000000  00000000  00028236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ed7f  00000000  00000000  000d12fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00004200  00000000  00000000  000e0080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000325c  00000000  00000000  000e4280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015621  00000000  00000000  000e74dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006f3f5  00000000  00000000  000fcafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a1ac0  00000000  00000000  0016bef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0030d9b2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00012f84  00000000  00000000  0030d9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a8  00000000  00000000  0032097c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080248fc 	.word	0x080248fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	080248fc 	.word	0x080248fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 fdce 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f83e 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fc88 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fbe0 	bl	8000e54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000694:	f000 fb44 	bl	8000d20 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000698:	f000 f9a4 	bl	80009e4 <MX_SPI2_Init>
  MX_UART8_Init();
 800069c:	f000 faf2 	bl	8000c84 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 fb8a 	bl	8000db8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006a4:	f000 f9f4 	bl	8000a90 <MX_TIM2_Init>
  MX_SPI1_Init();
 80006a8:	f000 f94c 	bl	8000944 <MX_SPI1_Init>
  MX_I2C3_Init();
 80006ac:	f000 f90a 	bl	80008c4 <MX_I2C3_Init>
  MX_FDCAN1_Init();
 80006b0:	f000 f8a4 	bl	80007fc <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80006b4:	f000 fa3a 	bl	8000b2c <MX_TIM3_Init>
  MX_TIM4_Init();
 80006b8:	f000 fa8e 	bl	8000bd8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f00e f94e 	bl	800e95c <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer02 */
  myTimer02Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer02_attributes);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <main+0x70>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <main+0x74>)
 80006c8:	f00e fab8 	bl	800ec3c <osTimerNew>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <main+0x78>)
 80006d0:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	firmware();
 80006d2:	f017 fa2d 	bl	8017b30 <firmware>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <main+0x7c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4809      	ldr	r0, [pc, #36]	@ (8000700 <main+0x80>)
 80006dc:	f00e f9bf 	bl	800ea5e <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <main+0x84>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f00e f97f 	bl	800e9e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <main+0x6a>
 80006ee:	bf00      	nop
 80006f0:	08024ca8 	.word	0x08024ca8
 80006f4:	0800121f 	.word	0x0800121f
 80006f8:	24000c04 	.word	0x24000c04
 80006fc:	08024c84 	.word	0x08024c84
 8000700:	0800120d 	.word	0x0800120d
 8000704:	24000c00 	.word	0x24000c00

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	@ 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000712:	224c      	movs	r2, #76	@ 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f022 fa03 	bl	8022b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f022 f9fd 	bl	8022b22 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000728:	2002      	movs	r0, #2
 800072a:	f006 fe05 	bl	8007338 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <SystemClock_Config+0xec>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	4a2f      	ldr	r2, [pc, #188]	@ (80007f4 <SystemClock_Config+0xec>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <SystemClock_Config+0xec>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <SystemClock_Config+0xf0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <SystemClock_Config+0xf0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xf0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xf0>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800078e:	2308      	movs	r3, #8
 8000790:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 fe00 	bl	80073ac <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 fd51 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	@ 0x3f
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c2:	2308      	movs	r3, #8
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2340      	movs	r3, #64	@ 0x40
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d4:	2340      	movs	r3, #64	@ 0x40
 80007d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fa3f 	bl	8007c60 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007e8:	f000 fd36 	bl	8001258 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3770      	adds	r7, #112	@ 0x70
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58000400 	.word	0x58000400
 80007f8:	58024800 	.word	0x58024800

080007fc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000802:	4a2f      	ldr	r2, [pc, #188]	@ (80008c0 <MX_FDCAN1_Init+0xc4>)
 8000804:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800080c:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000824:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000826:	220a      	movs	r2, #10
 8000828:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000832:	2207      	movs	r2, #7
 8000834:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000838:	2202      	movs	r2, #2
 800083a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800083e:	2201      	movs	r2, #1
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000842:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000844:	2201      	movs	r2, #1
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000868:	2204      	movs	r2, #4
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000874:	2204      	movs	r2, #4
 8000876:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 4;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000898:	2204      	movs	r2, #4
 800089a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 80008aa:	f004 fcc9 	bl	8005240 <HAL_FDCAN_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008b4:	f000 fcd0 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000224 	.word	0x24000224
 80008c0:	4000a000 	.word	0x4000a000

080008c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_I2C3_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <MX_I2C3_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_I2C3_Init+0x74>)
 8000900:	f006 f864 	bl	80069cc <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 fca5 	bl	8001258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_I2C3_Init+0x74>)
 8000912:	f006 fc79 	bl	8007208 <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 fc9c 	bl	8001258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_I2C3_Init+0x74>)
 8000924:	f006 fcbb 	bl	800729e <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 fc93 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240002c4 	.word	0x240002c4
 800093c:	40005c00 	.word	0x40005c00
 8000940:	10c0ecff 	.word	0x10c0ecff

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_SPI1_Init+0x98>)
 800094a:	4a25      	ldr	r2, [pc, #148]	@ (80009e0 <MX_SPI1_Init+0x9c>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_SPI1_Init+0x98>)
 800095c:	2207      	movs	r2, #7
 800095e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_SPI1_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_SPI1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009c8:	f009 fb44 	bl	800a054 <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 80009d2:	f000 fc41 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	24000318 	.word	0x24000318
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009ea:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <MX_SPI2_Init+0xa8>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a76:	f009 faed 	bl	800a054 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a80:	f000 fbea 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240003cc 	.word	0x240003cc
 8000a8c:	40003800 	.word	0x40003800

08000a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ab0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad6:	4814      	ldr	r0, [pc, #80]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ad8:	f00a ff55 	bl	800b986 <HAL_TIM_Base_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ae2:	f000 fbb9 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000af4:	f00b f9c4 	bl	800be80 <HAL_TIM_ConfigClockSource>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000afe:	f000 fbab 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000b10:	f00b fc1a 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b1a:	f000 fb9d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	24000570 	.word	0x24000570

08000b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	@ 0x30
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2224      	movs	r2, #36	@ 0x24
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f021 fff1 	bl	8022b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <MX_TIM3_Init+0xa8>)
 8000b4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b9c:	f00a ffc2 	bl	800bb24 <HAL_TIM_Encoder_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ba6:	f000 fb57 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000bb8:	f00b fbc6 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000bc2:	f000 fb49 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	@ 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	240005bc 	.word	0x240005bc
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	@ 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f021 ff9b 	bl	8022b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <MX_TIM4_Init+0xa8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c48:	f00a ff6c 	bl	800bb24 <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f000 fb01 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c64:	f00b fb70 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 faf3 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	@ 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000608 	.word	0x24000608
 8000c80:	40000800 	.word	0x40000800

08000c84 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000c8a:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <MX_UART8_Init+0x98>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 57600;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000c90:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000c94:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000c98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c9c:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000caa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cd2:	f00b fbe5 	bl	800c4a0 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART8_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 fabc 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ce4:	f00d fcd8 	bl	800e698 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART8_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fab3 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cf6:	f00d fd0d 	bl	800e714 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_UART8_Init+0x80>
  {
    Error_Handler();
 8000d00:	f000 faaa 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000d06:	f00d fc8e 	bl	800e626 <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_UART8_Init+0x90>
  {
    Error_Handler();
 8000d10:	f000 faa2 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	24000654 	.word	0x24000654
 8000d1c:	40007c00 	.word	0x40007c00

08000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d26:	4a23      	ldr	r2, [pc, #140]	@ (8000db4 <MX_USART1_UART_Init+0x94>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d68:	4811      	ldr	r0, [pc, #68]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d6a:	f00b fb99 	bl	800c4a0 <HAL_UART_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d74:	f000 fa70 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d7c:	f00d fc8c 	bl	800e698 <HAL_UARTEx_SetTxFifoThreshold>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f000 fa67 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d8e:	f00d fcc1 	bl	800e714 <HAL_UARTEx_SetRxFifoThreshold>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 fa5e 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d9e:	f00d fc42 	bl	800e626 <HAL_UARTEx_DisableFifoMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 fa56 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	24000720 	.word	0x24000720
 8000db4:	40011000 	.word	0x40011000

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dbe:	4a23      	ldr	r2, [pc, #140]	@ (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dc4:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <MX_USART2_UART_Init+0x98>)
 8000dc6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000ddc:	220c      	movs	r2, #12
 8000dde:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e00:	f00b fb4e 	bl	800c4a0 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f000 fa25 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e12:	f00d fc41 	bl	800e698 <HAL_UARTEx_SetTxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000e1c:	f000 fa1c 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e24:	f00d fc76 	bl	800e714 <HAL_UARTEx_SetRxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000e2e:	f000 fa13 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e34:	f00d fbf7 	bl	800e626 <HAL_UARTEx_DisableFifoMode>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000e3e:	f000 fa0b 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	240007ec 	.word	0x240007ec
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	000f4240 	.word	0x000f4240

08000e54 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e60:	4a4c      	ldr	r2, [pc, #304]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e78:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e7e:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e88:	4b42      	ldr	r3, [pc, #264]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e96:	4b40      	ldr	r3, [pc, #256]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000e98:	4a40      	ldr	r2, [pc, #256]	@ (8000f9c <MX_DMA_Init+0x148>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eae:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000eb0:	4b39      	ldr	r3, [pc, #228]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eca:	4b33      	ldr	r3, [pc, #204]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ecc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ed0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000eea:	482b      	ldr	r0, [pc, #172]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eec:	f001 fb06 	bl	80024fc <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8000ef6:	f000 f9af 	bl	8001258 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	200b      	movs	r0, #11
 8000f00:	f001 fad4 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f04:	200b      	movs	r0, #11
 8000f06:	f001 faeb 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f001 facc 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f14:	200c      	movs	r0, #12
 8000f16:	f001 fae3 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	200d      	movs	r0, #13
 8000f20:	f001 fac4 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f24:	200d      	movs	r0, #13
 8000f26:	f001 fadb 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	200e      	movs	r0, #14
 8000f30:	f001 fabc 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f34:	200e      	movs	r0, #14
 8000f36:	f001 fad3 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f001 fab4 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f44:	200f      	movs	r0, #15
 8000f46:	f001 facb 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f001 faac 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f001 fac3 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f001 faa4 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f64:	2011      	movs	r0, #17
 8000f66:	f001 fabb 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	202f      	movs	r0, #47	@ 0x2f
 8000f70:	f001 fa9c 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f74:	202f      	movs	r0, #47	@ 0x2f
 8000f76:	f001 fab3 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2038      	movs	r0, #56	@ 0x38
 8000f80:	f001 fa94 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f84:	2038      	movs	r0, #56	@ 0x38
 8000f86:	f001 faab 	bl	80024e0 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400
 8000f98:	24000b88 	.word	0x24000b88
 8000f9c:	40020410 	.word	0x40020410

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	@ 0x30
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	4a8d      	ldr	r2, [pc, #564]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd4:	4b87      	ldr	r3, [pc, #540]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	4a86      	ldr	r2, [pc, #536]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe4:	4b83      	ldr	r3, [pc, #524]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b80      	ldr	r3, [pc, #512]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a7e      	ldr	r2, [pc, #504]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b7c      	ldr	r3, [pc, #496]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b78      	ldr	r3, [pc, #480]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a77      	ldr	r2, [pc, #476]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b74      	ldr	r3, [pc, #464]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b71      	ldr	r3, [pc, #452]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a6f      	ldr	r2, [pc, #444]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b6d      	ldr	r3, [pc, #436]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b69      	ldr	r3, [pc, #420]	@ (80011f4 <MX_GPIO_Init+0x254>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a68      	ldr	r2, [pc, #416]	@ (80011f4 <MX_GPIO_Init+0x254>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b65      	ldr	r3, [pc, #404]	@ (80011f4 <MX_GPIO_Init+0x254>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|LED2_Pin
 800106a:	2200      	movs	r2, #0
 800106c:	f248 7108 	movw	r1, #34568	@ 0x8708
 8001070:	4861      	ldr	r0, [pc, #388]	@ (80011f8 <MX_GPIO_Init+0x258>)
 8001072:	f005 fc5d 	bl	8006930 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	210c      	movs	r1, #12
 800107a:	4860      	ldr	r0, [pc, #384]	@ (80011fc <MX_GPIO_Init+0x25c>)
 800107c:	f005 fc58 	bl	8006930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTTON_LED_1_Pin|BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2103      	movs	r1, #3
 8001084:	485e      	ldr	r0, [pc, #376]	@ (8001200 <MX_GPIO_Init+0x260>)
 8001086:	f005 fc53 	bl	8006930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001090:	485c      	ldr	r0, [pc, #368]	@ (8001204 <MX_GPIO_Init+0x264>)
 8001092:	f005 fc4d 	bl	8006930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin
 8001096:	2200      	movs	r2, #0
 8001098:	f648 3180 	movw	r1, #35712	@ 0x8b80
 800109c:	485a      	ldr	r0, [pc, #360]	@ (8001208 <MX_GPIO_Init+0x268>)
 800109e:	f005 fc47 	bl	8006930 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LED2_Pin|LED1_Pin;
 80010a2:	f248 4308 	movw	r3, #33800	@ 0x8408
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	484f      	ldr	r0, [pc, #316]	@ (80011f8 <MX_GPIO_Init+0x258>)
 80010bc:	f005 fa70 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c0:	2310      	movs	r3, #16
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4849      	ldr	r0, [pc, #292]	@ (80011f8 <MX_GPIO_Init+0x258>)
 80010d4:	f005 fa64 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010d8:	2320      	movs	r3, #32
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80010e8:	2304      	movs	r3, #4
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4841      	ldr	r0, [pc, #260]	@ (80011f8 <MX_GPIO_Init+0x258>)
 80010f4:	f005 fa54 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_BUTTON_2_Pin SIDE_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = SIDE_BUTTON_2_Pin|SIDE_BUTTON_1_Pin;
 80010f8:	2303      	movs	r3, #3
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	483c      	ldr	r0, [pc, #240]	@ (80011fc <MX_GPIO_Init+0x25c>)
 800110c:	f005 fa48 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001110:	230c      	movs	r3, #12
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4835      	ldr	r0, [pc, #212]	@ (80011fc <MX_GPIO_Init+0x25c>)
 8001128:	f005 fa3a 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LED_1_Pin BUTTON_LED_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_1_Pin|BUTTON_LED_2_Pin;
 800112c:	2303      	movs	r3, #3
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	482f      	ldr	r0, [pc, #188]	@ (8001200 <MX_GPIO_Init+0x260>)
 8001144:	f005 fa2c 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001148:	2304      	movs	r3, #4
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800114c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	2302      	movs	r3, #2
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4829      	ldr	r0, [pc, #164]	@ (8001204 <MX_GPIO_Init+0x264>)
 800115e:	f005 fa1f 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001162:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116c:	2302      	movs	r3, #2
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	481f      	ldr	r0, [pc, #124]	@ (80011f8 <MX_GPIO_Init+0x258>)
 800117c:	f005 fa10 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 8001180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	481a      	ldr	r0, [pc, #104]	@ (8001204 <MX_GPIO_Init+0x264>)
 800119a:	f005 fa01 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800119e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4814      	ldr	r0, [pc, #80]	@ (8001208 <MX_GPIO_Init+0x268>)
 80011b8:	f005 f9f2 	bl	80065a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LED_ACT_Pin RS485_EN_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin|GPIO_PIN_7;
 80011bc:	f648 2380 	movw	r3, #35456	@ 0x8a80
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_GPIO_Init+0x268>)
 80011d6:	f005 f9e3 	bl	80065a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	2008      	movs	r0, #8
 80011e0:	f001 f964 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011e4:	2008      	movs	r0, #8
 80011e6:	f001 f97b 	bl	80024e0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	@ 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58021000 	.word	0x58021000
 80011fc:	58020800 	.word	0x58020800
 8001200:	58020000 	.word	0x58020000
 8001204:	58020400 	.word	0x58020400
 8001208:	58020c00 	.word	0x58020c00

0800120c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//	  firmware_loop();
		osDelay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001218:	f00d fcb3 	bl	800eb82 <osDelay>
 800121c:	e7fa      	b.n	8001214 <StartDefaultTask+0x8>

0800121e <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f001 f829 	bl	800229c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40001000 	.word	0x40001000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_MspInit+0x38>)
 800126c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_MspInit+0x38>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_MspInit+0x38>)
 800127c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	210f      	movs	r1, #15
 800128c:	f06f 0001 	mvn.w	r0, #1
 8001290:	f001 f90c 	bl	80024ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58024400 	.word	0x58024400

080012a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0ba      	sub	sp, #232	@ 0xe8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	22c0      	movs	r2, #192	@ 0xc0
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f021 fc2e 	bl	8022b22 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <HAL_FDCAN_MspInit+0xe8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d156      	bne.n	800137e <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80012dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 f887 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80012f4:	f7ff ffb0 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_FDCAN_MspInit+0xec>)
 80012fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <HAL_FDCAN_MspInit+0xec>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001304:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_FDCAN_MspInit+0xec>)
 800130a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_FDCAN_MspInit+0xec>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	4a1b      	ldr	r2, [pc, #108]	@ (800138c <HAL_FDCAN_MspInit+0xec>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_FDCAN_MspInit+0xec>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001334:	2303      	movs	r3, #3
 8001336:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800134c:	2309      	movs	r3, #9
 800134e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001352:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001356:	4619      	mov	r1, r3
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <HAL_FDCAN_MspInit+0xf0>)
 800135a:	f005 f921 	bl	80065a0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	2013      	movs	r0, #19
 8001364:	f001 f8a2 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001368:	2013      	movs	r0, #19
 800136a:	f001 f8b9 	bl	80024e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2015      	movs	r0, #21
 8001374:	f001 f89a 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001378:	2015      	movs	r0, #21
 800137a:	f001 f8b1 	bl	80024e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800137e:	bf00      	nop
 8001380:	37e8      	adds	r7, #232	@ 0xe8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	4000a000 	.word	0x4000a000
 800138c:	58024400 	.word	0x58024400
 8001390:	58020c00 	.word	0x58020c00

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0bc      	sub	sp, #240	@ 0xf0
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	22c0      	movs	r2, #192	@ 0xc0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f021 fbb4 	bl	8022b22 <memset>
  if(hi2c->Instance==I2C3)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a39      	ldr	r2, [pc, #228]	@ (80014a4 <HAL_I2C_MspInit+0x110>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d16b      	bne.n	800149c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013c4:	f04f 0208 	mov.w	r2, #8
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 f80e 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013e6:	f7ff ff37 	bl	8001258 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	4a2d      	ldr	r2, [pc, #180]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140e:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
 8001430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001440:	2304      	movs	r3, #4
 8001442:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001446:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800144a:	4619      	mov	r1, r3
 800144c:	4817      	ldr	r0, [pc, #92]	@ (80014ac <HAL_I2C_MspInit+0x118>)
 800144e:	f005 f8a7 	bl	80065a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800146c:	2304      	movs	r3, #4
 800146e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001476:	4619      	mov	r1, r3
 8001478:	480d      	ldr	r0, [pc, #52]	@ (80014b0 <HAL_I2C_MspInit+0x11c>)
 800147a:	f005 f891 	bl	80065a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001484:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001486:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800148a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001494:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	37f0      	adds	r7, #240	@ 0xf0
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40005c00 	.word	0x40005c00
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020800 	.word	0x58020800
 80014b0:	58020000 	.word	0x58020000

080014b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0bc      	sub	sp, #240	@ 0xf0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	22c0      	movs	r2, #192	@ 0xc0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f021 fb24 	bl	8022b22 <memset>
  if(hspi->Instance==SPI1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7d      	ldr	r2, [pc, #500]	@ (80016d4 <HAL_SPI_MspInit+0x220>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f040 80a8 	bne.w	8001636 <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 ff7e 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001506:	f7ff fea7 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800150a:	4b73      	ldr	r3, [pc, #460]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 800150c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001510:	4a71      	ldr	r2, [pc, #452]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 8001512:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800151a:	4b6f      	ldr	r3, [pc, #444]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 800151c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b6b      	ldr	r3, [pc, #428]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152e:	4a6a      	ldr	r2, [pc, #424]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001538:	4b67      	ldr	r3, [pc, #412]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001546:	23f0      	movs	r3, #240	@ 0xf0
 8001548:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155e:	2305      	movs	r3, #5
 8001560:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001568:	4619      	mov	r1, r3
 800156a:	485c      	ldr	r0, [pc, #368]	@ (80016dc <HAL_SPI_MspInit+0x228>)
 800156c:	f005 f818 	bl	80065a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 8001570:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 8001572:	4a5c      	ldr	r2, [pc, #368]	@ (80016e4 <HAL_SPI_MspInit+0x230>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001576:	4b5a      	ldr	r3, [pc, #360]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 8001578:	2225      	movs	r2, #37	@ 0x25
 800157a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157c:	4b58      	ldr	r3, [pc, #352]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001582:	4b57      	ldr	r3, [pc, #348]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	4b55      	ldr	r3, [pc, #340]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 800158a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800158e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001590:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001596:	4b52      	ldr	r3, [pc, #328]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800159c:	4b50      	ldr	r3, [pc, #320]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015a2:	4b4f      	ldr	r3, [pc, #316]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a8:	4b4d      	ldr	r3, [pc, #308]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015ae:	484c      	ldr	r0, [pc, #304]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 80015b0:	f000 ffa4 	bl	80024fc <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80015ba:	f7ff fe4d 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a47      	ldr	r2, [pc, #284]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 80015c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015c4:	4a46      	ldr	r2, [pc, #280]	@ (80016e0 <HAL_SPI_MspInit+0x22c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015cc:	4a47      	ldr	r2, [pc, #284]	@ (80016ec <HAL_SPI_MspInit+0x238>)
 80015ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80015d0:	4b45      	ldr	r3, [pc, #276]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015d2:	2226      	movs	r2, #38	@ 0x26
 80015d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015d6:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015d8:	2240      	movs	r2, #64	@ 0x40
 80015da:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015dc:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015e2:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ea:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f0:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001602:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001608:	4837      	ldr	r0, [pc, #220]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 800160a:	f000 ff77 	bl	80024fc <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001614:	f7ff fe20 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a33      	ldr	r2, [pc, #204]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 800161c:	679a      	str	r2, [r3, #120]	@ 0x78
 800161e:	4a32      	ldr	r2, [pc, #200]	@ (80016e8 <HAL_SPI_MspInit+0x234>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2105      	movs	r1, #5
 8001628:	2023      	movs	r0, #35	@ 0x23
 800162a:	f000 ff3f 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800162e:	2023      	movs	r0, #35	@ 0x23
 8001630:	f000 ff56 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001634:	e04a      	b.n	80016cc <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a2d      	ldr	r2, [pc, #180]	@ (80016f0 <HAL_SPI_MspInit+0x23c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d145      	bne.n	80016cc <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001640:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800164c:	2300      	movs	r3, #0
 800164e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4618      	mov	r0, r3
 8001656:	f006 fed1 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_SPI_MspInit+0x1b0>
      Error_Handler();
 8001660:	f7ff fdfa 	bl	8001258 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 8001666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800166a:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001670:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 8001676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_SPI_MspInit+0x224>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016a0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ba:	2305      	movs	r3, #5
 80016bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <HAL_SPI_MspInit+0x240>)
 80016c8:	f004 ff6a 	bl	80065a0 <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	37f0      	adds	r7, #240	@ 0xf0
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40013000 	.word	0x40013000
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58020000 	.word	0x58020000
 80016e0:	24000480 	.word	0x24000480
 80016e4:	400200a0 	.word	0x400200a0
 80016e8:	240004f8 	.word	0x240004f8
 80016ec:	400200b8 	.word	0x400200b8
 80016f0:	40003800 	.word	0x40003800
 80016f4:	58020400 	.word	0x58020400

080016f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001708:	d10e      	bne.n	8001728 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_TIM_Base_MspInit+0x3c>)
 800170c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_TIM_Base_MspInit+0x3c>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_TIM_Base_MspInit+0x3c>)
 800171c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58024400 	.word	0x58024400

08001738 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	@ 0x30
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a34      	ldr	r2, [pc, #208]	@ (8001828 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12e      	bne.n	80017b8 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175a:	4b34      	ldr	r3, [pc, #208]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 800175c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001760:	4a32      	ldr	r2, [pc, #200]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800176a:	4b30      	ldr	r3, [pc, #192]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 800176c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001778:	4b2c      	ldr	r3, [pc, #176]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001796:	2330      	movs	r3, #48	@ 0x30
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	481f      	ldr	r0, [pc, #124]	@ (8001830 <HAL_TIM_Encoder_MspInit+0xf8>)
 80017b2:	f004 fef5 	bl	80065a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017b6:	e032      	b.n	800181e <HAL_TIM_Encoder_MspInit+0xe6>
  else if(htim_encoder->Instance==TIM4)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xfc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12d      	bne.n	800181e <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c8:	4a18      	ldr	r2, [pc, #96]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 80017d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	4a11      	ldr	r2, [pc, #68]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f0:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <HAL_TIM_Encoder_MspInit+0xf4>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23c0      	movs	r3, #192	@ 0xc0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800180e:	2302      	movs	r3, #2
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <HAL_TIM_Encoder_MspInit+0xf8>)
 800181a:	f004 fec1 	bl	80065a0 <HAL_GPIO_Init>
}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	@ 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40000400 	.word	0x40000400
 800182c:	58024400 	.word	0x58024400
 8001830:	58020400 	.word	0x58020400
 8001834:	40000800 	.word	0x40000800

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0be      	sub	sp, #248	@ 0xf8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	22c0      	movs	r2, #192	@ 0xc0
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f021 f962 	bl	8022b22 <memset>
  if(huart->Instance==UART8)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4aaf      	ldr	r2, [pc, #700]	@ (8001b20 <HAL_UART_MspInit+0x2e8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	f040 80aa 	bne.w	80019be <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800186a:	f04f 0202 	mov.w	r2, #2
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fdbb 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800188c:	f7ff fce4 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001890:	4ba4      	ldr	r3, [pc, #656]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 8001892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001896:	4aa3      	ldr	r2, [pc, #652]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 8001898:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800189c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 80018a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ae:	4b9d      	ldr	r3, [pc, #628]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b4:	4a9b      	ldr	r2, [pc, #620]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018be:	4b99      	ldr	r3, [pc, #612]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	69bb      	ldr	r3, [r7, #24]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80018e4:	2308      	movs	r3, #8
 80018e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018ee:	4619      	mov	r1, r3
 80018f0:	488d      	ldr	r0, [pc, #564]	@ (8001b28 <HAL_UART_MspInit+0x2f0>)
 80018f2:	f004 fe55 	bl	80065a0 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream2;
 80018f6:	4b8d      	ldr	r3, [pc, #564]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 80018f8:	4a8d      	ldr	r2, [pc, #564]	@ (8001b30 <HAL_UART_MspInit+0x2f8>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80018fc:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 80018fe:	2251      	movs	r2, #81	@ 0x51
 8001900:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001902:	4b8a      	ldr	r3, [pc, #552]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b88      	ldr	r3, [pc, #544]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b87      	ldr	r3, [pc, #540]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001910:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001914:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001916:	4b85      	ldr	r3, [pc, #532]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191c:	4b83      	ldr	r3, [pc, #524]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001922:	4b82      	ldr	r3, [pc, #520]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001928:	4b80      	ldr	r3, [pc, #512]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001934:	487d      	ldr	r0, [pc, #500]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001936:	f000 fde1 	bl	80024fc <HAL_DMA_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001940:	f7ff fc8a 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a79      	ldr	r2, [pc, #484]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 8001948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800194c:	4a77      	ldr	r2, [pc, #476]	@ (8001b2c <HAL_UART_MspInit+0x2f4>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream3;
 8001952:	4b78      	ldr	r3, [pc, #480]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001954:	4a78      	ldr	r2, [pc, #480]	@ (8001b38 <HAL_UART_MspInit+0x300>)
 8001956:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001958:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 800195a:	2252      	movs	r2, #82	@ 0x52
 800195c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800195e:	4b75      	ldr	r3, [pc, #468]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001960:	2240      	movs	r2, #64	@ 0x40
 8001962:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001964:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800196a:	4b72      	ldr	r3, [pc, #456]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 800196c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001970:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001972:	4b70      	ldr	r3, [pc, #448]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001978:	4b6e      	ldr	r3, [pc, #440]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800197e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b6b      	ldr	r3, [pc, #428]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001990:	4868      	ldr	r0, [pc, #416]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 8001992:	f000 fdb3 	bl	80024fc <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 800199c:	f7ff fc5c 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a64      	ldr	r2, [pc, #400]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 80019a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019a6:	4a63      	ldr	r2, [pc, #396]	@ (8001b34 <HAL_UART_MspInit+0x2fc>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2105      	movs	r1, #5
 80019b0:	2053      	movs	r0, #83	@ 0x53
 80019b2:	f000 fd7b 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80019b6:	2053      	movs	r0, #83	@ 0x53
 80019b8:	f000 fd92 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019bc:	e179      	b.n	8001cb2 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b3c <HAL_UART_MspInit+0x304>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	f040 80c5 	bne.w	8001b54 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ca:	f04f 0201 	mov.w	r2, #1
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	4618      	mov	r0, r3
 80019e2:	f006 fd0b 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80019ec:	f7ff fc34 	bl	8001258 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 80019f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a00:	4b48      	ldr	r3, [pc, #288]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 8001a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a14:	4a43      	ldr	r2, [pc, #268]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_UART_MspInit+0x2ec>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a2c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a46:	2307      	movs	r3, #7
 8001a48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a50:	4619      	mov	r1, r3
 8001a52:	483b      	ldr	r0, [pc, #236]	@ (8001b40 <HAL_UART_MspInit+0x308>)
 8001a54:	f004 fda4 	bl	80065a0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001a58:	4b3a      	ldr	r3, [pc, #232]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b48 <HAL_UART_MspInit+0x310>)
 8001a5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a5e:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a60:	2229      	movs	r2, #41	@ 0x29
 8001a62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a64:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6a:	4b36      	ldr	r3, [pc, #216]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a70:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a76:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a78:	4b32      	ldr	r3, [pc, #200]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a7e:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a84:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a90:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a96:	482b      	ldr	r0, [pc, #172]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001a98:	f000 fd30 	bl	80024fc <HAL_DMA_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001aa2:	f7ff fbd9 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001aae:	4a25      	ldr	r2, [pc, #148]	@ (8001b44 <HAL_UART_MspInit+0x30c>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001ab4:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ab6:	4a26      	ldr	r2, [pc, #152]	@ (8001b50 <HAL_UART_MspInit+0x318>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001abc:	222a      	movs	r2, #42	@ 0x2a
 8001abe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac0:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ac2:	2240      	movs	r2, #64	@ 0x40
 8001ac4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001af2:	4816      	ldr	r0, [pc, #88]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001af4:	f000 fd02 	bl	80024fc <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001afe:	f7ff fbab 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001b06:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b08:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_UART_MspInit+0x314>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2105      	movs	r1, #5
 8001b12:	2025      	movs	r0, #37	@ 0x25
 8001b14:	f000 fcca 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b18:	2025      	movs	r0, #37	@ 0x25
 8001b1a:	f000 fce1 	bl	80024e0 <HAL_NVIC_EnableIRQ>
}
 8001b1e:	e0c8      	b.n	8001cb2 <HAL_UART_MspInit+0x47a>
 8001b20:	40007c00 	.word	0x40007c00
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58021000 	.word	0x58021000
 8001b2c:	240008b8 	.word	0x240008b8
 8001b30:	40020040 	.word	0x40020040
 8001b34:	24000930 	.word	0x24000930
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	58020000 	.word	0x58020000
 8001b44:	240009a8 	.word	0x240009a8
 8001b48:	40020010 	.word	0x40020010
 8001b4c:	24000a20 	.word	0x24000a20
 8001b50:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a58      	ldr	r2, [pc, #352]	@ (8001cbc <HAL_UART_MspInit+0x484>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	f040 80a9 	bne.w	8001cb2 <HAL_UART_MspInit+0x47a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b60:	f04f 0202 	mov.w	r2, #2
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	4618      	mov	r0, r3
 8001b78:	f006 fc40 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0x34e>
      Error_Handler();
 8001b82:	f7ff fb69 	bl	8001258 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc0 <HAL_UART_MspInit+0x488>)
 8001b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <HAL_UART_MspInit+0x488>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b96:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc0 <HAL_UART_MspInit+0x488>)
 8001b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b46      	ldr	r3, [pc, #280]	@ (8001cc0 <HAL_UART_MspInit+0x488>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001baa:	4a45      	ldr	r2, [pc, #276]	@ (8001cc0 <HAL_UART_MspInit+0x488>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb4:	4b42      	ldr	r3, [pc, #264]	@ (8001cc0 <HAL_UART_MspInit+0x488>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4837      	ldr	r0, [pc, #220]	@ (8001cc4 <HAL_UART_MspInit+0x48c>)
 8001be8:	f004 fcda 	bl	80065a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8001bec:	4b36      	ldr	r3, [pc, #216]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001bee:	4a37      	ldr	r2, [pc, #220]	@ (8001ccc <HAL_UART_MspInit+0x494>)
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001bf2:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001bf4:	222b      	movs	r2, #43	@ 0x2b
 8001bf6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf8:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfe:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c04:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c12:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c2a:	4827      	ldr	r0, [pc, #156]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c2c:	f000 fc66 	bl	80024fc <HAL_DMA_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_UART_MspInit+0x402>
      Error_Handler();
 8001c36:	f7ff fb0f 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c42:	4a21      	ldr	r2, [pc, #132]	@ (8001cc8 <HAL_UART_MspInit+0x490>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c4a:	4a22      	ldr	r2, [pc, #136]	@ (8001cd4 <HAL_UART_MspInit+0x49c>)
 8001c4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c50:	222c      	movs	r2, #44	@ 0x2c
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c56:	2240      	movs	r2, #64	@ 0x40
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c86:	4812      	ldr	r0, [pc, #72]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c88:	f000 fc38 	bl	80024fc <HAL_DMA_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_MspInit+0x45e>
      Error_Handler();
 8001c92:	f7ff fae1 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c9a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd0 <HAL_UART_MspInit+0x498>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	2026      	movs	r0, #38	@ 0x26
 8001ca8:	f000 fc00 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cac:	2026      	movs	r0, #38	@ 0x26
 8001cae:	f000 fc17 	bl	80024e0 <HAL_NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	37f8      	adds	r7, #248	@ 0xf8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020000 	.word	0x58020000
 8001cc8:	24000a98 	.word	0x24000a98
 8001ccc:	40020070 	.word	0x40020070
 8001cd0:	24000b10 	.word	0x24000b10
 8001cd4:	40020088 	.word	0x40020088

08001cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b090      	sub	sp, #64	@ 0x40
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	d827      	bhi.n	8001d36 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	2036      	movs	r0, #54	@ 0x36
 8001cec:	f000 fbde 	bl	80024ac <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cf0:	2036      	movs	r0, #54	@ 0x36
 8001cf2:	f000 fbf5 	bl	80024e0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001cf6:	4a29      	ldr	r2, [pc, #164]	@ (8001d9c <HAL_InitTick+0xc4>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_InitTick+0xc8>)
 8001cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d02:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <HAL_InitTick+0xc8>)
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d0c:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_InitTick+0xc8>)
 8001d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d1a:	f107 0210 	add.w	r2, r7, #16
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f006 fb27 	bl	8008378 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d106      	bne.n	8001d42 <HAL_InitTick+0x6a>
 8001d34:	e001      	b.n	8001d3a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e02b      	b.n	8001d92 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d3a:	f006 faf1 	bl	8008320 <HAL_RCC_GetPCLK1Freq>
 8001d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001d40:	e004      	b.n	8001d4c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d42:	f006 faed 	bl	8008320 <HAL_RCC_GetPCLK1Freq>
 8001d46:	4603      	mov	r3, r0
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d4e:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <HAL_InitTick+0xcc>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	3b01      	subs	r3, #1
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d5c:	4a13      	ldr	r2, [pc, #76]	@ (8001dac <HAL_InitTick+0xd4>)
 8001d5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d7a:	480b      	ldr	r0, [pc, #44]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d7c:	f009 fe03 	bl	800b986 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d86:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <HAL_InitTick+0xd0>)
 8001d88:	f009 fe54 	bl	800ba34 <HAL_TIM_Base_Start_IT>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	e000      	b.n	8001d92 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3740      	adds	r7, #64	@ 0x40
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	24000008 	.word	0x24000008
 8001da0:	58024400 	.word	0x58024400
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	24000c08 	.word	0x24000c08
 8001dac:	40001000 	.word	0x40001000

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <NMI_Handler+0x4>

08001db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001dea:	2004      	movs	r0, #4
 8001dec:	f004 fdd3 	bl	8006996 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x10>)
 8001dfa:	f001 fea9 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	240009a8 	.word	0x240009a8

08001e08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <DMA1_Stream1_IRQHandler+0x10>)
 8001e0e:	f001 fe9f 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000a20 	.word	0x24000a20

08001e1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Stream2_IRQHandler+0x10>)
 8001e22:	f001 fe95 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	240008b8 	.word	0x240008b8

08001e30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA1_Stream3_IRQHandler+0x10>)
 8001e36:	f001 fe8b 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	24000930 	.word	0x24000930

08001e44 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <DMA1_Stream4_IRQHandler+0x10>)
 8001e4a:	f001 fe81 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	24000a98 	.word	0x24000a98

08001e58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <DMA1_Stream5_IRQHandler+0x10>)
 8001e5e:	f001 fe77 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000b10 	.word	0x24000b10

08001e6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <DMA1_Stream6_IRQHandler+0x10>)
 8001e72:	f001 fe6d 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24000480 	.word	0x24000480

08001e80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <FDCAN1_IT0_IRQHandler+0x10>)
 8001e86:	f003 fe9b 	bl	8005bc0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	24000224 	.word	0x24000224

08001e94 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <FDCAN1_IT1_IRQHandler+0x10>)
 8001e9a:	f003 fe91 	bl	8005bc0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	24000224 	.word	0x24000224

08001ea8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <SPI1_IRQHandler+0x10>)
 8001eae:	f009 f973 	bl	800b198 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	24000318 	.word	0x24000318

08001ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <USART1_IRQHandler+0x10>)
 8001ec2:	f00a fd0b 	bl	800c8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24000720 	.word	0x24000720

08001ed0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <USART2_IRQHandler+0x10>)
 8001ed6:	f00a fd01 	bl	800c8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	240007ec 	.word	0x240007ec

08001ee4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <DMA1_Stream7_IRQHandler+0x10>)
 8001eea:	f001 fe31 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	240004f8 	.word	0x240004f8

08001ef8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <TIM6_DAC_IRQHandler+0x10>)
 8001efe:	f009 feb7 	bl	800bc70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	24000c08 	.word	0x24000c08

08001f0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <DMA2_Stream0_IRQHandler+0x10>)
 8001f12:	f001 fe1d 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000b88 	.word	0x24000b88

08001f20 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <UART8_IRQHandler+0x10>)
 8001f26:	f00a fcd9 	bl	800c8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	24000654 	.word	0x24000654

08001f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_kill>:

int _kill(int pid, int sig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4e:	f020 fea3 	bl	8022c98 <__errno>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2216      	movs	r2, #22
 8001f56:	601a      	str	r2, [r3, #0]
  return -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_exit>:

void _exit (int status)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ffe7 	bl	8001f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f76:	bf00      	nop
 8001f78:	e7fd      	b.n	8001f76 <_exit+0x12>

08001f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e00a      	b.n	8001fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8c:	f3af 8000 	nop.w
 8001f90:	4601      	mov	r1, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	60ba      	str	r2, [r7, #8]
 8001f98:	b2ca      	uxtb	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbf0      	blt.n	8001f8c <_read+0x12>
  }

  return len;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e009      	b.n	8001fda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbf1      	blt.n	8001fc6 <_write+0x12>
  }
  return len;
 8001fe2:	687b      	ldr	r3, [r7, #4]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_close>:

int _close(int file)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002014:	605a      	str	r2, [r3, #4]
  return 0;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_isatty>:

int _isatty(int file)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	@ (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f020 fe08 	bl	8022c98 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	24080000 	.word	0x24080000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	24000c54 	.word	0x24000c54
 80020bc:	24028b40 	.word	0x24028b40

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020c4:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <SystemInit+0xe4>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <SystemInit+0xe4>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020d4:	4b34      	ldr	r3, [pc, #208]	@ (80021a8 <SystemInit+0xe8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d807      	bhi.n	80020f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020e0:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <SystemInit+0xe8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 030f 	bic.w	r3, r3, #15
 80020e8:	4a2f      	ldr	r2, [pc, #188]	@ (80021a8 <SystemInit+0xe8>)
 80020ea:	f043 0307 	orr.w	r3, r3, #7
 80020ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020f0:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <SystemInit+0xec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2d      	ldr	r2, [pc, #180]	@ (80021ac <SystemInit+0xec>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <SystemInit+0xec>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002102:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <SystemInit+0xec>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4929      	ldr	r1, [pc, #164]	@ (80021ac <SystemInit+0xec>)
 8002108:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <SystemInit+0xf0>)
 800210a:	4013      	ands	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210e:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <SystemInit+0xe8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800211a:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <SystemInit+0xe8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 030f 	bic.w	r3, r3, #15
 8002122:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <SystemInit+0xe8>)
 8002124:	f043 0307 	orr.w	r3, r3, #7
 8002128:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800212a:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <SystemInit+0xec>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <SystemInit+0xec>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002136:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <SystemInit+0xec>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <SystemInit+0xec>)
 800213e:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <SystemInit+0xf4>)
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <SystemInit+0xec>)
 8002144:	4a1c      	ldr	r2, [pc, #112]	@ (80021b8 <SystemInit+0xf8>)
 8002146:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <SystemInit+0xec>)
 800214a:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <SystemInit+0xfc>)
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <SystemInit+0xec>)
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <SystemInit+0xec>)
 8002156:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <SystemInit+0xfc>)
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <SystemInit+0xec>)
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <SystemInit+0xec>)
 8002162:	4a16      	ldr	r2, [pc, #88]	@ (80021bc <SystemInit+0xfc>)
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <SystemInit+0xec>)
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <SystemInit+0xec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0e      	ldr	r2, [pc, #56]	@ (80021ac <SystemInit+0xec>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <SystemInit+0xec>)
 800217a:	2200      	movs	r2, #0
 800217c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <SystemInit+0x100>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <SystemInit+0x104>)
 8002184:	4013      	ands	r3, r2
 8002186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800218a:	d202      	bcs.n	8002192 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <SystemInit+0x108>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <SystemInit+0x10c>)
 8002194:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002198:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	52002000 	.word	0x52002000
 80021ac:	58024400 	.word	0x58024400
 80021b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80021b4:	02020200 	.word	0x02020200
 80021b8:	01ff0000 	.word	0x01ff0000
 80021bc:	01010280 	.word	0x01010280
 80021c0:	5c001000 	.word	0x5c001000
 80021c4:	ffff0000 	.word	0xffff0000
 80021c8:	51008108 	.word	0x51008108
 80021cc:	52004000 	.word	0x52004000

080021d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002208 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021d4:	f7ff ff74 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021fe:	f020 fd51 	bl	8022ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002202:	f7fe fa3d 	bl	8000680 <main>
  bx  lr
 8002206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800220c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002210:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 8002214:	08026030 	.word	0x08026030
  ldr r2, =_sbss
 8002218:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 800221c:	24028b40 	.word	0x24028b40

08002220 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC3_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222a:	2003      	movs	r0, #3
 800222c:	f000 f933 	bl	8002496 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002230:	f005 fecc 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_Init+0x68>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	4913      	ldr	r1, [pc, #76]	@ (8002290 <HAL_Init+0x6c>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_Init+0x68>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <HAL_Init+0x6c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	4a0b      	ldr	r2, [pc, #44]	@ (8002294 <HAL_Init+0x70>)
 8002266:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002268:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <HAL_Init+0x74>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226e:	200f      	movs	r0, #15
 8002270:	f7ff fd32 	bl	8001cd8 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e002      	b.n	8002284 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800227e:	f7fe fff1 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	58024400 	.word	0x58024400
 8002290:	08024cb8 	.word	0x08024cb8
 8002294:	24000004 	.word	0x24000004
 8002298:	24000000 	.word	0x24000000

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	2400000c 	.word	0x2400000c
 80022c0:	24000c58 	.word	0x24000c58

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	24000c58 	.word	0x24000c58

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2400000c 	.word	0x2400000c

08002324 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_GetREVID+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	5c001000 	.word	0x5c001000

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <__NVIC_SetPriorityGrouping+0x40>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	4313      	orrs	r3, r2
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x40>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00
 8002380:	05fa0000 	.word	0x05fa0000

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	@ (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4907      	ldr	r1, [pc, #28]	@ (80023d8 <__NVIC_EnableIRQ+0x38>)
 80023ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	@ (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <__NVIC_SetPriority+0x50>)
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff4c 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ba:	f7ff ff63 	bl	8002384 <__NVIC_GetPriorityGrouping>
 80024be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	f7ff ffb3 	bl	8002430 <NVIC_EncodePriority>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff82 	bl	80023dc <__NVIC_SetPriority>
}
 80024d8:	bf00      	nop
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff56 	bl	80023a0 <__NVIC_EnableIRQ>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff fede 	bl	80022c4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e316      	b.n	8002b42 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a66      	ldr	r2, [pc, #408]	@ (80026b4 <HAL_DMA_Init+0x1b8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d04a      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a65      	ldr	r2, [pc, #404]	@ (80026b8 <HAL_DMA_Init+0x1bc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d045      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a63      	ldr	r2, [pc, #396]	@ (80026bc <HAL_DMA_Init+0x1c0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d040      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a62      	ldr	r2, [pc, #392]	@ (80026c0 <HAL_DMA_Init+0x1c4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d03b      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a60      	ldr	r2, [pc, #384]	@ (80026c4 <HAL_DMA_Init+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d036      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5f      	ldr	r2, [pc, #380]	@ (80026c8 <HAL_DMA_Init+0x1cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d031      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <HAL_DMA_Init+0x1d0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d02c      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5c      	ldr	r2, [pc, #368]	@ (80026d0 <HAL_DMA_Init+0x1d4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d027      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5a      	ldr	r2, [pc, #360]	@ (80026d4 <HAL_DMA_Init+0x1d8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d022      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a59      	ldr	r2, [pc, #356]	@ (80026d8 <HAL_DMA_Init+0x1dc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d01d      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a57      	ldr	r2, [pc, #348]	@ (80026dc <HAL_DMA_Init+0x1e0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d018      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a56      	ldr	r2, [pc, #344]	@ (80026e0 <HAL_DMA_Init+0x1e4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a54      	ldr	r2, [pc, #336]	@ (80026e4 <HAL_DMA_Init+0x1e8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a53      	ldr	r2, [pc, #332]	@ (80026e8 <HAL_DMA_Init+0x1ec>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a51      	ldr	r2, [pc, #324]	@ (80026ec <HAL_DMA_Init+0x1f0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_DMA_Init+0xb8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a50      	ldr	r2, [pc, #320]	@ (80026f0 <HAL_DMA_Init+0x1f4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_DMA_Init+0xbc>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_DMA_Init+0xbe>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 813b 	beq.w	8002836 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a37      	ldr	r2, [pc, #220]	@ (80026b4 <HAL_DMA_Init+0x1b8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d04a      	beq.n	8002670 <HAL_DMA_Init+0x174>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a36      	ldr	r2, [pc, #216]	@ (80026b8 <HAL_DMA_Init+0x1bc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d045      	beq.n	8002670 <HAL_DMA_Init+0x174>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a34      	ldr	r2, [pc, #208]	@ (80026bc <HAL_DMA_Init+0x1c0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d040      	beq.n	8002670 <HAL_DMA_Init+0x174>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a33      	ldr	r2, [pc, #204]	@ (80026c0 <HAL_DMA_Init+0x1c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d03b      	beq.n	8002670 <HAL_DMA_Init+0x174>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a31      	ldr	r2, [pc, #196]	@ (80026c4 <HAL_DMA_Init+0x1c8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d036      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a30      	ldr	r2, [pc, #192]	@ (80026c8 <HAL_DMA_Init+0x1cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d031      	beq.n	8002670 <HAL_DMA_Init+0x174>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2e      	ldr	r2, [pc, #184]	@ (80026cc <HAL_DMA_Init+0x1d0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d02c      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2d      	ldr	r2, [pc, #180]	@ (80026d0 <HAL_DMA_Init+0x1d4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d027      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2b      	ldr	r2, [pc, #172]	@ (80026d4 <HAL_DMA_Init+0x1d8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d022      	beq.n	8002670 <HAL_DMA_Init+0x174>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2a      	ldr	r2, [pc, #168]	@ (80026d8 <HAL_DMA_Init+0x1dc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d01d      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a28      	ldr	r2, [pc, #160]	@ (80026dc <HAL_DMA_Init+0x1e0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d018      	beq.n	8002670 <HAL_DMA_Init+0x174>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_DMA_Init+0x1e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a25      	ldr	r2, [pc, #148]	@ (80026e4 <HAL_DMA_Init+0x1e8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00e      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a24      	ldr	r2, [pc, #144]	@ (80026e8 <HAL_DMA_Init+0x1ec>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_DMA_Init+0x174>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a22      	ldr	r2, [pc, #136]	@ (80026ec <HAL_DMA_Init+0x1f0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_DMA_Init+0x174>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a21      	ldr	r2, [pc, #132]	@ (80026f0 <HAL_DMA_Init+0x1f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d108      	bne.n	8002682 <HAL_DMA_Init+0x186>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e007      	b.n	8002692 <HAL_DMA_Init+0x196>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002692:	e02f      	b.n	80026f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002694:	f7ff fe16 	bl	80022c4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d928      	bls.n	80026f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2203      	movs	r2, #3
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e246      	b.n	8002b42 <HAL_DMA_Init+0x646>
 80026b4:	40020010 	.word	0x40020010
 80026b8:	40020028 	.word	0x40020028
 80026bc:	40020040 	.word	0x40020040
 80026c0:	40020058 	.word	0x40020058
 80026c4:	40020070 	.word	0x40020070
 80026c8:	40020088 	.word	0x40020088
 80026cc:	400200a0 	.word	0x400200a0
 80026d0:	400200b8 	.word	0x400200b8
 80026d4:	40020410 	.word	0x40020410
 80026d8:	40020428 	.word	0x40020428
 80026dc:	40020440 	.word	0x40020440
 80026e0:	40020458 	.word	0x40020458
 80026e4:	40020470 	.word	0x40020470
 80026e8:	40020488 	.word	0x40020488
 80026ec:	400204a0 	.word	0x400204a0
 80026f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1c8      	bne.n	8002694 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4b83      	ldr	r3, [pc, #524]	@ (800291c <HAL_DMA_Init+0x420>)
 800270e:	4013      	ands	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800271a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	4313      	orrs	r3, r2
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002758:	4b71      	ldr	r3, [pc, #452]	@ (8002920 <HAL_DMA_Init+0x424>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b71      	ldr	r3, [pc, #452]	@ (8002924 <HAL_DMA_Init+0x428>)
 800275e:	4013      	ands	r3, r2
 8002760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002764:	d328      	bcc.n	80027b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b28      	cmp	r3, #40	@ 0x28
 800276c:	d903      	bls.n	8002776 <HAL_DMA_Init+0x27a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b2e      	cmp	r3, #46	@ 0x2e
 8002774:	d917      	bls.n	80027a6 <HAL_DMA_Init+0x2aa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b3e      	cmp	r3, #62	@ 0x3e
 800277c:	d903      	bls.n	8002786 <HAL_DMA_Init+0x28a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b42      	cmp	r3, #66	@ 0x42
 8002784:	d90f      	bls.n	80027a6 <HAL_DMA_Init+0x2aa>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b46      	cmp	r3, #70	@ 0x46
 800278c:	d903      	bls.n	8002796 <HAL_DMA_Init+0x29a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b48      	cmp	r3, #72	@ 0x48
 8002794:	d907      	bls.n	80027a6 <HAL_DMA_Init+0x2aa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b4e      	cmp	r3, #78	@ 0x4e
 800279c:	d905      	bls.n	80027aa <HAL_DMA_Init+0x2ae>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b52      	cmp	r3, #82	@ 0x52
 80027a4:	d801      	bhi.n	80027aa <HAL_DMA_Init+0x2ae>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_DMA_Init+0x2b0>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d117      	bne.n	8002812 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f002 fb99 	bl	8004f2c <DMA_CheckFifoParam>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	@ 0x40
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e197      	b.n	8002b42 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f002 fad4 	bl	8004dc8 <DMA_CalcBaseAndBitshift>
 8002820:	4603      	mov	r3, r0
 8002822:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	223f      	movs	r2, #63	@ 0x3f
 800282e:	409a      	lsls	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e0cd      	b.n	80029d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3b      	ldr	r2, [pc, #236]	@ (8002928 <HAL_DMA_Init+0x42c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a39      	ldr	r2, [pc, #228]	@ (800292c <HAL_DMA_Init+0x430>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a38      	ldr	r2, [pc, #224]	@ (8002930 <HAL_DMA_Init+0x434>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d018      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a36      	ldr	r2, [pc, #216]	@ (8002934 <HAL_DMA_Init+0x438>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a35      	ldr	r2, [pc, #212]	@ (8002938 <HAL_DMA_Init+0x43c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00e      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a33      	ldr	r2, [pc, #204]	@ (800293c <HAL_DMA_Init+0x440>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a32      	ldr	r2, [pc, #200]	@ (8002940 <HAL_DMA_Init+0x444>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_Init+0x38a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a30      	ldr	r2, [pc, #192]	@ (8002944 <HAL_DMA_Init+0x448>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_DMA_Init+0x38e>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_DMA_Init+0x390>
 800288a:	2300      	movs	r3, #0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8097 	beq.w	80029c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <HAL_DMA_Init+0x42c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d021      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_DMA_Init+0x430>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01c      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_DMA_Init+0x434>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d017      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_DMA_Init+0x438>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d012      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_DMA_Init+0x43c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00d      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_DMA_Init+0x440>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d008      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_DMA_Init+0x444>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_Init+0x3e4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a19      	ldr	r2, [pc, #100]	@ (8002944 <HAL_DMA_Init+0x448>)
 80028de:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <HAL_DMA_Init+0x44c>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b40      	cmp	r3, #64	@ 0x40
 8002906:	d021      	beq.n	800294c <HAL_DMA_Init+0x450>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b80      	cmp	r3, #128	@ 0x80
 800290e:	d102      	bne.n	8002916 <HAL_DMA_Init+0x41a>
 8002910:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002914:	e01b      	b.n	800294e <HAL_DMA_Init+0x452>
 8002916:	2300      	movs	r3, #0
 8002918:	e019      	b.n	800294e <HAL_DMA_Init+0x452>
 800291a:	bf00      	nop
 800291c:	fe10803f 	.word	0xfe10803f
 8002920:	5c001000 	.word	0x5c001000
 8002924:	ffff0000 	.word	0xffff0000
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025444 	.word	0x58025444
 8002938:	58025458 	.word	0x58025458
 800293c:	5802546c 	.word	0x5802546c
 8002940:	58025480 	.word	0x58025480
 8002944:	58025494 	.word	0x58025494
 8002948:	fffe000f 	.word	0xfffe000f
 800294c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800295c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800296c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800297c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b6e      	ldr	r3, [pc, #440]	@ (8002b4c <HAL_DMA_Init+0x650>)
 8002994:	4413      	add	r3, r2
 8002996:	4a6e      	ldr	r2, [pc, #440]	@ (8002b50 <HAL_DMA_Init+0x654>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	009a      	lsls	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f002 fa0f 	bl	8004dc8 <DMA_CalcBaseAndBitshift>
 80029aa:	4603      	mov	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e008      	b.n	80029d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	@ 0x40
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0b7      	b.n	8002b42 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b54 <HAL_DMA_Init+0x658>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d072      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b58 <HAL_DMA_Init+0x65c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d06d      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5c      	ldr	r2, [pc, #368]	@ (8002b5c <HAL_DMA_Init+0x660>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d068      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b60 <HAL_DMA_Init+0x664>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d063      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a59      	ldr	r2, [pc, #356]	@ (8002b64 <HAL_DMA_Init+0x668>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d05e      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a57      	ldr	r2, [pc, #348]	@ (8002b68 <HAL_DMA_Init+0x66c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d059      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a56      	ldr	r2, [pc, #344]	@ (8002b6c <HAL_DMA_Init+0x670>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d054      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	@ (8002b70 <HAL_DMA_Init+0x674>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04f      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a53      	ldr	r2, [pc, #332]	@ (8002b74 <HAL_DMA_Init+0x678>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a51      	ldr	r2, [pc, #324]	@ (8002b78 <HAL_DMA_Init+0x67c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a50      	ldr	r2, [pc, #320]	@ (8002b7c <HAL_DMA_Init+0x680>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a4e      	ldr	r2, [pc, #312]	@ (8002b80 <HAL_DMA_Init+0x684>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b84 <HAL_DMA_Init+0x688>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	@ (8002b88 <HAL_DMA_Init+0x68c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4a      	ldr	r2, [pc, #296]	@ (8002b8c <HAL_DMA_Init+0x690>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a48      	ldr	r2, [pc, #288]	@ (8002b90 <HAL_DMA_Init+0x694>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a47      	ldr	r2, [pc, #284]	@ (8002b94 <HAL_DMA_Init+0x698>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a45      	ldr	r2, [pc, #276]	@ (8002b98 <HAL_DMA_Init+0x69c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a44      	ldr	r2, [pc, #272]	@ (8002b9c <HAL_DMA_Init+0x6a0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a42      	ldr	r2, [pc, #264]	@ (8002ba0 <HAL_DMA_Init+0x6a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a41      	ldr	r2, [pc, #260]	@ (8002ba4 <HAL_DMA_Init+0x6a8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba8 <HAL_DMA_Init+0x6ac>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bac <HAL_DMA_Init+0x6b0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Init+0x5c6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb0 <HAL_DMA_Init+0x6b4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DMA_Init+0x5ca>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_DMA_Init+0x5cc>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d032      	beq.n	8002b32 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f002 faa9 	bl	8005024 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b80      	cmp	r3, #128	@ 0x80
 8002ad8:	d102      	bne.n	8002ae0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002af4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_DMA_Init+0x624>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d80c      	bhi.n	8002b20 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f002 fb26 	bl	8005158 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	e008      	b.n	8002b32 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	a7fdabf8 	.word	0xa7fdabf8
 8002b50:	cccccccd 	.word	0xcccccccd
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40020028 	.word	0x40020028
 8002b5c:	40020040 	.word	0x40020040
 8002b60:	40020058 	.word	0x40020058
 8002b64:	40020070 	.word	0x40020070
 8002b68:	40020088 	.word	0x40020088
 8002b6c:	400200a0 	.word	0x400200a0
 8002b70:	400200b8 	.word	0x400200b8
 8002b74:	40020410 	.word	0x40020410
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40020440 	.word	0x40020440
 8002b80:	40020458 	.word	0x40020458
 8002b84:	40020470 	.word	0x40020470
 8002b88:	40020488 	.word	0x40020488
 8002b8c:	400204a0 	.word	0x400204a0
 8002b90:	400204b8 	.word	0x400204b8
 8002b94:	58025408 	.word	0x58025408
 8002b98:	5802541c 	.word	0x5802541c
 8002b9c:	58025430 	.word	0x58025430
 8002ba0:	58025444 	.word	0x58025444
 8002ba4:	58025458 	.word	0x58025458
 8002ba8:	5802546c 	.word	0x5802546c
 8002bac:	58025480 	.word	0x58025480
 8002bb0:	58025494 	.word	0x58025494

08002bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e226      	b.n	800301e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_DMA_Start_IT+0x2a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e21f      	b.n	800301e <HAL_DMA_Start_IT+0x46a>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 820a 	bne.w	8003008 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a68      	ldr	r2, [pc, #416]	@ (8002da8 <HAL_DMA_Start_IT+0x1f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04a      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a66      	ldr	r2, [pc, #408]	@ (8002dac <HAL_DMA_Start_IT+0x1f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d045      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a65      	ldr	r2, [pc, #404]	@ (8002db0 <HAL_DMA_Start_IT+0x1fc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d040      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a63      	ldr	r2, [pc, #396]	@ (8002db4 <HAL_DMA_Start_IT+0x200>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d03b      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a62      	ldr	r2, [pc, #392]	@ (8002db8 <HAL_DMA_Start_IT+0x204>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d036      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a60      	ldr	r2, [pc, #384]	@ (8002dbc <HAL_DMA_Start_IT+0x208>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc0 <HAL_DMA_Start_IT+0x20c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d02c      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc4 <HAL_DMA_Start_IT+0x210>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d027      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc8 <HAL_DMA_Start_IT+0x214>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5a      	ldr	r2, [pc, #360]	@ (8002dcc <HAL_DMA_Start_IT+0x218>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01d      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a59      	ldr	r2, [pc, #356]	@ (8002dd0 <HAL_DMA_Start_IT+0x21c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a57      	ldr	r2, [pc, #348]	@ (8002dd4 <HAL_DMA_Start_IT+0x220>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a56      	ldr	r2, [pc, #344]	@ (8002dd8 <HAL_DMA_Start_IT+0x224>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a54      	ldr	r2, [pc, #336]	@ (8002ddc <HAL_DMA_Start_IT+0x228>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a53      	ldr	r2, [pc, #332]	@ (8002de0 <HAL_DMA_Start_IT+0x22c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_Start_IT+0xee>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a51      	ldr	r2, [pc, #324]	@ (8002de4 <HAL_DMA_Start_IT+0x230>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <HAL_DMA_Start_IT+0x100>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_DMA_Start_IT+0x110>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f001 fed0 	bl	8004a70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a34      	ldr	r2, [pc, #208]	@ (8002da8 <HAL_DMA_Start_IT+0x1f4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d04a      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a33      	ldr	r2, [pc, #204]	@ (8002dac <HAL_DMA_Start_IT+0x1f8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d045      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a31      	ldr	r2, [pc, #196]	@ (8002db0 <HAL_DMA_Start_IT+0x1fc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d040      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a30      	ldr	r2, [pc, #192]	@ (8002db4 <HAL_DMA_Start_IT+0x200>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d03b      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8002db8 <HAL_DMA_Start_IT+0x204>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d036      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2d      	ldr	r2, [pc, #180]	@ (8002dbc <HAL_DMA_Start_IT+0x208>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d031      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc0 <HAL_DMA_Start_IT+0x20c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02c      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc4 <HAL_DMA_Start_IT+0x210>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d027      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a28      	ldr	r2, [pc, #160]	@ (8002dc8 <HAL_DMA_Start_IT+0x214>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d022      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a27      	ldr	r2, [pc, #156]	@ (8002dcc <HAL_DMA_Start_IT+0x218>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d01d      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a25      	ldr	r2, [pc, #148]	@ (8002dd0 <HAL_DMA_Start_IT+0x21c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d018      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a24      	ldr	r2, [pc, #144]	@ (8002dd4 <HAL_DMA_Start_IT+0x220>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	@ (8002dd8 <HAL_DMA_Start_IT+0x224>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00e      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a21      	ldr	r2, [pc, #132]	@ (8002ddc <HAL_DMA_Start_IT+0x228>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1f      	ldr	r2, [pc, #124]	@ (8002de0 <HAL_DMA_Start_IT+0x22c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_Start_IT+0x1bc>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002de4 <HAL_DMA_Start_IT+0x230>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Start_IT+0x1c0>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_Start_IT+0x1c2>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d036      	beq.n	8002de8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 021e 	bic.w	r2, r3, #30
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0216 	orr.w	r2, r2, #22
 8002d8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03e      	beq.n	8002e14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0208 	orr.w	r2, r2, #8
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e035      	b.n	8002e14 <HAL_DMA_Start_IT+0x260>
 8002da8:	40020010 	.word	0x40020010
 8002dac:	40020028 	.word	0x40020028
 8002db0:	40020040 	.word	0x40020040
 8002db4:	40020058 	.word	0x40020058
 8002db8:	40020070 	.word	0x40020070
 8002dbc:	40020088 	.word	0x40020088
 8002dc0:	400200a0 	.word	0x400200a0
 8002dc4:	400200b8 	.word	0x400200b8
 8002dc8:	40020410 	.word	0x40020410
 8002dcc:	40020428 	.word	0x40020428
 8002dd0:	40020440 	.word	0x40020440
 8002dd4:	40020458 	.word	0x40020458
 8002dd8:	40020470 	.word	0x40020470
 8002ddc:	40020488 	.word	0x40020488
 8002de0:	400204a0 	.word	0x400204a0
 8002de4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020e 	bic.w	r2, r3, #14
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 020a 	orr.w	r2, r2, #10
 8002dfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0204 	orr.w	r2, r2, #4
 8002e12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a83      	ldr	r2, [pc, #524]	@ (8003028 <HAL_DMA_Start_IT+0x474>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d072      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a82      	ldr	r2, [pc, #520]	@ (800302c <HAL_DMA_Start_IT+0x478>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d06d      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a80      	ldr	r2, [pc, #512]	@ (8003030 <HAL_DMA_Start_IT+0x47c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d068      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a7f      	ldr	r2, [pc, #508]	@ (8003034 <HAL_DMA_Start_IT+0x480>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d063      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a7d      	ldr	r2, [pc, #500]	@ (8003038 <HAL_DMA_Start_IT+0x484>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d05e      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800303c <HAL_DMA_Start_IT+0x488>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d059      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7a      	ldr	r2, [pc, #488]	@ (8003040 <HAL_DMA_Start_IT+0x48c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d054      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a79      	ldr	r2, [pc, #484]	@ (8003044 <HAL_DMA_Start_IT+0x490>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04f      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a77      	ldr	r2, [pc, #476]	@ (8003048 <HAL_DMA_Start_IT+0x494>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04a      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a76      	ldr	r2, [pc, #472]	@ (800304c <HAL_DMA_Start_IT+0x498>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d045      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a74      	ldr	r2, [pc, #464]	@ (8003050 <HAL_DMA_Start_IT+0x49c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d040      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	@ (8003054 <HAL_DMA_Start_IT+0x4a0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d03b      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a71      	ldr	r2, [pc, #452]	@ (8003058 <HAL_DMA_Start_IT+0x4a4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d036      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a70      	ldr	r2, [pc, #448]	@ (800305c <HAL_DMA_Start_IT+0x4a8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8003060 <HAL_DMA_Start_IT+0x4ac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02c      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6d      	ldr	r2, [pc, #436]	@ (8003064 <HAL_DMA_Start_IT+0x4b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d027      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003068 <HAL_DMA_Start_IT+0x4b4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6a      	ldr	r2, [pc, #424]	@ (800306c <HAL_DMA_Start_IT+0x4b8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01d      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a68      	ldr	r2, [pc, #416]	@ (8003070 <HAL_DMA_Start_IT+0x4bc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a67      	ldr	r2, [pc, #412]	@ (8003074 <HAL_DMA_Start_IT+0x4c0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a65      	ldr	r2, [pc, #404]	@ (8003078 <HAL_DMA_Start_IT+0x4c4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a64      	ldr	r2, [pc, #400]	@ (800307c <HAL_DMA_Start_IT+0x4c8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a62      	ldr	r2, [pc, #392]	@ (8003080 <HAL_DMA_Start_IT+0x4cc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Start_IT+0x350>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a61      	ldr	r2, [pc, #388]	@ (8003084 <HAL_DMA_Start_IT+0x4d0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_DMA_Start_IT+0x354>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_Start_IT+0x356>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01a      	beq.n	8002f44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a37      	ldr	r2, [pc, #220]	@ (8003028 <HAL_DMA_Start_IT+0x474>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d04a      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a36      	ldr	r2, [pc, #216]	@ (800302c <HAL_DMA_Start_IT+0x478>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d045      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	@ (8003030 <HAL_DMA_Start_IT+0x47c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d040      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a33      	ldr	r2, [pc, #204]	@ (8003034 <HAL_DMA_Start_IT+0x480>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d03b      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a31      	ldr	r2, [pc, #196]	@ (8003038 <HAL_DMA_Start_IT+0x484>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d036      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a30      	ldr	r2, [pc, #192]	@ (800303c <HAL_DMA_Start_IT+0x488>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d031      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2e      	ldr	r2, [pc, #184]	@ (8003040 <HAL_DMA_Start_IT+0x48c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d02c      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003044 <HAL_DMA_Start_IT+0x490>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d027      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2b      	ldr	r2, [pc, #172]	@ (8003048 <HAL_DMA_Start_IT+0x494>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d022      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800304c <HAL_DMA_Start_IT+0x498>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d01d      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a28      	ldr	r2, [pc, #160]	@ (8003050 <HAL_DMA_Start_IT+0x49c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d018      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a27      	ldr	r2, [pc, #156]	@ (8003054 <HAL_DMA_Start_IT+0x4a0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a25      	ldr	r2, [pc, #148]	@ (8003058 <HAL_DMA_Start_IT+0x4a4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a24      	ldr	r2, [pc, #144]	@ (800305c <HAL_DMA_Start_IT+0x4a8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <HAL_DMA_Start_IT+0x4ac>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x430>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a21      	ldr	r2, [pc, #132]	@ (8003064 <HAL_DMA_Start_IT+0x4b0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d108      	bne.n	8002ff6 <HAL_DMA_Start_IT+0x442>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e012      	b.n	800301c <HAL_DMA_Start_IT+0x468>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e009      	b.n	800301c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40020010 	.word	0x40020010
 800302c:	40020028 	.word	0x40020028
 8003030:	40020040 	.word	0x40020040
 8003034:	40020058 	.word	0x40020058
 8003038:	40020070 	.word	0x40020070
 800303c:	40020088 	.word	0x40020088
 8003040:	400200a0 	.word	0x400200a0
 8003044:	400200b8 	.word	0x400200b8
 8003048:	40020410 	.word	0x40020410
 800304c:	40020428 	.word	0x40020428
 8003050:	40020440 	.word	0x40020440
 8003054:	40020458 	.word	0x40020458
 8003058:	40020470 	.word	0x40020470
 800305c:	40020488 	.word	0x40020488
 8003060:	400204a0 	.word	0x400204a0
 8003064:	400204b8 	.word	0x400204b8
 8003068:	58025408 	.word	0x58025408
 800306c:	5802541c 	.word	0x5802541c
 8003070:	58025430 	.word	0x58025430
 8003074:	58025444 	.word	0x58025444
 8003078:	58025458 	.word	0x58025458
 800307c:	5802546c 	.word	0x5802546c
 8003080:	58025480 	.word	0x58025480
 8003084:	58025494 	.word	0x58025494

08003088 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff f918 	bl	80022c4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e2dc      	b.n	800365a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d008      	beq.n	80030be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e2cd      	b.n	800365a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a76      	ldr	r2, [pc, #472]	@ (800329c <HAL_DMA_Abort+0x214>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d04a      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a74      	ldr	r2, [pc, #464]	@ (80032a0 <HAL_DMA_Abort+0x218>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d045      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a73      	ldr	r2, [pc, #460]	@ (80032a4 <HAL_DMA_Abort+0x21c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d040      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a71      	ldr	r2, [pc, #452]	@ (80032a8 <HAL_DMA_Abort+0x220>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d03b      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a70      	ldr	r2, [pc, #448]	@ (80032ac <HAL_DMA_Abort+0x224>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d036      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6e      	ldr	r2, [pc, #440]	@ (80032b0 <HAL_DMA_Abort+0x228>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d031      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6d      	ldr	r2, [pc, #436]	@ (80032b4 <HAL_DMA_Abort+0x22c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d02c      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6b      	ldr	r2, [pc, #428]	@ (80032b8 <HAL_DMA_Abort+0x230>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d027      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6a      	ldr	r2, [pc, #424]	@ (80032bc <HAL_DMA_Abort+0x234>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d022      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a68      	ldr	r2, [pc, #416]	@ (80032c0 <HAL_DMA_Abort+0x238>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01d      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a67      	ldr	r2, [pc, #412]	@ (80032c4 <HAL_DMA_Abort+0x23c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d018      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_DMA_Abort+0x240>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a64      	ldr	r2, [pc, #400]	@ (80032cc <HAL_DMA_Abort+0x244>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00e      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a62      	ldr	r2, [pc, #392]	@ (80032d0 <HAL_DMA_Abort+0x248>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a61      	ldr	r2, [pc, #388]	@ (80032d4 <HAL_DMA_Abort+0x24c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_DMA_Abort+0xd6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5f      	ldr	r2, [pc, #380]	@ (80032d8 <HAL_DMA_Abort+0x250>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_DMA_Abort+0xda>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_DMA_Abort+0xdc>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 021e 	bic.w	r2, r2, #30
 8003176:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003186:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e00a      	b.n	80031a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020e 	bic.w	r2, r2, #14
 800319e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3c      	ldr	r2, [pc, #240]	@ (800329c <HAL_DMA_Abort+0x214>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d072      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3a      	ldr	r2, [pc, #232]	@ (80032a0 <HAL_DMA_Abort+0x218>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d06d      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a39      	ldr	r2, [pc, #228]	@ (80032a4 <HAL_DMA_Abort+0x21c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d068      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a37      	ldr	r2, [pc, #220]	@ (80032a8 <HAL_DMA_Abort+0x220>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d063      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a36      	ldr	r2, [pc, #216]	@ (80032ac <HAL_DMA_Abort+0x224>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d05e      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a34      	ldr	r2, [pc, #208]	@ (80032b0 <HAL_DMA_Abort+0x228>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d059      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a33      	ldr	r2, [pc, #204]	@ (80032b4 <HAL_DMA_Abort+0x22c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d054      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a31      	ldr	r2, [pc, #196]	@ (80032b8 <HAL_DMA_Abort+0x230>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d04f      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a30      	ldr	r2, [pc, #192]	@ (80032bc <HAL_DMA_Abort+0x234>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d04a      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2e      	ldr	r2, [pc, #184]	@ (80032c0 <HAL_DMA_Abort+0x238>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d045      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2d      	ldr	r2, [pc, #180]	@ (80032c4 <HAL_DMA_Abort+0x23c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d040      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2b      	ldr	r2, [pc, #172]	@ (80032c8 <HAL_DMA_Abort+0x240>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d03b      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2a      	ldr	r2, [pc, #168]	@ (80032cc <HAL_DMA_Abort+0x244>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d036      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a28      	ldr	r2, [pc, #160]	@ (80032d0 <HAL_DMA_Abort+0x248>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a27      	ldr	r2, [pc, #156]	@ (80032d4 <HAL_DMA_Abort+0x24c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d02c      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a25      	ldr	r2, [pc, #148]	@ (80032d8 <HAL_DMA_Abort+0x250>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d027      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <HAL_DMA_Abort+0x254>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <HAL_DMA_Abort+0x258>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a21      	ldr	r2, [pc, #132]	@ (80032e4 <HAL_DMA_Abort+0x25c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_DMA_Abort+0x260>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <HAL_DMA_Abort+0x264>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_DMA_Abort+0x268>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_DMA_Abort+0x26c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_Abort+0x20e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_DMA_Abort+0x270>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d132      	bne.n	80032fc <HAL_DMA_Abort+0x274>
 8003296:	2301      	movs	r3, #1
 8003298:	e031      	b.n	80032fe <HAL_DMA_Abort+0x276>
 800329a:	bf00      	nop
 800329c:	40020010 	.word	0x40020010
 80032a0:	40020028 	.word	0x40020028
 80032a4:	40020040 	.word	0x40020040
 80032a8:	40020058 	.word	0x40020058
 80032ac:	40020070 	.word	0x40020070
 80032b0:	40020088 	.word	0x40020088
 80032b4:	400200a0 	.word	0x400200a0
 80032b8:	400200b8 	.word	0x400200b8
 80032bc:	40020410 	.word	0x40020410
 80032c0:	40020428 	.word	0x40020428
 80032c4:	40020440 	.word	0x40020440
 80032c8:	40020458 	.word	0x40020458
 80032cc:	40020470 	.word	0x40020470
 80032d0:	40020488 	.word	0x40020488
 80032d4:	400204a0 	.word	0x400204a0
 80032d8:	400204b8 	.word	0x400204b8
 80032dc:	58025408 	.word	0x58025408
 80032e0:	5802541c 	.word	0x5802541c
 80032e4:	58025430 	.word	0x58025430
 80032e8:	58025444 	.word	0x58025444
 80032ec:	58025458 	.word	0x58025458
 80032f0:	5802546c 	.word	0x5802546c
 80032f4:	58025480 	.word	0x58025480
 80032f8:	58025494 	.word	0x58025494
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003310:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6d      	ldr	r2, [pc, #436]	@ (80034cc <HAL_DMA_Abort+0x444>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d04a      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6b      	ldr	r2, [pc, #428]	@ (80034d0 <HAL_DMA_Abort+0x448>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d045      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6a      	ldr	r2, [pc, #424]	@ (80034d4 <HAL_DMA_Abort+0x44c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d040      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a68      	ldr	r2, [pc, #416]	@ (80034d8 <HAL_DMA_Abort+0x450>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d03b      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a67      	ldr	r2, [pc, #412]	@ (80034dc <HAL_DMA_Abort+0x454>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d036      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a65      	ldr	r2, [pc, #404]	@ (80034e0 <HAL_DMA_Abort+0x458>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d031      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a64      	ldr	r2, [pc, #400]	@ (80034e4 <HAL_DMA_Abort+0x45c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d02c      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a62      	ldr	r2, [pc, #392]	@ (80034e8 <HAL_DMA_Abort+0x460>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d027      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a61      	ldr	r2, [pc, #388]	@ (80034ec <HAL_DMA_Abort+0x464>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d022      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5f      	ldr	r2, [pc, #380]	@ (80034f0 <HAL_DMA_Abort+0x468>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01d      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <HAL_DMA_Abort+0x46c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d018      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5c      	ldr	r2, [pc, #368]	@ (80034f8 <HAL_DMA_Abort+0x470>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5b      	ldr	r2, [pc, #364]	@ (80034fc <HAL_DMA_Abort+0x474>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00e      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a59      	ldr	r2, [pc, #356]	@ (8003500 <HAL_DMA_Abort+0x478>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_DMA_Abort+0x47c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_Abort+0x32a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_DMA_Abort+0x480>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <HAL_DMA_Abort+0x33c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e007      	b.n	80033d4 <HAL_DMA_Abort+0x34c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033d4:	e013      	b.n	80033fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d6:	f7fe ff75 	bl	80022c4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d90c      	bls.n	80033fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2203      	movs	r2, #3
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e12d      	b.n	800365a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2f      	ldr	r2, [pc, #188]	@ (80034cc <HAL_DMA_Abort+0x444>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d04a      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2d      	ldr	r2, [pc, #180]	@ (80034d0 <HAL_DMA_Abort+0x448>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d045      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <HAL_DMA_Abort+0x44c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d040      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2a      	ldr	r2, [pc, #168]	@ (80034d8 <HAL_DMA_Abort+0x450>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d03b      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a29      	ldr	r2, [pc, #164]	@ (80034dc <HAL_DMA_Abort+0x454>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d036      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a27      	ldr	r2, [pc, #156]	@ (80034e0 <HAL_DMA_Abort+0x458>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a26      	ldr	r2, [pc, #152]	@ (80034e4 <HAL_DMA_Abort+0x45c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d02c      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a24      	ldr	r2, [pc, #144]	@ (80034e8 <HAL_DMA_Abort+0x460>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d027      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a23      	ldr	r2, [pc, #140]	@ (80034ec <HAL_DMA_Abort+0x464>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <HAL_DMA_Abort+0x468>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a20      	ldr	r2, [pc, #128]	@ (80034f4 <HAL_DMA_Abort+0x46c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d018      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1e      	ldr	r2, [pc, #120]	@ (80034f8 <HAL_DMA_Abort+0x470>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_DMA_Abort+0x474>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <HAL_DMA_Abort+0x478>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1a      	ldr	r2, [pc, #104]	@ (8003504 <HAL_DMA_Abort+0x47c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_DMA_Abort+0x422>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <HAL_DMA_Abort+0x480>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_DMA_Abort+0x426>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_DMA_Abort+0x428>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02b      	beq.n	800350c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	223f      	movs	r2, #63	@ 0x3f
 80034c4:	409a      	lsls	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	e02a      	b.n	8003522 <HAL_DMA_Abort+0x49a>
 80034cc:	40020010 	.word	0x40020010
 80034d0:	40020028 	.word	0x40020028
 80034d4:	40020040 	.word	0x40020040
 80034d8:	40020058 	.word	0x40020058
 80034dc:	40020070 	.word	0x40020070
 80034e0:	40020088 	.word	0x40020088
 80034e4:	400200a0 	.word	0x400200a0
 80034e8:	400200b8 	.word	0x400200b8
 80034ec:	40020410 	.word	0x40020410
 80034f0:	40020428 	.word	0x40020428
 80034f4:	40020440 	.word	0x40020440
 80034f8:	40020458 	.word	0x40020458
 80034fc:	40020470 	.word	0x40020470
 8003500:	40020488 	.word	0x40020488
 8003504:	400204a0 	.word	0x400204a0
 8003508:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2201      	movs	r2, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a4f      	ldr	r2, [pc, #316]	@ (8003664 <HAL_DMA_Abort+0x5dc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d072      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a4d      	ldr	r2, [pc, #308]	@ (8003668 <HAL_DMA_Abort+0x5e0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d06d      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a4c      	ldr	r2, [pc, #304]	@ (800366c <HAL_DMA_Abort+0x5e4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d068      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a4a      	ldr	r2, [pc, #296]	@ (8003670 <HAL_DMA_Abort+0x5e8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d063      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a49      	ldr	r2, [pc, #292]	@ (8003674 <HAL_DMA_Abort+0x5ec>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d05e      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a47      	ldr	r2, [pc, #284]	@ (8003678 <HAL_DMA_Abort+0x5f0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d059      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a46      	ldr	r2, [pc, #280]	@ (800367c <HAL_DMA_Abort+0x5f4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d054      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a44      	ldr	r2, [pc, #272]	@ (8003680 <HAL_DMA_Abort+0x5f8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d04f      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a43      	ldr	r2, [pc, #268]	@ (8003684 <HAL_DMA_Abort+0x5fc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d04a      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a41      	ldr	r2, [pc, #260]	@ (8003688 <HAL_DMA_Abort+0x600>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d045      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a40      	ldr	r2, [pc, #256]	@ (800368c <HAL_DMA_Abort+0x604>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d040      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3e      	ldr	r2, [pc, #248]	@ (8003690 <HAL_DMA_Abort+0x608>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d03b      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a3d      	ldr	r2, [pc, #244]	@ (8003694 <HAL_DMA_Abort+0x60c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d036      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003698 <HAL_DMA_Abort+0x610>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d031      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a3a      	ldr	r2, [pc, #232]	@ (800369c <HAL_DMA_Abort+0x614>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d02c      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a38      	ldr	r2, [pc, #224]	@ (80036a0 <HAL_DMA_Abort+0x618>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d027      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a37      	ldr	r2, [pc, #220]	@ (80036a4 <HAL_DMA_Abort+0x61c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a35      	ldr	r2, [pc, #212]	@ (80036a8 <HAL_DMA_Abort+0x620>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a34      	ldr	r2, [pc, #208]	@ (80036ac <HAL_DMA_Abort+0x624>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a32      	ldr	r2, [pc, #200]	@ (80036b0 <HAL_DMA_Abort+0x628>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <HAL_DMA_Abort+0x62c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2f      	ldr	r2, [pc, #188]	@ (80036b8 <HAL_DMA_Abort+0x630>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2e      	ldr	r2, [pc, #184]	@ (80036bc <HAL_DMA_Abort+0x634>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_DMA_Abort+0x58a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2c      	ldr	r2, [pc, #176]	@ (80036c0 <HAL_DMA_Abort+0x638>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_DMA_Abort+0x58e>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_DMA_Abort+0x590>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003624:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00c      	beq.n	8003648 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800363c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003646:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	58025408 	.word	0x58025408
 80036a8:	5802541c 	.word	0x5802541c
 80036ac:	58025430 	.word	0x58025430
 80036b0:	58025444 	.word	0x58025444
 80036b4:	58025458 	.word	0x58025458
 80036b8:	5802546c 	.word	0x5802546c
 80036bc:	58025480 	.word	0x58025480
 80036c0:	58025494 	.word	0x58025494

080036c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e237      	b.n	8003b46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2280      	movs	r2, #128	@ 0x80
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e22c      	b.n	8003b46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003864 <HAL_DMA_Abort_IT+0x1a0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d04a      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003868 <HAL_DMA_Abort_IT+0x1a4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d045      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a59      	ldr	r2, [pc, #356]	@ (800386c <HAL_DMA_Abort_IT+0x1a8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d040      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a58      	ldr	r2, [pc, #352]	@ (8003870 <HAL_DMA_Abort_IT+0x1ac>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d03b      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a56      	ldr	r2, [pc, #344]	@ (8003874 <HAL_DMA_Abort_IT+0x1b0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d036      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a55      	ldr	r2, [pc, #340]	@ (8003878 <HAL_DMA_Abort_IT+0x1b4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d031      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a53      	ldr	r2, [pc, #332]	@ (800387c <HAL_DMA_Abort_IT+0x1b8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02c      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a52      	ldr	r2, [pc, #328]	@ (8003880 <HAL_DMA_Abort_IT+0x1bc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d027      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a50      	ldr	r2, [pc, #320]	@ (8003884 <HAL_DMA_Abort_IT+0x1c0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4f      	ldr	r2, [pc, #316]	@ (8003888 <HAL_DMA_Abort_IT+0x1c4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d01d      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4d      	ldr	r2, [pc, #308]	@ (800388c <HAL_DMA_Abort_IT+0x1c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a4c      	ldr	r2, [pc, #304]	@ (8003890 <HAL_DMA_Abort_IT+0x1cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a4a      	ldr	r2, [pc, #296]	@ (8003894 <HAL_DMA_Abort_IT+0x1d0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a49      	ldr	r2, [pc, #292]	@ (8003898 <HAL_DMA_Abort_IT+0x1d4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a47      	ldr	r2, [pc, #284]	@ (800389c <HAL_DMA_Abort_IT+0x1d8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_DMA_Abort_IT+0xc8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a46      	ldr	r2, [pc, #280]	@ (80038a0 <HAL_DMA_Abort_IT+0x1dc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_DMA_Abort_IT+0xcc>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_DMA_Abort_IT+0xce>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8086 	beq.w	80038a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2204      	movs	r2, #4
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003864 <HAL_DMA_Abort_IT+0x1a0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d04a      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003868 <HAL_DMA_Abort_IT+0x1a4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2c      	ldr	r2, [pc, #176]	@ (800386c <HAL_DMA_Abort_IT+0x1a8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d040      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003870 <HAL_DMA_Abort_IT+0x1ac>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a29      	ldr	r2, [pc, #164]	@ (8003874 <HAL_DMA_Abort_IT+0x1b0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a28      	ldr	r2, [pc, #160]	@ (8003878 <HAL_DMA_Abort_IT+0x1b4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a26      	ldr	r2, [pc, #152]	@ (800387c <HAL_DMA_Abort_IT+0x1b8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a25      	ldr	r2, [pc, #148]	@ (8003880 <HAL_DMA_Abort_IT+0x1bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a23      	ldr	r2, [pc, #140]	@ (8003884 <HAL_DMA_Abort_IT+0x1c0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a22      	ldr	r2, [pc, #136]	@ (8003888 <HAL_DMA_Abort_IT+0x1c4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a20      	ldr	r2, [pc, #128]	@ (800388c <HAL_DMA_Abort_IT+0x1c8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1f      	ldr	r2, [pc, #124]	@ (8003890 <HAL_DMA_Abort_IT+0x1cc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1d      	ldr	r2, [pc, #116]	@ (8003894 <HAL_DMA_Abort_IT+0x1d0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1c      	ldr	r2, [pc, #112]	@ (8003898 <HAL_DMA_Abort_IT+0x1d4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <HAL_DMA_Abort_IT+0x1d8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_DMA_Abort_IT+0x17c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a19      	ldr	r2, [pc, #100]	@ (80038a0 <HAL_DMA_Abort_IT+0x1dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <HAL_DMA_Abort_IT+0x18e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e178      	b.n	8003b44 <HAL_DMA_Abort_IT+0x480>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e16f      	b.n	8003b44 <HAL_DMA_Abort_IT+0x480>
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020e 	bic.w	r2, r2, #14
 80038b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6c      	ldr	r2, [pc, #432]	@ (8003a6c <HAL_DMA_Abort_IT+0x3a8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d04a      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003a70 <HAL_DMA_Abort_IT+0x3ac>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d045      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a69      	ldr	r2, [pc, #420]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d040      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a68      	ldr	r2, [pc, #416]	@ (8003a78 <HAL_DMA_Abort_IT+0x3b4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d03b      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a66      	ldr	r2, [pc, #408]	@ (8003a7c <HAL_DMA_Abort_IT+0x3b8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d036      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a65      	ldr	r2, [pc, #404]	@ (8003a80 <HAL_DMA_Abort_IT+0x3bc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d031      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a63      	ldr	r2, [pc, #396]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02c      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a62      	ldr	r2, [pc, #392]	@ (8003a88 <HAL_DMA_Abort_IT+0x3c4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d027      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a60      	ldr	r2, [pc, #384]	@ (8003a8c <HAL_DMA_Abort_IT+0x3c8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d022      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a5f      	ldr	r2, [pc, #380]	@ (8003a90 <HAL_DMA_Abort_IT+0x3cc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d01d      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5d      	ldr	r2, [pc, #372]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d018      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_DMA_Abort_IT+0x3d4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5a      	ldr	r2, [pc, #360]	@ (8003a9c <HAL_DMA_Abort_IT+0x3d8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00e      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a59      	ldr	r2, [pc, #356]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3dc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a57      	ldr	r2, [pc, #348]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_DMA_Abort_IT+0x290>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a56      	ldr	r2, [pc, #344]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3e4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <HAL_DMA_Abort_IT+0x2a2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e007      	b.n	8003976 <HAL_DMA_Abort_IT+0x2b2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a6c <HAL_DMA_Abort_IT+0x3a8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d072      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a3a      	ldr	r2, [pc, #232]	@ (8003a70 <HAL_DMA_Abort_IT+0x3ac>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d06d      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a39      	ldr	r2, [pc, #228]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d068      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a37      	ldr	r2, [pc, #220]	@ (8003a78 <HAL_DMA_Abort_IT+0x3b4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d063      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a36      	ldr	r2, [pc, #216]	@ (8003a7c <HAL_DMA_Abort_IT+0x3b8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d05e      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a34      	ldr	r2, [pc, #208]	@ (8003a80 <HAL_DMA_Abort_IT+0x3bc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d059      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a33      	ldr	r2, [pc, #204]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d054      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a31      	ldr	r2, [pc, #196]	@ (8003a88 <HAL_DMA_Abort_IT+0x3c4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d04f      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a30      	ldr	r2, [pc, #192]	@ (8003a8c <HAL_DMA_Abort_IT+0x3c8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a90 <HAL_DMA_Abort_IT+0x3cc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2d      	ldr	r2, [pc, #180]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a98 <HAL_DMA_Abort_IT+0x3d4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a9c <HAL_DMA_Abort_IT+0x3d8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a28      	ldr	r2, [pc, #160]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3dc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a25      	ldr	r2, [pc, #148]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3e4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a24      	ldr	r2, [pc, #144]	@ (8003aac <HAL_DMA_Abort_IT+0x3e8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a22      	ldr	r2, [pc, #136]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3ec>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3f0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3f4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	@ (8003abc <HAL_DMA_Abort_IT+0x3f8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3fc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac4 <HAL_DMA_Abort_IT+0x400>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x3a2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <HAL_DMA_Abort_IT+0x404>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d132      	bne.n	8003acc <HAL_DMA_Abort_IT+0x408>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e031      	b.n	8003ace <HAL_DMA_Abort_IT+0x40a>
 8003a6a:	bf00      	nop
 8003a6c:	40020010 	.word	0x40020010
 8003a70:	40020028 	.word	0x40020028
 8003a74:	40020040 	.word	0x40020040
 8003a78:	40020058 	.word	0x40020058
 8003a7c:	40020070 	.word	0x40020070
 8003a80:	40020088 	.word	0x40020088
 8003a84:	400200a0 	.word	0x400200a0
 8003a88:	400200b8 	.word	0x400200b8
 8003a8c:	40020410 	.word	0x40020410
 8003a90:	40020428 	.word	0x40020428
 8003a94:	40020440 	.word	0x40020440
 8003a98:	40020458 	.word	0x40020458
 8003a9c:	40020470 	.word	0x40020470
 8003aa0:	40020488 	.word	0x40020488
 8003aa4:	400204a0 	.word	0x400204a0
 8003aa8:	400204b8 	.word	0x400204b8
 8003aac:	58025408 	.word	0x58025408
 8003ab0:	5802541c 	.word	0x5802541c
 8003ab4:	58025430 	.word	0x58025430
 8003ab8:	58025444 	.word	0x58025444
 8003abc:	58025458 	.word	0x58025458
 8003ac0:	5802546c 	.word	0x5802546c
 8003ac4:	58025480 	.word	0x58025480
 8003ac8:	58025494 	.word	0x58025494
 8003acc:	2300      	movs	r3, #0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d028      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2201      	movs	r2, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop

08003b50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b5c:	4b67      	ldr	r3, [pc, #412]	@ (8003cfc <HAL_DMA_IRQHandler+0x1ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a67      	ldr	r2, [pc, #412]	@ (8003d00 <HAL_DMA_IRQHandler+0x1b0>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5f      	ldr	r2, [pc, #380]	@ (8003d04 <HAL_DMA_IRQHandler+0x1b4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d04a      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5d      	ldr	r2, [pc, #372]	@ (8003d08 <HAL_DMA_IRQHandler+0x1b8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d045      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a5c      	ldr	r2, [pc, #368]	@ (8003d0c <HAL_DMA_IRQHandler+0x1bc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d040      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d10 <HAL_DMA_IRQHandler+0x1c0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d03b      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a59      	ldr	r2, [pc, #356]	@ (8003d14 <HAL_DMA_IRQHandler+0x1c4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d036      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_DMA_IRQHandler+0x1c8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_DMA_IRQHandler+0x1cc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d02c      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a54      	ldr	r2, [pc, #336]	@ (8003d20 <HAL_DMA_IRQHandler+0x1d0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d027      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a53      	ldr	r2, [pc, #332]	@ (8003d24 <HAL_DMA_IRQHandler+0x1d4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d022      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a51      	ldr	r2, [pc, #324]	@ (8003d28 <HAL_DMA_IRQHandler+0x1d8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01d      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a50      	ldr	r2, [pc, #320]	@ (8003d2c <HAL_DMA_IRQHandler+0x1dc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d018      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d30 <HAL_DMA_IRQHandler+0x1e0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8003d34 <HAL_DMA_IRQHandler+0x1e4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	@ (8003d38 <HAL_DMA_IRQHandler+0x1e8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4a      	ldr	r2, [pc, #296]	@ (8003d3c <HAL_DMA_IRQHandler+0x1ec>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d004      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xd2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a48      	ldr	r2, [pc, #288]	@ (8003d40 <HAL_DMA_IRQHandler+0x1f0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_DMA_IRQHandler+0xd6>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_DMA_IRQHandler+0xd8>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 842b 	beq.w	8004484 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	2208      	movs	r2, #8
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80a2 	beq.w	8003d88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <HAL_DMA_IRQHandler+0x1b4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <HAL_DMA_IRQHandler+0x1b8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d045      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d0c <HAL_DMA_IRQHandler+0x1bc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d040      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <HAL_DMA_IRQHandler+0x1c0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d03b      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a28      	ldr	r2, [pc, #160]	@ (8003d14 <HAL_DMA_IRQHandler+0x1c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d036      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a27      	ldr	r2, [pc, #156]	@ (8003d18 <HAL_DMA_IRQHandler+0x1c8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d031      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <HAL_DMA_IRQHandler+0x1cc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d02c      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	@ (8003d20 <HAL_DMA_IRQHandler+0x1d0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d027      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <HAL_DMA_IRQHandler+0x1d4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	@ (8003d28 <HAL_DMA_IRQHandler+0x1d8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	@ (8003d2c <HAL_DMA_IRQHandler+0x1dc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d30 <HAL_DMA_IRQHandler+0x1e0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_DMA_IRQHandler+0x1e4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	@ (8003d38 <HAL_DMA_IRQHandler+0x1e8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	@ (8003d3c <HAL_DMA_IRQHandler+0x1ec>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x194>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a18      	ldr	r2, [pc, #96]	@ (8003d40 <HAL_DMA_IRQHandler+0x1f0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d12f      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x1f4>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e02e      	b.n	8003d58 <HAL_DMA_IRQHandler+0x208>
 8003cfa:	bf00      	nop
 8003cfc:	24000000 	.word	0x24000000
 8003d00:	1b4e81b5 	.word	0x1b4e81b5
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0204 	bic.w	r2, r2, #4
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2208      	movs	r2, #8
 8003d76:	409a      	lsls	r2, r3
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06e      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a69      	ldr	r2, [pc, #420]	@ (8003f48 <HAL_DMA_IRQHandler+0x3f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d04a      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a67      	ldr	r2, [pc, #412]	@ (8003f4c <HAL_DMA_IRQHandler+0x3fc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d045      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a66      	ldr	r2, [pc, #408]	@ (8003f50 <HAL_DMA_IRQHandler+0x400>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d040      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a64      	ldr	r2, [pc, #400]	@ (8003f54 <HAL_DMA_IRQHandler+0x404>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d03b      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a63      	ldr	r2, [pc, #396]	@ (8003f58 <HAL_DMA_IRQHandler+0x408>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d036      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a61      	ldr	r2, [pc, #388]	@ (8003f5c <HAL_DMA_IRQHandler+0x40c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d031      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a60      	ldr	r2, [pc, #384]	@ (8003f60 <HAL_DMA_IRQHandler+0x410>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d02c      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f64 <HAL_DMA_IRQHandler+0x414>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d027      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5d      	ldr	r2, [pc, #372]	@ (8003f68 <HAL_DMA_IRQHandler+0x418>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5b      	ldr	r2, [pc, #364]	@ (8003f6c <HAL_DMA_IRQHandler+0x41c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5a      	ldr	r2, [pc, #360]	@ (8003f70 <HAL_DMA_IRQHandler+0x420>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a58      	ldr	r2, [pc, #352]	@ (8003f74 <HAL_DMA_IRQHandler+0x424>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a57      	ldr	r2, [pc, #348]	@ (8003f78 <HAL_DMA_IRQHandler+0x428>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a55      	ldr	r2, [pc, #340]	@ (8003f7c <HAL_DMA_IRQHandler+0x42c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a54      	ldr	r2, [pc, #336]	@ (8003f80 <HAL_DMA_IRQHandler+0x430>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2ee>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a52      	ldr	r2, [pc, #328]	@ (8003f84 <HAL_DMA_IRQHandler+0x434>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10a      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x304>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e003      	b.n	8003e5c <HAL_DMA_IRQHandler+0x30c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2201      	movs	r2, #1
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	f043 0202 	orr.w	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2204      	movs	r2, #4
 8003e86:	409a      	lsls	r2, r3
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 808f 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2c      	ldr	r2, [pc, #176]	@ (8003f48 <HAL_DMA_IRQHandler+0x3f8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d04a      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f4c <HAL_DMA_IRQHandler+0x3fc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d045      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a29      	ldr	r2, [pc, #164]	@ (8003f50 <HAL_DMA_IRQHandler+0x400>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d040      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a27      	ldr	r2, [pc, #156]	@ (8003f54 <HAL_DMA_IRQHandler+0x404>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d03b      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <HAL_DMA_IRQHandler+0x408>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d036      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a24      	ldr	r2, [pc, #144]	@ (8003f5c <HAL_DMA_IRQHandler+0x40c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <HAL_DMA_IRQHandler+0x410>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d02c      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <HAL_DMA_IRQHandler+0x414>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d027      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a20      	ldr	r2, [pc, #128]	@ (8003f68 <HAL_DMA_IRQHandler+0x418>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f6c <HAL_DMA_IRQHandler+0x41c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01d      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_DMA_IRQHandler+0x420>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d018      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1b      	ldr	r2, [pc, #108]	@ (8003f74 <HAL_DMA_IRQHandler+0x424>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f78 <HAL_DMA_IRQHandler+0x428>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <HAL_DMA_IRQHandler+0x42c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_DMA_IRQHandler+0x430>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x3e2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <HAL_DMA_IRQHandler+0x434>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d12a      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x438>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e023      	b.n	8003f90 <HAL_DMA_IRQHandler+0x440>
 8003f48:	40020010 	.word	0x40020010
 8003f4c:	40020028 	.word	0x40020028
 8003f50:	40020040 	.word	0x40020040
 8003f54:	40020058 	.word	0x40020058
 8003f58:	40020070 	.word	0x40020070
 8003f5c:	40020088 	.word	0x40020088
 8003f60:	400200a0 	.word	0x400200a0
 8003f64:	400200b8 	.word	0x400200b8
 8003f68:	40020410 	.word	0x40020410
 8003f6c:	40020428 	.word	0x40020428
 8003f70:	40020440 	.word	0x40020440
 8003f74:	40020458 	.word	0x40020458
 8003f78:	40020470 	.word	0x40020470
 8003f7c:	40020488 	.word	0x40020488
 8003f80:	400204a0 	.word	0x400204a0
 8003f84:	400204b8 	.word	0x400204b8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2210      	movs	r2, #16
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a6 	beq.w	8004112 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a85      	ldr	r2, [pc, #532]	@ (80041e0 <HAL_DMA_IRQHandler+0x690>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d04a      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a83      	ldr	r2, [pc, #524]	@ (80041e4 <HAL_DMA_IRQHandler+0x694>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d045      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a82      	ldr	r2, [pc, #520]	@ (80041e8 <HAL_DMA_IRQHandler+0x698>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d040      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a80      	ldr	r2, [pc, #512]	@ (80041ec <HAL_DMA_IRQHandler+0x69c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d03b      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80041f0 <HAL_DMA_IRQHandler+0x6a0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d036      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80041f4 <HAL_DMA_IRQHandler+0x6a4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d031      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a7c      	ldr	r2, [pc, #496]	@ (80041f8 <HAL_DMA_IRQHandler+0x6a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d02c      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7a      	ldr	r2, [pc, #488]	@ (80041fc <HAL_DMA_IRQHandler+0x6ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d027      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a79      	ldr	r2, [pc, #484]	@ (8004200 <HAL_DMA_IRQHandler+0x6b0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a77      	ldr	r2, [pc, #476]	@ (8004204 <HAL_DMA_IRQHandler+0x6b4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01d      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a76      	ldr	r2, [pc, #472]	@ (8004208 <HAL_DMA_IRQHandler+0x6b8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a74      	ldr	r2, [pc, #464]	@ (800420c <HAL_DMA_IRQHandler+0x6bc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a73      	ldr	r2, [pc, #460]	@ (8004210 <HAL_DMA_IRQHandler+0x6c0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a71      	ldr	r2, [pc, #452]	@ (8004214 <HAL_DMA_IRQHandler+0x6c4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a70      	ldr	r2, [pc, #448]	@ (8004218 <HAL_DMA_IRQHandler+0x6c8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_DMA_IRQHandler+0x516>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6e      	ldr	r2, [pc, #440]	@ (800421c <HAL_DMA_IRQHandler+0x6cc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10a      	bne.n	800407c <HAL_DMA_IRQHandler+0x52c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e009      	b.n	8004090 <HAL_DMA_IRQHandler+0x540>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03e      	beq.n	8004112 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2210      	movs	r2, #16
 800409e:	409a      	lsls	r2, r3
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d024      	beq.n	8004112 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
 80040d0:	e01f      	b.n	8004112 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01b      	beq.n	8004112 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
 80040e2:	e016      	b.n	8004112 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0208 	bic.w	r2, r2, #8
 8004100:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2220      	movs	r2, #32
 800411c:	409a      	lsls	r2, r3
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8110 	beq.w	8004348 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2c      	ldr	r2, [pc, #176]	@ (80041e0 <HAL_DMA_IRQHandler+0x690>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04a      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <HAL_DMA_IRQHandler+0x694>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d045      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a29      	ldr	r2, [pc, #164]	@ (80041e8 <HAL_DMA_IRQHandler+0x698>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d040      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <HAL_DMA_IRQHandler+0x69c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d03b      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <HAL_DMA_IRQHandler+0x6a0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d036      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <HAL_DMA_IRQHandler+0x6a4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d031      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	@ (80041f8 <HAL_DMA_IRQHandler+0x6a8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <HAL_DMA_IRQHandler+0x6ac>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d027      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <HAL_DMA_IRQHandler+0x6b0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <HAL_DMA_IRQHandler+0x6b4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01d      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1d      	ldr	r2, [pc, #116]	@ (8004208 <HAL_DMA_IRQHandler+0x6b8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <HAL_DMA_IRQHandler+0x6bc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004210 <HAL_DMA_IRQHandler+0x6c0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_DMA_IRQHandler+0x6c4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	@ (8004218 <HAL_DMA_IRQHandler+0x6c8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x678>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_DMA_IRQHandler+0x6cc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d12b      	bne.n	8004220 <HAL_DMA_IRQHandler+0x6d0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e02a      	b.n	8004234 <HAL_DMA_IRQHandler+0x6e4>
 80041de:	bf00      	nop
 80041e0:	40020010 	.word	0x40020010
 80041e4:	40020028 	.word	0x40020028
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40020058 	.word	0x40020058
 80041f0:	40020070 	.word	0x40020070
 80041f4:	40020088 	.word	0x40020088
 80041f8:	400200a0 	.word	0x400200a0
 80041fc:	400200b8 	.word	0x400200b8
 8004200:	40020410 	.word	0x40020410
 8004204:	40020428 	.word	0x40020428
 8004208:	40020440 	.word	0x40020440
 800420c:	40020458 	.word	0x40020458
 8004210:	40020470 	.word	0x40020470
 8004214:	40020488 	.word	0x40020488
 8004218:	400204a0 	.word	0x400204a0
 800421c:	400204b8 	.word	0x400204b8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8087 	beq.w	8004348 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	2220      	movs	r2, #32
 8004244:	409a      	lsls	r2, r3
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b04      	cmp	r3, #4
 8004254:	d139      	bne.n	80042ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0216 	bic.w	r2, r2, #22
 8004264:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004274:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <HAL_DMA_IRQHandler+0x736>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	223f      	movs	r2, #63	@ 0x3f
 80042a0:	409a      	lsls	r2, r3
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 834a 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
          }
          return;
 80042c8:	e344      	b.n	8004954 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d018      	beq.n	800430a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02c      	beq.n	8004348 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
 80042f6:	e027      	b.n	8004348 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d023      	beq.n	8004348 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
 8004308:	e01e      	b.n	8004348 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0210 	bic.w	r2, r2, #16
 8004326:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8306 	beq.w	800495e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8088 	beq.w	8004470 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2204      	movs	r2, #4
 8004364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7a      	ldr	r2, [pc, #488]	@ (8004558 <HAL_DMA_IRQHandler+0xa08>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d04a      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a79      	ldr	r2, [pc, #484]	@ (800455c <HAL_DMA_IRQHandler+0xa0c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d045      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a77      	ldr	r2, [pc, #476]	@ (8004560 <HAL_DMA_IRQHandler+0xa10>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d040      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a76      	ldr	r2, [pc, #472]	@ (8004564 <HAL_DMA_IRQHandler+0xa14>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d03b      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a74      	ldr	r2, [pc, #464]	@ (8004568 <HAL_DMA_IRQHandler+0xa18>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d036      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a73      	ldr	r2, [pc, #460]	@ (800456c <HAL_DMA_IRQHandler+0xa1c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d031      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a71      	ldr	r2, [pc, #452]	@ (8004570 <HAL_DMA_IRQHandler+0xa20>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02c      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	@ (8004574 <HAL_DMA_IRQHandler+0xa24>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d027      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004578 <HAL_DMA_IRQHandler+0xa28>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6d      	ldr	r2, [pc, #436]	@ (800457c <HAL_DMA_IRQHandler+0xa2c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d01d      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004580 <HAL_DMA_IRQHandler+0xa30>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6a      	ldr	r2, [pc, #424]	@ (8004584 <HAL_DMA_IRQHandler+0xa34>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a68      	ldr	r2, [pc, #416]	@ (8004588 <HAL_DMA_IRQHandler+0xa38>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a67      	ldr	r2, [pc, #412]	@ (800458c <HAL_DMA_IRQHandler+0xa3c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_DMA_IRQHandler+0xa40>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_DMA_IRQHandler+0x8b8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	@ (8004594 <HAL_DMA_IRQHandler+0xa44>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d108      	bne.n	800441a <HAL_DMA_IRQHandler+0x8ca>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e007      	b.n	800442a <HAL_DMA_IRQHandler+0x8da>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004432:	429a      	cmp	r2, r3
 8004434:	d307      	bcc.n	8004446 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f2      	bne.n	800442a <HAL_DMA_IRQHandler+0x8da>
 8004444:	e000      	b.n	8004448 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004446:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800445e:	e003      	b.n	8004468 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8272 	beq.w	800495e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
 8004482:	e26c      	b.n	800495e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a43      	ldr	r2, [pc, #268]	@ (8004598 <HAL_DMA_IRQHandler+0xa48>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a42      	ldr	r2, [pc, #264]	@ (800459c <HAL_DMA_IRQHandler+0xa4c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01d      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a40      	ldr	r2, [pc, #256]	@ (80045a0 <HAL_DMA_IRQHandler+0xa50>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3f      	ldr	r2, [pc, #252]	@ (80045a4 <HAL_DMA_IRQHandler+0xa54>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3d      	ldr	r2, [pc, #244]	@ (80045a8 <HAL_DMA_IRQHandler+0xa58>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3c      	ldr	r2, [pc, #240]	@ (80045ac <HAL_DMA_IRQHandler+0xa5c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3a      	ldr	r2, [pc, #232]	@ (80045b0 <HAL_DMA_IRQHandler+0xa60>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x984>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a39      	ldr	r2, [pc, #228]	@ (80045b4 <HAL_DMA_IRQHandler+0xa64>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x988>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_DMA_IRQHandler+0x98a>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 823f 	beq.w	800495e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2204      	movs	r2, #4
 80044f2:	409a      	lsls	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80cd 	beq.w	8004698 <HAL_DMA_IRQHandler+0xb48>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80c7 	beq.w	8004698 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2204      	movs	r2, #4
 8004514:	409a      	lsls	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d049      	beq.n	80045b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8210 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004540:	e20a      	b.n	8004958 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8206 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004554:	e200      	b.n	8004958 <HAL_DMA_IRQHandler+0xe08>
 8004556:	bf00      	nop
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
 8004598:	58025408 	.word	0x58025408
 800459c:	5802541c 	.word	0x5802541c
 80045a0:	58025430 	.word	0x58025430
 80045a4:	58025444 	.word	0x58025444
 80045a8:	58025458 	.word	0x58025458
 80045ac:	5802546c 	.word	0x5802546c
 80045b0:	58025480 	.word	0x58025480
 80045b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d160      	bne.n	8004684 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7f      	ldr	r2, [pc, #508]	@ (80047c4 <HAL_DMA_IRQHandler+0xc74>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a7d      	ldr	r2, [pc, #500]	@ (80047c8 <HAL_DMA_IRQHandler+0xc78>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7c      	ldr	r2, [pc, #496]	@ (80047cc <HAL_DMA_IRQHandler+0xc7c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a7a      	ldr	r2, [pc, #488]	@ (80047d0 <HAL_DMA_IRQHandler+0xc80>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a79      	ldr	r2, [pc, #484]	@ (80047d4 <HAL_DMA_IRQHandler+0xc84>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a77      	ldr	r2, [pc, #476]	@ (80047d8 <HAL_DMA_IRQHandler+0xc88>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a76      	ldr	r2, [pc, #472]	@ (80047dc <HAL_DMA_IRQHandler+0xc8c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a74      	ldr	r2, [pc, #464]	@ (80047e0 <HAL_DMA_IRQHandler+0xc90>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a73      	ldr	r2, [pc, #460]	@ (80047e4 <HAL_DMA_IRQHandler+0xc94>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a71      	ldr	r2, [pc, #452]	@ (80047e8 <HAL_DMA_IRQHandler+0xc98>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a70      	ldr	r2, [pc, #448]	@ (80047ec <HAL_DMA_IRQHandler+0xc9c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6e      	ldr	r2, [pc, #440]	@ (80047f0 <HAL_DMA_IRQHandler+0xca0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6d      	ldr	r2, [pc, #436]	@ (80047f4 <HAL_DMA_IRQHandler+0xca4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6b      	ldr	r2, [pc, #428]	@ (80047f8 <HAL_DMA_IRQHandler+0xca8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6a      	ldr	r2, [pc, #424]	@ (80047fc <HAL_DMA_IRQHandler+0xcac>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_DMA_IRQHandler+0xb12>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a68      	ldr	r2, [pc, #416]	@ (8004800 <HAL_DMA_IRQHandler+0xcb0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <HAL_DMA_IRQHandler+0xb24>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0208 	bic.w	r2, r2, #8
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e007      	b.n	8004684 <HAL_DMA_IRQHandler+0xb34>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0204 	bic.w	r2, r2, #4
 8004682:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8165 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004696:	e15f      	b.n	8004958 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2202      	movs	r2, #2
 80046a2:	409a      	lsls	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80c5 	beq.w	8004838 <HAL_DMA_IRQHandler+0xce8>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80bf 	beq.w	8004838 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2202      	movs	r2, #2
 80046c4:	409a      	lsls	r2, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 813a 	beq.w	800495c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f0:	e134      	b.n	800495c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8130 	beq.w	800495c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004704:	e12a      	b.n	800495c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	f040 8089 	bne.w	8004824 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <HAL_DMA_IRQHandler+0xc74>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d04a      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a29      	ldr	r2, [pc, #164]	@ (80047c8 <HAL_DMA_IRQHandler+0xc78>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d045      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a28      	ldr	r2, [pc, #160]	@ (80047cc <HAL_DMA_IRQHandler+0xc7c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d040      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a26      	ldr	r2, [pc, #152]	@ (80047d0 <HAL_DMA_IRQHandler+0xc80>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d03b      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a25      	ldr	r2, [pc, #148]	@ (80047d4 <HAL_DMA_IRQHandler+0xc84>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d036      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	@ (80047d8 <HAL_DMA_IRQHandler+0xc88>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d031      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <HAL_DMA_IRQHandler+0xc8c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d02c      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a20      	ldr	r2, [pc, #128]	@ (80047e0 <HAL_DMA_IRQHandler+0xc90>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1f      	ldr	r2, [pc, #124]	@ (80047e4 <HAL_DMA_IRQHandler+0xc94>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <HAL_DMA_IRQHandler+0xc98>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01d      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_DMA_IRQHandler+0xc9c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_DMA_IRQHandler+0xca0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_DMA_IRQHandler+0xca4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <HAL_DMA_IRQHandler+0xca8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a16      	ldr	r2, [pc, #88]	@ (80047fc <HAL_DMA_IRQHandler+0xcac>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xc62>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <HAL_DMA_IRQHandler+0xcb0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d128      	bne.n	8004804 <HAL_DMA_IRQHandler+0xcb4>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0214 	bic.w	r2, r2, #20
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e027      	b.n	8004814 <HAL_DMA_IRQHandler+0xcc4>
 80047c4:	40020010 	.word	0x40020010
 80047c8:	40020028 	.word	0x40020028
 80047cc:	40020040 	.word	0x40020040
 80047d0:	40020058 	.word	0x40020058
 80047d4:	40020070 	.word	0x40020070
 80047d8:	40020088 	.word	0x40020088
 80047dc:	400200a0 	.word	0x400200a0
 80047e0:	400200b8 	.word	0x400200b8
 80047e4:	40020410 	.word	0x40020410
 80047e8:	40020428 	.word	0x40020428
 80047ec:	40020440 	.word	0x40020440
 80047f0:	40020458 	.word	0x40020458
 80047f4:	40020470 	.word	0x40020470
 80047f8:	40020488 	.word	0x40020488
 80047fc:	400204a0 	.word	0x400204a0
 8004800:	400204b8 	.word	0x400204b8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 020a 	bic.w	r2, r2, #10
 8004812:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8097 	beq.w	800495c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004836:	e091      	b.n	800495c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2208      	movs	r2, #8
 8004842:	409a      	lsls	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8088 	beq.w	800495e <HAL_DMA_IRQHandler+0xe0e>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8082 	beq.w	800495e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a41      	ldr	r2, [pc, #260]	@ (8004964 <HAL_DMA_IRQHandler+0xe14>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04a      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3f      	ldr	r2, [pc, #252]	@ (8004968 <HAL_DMA_IRQHandler+0xe18>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d045      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3e      	ldr	r2, [pc, #248]	@ (800496c <HAL_DMA_IRQHandler+0xe1c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3c      	ldr	r2, [pc, #240]	@ (8004970 <HAL_DMA_IRQHandler+0xe20>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03b      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3b      	ldr	r2, [pc, #236]	@ (8004974 <HAL_DMA_IRQHandler+0xe24>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d036      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a39      	ldr	r2, [pc, #228]	@ (8004978 <HAL_DMA_IRQHandler+0xe28>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a38      	ldr	r2, [pc, #224]	@ (800497c <HAL_DMA_IRQHandler+0xe2c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d02c      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a36      	ldr	r2, [pc, #216]	@ (8004980 <HAL_DMA_IRQHandler+0xe30>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a35      	ldr	r2, [pc, #212]	@ (8004984 <HAL_DMA_IRQHandler+0xe34>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a33      	ldr	r2, [pc, #204]	@ (8004988 <HAL_DMA_IRQHandler+0xe38>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a32      	ldr	r2, [pc, #200]	@ (800498c <HAL_DMA_IRQHandler+0xe3c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	@ (8004990 <HAL_DMA_IRQHandler+0xe40>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004994 <HAL_DMA_IRQHandler+0xe44>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004998 <HAL_DMA_IRQHandler+0xe48>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <HAL_DMA_IRQHandler+0xe4c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_IRQHandler+0xdaa>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	@ (80049a0 <HAL_DMA_IRQHandler+0xe50>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d108      	bne.n	800490c <HAL_DMA_IRQHandler+0xdbc>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 021c 	bic.w	r2, r2, #28
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e007      	b.n	800491c <HAL_DMA_IRQHandler+0xdcc>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 020e 	bic.w	r2, r2, #14
 800491a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2201      	movs	r2, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
 8004952:	e004      	b.n	800495e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800495c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800495e:	3728      	adds	r7, #40	@ 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40020010 	.word	0x40020010
 8004968:	40020028 	.word	0x40020028
 800496c:	40020040 	.word	0x40020040
 8004970:	40020058 	.word	0x40020058
 8004974:	40020070 	.word	0x40020070
 8004978:	40020088 	.word	0x40020088
 800497c:	400200a0 	.word	0x400200a0
 8004980:	400200b8 	.word	0x400200b8
 8004984:	40020410 	.word	0x40020410
 8004988:	40020428 	.word	0x40020428
 800498c:	40020440 	.word	0x40020440
 8004990:	40020458 	.word	0x40020458
 8004994:	40020470 	.word	0x40020470
 8004998:	40020488 	.word	0x40020488
 800499c:	400204a0 	.word	0x400204a0
 80049a0:	400204b8 	.word	0x400204b8

080049a4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	460b      	mov	r3, r1
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e045      	b.n	8004a4c <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_DMA_RegisterCallback+0x2a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e03e      	b.n	8004a4c <HAL_DMA_RegisterCallback+0xa8>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d12d      	bne.n	8004a3e <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d827      	bhi.n	8004a38 <HAL_DMA_RegisterCallback+0x94>
 80049e8:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <HAL_DMA_RegisterCallback+0x4c>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a09 	.word	0x08004a09
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8004a0e:	e018      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004a16:	e014      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8004a1e:	e010      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8004a26:	e00c      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8004a2e:	e008      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a36:	e004      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3c:	e001      	b.n	8004a42 <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7f      	ldr	r2, [pc, #508]	@ (8004c8c <DMA_SetConfig+0x21c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d072      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7d      	ldr	r2, [pc, #500]	@ (8004c90 <DMA_SetConfig+0x220>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d06d      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8004c94 <DMA_SetConfig+0x224>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d068      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a7a      	ldr	r2, [pc, #488]	@ (8004c98 <DMA_SetConfig+0x228>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d063      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a79      	ldr	r2, [pc, #484]	@ (8004c9c <DMA_SetConfig+0x22c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d05e      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a77      	ldr	r2, [pc, #476]	@ (8004ca0 <DMA_SetConfig+0x230>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d059      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a76      	ldr	r2, [pc, #472]	@ (8004ca4 <DMA_SetConfig+0x234>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d054      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a74      	ldr	r2, [pc, #464]	@ (8004ca8 <DMA_SetConfig+0x238>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d04f      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a73      	ldr	r2, [pc, #460]	@ (8004cac <DMA_SetConfig+0x23c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d04a      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a71      	ldr	r2, [pc, #452]	@ (8004cb0 <DMA_SetConfig+0x240>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d045      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a70      	ldr	r2, [pc, #448]	@ (8004cb4 <DMA_SetConfig+0x244>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d040      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb8 <DMA_SetConfig+0x248>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d03b      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6d      	ldr	r2, [pc, #436]	@ (8004cbc <DMA_SetConfig+0x24c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d036      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6b      	ldr	r2, [pc, #428]	@ (8004cc0 <DMA_SetConfig+0x250>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d031      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8004cc4 <DMA_SetConfig+0x254>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d02c      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a68      	ldr	r2, [pc, #416]	@ (8004cc8 <DMA_SetConfig+0x258>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d027      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a67      	ldr	r2, [pc, #412]	@ (8004ccc <DMA_SetConfig+0x25c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d022      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a65      	ldr	r2, [pc, #404]	@ (8004cd0 <DMA_SetConfig+0x260>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01d      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a64      	ldr	r2, [pc, #400]	@ (8004cd4 <DMA_SetConfig+0x264>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d018      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a62      	ldr	r2, [pc, #392]	@ (8004cd8 <DMA_SetConfig+0x268>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a61      	ldr	r2, [pc, #388]	@ (8004cdc <DMA_SetConfig+0x26c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5f      	ldr	r2, [pc, #380]	@ (8004ce0 <DMA_SetConfig+0x270>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d009      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ce4 <DMA_SetConfig+0x274>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <DMA_SetConfig+0x10a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a5c      	ldr	r2, [pc, #368]	@ (8004ce8 <DMA_SetConfig+0x278>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <DMA_SetConfig+0x10e>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <DMA_SetConfig+0x110>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a39      	ldr	r2, [pc, #228]	@ (8004c8c <DMA_SetConfig+0x21c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d04a      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a38      	ldr	r2, [pc, #224]	@ (8004c90 <DMA_SetConfig+0x220>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d045      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a36      	ldr	r2, [pc, #216]	@ (8004c94 <DMA_SetConfig+0x224>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d040      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a35      	ldr	r2, [pc, #212]	@ (8004c98 <DMA_SetConfig+0x228>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d03b      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a33      	ldr	r2, [pc, #204]	@ (8004c9c <DMA_SetConfig+0x22c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d036      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a32      	ldr	r2, [pc, #200]	@ (8004ca0 <DMA_SetConfig+0x230>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d031      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a30      	ldr	r2, [pc, #192]	@ (8004ca4 <DMA_SetConfig+0x234>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02c      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca8 <DMA_SetConfig+0x238>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d027      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004cac <DMA_SetConfig+0x23c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d022      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb0 <DMA_SetConfig+0x240>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01d      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb4 <DMA_SetConfig+0x244>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d018      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a29      	ldr	r2, [pc, #164]	@ (8004cb8 <DMA_SetConfig+0x248>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a27      	ldr	r2, [pc, #156]	@ (8004cbc <DMA_SetConfig+0x24c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a26      	ldr	r2, [pc, #152]	@ (8004cc0 <DMA_SetConfig+0x250>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a24      	ldr	r2, [pc, #144]	@ (8004cc4 <DMA_SetConfig+0x254>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <DMA_SetConfig+0x1d0>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a23      	ldr	r2, [pc, #140]	@ (8004cc8 <DMA_SetConfig+0x258>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d101      	bne.n	8004c44 <DMA_SetConfig+0x1d4>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <DMA_SetConfig+0x1d6>
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d059      	beq.n	8004cfe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	223f      	movs	r2, #63	@ 0x3f
 8004c54:	409a      	lsls	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d138      	bne.n	8004cec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c8a:	e086      	b.n	8004d9a <DMA_SetConfig+0x32a>
 8004c8c:	40020010 	.word	0x40020010
 8004c90:	40020028 	.word	0x40020028
 8004c94:	40020040 	.word	0x40020040
 8004c98:	40020058 	.word	0x40020058
 8004c9c:	40020070 	.word	0x40020070
 8004ca0:	40020088 	.word	0x40020088
 8004ca4:	400200a0 	.word	0x400200a0
 8004ca8:	400200b8 	.word	0x400200b8
 8004cac:	40020410 	.word	0x40020410
 8004cb0:	40020428 	.word	0x40020428
 8004cb4:	40020440 	.word	0x40020440
 8004cb8:	40020458 	.word	0x40020458
 8004cbc:	40020470 	.word	0x40020470
 8004cc0:	40020488 	.word	0x40020488
 8004cc4:	400204a0 	.word	0x400204a0
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	58025408 	.word	0x58025408
 8004cd0:	5802541c 	.word	0x5802541c
 8004cd4:	58025430 	.word	0x58025430
 8004cd8:	58025444 	.word	0x58025444
 8004cdc:	58025458 	.word	0x58025458
 8004ce0:	5802546c 	.word	0x5802546c
 8004ce4:	58025480 	.word	0x58025480
 8004ce8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
}
 8004cfc:	e04d      	b.n	8004d9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a29      	ldr	r2, [pc, #164]	@ (8004da8 <DMA_SetConfig+0x338>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d022      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a27      	ldr	r2, [pc, #156]	@ (8004dac <DMA_SetConfig+0x33c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01d      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a26      	ldr	r2, [pc, #152]	@ (8004db0 <DMA_SetConfig+0x340>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d018      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a24      	ldr	r2, [pc, #144]	@ (8004db4 <DMA_SetConfig+0x344>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a23      	ldr	r2, [pc, #140]	@ (8004db8 <DMA_SetConfig+0x348>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a21      	ldr	r2, [pc, #132]	@ (8004dbc <DMA_SetConfig+0x34c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a20      	ldr	r2, [pc, #128]	@ (8004dc0 <DMA_SetConfig+0x350>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <DMA_SetConfig+0x2de>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc4 <DMA_SetConfig+0x354>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <DMA_SetConfig+0x2e2>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <DMA_SetConfig+0x2e4>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d108      	bne.n	8004d8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	60da      	str	r2, [r3, #12]
}
 8004d88:	e007      	b.n	8004d9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	58025408 	.word	0x58025408
 8004dac:	5802541c 	.word	0x5802541c
 8004db0:	58025430 	.word	0x58025430
 8004db4:	58025444 	.word	0x58025444
 8004db8:	58025458 	.word	0x58025458
 8004dbc:	5802546c 	.word	0x5802546c
 8004dc0:	58025480 	.word	0x58025480
 8004dc4:	58025494 	.word	0x58025494

08004dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a42      	ldr	r2, [pc, #264]	@ (8004ee0 <DMA_CalcBaseAndBitshift+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d04a      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a41      	ldr	r2, [pc, #260]	@ (8004ee4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d045      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee8 <DMA_CalcBaseAndBitshift+0x120>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d040      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3e      	ldr	r2, [pc, #248]	@ (8004eec <DMA_CalcBaseAndBitshift+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d03b      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef0 <DMA_CalcBaseAndBitshift+0x128>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d036      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d031      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a39      	ldr	r2, [pc, #228]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x130>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02c      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a38      	ldr	r2, [pc, #224]	@ (8004efc <DMA_CalcBaseAndBitshift+0x134>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d027      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a36      	ldr	r2, [pc, #216]	@ (8004f00 <DMA_CalcBaseAndBitshift+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d022      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a35      	ldr	r2, [pc, #212]	@ (8004f04 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d01d      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a33      	ldr	r2, [pc, #204]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x140>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a32      	ldr	r2, [pc, #200]	@ (8004f0c <DMA_CalcBaseAndBitshift+0x144>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x148>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <DMA_CalcBaseAndBitshift+0x150>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <DMA_CalcBaseAndBitshift+0x154>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <DMA_CalcBaseAndBitshift+0xac>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <DMA_CalcBaseAndBitshift+0xae>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d024      	beq.n	8004ec4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3b10      	subs	r3, #16
 8004e82:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <DMA_CalcBaseAndBitshift+0x158>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d908      	bls.n	8004eb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x160>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004eb2:	e00d      	b.n	8004ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x160>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ec2:	e005      	b.n	8004ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020088 	.word	0x40020088
 8004ef8:	400200a0 	.word	0x400200a0
 8004efc:	400200b8 	.word	0x400200b8
 8004f00:	40020410 	.word	0x40020410
 8004f04:	40020428 	.word	0x40020428
 8004f08:	40020440 	.word	0x40020440
 8004f0c:	40020458 	.word	0x40020458
 8004f10:	40020470 	.word	0x40020470
 8004f14:	40020488 	.word	0x40020488
 8004f18:	400204a0 	.word	0x400204a0
 8004f1c:	400204b8 	.word	0x400204b8
 8004f20:	aaaaaaab 	.word	0xaaaaaaab
 8004f24:	08024cc8 	.word	0x08024cc8
 8004f28:	fffffc00 	.word	0xfffffc00

08004f2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d120      	bne.n	8004f82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d858      	bhi.n	8004ffa <DMA_CheckFifoParam+0xce>
 8004f48:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <DMA_CheckFifoParam+0x24>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f73 	.word	0x08004f73
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	08004ffb 	.word	0x08004ffb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d048      	beq.n	8004ffe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f70:	e045      	b.n	8004ffe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f7a:	d142      	bne.n	8005002 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f80:	e03f      	b.n	8005002 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8a:	d123      	bne.n	8004fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d838      	bhi.n	8005006 <DMA_CheckFifoParam+0xda>
 8004f94:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <DMA_CheckFifoParam+0x70>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fb3 	.word	0x08004fb3
 8004fa4:	08004fad 	.word	0x08004fad
 8004fa8:	08004fc5 	.word	0x08004fc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb0:	e030      	b.n	8005014 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d025      	beq.n	800500a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc2:	e022      	b.n	800500a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fcc:	d11f      	bne.n	800500e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fd2:	e01c      	b.n	800500e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d902      	bls.n	8004fe2 <DMA_CheckFifoParam+0xb6>
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d003      	beq.n	8004fe8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fe0:	e018      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe6:	e015      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ff8:	e00b      	b.n	8005012 <DMA_CheckFifoParam+0xe6>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e00a      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 8004ffe:	bf00      	nop
 8005000:	e008      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 8005002:	bf00      	nop
 8005004:	e006      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 8005006:	bf00      	nop
 8005008:	e004      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
    break;
 8005012:	bf00      	nop
    }
  }

  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop

08005024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a36      	ldr	r2, [pc, #216]	@ (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a35      	ldr	r2, [pc, #212]	@ (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a33      	ldr	r2, [pc, #204]	@ (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a32      	ldr	r2, [pc, #200]	@ (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a30      	ldr	r2, [pc, #192]	@ (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2f      	ldr	r2, [pc, #188]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2d      	ldr	r2, [pc, #180]	@ (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d101      	bne.n	8005086 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01a      	beq.n	80050c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	3b08      	subs	r3, #8
 8005094:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4b26      	ldr	r3, [pc, #152]	@ (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	461a      	mov	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a24      	ldr	r2, [pc, #144]	@ (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2201      	movs	r2, #1
 80050ba:	409a      	lsls	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050c0:	e024      	b.n	800510c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3b10      	subs	r3, #16
 80050ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d806      	bhi.n	80050ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a1b      	ldr	r2, [pc, #108]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d902      	bls.n	80050ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3308      	adds	r3, #8
 80050e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4b18      	ldr	r3, [pc, #96]	@ (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a16      	ldr	r2, [pc, #88]	@ (8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	58025408 	.word	0x58025408
 800511c:	5802541c 	.word	0x5802541c
 8005120:	58025430 	.word	0x58025430
 8005124:	58025444 	.word	0x58025444
 8005128:	58025458 	.word	0x58025458
 800512c:	5802546c 	.word	0x5802546c
 8005130:	58025480 	.word	0x58025480
 8005134:	58025494 	.word	0x58025494
 8005138:	cccccccd 	.word	0xcccccccd
 800513c:	16009600 	.word	0x16009600
 8005140:	58025880 	.word	0x58025880
 8005144:	aaaaaaab 	.word	0xaaaaaaab
 8005148:	400204b8 	.word	0x400204b8
 800514c:	4002040f 	.word	0x4002040f
 8005150:	10008200 	.word	0x10008200
 8005154:	40020880 	.word	0x40020880

08005158 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04a      	beq.n	8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d847      	bhi.n	8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a25      	ldr	r2, [pc, #148]	@ (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a24      	ldr	r2, [pc, #144]	@ (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d01d      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	@ (8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a21      	ldr	r2, [pc, #132]	@ (800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d101      	bne.n	80051c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051c8:	2300      	movs	r3, #0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4b17      	ldr	r3, [pc, #92]	@ (8005230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80051e2:	e009      	b.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a11      	ldr	r2, [pc, #68]	@ (800523c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	58025408 	.word	0x58025408
 8005214:	5802541c 	.word	0x5802541c
 8005218:	58025430 	.word	0x58025430
 800521c:	58025444 	.word	0x58025444
 8005220:	58025458 	.word	0x58025458
 8005224:	5802546c 	.word	0x5802546c
 8005228:	58025480 	.word	0x58025480
 800522c:	58025494 	.word	0x58025494
 8005230:	1600963f 	.word	0x1600963f
 8005234:	58025940 	.word	0x58025940
 8005238:	1000823f 	.word	0x1000823f
 800523c:	40020940 	.word	0x40020940

08005240 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b098      	sub	sp, #96	@ 0x60
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005248:	4a84      	ldr	r2, [pc, #528]	@ (800545c <HAL_FDCAN_Init+0x21c>)
 800524a:	f107 030c 	add.w	r3, r7, #12
 800524e:	4611      	mov	r1, r2
 8005250:	224c      	movs	r2, #76	@ 0x4c
 8005252:	4618      	mov	r0, r3
 8005254:	f01d fd4d 	bl	8022cf2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e1c6      	b.n	80055f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7e      	ldr	r2, [pc, #504]	@ (8005460 <HAL_FDCAN_Init+0x220>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d106      	bne.n	800527a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005274:	461a      	mov	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc f806 	bl	80012a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0210 	bic.w	r2, r2, #16
 80052a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a4:	f7fd f80e 	bl	80022c4 <HAL_GetTick>
 80052a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052aa:	e014      	b.n	80052d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052ac:	f7fd f80a 	bl	80022c4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b0a      	cmp	r3, #10
 80052b8:	d90d      	bls.n	80052d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2203      	movs	r2, #3
 80052ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e18c      	b.n	80055f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d0e3      	beq.n	80052ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052f4:	f7fc ffe6 	bl	80022c4 <HAL_GetTick>
 80052f8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052fa:	e014      	b.n	8005326 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052fc:	f7fc ffe2 	bl	80022c4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b0a      	cmp	r3, #10
 8005308:	d90d      	bls.n	8005326 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005310:	f043 0201 	orr.w	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e164      	b.n	80055f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0e3      	beq.n	80052fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0202 	orr.w	r2, r2, #2
 8005342:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	7c1b      	ldrb	r3, [r3, #16]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d108      	bne.n	800535e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800535a:	619a      	str	r2, [r3, #24]
 800535c:	e007      	b.n	800536e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800536c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	7c5b      	ldrb	r3, [r3, #17]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d108      	bne.n	8005388 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005384:	619a      	str	r2, [r3, #24]
 8005386:	e007      	b.n	8005398 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005396:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7c9b      	ldrb	r3, [r3, #18]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d108      	bne.n	80053b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053ae:	619a      	str	r2, [r3, #24]
 80053b0:	e007      	b.n	80053c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80053e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0210 	bic.w	r2, r2, #16
 80053f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d108      	bne.n	8005412 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0204 	orr.w	r2, r2, #4
 800540e:	619a      	str	r2, [r3, #24]
 8005410:	e030      	b.n	8005474 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02c      	beq.n	8005474 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d020      	beq.n	8005464 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699a      	ldr	r2, [r3, #24]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005430:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0210 	orr.w	r2, r2, #16
 8005440:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d114      	bne.n	8005474 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0220 	orr.w	r2, r2, #32
 8005458:	619a      	str	r2, [r3, #24]
 800545a:	e00b      	b.n	8005474 <HAL_FDCAN_Init+0x234>
 800545c:	08024930 	.word	0x08024930
 8005460:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0220 	orr.w	r2, r2, #32
 8005472:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	3b01      	subs	r3, #1
 800547a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	3b01      	subs	r3, #1
 8005482:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005484:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800548c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	3b01      	subs	r3, #1
 8005496:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800549c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800549e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a8:	d115      	bne.n	80054d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	3b01      	subs	r3, #1
 80054b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	3b01      	subs	r3, #1
 80054c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80054c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	3b01      	subs	r3, #1
 80054cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80054d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fc:	4413      	add	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d011      	beq.n	8005526 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800550a:	f023 0107 	bic.w	r1, r3, #7
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	3360      	adds	r3, #96	@ 0x60
 8005516:	443b      	add	r3, r7
 8005518:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005536:	f023 0107 	bic.w	r1, r3, #7
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	3360      	adds	r3, #96	@ 0x60
 8005542:	443b      	add	r3, r7
 8005544:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005556:	2b00      	cmp	r3, #0
 8005558:	d012      	beq.n	8005580 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005562:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	3360      	adds	r3, #96	@ 0x60
 800556e:	443b      	add	r3, r7
 8005570:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005584:	2b00      	cmp	r3, #0
 8005586:	d012      	beq.n	80055ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005590:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	3360      	adds	r3, #96	@ 0x60
 800559c:	443b      	add	r3, r7
 800559e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a11      	ldr	r2, [pc, #68]	@ (80055f8 <HAL_FDCAN_Init+0x3b8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d107      	bne.n	80055c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f022 0203 	bic.w	r2, r2, #3
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fdd9 	bl	8006198 <FDCAN_CalcultateRamBlockAddresses>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80055ec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3760      	adds	r7, #96	@ 0x60
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	4000a000 	.word	0x4000a000

080055fc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800560c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d002      	beq.n	800561a <HAL_FDCAN_ConfigFilter+0x1e>
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d157      	bne.n	80056ca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d12b      	bne.n	800567a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b07      	cmp	r3, #7
 8005628:	d10d      	bne.n	8005646 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005636:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800563c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800563e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e00e      	b.n	8005664 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005652:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800565a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e025      	b.n	80056c6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	075a      	lsls	r2, r3, #29
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b07      	cmp	r3, #7
 800568e:	d103      	bne.n	8005698 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e006      	b.n	80056a6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	079a      	lsls	r2, r3, #30
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4413      	add	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3304      	adds	r3, #4
 80056be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e008      	b.n	80056dc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d111      	bne.n	8005720 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e008      	b.n	8005732 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005726:	f043 0204 	orr.w	r2, r3, #4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d141      	bne.n	80057da <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800575e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e038      	b.n	80057ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e026      	b.n	80057ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fe75 	bl	80064a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2101      	movs	r1, #1
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	fa01 f202 	lsl.w	r2, r1, r2
 80057c6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80057ca:	2201      	movs	r2, #1
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	409a      	lsls	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e008      	b.n	80057ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057e0:	f043 0208 	orr.w	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b08b      	sub	sp, #44	@ 0x2c
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800580c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800580e:	7efb      	ldrb	r3, [r7, #27]
 8005810:	2b02      	cmp	r3, #2
 8005812:	f040 8149 	bne.w	8005aa8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b40      	cmp	r3, #64	@ 0x40
 800581a:	d14c      	bne.n	80058b6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005824:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e13c      	b.n	8005aba <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005856:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e12a      	b.n	8005aba <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800586c:	0e1b      	lsrs	r3, r3, #24
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10a      	bne.n	800588c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800587e:	0fdb      	lsrs	r3, r3, #31
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005888:	2301      	movs	r3, #1
 800588a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b4:	e068      	b.n	8005988 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b41      	cmp	r3, #65	@ 0x41
 80058ba:	d14c      	bne.n	8005956 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0ec      	b.n	8005aba <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0da      	b.n	8005aba <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800590c:	0e1b      	lsrs	r3, r3, #24
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10a      	bne.n	800592c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800591e:	0fdb      	lsrs	r3, r3, #31
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005934:	0a1b      	lsrs	r3, r3, #8
 8005936:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
 8005954:	e018      	b.n	8005988 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d309      	bcc.n	8005974 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0a2      	b.n	8005aba <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d107      	bne.n	80059ac <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0c9b      	lsrs	r3, r3, #18
 80059a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e005      	b.n	80059b8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	3304      	adds	r3, #4
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	0e1b      	lsrs	r3, r3, #24
 8005a0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0fda      	lsrs	r2, r3, #31
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	3304      	adds	r3, #4
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	e00a      	b.n	8005a44 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	441a      	add	r2, r3
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	440b      	add	r3, r1
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	3301      	adds	r3, #1
 8005a42:	623b      	str	r3, [r7, #32]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d3ec      	bcc.n	8005a2e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b40      	cmp	r3, #64	@ 0x40
 8005a58:	d105      	bne.n	8005a66 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005a64:	e01e      	b.n	8005aa4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b41      	cmp	r3, #65	@ 0x41
 8005a6a:	d105      	bne.n	8005a78 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005a76:	e015      	b.n	8005aa4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b1f      	cmp	r3, #31
 8005a7c:	d808      	bhi.n	8005a90 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2101      	movs	r1, #1
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005a8e:	e009      	b.n	8005aa4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 021f 	and.w	r2, r3, #31
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e008      	b.n	8005aba <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aae:	f043 0208 	orr.w	r2, r3, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
  }
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	372c      	adds	r7, #44	@ 0x2c
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	08024cd0 	.word	0x08024cd0

08005acc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005ade:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d002      	beq.n	8005aec <HAL_FDCAN_ActivateNotification+0x20>
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d155      	bne.n	8005b98 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b0a:	e014      	b.n	8005b36 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4013      	ands	r3, r2
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d108      	bne.n	8005b2e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0202 	orr.w	r2, r2, #2
 8005b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b2c:	e003      	b.n	8005b36 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2203      	movs	r2, #3
 8005b34:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb8 <HAL_FDCAN_ActivateNotification+0xec>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	430b      	orrs	r3, r1
 8005b84:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <HAL_FDCAN_ActivateNotification+0xf0>)
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	0f9b      	lsrs	r3, r3, #30
 8005b8e:	490b      	ldr	r1, [pc, #44]	@ (8005bbc <HAL_FDCAN_ActivateNotification+0xf0>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e008      	b.n	8005baa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b9e:	f043 0202 	orr.w	r2, r3, #2
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	3fcfffff 	.word	0x3fcfffff
 8005bbc:	4000a800 	.word	0x4000a800

08005bc0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b096      	sub	sp, #88	@ 0x58
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005bc8:	4b95      	ldr	r3, [pc, #596]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	079b      	lsls	r3, r3, #30
 8005bce:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005bd0:	4b93      	ldr	r3, [pc, #588]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	079b      	lsls	r3, r3, #30
 8005bd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bd8:	4013      	ands	r3, r2
 8005bda:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005be6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c08:	4013      	ands	r3, r2
 8005c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c20:	4013      	ands	r3, r2
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c38:	4013      	ands	r3, r2
 8005c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c42:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005c46:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c50:	4013      	ands	r3, r2
 8005c52:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00f      	beq.n	8005c8e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c80:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c82:	4b67      	ldr	r3, [pc, #412]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fa39 	bl	8006100 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01c      	beq.n	8005cd2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d017      	beq.n	8005cd2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cc4:	4b56      	ldr	r3, [pc, #344]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005cca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f9ee 	bl	80060ae <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cde:	4b51      	ldr	r3, [pc, #324]	@ (8005e24 <HAL_FDCAN_IRQHandler+0x264>)
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce8:	0f9b      	lsrs	r3, r3, #30
 8005cea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005cec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f9b2 	bl	8006058 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d00:	4b48      	ldr	r3, [pc, #288]	@ (8005e24 <HAL_FDCAN_IRQHandler+0x264>)
 8005d02:	400b      	ands	r3, r1
 8005d04:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d06:	4a46      	ldr	r2, [pc, #280]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d0a:	0f9b      	lsrs	r3, r3, #30
 8005d0c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005d0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f9ac 	bl	800606e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00d      	beq.n	8005d38 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d22:	4b40      	ldr	r3, [pc, #256]	@ (8005e24 <HAL_FDCAN_IRQHandler+0x264>)
 8005d24:	400b      	ands	r3, r1
 8005d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d28:	4a3d      	ldr	r2, [pc, #244]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2c:	0f9b      	lsrs	r3, r3, #30
 8005d2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005d30:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f017 f994 	bl	801d060 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d44:	4b37      	ldr	r3, [pc, #220]	@ (8005e24 <HAL_FDCAN_IRQHandler+0x264>)
 8005d46:	400b      	ands	r3, r1
 8005d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d4a:	4a35      	ldr	r2, [pc, #212]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4e:	0f9b      	lsrs	r3, r3, #30
 8005d50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005d52:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f017 f9a7 	bl	801d0a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00f      	beq.n	8005d84 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d76:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d78:	4b29      	ldr	r3, [pc, #164]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f980 	bl	8006084 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01c      	beq.n	8005dc8 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dac:	4013      	ands	r3, r2
 8005dae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005db8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dba:	4b19      	ldr	r3, [pc, #100]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005dc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f968 	bl	8006098 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00f      	beq.n	8005df2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005de6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f969 	bl	80060c4 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e10:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <HAL_FDCAN_IRQHandler+0x260>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f95e 	bl	80060d8 <HAL_FDCAN_TimestampWraparoundCallback>
 8005e1c:	e004      	b.n	8005e28 <HAL_FDCAN_IRQHandler+0x268>
 8005e1e:	bf00      	nop
 8005e20:	4000a800 	.word	0x4000a800
 8005e24:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005e44:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e46:	4b81      	ldr	r3, [pc, #516]	@ (800604c <HAL_FDCAN_IRQHandler+0x48c>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f94d 	bl	80060ec <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d014      	beq.n	8005e86 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00f      	beq.n	8005e86 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e70:	4b76      	ldr	r3, [pc, #472]	@ (800604c <HAL_FDCAN_IRQHandler+0x48c>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e92:	4b6f      	ldr	r3, [pc, #444]	@ (8006050 <HAL_FDCAN_IRQHandler+0x490>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e98:	4a6c      	ldr	r2, [pc, #432]	@ (800604c <HAL_FDCAN_IRQHandler+0x48c>)
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e9c:	0f9b      	lsrs	r3, r3, #30
 8005e9e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f940 	bl	8006128 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005eb4:	4b66      	ldr	r3, [pc, #408]	@ (8006050 <HAL_FDCAN_IRQHandler+0x490>)
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eba:	4a64      	ldr	r2, [pc, #400]	@ (800604c <HAL_FDCAN_IRQHandler+0x48c>)
 8005ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ebe:	0f9b      	lsrs	r3, r3, #30
 8005ec0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8006054 <HAL_FDCAN_IRQHandler+0x494>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	f040 80aa 	bne.w	8006032 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80a2 	beq.w	8006032 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f02:	4013      	ands	r3, r2
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	4013      	ands	r3, r2
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005f40:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005f58:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	4013      	ands	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f82:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005f84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8d9 	bl	800613e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f98:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f8d9 	bl	8006154 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d019      	beq.n	8005fe0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d014      	beq.n	8005fe0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fcc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2240      	movs	r2, #64	@ 0x40
 8005fd4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	6939      	ldr	r1, [r7, #16]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f8c5 	bl	800616a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8c6 	bl	8006182 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f869 	bl	8006114 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006042:	bf00      	nop
 8006044:	3758      	adds	r7, #88	@ 0x58
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	4000a800 	.word	0x4000a800
 8006050:	3fcfffff 	.word	0x3fcfffff
 8006054:	4000a000 	.word	0x4000a000

08006058 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80061ae:	4ba7      	ldr	r3, [pc, #668]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	0091      	lsls	r1, r2, #2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	430b      	orrs	r3, r1
 80061bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061c8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	041a      	lsls	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061ee:	4b97      	ldr	r3, [pc, #604]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0091      	lsls	r1, r2, #2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	430b      	orrs	r3, r1
 80061fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006208:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006210:	041a      	lsls	r2, r3, #16
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	4413      	add	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006230:	4b86      	ldr	r3, [pc, #536]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0091      	lsls	r1, r2, #2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	430b      	orrs	r3, r1
 800623e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800624a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	041a      	lsls	r2, r3, #16
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006278:	4b74      	ldr	r3, [pc, #464]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800627a:	4013      	ands	r3, r2
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	0091      	lsls	r1, r2, #2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	430b      	orrs	r3, r1
 8006286:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006292:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629a:	041a      	lsls	r2, r3, #16
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80062c0:	4b62      	ldr	r3, [pc, #392]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	0091      	lsls	r1, r2, #2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80062ec:	4b57      	ldr	r3, [pc, #348]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	0091      	lsls	r1, r2, #2
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	430b      	orrs	r3, r1
 80062fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006306:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	041a      	lsls	r2, r3, #16
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4413      	add	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800632e:	4b47      	ldr	r3, [pc, #284]	@ (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006330:	4013      	ands	r3, r2
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0091      	lsls	r1, r2, #2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	430b      	orrs	r3, r1
 800633c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006348:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006350:	041a      	lsls	r2, r3, #16
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006364:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636c:	061a      	lsls	r2, r3, #24
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800637c:	4b34      	ldr	r3, [pc, #208]	@ (8006450 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800637e:	4413      	add	r3, r2
 8006380:	009a      	lsls	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	441a      	add	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	441a      	add	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	4a04      	ldr	r2, [pc, #16]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d915      	bls.n	8006474 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006448:	e006      	b.n	8006458 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800644a:	bf00      	nop
 800644c:	ffff0003 	.word	0xffff0003
 8006450:	10002b00 	.word	0x10002b00
 8006454:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2203      	movs	r2, #3
 800646c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e010      	b.n	8006496 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e005      	b.n	8006488 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3304      	adds	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d3f3      	bcc.n	800647c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop

080064a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b089      	sub	sp, #36	@ 0x24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80064c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	e00a      	b.n	80064e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80064d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80064de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80064f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80064fc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3304      	adds	r3, #4
 8006528:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	3304      	adds	r3, #4
 8006534:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e020      	b.n	800657e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3303      	adds	r3, #3
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	3302      	adds	r3, #2
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	440b      	add	r3, r1
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006554:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	3301      	adds	r3, #1
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	440b      	add	r3, r1
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006562:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	440a      	add	r2, r1
 800656a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800656c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	3304      	adds	r3, #4
 8006576:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3304      	adds	r3, #4
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	4a06      	ldr	r2, [pc, #24]	@ (800659c <FDCAN_CopyMessageToRAM+0xf8>)
 8006584:	5cd3      	ldrb	r3, [r2, r3]
 8006586:	461a      	mov	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4293      	cmp	r3, r2
 800658c:	d3d6      	bcc.n	800653c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	3724      	adds	r7, #36	@ 0x24
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	08024cd0 	.word	0x08024cd0

080065a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b089      	sub	sp, #36	@ 0x24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065ae:	4b89      	ldr	r3, [pc, #548]	@ (80067d4 <HAL_GPIO_Init+0x234>)
 80065b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065b2:	e194      	b.n	80068de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	fa01 f303 	lsl.w	r3, r1, r3
 80065c0:	4013      	ands	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8186 	beq.w	80068d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d005      	beq.n	80065e4 <HAL_GPIO_Init+0x44>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d130      	bne.n	8006646 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	2203      	movs	r2, #3
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4013      	ands	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	4313      	orrs	r3, r2
 800660c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800661a:	2201      	movs	r2, #1
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43db      	mvns	r3, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	4013      	ands	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	091b      	lsrs	r3, r3, #4
 8006630:	f003 0201 	and.w	r2, r3, #1
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	4313      	orrs	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d017      	beq.n	8006682 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	2203      	movs	r2, #3
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43db      	mvns	r3, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4013      	ands	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4313      	orrs	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d123      	bne.n	80066d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	08da      	lsrs	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3208      	adds	r2, #8
 8006696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	220f      	movs	r2, #15
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	08da      	lsrs	r2, r3, #3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3208      	adds	r2, #8
 80066d0:	69b9      	ldr	r1, [r7, #24]
 80066d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	2203      	movs	r2, #3
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	43db      	mvns	r3, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	4013      	ands	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 0203 	and.w	r2, r3, #3
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80e0 	beq.w	80068d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006718:	4b2f      	ldr	r3, [pc, #188]	@ (80067d8 <HAL_GPIO_Init+0x238>)
 800671a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800671e:	4a2e      	ldr	r2, [pc, #184]	@ (80067d8 <HAL_GPIO_Init+0x238>)
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006728:	4b2b      	ldr	r3, [pc, #172]	@ (80067d8 <HAL_GPIO_Init+0x238>)
 800672a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006736:	4a29      	ldr	r2, [pc, #164]	@ (80067dc <HAL_GPIO_Init+0x23c>)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	3302      	adds	r3, #2
 800673e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	220f      	movs	r2, #15
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a20      	ldr	r2, [pc, #128]	@ (80067e0 <HAL_GPIO_Init+0x240>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d052      	beq.n	8006808 <HAL_GPIO_Init+0x268>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1f      	ldr	r2, [pc, #124]	@ (80067e4 <HAL_GPIO_Init+0x244>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d031      	beq.n	80067ce <HAL_GPIO_Init+0x22e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1e      	ldr	r2, [pc, #120]	@ (80067e8 <HAL_GPIO_Init+0x248>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d02b      	beq.n	80067ca <HAL_GPIO_Init+0x22a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1d      	ldr	r2, [pc, #116]	@ (80067ec <HAL_GPIO_Init+0x24c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d025      	beq.n	80067c6 <HAL_GPIO_Init+0x226>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1c      	ldr	r2, [pc, #112]	@ (80067f0 <HAL_GPIO_Init+0x250>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01f      	beq.n	80067c2 <HAL_GPIO_Init+0x222>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1b      	ldr	r2, [pc, #108]	@ (80067f4 <HAL_GPIO_Init+0x254>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d019      	beq.n	80067be <HAL_GPIO_Init+0x21e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1a      	ldr	r2, [pc, #104]	@ (80067f8 <HAL_GPIO_Init+0x258>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <HAL_GPIO_Init+0x21a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a19      	ldr	r2, [pc, #100]	@ (80067fc <HAL_GPIO_Init+0x25c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00d      	beq.n	80067b6 <HAL_GPIO_Init+0x216>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a18      	ldr	r2, [pc, #96]	@ (8006800 <HAL_GPIO_Init+0x260>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <HAL_GPIO_Init+0x212>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a17      	ldr	r2, [pc, #92]	@ (8006804 <HAL_GPIO_Init+0x264>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_GPIO_Init+0x20e>
 80067aa:	2309      	movs	r3, #9
 80067ac:	e02d      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067ae:	230a      	movs	r3, #10
 80067b0:	e02b      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067b2:	2308      	movs	r3, #8
 80067b4:	e029      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067b6:	2307      	movs	r3, #7
 80067b8:	e027      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067ba:	2306      	movs	r3, #6
 80067bc:	e025      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067be:	2305      	movs	r3, #5
 80067c0:	e023      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067c2:	2304      	movs	r3, #4
 80067c4:	e021      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067c6:	2303      	movs	r3, #3
 80067c8:	e01f      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e01d      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e01b      	b.n	800680a <HAL_GPIO_Init+0x26a>
 80067d2:	bf00      	nop
 80067d4:	58000080 	.word	0x58000080
 80067d8:	58024400 	.word	0x58024400
 80067dc:	58000400 	.word	0x58000400
 80067e0:	58020000 	.word	0x58020000
 80067e4:	58020400 	.word	0x58020400
 80067e8:	58020800 	.word	0x58020800
 80067ec:	58020c00 	.word	0x58020c00
 80067f0:	58021000 	.word	0x58021000
 80067f4:	58021400 	.word	0x58021400
 80067f8:	58021800 	.word	0x58021800
 80067fc:	58021c00 	.word	0x58021c00
 8006800:	58022000 	.word	0x58022000
 8006804:	58022400 	.word	0x58022400
 8006808:	2300      	movs	r3, #0
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	f002 0203 	and.w	r2, r2, #3
 8006810:	0092      	lsls	r2, r2, #2
 8006812:	4093      	lsls	r3, r2
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4313      	orrs	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800681a:	4938      	ldr	r1, [pc, #224]	@ (80068fc <HAL_GPIO_Init+0x35c>)
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	089b      	lsrs	r3, r3, #2
 8006820:	3302      	adds	r3, #2
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	43db      	mvns	r3, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	4013      	ands	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800684e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	43db      	mvns	r3, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4013      	ands	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800687c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	43db      	mvns	r3, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4013      	ands	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	3301      	adds	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f ae63 	bne.w	80065b4 <HAL_GPIO_Init+0x14>
  }
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	3724      	adds	r7, #36	@ 0x24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	58000400 	.word	0x58000400

08006900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	887b      	ldrh	r3, [r7, #2]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e001      	b.n	8006922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
 800693c:	4613      	mov	r3, r2
 800693e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006940:	787b      	ldrb	r3, [r7, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006946:	887a      	ldrh	r2, [r7, #2]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800694c:	e003      	b.n	8006956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800694e:	887b      	ldrh	r3, [r7, #2]
 8006950:	041a      	lsls	r2, r3, #16
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	619a      	str	r2, [r3, #24]
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006974:	887a      	ldrh	r2, [r7, #2]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4013      	ands	r3, r2
 800697a:	041a      	lsls	r2, r3, #16
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	43d9      	mvns	r1, r3
 8006980:	887b      	ldrh	r3, [r7, #2]
 8006982:	400b      	ands	r3, r1
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	619a      	str	r2, [r3, #24]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	4603      	mov	r3, r0
 800699e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069ba:	88fb      	ldrh	r3, [r7, #6]
 80069bc:	4618      	mov	r0, r3
 80069be:	f019 ff91 	bl	80208e4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e08b      	b.n	8006af6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fa fcce 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2224      	movs	r2, #36	@ 0x24
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	e006      	b.n	8006a54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d108      	bne.n	8006a6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a6a:	605a      	str	r2, [r3, #4]
 8006a6c:	e007      	b.n	8006a7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <HAL_I2C_Init+0x134>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69d9      	ldr	r1, [r3, #28]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	02008000 	.word	0x02008000

08006b04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	817b      	strh	r3, [r7, #10]
 8006b16:	460b      	mov	r3, r1
 8006b18:	813b      	strh	r3, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f040 80f9 	bne.w	8006d1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_I2C_Mem_Write+0x34>
 8006b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0ed      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_I2C_Mem_Write+0x4e>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e0e6      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b5a:	f7fb fbb3 	bl	80022c4 <HAL_GetTick>
 8006b5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	2319      	movs	r3, #25
 8006b66:	2201      	movs	r2, #1
 8006b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f955 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0d1      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2221      	movs	r2, #33	@ 0x21
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2240      	movs	r2, #64	@ 0x40
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a3a      	ldr	r2, [r7, #32]
 8006b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ba4:	88f8      	ldrh	r0, [r7, #6]
 8006ba6:	893a      	ldrh	r2, [r7, #8]
 8006ba8:	8979      	ldrh	r1, [r7, #10]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f8b9 	bl	8006d2c <I2C_RequestMemoryWrite>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0a9      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2bff      	cmp	r3, #255	@ 0xff
 8006bd4:	d90e      	bls.n	8006bf4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	22ff      	movs	r2, #255	@ 0xff
 8006bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	8979      	ldrh	r1, [r7, #10]
 8006be4:	2300      	movs	r3, #0
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fad9 	bl	80071a4 <I2C_TransferConfig>
 8006bf2:	e00f      	b.n	8006c14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	8979      	ldrh	r1, [r7, #10]
 8006c06:	2300      	movs	r3, #0
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fac8 	bl	80071a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f958 	bl	8006ece <I2C_WaitOnTXISFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e07b      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2c:	781a      	ldrb	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d034      	beq.n	8006ccc <HAL_I2C_Mem_Write+0x1c8>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d130      	bne.n	8006ccc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c70:	2200      	movs	r2, #0
 8006c72:	2180      	movs	r1, #128	@ 0x80
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f8d1 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e04d      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2bff      	cmp	r3, #255	@ 0xff
 8006c8c:	d90e      	bls.n	8006cac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	22ff      	movs	r2, #255	@ 0xff
 8006c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	8979      	ldrh	r1, [r7, #10]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fa7d 	bl	80071a4 <I2C_TransferConfig>
 8006caa:	e00f      	b.n	8006ccc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	8979      	ldrh	r1, [r7, #10]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fa6c 	bl	80071a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d19e      	bne.n	8006c14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f93e 	bl	8006f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e01a      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6859      	ldr	r1, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <HAL_I2C_Mem_Write+0x224>)
 8006cfe:	400b      	ands	r3, r1
 8006d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	fe00e800 	.word	0xfe00e800

08006d2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	817b      	strh	r3, [r7, #10]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	813b      	strh	r3, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	8979      	ldrh	r1, [r7, #10]
 8006d4c:	4b20      	ldr	r3, [pc, #128]	@ (8006dd0 <I2C_RequestMemoryWrite+0xa4>)
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fa25 	bl	80071a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f8b5 	bl	8006ece <I2C_WaitOnTXISFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e02c      	b.n	8006dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d105      	bne.n	8006d80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d74:	893b      	ldrh	r3, [r7, #8]
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d7e:	e015      	b.n	8006dac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d80:	893b      	ldrh	r3, [r7, #8]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 f89b 	bl	8006ece <I2C_WaitOnTXISFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e012      	b.n	8006dc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006da2:	893b      	ldrh	r3, [r7, #8]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2200      	movs	r2, #0
 8006db4:	2180      	movs	r1, #128	@ 0x80
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f830 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	80002000 	.word	0x80002000

08006dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d103      	bne.n	8006df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d007      	beq.n	8006e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	619a      	str	r2, [r3, #24]
  }
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e2c:	e03b      	b.n	8006ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f8d6 	bl	8006fe4 <I2C_IsErrorOccurred>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e041      	b.n	8006ec6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d02d      	beq.n	8006ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4a:	f7fb fa3b 	bl	80022c4 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d122      	bne.n	8006ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d113      	bne.n	8006ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e00f      	b.n	8006ec6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d0b4      	beq.n	8006e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006eda:	e033      	b.n	8006f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f87f 	bl	8006fe4 <I2C_IsErrorOccurred>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e031      	b.n	8006f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d025      	beq.n	8006f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef8:	f7fb f9e4 	bl	80022c4 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d11a      	bne.n	8006f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d013      	beq.n	8006f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f20:	f043 0220 	orr.w	r2, r3, #32
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e007      	b.n	8006f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d1c4      	bne.n	8006edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f68:	e02f      	b.n	8006fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f838 	bl	8006fe4 <I2C_IsErrorOccurred>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e02d      	b.n	8006fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7e:	f7fb f9a1 	bl	80022c4 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d302      	bcc.n	8006f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11a      	bne.n	8006fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d013      	beq.n	8006fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e007      	b.n	8006fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d1c8      	bne.n	8006f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	@ 0x28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b00      	cmp	r3, #0
 800700e:	d068      	beq.n	80070e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2210      	movs	r2, #16
 8007016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007018:	e049      	b.n	80070ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d045      	beq.n	80070ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007022:	f7fb f94f 	bl	80022c4 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	d302      	bcc.n	8007038 <I2C_IsErrorOccurred+0x54>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d13a      	bne.n	80070ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800704a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800705a:	d121      	bne.n	80070a0 <I2C_IsErrorOccurred+0xbc>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007062:	d01d      	beq.n	80070a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	2b20      	cmp	r3, #32
 8007068:	d01a      	beq.n	80070a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800707a:	f7fb f923 	bl	80022c4 <HAL_GetTick>
 800707e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007080:	e00e      	b.n	80070a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007082:	f7fb f91f 	bl	80022c4 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b19      	cmp	r3, #25
 800708e:	d907      	bls.n	80070a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	f043 0320 	orr.w	r3, r3, #32
 8007096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800709e:	e006      	b.n	80070ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d1e9      	bne.n	8007082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d003      	beq.n	80070c4 <I2C_IsErrorOccurred+0xe0>
 80070bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0aa      	beq.n	800701a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80070c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2220      	movs	r2, #32
 80070d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f043 0304 	orr.w	r3, r3, #4
 80070da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f043 0308 	orr.w	r3, r3, #8
 800711c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	f043 0302 	orr.w	r3, r3, #2
 800713e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01c      	beq.n	8007192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff fe3b 	bl	8006dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <I2C_IsErrorOccurred+0x1bc>)
 800716a:	400b      	ands	r3, r1
 800716c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007196:	4618      	mov	r0, r3
 8007198:	3728      	adds	r7, #40	@ 0x28
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	fe00e800 	.word	0xfe00e800

080071a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	817b      	strh	r3, [r7, #10]
 80071b2:	4613      	mov	r3, r2
 80071b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071bc:	7a7b      	ldrb	r3, [r7, #9]
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	0d5b      	lsrs	r3, r3, #21
 80071de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80071e2:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <I2C_TransferConfig+0x60>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	43db      	mvns	r3, r3
 80071e8:	ea02 0103 	and.w	r1, r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	03ff63ff 	.word	0x03ff63ff

08007208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b20      	cmp	r3, #32
 800721c:	d138      	bne.n	8007290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007228:	2302      	movs	r3, #2
 800722a:	e032      	b.n	8007292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2224      	movs	r2, #36	@ 0x24
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800725a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e000      	b.n	8007292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007290:	2302      	movs	r3, #2
  }
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d139      	bne.n	8007328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072be:	2302      	movs	r3, #2
 80072c0:	e033      	b.n	800732a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2224      	movs	r2, #36	@ 0x24
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	e000      	b.n	800732a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007328:	2302      	movs	r3, #2
  }
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007340:	4b19      	ldr	r3, [pc, #100]	@ (80073a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d00a      	beq.n	8007362 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800734c:	4b16      	ldr	r3, [pc, #88]	@ (80073a8 <HAL_PWREx_ConfigSupply+0x70>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	429a      	cmp	r2, r3
 8007358:	d001      	beq.n	800735e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e01f      	b.n	800739e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	e01d      	b.n	800739e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007362:	4b11      	ldr	r3, [pc, #68]	@ (80073a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f023 0207 	bic.w	r2, r3, #7
 800736a:	490f      	ldr	r1, [pc, #60]	@ (80073a8 <HAL_PWREx_ConfigSupply+0x70>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4313      	orrs	r3, r2
 8007370:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007372:	f7fa ffa7 	bl	80022c4 <HAL_GetTick>
 8007376:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007378:	e009      	b.n	800738e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800737a:	f7fa ffa3 	bl	80022c4 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007388:	d901      	bls.n	800738e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e007      	b.n	800739e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800738e:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800739a:	d1ee      	bne.n	800737a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	58024800 	.word	0x58024800

080073ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	@ 0x30
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d102      	bne.n	80073c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f000 bc48 	b.w	8007c50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8088 	beq.w	80074de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073ce:	4b99      	ldr	r3, [pc, #612]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073d8:	4b96      	ldr	r3, [pc, #600]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80073da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d007      	beq.n	80073f4 <HAL_RCC_OscConfig+0x48>
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	2b18      	cmp	r3, #24
 80073e8:	d111      	bne.n	800740e <HAL_RCC_OscConfig+0x62>
 80073ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d10c      	bne.n	800740e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	4b8f      	ldr	r3, [pc, #572]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d06d      	beq.n	80074dc <HAL_RCC_OscConfig+0x130>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d169      	bne.n	80074dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f000 bc21 	b.w	8007c50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007416:	d106      	bne.n	8007426 <HAL_RCC_OscConfig+0x7a>
 8007418:	4b86      	ldr	r3, [pc, #536]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a85      	ldr	r2, [pc, #532]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800741e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	e02e      	b.n	8007484 <HAL_RCC_OscConfig+0xd8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <HAL_RCC_OscConfig+0x9c>
 800742e:	4b81      	ldr	r3, [pc, #516]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a80      	ldr	r2, [pc, #512]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	4b7e      	ldr	r3, [pc, #504]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a7d      	ldr	r2, [pc, #500]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	e01d      	b.n	8007484 <HAL_RCC_OscConfig+0xd8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007450:	d10c      	bne.n	800746c <HAL_RCC_OscConfig+0xc0>
 8007452:	4b78      	ldr	r3, [pc, #480]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a77      	ldr	r2, [pc, #476]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	4b75      	ldr	r3, [pc, #468]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a74      	ldr	r2, [pc, #464]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e00b      	b.n	8007484 <HAL_RCC_OscConfig+0xd8>
 800746c:	4b71      	ldr	r3, [pc, #452]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a70      	ldr	r2, [pc, #448]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	4b6e      	ldr	r3, [pc, #440]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a6d      	ldr	r2, [pc, #436]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800747e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d013      	beq.n	80074b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fa ff1a 	bl	80022c4 <HAL_GetTick>
 8007490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007494:	f7fa ff16 	bl	80022c4 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b64      	cmp	r3, #100	@ 0x64
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e3d4      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074a6:	4b63      	ldr	r3, [pc, #396]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0xe8>
 80074b2:	e014      	b.n	80074de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fa ff06 	bl	80022c4 <HAL_GetTick>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074bc:	f7fa ff02 	bl	80022c4 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b64      	cmp	r3, #100	@ 0x64
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e3c0      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074ce:	4b59      	ldr	r3, [pc, #356]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x110>
 80074da:	e000      	b.n	80074de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80ca 	beq.w	8007680 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ec:	4b51      	ldr	r3, [pc, #324]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_RCC_OscConfig+0x166>
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2b18      	cmp	r3, #24
 8007506:	d156      	bne.n	80075b6 <HAL_RCC_OscConfig+0x20a>
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d151      	bne.n	80075b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007512:	4b48      	ldr	r3, [pc, #288]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_RCC_OscConfig+0x17e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e392      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800752a:	4b42      	ldr	r3, [pc, #264]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 0219 	bic.w	r2, r3, #25
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	493f      	ldr	r1, [pc, #252]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007538:	4313      	orrs	r3, r2
 800753a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753c:	f7fa fec2 	bl	80022c4 <HAL_GetTick>
 8007540:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007544:	f7fa febe 	bl	80022c4 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e37c      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007556:	4b37      	ldr	r3, [pc, #220]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f0      	beq.n	8007544 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007562:	f7fa fedf 	bl	8002324 <HAL_GetREVID>
 8007566:	4603      	mov	r3, r0
 8007568:	f241 0203 	movw	r2, #4099	@ 0x1003
 800756c:	4293      	cmp	r3, r2
 800756e:	d817      	bhi.n	80075a0 <HAL_RCC_OscConfig+0x1f4>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b40      	cmp	r3, #64	@ 0x40
 8007576:	d108      	bne.n	800758a <HAL_RCC_OscConfig+0x1de>
 8007578:	4b2e      	ldr	r3, [pc, #184]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007580:	4a2c      	ldr	r2, [pc, #176]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007586:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007588:	e07a      	b.n	8007680 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800758a:	4b2a      	ldr	r3, [pc, #168]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	031b      	lsls	r3, r3, #12
 8007598:	4926      	ldr	r1, [pc, #152]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800759a:	4313      	orrs	r3, r2
 800759c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800759e:	e06f      	b.n	8007680 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075a0:	4b24      	ldr	r3, [pc, #144]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	061b      	lsls	r3, r3, #24
 80075ae:	4921      	ldr	r1, [pc, #132]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075b4:	e064      	b.n	8007680 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d047      	beq.n	800764e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075be:	4b1d      	ldr	r3, [pc, #116]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 0219 	bic.w	r2, r3, #25
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	491a      	ldr	r1, [pc, #104]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fa fe78 	bl	80022c4 <HAL_GetTick>
 80075d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075d8:	f7fa fe74 	bl	80022c4 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e332      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075ea:	4b12      	ldr	r3, [pc, #72]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f6:	f7fa fe95 	bl	8002324 <HAL_GetREVID>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007600:	4293      	cmp	r3, r2
 8007602:	d819      	bhi.n	8007638 <HAL_RCC_OscConfig+0x28c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b40      	cmp	r3, #64	@ 0x40
 800760a:	d108      	bne.n	800761e <HAL_RCC_OscConfig+0x272>
 800760c:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007614:	4a07      	ldr	r2, [pc, #28]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761a:	6053      	str	r3, [r2, #4]
 800761c:	e030      	b.n	8007680 <HAL_RCC_OscConfig+0x2d4>
 800761e:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	031b      	lsls	r3, r3, #12
 800762c:	4901      	ldr	r1, [pc, #4]	@ (8007634 <HAL_RCC_OscConfig+0x288>)
 800762e:	4313      	orrs	r3, r2
 8007630:	604b      	str	r3, [r1, #4]
 8007632:	e025      	b.n	8007680 <HAL_RCC_OscConfig+0x2d4>
 8007634:	58024400 	.word	0x58024400
 8007638:	4b9a      	ldr	r3, [pc, #616]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	4997      	ldr	r1, [pc, #604]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007648:	4313      	orrs	r3, r2
 800764a:	604b      	str	r3, [r1, #4]
 800764c:	e018      	b.n	8007680 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800764e:	4b95      	ldr	r3, [pc, #596]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a94      	ldr	r2, [pc, #592]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765a:	f7fa fe33 	bl	80022c4 <HAL_GetTick>
 800765e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007660:	e008      	b.n	8007674 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007662:	f7fa fe2f 	bl	80022c4 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d901      	bls.n	8007674 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e2ed      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007674:	4b8b      	ldr	r3, [pc, #556]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1f0      	bne.n	8007662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80a9 	beq.w	80077e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800768e:	4b85      	ldr	r3, [pc, #532]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007696:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007698:	4b82      	ldr	r3, [pc, #520]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800769a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d007      	beq.n	80076b4 <HAL_RCC_OscConfig+0x308>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b18      	cmp	r3, #24
 80076a8:	d13a      	bne.n	8007720 <HAL_RCC_OscConfig+0x374>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d135      	bne.n	8007720 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076b4:	4b7b      	ldr	r3, [pc, #492]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_RCC_OscConfig+0x320>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b80      	cmp	r3, #128	@ 0x80
 80076c6:	d001      	beq.n	80076cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e2c1      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076cc:	f7fa fe2a 	bl	8002324 <HAL_GetREVID>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d817      	bhi.n	800770a <HAL_RCC_OscConfig+0x35e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d108      	bne.n	80076f4 <HAL_RCC_OscConfig+0x348>
 80076e2:	4b70      	ldr	r3, [pc, #448]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80076ea:	4a6e      	ldr	r2, [pc, #440]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80076ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076f2:	e075      	b.n	80077e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076f4:	4b6b      	ldr	r3, [pc, #428]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	069b      	lsls	r3, r3, #26
 8007702:	4968      	ldr	r1, [pc, #416]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007704:	4313      	orrs	r3, r2
 8007706:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007708:	e06a      	b.n	80077e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800770a:	4b66      	ldr	r3, [pc, #408]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	061b      	lsls	r3, r3, #24
 8007718:	4962      	ldr	r1, [pc, #392]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800771a:	4313      	orrs	r3, r2
 800771c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800771e:	e05f      	b.n	80077e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d042      	beq.n	80077ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007728:	4b5e      	ldr	r3, [pc, #376]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a5d      	ldr	r2, [pc, #372]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800772e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fa fdc6 	bl	80022c4 <HAL_GetTick>
 8007738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800773c:	f7fa fdc2 	bl	80022c4 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e280      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800774e:	4b55      	ldr	r3, [pc, #340]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800775a:	f7fa fde3 	bl	8002324 <HAL_GetREVID>
 800775e:	4603      	mov	r3, r0
 8007760:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007764:	4293      	cmp	r3, r2
 8007766:	d817      	bhi.n	8007798 <HAL_RCC_OscConfig+0x3ec>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	2b20      	cmp	r3, #32
 800776e:	d108      	bne.n	8007782 <HAL_RCC_OscConfig+0x3d6>
 8007770:	4b4c      	ldr	r3, [pc, #304]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007778:	4a4a      	ldr	r2, [pc, #296]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800777a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800777e:	6053      	str	r3, [r2, #4]
 8007780:	e02e      	b.n	80077e0 <HAL_RCC_OscConfig+0x434>
 8007782:	4b48      	ldr	r3, [pc, #288]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	069b      	lsls	r3, r3, #26
 8007790:	4944      	ldr	r1, [pc, #272]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007792:	4313      	orrs	r3, r2
 8007794:	604b      	str	r3, [r1, #4]
 8007796:	e023      	b.n	80077e0 <HAL_RCC_OscConfig+0x434>
 8007798:	4b42      	ldr	r3, [pc, #264]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	061b      	lsls	r3, r3, #24
 80077a6:	493f      	ldr	r1, [pc, #252]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60cb      	str	r3, [r1, #12]
 80077ac:	e018      	b.n	80077e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077ae:	4b3d      	ldr	r3, [pc, #244]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3c      	ldr	r2, [pc, #240]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80077b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ba:	f7fa fd83 	bl	80022c4 <HAL_GetTick>
 80077be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80077c2:	f7fa fd7f 	bl	80022c4 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e23d      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077d4:	4b33      	ldr	r3, [pc, #204]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f0      	bne.n	80077c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d036      	beq.n	800785a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d019      	beq.n	8007828 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077f4:	4b2b      	ldr	r3, [pc, #172]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80077f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f8:	4a2a      	ldr	r2, [pc, #168]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fa fd60 	bl	80022c4 <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007808:	f7fa fd5c 	bl	80022c4 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e21a      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800781a:	4b22      	ldr	r3, [pc, #136]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800781c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0x45c>
 8007826:	e018      	b.n	800785a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007828:	4b1e      	ldr	r3, [pc, #120]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800782a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782c:	4a1d      	ldr	r2, [pc, #116]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007834:	f7fa fd46 	bl	80022c4 <HAL_GetTick>
 8007838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800783c:	f7fa fd42 	bl	80022c4 <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e200      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800784e:	4b15      	ldr	r3, [pc, #84]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f0      	bne.n	800783c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d039      	beq.n	80078da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01c      	beq.n	80078a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800786e:	4b0d      	ldr	r3, [pc, #52]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a0c      	ldr	r2, [pc, #48]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007874:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800787a:	f7fa fd23 	bl	80022c4 <HAL_GetTick>
 800787e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007882:	f7fa fd1f 	bl	80022c4 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e1dd      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007894:	4b03      	ldr	r3, [pc, #12]	@ (80078a4 <HAL_RCC_OscConfig+0x4f8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f0      	beq.n	8007882 <HAL_RCC_OscConfig+0x4d6>
 80078a0:	e01b      	b.n	80078da <HAL_RCC_OscConfig+0x52e>
 80078a2:	bf00      	nop
 80078a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078a8:	4b9b      	ldr	r3, [pc, #620]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a9a      	ldr	r2, [pc, #616]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 80078ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078b4:	f7fa fd06 	bl	80022c4 <HAL_GetTick>
 80078b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078bc:	f7fa fd02 	bl	80022c4 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e1c0      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078ce:	4b92      	ldr	r3, [pc, #584]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8081 	beq.w	80079ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078e8:	4b8c      	ldr	r3, [pc, #560]	@ (8007b1c <HAL_RCC_OscConfig+0x770>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a8b      	ldr	r2, [pc, #556]	@ (8007b1c <HAL_RCC_OscConfig+0x770>)
 80078ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078f4:	f7fa fce6 	bl	80022c4 <HAL_GetTick>
 80078f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078fc:	f7fa fce2 	bl	80022c4 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b64      	cmp	r3, #100	@ 0x64
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e1a0      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800790e:	4b83      	ldr	r3, [pc, #524]	@ (8007b1c <HAL_RCC_OscConfig+0x770>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f0      	beq.n	80078fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d106      	bne.n	8007930 <HAL_RCC_OscConfig+0x584>
 8007922:	4b7d      	ldr	r3, [pc, #500]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007926:	4a7c      	ldr	r2, [pc, #496]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007928:	f043 0301 	orr.w	r3, r3, #1
 800792c:	6713      	str	r3, [r2, #112]	@ 0x70
 800792e:	e02d      	b.n	800798c <HAL_RCC_OscConfig+0x5e0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10c      	bne.n	8007952 <HAL_RCC_OscConfig+0x5a6>
 8007938:	4b77      	ldr	r3, [pc, #476]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793c:	4a76      	ldr	r2, [pc, #472]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 800793e:	f023 0301 	bic.w	r3, r3, #1
 8007942:	6713      	str	r3, [r2, #112]	@ 0x70
 8007944:	4b74      	ldr	r3, [pc, #464]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007948:	4a73      	ldr	r2, [pc, #460]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 800794a:	f023 0304 	bic.w	r3, r3, #4
 800794e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007950:	e01c      	b.n	800798c <HAL_RCC_OscConfig+0x5e0>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b05      	cmp	r3, #5
 8007958:	d10c      	bne.n	8007974 <HAL_RCC_OscConfig+0x5c8>
 800795a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795e:	4a6e      	ldr	r2, [pc, #440]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007960:	f043 0304 	orr.w	r3, r3, #4
 8007964:	6713      	str	r3, [r2, #112]	@ 0x70
 8007966:	4b6c      	ldr	r3, [pc, #432]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796a:	4a6b      	ldr	r2, [pc, #428]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	6713      	str	r3, [r2, #112]	@ 0x70
 8007972:	e00b      	b.n	800798c <HAL_RCC_OscConfig+0x5e0>
 8007974:	4b68      	ldr	r3, [pc, #416]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007978:	4a67      	ldr	r2, [pc, #412]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007980:	4b65      	ldr	r3, [pc, #404]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007984:	4a64      	ldr	r2, [pc, #400]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007986:	f023 0304 	bic.w	r3, r3, #4
 800798a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d015      	beq.n	80079c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007994:	f7fa fc96 	bl	80022c4 <HAL_GetTick>
 8007998:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800799a:	e00a      	b.n	80079b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799c:	f7fa fc92 	bl	80022c4 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e14e      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079b2:	4b59      	ldr	r3, [pc, #356]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0ee      	beq.n	800799c <HAL_RCC_OscConfig+0x5f0>
 80079be:	e014      	b.n	80079ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c0:	f7fa fc80 	bl	80022c4 <HAL_GetTick>
 80079c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079c6:	e00a      	b.n	80079de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079c8:	f7fa fc7c 	bl	80022c4 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e138      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079de:	4b4e      	ldr	r3, [pc, #312]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 80079e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1ee      	bne.n	80079c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 812d 	beq.w	8007c4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80079f4:	4b48      	ldr	r3, [pc, #288]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079fc:	2b18      	cmp	r3, #24
 80079fe:	f000 80bd 	beq.w	8007b7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	f040 809e 	bne.w	8007b48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a0c:	4b42      	ldr	r3, [pc, #264]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a41      	ldr	r2, [pc, #260]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a18:	f7fa fc54 	bl	80022c4 <HAL_GetTick>
 8007a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a20:	f7fa fc50 	bl	80022c4 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e10e      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a32:	4b39      	ldr	r3, [pc, #228]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a3e:	4b36      	ldr	r3, [pc, #216]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a42:	4b37      	ldr	r3, [pc, #220]	@ (8007b20 <HAL_RCC_OscConfig+0x774>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a4e:	0112      	lsls	r2, r2, #4
 8007a50:	430a      	orrs	r2, r1
 8007a52:	4931      	ldr	r1, [pc, #196]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a66:	3b01      	subs	r3, #1
 8007a68:	025b      	lsls	r3, r3, #9
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	3b01      	subs	r3, #1
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a80:	3b01      	subs	r3, #1
 8007a82:	061b      	lsls	r3, r3, #24
 8007a84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a88:	4923      	ldr	r1, [pc, #140]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007a8e:	4b22      	ldr	r3, [pc, #136]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a92:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a9e:	4b21      	ldr	r3, [pc, #132]	@ (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007aa6:	00d2      	lsls	r2, r2, #3
 8007aa8:	491b      	ldr	r1, [pc, #108]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007aae:	4b1a      	ldr	r3, [pc, #104]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	f023 020c 	bic.w	r2, r3, #12
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aba:	4917      	ldr	r1, [pc, #92]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ac0:	4b15      	ldr	r3, [pc, #84]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	f023 0202 	bic.w	r2, r3, #2
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007acc:	4912      	ldr	r1, [pc, #72]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ad2:	4b11      	ldr	r3, [pc, #68]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad6:	4a10      	ldr	r2, [pc, #64]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ade:	4b0e      	ldr	r3, [pc, #56]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007aea:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	4a0a      	ldr	r2, [pc, #40]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007af6:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	4a07      	ldr	r2, [pc, #28]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b02:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a04      	ldr	r2, [pc, #16]	@ (8007b18 <HAL_RCC_OscConfig+0x76c>)
 8007b08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0e:	f7fa fbd9 	bl	80022c4 <HAL_GetTick>
 8007b12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b14:	e011      	b.n	8007b3a <HAL_RCC_OscConfig+0x78e>
 8007b16:	bf00      	nop
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	58024800 	.word	0x58024800
 8007b20:	fffffc0c 	.word	0xfffffc0c
 8007b24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b28:	f7fa fbcc 	bl	80022c4 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e08a      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b3a:	4b47      	ldr	r3, [pc, #284]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0f0      	beq.n	8007b28 <HAL_RCC_OscConfig+0x77c>
 8007b46:	e082      	b.n	8007c4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b48:	4b43      	ldr	r3, [pc, #268]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a42      	ldr	r2, [pc, #264]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fa fbb6 	bl	80022c4 <HAL_GetTick>
 8007b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b5c:	f7fa fbb2 	bl	80022c4 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e070      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f0      	bne.n	8007b5c <HAL_RCC_OscConfig+0x7b0>
 8007b7a:	e068      	b.n	8007c4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b7c:	4b36      	ldr	r3, [pc, #216]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b82:	4b35      	ldr	r3, [pc, #212]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d031      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f003 0203 	and.w	r2, r3, #3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d12a      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	091b      	lsrs	r3, r3, #4
 8007ba2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d122      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d11a      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d111      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d108      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	0e1b      	lsrs	r3, r3, #24
 8007be6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d001      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e02b      	b.n	8007c50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007bf8:	4b17      	ldr	r3, [pc, #92]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfc:	08db      	lsrs	r3, r3, #3
 8007bfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d01f      	beq.n	8007c4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007c0e:	4b12      	ldr	r3, [pc, #72]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	4a11      	ldr	r2, [pc, #68]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c1a:	f7fa fb53 	bl	80022c4 <HAL_GetTick>
 8007c1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007c20:	bf00      	nop
 8007c22:	f7fa fb4f 	bl	80022c4 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d0f9      	beq.n	8007c22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c32:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <HAL_RCC_OscConfig+0x8b0>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c3a:	00d2      	lsls	r2, r2, #3
 8007c3c:	4906      	ldr	r1, [pc, #24]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007c42:	4b05      	ldr	r3, [pc, #20]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c46:	4a04      	ldr	r2, [pc, #16]	@ (8007c58 <HAL_RCC_OscConfig+0x8ac>)
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3730      	adds	r7, #48	@ 0x30
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	ffff0007 	.word	0xffff0007

08007c60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e19c      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c74:	4b8a      	ldr	r3, [pc, #552]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d910      	bls.n	8007ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b87      	ldr	r3, [pc, #540]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 020f 	bic.w	r2, r3, #15
 8007c8a:	4985      	ldr	r1, [pc, #532]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c92:	4b83      	ldr	r3, [pc, #524]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e184      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d010      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d908      	bls.n	8007cd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cc0:	4b78      	ldr	r3, [pc, #480]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	4975      	ldr	r1, [pc, #468]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d010      	beq.n	8007d00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	4b70      	ldr	r3, [pc, #448]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d908      	bls.n	8007d00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cee:	4b6d      	ldr	r3, [pc, #436]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	496a      	ldr	r1, [pc, #424]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d010      	beq.n	8007d2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	4b64      	ldr	r3, [pc, #400]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d908      	bls.n	8007d2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d1c:	4b61      	ldr	r3, [pc, #388]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	495e      	ldr	r1, [pc, #376]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d010      	beq.n	8007d5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69da      	ldr	r2, [r3, #28]
 8007d3e:	4b59      	ldr	r3, [pc, #356]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d908      	bls.n	8007d5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d4a:	4b56      	ldr	r3, [pc, #344]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	4953      	ldr	r1, [pc, #332]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d010      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d908      	bls.n	8007d8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d78:	4b4a      	ldr	r3, [pc, #296]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f023 020f 	bic.w	r2, r3, #15
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4947      	ldr	r1, [pc, #284]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d055      	beq.n	8007e42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d96:	4b43      	ldr	r3, [pc, #268]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	4940      	ldr	r1, [pc, #256]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007db0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d121      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0f6      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d107      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dc8:	4b36      	ldr	r3, [pc, #216]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d115      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0ea      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d107      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007de0:	4b30      	ldr	r3, [pc, #192]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e0de      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df0:	4b2c      	ldr	r3, [pc, #176]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0d6      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e00:	4b28      	ldr	r3, [pc, #160]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f023 0207 	bic.w	r2, r3, #7
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4925      	ldr	r1, [pc, #148]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e12:	f7fa fa57 	bl	80022c4 <HAL_GetTick>
 8007e16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e18:	e00a      	b.n	8007e30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e1a:	f7fa fa53 	bl	80022c4 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e0be      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e30:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d1eb      	bne.n	8007e1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d010      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d208      	bcs.n	8007e70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e5e:	4b11      	ldr	r3, [pc, #68]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	f023 020f 	bic.w	r2, r3, #15
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	490e      	ldr	r1, [pc, #56]	@ (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d214      	bcs.n	8007ea8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e7e:	4b08      	ldr	r3, [pc, #32]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f023 020f 	bic.w	r2, r3, #15
 8007e86:	4906      	ldr	r1, [pc, #24]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d005      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e086      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
 8007ea0:	52002000 	.word	0x52002000
 8007ea4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d208      	bcs.n	8007ed6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4939      	ldr	r1, [pc, #228]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d010      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	4b34      	ldr	r3, [pc, #208]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d208      	bcs.n	8007f04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ef2:	4b31      	ldr	r3, [pc, #196]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	492e      	ldr	r1, [pc, #184]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	4b28      	ldr	r3, [pc, #160]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d208      	bcs.n	8007f32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f20:	4b25      	ldr	r3, [pc, #148]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4922      	ldr	r1, [pc, #136]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d010      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	4b1d      	ldr	r3, [pc, #116]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d208      	bcs.n	8007f60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	4917      	ldr	r1, [pc, #92]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f60:	f000 f834 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 8007f64:	4602      	mov	r2, r0
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	4912      	ldr	r1, [pc, #72]	@ (8007fbc <HAL_RCC_ClockConfig+0x35c>)
 8007f72:	5ccb      	ldrb	r3, [r1, r3]
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	4a0d      	ldr	r2, [pc, #52]	@ (8007fbc <HAL_RCC_ClockConfig+0x35c>)
 8007f88:	5cd3      	ldrb	r3, [r2, r3]
 8007f8a:	f003 031f 	and.w	r3, r3, #31
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc0 <HAL_RCC_ClockConfig+0x360>)
 8007f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f98:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc4 <HAL_RCC_ClockConfig+0x364>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <HAL_RCC_ClockConfig+0x368>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7f9 fe98 	bl	8001cd8 <HAL_InitTick>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	08024cb8 	.word	0x08024cb8
 8007fc0:	24000004 	.word	0x24000004
 8007fc4:	24000000 	.word	0x24000000
 8007fc8:	24000008 	.word	0x24000008

08007fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b089      	sub	sp, #36	@ 0x24
 8007fd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd2:	4bb3      	ldr	r3, [pc, #716]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fda:	2b18      	cmp	r3, #24
 8007fdc:	f200 8155 	bhi.w	800828a <HAL_RCC_GetSysClockFreq+0x2be>
 8007fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	0800804d 	.word	0x0800804d
 8007fec:	0800828b 	.word	0x0800828b
 8007ff0:	0800828b 	.word	0x0800828b
 8007ff4:	0800828b 	.word	0x0800828b
 8007ff8:	0800828b 	.word	0x0800828b
 8007ffc:	0800828b 	.word	0x0800828b
 8008000:	0800828b 	.word	0x0800828b
 8008004:	0800828b 	.word	0x0800828b
 8008008:	08008073 	.word	0x08008073
 800800c:	0800828b 	.word	0x0800828b
 8008010:	0800828b 	.word	0x0800828b
 8008014:	0800828b 	.word	0x0800828b
 8008018:	0800828b 	.word	0x0800828b
 800801c:	0800828b 	.word	0x0800828b
 8008020:	0800828b 	.word	0x0800828b
 8008024:	0800828b 	.word	0x0800828b
 8008028:	08008079 	.word	0x08008079
 800802c:	0800828b 	.word	0x0800828b
 8008030:	0800828b 	.word	0x0800828b
 8008034:	0800828b 	.word	0x0800828b
 8008038:	0800828b 	.word	0x0800828b
 800803c:	0800828b 	.word	0x0800828b
 8008040:	0800828b 	.word	0x0800828b
 8008044:	0800828b 	.word	0x0800828b
 8008048:	0800807f 	.word	0x0800807f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800804c:	4b94      	ldr	r3, [pc, #592]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d009      	beq.n	800806c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008058:	4b91      	ldr	r3, [pc, #580]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	08db      	lsrs	r3, r3, #3
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	4a90      	ldr	r2, [pc, #576]	@ (80082a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800806a:	e111      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800806c:	4b8d      	ldr	r3, [pc, #564]	@ (80082a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800806e:	61bb      	str	r3, [r7, #24]
      break;
 8008070:	e10e      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008072:	4b8d      	ldr	r3, [pc, #564]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008074:	61bb      	str	r3, [r7, #24]
      break;
 8008076:	e10b      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008078:	4b8c      	ldr	r3, [pc, #560]	@ (80082ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800807a:	61bb      	str	r3, [r7, #24]
      break;
 800807c:	e108      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800807e:	4b88      	ldr	r3, [pc, #544]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008088:	4b85      	ldr	r3, [pc, #532]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008092:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008094:	4b82      	ldr	r3, [pc, #520]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800809e:	4b80      	ldr	r3, [pc, #512]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a2:	08db      	lsrs	r3, r3, #3
 80080a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80e1 	beq.w	8008284 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	f000 8083 	beq.w	80081d0 <HAL_RCC_GetSysClockFreq+0x204>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	f200 80a1 	bhi.w	8008214 <HAL_RCC_GetSysClockFreq+0x248>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_RCC_GetSysClockFreq+0x114>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d056      	beq.n	800818c <HAL_RCC_GetSysClockFreq+0x1c0>
 80080de:	e099      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e0:	4b6f      	ldr	r3, [pc, #444]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d02d      	beq.n	8008148 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080ec:	4b6c      	ldr	r3, [pc, #432]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	4a6b      	ldr	r2, [pc, #428]	@ (80082a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	ee07 3a90 	vmov	s15, r3
 8008104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008116:	4b62      	ldr	r3, [pc, #392]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008126:	ed97 6a02 	vldr	s12, [r7, #8]
 800812a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800812e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800813a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008142:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008146:	e087      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80082b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815a:	4b51      	ldr	r3, [pc, #324]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800815c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816a:	ed97 6a02 	vldr	s12, [r7, #8]
 800816e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800817e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800818a:	e065      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008196:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80082b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800819a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819e:	4b40      	ldr	r3, [pc, #256]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80081b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081ce:	e043      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80082bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80081de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e2:	4b2f      	ldr	r3, [pc, #188]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008212:	e021      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80082b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b1e      	ldr	r3, [pc, #120]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a02 	vldr	s12, [r7, #8]
 800823a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008256:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008258:	4b11      	ldr	r3, [pc, #68]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	0a5b      	lsrs	r3, r3, #9
 800825e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008262:	3301      	adds	r3, #1
 8008264:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008270:	edd7 6a07 	vldr	s13, [r7, #28]
 8008274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827c:	ee17 3a90 	vmov	r3, s15
 8008280:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008282:	e005      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	61bb      	str	r3, [r7, #24]
      break;
 8008288:	e002      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800828a:	4b07      	ldr	r3, [pc, #28]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800828c:	61bb      	str	r3, [r7, #24]
      break;
 800828e:	bf00      	nop
  }

  return sysclockfreq;
 8008290:	69bb      	ldr	r3, [r7, #24]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3724      	adds	r7, #36	@ 0x24
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	58024400 	.word	0x58024400
 80082a4:	03d09000 	.word	0x03d09000
 80082a8:	003d0900 	.word	0x003d0900
 80082ac:	017d7840 	.word	0x017d7840
 80082b0:	46000000 	.word	0x46000000
 80082b4:	4c742400 	.word	0x4c742400
 80082b8:	4a742400 	.word	0x4a742400
 80082bc:	4bbebc20 	.word	0x4bbebc20

080082c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082c6:	f7ff fe81 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4b10      	ldr	r3, [pc, #64]	@ (8008310 <HAL_RCC_GetHCLKFreq+0x50>)
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	490f      	ldr	r1, [pc, #60]	@ (8008314 <HAL_RCC_GetHCLKFreq+0x54>)
 80082d8:	5ccb      	ldrb	r3, [r1, r3]
 80082da:	f003 031f 	and.w	r3, r3, #31
 80082de:	fa22 f303 	lsr.w	r3, r2, r3
 80082e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <HAL_RCC_GetHCLKFreq+0x50>)
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	4a09      	ldr	r2, [pc, #36]	@ (8008314 <HAL_RCC_GetHCLKFreq+0x54>)
 80082ee:	5cd3      	ldrb	r3, [r2, r3]
 80082f0:	f003 031f 	and.w	r3, r3, #31
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	fa22 f303 	lsr.w	r3, r2, r3
 80082fa:	4a07      	ldr	r2, [pc, #28]	@ (8008318 <HAL_RCC_GetHCLKFreq+0x58>)
 80082fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082fe:	4a07      	ldr	r2, [pc, #28]	@ (800831c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008304:	4b04      	ldr	r3, [pc, #16]	@ (8008318 <HAL_RCC_GetHCLKFreq+0x58>)
 8008306:	681b      	ldr	r3, [r3, #0]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58024400 	.word	0x58024400
 8008314:	08024cb8 	.word	0x08024cb8
 8008318:	24000004 	.word	0x24000004
 800831c:	24000000 	.word	0x24000000

08008320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008324:	f7ff ffcc 	bl	80082c0 <HAL_RCC_GetHCLKFreq>
 8008328:	4602      	mov	r2, r0
 800832a:	4b06      	ldr	r3, [pc, #24]	@ (8008344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	091b      	lsrs	r3, r3, #4
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	4904      	ldr	r1, [pc, #16]	@ (8008348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008336:	5ccb      	ldrb	r3, [r1, r3]
 8008338:	f003 031f 	and.w	r3, r3, #31
 800833c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008340:	4618      	mov	r0, r3
 8008342:	bd80      	pop	{r7, pc}
 8008344:	58024400 	.word	0x58024400
 8008348:	08024cb8 	.word	0x08024cb8

0800834c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008350:	f7ff ffb6 	bl	80082c0 <HAL_RCC_GetHCLKFreq>
 8008354:	4602      	mov	r2, r0
 8008356:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	4904      	ldr	r1, [pc, #16]	@ (8008374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008362:	5ccb      	ldrb	r3, [r1, r3]
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800836c:	4618      	mov	r0, r3
 800836e:	bd80      	pop	{r7, pc}
 8008370:	58024400 	.word	0x58024400
 8008374:	08024cb8 	.word	0x08024cb8

08008378 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	223f      	movs	r2, #63	@ 0x3f
 8008386:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008388:	4b1a      	ldr	r3, [pc, #104]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f003 0207 	and.w	r2, r3, #7
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008394:	4b17      	ldr	r3, [pc, #92]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80083a0:	4b14      	ldr	r3, [pc, #80]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80083ac:	4b11      	ldr	r3, [pc, #68]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80083b8:	4b0e      	ldr	r3, [pc, #56]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80083c4:	4b0b      	ldr	r3, [pc, #44]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80083d0:	4b08      	ldr	r3, [pc, #32]	@ (80083f4 <HAL_RCC_GetClockConfig+0x7c>)
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80083dc:	4b06      	ldr	r3, [pc, #24]	@ (80083f8 <HAL_RCC_GetClockConfig+0x80>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 020f 	and.w	r2, r3, #15
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	601a      	str	r2, [r3, #0]
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	58024400 	.word	0x58024400
 80083f8:	52002000 	.word	0x52002000

080083fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008400:	b0ca      	sub	sp, #296	@ 0x128
 8008402:	af00      	add	r7, sp, #0
 8008404:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008408:	2300      	movs	r3, #0
 800840a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800840e:	2300      	movs	r3, #0
 8008410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008420:	2500      	movs	r5, #0
 8008422:	ea54 0305 	orrs.w	r3, r4, r5
 8008426:	d049      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800842e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008432:	d02f      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008434:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008438:	d828      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800843a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800843e:	d01a      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008444:	d822      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800844a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800844e:	d007      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008450:	e01c      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008452:	4bb8      	ldr	r3, [pc, #736]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	4ab7      	ldr	r2, [pc, #732]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800845c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800845e:	e01a      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008464:	3308      	adds	r3, #8
 8008466:	2102      	movs	r1, #2
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fc8f 	bl	8009d8c <RCCEx_PLL2_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008474:	e00f      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847a:	3328      	adds	r3, #40	@ 0x28
 800847c:	2102      	movs	r1, #2
 800847e:	4618      	mov	r0, r3
 8008480:	f001 fd36 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800848a:	e004      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008492:	e000      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800849e:	4ba5      	ldr	r3, [pc, #660]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ac:	4aa1      	ldr	r2, [pc, #644]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084ae:	430b      	orrs	r3, r1
 80084b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80084b2:	e003      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80084c8:	f04f 0900 	mov.w	r9, #0
 80084cc:	ea58 0309 	orrs.w	r3, r8, r9
 80084d0:	d047      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d82a      	bhi.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80084dc:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	080084f9 	.word	0x080084f9
 80084e8:	08008507 	.word	0x08008507
 80084ec:	0800851d 	.word	0x0800851d
 80084f0:	0800853b 	.word	0x0800853b
 80084f4:	0800853b 	.word	0x0800853b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f8:	4b8e      	ldr	r3, [pc, #568]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fc:	4a8d      	ldr	r2, [pc, #564]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008504:	e01a      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850a:	3308      	adds	r3, #8
 800850c:	2100      	movs	r1, #0
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fc3c 	bl	8009d8c <RCCEx_PLL2_Config>
 8008514:	4603      	mov	r3, r0
 8008516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800851a:	e00f      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008520:	3328      	adds	r3, #40	@ 0x28
 8008522:	2100      	movs	r1, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fce3 	bl	8009ef0 <RCCEx_PLL3_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008530:	e004      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008538:	e000      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800853a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008544:	4b7b      	ldr	r3, [pc, #492]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008548:	f023 0107 	bic.w	r1, r3, #7
 800854c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008552:	4a78      	ldr	r2, [pc, #480]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008554:	430b      	orrs	r3, r1
 8008556:	6513      	str	r3, [r2, #80]	@ 0x50
 8008558:	e003      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800856e:	f04f 0b00 	mov.w	fp, #0
 8008572:	ea5a 030b 	orrs.w	r3, sl, fp
 8008576:	d04c      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800857e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008582:	d030      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008588:	d829      	bhi.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800858a:	2bc0      	cmp	r3, #192	@ 0xc0
 800858c:	d02d      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800858e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008590:	d825      	bhi.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008592:	2b80      	cmp	r3, #128	@ 0x80
 8008594:	d018      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008596:	2b80      	cmp	r3, #128	@ 0x80
 8008598:	d821      	bhi.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800859e:	2b40      	cmp	r3, #64	@ 0x40
 80085a0:	d007      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80085a2:	e01c      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a4:	4b63      	ldr	r3, [pc, #396]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a8:	4a62      	ldr	r2, [pc, #392]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80085b0:	e01c      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	3308      	adds	r3, #8
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fbe6 	bl	8009d8c <RCCEx_PLL2_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80085c6:	e011      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085cc:	3328      	adds	r3, #40	@ 0x28
 80085ce:	2100      	movs	r1, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fc8d 	bl	8009ef0 <RCCEx_PLL3_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80085dc:	e006      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085e4:	e002      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80085e6:	bf00      	nop
 80085e8:	e000      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80085ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80085f4:	4b4f      	ldr	r3, [pc, #316]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008602:	4a4c      	ldr	r2, [pc, #304]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008604:	430b      	orrs	r3, r1
 8008606:	6513      	str	r3, [r2, #80]	@ 0x50
 8008608:	e003      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800860e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800861e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008622:	2300      	movs	r3, #0
 8008624:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008628:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800862c:	460b      	mov	r3, r1
 800862e:	4313      	orrs	r3, r2
 8008630:	d053      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800863a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800863e:	d035      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008644:	d82e      	bhi.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008646:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800864a:	d031      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800864c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008650:	d828      	bhi.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008656:	d01a      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800865c:	d822      	bhi.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008666:	d007      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008668:	e01c      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866a:	4b32      	ldr	r3, [pc, #200]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	4a31      	ldr	r2, [pc, #196]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008676:	e01c      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867c:	3308      	adds	r3, #8
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f001 fb83 	bl	8009d8c <RCCEx_PLL2_Config>
 8008686:	4603      	mov	r3, r0
 8008688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800868c:	e011      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008692:	3328      	adds	r3, #40	@ 0x28
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f001 fc2a 	bl	8009ef0 <RCCEx_PLL3_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086a2:	e006      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086aa:	e002      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80086b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80086ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80086ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086cc:	430b      	orrs	r3, r1
 80086ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80086d0:	e003      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80086e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80086ea:	2300      	movs	r3, #0
 80086ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80086f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80086f4:	460b      	mov	r3, r1
 80086f6:	4313      	orrs	r3, r2
 80086f8:	d056      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008706:	d038      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800870c:	d831      	bhi.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800870e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008712:	d034      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008714:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008718:	d82b      	bhi.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800871a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800871e:	d01d      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008724:	d825      	bhi.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d006      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800872a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800872e:	d00a      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008730:	e01f      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008732:	bf00      	nop
 8008734:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008738:	4ba2      	ldr	r3, [pc, #648]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800873a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873c:	4aa1      	ldr	r2, [pc, #644]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800873e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008744:	e01c      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874a:	3308      	adds	r3, #8
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fb1c 	bl	8009d8c <RCCEx_PLL2_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800875a:	e011      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008760:	3328      	adds	r3, #40	@ 0x28
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fbc3 	bl	8009ef0 <RCCEx_PLL3_Config>
 800876a:	4603      	mov	r3, r0
 800876c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008770:	e006      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008778:	e002      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800877e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008788:	4b8e      	ldr	r3, [pc, #568]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800878a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008798:	4a8a      	ldr	r2, [pc, #552]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800879a:	430b      	orrs	r3, r1
 800879c:	6593      	str	r3, [r2, #88]	@ 0x58
 800879e:	e003      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80087b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80087c2:	460b      	mov	r3, r1
 80087c4:	4313      	orrs	r3, r2
 80087c6:	d03a      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087ce:	2b30      	cmp	r3, #48	@ 0x30
 80087d0:	d01f      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80087d2:	2b30      	cmp	r3, #48	@ 0x30
 80087d4:	d819      	bhi.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d00c      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d815      	bhi.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d019      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80087e2:	2b10      	cmp	r3, #16
 80087e4:	d111      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e6:	4b77      	ldr	r3, [pc, #476]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	4a76      	ldr	r2, [pc, #472]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80087f2:	e011      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f8:	3308      	adds	r3, #8
 80087fa:	2102      	movs	r1, #2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fac5 	bl	8009d8c <RCCEx_PLL2_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008808:	e006      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008810:	e002      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008812:	bf00      	nop
 8008814:	e000      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008820:	4b68      	ldr	r3, [pc, #416]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008824:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882e:	4a65      	ldr	r2, [pc, #404]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008830:	430b      	orrs	r3, r1
 8008832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008834:	e003      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800884a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800884e:	2300      	movs	r3, #0
 8008850:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008854:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008858:	460b      	mov	r3, r1
 800885a:	4313      	orrs	r3, r2
 800885c:	d051      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008868:	d035      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800886a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800886e:	d82e      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008874:	d031      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008876:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800887a:	d828      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800887c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008880:	d01a      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008886:	d822      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800888c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008890:	d007      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008892:	e01c      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008894:	4b4b      	ldr	r3, [pc, #300]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	4a4a      	ldr	r2, [pc, #296]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800889a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800889e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80088a0:	e01c      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a6:	3308      	adds	r3, #8
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fa6e 	bl	8009d8c <RCCEx_PLL2_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80088b6:	e011      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088bc:	3328      	adds	r3, #40	@ 0x28
 80088be:	2100      	movs	r1, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fb15 	bl	8009ef0 <RCCEx_PLL3_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80088cc:	e006      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088d4:	e002      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80088d6:	bf00      	nop
 80088d8:	e000      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80088da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088e4:	4b37      	ldr	r3, [pc, #220]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f2:	4a34      	ldr	r2, [pc, #208]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80088f8:	e003      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800890e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008912:	2300      	movs	r3, #0
 8008914:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008918:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800891c:	460b      	mov	r3, r1
 800891e:	4313      	orrs	r3, r2
 8008920:	d056      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800892c:	d033      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800892e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008932:	d82c      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008934:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008938:	d02f      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800893a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800893e:	d826      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008944:	d02b      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008946:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800894a:	d820      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800894c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008950:	d012      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008956:	d81a      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d022      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800895c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008960:	d115      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008966:	3308      	adds	r3, #8
 8008968:	2101      	movs	r1, #1
 800896a:	4618      	mov	r0, r3
 800896c:	f001 fa0e 	bl	8009d8c <RCCEx_PLL2_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008976:	e015      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897c:	3328      	adds	r3, #40	@ 0x28
 800897e:	2101      	movs	r1, #1
 8008980:	4618      	mov	r0, r3
 8008982:	f001 fab5 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800898c:	e00a      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008994:	e006      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008996:	bf00      	nop
 8008998:	e004      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800899a:	bf00      	nop
 800899c:	e002      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800899e:	bf00      	nop
 80089a0:	e000      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80089a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10d      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80089ac:	4b05      	ldr	r3, [pc, #20]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ba:	4a02      	ldr	r2, [pc, #8]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089bc:	430b      	orrs	r3, r1
 80089be:	6513      	str	r3, [r2, #80]	@ 0x50
 80089c0:	e006      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80089c2:	bf00      	nop
 80089c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80089dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4313      	orrs	r3, r2
 80089ee:	d055      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089fc:	d033      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80089fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a02:	d82c      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a08:	d02f      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a0e:	d826      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008a10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a14:	d02b      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008a16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a1a:	d820      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a20:	d012      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a26:	d81a      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d022      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a30:	d115      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a36:	3308      	adds	r3, #8
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 f9a6 	bl	8009d8c <RCCEx_PLL2_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a46:	e015      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	3328      	adds	r3, #40	@ 0x28
 8008a4e:	2101      	movs	r1, #1
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fa4d 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a5c:	e00a      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a64:	e006      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a66:	bf00      	nop
 8008a68:	e004      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a6a:	bf00      	nop
 8008a6c:	e002      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a6e:	bf00      	nop
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10b      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a7c:	4ba3      	ldr	r3, [pc, #652]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a8c:	4a9f      	ldr	r2, [pc, #636]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a92:	e003      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008aac:	2300      	movs	r3, #0
 8008aae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	d037      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008acc:	d816      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d018      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad6:	d111      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008adc:	4a8b      	ldr	r2, [pc, #556]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ae4:	e00f      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aea:	3308      	adds	r3, #8
 8008aec:	2101      	movs	r1, #1
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f94c 	bl	8009d8c <RCCEx_PLL2_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008afa:	e004      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1c:	4a7b      	ldr	r2, [pc, #492]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b22:	e003      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	d039      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d81c      	bhi.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008b56:	a201      	add	r2, pc, #4	@ (adr r2, 8008b5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b99 	.word	0x08008b99
 8008b60:	08008b6d 	.word	0x08008b6d
 8008b64:	08008b7b 	.word	0x08008b7b
 8008b68:	08008b99 	.word	0x08008b99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b6c:	4b67      	ldr	r3, [pc, #412]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	4a66      	ldr	r2, [pc, #408]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b78:	e00f      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7e:	3308      	adds	r3, #8
 8008b80:	2102      	movs	r1, #2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 f902 	bl	8009d8c <RCCEx_PLL2_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b8e:	e004      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b96:	e000      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ba6:	f023 0103 	bic.w	r1, r3, #3
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bb0:	4a56      	ldr	r2, [pc, #344]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008bb6:	e003      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f000 809f 	beq.w	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008be2:	4b4b      	ldr	r3, [pc, #300]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a4a      	ldr	r2, [pc, #296]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bee:	f7f9 fb69 	bl	80022c4 <HAL_GetTick>
 8008bf2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bf6:	e00b      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bf8:	f7f9 fb64 	bl	80022c4 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b64      	cmp	r3, #100	@ 0x64
 8008c06:	d903      	bls.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c0e:	e005      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c10:	4b3f      	ldr	r3, [pc, #252]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0ed      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d179      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008c24:	4b39      	ldr	r3, [pc, #228]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c30:	4053      	eors	r3, r2
 8008c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d015      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c3a:	4b34      	ldr	r3, [pc, #208]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c46:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c4a:	4a30      	ldr	r2, [pc, #192]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c52:	4b2e      	ldr	r3, [pc, #184]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c56:	4a2d      	ldr	r2, [pc, #180]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008c64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c72:	d118      	bne.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7f9 fb26 	bl	80022c4 <HAL_GetTick>
 8008c78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c7c:	e00d      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c7e:	f7f9 fb21 	bl	80022c4 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008c88:	1ad2      	subs	r2, r2, r3
 8008c8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d903      	bls.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008c98:	e005      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0eb      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d129      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cbe:	d10e      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008cc0:	4b12      	ldr	r3, [pc, #72]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cd0:	091a      	lsrs	r2, r3, #4
 8008cd2:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	6113      	str	r3, [r2, #16]
 8008cdc:	e005      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008cde:	4b0b      	ldr	r3, [pc, #44]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ce8:	6113      	str	r3, [r2, #16]
 8008cea:	4b08      	ldr	r3, [pc, #32]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cfa:	4a04      	ldr	r2, [pc, #16]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d00:	e00e      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008d0a:	e009      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	58024800 	.word	0x58024800
 8008d14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f002 0301 	and.w	r3, r2, #1
 8008d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d30:	2300      	movs	r3, #0
 8008d32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f000 8089 	beq.w	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d48:	2b28      	cmp	r3, #40	@ 0x28
 8008d4a:	d86b      	bhi.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008e2d 	.word	0x08008e2d
 8008d58:	08008e25 	.word	0x08008e25
 8008d5c:	08008e25 	.word	0x08008e25
 8008d60:	08008e25 	.word	0x08008e25
 8008d64:	08008e25 	.word	0x08008e25
 8008d68:	08008e25 	.word	0x08008e25
 8008d6c:	08008e25 	.word	0x08008e25
 8008d70:	08008e25 	.word	0x08008e25
 8008d74:	08008df9 	.word	0x08008df9
 8008d78:	08008e25 	.word	0x08008e25
 8008d7c:	08008e25 	.word	0x08008e25
 8008d80:	08008e25 	.word	0x08008e25
 8008d84:	08008e25 	.word	0x08008e25
 8008d88:	08008e25 	.word	0x08008e25
 8008d8c:	08008e25 	.word	0x08008e25
 8008d90:	08008e25 	.word	0x08008e25
 8008d94:	08008e0f 	.word	0x08008e0f
 8008d98:	08008e25 	.word	0x08008e25
 8008d9c:	08008e25 	.word	0x08008e25
 8008da0:	08008e25 	.word	0x08008e25
 8008da4:	08008e25 	.word	0x08008e25
 8008da8:	08008e25 	.word	0x08008e25
 8008dac:	08008e25 	.word	0x08008e25
 8008db0:	08008e25 	.word	0x08008e25
 8008db4:	08008e2d 	.word	0x08008e2d
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008e25 	.word	0x08008e25
 8008dc0:	08008e25 	.word	0x08008e25
 8008dc4:	08008e25 	.word	0x08008e25
 8008dc8:	08008e25 	.word	0x08008e25
 8008dcc:	08008e25 	.word	0x08008e25
 8008dd0:	08008e25 	.word	0x08008e25
 8008dd4:	08008e2d 	.word	0x08008e2d
 8008dd8:	08008e25 	.word	0x08008e25
 8008ddc:	08008e25 	.word	0x08008e25
 8008de0:	08008e25 	.word	0x08008e25
 8008de4:	08008e25 	.word	0x08008e25
 8008de8:	08008e25 	.word	0x08008e25
 8008dec:	08008e25 	.word	0x08008e25
 8008df0:	08008e25 	.word	0x08008e25
 8008df4:	08008e2d 	.word	0x08008e2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	2101      	movs	r1, #1
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 ffc3 	bl	8009d8c <RCCEx_PLL2_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008e0c:	e00f      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e12:	3328      	adds	r3, #40	@ 0x28
 8008e14:	2101      	movs	r1, #1
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 f86a 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008e22:	e004      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e2a:	e000      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008e36:	4bbf      	ldr	r3, [pc, #764]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e44:	4abb      	ldr	r2, [pc, #748]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e46:	430b      	orrs	r3, r1
 8008e48:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e4a:	e003      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f002 0302 	and.w	r3, r2, #2
 8008e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d041      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e7a:	2b05      	cmp	r3, #5
 8008e7c:	d824      	bhi.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ed1 	.word	0x08008ed1
 8008e88:	08008e9d 	.word	0x08008e9d
 8008e8c:	08008eb3 	.word	0x08008eb3
 8008e90:	08008ed1 	.word	0x08008ed1
 8008e94:	08008ed1 	.word	0x08008ed1
 8008e98:	08008ed1 	.word	0x08008ed1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 ff71 	bl	8009d8c <RCCEx_PLL2_Config>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008eb0:	e00f      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb6:	3328      	adds	r3, #40	@ 0x28
 8008eb8:	2101      	movs	r1, #1
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 f818 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ec6:	e004      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ece:	e000      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008eda:	4b96      	ldr	r3, [pc, #600]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ede:	f023 0107 	bic.w	r1, r3, #7
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ee8:	4a92      	ldr	r2, [pc, #584]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008eea:	430b      	orrs	r3, r1
 8008eec:	6553      	str	r3, [r2, #84]	@ 0x54
 8008eee:	e003      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f002 0304 	and.w	r3, r2, #4
 8008f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4313      	orrs	r3, r2
 8008f16:	d044      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f20:	2b05      	cmp	r3, #5
 8008f22:	d825      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008f24:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008f79 	.word	0x08008f79
 8008f30:	08008f45 	.word	0x08008f45
 8008f34:	08008f5b 	.word	0x08008f5b
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f79 	.word	0x08008f79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f48:	3308      	adds	r3, #8
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 ff1d 	bl	8009d8c <RCCEx_PLL2_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f58:	e00f      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	3328      	adds	r3, #40	@ 0x28
 8008f60:	2101      	movs	r1, #1
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 ffc4 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f6e:	e004      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f76:	e000      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10b      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f82:	4b6c      	ldr	r3, [pc, #432]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f86:	f023 0107 	bic.w	r1, r3, #7
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f92:	4a68      	ldr	r2, [pc, #416]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f98:	e003      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f002 0320 	and.w	r3, r2, #32
 8008fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	d055      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fce:	d033      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fd4:	d82c      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fda:	d02f      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe0:	d826      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fe6:	d02b      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008fe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fec:	d820      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff2:	d012      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff8:	d81a      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d022      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009002:	d115      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009008:	3308      	adds	r3, #8
 800900a:	2100      	movs	r1, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f000 febd 	bl	8009d8c <RCCEx_PLL2_Config>
 8009012:	4603      	mov	r3, r0
 8009014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009018:	e015      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901e:	3328      	adds	r3, #40	@ 0x28
 8009020:	2102      	movs	r1, #2
 8009022:	4618      	mov	r0, r3
 8009024:	f000 ff64 	bl	8009ef0 <RCCEx_PLL3_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800902e:	e00a      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009036:	e006      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009038:	bf00      	nop
 800903a:	e004      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800903c:	bf00      	nop
 800903e:	e002      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009040:	bf00      	nop
 8009042:	e000      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800904e:	4b39      	ldr	r3, [pc, #228]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009052:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905e:	4a35      	ldr	r2, [pc, #212]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009060:	430b      	orrs	r3, r1
 8009062:	6553      	str	r3, [r2, #84]	@ 0x54
 8009064:	e003      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800906a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800907a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800907e:	2300      	movs	r3, #0
 8009080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009088:	460b      	mov	r3, r1
 800908a:	4313      	orrs	r3, r2
 800908c:	d058      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009092:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009096:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800909a:	d033      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800909c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80090a0:	d82c      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a6:	d02f      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80090a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090ac:	d826      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80090ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090b2:	d02b      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80090b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090b8:	d820      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80090ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090be:	d012      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80090c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090c4:	d81a      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d022      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80090ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ce:	d115      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	3308      	adds	r3, #8
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fe57 	bl	8009d8c <RCCEx_PLL2_Config>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090e4:	e015      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	3328      	adds	r3, #40	@ 0x28
 80090ec:	2102      	movs	r1, #2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fefe 	bl	8009ef0 <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090fa:	e00a      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009102:	e006      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009104:	bf00      	nop
 8009106:	e004      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009108:	bf00      	nop
 800910a:	e002      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800910c:	bf00      	nop
 800910e:	e000      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10e      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800911a:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800911c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800911e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800912a:	4a02      	ldr	r2, [pc, #8]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800912c:	430b      	orrs	r3, r1
 800912e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009130:	e006      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009132:	bf00      	nop
 8009134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800914c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009150:	2300      	movs	r3, #0
 8009152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009156:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800915a:	460b      	mov	r3, r1
 800915c:	4313      	orrs	r3, r2
 800915e:	d055      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009168:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800916c:	d033      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800916e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009172:	d82c      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009178:	d02f      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800917a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800917e:	d826      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009180:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009184:	d02b      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009186:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800918a:	d820      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800918c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009190:	d012      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009196:	d81a      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d022      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800919c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a0:	d115      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a6:	3308      	adds	r3, #8
 80091a8:	2100      	movs	r1, #0
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fdee 	bl	8009d8c <RCCEx_PLL2_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80091b6:	e015      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091bc:	3328      	adds	r3, #40	@ 0x28
 80091be:	2102      	movs	r1, #2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fe95 	bl	8009ef0 <RCCEx_PLL3_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80091cc:	e00a      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091d4:	e006      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80091d6:	bf00      	nop
 80091d8:	e004      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80091da:	bf00      	nop
 80091dc:	e002      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80091e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10b      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091ec:	4ba1      	ldr	r3, [pc, #644]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091fc:	4a9d      	ldr	r2, [pc, #628]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091fe:	430b      	orrs	r3, r1
 8009200:	6593      	str	r3, [r2, #88]	@ 0x58
 8009202:	e003      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800920c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	f002 0308 	and.w	r3, r2, #8
 8009218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800921c:	2300      	movs	r3, #0
 800921e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009222:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009226:	460b      	mov	r3, r1
 8009228:	4313      	orrs	r3, r2
 800922a:	d01e      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800922c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009238:	d10c      	bne.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923e:	3328      	adds	r3, #40	@ 0x28
 8009240:	2102      	movs	r1, #2
 8009242:	4618      	mov	r0, r3
 8009244:	f000 fe54 	bl	8009ef0 <RCCEx_PLL3_Config>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009254:	4b87      	ldr	r3, [pc, #540]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800925c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009264:	4a83      	ldr	r2, [pc, #524]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009266:	430b      	orrs	r3, r1
 8009268:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f002 0310 	and.w	r3, r2, #16
 8009276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800927a:	2300      	movs	r3, #0
 800927c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009280:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009284:	460b      	mov	r3, r1
 8009286:	4313      	orrs	r3, r2
 8009288:	d01e      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009296:	d10c      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929c:	3328      	adds	r3, #40	@ 0x28
 800929e:	2102      	movs	r1, #2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fe25 	bl	8009ef0 <RCCEx_PLL3_Config>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092b2:	4b70      	ldr	r3, [pc, #448]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092c2:	4a6c      	ldr	r2, [pc, #432]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092c4:	430b      	orrs	r3, r1
 80092c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80092d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092d8:	2300      	movs	r3, #0
 80092da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80092e2:	460b      	mov	r3, r1
 80092e4:	4313      	orrs	r3, r2
 80092e6:	d03e      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f4:	d022      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80092f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092fa:	d81b      	bhi.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009304:	d00b      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009306:	e015      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930c:	3308      	adds	r3, #8
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fd3b 	bl	8009d8c <RCCEx_PLL2_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800931c:	e00f      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009322:	3328      	adds	r3, #40	@ 0x28
 8009324:	2102      	movs	r1, #2
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fde2 	bl	8009ef0 <RCCEx_PLL3_Config>
 800932c:	4603      	mov	r3, r0
 800932e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009332:	e004      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800933a:	e000      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800933c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800933e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009346:	4b4b      	ldr	r3, [pc, #300]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009356:	4a47      	ldr	r2, [pc, #284]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009358:	430b      	orrs	r3, r1
 800935a:	6593      	str	r3, [r2, #88]	@ 0x58
 800935c:	e003      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009372:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009374:	2300      	movs	r3, #0
 8009376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009378:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800937c:	460b      	mov	r3, r1
 800937e:	4313      	orrs	r3, r2
 8009380:	d03b      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800938e:	d01f      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009390:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009394:	d818      	bhi.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800939a:	d003      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800939c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093a0:	d007      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80093a2:	e011      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a4:	4b33      	ldr	r3, [pc, #204]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a8:	4a32      	ldr	r2, [pc, #200]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80093b0:	e00f      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b6:	3328      	adds	r3, #40	@ 0x28
 80093b8:	2101      	movs	r1, #1
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fd98 	bl	8009ef0 <RCCEx_PLL3_Config>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80093c6:	e004      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093ce:	e000      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80093d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10b      	bne.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093da:	4b26      	ldr	r3, [pc, #152]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80093e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ea:	4a22      	ldr	r2, [pc, #136]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093ec:	430b      	orrs	r3, r1
 80093ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80093f0:	e003      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009406:	673b      	str	r3, [r7, #112]	@ 0x70
 8009408:	2300      	movs	r3, #0
 800940a:	677b      	str	r3, [r7, #116]	@ 0x74
 800940c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009410:	460b      	mov	r3, r1
 8009412:	4313      	orrs	r3, r2
 8009414:	d034      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009424:	d007      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009426:	e011      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009428:	4b12      	ldr	r3, [pc, #72]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800942e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009434:	e00e      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943a:	3308      	adds	r3, #8
 800943c:	2102      	movs	r1, #2
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fca4 	bl	8009d8c <RCCEx_PLL2_Config>
 8009444:	4603      	mov	r3, r0
 8009446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800944a:	e003      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10d      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800945c:	4b05      	ldr	r3, [pc, #20]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800945e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800946a:	4a02      	ldr	r2, [pc, #8]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800946c:	430b      	orrs	r3, r1
 800946e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009470:	e006      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009472:	bf00      	nop
 8009474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800947c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800948c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800948e:	2300      	movs	r3, #0
 8009490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009492:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009496:	460b      	mov	r3, r1
 8009498:	4313      	orrs	r3, r2
 800949a:	d00c      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	3328      	adds	r3, #40	@ 0x28
 80094a2:	2102      	movs	r1, #2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fd23 	bl	8009ef0 <RCCEx_PLL3_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80094b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80094c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80094c4:	2300      	movs	r3, #0
 80094c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80094c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80094cc:	460b      	mov	r3, r1
 80094ce:	4313      	orrs	r3, r2
 80094d0:	d038      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094de:	d018      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80094e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094e4:	d811      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80094e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ea:	d014      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80094ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f0:	d80b      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d011      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80094f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094fa:	d106      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094fc:	4bc3      	ldr	r3, [pc, #780]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	4ac2      	ldr	r2, [pc, #776]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009508:	e008      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009510:	e004      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009512:	bf00      	nop
 8009514:	e002      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009516:	bf00      	nop
 8009518:	e000      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800951a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10b      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009524:	4bb9      	ldr	r3, [pc, #740]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800952c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009534:	4ab5      	ldr	r2, [pc, #724]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009536:	430b      	orrs	r3, r1
 8009538:	6553      	str	r3, [r2, #84]	@ 0x54
 800953a:	e003      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009552:	2300      	movs	r3, #0
 8009554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009556:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800955a:	460b      	mov	r3, r1
 800955c:	4313      	orrs	r3, r2
 800955e:	d009      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009560:	4baa      	ldr	r3, [pc, #680]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009564:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800956e:	4aa7      	ldr	r2, [pc, #668]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009570:	430b      	orrs	r3, r1
 8009572:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009580:	653b      	str	r3, [r7, #80]	@ 0x50
 8009582:	2300      	movs	r3, #0
 8009584:	657b      	str	r3, [r7, #84]	@ 0x54
 8009586:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800958a:	460b      	mov	r3, r1
 800958c:	4313      	orrs	r3, r2
 800958e:	d00a      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009590:	4b9e      	ldr	r3, [pc, #632]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80095a0:	4a9a      	ldr	r2, [pc, #616]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095a2:	430b      	orrs	r3, r1
 80095a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80095a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80095b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095b4:	2300      	movs	r3, #0
 80095b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80095bc:	460b      	mov	r3, r1
 80095be:	4313      	orrs	r3, r2
 80095c0:	d009      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80095c2:	4b92      	ldr	r3, [pc, #584]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d0:	4a8e      	ldr	r2, [pc, #568]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095d2:	430b      	orrs	r3, r1
 80095d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80095e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80095e4:	2300      	movs	r3, #0
 80095e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80095e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80095ec:	460b      	mov	r3, r1
 80095ee:	4313      	orrs	r3, r2
 80095f0:	d00e      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095f2:	4b86      	ldr	r3, [pc, #536]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	4a85      	ldr	r2, [pc, #532]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095fc:	6113      	str	r3, [r2, #16]
 80095fe:	4b83      	ldr	r3, [pc, #524]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009600:	6919      	ldr	r1, [r3, #16]
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800960a:	4a80      	ldr	r2, [pc, #512]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800960c:	430b      	orrs	r3, r1
 800960e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800961c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009622:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009626:	460b      	mov	r3, r1
 8009628:	4313      	orrs	r3, r2
 800962a:	d009      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800962c:	4b77      	ldr	r3, [pc, #476]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800962e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009630:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963a:	4a74      	ldr	r2, [pc, #464]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800963c:	430b      	orrs	r3, r1
 800963e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800964c:	633b      	str	r3, [r7, #48]	@ 0x30
 800964e:	2300      	movs	r3, #0
 8009650:	637b      	str	r3, [r7, #52]	@ 0x34
 8009652:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009656:	460b      	mov	r3, r1
 8009658:	4313      	orrs	r3, r2
 800965a:	d00a      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800965c:	4b6b      	ldr	r3, [pc, #428]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800965e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009660:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800966c:	4a67      	ldr	r2, [pc, #412]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800966e:	430b      	orrs	r3, r1
 8009670:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	2100      	movs	r1, #0
 800967c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009684:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009688:	460b      	mov	r3, r1
 800968a:	4313      	orrs	r3, r2
 800968c:	d011      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009692:	3308      	adds	r3, #8
 8009694:	2100      	movs	r1, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fb78 	bl	8009d8c <RCCEx_PLL2_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80096a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	2100      	movs	r1, #0
 80096bc:	6239      	str	r1, [r7, #32]
 80096be:	f003 0302 	and.w	r3, r3, #2
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80096c8:	460b      	mov	r3, r1
 80096ca:	4313      	orrs	r3, r2
 80096cc:	d011      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d2:	3308      	adds	r3, #8
 80096d4:	2101      	movs	r1, #1
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fb58 	bl	8009d8c <RCCEx_PLL2_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80096e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	2100      	movs	r1, #0
 80096fc:	61b9      	str	r1, [r7, #24]
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	61fb      	str	r3, [r7, #28]
 8009704:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009708:	460b      	mov	r3, r1
 800970a:	4313      	orrs	r3, r2
 800970c:	d011      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009712:	3308      	adds	r3, #8
 8009714:	2102      	movs	r1, #2
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fb38 	bl	8009d8c <RCCEx_PLL2_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800972e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	2100      	movs	r1, #0
 800973c:	6139      	str	r1, [r7, #16]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009748:	460b      	mov	r3, r1
 800974a:	4313      	orrs	r3, r2
 800974c:	d011      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009752:	3328      	adds	r3, #40	@ 0x28
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fbca 	bl	8009ef0 <RCCEx_PLL3_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800976e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	2100      	movs	r1, #0
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	f003 0310 	and.w	r3, r3, #16
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009788:	460b      	mov	r3, r1
 800978a:	4313      	orrs	r3, r2
 800978c:	d011      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009792:	3328      	adds	r3, #40	@ 0x28
 8009794:	2101      	movs	r1, #1
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fbaa 	bl	8009ef0 <RCCEx_PLL3_Config>
 800979c:	4603      	mov	r3, r0
 800979e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80097a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80097b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	2100      	movs	r1, #0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80097c8:	460b      	mov	r3, r1
 80097ca:	4313      	orrs	r3, r2
 80097cc:	d011      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d2:	3328      	adds	r3, #40	@ 0x28
 80097d4:	2102      	movs	r1, #2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fb8a 	bl	8009ef0 <RCCEx_PLL3_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80097e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80097f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e000      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
}
 8009800:	4618      	mov	r0, r3
 8009802:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009806:	46bd      	mov	sp, r7
 8009808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800980c:	58024400 	.word	0x58024400

08009810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009814:	f7fe fd54 	bl	80082c0 <HAL_RCC_GetHCLKFreq>
 8009818:	4602      	mov	r2, r0
 800981a:	4b06      	ldr	r3, [pc, #24]	@ (8009834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	091b      	lsrs	r3, r3, #4
 8009820:	f003 0307 	and.w	r3, r3, #7
 8009824:	4904      	ldr	r1, [pc, #16]	@ (8009838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009826:	5ccb      	ldrb	r3, [r1, r3]
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009830:	4618      	mov	r0, r3
 8009832:	bd80      	pop	{r7, pc}
 8009834:	58024400 	.word	0x58024400
 8009838:	08024cb8 	.word	0x08024cb8

0800983c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800983c:	b480      	push	{r7}
 800983e:	b089      	sub	sp, #36	@ 0x24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009844:	4ba1      	ldr	r3, [pc, #644]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800984e:	4b9f      	ldr	r3, [pc, #636]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009852:	0b1b      	lsrs	r3, r3, #12
 8009854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800985a:	4b9c      	ldr	r3, [pc, #624]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985e:	091b      	lsrs	r3, r3, #4
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009866:	4b99      	ldr	r3, [pc, #612]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800986a:	08db      	lsrs	r3, r3, #3
 800986c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8111 	beq.w	8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b02      	cmp	r3, #2
 800988e:	f000 8083 	beq.w	8009998 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b02      	cmp	r3, #2
 8009896:	f200 80a1 	bhi.w	80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d056      	beq.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098a6:	e099      	b.n	80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a8:	4b88      	ldr	r3, [pc, #544]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d02d      	beq.n	8009910 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b4:	4b85      	ldr	r3, [pc, #532]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	08db      	lsrs	r3, r3, #3
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	4a84      	ldr	r2, [pc, #528]	@ (8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098de:	4b7b      	ldr	r3, [pc, #492]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800990e:	e087      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800991e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009922:	4b6a      	ldr	r3, [pc, #424]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009932:	ed97 6a03 	vldr	s12, [r7, #12]
 8009936:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800993a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009952:	e065      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009966:	4b59      	ldr	r3, [pc, #356]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009976:	ed97 6a03 	vldr	s12, [r7, #12]
 800997a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009996:	e043      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099aa:	4b48      	ldr	r3, [pc, #288]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80099be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099da:	e021      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ee:	4b37      	ldr	r3, [pc, #220]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a20:	4b2a      	ldr	r3, [pc, #168]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	0a5b      	lsrs	r3, r3, #9
 8009a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a46:	ee17 2a90 	vmov	r2, s15
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a52:	0c1b      	lsrs	r3, r3, #16
 8009a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a74:	ee17 2a90 	vmov	r2, s15
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a7c:	4b13      	ldr	r3, [pc, #76]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a80:	0e1b      	lsrs	r3, r3, #24
 8009a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa2:	ee17 2a90 	vmov	r2, s15
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009aaa:	e008      	b.n	8009abe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	609a      	str	r2, [r3, #8]
}
 8009abe:	bf00      	nop
 8009ac0:	3724      	adds	r7, #36	@ 0x24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	03d09000 	.word	0x03d09000
 8009ad4:	46000000 	.word	0x46000000
 8009ad8:	4c742400 	.word	0x4c742400
 8009adc:	4a742400 	.word	0x4a742400
 8009ae0:	4bbebc20 	.word	0x4bbebc20

08009ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b089      	sub	sp, #36	@ 0x24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aec:	4ba1      	ldr	r3, [pc, #644]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009af6:	4b9f      	ldr	r3, [pc, #636]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afa:	0d1b      	lsrs	r3, r3, #20
 8009afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b02:	4b9c      	ldr	r3, [pc, #624]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b0e:	4b99      	ldr	r3, [pc, #612]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b12:	08db      	lsrs	r3, r3, #3
 8009b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 8111 	beq.w	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	f000 8083 	beq.w	8009c40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	f200 80a1 	bhi.w	8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d056      	beq.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b4e:	e099      	b.n	8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b50:	4b88      	ldr	r3, [pc, #544]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02d      	beq.n	8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b5c:	4b85      	ldr	r3, [pc, #532]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	08db      	lsrs	r3, r3, #3
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	4a84      	ldr	r2, [pc, #528]	@ (8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b68:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	ee07 3a90 	vmov	s15, r3
 8009b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b7b      	ldr	r3, [pc, #492]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bb6:	e087      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b6a      	ldr	r3, [pc, #424]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfa:	e065      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0e:	4b59      	ldr	r3, [pc, #356]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3e:	e043      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c52:	4b48      	ldr	r3, [pc, #288]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c82:	e021      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	4b37      	ldr	r3, [pc, #220]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009caa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ccc:	0a5b      	lsrs	r3, r3, #9
 8009cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cee:	ee17 2a90 	vmov	r2, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1c:	ee17 2a90 	vmov	r2, s15
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d24:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d28:	0e1b      	lsrs	r3, r3, #24
 8009d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	ee17 2a90 	vmov	r2, s15
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d52:	e008      	b.n	8009d66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	609a      	str	r2, [r3, #8]
}
 8009d66:	bf00      	nop
 8009d68:	3724      	adds	r7, #36	@ 0x24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	58024400 	.word	0x58024400
 8009d78:	03d09000 	.word	0x03d09000
 8009d7c:	46000000 	.word	0x46000000
 8009d80:	4c742400 	.word	0x4c742400
 8009d84:	4a742400 	.word	0x4a742400
 8009d88:	4bbebc20 	.word	0x4bbebc20

08009d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d9a:	4b53      	ldr	r3, [pc, #332]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	f003 0303 	and.w	r3, r3, #3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d101      	bne.n	8009daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e099      	b.n	8009ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009daa:	4b4f      	ldr	r3, [pc, #316]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a4e      	ldr	r2, [pc, #312]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009db6:	f7f8 fa85 	bl	80022c4 <HAL_GetTick>
 8009dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dbc:	e008      	b.n	8009dd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dbe:	f7f8 fa81 	bl	80022c4 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d901      	bls.n	8009dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e086      	b.n	8009ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd0:	4b45      	ldr	r3, [pc, #276]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f0      	bne.n	8009dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ddc:	4b42      	ldr	r3, [pc, #264]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	031b      	lsls	r3, r3, #12
 8009dea:	493f      	ldr	r1, [pc, #252]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	025b      	lsls	r3, r3, #9
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	041b      	lsls	r3, r3, #16
 8009e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	061b      	lsls	r3, r3, #24
 8009e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e20:	4931      	ldr	r1, [pc, #196]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e26:	4b30      	ldr	r3, [pc, #192]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	492d      	ldr	r1, [pc, #180]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e38:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3c:	f023 0220 	bic.w	r2, r3, #32
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	4928      	ldr	r1, [pc, #160]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e4a:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4e:	4a26      	ldr	r2, [pc, #152]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e50:	f023 0310 	bic.w	r3, r3, #16
 8009e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e56:	4b24      	ldr	r3, [pc, #144]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e5a:	4b24      	ldr	r3, [pc, #144]	@ (8009eec <RCCEx_PLL2_Config+0x160>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	69d2      	ldr	r2, [r2, #28]
 8009e62:	00d2      	lsls	r2, r2, #3
 8009e64:	4920      	ldr	r1, [pc, #128]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e70:	f043 0310 	orr.w	r3, r3, #16
 8009e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e80:	4a19      	ldr	r2, [pc, #100]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e88:	e00f      	b.n	8009eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d106      	bne.n	8009e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e90:	4b15      	ldr	r3, [pc, #84]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	4a14      	ldr	r2, [pc, #80]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e9c:	e005      	b.n	8009eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e9e:	4b12      	ldr	r3, [pc, #72]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea2:	4a11      	ldr	r2, [pc, #68]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a0e      	ldr	r2, [pc, #56]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb6:	f7f8 fa05 	bl	80022c4 <HAL_GetTick>
 8009eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ebc:	e008      	b.n	8009ed0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ebe:	f7f8 fa01 	bl	80022c4 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d901      	bls.n	8009ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e006      	b.n	8009ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f0      	beq.n	8009ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	ffff0007 	.word	0xffff0007

08009ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009efe:	4b53      	ldr	r3, [pc, #332]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d101      	bne.n	8009f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e099      	b.n	800a042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a4e      	ldr	r2, [pc, #312]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f1a:	f7f8 f9d3 	bl	80022c4 <HAL_GetTick>
 8009f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f20:	e008      	b.n	8009f34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f22:	f7f8 f9cf 	bl	80022c4 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e086      	b.n	800a042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f34:	4b45      	ldr	r3, [pc, #276]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f0      	bne.n	8009f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f40:	4b42      	ldr	r3, [pc, #264]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	051b      	lsls	r3, r3, #20
 8009f4e:	493f      	ldr	r1, [pc, #252]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	025b      	lsls	r3, r3, #9
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	041b      	lsls	r3, r3, #16
 8009f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	061b      	lsls	r3, r3, #24
 8009f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f84:	4931      	ldr	r1, [pc, #196]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f8a:	4b30      	ldr	r3, [pc, #192]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	492d      	ldr	r1, [pc, #180]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	4928      	ldr	r1, [pc, #160]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fae:	4b27      	ldr	r3, [pc, #156]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb2:	4a26      	ldr	r2, [pc, #152]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fba:	4b24      	ldr	r3, [pc, #144]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fbe:	4b24      	ldr	r3, [pc, #144]	@ (800a050 <RCCEx_PLL3_Config+0x160>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	69d2      	ldr	r2, [r2, #28]
 8009fc6:	00d2      	lsls	r2, r2, #3
 8009fc8:	4920      	ldr	r1, [pc, #128]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fce:	4b1f      	ldr	r3, [pc, #124]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	4a19      	ldr	r2, [pc, #100]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fec:	e00f      	b.n	800a00e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d106      	bne.n	800a002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ff4:	4b15      	ldr	r3, [pc, #84]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff8:	4a14      	ldr	r2, [pc, #80]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a000:	e005      	b.n	800a00e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a002:	4b12      	ldr	r3, [pc, #72]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a006:	4a11      	ldr	r2, [pc, #68]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a00c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a00e:	4b0f      	ldr	r3, [pc, #60]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a0e      	ldr	r2, [pc, #56]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a01a:	f7f8 f953 	bl	80022c4 <HAL_GetTick>
 800a01e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a020:	e008      	b.n	800a034 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a022:	f7f8 f94f 	bl	80022c4 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e006      	b.n	800a042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a034:	4b05      	ldr	r3, [pc, #20]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0f0      	beq.n	800a022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a040:	7bfb      	ldrb	r3, [r7, #15]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	ffff0007 	.word	0xffff0007

0800a054 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e158      	b.n	800a318 <HAL_SPI_Init+0x2c4>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a5f      	ldr	r2, [pc, #380]	@ (800a1f0 <HAL_SPI_Init+0x19c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <HAL_SPI_Init+0x42>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a5e      	ldr	r2, [pc, #376]	@ (800a1f4 <HAL_SPI_Init+0x1a0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00a      	beq.n	800a096 <HAL_SPI_Init+0x42>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a5c      	ldr	r2, [pc, #368]	@ (800a1f8 <HAL_SPI_Init+0x1a4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d005      	beq.n	800a096 <HAL_SPI_Init+0x42>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	2b0f      	cmp	r3, #15
 800a090:	d901      	bls.n	800a096 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e140      	b.n	800a318 <HAL_SPI_Init+0x2c4>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 fc5a 	bl	800b950 <SPI_GetPacketSize>
 800a09c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a53      	ldr	r2, [pc, #332]	@ (800a1f0 <HAL_SPI_Init+0x19c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00c      	beq.n	800a0c2 <HAL_SPI_Init+0x6e>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a51      	ldr	r2, [pc, #324]	@ (800a1f4 <HAL_SPI_Init+0x1a0>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d007      	beq.n	800a0c2 <HAL_SPI_Init+0x6e>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a50      	ldr	r2, [pc, #320]	@ (800a1f8 <HAL_SPI_Init+0x1a4>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d002      	beq.n	800a0c2 <HAL_SPI_Init+0x6e>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d811      	bhi.n	800a0e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a1f0 <HAL_SPI_Init+0x19c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d009      	beq.n	800a0e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a48      	ldr	r2, [pc, #288]	@ (800a1f4 <HAL_SPI_Init+0x1a0>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d004      	beq.n	800a0e0 <HAL_SPI_Init+0x8c>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a47      	ldr	r2, [pc, #284]	@ (800a1f8 <HAL_SPI_Init+0x1a4>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d104      	bne.n	800a0ea <HAL_SPI_Init+0x96>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b10      	cmp	r3, #16
 800a0e4:	d901      	bls.n	800a0ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e116      	b.n	800a318 <HAL_SPI_Init+0x2c4>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d135      	bne.n	800a162 <HAL_SPI_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a3e      	ldr	r2, [pc, #248]	@ (800a1fc <HAL_SPI_Init+0x1a8>)
 800a102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a3d      	ldr	r2, [pc, #244]	@ (800a200 <HAL_SPI_Init+0x1ac>)
 800a10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a3c      	ldr	r2, [pc, #240]	@ (800a204 <HAL_SPI_Init+0x1b0>)
 800a112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a3b      	ldr	r2, [pc, #236]	@ (800a208 <HAL_SPI_Init+0x1b4>)
 800a11a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a3a      	ldr	r2, [pc, #232]	@ (800a20c <HAL_SPI_Init+0x1b8>)
 800a122:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a39      	ldr	r2, [pc, #228]	@ (800a210 <HAL_SPI_Init+0x1bc>)
 800a12a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a38      	ldr	r2, [pc, #224]	@ (800a214 <HAL_SPI_Init+0x1c0>)
 800a132:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a37      	ldr	r2, [pc, #220]	@ (800a218 <HAL_SPI_Init+0x1c4>)
 800a13a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a36      	ldr	r2, [pc, #216]	@ (800a21c <HAL_SPI_Init+0x1c8>)
 800a142:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    if (hspi->MspInitCallback == NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d103      	bne.n	800a158 <HAL_SPI_Init+0x104>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a33      	ldr	r2, [pc, #204]	@ (800a220 <HAL_SPI_Init+0x1cc>)
 800a154:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2202      	movs	r2, #2
 800a166:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f022 0201 	bic.w	r2, r2, #1
 800a178:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a184:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a18e:	d119      	bne.n	800a1c4 <HAL_SPI_Init+0x170>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a198:	d103      	bne.n	800a1a2 <HAL_SPI_Init+0x14e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <HAL_SPI_Init+0x160>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10c      	bne.n	800a1c4 <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a1ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1b2:	d107      	bne.n	800a1c4 <HAL_SPI_Init+0x170>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a1c2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d029      	beq.n	800a224 <HAL_SPI_Init+0x1d0>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	2b06      	cmp	r3, #6
 800a1d6:	d925      	bls.n	800a224 <HAL_SPI_Init+0x1d0>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	e021      	b.n	800a234 <HAL_SPI_Init+0x1e0>
 800a1f0:	40013000 	.word	0x40013000
 800a1f4:	40003800 	.word	0x40003800
 800a1f8:	40003c00 	.word	0x40003c00
 800a1fc:	0800b54d 	.word	0x0800b54d
 800a200:	0800b561 	.word	0x0800b561
 800a204:	0800b575 	.word	0x0800b575
 800a208:	0800b589 	.word	0x0800b589
 800a20c:	0800b59d 	.word	0x0800b59d
 800a210:	0800b5b1 	.word	0x0800b5b1
 800a214:	0800b5c5 	.word	0x0800b5c5
 800a218:	0800b5d9 	.word	0x0800b5d9
 800a21c:	0800b5ed 	.word	0x0800b5ed
 800a220:	080014b5 	.word	0x080014b5
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a232:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69da      	ldr	r2, [r3, #28]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23c:	431a      	orrs	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a246:	ea42 0103 	orr.w	r1, r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25e:	431a      	orrs	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a264:	431a      	orrs	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	431a      	orrs	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a288:	431a      	orrs	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	431a      	orrs	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a294:	ea42 0103 	orr.w	r1, r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d113      	bne.n	800a2d4 <HAL_SPI_Init+0x280>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2be:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a2d2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0201 	bic.w	r2, r2, #1
 800a2e2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <HAL_SPI_Init+0x2b2>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_SPI_RegisterCallback>:
  *         to register callbacks for HAL_SPI_MSPINIT_CB_ID and HAL_SPI_MSPDEINIT_CB_ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	460b      	mov	r3, r1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a33e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e08f      	b.n	800a46c <HAL_SPI_RegisterCallback+0x14c>
  }

  if (HAL_SPI_STATE_READY == hspi->State)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b01      	cmp	r3, #1
 800a356:	d15d      	bne.n	800a414 <HAL_SPI_RegisterCallback+0xf4>
  {
    switch (CallbackID)
 800a358:	7afb      	ldrb	r3, [r7, #11]
 800a35a:	2b0a      	cmp	r3, #10
 800a35c:	d84f      	bhi.n	800a3fe <HAL_SPI_RegisterCallback+0xde>
 800a35e:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <HAL_SPI_RegisterCallback+0x44>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a391 	.word	0x0800a391
 800a368:	0800a39b 	.word	0x0800a39b
 800a36c:	0800a3a5 	.word	0x0800a3a5
 800a370:	0800a3af 	.word	0x0800a3af
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3c3 	.word	0x0800a3c3
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a3d7 	.word	0x0800a3d7
 800a384:	0800a3e1 	.word	0x0800a3e1
 800a388:	0800a3eb 	.word	0x0800a3eb
 800a38c:	0800a3f5 	.word	0x0800a3f5
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a398:	e067      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a3a2:	e062      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a3ac:	e05d      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a3b6:	e058      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a3c0:	e053      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a3ca:	e04e      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a3d4:	e049      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a3de:	e044      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_SUSPEND_CB_ID :
        hspi->SuspendCallback = pCallback;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a3e8:	e03f      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a3f2:	e03a      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a3fc:	e035      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a404:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Return error status */
        status =  HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	75fb      	strb	r3, [r7, #23]
        break;
 800a412:	e02a      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d11a      	bne.n	800a456 <HAL_SPI_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	2b09      	cmp	r3, #9
 800a424:	d002      	beq.n	800a42c <HAL_SPI_RegisterCallback+0x10c>
 800a426:	2b0a      	cmp	r3, #10
 800a428:	d005      	beq.n	800a436 <HAL_SPI_RegisterCallback+0x116>
 800a42a:	e009      	b.n	800a440 <HAL_SPI_RegisterCallback+0x120>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a434:	e019      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a43e:	e014      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a446:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Return error status */
        status =  HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	75fb      	strb	r3, [r7, #23]
        break;
 800a454:	e009      	b.n	800a46a <HAL_SPI_RegisterCallback+0x14a>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return error status */
    status =  HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	4613      	mov	r3, r2
 800a486:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3320      	adds	r3, #32
 800a48e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a490:	f7f7 ff18 	bl	80022c4 <HAL_GetTick>
 800a494:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d001      	beq.n	800a4a6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	e1d1      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <HAL_SPI_Transmit+0x3a>
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e1c9      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_SPI_Transmit+0x4c>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e1c2      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2203      	movs	r2, #3
 800a4d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	88fa      	ldrh	r2, [r7, #6]
 800a4e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	88fa      	ldrh	r2, [r7, #6]
 800a4ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a51c:	d108      	bne.n	800a530 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e009      	b.n	800a544 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a542:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	4b96      	ldr	r3, [pc, #600]	@ (800a7a4 <HAL_SPI_Transmit+0x32c>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	88f9      	ldrh	r1, [r7, #6]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	6812      	ldr	r2, [r2, #0]
 800a554:	430b      	orrs	r3, r1
 800a556:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0201 	orr.w	r2, r2, #1
 800a566:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a570:	d107      	bne.n	800a582 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	2b0f      	cmp	r3, #15
 800a588:	d947      	bls.n	800a61a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a58a:	e03f      	b.n	800a60c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b02      	cmp	r3, #2
 800a598:	d114      	bne.n	800a5c4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5aa:	1d1a      	adds	r2, r3, #4
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a5c2:	e023      	b.n	800a60c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5c4:	f7f7 fe7e 	bl	80022c4 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d803      	bhi.n	800a5dc <HAL_SPI_Transmit+0x164>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5da:	d102      	bne.n	800a5e2 <HAL_SPI_Transmit+0x16a>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d114      	bne.n	800a60c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f001 f8e6 	bl	800b7b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e11e      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a612:	b29b      	uxth	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1b9      	bne.n	800a58c <HAL_SPI_Transmit+0x114>
 800a618:	e0f1      	b.n	800a7fe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b07      	cmp	r3, #7
 800a620:	f240 80e6 	bls.w	800a7f0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a624:	e05d      	b.n	800a6e2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b02      	cmp	r3, #2
 800a632:	d132      	bne.n	800a69a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d918      	bls.n	800a672 <HAL_SPI_Transmit+0x1fa>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d014      	beq.n	800a672 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a658:	1d1a      	adds	r2, r3, #4
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a664:	b29b      	uxth	r3, r3
 800a666:	3b02      	subs	r3, #2
 800a668:	b29a      	uxth	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a670:	e037      	b.n	800a6e2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a676:	881a      	ldrh	r2, [r3, #0]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a680:	1c9a      	adds	r2, r3, #2
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a698:	e023      	b.n	800a6e2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a69a:	f7f7 fe13 	bl	80022c4 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d803      	bhi.n	800a6b2 <HAL_SPI_Transmit+0x23a>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d102      	bne.n	800a6b8 <HAL_SPI_Transmit+0x240>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d114      	bne.n	800a6e2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f001 f87b 	bl	800b7b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e0b3      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d19b      	bne.n	800a626 <HAL_SPI_Transmit+0x1ae>
 800a6ee:	e086      	b.n	800a7fe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d154      	bne.n	800a7a8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a704:	b29b      	uxth	r3, r3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d918      	bls.n	800a73c <HAL_SPI_Transmit+0x2c4>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a70e:	2b40      	cmp	r3, #64	@ 0x40
 800a710:	d914      	bls.n	800a73c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6812      	ldr	r2, [r2, #0]
 800a71c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a722:	1d1a      	adds	r2, r3, #4
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a72e:	b29b      	uxth	r3, r3
 800a730:	3b04      	subs	r3, #4
 800a732:	b29a      	uxth	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a73a:	e059      	b.n	800a7f0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a742:	b29b      	uxth	r3, r3
 800a744:	2b01      	cmp	r3, #1
 800a746:	d917      	bls.n	800a778 <HAL_SPI_Transmit+0x300>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d013      	beq.n	800a778 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a754:	881a      	ldrh	r2, [r3, #0]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a75e:	1c9a      	adds	r2, r3, #2
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	3b02      	subs	r3, #2
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a776:	e03b      	b.n	800a7f0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3320      	adds	r3, #32
 800a782:	7812      	ldrb	r2, [r2, #0]
 800a784:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a796:	b29b      	uxth	r3, r3
 800a798:	3b01      	subs	r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7a2:	e025      	b.n	800a7f0 <HAL_SPI_Transmit+0x378>
 800a7a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7a8:	f7f7 fd8c 	bl	80022c4 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d803      	bhi.n	800a7c0 <HAL_SPI_Transmit+0x348>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7be:	d102      	bne.n	800a7c6 <HAL_SPI_Transmit+0x34e>
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d114      	bne.n	800a7f0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fff4 	bl	800b7b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e02c      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f47f af79 	bne.w	800a6f0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2200      	movs	r2, #0
 800a806:	2108      	movs	r1, #8
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f001 f873 	bl	800b8f4 <SPI_WaitOnFlagUntilTimeout>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d007      	beq.n	800a824 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a81a:	f043 0220 	orr.w	r2, r3, #32
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 ffc5 	bl	800b7b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a848:	2300      	movs	r3, #0
  }
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop

0800a854 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	4613      	mov	r3, r2
 800a862:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a868:	095b      	lsrs	r3, r3, #5
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	3301      	adds	r3, #1
 800a86e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3330      	adds	r3, #48	@ 0x30
 800a876:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a878:	f7f7 fd24 	bl	80022c4 <HAL_GetTick>
 800a87c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b01      	cmp	r3, #1
 800a888:	d001      	beq.n	800a88e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a88a:	2302      	movs	r3, #2
 800a88c:	e250      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <HAL_SPI_Receive+0x46>
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e248      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_SPI_Receive+0x58>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e241      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2204      	movs	r2, #4
 800a8b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	88fa      	ldrh	r2, [r7, #6]
 800a8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	88fa      	ldrh	r2, [r7, #6]
 800a8d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a904:	d108      	bne.n	800a918 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	e009      	b.n	800a92c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a92a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	4b95      	ldr	r3, [pc, #596]	@ (800ab88 <HAL_SPI_Receive+0x334>)
 800a934:	4013      	ands	r3, r2
 800a936:	88f9      	ldrh	r1, [r7, #6]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	6812      	ldr	r2, [r2, #0]
 800a93c:	430b      	orrs	r3, r1
 800a93e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 0201 	orr.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a958:	d107      	bne.n	800a96a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a968:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	2b0f      	cmp	r3, #15
 800a970:	d96c      	bls.n	800aa4c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a972:	e064      	b.n	800aa3e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b01      	cmp	r3, #1
 800a988:	d114      	bne.n	800a9b4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a992:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a994:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a99a:	1d1a      	adds	r2, r3, #4
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a9b2:	e044      	b.n	800aa3e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	8bfa      	ldrh	r2, [r7, #30]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d919      	bls.n	800a9f6 <HAL_SPI_Receive+0x1a2>
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d014      	beq.n	800a9f6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a9d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9dc:	1d1a      	adds	r2, r3, #4
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a9f4:	e023      	b.n	800aa3e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9f6:	f7f7 fc65 	bl	80022c4 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d803      	bhi.n	800aa0e <HAL_SPI_Receive+0x1ba>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d102      	bne.n	800aa14 <HAL_SPI_Receive+0x1c0>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d114      	bne.n	800aa3e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 fecd 	bl	800b7b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e178      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d194      	bne.n	800a974 <HAL_SPI_Receive+0x120>
 800aa4a:	e15e      	b.n	800ad0a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b07      	cmp	r3, #7
 800aa52:	f240 8153 	bls.w	800acfc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800aa56:	e08f      	b.n	800ab78 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d114      	bne.n	800aa98 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	8812      	ldrh	r2, [r2, #0]
 800aa76:	b292      	uxth	r2, r2
 800aa78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa7e:	1c9a      	adds	r2, r3, #2
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aa96:	e06f      	b.n	800ab78 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	8bfa      	ldrh	r2, [r7, #30]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d924      	bls.n	800aaf0 <HAL_SPI_Receive+0x29c>
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d01f      	beq.n	800aaf0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	8812      	ldrh	r2, [r2, #0]
 800aab8:	b292      	uxth	r2, r2
 800aaba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aac0:	1c9a      	adds	r2, r3, #2
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	8812      	ldrh	r2, [r2, #0]
 800aace:	b292      	uxth	r2, r2
 800aad0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aad6:	1c9a      	adds	r2, r3, #2
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	3b02      	subs	r3, #2
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aaee:	e043      	b.n	800ab78 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d119      	bne.n	800ab30 <HAL_SPI_Receive+0x2dc>
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d014      	beq.n	800ab30 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	8812      	ldrh	r2, [r2, #0]
 800ab0e:	b292      	uxth	r2, r2
 800ab10:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab16:	1c9a      	adds	r2, r3, #2
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b01      	subs	r3, #1
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ab2e:	e023      	b.n	800ab78 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab30:	f7f7 fbc8 	bl	80022c4 <HAL_GetTick>
 800ab34:	4602      	mov	r2, r0
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d803      	bhi.n	800ab48 <HAL_SPI_Receive+0x2f4>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab46:	d102      	bne.n	800ab4e <HAL_SPI_Receive+0x2fa>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d114      	bne.n	800ab78 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fe30 	bl	800b7b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e0db      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f47f af69 	bne.w	800aa58 <HAL_SPI_Receive+0x204>
 800ab86:	e0c0      	b.n	800ad0a <HAL_SPI_Receive+0x4b6>
 800ab88:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d117      	bne.n	800abd2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	b2d2      	uxtb	r2, r2
 800abb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	3b01      	subs	r3, #1
 800abc8:	b29a      	uxth	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800abd0:	e094      	b.n	800acfc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abd8:	b29b      	uxth	r3, r3
 800abda:	8bfa      	ldrh	r2, [r7, #30]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d946      	bls.n	800ac6e <HAL_SPI_Receive+0x41a>
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d041      	beq.n	800ac6e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abf6:	7812      	ldrb	r2, [r2, #0]
 800abf8:	b2d2      	uxtb	r2, r2
 800abfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac12:	7812      	ldrb	r2, [r2, #0]
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3b04      	subs	r3, #4
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ac6c:	e046      	b.n	800acfc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d81c      	bhi.n	800acb4 <HAL_SPI_Receive+0x460>
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d017      	beq.n	800acb4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac90:	7812      	ldrb	r2, [r2, #0]
 800ac92:	b2d2      	uxtb	r2, r2
 800ac94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b29a      	uxth	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800acb2:	e023      	b.n	800acfc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acb4:	f7f7 fb06 	bl	80022c4 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d803      	bhi.n	800accc <HAL_SPI_Receive+0x478>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d102      	bne.n	800acd2 <HAL_SPI_Receive+0x47e>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d114      	bne.n	800acfc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f000 fd6e 	bl	800b7b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e019      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f47f af41 	bne.w	800ab8c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 fd52 	bl	800b7b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
  }
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d001      	beq.n	800ad56 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800ad52:	2302      	movs	r3, #2
 800ad54:	e126      	b.n	800afa4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <HAL_SPI_Transmit_DMA+0x2a>
 800ad5c:	88fb      	ldrh	r3, [r7, #6]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e11e      	b.n	800afa4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_SPI_Transmit_DMA+0x3c>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e117      	b.n	800afa4 <HAL_SPI_Transmit_DMA+0x26c>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2203      	movs	r2, #3
 800ad80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	88fa      	ldrh	r2, [r7, #6]
 800ad9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800adcc:	d108      	bne.n	800ade0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	e009      	b.n	800adf4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800adf2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	2b0f      	cmp	r3, #15
 800adfa:	d905      	bls.n	800ae08 <HAL_SPI_Transmit_DMA+0xd0>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae06:	d10f      	bne.n	800ae28 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ae0c:	2b07      	cmp	r3, #7
 800ae0e:	d911      	bls.n	800ae34 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae1a:	d00b      	beq.n	800ae34 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae20:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ae22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae26:	d005      	beq.n	800ae34 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e0b7      	b.n	800afa4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	2b07      	cmp	r3, #7
 800ae3a:	d820      	bhi.n	800ae7e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae46:	d109      	bne.n	800ae5c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3301      	adds	r3, #1
 800ae52:	105b      	asrs	r3, r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae66:	d11e      	bne.n	800aea6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	3303      	adds	r3, #3
 800ae72:	109b      	asrs	r3, r3, #2
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ae7c:	e013      	b.n	800aea6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	2b0f      	cmp	r3, #15
 800ae84:	d80f      	bhi.n	800aea6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae90:	d109      	bne.n	800aea6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	105b      	asrs	r3, r3, #1
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aeaa:	4a40      	ldr	r2, [pc, #256]	@ (800afac <HAL_SPI_Transmit_DMA+0x274>)
 800aeac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aeb2:	4a3f      	ldr	r2, [pc, #252]	@ (800afb0 <HAL_SPI_Transmit_DMA+0x278>)
 800aeb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aeba:	4a3e      	ldr	r2, [pc, #248]	@ (800afb4 <HAL_SPI_Transmit_DMA+0x27c>)
 800aebc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aec2:	2200      	movs	r2, #0
 800aec4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aed4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aede:	4619      	mov	r1, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3320      	adds	r3, #32
 800aee6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aeee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800aef0:	f7f7 fe60 	bl	8002bb4 <HAL_DMA_Start_IT>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d011      	beq.n	800af1e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af00:	f043 0210 	orr.w	r2, r3, #16
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e042      	b.n	800afa4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af28:	d108      	bne.n	800af3c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6859      	ldr	r1, [r3, #4]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b20      	ldr	r3, [pc, #128]	@ (800afb8 <HAL_SPI_Transmit_DMA+0x280>)
 800af36:	400b      	ands	r3, r1
 800af38:	6053      	str	r3, [r2, #4]
 800af3a:	e009      	b.n	800af50 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	4b1d      	ldr	r3, [pc, #116]	@ (800afb8 <HAL_SPI_Transmit_DMA+0x280>)
 800af44:	4013      	ands	r3, r2
 800af46:	88f9      	ldrh	r1, [r7, #6]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	6812      	ldr	r2, [r2, #0]
 800af4c:	430b      	orrs	r3, r1
 800af4e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af5e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691a      	ldr	r2, [r3, #16]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800af6e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f042 0201 	orr.w	r2, r2, #1
 800af7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af88:	d107      	bne.n	800af9a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af98:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	0800b64b 	.word	0x0800b64b
 800afb0:	0800b601 	.word	0x0800b601
 800afb4:	0800b66b 	.word	0x0800b66b
 800afb8:	ffff0000 	.word	0xffff0000

0800afbc <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <HAL_SPI_Abort+0x16>
 800afce:	2302      	movs	r3, #2
 800afd0:	e0d9      	b.n	800b186 <HAL_SPI_Abort+0x1ca>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2207      	movs	r2, #7
 800afde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800afe6:	4b6a      	ldr	r3, [pc, #424]	@ (800b190 <HAL_SPI_Abort+0x1d4>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a6a      	ldr	r2, [pc, #424]	@ (800b194 <HAL_SPI_Abort+0x1d8>)
 800afec:	fba2 2303 	umull	r2, r3, r2, r3
 800aff0:	0a5b      	lsrs	r3, r3, #9
 800aff2:	2264      	movs	r2, #100	@ 0x64
 800aff4:	fb02 f303 	mul.w	r3, r2, r3
 800aff8:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b008:	d15b      	bne.n	800b0c2 <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	691a      	ldr	r2, [r3, #16]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 0208 	bic.w	r2, r2, #8
 800b018:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d108      	bne.n	800b038 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b02c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b036:	e006      	b.n	800b046 <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0308 	and.w	r3, r3, #8
 800b042:	2b08      	cmp	r3, #8
 800b044:	d0e9      	beq.n	800b01a <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b054:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	3b01      	subs	r3, #1
 800b05a:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d108      	bne.n	800b074 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b068:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b072:	e007      	b.n	800b084 <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b07e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b082:	d0e8      	beq.n	800b056 <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b092:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3b01      	subs	r3, #1
 800b098:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d108      	bne.n	800b0b2 <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b0b0:	e007      	b.n	800b0c2 <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0c0:	d0e8      	beq.n	800b094 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0d0:	d11b      	bne.n	800b10a <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d017      	beq.n	800b10a <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0de:	2200      	movs	r2, #0
 800b0e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f7 ffce 	bl	8003088 <HAL_DMA_Abort>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7f9 fcae 	bl	8004a58 <HAL_DMA_GetError>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	d103      	bne.n	800b10a <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2240      	movs	r2, #64	@ 0x40
 800b106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b118:	d11b      	bne.n	800b152 <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d017      	beq.n	800b152 <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b126:	2200      	movs	r2, #0
 800b128:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b12e:	4618      	mov	r0, r3
 800b130:	f7f7 ffaa 	bl	8003088 <HAL_DMA_Abort>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00b      	beq.n	800b152 <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b13e:	4618      	mov	r0, r3
 800b140:	f7f9 fc8a 	bl	8004a58 <HAL_DMA_GetError>
 800b144:	4603      	mov	r3, r0
 800b146:	2b20      	cmp	r3, #32
 800b148:	d103      	bne.n	800b152 <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2240      	movs	r2, #64	@ 0x40
 800b14e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 faca 	bl	800b6ec <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b15e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b162:	2b40      	cmp	r3, #64	@ 0x40
 800b164:	d102      	bne.n	800b16c <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	73fb      	strb	r3, [r7, #15]
 800b16a:	e003      	b.n	800b174 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	24000000 	.word	0x24000000
 800b194:	057619f1 	.word	0x057619f1

0800b198 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08a      	sub	sp, #40	@ 0x28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b1b0:	6a3a      	ldr	r2, [r7, #32]
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1ca:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3330      	adds	r3, #48	@ 0x30
 800b1d2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d012      	beq.n	800b204 <HAL_SPI_IRQHandler+0x6c>
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f003 0308 	and.w	r3, r3, #8
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00d      	beq.n	800b204 <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699a      	ldr	r2, [r3, #24]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1f6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b202:	e19c      	b.n	800b53e <HAL_SPI_IRQHandler+0x3a6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d113      	bne.n	800b236 <HAL_SPI_IRQHandler+0x9e>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10e      	bne.n	800b236 <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d009      	beq.n	800b236 <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
    handled = 1UL;
 800b232:	2301      	movs	r3, #1
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10f      	bne.n	800b260 <HAL_SPI_IRQHandler+0xc8>
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b250:	2b00      	cmp	r3, #0
 800b252:	d105      	bne.n	800b260 <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
    handled = 1UL;
 800b25c:	2301      	movs	r3, #1
 800b25e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	f003 0320 	and.w	r3, r3, #32
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10f      	bne.n	800b28a <HAL_SPI_IRQHandler+0xf2>
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00a      	beq.n	800b28a <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d105      	bne.n	800b28a <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4798      	blx	r3
    handled = 1UL;
 800b286:	2301      	movs	r3, #1
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f040 8151 	bne.w	800b534 <HAL_SPI_IRQHandler+0x39c>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	f003 0308 	and.w	r3, r3, #8
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 8093 	beq.w	800b3c4 <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	699a      	ldr	r2, [r3, #24]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f042 0208 	orr.w	r2, r2, #8
 800b2ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	699a      	ldr	r2, [r3, #24]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f042 0210 	orr.w	r2, r2, #16
 800b2bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	699a      	ldr	r2, [r3, #24]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2cc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	691a      	ldr	r2, [r3, #16]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 0208 	bic.w	r2, r2, #8
 800b2dc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d13d      	bne.n	800b368 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b2ec:	e036      	b.n	800b35c <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	2b0f      	cmp	r3, #15
 800b2f4:	d90b      	bls.n	800b30e <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b300:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b306:	1d1a      	adds	r2, r3, #4
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	665a      	str	r2, [r3, #100]	@ 0x64
 800b30c:	e01d      	b.n	800b34a <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	2b07      	cmp	r3, #7
 800b314:	d90b      	bls.n	800b32e <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	8812      	ldrh	r2, [r2, #0]
 800b31e:	b292      	uxth	r2, r2
 800b320:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b326:	1c9a      	adds	r2, r3, #2
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	665a      	str	r2, [r3, #100]	@ 0x64
 800b32c:	e00d      	b.n	800b34a <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b33a:	7812      	ldrb	r2, [r2, #0]
 800b33c:	b2d2      	uxtb	r2, r2
 800b33e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b350:	b29b      	uxth	r3, r3
 800b352:	3b01      	subs	r3, #1
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b362:	b29b      	uxth	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1c2      	bne.n	800b2ee <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fa23 	bl	800b7b4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d005      	beq.n	800b38c <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b38a:	e0d8      	b.n	800b53e <HAL_SPI_IRQHandler+0x3a6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b38c:	7cfb      	ldrb	r3, [r7, #19]
 800b38e:	2b05      	cmp	r3, #5
 800b390:	d105      	bne.n	800b39e <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b39c:	e0cc      	b.n	800b538 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b39e:	7cfb      	ldrb	r3, [r7, #19]
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d105      	bne.n	800b3b0 <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
    return;
 800b3ae:	e0c3      	b.n	800b538 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b3b0:	7cfb      	ldrb	r3, [r7, #19]
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	f040 80c0 	bne.w	800b538 <HAL_SPI_IRQHandler+0x3a0>
      hspi->TxCpltCallback(hspi);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	4798      	blx	r3
    return;
 800b3c2:	e0b9      	b.n	800b538 <HAL_SPI_IRQHandler+0x3a0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 80b7 	beq.w	800b53e <HAL_SPI_IRQHandler+0x3a6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00f      	beq.n	800b3fa <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3e0:	f043 0204 	orr.w	r2, r3, #4
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	699a      	ldr	r2, [r3, #24]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00f      	beq.n	800b424 <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b40a:	f043 0201 	orr.w	r2, r3, #1
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699a      	ldr	r2, [r3, #24]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b422:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00f      	beq.n	800b44e <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b434:	f043 0208 	orr.w	r2, r3, #8
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	699a      	ldr	r2, [r3, #24]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b44c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	f003 0320 	and.w	r3, r3, #32
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00f      	beq.n	800b478 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b45e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	699a      	ldr	r2, [r3, #24]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0220 	orr.w	r2, r2, #32
 800b476:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d05c      	beq.n	800b53c <HAL_SPI_IRQHandler+0x3a4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 0201 	bic.w	r2, r2, #1
 800b490:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6919      	ldr	r1, [r3, #16]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	4b29      	ldr	r3, [pc, #164]	@ (800b544 <HAL_SPI_IRQHandler+0x3ac>)
 800b49e:	400b      	ands	r3, r1
 800b4a0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b4a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b4ac:	d138      	bne.n	800b520 <HAL_SPI_IRQHandler+0x388>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b4bc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d013      	beq.n	800b4ee <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b548 <HAL_SPI_IRQHandler+0x3b0>)
 800b4cc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f8 f8f6 	bl	80036c4 <HAL_DMA_Abort_IT>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d022      	beq.n	800b53c <HAL_SPI_IRQHandler+0x3a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4fa:	4a13      	ldr	r2, [pc, #76]	@ (800b548 <HAL_SPI_IRQHandler+0x3b0>)
 800b4fc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b502:	4618      	mov	r0, r3
 800b504:	f7f8 f8de 	bl	80036c4 <HAL_DMA_Abort_IT>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d016      	beq.n	800b53c <HAL_SPI_IRQHandler+0x3a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b514:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b51e:	e00d      	b.n	800b53c <HAL_SPI_IRQHandler+0x3a4>
        hspi->State = HAL_SPI_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        hspi->ErrorCallback(hspi);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	4798      	blx	r3
    return;
 800b532:	e003      	b.n	800b53c <HAL_SPI_IRQHandler+0x3a4>
    return;
 800b534:	bf00      	nop
 800b536:	e002      	b.n	800b53e <HAL_SPI_IRQHandler+0x3a6>
    return;
 800b538:	bf00      	nop
 800b53a:	e000      	b.n	800b53e <HAL_SPI_IRQHandler+0x3a6>
    return;
 800b53c:	bf00      	nop
  }
}
 800b53e:	3728      	adds	r7, #40	@ 0x28
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	fffffc94 	.word	0xfffffc94
 800b548:	0800b6b5 	.word	0x0800b6b5

0800b54c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b60c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b07      	cmp	r3, #7
 800b618:	d013      	beq.n	800b642 <SPI_DMATransmitCplt+0x42>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b624:	d105      	bne.n	800b632 <SPI_DMATransmitCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b630:	e007      	b.n	800b642 <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	691a      	ldr	r2, [r3, #16]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f042 0208 	orr.w	r2, r2, #8
 800b640:	611a      	str	r2, [r3, #16]
}
 800b642:	bf00      	nop
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b656:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b676:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7f9 f9ed 	bl	8004a58 <HAL_DMA_GetError>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b02      	cmp	r3, #2
 800b682:	d013      	beq.n	800b6ac <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f000 f895 	bl	800b7b4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b690:	f043 0210 	orr.w	r2, r3, #16
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6e4:	bf00      	nop
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6919      	ldr	r1, [r3, #16]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	4b28      	ldr	r3, [pc, #160]	@ (800b7b0 <SPI_AbortTransfer+0xc4>)
 800b710:	400b      	ands	r3, r1
 800b712:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0208 	orr.w	r2, r2, #8
 800b722:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	699a      	ldr	r2, [r3, #24]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0210 	orr.w	r2, r2, #16
 800b732:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	689a      	ldr	r2, [r3, #8]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b742:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	699a      	ldr	r2, [r3, #24]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b752:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	699a      	ldr	r2, [r3, #24]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0220 	orr.w	r2, r2, #32
 800b762:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	699a      	ldr	r2, [r3, #24]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b772:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	699a      	ldr	r2, [r3, #24]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b782:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699a      	ldr	r2, [r3, #24]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b792:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	fffffc90 	.word	0xfffffc90

0800b7b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	699a      	ldr	r2, [r3, #24]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f042 0208 	orr.w	r2, r2, #8
 800b7d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	699a      	ldr	r2, [r3, #24]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f042 0210 	orr.w	r2, r2, #16
 800b7e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f022 0201 	bic.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6919      	ldr	r1, [r3, #16]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	4b3c      	ldr	r3, [pc, #240]	@ (800b8f0 <SPI_CloseTransfer+0x13c>)
 800b800:	400b      	ands	r3, r1
 800b802:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b812:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d014      	beq.n	800b84a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f003 0320 	and.w	r3, r3, #32
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00f      	beq.n	800b84a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b830:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	699a      	ldr	r2, [r3, #24]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f042 0220 	orr.w	r2, r2, #32
 800b848:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b03      	cmp	r3, #3
 800b854:	d014      	beq.n	800b880 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00f      	beq.n	800b880 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b866:	f043 0204 	orr.w	r2, r3, #4
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	699a      	ldr	r2, [r3, #24]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b87e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00f      	beq.n	800b8aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b890:	f043 0201 	orr.w	r2, r3, #1
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	699a      	ldr	r2, [r3, #24]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00f      	beq.n	800b8d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8ba:	f043 0208 	orr.w	r2, r3, #8
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	699a      	ldr	r2, [r3, #24]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b8e4:	bf00      	nop
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	fffffc90 	.word	0xfffffc90

0800b8f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	4613      	mov	r3, r2
 800b902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b904:	e010      	b.n	800b928 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b906:	f7f6 fcdd 	bl	80022c4 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d803      	bhi.n	800b91e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91c:	d102      	bne.n	800b924 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e00f      	b.n	800b948 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	695a      	ldr	r2, [r3, #20]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	4013      	ands	r3, r2
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	429a      	cmp	r2, r3
 800b936:	bf0c      	ite	eq
 800b938:	2301      	moveq	r3, #1
 800b93a:	2300      	movne	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	429a      	cmp	r2, r3
 800b944:	d0df      	beq.n	800b906 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95c:	095b      	lsrs	r3, r3, #5
 800b95e:	3301      	adds	r3, #1
 800b960:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	3301      	adds	r3, #1
 800b968:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3307      	adds	r3, #7
 800b96e:	08db      	lsrs	r3, r3, #3
 800b970:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	fb02 f303 	mul.w	r3, r2, r3
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e049      	b.n	800ba2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d106      	bne.n	800b9b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7f5 fea3 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f000 fb7b 	bl	800c0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d001      	beq.n	800ba4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e054      	b.n	800baf6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68da      	ldr	r2, [r3, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f042 0201 	orr.w	r2, r2, #1
 800ba62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a26      	ldr	r2, [pc, #152]	@ (800bb04 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d022      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba76:	d01d      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a22      	ldr	r2, [pc, #136]	@ (800bb08 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d018      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a21      	ldr	r2, [pc, #132]	@ (800bb0c <HAL_TIM_Base_Start_IT+0xd8>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d013      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a1f      	ldr	r2, [pc, #124]	@ (800bb10 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d00e      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb14 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d009      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1c      	ldr	r2, [pc, #112]	@ (800bb18 <HAL_TIM_Base_Start_IT+0xe4>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d004      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x80>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a1b      	ldr	r2, [pc, #108]	@ (800bb1c <HAL_TIM_Base_Start_IT+0xe8>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d115      	bne.n	800bae0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689a      	ldr	r2, [r3, #8]
 800baba:	4b19      	ldr	r3, [pc, #100]	@ (800bb20 <HAL_TIM_Base_Start_IT+0xec>)
 800babc:	4013      	ands	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b06      	cmp	r3, #6
 800bac4:	d015      	beq.n	800baf2 <HAL_TIM_Base_Start_IT+0xbe>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bacc:	d011      	beq.n	800baf2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f042 0201 	orr.w	r2, r2, #1
 800badc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bade:	e008      	b.n	800baf2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f042 0201 	orr.w	r2, r2, #1
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	e000      	b.n	800baf4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	40010000 	.word	0x40010000
 800bb08:	40000400 	.word	0x40000400
 800bb0c:	40000800 	.word	0x40000800
 800bb10:	40000c00 	.word	0x40000c00
 800bb14:	40010400 	.word	0x40010400
 800bb18:	40001800 	.word	0x40001800
 800bb1c:	40014000 	.word	0x40014000
 800bb20:	00010007 	.word	0x00010007

0800bb24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e08f      	b.n	800bc58 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7f5 fdf3 	bl	8001738 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2202      	movs	r2, #2
 800bb56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6899      	ldr	r1, [r3, #8]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	4b3e      	ldr	r3, [pc, #248]	@ (800bc60 <HAL_TIM_Encoder_Init+0x13c>)
 800bb66:	400b      	ands	r3, r1
 800bb68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4619      	mov	r1, r3
 800bb74:	4610      	mov	r0, r2
 800bb76:	f000 faa3 	bl	800c0c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4b31      	ldr	r3, [pc, #196]	@ (800bc64 <HAL_TIM_Encoder_Init+0x140>)
 800bba0:	4013      	ands	r3, r2
 800bba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	021b      	lsls	r3, r3, #8
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	4b2b      	ldr	r3, [pc, #172]	@ (800bc68 <HAL_TIM_Encoder_Init+0x144>)
 800bbba:	4013      	ands	r3, r2
 800bbbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	4b2a      	ldr	r3, [pc, #168]	@ (800bc6c <HAL_TIM_Encoder_Init+0x148>)
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68da      	ldr	r2, [r3, #12]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	021b      	lsls	r3, r3, #8
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	011a      	lsls	r2, r3, #4
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	031b      	lsls	r3, r3, #12
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bbf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bbfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685a      	ldr	r2, [r3, #4]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	4313      	orrs	r3, r2
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	fffebff8 	.word	0xfffebff8
 800bc64:	fffffcfc 	.word	0xfffffcfc
 800bc68:	fffff3f3 	.word	0xfffff3f3
 800bc6c:	ffff0f0f 	.word	0xffff0f0f

0800bc70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d020      	beq.n	800bcd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f003 0302 	and.w	r3, r3, #2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01b      	beq.n	800bcd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f06f 0202 	mvn.w	r2, #2
 800bca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f9e2 	bl	800c084 <HAL_TIM_IC_CaptureCallback>
 800bcc0:	e005      	b.n	800bcce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f9d4 	bl	800c070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f9e5 	bl	800c098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f003 0304 	and.w	r3, r3, #4
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d020      	beq.n	800bd20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01b      	beq.n	800bd20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f06f 0204 	mvn.w	r2, #4
 800bcf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f9bc 	bl	800c084 <HAL_TIM_IC_CaptureCallback>
 800bd0c:	e005      	b.n	800bd1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f9ae 	bl	800c070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f9bf 	bl	800c098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f003 0308 	and.w	r3, r3, #8
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d020      	beq.n	800bd6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f003 0308 	and.w	r3, r3, #8
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d01b      	beq.n	800bd6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f06f 0208 	mvn.w	r2, #8
 800bd3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2204      	movs	r2, #4
 800bd42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	f003 0303 	and.w	r3, r3, #3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f996 	bl	800c084 <HAL_TIM_IC_CaptureCallback>
 800bd58:	e005      	b.n	800bd66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f988 	bl	800c070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f999 	bl	800c098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	f003 0310 	and.w	r3, r3, #16
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d020      	beq.n	800bdb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f003 0310 	and.w	r3, r3, #16
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01b      	beq.n	800bdb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f06f 0210 	mvn.w	r2, #16
 800bd88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2208      	movs	r2, #8
 800bd8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f970 	bl	800c084 <HAL_TIM_IC_CaptureCallback>
 800bda4:	e005      	b.n	800bdb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f962 	bl	800c070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f973 	bl	800c098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00c      	beq.n	800bddc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d007      	beq.n	800bddc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f06f 0201 	mvn.w	r2, #1
 800bdd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7f5 fa2c 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d104      	bne.n	800bdf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00c      	beq.n	800be0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d007      	beq.n	800be0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800be02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fb37 	bl	800c478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00c      	beq.n	800be2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d007      	beq.n	800be2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800be26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fb2f 	bl	800c48c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00c      	beq.n	800be52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d007      	beq.n	800be52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f92d 	bl	800c0ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f003 0320 	and.w	r3, r3, #32
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00c      	beq.n	800be76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b00      	cmp	r3, #0
 800be64:	d007      	beq.n	800be76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f06f 0220 	mvn.w	r2, #32
 800be6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 faf7 	bl	800c464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be94:	2b01      	cmp	r3, #1
 800be96:	d101      	bne.n	800be9c <HAL_TIM_ConfigClockSource+0x1c>
 800be98:	2302      	movs	r3, #2
 800be9a:	e0dc      	b.n	800c056 <HAL_TIM_ConfigClockSource+0x1d6>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	4b6a      	ldr	r3, [pc, #424]	@ (800c060 <HAL_TIM_ConfigClockSource+0x1e0>)
 800beb8:	4013      	ands	r3, r2
 800beba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a64      	ldr	r2, [pc, #400]	@ (800c064 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	f000 80a9 	beq.w	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bed8:	4a62      	ldr	r2, [pc, #392]	@ (800c064 <HAL_TIM_ConfigClockSource+0x1e4>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	f200 80ae 	bhi.w	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bee0:	4a61      	ldr	r2, [pc, #388]	@ (800c068 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	f000 80a1 	beq.w	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bee8:	4a5f      	ldr	r2, [pc, #380]	@ (800c068 <HAL_TIM_ConfigClockSource+0x1e8>)
 800beea:	4293      	cmp	r3, r2
 800beec:	f200 80a6 	bhi.w	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bef0:	4a5e      	ldr	r2, [pc, #376]	@ (800c06c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	f000 8099 	beq.w	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bef8:	4a5c      	ldr	r2, [pc, #368]	@ (800c06c <HAL_TIM_ConfigClockSource+0x1ec>)
 800befa:	4293      	cmp	r3, r2
 800befc:	f200 809e 	bhi.w	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bf04:	f000 8091 	beq.w	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bf0c:	f200 8096 	bhi.w	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf14:	f000 8089 	beq.w	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf1c:	f200 808e 	bhi.w	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf24:	d03e      	beq.n	800bfa4 <HAL_TIM_ConfigClockSource+0x124>
 800bf26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf2a:	f200 8087 	bhi.w	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf32:	f000 8086 	beq.w	800c042 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf3a:	d87f      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf3c:	2b70      	cmp	r3, #112	@ 0x70
 800bf3e:	d01a      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0xf6>
 800bf40:	2b70      	cmp	r3, #112	@ 0x70
 800bf42:	d87b      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf44:	2b60      	cmp	r3, #96	@ 0x60
 800bf46:	d050      	beq.n	800bfea <HAL_TIM_ConfigClockSource+0x16a>
 800bf48:	2b60      	cmp	r3, #96	@ 0x60
 800bf4a:	d877      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf4c:	2b50      	cmp	r3, #80	@ 0x50
 800bf4e:	d03c      	beq.n	800bfca <HAL_TIM_ConfigClockSource+0x14a>
 800bf50:	2b50      	cmp	r3, #80	@ 0x50
 800bf52:	d873      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf54:	2b40      	cmp	r3, #64	@ 0x40
 800bf56:	d058      	beq.n	800c00a <HAL_TIM_ConfigClockSource+0x18a>
 800bf58:	2b40      	cmp	r3, #64	@ 0x40
 800bf5a:	d86f      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf5c:	2b30      	cmp	r3, #48	@ 0x30
 800bf5e:	d064      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf60:	2b30      	cmp	r3, #48	@ 0x30
 800bf62:	d86b      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf64:	2b20      	cmp	r3, #32
 800bf66:	d060      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf68:	2b20      	cmp	r3, #32
 800bf6a:	d867      	bhi.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d05c      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf70:	2b10      	cmp	r3, #16
 800bf72:	d05a      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf74:	e062      	b.n	800c03c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf86:	f000 f9bf 	bl	800c308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	609a      	str	r2, [r3, #8]
      break;
 800bfa2:	e04f      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bfb4:	f000 f9a8 	bl	800c308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bfc6:	609a      	str	r2, [r3, #8]
      break;
 800bfc8:	e03c      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f000 f918 	bl	800c20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2150      	movs	r1, #80	@ 0x50
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f972 	bl	800c2cc <TIM_ITRx_SetConfig>
      break;
 800bfe8:	e02c      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bff6:	461a      	mov	r2, r3
 800bff8:	f000 f937 	bl	800c26a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2160      	movs	r1, #96	@ 0x60
 800c002:	4618      	mov	r0, r3
 800c004:	f000 f962 	bl	800c2cc <TIM_ITRx_SetConfig>
      break;
 800c008:	e01c      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c016:	461a      	mov	r2, r3
 800c018:	f000 f8f8 	bl	800c20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2140      	movs	r1, #64	@ 0x40
 800c022:	4618      	mov	r0, r3
 800c024:	f000 f952 	bl	800c2cc <TIM_ITRx_SetConfig>
      break;
 800c028:	e00c      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4619      	mov	r1, r3
 800c034:	4610      	mov	r0, r2
 800c036:	f000 f949 	bl	800c2cc <TIM_ITRx_SetConfig>
      break;
 800c03a:	e003      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	73fb      	strb	r3, [r7, #15]
      break;
 800c040:	e000      	b.n	800c044 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	ffceff88 	.word	0xffceff88
 800c064:	00100040 	.word	0x00100040
 800c068:	00100030 	.word	0x00100030
 800c06c:	00100020 	.word	0x00100020

0800c070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a46      	ldr	r2, [pc, #280]	@ (800c1ec <TIM_Base_SetConfig+0x12c>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d013      	beq.n	800c100 <TIM_Base_SetConfig+0x40>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0de:	d00f      	beq.n	800c100 <TIM_Base_SetConfig+0x40>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a43      	ldr	r2, [pc, #268]	@ (800c1f0 <TIM_Base_SetConfig+0x130>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00b      	beq.n	800c100 <TIM_Base_SetConfig+0x40>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a42      	ldr	r2, [pc, #264]	@ (800c1f4 <TIM_Base_SetConfig+0x134>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d007      	beq.n	800c100 <TIM_Base_SetConfig+0x40>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a41      	ldr	r2, [pc, #260]	@ (800c1f8 <TIM_Base_SetConfig+0x138>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_Base_SetConfig+0x40>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a40      	ldr	r2, [pc, #256]	@ (800c1fc <TIM_Base_SetConfig+0x13c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d108      	bne.n	800c112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	4313      	orrs	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a35      	ldr	r2, [pc, #212]	@ (800c1ec <TIM_Base_SetConfig+0x12c>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d01f      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c120:	d01b      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a32      	ldr	r2, [pc, #200]	@ (800c1f0 <TIM_Base_SetConfig+0x130>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d017      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a31      	ldr	r2, [pc, #196]	@ (800c1f4 <TIM_Base_SetConfig+0x134>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d013      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a30      	ldr	r2, [pc, #192]	@ (800c1f8 <TIM_Base_SetConfig+0x138>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d00f      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a2f      	ldr	r2, [pc, #188]	@ (800c1fc <TIM_Base_SetConfig+0x13c>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d00b      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a2e      	ldr	r2, [pc, #184]	@ (800c200 <TIM_Base_SetConfig+0x140>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d007      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4a2d      	ldr	r2, [pc, #180]	@ (800c204 <TIM_Base_SetConfig+0x144>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d003      	beq.n	800c15a <TIM_Base_SetConfig+0x9a>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a2c      	ldr	r2, [pc, #176]	@ (800c208 <TIM_Base_SetConfig+0x148>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d108      	bne.n	800c16c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	4313      	orrs	r3, r2
 800c16a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	4313      	orrs	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a16      	ldr	r2, [pc, #88]	@ (800c1ec <TIM_Base_SetConfig+0x12c>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d00f      	beq.n	800c1b8 <TIM_Base_SetConfig+0xf8>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a18      	ldr	r2, [pc, #96]	@ (800c1fc <TIM_Base_SetConfig+0x13c>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d00b      	beq.n	800c1b8 <TIM_Base_SetConfig+0xf8>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a17      	ldr	r2, [pc, #92]	@ (800c200 <TIM_Base_SetConfig+0x140>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d007      	beq.n	800c1b8 <TIM_Base_SetConfig+0xf8>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a16      	ldr	r2, [pc, #88]	@ (800c204 <TIM_Base_SetConfig+0x144>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d003      	beq.n	800c1b8 <TIM_Base_SetConfig+0xf8>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a15      	ldr	r2, [pc, #84]	@ (800c208 <TIM_Base_SetConfig+0x148>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d103      	bne.n	800c1c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d105      	bne.n	800c1de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	f023 0201 	bic.w	r2, r3, #1
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	611a      	str	r2, [r3, #16]
  }
}
 800c1de:	bf00      	nop
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	40010000 	.word	0x40010000
 800c1f0:	40000400 	.word	0x40000400
 800c1f4:	40000800 	.word	0x40000800
 800c1f8:	40000c00 	.word	0x40000c00
 800c1fc:	40010400 	.word	0x40010400
 800c200:	40014000 	.word	0x40014000
 800c204:	40014400 	.word	0x40014400
 800c208:	40014800 	.word	0x40014800

0800c20c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	f023 0201 	bic.w	r2, r3, #1
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	011b      	lsls	r3, r3, #4
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	4313      	orrs	r3, r2
 800c240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f023 030a 	bic.w	r3, r3, #10
 800c248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	4313      	orrs	r3, r2
 800c250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	621a      	str	r2, [r3, #32]
}
 800c25e:	bf00      	nop
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b087      	sub	sp, #28
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	f023 0210 	bic.w	r2, r3, #16
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	031b      	lsls	r3, r3, #12
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	697a      	ldr	r2, [r7, #20]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	621a      	str	r2, [r3, #32]
}
 800c2be:	bf00      	nop
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4b09      	ldr	r3, [pc, #36]	@ (800c304 <TIM_ITRx_SetConfig+0x38>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	f043 0307 	orr.w	r3, r3, #7
 800c2ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	609a      	str	r2, [r3, #8]
}
 800c2f6:	bf00      	nop
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	ffcfff8f 	.word	0xffcfff8f

0800c308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	021a      	lsls	r2, r3, #8
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	431a      	orrs	r2, r3
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	4313      	orrs	r3, r2
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	4313      	orrs	r3, r2
 800c334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	609a      	str	r2, [r3, #8]
}
 800c33c:	bf00      	nop
 800c33e:	371c      	adds	r7, #28
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d101      	bne.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e06d      	b.n	800c43c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a30      	ldr	r2, [pc, #192]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d004      	beq.n	800c394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a2f      	ldr	r2, [pc, #188]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d108      	bne.n	800c3a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c39a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a20      	ldr	r2, [pc, #128]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d022      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3d2:	d01d      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d018      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a1c      	ldr	r2, [pc, #112]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d013      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d00e      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a15      	ldr	r2, [pc, #84]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d009      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a16      	ldr	r2, [pc, #88]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d004      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a15      	ldr	r2, [pc, #84]	@ (800c460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d10c      	bne.n	800c42a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	4313      	orrs	r3, r2
 800c420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	40010000 	.word	0x40010000
 800c44c:	40010400 	.word	0x40010400
 800c450:	40000400 	.word	0x40000400
 800c454:	40000800 	.word	0x40000800
 800c458:	40000c00 	.word	0x40000c00
 800c45c:	40001800 	.word	0x40001800
 800c460:	40014000 	.word	0x40014000

0800c464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e050      	b.n	800c554 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d114      	bne.n	800c4e6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fe2f 	bl	800d128 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d103      	bne.n	800c4dc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a21      	ldr	r2, [pc, #132]	@ (800c55c <HAL_UART_Init+0xbc>)
 800c4d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2224      	movs	r2, #36	@ 0x24
 800c4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f022 0201 	bic.w	r2, r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f001 fbc8 	bl	800dc9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fe5d 	bl	800d1cc <UART_SetConfig>
 800c512:	4603      	mov	r3, r0
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	e01b      	b.n	800c554 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c52a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689a      	ldr	r2, [r3, #8]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c53a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f042 0201 	orr.w	r2, r2, #1
 800c54a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 fc47 	bl	800dde0 <UART_CheckIdleState>
 800c552:	4603      	mov	r3, r0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	08001839 	.word	0x08001839

0800c560 <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d109      	bne.n	800c588 <HAL_UART_RegisterRxEventCallback+0x28>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c57a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e014      	b.n	800c5b2 <HAL_UART_RegisterRxEventCallback+0x52>
  }

  if (huart->RxState == HAL_UART_STATE_READY)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c58e:	2b20      	cmp	r3, #32
 800c590:	d104      	bne.n	800c59c <HAL_UART_RegisterRxEventCallback+0x3c>
  {
    huart->RxEventCallback = pCallback;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800c59a:	e009      	b.n	800c5b0 <HAL_UART_RegisterRxEventCallback+0x50>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3714      	adds	r7, #20
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
	...

0800c5c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5d4:	2b20      	cmp	r3, #32
 800c5d6:	d167      	bne.n	800c6a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d002      	beq.n	800c5e4 <HAL_UART_Transmit_DMA+0x24>
 800c5de:	88fb      	ldrh	r3, [r7, #6]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e060      	b.n	800c6aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	88fa      	ldrh	r2, [r7, #6]
 800c5f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	88fa      	ldrh	r2, [r7, #6]
 800c5fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2221      	movs	r2, #33	@ 0x21
 800c60a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d028      	beq.n	800c668 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c61a:	4a26      	ldr	r2, [pc, #152]	@ (800c6b4 <HAL_UART_Transmit_DMA+0xf4>)
 800c61c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c622:	4a25      	ldr	r2, [pc, #148]	@ (800c6b8 <HAL_UART_Transmit_DMA+0xf8>)
 800c624:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c62a:	4a24      	ldr	r2, [pc, #144]	@ (800c6bc <HAL_UART_Transmit_DMA+0xfc>)
 800c62c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c632:	2200      	movs	r2, #0
 800c634:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c63e:	4619      	mov	r1, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3328      	adds	r3, #40	@ 0x28
 800c646:	461a      	mov	r2, r3
 800c648:	88fb      	ldrh	r3, [r7, #6]
 800c64a:	f7f6 fab3 	bl	8002bb4 <HAL_DMA_Start_IT>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d009      	beq.n	800c668 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2210      	movs	r2, #16
 800c658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2220      	movs	r2, #32
 800c660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e020      	b.n	800c6aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2240      	movs	r2, #64	@ 0x40
 800c66e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3308      	adds	r3, #8
 800c676:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	613b      	str	r3, [r7, #16]
   return(result);
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c686:	627b      	str	r3, [r7, #36]	@ 0x24
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3308      	adds	r3, #8
 800c68e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c690:	623a      	str	r2, [r7, #32]
 800c692:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c694:	69f9      	ldr	r1, [r7, #28]
 800c696:	6a3a      	ldr	r2, [r7, #32]
 800c698:	e841 2300 	strex	r3, r2, [r1]
 800c69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e5      	bne.n	800c670 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	e000      	b.n	800c6aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c6a8:	2302      	movs	r3, #2
  }
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3728      	adds	r7, #40	@ 0x28
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	0800e2ad 	.word	0x0800e2ad
 800c6b8:	0800e347 	.word	0x0800e347
 800c6bc:	0800e4dd 	.word	0x0800e4dd

0800c6c0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b0a0      	sub	sp, #128	@ 0x80
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6d0:	e853 3f00 	ldrex	r3, [r3]
 800c6d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c6d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c6dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6e8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c6ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c6ee:	e841 2300 	strex	r3, r2, [r1]
 800c6f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c6f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1e6      	bne.n	800c6c8 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3308      	adds	r3, #8
 800c700:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c704:	e853 3f00 	ldrex	r3, [r3]
 800c708:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c70a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c70c:	4b72      	ldr	r3, [pc, #456]	@ (800c8d8 <HAL_UART_Abort+0x218>)
 800c70e:	4013      	ands	r3, r2
 800c710:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3308      	adds	r3, #8
 800c718:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c71a:	657a      	str	r2, [r7, #84]	@ 0x54
 800c71c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e5      	bne.n	800c6fa <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c732:	2b01      	cmp	r3, #1
 800c734:	d118      	bne.n	800c768 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c73e:	e853 3f00 	ldrex	r3, [r3]
 800c742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c746:	f023 0310 	bic.w	r3, r3, #16
 800c74a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c754:	643b      	str	r3, [r7, #64]	@ 0x40
 800c756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c75a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c75c:	e841 2300 	strex	r3, r2, [r1]
 800c760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e6      	bne.n	800c736 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c772:	2b80      	cmp	r3, #128	@ 0x80
 800c774:	d137      	bne.n	800c7e6 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3308      	adds	r3, #8
 800c77c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	e853 3f00 	ldrex	r3, [r3]
 800c784:	61fb      	str	r3, [r7, #28]
   return(result);
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c78c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3308      	adds	r3, #8
 800c794:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c798:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e5      	bne.n	800c776 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d019      	beq.n	800c7e6 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7f6 fc62 	bl	8003088 <HAL_DMA_Abort>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00d      	beq.n	800c7e6 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f8 f942 	bl	8004a58 <HAL_DMA_GetError>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b20      	cmp	r3, #32
 800c7d8:	d105      	bne.n	800c7e6 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2210      	movs	r2, #16
 800c7de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e073      	b.n	800c8ce <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f0:	2b40      	cmp	r3, #64	@ 0x40
 800c7f2:	d13b      	bne.n	800c86c <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	e853 3f00 	ldrex	r3, [r3]
 800c802:	60bb      	str	r3, [r7, #8]
   return(result);
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c80a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3308      	adds	r3, #8
 800c812:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c814:	61ba      	str	r2, [r7, #24]
 800c816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c818:	6979      	ldr	r1, [r7, #20]
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	e841 2300 	strex	r3, r2, [r1]
 800c820:	613b      	str	r3, [r7, #16]
   return(result);
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e5      	bne.n	800c7f4 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d01c      	beq.n	800c86c <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c838:	2200      	movs	r2, #0
 800c83a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c842:	4618      	mov	r0, r3
 800c844:	f7f6 fc20 	bl	8003088 <HAL_DMA_Abort>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00e      	beq.n	800c86c <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c854:	4618      	mov	r0, r3
 800c856:	f7f8 f8ff 	bl	8004a58 <HAL_DMA_GetError>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b20      	cmp	r3, #32
 800c85e:	d105      	bne.n	800c86c <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2210      	movs	r2, #16
 800c864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c868:	2303      	movs	r3, #3
 800c86a:	e030      	b.n	800c8ce <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	220f      	movs	r2, #15
 800c882:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c88c:	d107      	bne.n	800c89e <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	699a      	ldr	r2, [r3, #24]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f042 0210 	orr.w	r2, r2, #16
 800c89c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	699a      	ldr	r2, [r3, #24]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f042 0208 	orr.w	r2, r2, #8
 800c8ac:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2220      	movs	r2, #32
 800c8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3780      	adds	r7, #128	@ 0x80
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	ef7ffffe 	.word	0xef7ffffe

0800c8dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b0ba      	sub	sp, #232	@ 0xe8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c906:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c90a:	4013      	ands	r3, r2
 800c90c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c914:	2b00      	cmp	r3, #0
 800c916:	d11b      	bne.n	800c950 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c91c:	f003 0320 	and.w	r3, r3, #32
 800c920:	2b00      	cmp	r3, #0
 800c922:	d015      	beq.n	800c950 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c928:	f003 0320 	and.w	r3, r3, #32
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d105      	bne.n	800c93c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d009      	beq.n	800c950 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 8387 	beq.w	800d054 <HAL_UART_IRQHandler+0x778>
      {
        huart->RxISR(huart);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	4798      	blx	r3
      }
      return;
 800c94e:	e381      	b.n	800d054 <HAL_UART_IRQHandler+0x778>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 8129 	beq.w	800cbac <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c95a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c95e:	4b90      	ldr	r3, [pc, #576]	@ (800cba0 <HAL_UART_IRQHandler+0x2c4>)
 800c960:	4013      	ands	r3, r2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d106      	bne.n	800c974 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c96a:	4b8e      	ldr	r3, [pc, #568]	@ (800cba4 <HAL_UART_IRQHandler+0x2c8>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 811c 	beq.w	800cbac <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c978:	f003 0301 	and.w	r3, r3, #1
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d011      	beq.n	800c9a4 <HAL_UART_IRQHandler+0xc8>
 800c980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00b      	beq.n	800c9a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2201      	movs	r2, #1
 800c992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c99a:	f043 0201 	orr.w	r2, r3, #1
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d011      	beq.n	800c9d4 <HAL_UART_IRQHandler+0xf8>
 800c9b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00b      	beq.n	800c9d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9ca:	f043 0204 	orr.w	r2, r3, #4
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d011      	beq.n	800ca04 <HAL_UART_IRQHandler+0x128>
 800c9e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00b      	beq.n	800ca04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9fa:	f043 0202 	orr.w	r2, r3, #2
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ca04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca08:	f003 0308 	and.w	r3, r3, #8
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d017      	beq.n	800ca40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca14:	f003 0320 	and.w	r3, r3, #32
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d105      	bne.n	800ca28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ca1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca20:	4b5f      	ldr	r3, [pc, #380]	@ (800cba0 <HAL_UART_IRQHandler+0x2c4>)
 800ca22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00b      	beq.n	800ca40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2208      	movs	r2, #8
 800ca2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca36:	f043 0208 	orr.w	r2, r3, #8
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d012      	beq.n	800ca72 <HAL_UART_IRQHandler+0x196>
 800ca4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00c      	beq.n	800ca72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca68:	f043 0220 	orr.w	r2, r3, #32
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 82ed 	beq.w	800d058 <HAL_UART_IRQHandler+0x77c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca82:	f003 0320 	and.w	r3, r3, #32
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d013      	beq.n	800cab2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca8e:	f003 0320 	and.w	r3, r3, #32
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d105      	bne.n	800caa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cab8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac6:	2b40      	cmp	r3, #64	@ 0x40
 800cac8:	d005      	beq.n	800cad6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800caca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cace:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d058      	beq.n	800cb88 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f001 fb82 	bl	800e1e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cae6:	2b40      	cmp	r3, #64	@ 0x40
 800cae8:	d148      	bne.n	800cb7c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3308      	adds	r3, #8
 800caf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800caf8:	e853 3f00 	ldrex	r3, [r3]
 800cafc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cb00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3308      	adds	r3, #8
 800cb12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cb16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cb1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cb22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cb2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1d9      	bne.n	800caea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d017      	beq.n	800cb70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb46:	4a18      	ldr	r2, [pc, #96]	@ (800cba8 <HAL_UART_IRQHandler+0x2cc>)
 800cb48:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f6 fdb7 	bl	80036c4 <HAL_DMA_Abort_IT>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01f      	beq.n	800cb9c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb6e:	e015      	b.n	800cb9c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb7a:	e00f      	b.n	800cb9c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb86:	e009      	b.n	800cb9c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cb9a:	e25d      	b.n	800d058 <HAL_UART_IRQHandler+0x77c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb9c:	bf00      	nop
    return;
 800cb9e:	e25b      	b.n	800d058 <HAL_UART_IRQHandler+0x77c>
 800cba0:	10000001 	.word	0x10000001
 800cba4:	04000120 	.word	0x04000120
 800cba8:	0800e561 	.word	0x0800e561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	f040 81eb 	bne.w	800cf8c <HAL_UART_IRQHandler+0x6b0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cbb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbba:	f003 0310 	and.w	r3, r3, #16
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f000 81e4 	beq.w	800cf8c <HAL_UART_IRQHandler+0x6b0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cbc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbc8:	f003 0310 	and.w	r3, r3, #16
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 81dd 	beq.w	800cf8c <HAL_UART_IRQHandler+0x6b0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2210      	movs	r2, #16
 800cbd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbe4:	2b40      	cmp	r3, #64	@ 0x40
 800cbe6:	f040 8153 	bne.w	800ce90 <HAL_UART_IRQHandler+0x5b4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a97      	ldr	r2, [pc, #604]	@ (800ce50 <HAL_UART_IRQHandler+0x574>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d068      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a94      	ldr	r2, [pc, #592]	@ (800ce54 <HAL_UART_IRQHandler+0x578>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d061      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a92      	ldr	r2, [pc, #584]	@ (800ce58 <HAL_UART_IRQHandler+0x57c>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d05a      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a8f      	ldr	r2, [pc, #572]	@ (800ce5c <HAL_UART_IRQHandler+0x580>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d053      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a8d      	ldr	r2, [pc, #564]	@ (800ce60 <HAL_UART_IRQHandler+0x584>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d04c      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a8a      	ldr	r2, [pc, #552]	@ (800ce64 <HAL_UART_IRQHandler+0x588>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d045      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a88      	ldr	r2, [pc, #544]	@ (800ce68 <HAL_UART_IRQHandler+0x58c>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d03e      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a85      	ldr	r2, [pc, #532]	@ (800ce6c <HAL_UART_IRQHandler+0x590>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d037      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a83      	ldr	r2, [pc, #524]	@ (800ce70 <HAL_UART_IRQHandler+0x594>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d030      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a80      	ldr	r2, [pc, #512]	@ (800ce74 <HAL_UART_IRQHandler+0x598>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d029      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a7e      	ldr	r2, [pc, #504]	@ (800ce78 <HAL_UART_IRQHandler+0x59c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d022      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a7b      	ldr	r2, [pc, #492]	@ (800ce7c <HAL_UART_IRQHandler+0x5a0>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d01b      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a79      	ldr	r2, [pc, #484]	@ (800ce80 <HAL_UART_IRQHandler+0x5a4>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d014      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a76      	ldr	r2, [pc, #472]	@ (800ce84 <HAL_UART_IRQHandler+0x5a8>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d00d      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a74      	ldr	r2, [pc, #464]	@ (800ce88 <HAL_UART_IRQHandler+0x5ac>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d006      	beq.n	800ccca <HAL_UART_IRQHandler+0x3ee>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a71      	ldr	r2, [pc, #452]	@ (800ce8c <HAL_UART_IRQHandler+0x5b0>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d106      	bne.n	800ccd8 <HAL_UART_IRQHandler+0x3fc>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	e005      	b.n	800cce4 <HAL_UART_IRQHandler+0x408>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 81b5 	beq.w	800d05c <HAL_UART_IRQHandler+0x780>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ccf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f080 81ad 	bcs.w	800d05c <HAL_UART_IRQHandler+0x780>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd18:	f000 8087 	beq.w	800ce2a <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cd28:	e853 3f00 	ldrex	r3, [r3]
 800cd2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cd30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	461a      	mov	r2, r3
 800cd42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cd46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cd52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cd56:	e841 2300 	strex	r3, r2, [r1]
 800cd5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cd5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1da      	bne.n	800cd1c <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3308      	adds	r3, #8
 800cd6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd70:	e853 3f00 	ldrex	r3, [r3]
 800cd74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cd76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd78:	f023 0301 	bic.w	r3, r3, #1
 800cd7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	3308      	adds	r3, #8
 800cd86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cd8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cd8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cd9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e1      	bne.n	800cd66 <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3308      	adds	r3, #8
 800cda8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cdb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cdb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3308      	adds	r3, #8
 800cdc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cdc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cdc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cdcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cdce:	e841 2300 	strex	r3, r2, [r1]
 800cdd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cdd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1e3      	bne.n	800cda2 <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2220      	movs	r2, #32
 800cdde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdf0:	e853 3f00 	ldrex	r3, [r3]
 800cdf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdf8:	f023 0310 	bic.w	r3, r3, #16
 800cdfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	461a      	mov	r2, r3
 800ce06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ce10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce12:	e841 2300 	strex	r3, r2, [r1]
 800ce16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ce18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1e4      	bne.n	800cde8 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7f6 f92f 	bl	8003088 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800ce42:	b292      	uxth	r2, r2
 800ce44:	1a8a      	subs	r2, r1, r2
 800ce46:	b292      	uxth	r2, r2
 800ce48:	4611      	mov	r1, r2
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce4e:	e105      	b.n	800d05c <HAL_UART_IRQHandler+0x780>
 800ce50:	40020010 	.word	0x40020010
 800ce54:	40020028 	.word	0x40020028
 800ce58:	40020040 	.word	0x40020040
 800ce5c:	40020058 	.word	0x40020058
 800ce60:	40020070 	.word	0x40020070
 800ce64:	40020088 	.word	0x40020088
 800ce68:	400200a0 	.word	0x400200a0
 800ce6c:	400200b8 	.word	0x400200b8
 800ce70:	40020410 	.word	0x40020410
 800ce74:	40020428 	.word	0x40020428
 800ce78:	40020440 	.word	0x40020440
 800ce7c:	40020458 	.word	0x40020458
 800ce80:	40020470 	.word	0x40020470
 800ce84:	40020488 	.word	0x40020488
 800ce88:	400204a0 	.word	0x400204a0
 800ce8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 80d7 	beq.w	800d060 <HAL_UART_IRQHandler+0x784>
          && (nb_rx_data > 0U))
 800ceb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 80d2 	beq.w	800d060 <HAL_UART_IRQHandler+0x784>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec4:	e853 3f00 	ldrex	r3, [r3]
 800cec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ceca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ced0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	461a      	mov	r2, r3
 800ceda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cede:	647b      	str	r3, [r7, #68]	@ 0x44
 800cee0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cee6:	e841 2300 	strex	r3, r2, [r1]
 800ceea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ceec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e4      	bne.n	800cebc <HAL_UART_IRQHandler+0x5e0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3308      	adds	r3, #8
 800cef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	623b      	str	r3, [r7, #32]
   return(result);
 800cf02:	6a3a      	ldr	r2, [r7, #32]
 800cf04:	4b59      	ldr	r3, [pc, #356]	@ (800d06c <HAL_UART_IRQHandler+0x790>)
 800cf06:	4013      	ands	r3, r2
 800cf08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3308      	adds	r3, #8
 800cf12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cf16:	633a      	str	r2, [r7, #48]	@ 0x30
 800cf18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e3      	bne.n	800cef2 <HAL_UART_IRQHandler+0x616>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	e853 3f00 	ldrex	r3, [r3]
 800cf4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f023 0310 	bic.w	r3, r3, #16
 800cf52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cf60:	61fb      	str	r3, [r7, #28]
 800cf62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf64:	69b9      	ldr	r1, [r7, #24]
 800cf66:	69fa      	ldr	r2, [r7, #28]
 800cf68:	e841 2300 	strex	r3, r2, [r1]
 800cf6c:	617b      	str	r3, [r7, #20]
   return(result);
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1e4      	bne.n	800cf3e <HAL_UART_IRQHandler+0x662>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cf80:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800cf84:	4611      	mov	r1, r2
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf8a:	e069      	b.n	800d060 <HAL_UART_IRQHandler+0x784>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d010      	beq.n	800cfba <HAL_UART_IRQHandler+0x6de>
 800cf98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <HAL_UART_IRQHandler+0x6de>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cfac:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfb8:	e055      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d014      	beq.n	800cff0 <HAL_UART_IRQHandler+0x714>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cfc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d105      	bne.n	800cfde <HAL_UART_IRQHandler+0x702>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cfd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d008      	beq.n	800cff0 <HAL_UART_IRQHandler+0x714>
  {
    if (huart->TxISR != NULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d03e      	beq.n	800d064 <HAL_UART_IRQHandler+0x788>
    {
      huart->TxISR(huart);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	4798      	blx	r3
    }
    return;
 800cfee:	e039      	b.n	800d064 <HAL_UART_IRQHandler+0x788>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d009      	beq.n	800d010 <HAL_UART_IRQHandler+0x734>
 800cffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d004:	2b00      	cmp	r3, #0
 800d006:	d003      	beq.n	800d010 <HAL_UART_IRQHandler+0x734>
  {
    UART_EndTransmit_IT(huart);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 fac1 	bl	800e590 <UART_EndTransmit_IT>
    return;
 800d00e:	e02a      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00b      	beq.n	800d034 <HAL_UART_IRQHandler+0x758>
 800d01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d020:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d005      	beq.n	800d034 <HAL_UART_IRQHandler+0x758>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d032:	e018      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d012      	beq.n	800d066 <HAL_UART_IRQHandler+0x78a>
 800d040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d044:	2b00      	cmp	r3, #0
 800d046:	da0e      	bge.n	800d066 <HAL_UART_IRQHandler+0x78a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d052:	e008      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
      return;
 800d054:	bf00      	nop
 800d056:	e006      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
    return;
 800d058:	bf00      	nop
 800d05a:	e004      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
      return;
 800d05c:	bf00      	nop
 800d05e:	e002      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
      return;
 800d060:	bf00      	nop
 800d062:	e000      	b.n	800d066 <HAL_UART_IRQHandler+0x78a>
    return;
 800d064:	bf00      	nop
  }
}
 800d066:	37e8      	adds	r7, #232	@ 0xe8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	effffffe 	.word	0xeffffffe

0800d070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d0dc:	bf00      	nop
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	460b      	mov	r3, r1
 800d11a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a1a      	ldr	r2, [pc, #104]	@ (800d19c <UART_InitCallbacksToDefault+0x74>)
 800d134:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a19      	ldr	r2, [pc, #100]	@ (800d1a0 <UART_InitCallbacksToDefault+0x78>)
 800d13c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4a18      	ldr	r2, [pc, #96]	@ (800d1a4 <UART_InitCallbacksToDefault+0x7c>)
 800d144:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a17      	ldr	r2, [pc, #92]	@ (800d1a8 <UART_InitCallbacksToDefault+0x80>)
 800d14c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a16      	ldr	r2, [pc, #88]	@ (800d1ac <UART_InitCallbacksToDefault+0x84>)
 800d154:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a15      	ldr	r2, [pc, #84]	@ (800d1b0 <UART_InitCallbacksToDefault+0x88>)
 800d15c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a14      	ldr	r2, [pc, #80]	@ (800d1b4 <UART_InitCallbacksToDefault+0x8c>)
 800d164:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a13      	ldr	r2, [pc, #76]	@ (800d1b8 <UART_InitCallbacksToDefault+0x90>)
 800d16c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a12      	ldr	r2, [pc, #72]	@ (800d1bc <UART_InitCallbacksToDefault+0x94>)
 800d174:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a11      	ldr	r2, [pc, #68]	@ (800d1c0 <UART_InitCallbacksToDefault+0x98>)
 800d17c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a10      	ldr	r2, [pc, #64]	@ (800d1c4 <UART_InitCallbacksToDefault+0x9c>)
 800d184:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a0f      	ldr	r2, [pc, #60]	@ (800d1c8 <UART_InitCallbacksToDefault+0xa0>)
 800d18c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	0800d085 	.word	0x0800d085
 800d1a0:	0800d071 	.word	0x0800d071
 800d1a4:	0800d0ad 	.word	0x0800d0ad
 800d1a8:	0800d099 	.word	0x0800d099
 800d1ac:	0800d0c1 	.word	0x0800d0c1
 800d1b0:	0800d0d5 	.word	0x0800d0d5
 800d1b4:	0800d0e9 	.word	0x0800d0e9
 800d1b8:	0800d0fd 	.word	0x0800d0fd
 800d1bc:	0800e5eb 	.word	0x0800e5eb
 800d1c0:	0800e5ff 	.word	0x0800e5ff
 800d1c4:	0800e613 	.word	0x0800e613
 800d1c8:	0800d111 	.word	0x0800d111

0800d1cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1d0:	b092      	sub	sp, #72	@ 0x48
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	69db      	ldr	r3, [r3, #28]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	4bbe      	ldr	r3, [pc, #760]	@ (800d4f4 <UART_SetConfig+0x328>)
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	6812      	ldr	r2, [r2, #0]
 800d202:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d204:	430b      	orrs	r3, r1
 800d206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	68da      	ldr	r2, [r3, #12]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	430a      	orrs	r2, r1
 800d21c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4ab3      	ldr	r2, [pc, #716]	@ (800d4f8 <UART_SetConfig+0x32c>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d004      	beq.n	800d238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d234:	4313      	orrs	r3, r2
 800d236:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689a      	ldr	r2, [r3, #8]
 800d23e:	4baf      	ldr	r3, [pc, #700]	@ (800d4fc <UART_SetConfig+0x330>)
 800d240:	4013      	ands	r3, r2
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	6812      	ldr	r2, [r2, #0]
 800d246:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d248:	430b      	orrs	r3, r1
 800d24a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d252:	f023 010f 	bic.w	r1, r3, #15
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	430a      	orrs	r2, r1
 800d260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4aa6      	ldr	r2, [pc, #664]	@ (800d500 <UART_SetConfig+0x334>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d177      	bne.n	800d35c <UART_SetConfig+0x190>
 800d26c:	4ba5      	ldr	r3, [pc, #660]	@ (800d504 <UART_SetConfig+0x338>)
 800d26e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d274:	2b28      	cmp	r3, #40	@ 0x28
 800d276:	d86d      	bhi.n	800d354 <UART_SetConfig+0x188>
 800d278:	a201      	add	r2, pc, #4	@ (adr r2, 800d280 <UART_SetConfig+0xb4>)
 800d27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27e:	bf00      	nop
 800d280:	0800d325 	.word	0x0800d325
 800d284:	0800d355 	.word	0x0800d355
 800d288:	0800d355 	.word	0x0800d355
 800d28c:	0800d355 	.word	0x0800d355
 800d290:	0800d355 	.word	0x0800d355
 800d294:	0800d355 	.word	0x0800d355
 800d298:	0800d355 	.word	0x0800d355
 800d29c:	0800d355 	.word	0x0800d355
 800d2a0:	0800d32d 	.word	0x0800d32d
 800d2a4:	0800d355 	.word	0x0800d355
 800d2a8:	0800d355 	.word	0x0800d355
 800d2ac:	0800d355 	.word	0x0800d355
 800d2b0:	0800d355 	.word	0x0800d355
 800d2b4:	0800d355 	.word	0x0800d355
 800d2b8:	0800d355 	.word	0x0800d355
 800d2bc:	0800d355 	.word	0x0800d355
 800d2c0:	0800d335 	.word	0x0800d335
 800d2c4:	0800d355 	.word	0x0800d355
 800d2c8:	0800d355 	.word	0x0800d355
 800d2cc:	0800d355 	.word	0x0800d355
 800d2d0:	0800d355 	.word	0x0800d355
 800d2d4:	0800d355 	.word	0x0800d355
 800d2d8:	0800d355 	.word	0x0800d355
 800d2dc:	0800d355 	.word	0x0800d355
 800d2e0:	0800d33d 	.word	0x0800d33d
 800d2e4:	0800d355 	.word	0x0800d355
 800d2e8:	0800d355 	.word	0x0800d355
 800d2ec:	0800d355 	.word	0x0800d355
 800d2f0:	0800d355 	.word	0x0800d355
 800d2f4:	0800d355 	.word	0x0800d355
 800d2f8:	0800d355 	.word	0x0800d355
 800d2fc:	0800d355 	.word	0x0800d355
 800d300:	0800d345 	.word	0x0800d345
 800d304:	0800d355 	.word	0x0800d355
 800d308:	0800d355 	.word	0x0800d355
 800d30c:	0800d355 	.word	0x0800d355
 800d310:	0800d355 	.word	0x0800d355
 800d314:	0800d355 	.word	0x0800d355
 800d318:	0800d355 	.word	0x0800d355
 800d31c:	0800d355 	.word	0x0800d355
 800d320:	0800d34d 	.word	0x0800d34d
 800d324:	2301      	movs	r3, #1
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32a:	e222      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d32c:	2304      	movs	r3, #4
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d332:	e21e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d334:	2308      	movs	r3, #8
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e21a      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d33c:	2310      	movs	r3, #16
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e216      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d344:	2320      	movs	r3, #32
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e212      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d34c:	2340      	movs	r3, #64	@ 0x40
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e20e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d354:	2380      	movs	r3, #128	@ 0x80
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e20a      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a69      	ldr	r2, [pc, #420]	@ (800d508 <UART_SetConfig+0x33c>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d130      	bne.n	800d3c8 <UART_SetConfig+0x1fc>
 800d366:	4b67      	ldr	r3, [pc, #412]	@ (800d504 <UART_SetConfig+0x338>)
 800d368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d36a:	f003 0307 	and.w	r3, r3, #7
 800d36e:	2b05      	cmp	r3, #5
 800d370:	d826      	bhi.n	800d3c0 <UART_SetConfig+0x1f4>
 800d372:	a201      	add	r2, pc, #4	@ (adr r2, 800d378 <UART_SetConfig+0x1ac>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d391 	.word	0x0800d391
 800d37c:	0800d399 	.word	0x0800d399
 800d380:	0800d3a1 	.word	0x0800d3a1
 800d384:	0800d3a9 	.word	0x0800d3a9
 800d388:	0800d3b1 	.word	0x0800d3b1
 800d38c:	0800d3b9 	.word	0x0800d3b9
 800d390:	2300      	movs	r3, #0
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d396:	e1ec      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d398:	2304      	movs	r3, #4
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39e:	e1e8      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d3a0:	2308      	movs	r3, #8
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e1e4      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d3a8:	2310      	movs	r3, #16
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e1e0      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d3b0:	2320      	movs	r3, #32
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e1dc      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d3b8:	2340      	movs	r3, #64	@ 0x40
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e1d8      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d3c0:	2380      	movs	r3, #128	@ 0x80
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e1d4      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a4f      	ldr	r2, [pc, #316]	@ (800d50c <UART_SetConfig+0x340>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d130      	bne.n	800d434 <UART_SetConfig+0x268>
 800d3d2:	4b4c      	ldr	r3, [pc, #304]	@ (800d504 <UART_SetConfig+0x338>)
 800d3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	2b05      	cmp	r3, #5
 800d3dc:	d826      	bhi.n	800d42c <UART_SetConfig+0x260>
 800d3de:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e4 <UART_SetConfig+0x218>)
 800d3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e4:	0800d3fd 	.word	0x0800d3fd
 800d3e8:	0800d405 	.word	0x0800d405
 800d3ec:	0800d40d 	.word	0x0800d40d
 800d3f0:	0800d415 	.word	0x0800d415
 800d3f4:	0800d41d 	.word	0x0800d41d
 800d3f8:	0800d425 	.word	0x0800d425
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d402:	e1b6      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d404:	2304      	movs	r3, #4
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40a:	e1b2      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d40c:	2308      	movs	r3, #8
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d412:	e1ae      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d414:	2310      	movs	r3, #16
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41a:	e1aa      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d41c:	2320      	movs	r3, #32
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d422:	e1a6      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d424:	2340      	movs	r3, #64	@ 0x40
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42a:	e1a2      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d42c:	2380      	movs	r3, #128	@ 0x80
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d432:	e19e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a35      	ldr	r2, [pc, #212]	@ (800d510 <UART_SetConfig+0x344>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d130      	bne.n	800d4a0 <UART_SetConfig+0x2d4>
 800d43e:	4b31      	ldr	r3, [pc, #196]	@ (800d504 <UART_SetConfig+0x338>)
 800d440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d442:	f003 0307 	and.w	r3, r3, #7
 800d446:	2b05      	cmp	r3, #5
 800d448:	d826      	bhi.n	800d498 <UART_SetConfig+0x2cc>
 800d44a:	a201      	add	r2, pc, #4	@ (adr r2, 800d450 <UART_SetConfig+0x284>)
 800d44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d450:	0800d469 	.word	0x0800d469
 800d454:	0800d471 	.word	0x0800d471
 800d458:	0800d479 	.word	0x0800d479
 800d45c:	0800d481 	.word	0x0800d481
 800d460:	0800d489 	.word	0x0800d489
 800d464:	0800d491 	.word	0x0800d491
 800d468:	2300      	movs	r3, #0
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d46e:	e180      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d470:	2304      	movs	r3, #4
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d476:	e17c      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d478:	2308      	movs	r3, #8
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d47e:	e178      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d480:	2310      	movs	r3, #16
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d486:	e174      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d488:	2320      	movs	r3, #32
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48e:	e170      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d490:	2340      	movs	r3, #64	@ 0x40
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d496:	e16c      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d498:	2380      	movs	r3, #128	@ 0x80
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49e:	e168      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d514 <UART_SetConfig+0x348>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d142      	bne.n	800d530 <UART_SetConfig+0x364>
 800d4aa:	4b16      	ldr	r3, [pc, #88]	@ (800d504 <UART_SetConfig+0x338>)
 800d4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4ae:	f003 0307 	and.w	r3, r3, #7
 800d4b2:	2b05      	cmp	r3, #5
 800d4b4:	d838      	bhi.n	800d528 <UART_SetConfig+0x35c>
 800d4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4bc <UART_SetConfig+0x2f0>)
 800d4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4bc:	0800d4d5 	.word	0x0800d4d5
 800d4c0:	0800d4dd 	.word	0x0800d4dd
 800d4c4:	0800d4e5 	.word	0x0800d4e5
 800d4c8:	0800d4ed 	.word	0x0800d4ed
 800d4cc:	0800d519 	.word	0x0800d519
 800d4d0:	0800d521 	.word	0x0800d521
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4da:	e14a      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d4dc:	2304      	movs	r3, #4
 800d4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4e2:	e146      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d4e4:	2308      	movs	r3, #8
 800d4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ea:	e142      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d4ec:	2310      	movs	r3, #16
 800d4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f2:	e13e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d4f4:	cfff69f3 	.word	0xcfff69f3
 800d4f8:	58000c00 	.word	0x58000c00
 800d4fc:	11fff4ff 	.word	0x11fff4ff
 800d500:	40011000 	.word	0x40011000
 800d504:	58024400 	.word	0x58024400
 800d508:	40004400 	.word	0x40004400
 800d50c:	40004800 	.word	0x40004800
 800d510:	40004c00 	.word	0x40004c00
 800d514:	40005000 	.word	0x40005000
 800d518:	2320      	movs	r3, #32
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e128      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d520:	2340      	movs	r3, #64	@ 0x40
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e124      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d528:	2380      	movs	r3, #128	@ 0x80
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52e:	e120      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4acb      	ldr	r2, [pc, #812]	@ (800d864 <UART_SetConfig+0x698>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d176      	bne.n	800d628 <UART_SetConfig+0x45c>
 800d53a:	4bcb      	ldr	r3, [pc, #812]	@ (800d868 <UART_SetConfig+0x69c>)
 800d53c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d53e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d542:	2b28      	cmp	r3, #40	@ 0x28
 800d544:	d86c      	bhi.n	800d620 <UART_SetConfig+0x454>
 800d546:	a201      	add	r2, pc, #4	@ (adr r2, 800d54c <UART_SetConfig+0x380>)
 800d548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d54c:	0800d5f1 	.word	0x0800d5f1
 800d550:	0800d621 	.word	0x0800d621
 800d554:	0800d621 	.word	0x0800d621
 800d558:	0800d621 	.word	0x0800d621
 800d55c:	0800d621 	.word	0x0800d621
 800d560:	0800d621 	.word	0x0800d621
 800d564:	0800d621 	.word	0x0800d621
 800d568:	0800d621 	.word	0x0800d621
 800d56c:	0800d5f9 	.word	0x0800d5f9
 800d570:	0800d621 	.word	0x0800d621
 800d574:	0800d621 	.word	0x0800d621
 800d578:	0800d621 	.word	0x0800d621
 800d57c:	0800d621 	.word	0x0800d621
 800d580:	0800d621 	.word	0x0800d621
 800d584:	0800d621 	.word	0x0800d621
 800d588:	0800d621 	.word	0x0800d621
 800d58c:	0800d601 	.word	0x0800d601
 800d590:	0800d621 	.word	0x0800d621
 800d594:	0800d621 	.word	0x0800d621
 800d598:	0800d621 	.word	0x0800d621
 800d59c:	0800d621 	.word	0x0800d621
 800d5a0:	0800d621 	.word	0x0800d621
 800d5a4:	0800d621 	.word	0x0800d621
 800d5a8:	0800d621 	.word	0x0800d621
 800d5ac:	0800d609 	.word	0x0800d609
 800d5b0:	0800d621 	.word	0x0800d621
 800d5b4:	0800d621 	.word	0x0800d621
 800d5b8:	0800d621 	.word	0x0800d621
 800d5bc:	0800d621 	.word	0x0800d621
 800d5c0:	0800d621 	.word	0x0800d621
 800d5c4:	0800d621 	.word	0x0800d621
 800d5c8:	0800d621 	.word	0x0800d621
 800d5cc:	0800d611 	.word	0x0800d611
 800d5d0:	0800d621 	.word	0x0800d621
 800d5d4:	0800d621 	.word	0x0800d621
 800d5d8:	0800d621 	.word	0x0800d621
 800d5dc:	0800d621 	.word	0x0800d621
 800d5e0:	0800d621 	.word	0x0800d621
 800d5e4:	0800d621 	.word	0x0800d621
 800d5e8:	0800d621 	.word	0x0800d621
 800d5ec:	0800d619 	.word	0x0800d619
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f6:	e0bc      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d5f8:	2304      	movs	r3, #4
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fe:	e0b8      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d600:	2308      	movs	r3, #8
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d606:	e0b4      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d608:	2310      	movs	r3, #16
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60e:	e0b0      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d610:	2320      	movs	r3, #32
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d616:	e0ac      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d618:	2340      	movs	r3, #64	@ 0x40
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61e:	e0a8      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d620:	2380      	movs	r3, #128	@ 0x80
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d626:	e0a4      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a8f      	ldr	r2, [pc, #572]	@ (800d86c <UART_SetConfig+0x6a0>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d130      	bne.n	800d694 <UART_SetConfig+0x4c8>
 800d632:	4b8d      	ldr	r3, [pc, #564]	@ (800d868 <UART_SetConfig+0x69c>)
 800d634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	2b05      	cmp	r3, #5
 800d63c:	d826      	bhi.n	800d68c <UART_SetConfig+0x4c0>
 800d63e:	a201      	add	r2, pc, #4	@ (adr r2, 800d644 <UART_SetConfig+0x478>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d65d 	.word	0x0800d65d
 800d648:	0800d665 	.word	0x0800d665
 800d64c:	0800d66d 	.word	0x0800d66d
 800d650:	0800d675 	.word	0x0800d675
 800d654:	0800d67d 	.word	0x0800d67d
 800d658:	0800d685 	.word	0x0800d685
 800d65c:	2300      	movs	r3, #0
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d662:	e086      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d664:	2304      	movs	r3, #4
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66a:	e082      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d66c:	2308      	movs	r3, #8
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d672:	e07e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d674:	2310      	movs	r3, #16
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e07a      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d67c:	2320      	movs	r3, #32
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e076      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d684:	2340      	movs	r3, #64	@ 0x40
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68a:	e072      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d68c:	2380      	movs	r3, #128	@ 0x80
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d692:	e06e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a75      	ldr	r2, [pc, #468]	@ (800d870 <UART_SetConfig+0x6a4>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d130      	bne.n	800d700 <UART_SetConfig+0x534>
 800d69e:	4b72      	ldr	r3, [pc, #456]	@ (800d868 <UART_SetConfig+0x69c>)
 800d6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6a2:	f003 0307 	and.w	r3, r3, #7
 800d6a6:	2b05      	cmp	r3, #5
 800d6a8:	d826      	bhi.n	800d6f8 <UART_SetConfig+0x52c>
 800d6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d6b0 <UART_SetConfig+0x4e4>)
 800d6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b0:	0800d6c9 	.word	0x0800d6c9
 800d6b4:	0800d6d1 	.word	0x0800d6d1
 800d6b8:	0800d6d9 	.word	0x0800d6d9
 800d6bc:	0800d6e1 	.word	0x0800d6e1
 800d6c0:	0800d6e9 	.word	0x0800d6e9
 800d6c4:	0800d6f1 	.word	0x0800d6f1
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ce:	e050      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d6d0:	2304      	movs	r3, #4
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d6:	e04c      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d6d8:	2308      	movs	r3, #8
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6de:	e048      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d6e0:	2310      	movs	r3, #16
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e6:	e044      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d6e8:	2320      	movs	r3, #32
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ee:	e040      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d6f0:	2340      	movs	r3, #64	@ 0x40
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f6:	e03c      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d6f8:	2380      	movs	r3, #128	@ 0x80
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fe:	e038      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a5b      	ldr	r2, [pc, #364]	@ (800d874 <UART_SetConfig+0x6a8>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d130      	bne.n	800d76c <UART_SetConfig+0x5a0>
 800d70a:	4b57      	ldr	r3, [pc, #348]	@ (800d868 <UART_SetConfig+0x69c>)
 800d70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d70e:	f003 0307 	and.w	r3, r3, #7
 800d712:	2b05      	cmp	r3, #5
 800d714:	d826      	bhi.n	800d764 <UART_SetConfig+0x598>
 800d716:	a201      	add	r2, pc, #4	@ (adr r2, 800d71c <UART_SetConfig+0x550>)
 800d718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71c:	0800d735 	.word	0x0800d735
 800d720:	0800d73d 	.word	0x0800d73d
 800d724:	0800d745 	.word	0x0800d745
 800d728:	0800d74d 	.word	0x0800d74d
 800d72c:	0800d755 	.word	0x0800d755
 800d730:	0800d75d 	.word	0x0800d75d
 800d734:	2302      	movs	r3, #2
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d73a:	e01a      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d73c:	2304      	movs	r3, #4
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d742:	e016      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d744:	2308      	movs	r3, #8
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74a:	e012      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d74c:	2310      	movs	r3, #16
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d752:	e00e      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d754:	2320      	movs	r3, #32
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75a:	e00a      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d75c:	2340      	movs	r3, #64	@ 0x40
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d762:	e006      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d764:	2380      	movs	r3, #128	@ 0x80
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76a:	e002      	b.n	800d772 <UART_SetConfig+0x5a6>
 800d76c:	2380      	movs	r3, #128	@ 0x80
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a3f      	ldr	r2, [pc, #252]	@ (800d874 <UART_SetConfig+0x6a8>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	f040 80f8 	bne.w	800d96e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d77e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d782:	2b20      	cmp	r3, #32
 800d784:	dc46      	bgt.n	800d814 <UART_SetConfig+0x648>
 800d786:	2b02      	cmp	r3, #2
 800d788:	f2c0 8082 	blt.w	800d890 <UART_SetConfig+0x6c4>
 800d78c:	3b02      	subs	r3, #2
 800d78e:	2b1e      	cmp	r3, #30
 800d790:	d87e      	bhi.n	800d890 <UART_SetConfig+0x6c4>
 800d792:	a201      	add	r2, pc, #4	@ (adr r2, 800d798 <UART_SetConfig+0x5cc>)
 800d794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d798:	0800d81b 	.word	0x0800d81b
 800d79c:	0800d891 	.word	0x0800d891
 800d7a0:	0800d823 	.word	0x0800d823
 800d7a4:	0800d891 	.word	0x0800d891
 800d7a8:	0800d891 	.word	0x0800d891
 800d7ac:	0800d891 	.word	0x0800d891
 800d7b0:	0800d833 	.word	0x0800d833
 800d7b4:	0800d891 	.word	0x0800d891
 800d7b8:	0800d891 	.word	0x0800d891
 800d7bc:	0800d891 	.word	0x0800d891
 800d7c0:	0800d891 	.word	0x0800d891
 800d7c4:	0800d891 	.word	0x0800d891
 800d7c8:	0800d891 	.word	0x0800d891
 800d7cc:	0800d891 	.word	0x0800d891
 800d7d0:	0800d843 	.word	0x0800d843
 800d7d4:	0800d891 	.word	0x0800d891
 800d7d8:	0800d891 	.word	0x0800d891
 800d7dc:	0800d891 	.word	0x0800d891
 800d7e0:	0800d891 	.word	0x0800d891
 800d7e4:	0800d891 	.word	0x0800d891
 800d7e8:	0800d891 	.word	0x0800d891
 800d7ec:	0800d891 	.word	0x0800d891
 800d7f0:	0800d891 	.word	0x0800d891
 800d7f4:	0800d891 	.word	0x0800d891
 800d7f8:	0800d891 	.word	0x0800d891
 800d7fc:	0800d891 	.word	0x0800d891
 800d800:	0800d891 	.word	0x0800d891
 800d804:	0800d891 	.word	0x0800d891
 800d808:	0800d891 	.word	0x0800d891
 800d80c:	0800d891 	.word	0x0800d891
 800d810:	0800d883 	.word	0x0800d883
 800d814:	2b40      	cmp	r3, #64	@ 0x40
 800d816:	d037      	beq.n	800d888 <UART_SetConfig+0x6bc>
 800d818:	e03a      	b.n	800d890 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d81a:	f7fb fff9 	bl	8009810 <HAL_RCCEx_GetD3PCLK1Freq>
 800d81e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d820:	e03c      	b.n	800d89c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d826:	4618      	mov	r0, r3
 800d828:	f7fc f808 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d830:	e034      	b.n	800d89c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d832:	f107 0318 	add.w	r3, r7, #24
 800d836:	4618      	mov	r0, r3
 800d838:	f7fc f954 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d840:	e02c      	b.n	800d89c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d842:	4b09      	ldr	r3, [pc, #36]	@ (800d868 <UART_SetConfig+0x69c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f003 0320 	and.w	r3, r3, #32
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d016      	beq.n	800d87c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d84e:	4b06      	ldr	r3, [pc, #24]	@ (800d868 <UART_SetConfig+0x69c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	08db      	lsrs	r3, r3, #3
 800d854:	f003 0303 	and.w	r3, r3, #3
 800d858:	4a07      	ldr	r2, [pc, #28]	@ (800d878 <UART_SetConfig+0x6ac>)
 800d85a:	fa22 f303 	lsr.w	r3, r2, r3
 800d85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d860:	e01c      	b.n	800d89c <UART_SetConfig+0x6d0>
 800d862:	bf00      	nop
 800d864:	40011400 	.word	0x40011400
 800d868:	58024400 	.word	0x58024400
 800d86c:	40007800 	.word	0x40007800
 800d870:	40007c00 	.word	0x40007c00
 800d874:	58000c00 	.word	0x58000c00
 800d878:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d87c:	4b9d      	ldr	r3, [pc, #628]	@ (800daf4 <UART_SetConfig+0x928>)
 800d87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d880:	e00c      	b.n	800d89c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d882:	4b9d      	ldr	r3, [pc, #628]	@ (800daf8 <UART_SetConfig+0x92c>)
 800d884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d886:	e009      	b.n	800d89c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d888:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d88e:	e005      	b.n	800d89c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d89a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d89c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 81de 	beq.w	800dc60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8a8:	4a94      	ldr	r2, [pc, #592]	@ (800dafc <UART_SetConfig+0x930>)
 800d8aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	4413      	add	r3, r2
 800d8c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d305      	bcc.n	800d8d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d903      	bls.n	800d8dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d8da:	e1c1      	b.n	800dc60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8de:	2200      	movs	r2, #0
 800d8e0:	60bb      	str	r3, [r7, #8]
 800d8e2:	60fa      	str	r2, [r7, #12]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8e8:	4a84      	ldr	r2, [pc, #528]	@ (800dafc <UART_SetConfig+0x930>)
 800d8ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	607a      	str	r2, [r7, #4]
 800d8f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d8fe:	f7f2 fd47 	bl	8000390 <__aeabi_uldivmod>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	4610      	mov	r0, r2
 800d908:	4619      	mov	r1, r3
 800d90a:	f04f 0200 	mov.w	r2, #0
 800d90e:	f04f 0300 	mov.w	r3, #0
 800d912:	020b      	lsls	r3, r1, #8
 800d914:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d918:	0202      	lsls	r2, r0, #8
 800d91a:	6979      	ldr	r1, [r7, #20]
 800d91c:	6849      	ldr	r1, [r1, #4]
 800d91e:	0849      	lsrs	r1, r1, #1
 800d920:	2000      	movs	r0, #0
 800d922:	460c      	mov	r4, r1
 800d924:	4605      	mov	r5, r0
 800d926:	eb12 0804 	adds.w	r8, r2, r4
 800d92a:	eb43 0905 	adc.w	r9, r3, r5
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	469a      	mov	sl, r3
 800d936:	4693      	mov	fp, r2
 800d938:	4652      	mov	r2, sl
 800d93a:	465b      	mov	r3, fp
 800d93c:	4640      	mov	r0, r8
 800d93e:	4649      	mov	r1, r9
 800d940:	f7f2 fd26 	bl	8000390 <__aeabi_uldivmod>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4613      	mov	r3, r2
 800d94a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d952:	d308      	bcc.n	800d966 <UART_SetConfig+0x79a>
 800d954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d95a:	d204      	bcs.n	800d966 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d962:	60da      	str	r2, [r3, #12]
 800d964:	e17c      	b.n	800dc60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d96c:	e178      	b.n	800dc60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d976:	f040 80c5 	bne.w	800db04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d97a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d97e:	2b20      	cmp	r3, #32
 800d980:	dc48      	bgt.n	800da14 <UART_SetConfig+0x848>
 800d982:	2b00      	cmp	r3, #0
 800d984:	db7b      	blt.n	800da7e <UART_SetConfig+0x8b2>
 800d986:	2b20      	cmp	r3, #32
 800d988:	d879      	bhi.n	800da7e <UART_SetConfig+0x8b2>
 800d98a:	a201      	add	r2, pc, #4	@ (adr r2, 800d990 <UART_SetConfig+0x7c4>)
 800d98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d990:	0800da1b 	.word	0x0800da1b
 800d994:	0800da23 	.word	0x0800da23
 800d998:	0800da7f 	.word	0x0800da7f
 800d99c:	0800da7f 	.word	0x0800da7f
 800d9a0:	0800da2b 	.word	0x0800da2b
 800d9a4:	0800da7f 	.word	0x0800da7f
 800d9a8:	0800da7f 	.word	0x0800da7f
 800d9ac:	0800da7f 	.word	0x0800da7f
 800d9b0:	0800da3b 	.word	0x0800da3b
 800d9b4:	0800da7f 	.word	0x0800da7f
 800d9b8:	0800da7f 	.word	0x0800da7f
 800d9bc:	0800da7f 	.word	0x0800da7f
 800d9c0:	0800da7f 	.word	0x0800da7f
 800d9c4:	0800da7f 	.word	0x0800da7f
 800d9c8:	0800da7f 	.word	0x0800da7f
 800d9cc:	0800da7f 	.word	0x0800da7f
 800d9d0:	0800da4b 	.word	0x0800da4b
 800d9d4:	0800da7f 	.word	0x0800da7f
 800d9d8:	0800da7f 	.word	0x0800da7f
 800d9dc:	0800da7f 	.word	0x0800da7f
 800d9e0:	0800da7f 	.word	0x0800da7f
 800d9e4:	0800da7f 	.word	0x0800da7f
 800d9e8:	0800da7f 	.word	0x0800da7f
 800d9ec:	0800da7f 	.word	0x0800da7f
 800d9f0:	0800da7f 	.word	0x0800da7f
 800d9f4:	0800da7f 	.word	0x0800da7f
 800d9f8:	0800da7f 	.word	0x0800da7f
 800d9fc:	0800da7f 	.word	0x0800da7f
 800da00:	0800da7f 	.word	0x0800da7f
 800da04:	0800da7f 	.word	0x0800da7f
 800da08:	0800da7f 	.word	0x0800da7f
 800da0c:	0800da7f 	.word	0x0800da7f
 800da10:	0800da71 	.word	0x0800da71
 800da14:	2b40      	cmp	r3, #64	@ 0x40
 800da16:	d02e      	beq.n	800da76 <UART_SetConfig+0x8aa>
 800da18:	e031      	b.n	800da7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da1a:	f7fa fc81 	bl	8008320 <HAL_RCC_GetPCLK1Freq>
 800da1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da20:	e033      	b.n	800da8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da22:	f7fa fc93 	bl	800834c <HAL_RCC_GetPCLK2Freq>
 800da26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da28:	e02f      	b.n	800da8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fb ff04 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da38:	e027      	b.n	800da8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da3a:	f107 0318 	add.w	r3, r7, #24
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fc f850 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da48:	e01f      	b.n	800da8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da4a:	4b2d      	ldr	r3, [pc, #180]	@ (800db00 <UART_SetConfig+0x934>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f003 0320 	and.w	r3, r3, #32
 800da52:	2b00      	cmp	r3, #0
 800da54:	d009      	beq.n	800da6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da56:	4b2a      	ldr	r3, [pc, #168]	@ (800db00 <UART_SetConfig+0x934>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	08db      	lsrs	r3, r3, #3
 800da5c:	f003 0303 	and.w	r3, r3, #3
 800da60:	4a24      	ldr	r2, [pc, #144]	@ (800daf4 <UART_SetConfig+0x928>)
 800da62:	fa22 f303 	lsr.w	r3, r2, r3
 800da66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da68:	e00f      	b.n	800da8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800da6a:	4b22      	ldr	r3, [pc, #136]	@ (800daf4 <UART_SetConfig+0x928>)
 800da6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da6e:	e00c      	b.n	800da8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da70:	4b21      	ldr	r3, [pc, #132]	@ (800daf8 <UART_SetConfig+0x92c>)
 800da72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da74:	e009      	b.n	800da8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da7c:	e005      	b.n	800da8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da7e:	2300      	movs	r3, #0
 800da80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800da88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f000 80e7 	beq.w	800dc60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da96:	4a19      	ldr	r2, [pc, #100]	@ (800dafc <UART_SetConfig+0x930>)
 800da98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da9c:	461a      	mov	r2, r3
 800da9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800daa4:	005a      	lsls	r2, r3, #1
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	085b      	lsrs	r3, r3, #1
 800daac:	441a      	add	r2, r3
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dab6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daba:	2b0f      	cmp	r3, #15
 800dabc:	d916      	bls.n	800daec <UART_SetConfig+0x920>
 800dabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dac4:	d212      	bcs.n	800daec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f023 030f 	bic.w	r3, r3, #15
 800dace:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad2:	085b      	lsrs	r3, r3, #1
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	b29a      	uxth	r2, r3
 800dadc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dade:	4313      	orrs	r3, r2
 800dae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dae8:	60da      	str	r2, [r3, #12]
 800daea:	e0b9      	b.n	800dc60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800daf2:	e0b5      	b.n	800dc60 <UART_SetConfig+0xa94>
 800daf4:	03d09000 	.word	0x03d09000
 800daf8:	003d0900 	.word	0x003d0900
 800dafc:	08024ce0 	.word	0x08024ce0
 800db00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800db04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db08:	2b20      	cmp	r3, #32
 800db0a:	dc49      	bgt.n	800dba0 <UART_SetConfig+0x9d4>
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	db7c      	blt.n	800dc0a <UART_SetConfig+0xa3e>
 800db10:	2b20      	cmp	r3, #32
 800db12:	d87a      	bhi.n	800dc0a <UART_SetConfig+0xa3e>
 800db14:	a201      	add	r2, pc, #4	@ (adr r2, 800db1c <UART_SetConfig+0x950>)
 800db16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1a:	bf00      	nop
 800db1c:	0800dba7 	.word	0x0800dba7
 800db20:	0800dbaf 	.word	0x0800dbaf
 800db24:	0800dc0b 	.word	0x0800dc0b
 800db28:	0800dc0b 	.word	0x0800dc0b
 800db2c:	0800dbb7 	.word	0x0800dbb7
 800db30:	0800dc0b 	.word	0x0800dc0b
 800db34:	0800dc0b 	.word	0x0800dc0b
 800db38:	0800dc0b 	.word	0x0800dc0b
 800db3c:	0800dbc7 	.word	0x0800dbc7
 800db40:	0800dc0b 	.word	0x0800dc0b
 800db44:	0800dc0b 	.word	0x0800dc0b
 800db48:	0800dc0b 	.word	0x0800dc0b
 800db4c:	0800dc0b 	.word	0x0800dc0b
 800db50:	0800dc0b 	.word	0x0800dc0b
 800db54:	0800dc0b 	.word	0x0800dc0b
 800db58:	0800dc0b 	.word	0x0800dc0b
 800db5c:	0800dbd7 	.word	0x0800dbd7
 800db60:	0800dc0b 	.word	0x0800dc0b
 800db64:	0800dc0b 	.word	0x0800dc0b
 800db68:	0800dc0b 	.word	0x0800dc0b
 800db6c:	0800dc0b 	.word	0x0800dc0b
 800db70:	0800dc0b 	.word	0x0800dc0b
 800db74:	0800dc0b 	.word	0x0800dc0b
 800db78:	0800dc0b 	.word	0x0800dc0b
 800db7c:	0800dc0b 	.word	0x0800dc0b
 800db80:	0800dc0b 	.word	0x0800dc0b
 800db84:	0800dc0b 	.word	0x0800dc0b
 800db88:	0800dc0b 	.word	0x0800dc0b
 800db8c:	0800dc0b 	.word	0x0800dc0b
 800db90:	0800dc0b 	.word	0x0800dc0b
 800db94:	0800dc0b 	.word	0x0800dc0b
 800db98:	0800dc0b 	.word	0x0800dc0b
 800db9c:	0800dbfd 	.word	0x0800dbfd
 800dba0:	2b40      	cmp	r3, #64	@ 0x40
 800dba2:	d02e      	beq.n	800dc02 <UART_SetConfig+0xa36>
 800dba4:	e031      	b.n	800dc0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dba6:	f7fa fbbb 	bl	8008320 <HAL_RCC_GetPCLK1Freq>
 800dbaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbac:	e033      	b.n	800dc16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbae:	f7fa fbcd 	bl	800834c <HAL_RCC_GetPCLK2Freq>
 800dbb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbb4:	e02f      	b.n	800dc16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fb fe3e 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbc4:	e027      	b.n	800dc16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbc6:	f107 0318 	add.w	r3, r7, #24
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fb ff8a 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbd4:	e01f      	b.n	800dc16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbd6:	4b2d      	ldr	r3, [pc, #180]	@ (800dc8c <UART_SetConfig+0xac0>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f003 0320 	and.w	r3, r3, #32
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d009      	beq.n	800dbf6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbe2:	4b2a      	ldr	r3, [pc, #168]	@ (800dc8c <UART_SetConfig+0xac0>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	08db      	lsrs	r3, r3, #3
 800dbe8:	f003 0303 	and.w	r3, r3, #3
 800dbec:	4a28      	ldr	r2, [pc, #160]	@ (800dc90 <UART_SetConfig+0xac4>)
 800dbee:	fa22 f303 	lsr.w	r3, r2, r3
 800dbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbf4:	e00f      	b.n	800dc16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dbf6:	4b26      	ldr	r3, [pc, #152]	@ (800dc90 <UART_SetConfig+0xac4>)
 800dbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbfa:	e00c      	b.n	800dc16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbfc:	4b25      	ldr	r3, [pc, #148]	@ (800dc94 <UART_SetConfig+0xac8>)
 800dbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc00:	e009      	b.n	800dc16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc08:	e005      	b.n	800dc16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc14:	bf00      	nop
    }

    if (pclk != 0U)
 800dc16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d021      	beq.n	800dc60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc20:	4a1d      	ldr	r2, [pc, #116]	@ (800dc98 <UART_SetConfig+0xacc>)
 800dc22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc26:	461a      	mov	r2, r3
 800dc28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	085b      	lsrs	r3, r3, #1
 800dc34:	441a      	add	r2, r3
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc42:	2b0f      	cmp	r3, #15
 800dc44:	d909      	bls.n	800dc5a <UART_SetConfig+0xa8e>
 800dc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc4c:	d205      	bcs.n	800dc5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60da      	str	r2, [r3, #12]
 800dc58:	e002      	b.n	800dc60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2200      	movs	r2, #0
 800dc74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dc7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3748      	adds	r7, #72	@ 0x48
 800dc84:	46bd      	mov	sp, r7
 800dc86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc8a:	bf00      	nop
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	03d09000 	.word	0x03d09000
 800dc94:	003d0900 	.word	0x003d0900
 800dc98:	08024ce0 	.word	0x08024ce0

0800dc9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca8:	f003 0308 	and.w	r3, r3, #8
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00a      	beq.n	800dcc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	430a      	orrs	r2, r1
 800dcc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00a      	beq.n	800dce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	430a      	orrs	r2, r1
 800dce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00a      	beq.n	800dd0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	430a      	orrs	r2, r1
 800dd08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0e:	f003 0304 	and.w	r3, r3, #4
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd30:	f003 0310 	and.w	r3, r3, #16
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00a      	beq.n	800dd4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	430a      	orrs	r2, r1
 800dd4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd52:	f003 0320 	and.w	r3, r3, #32
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00a      	beq.n	800dd70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d01a      	beq.n	800ddb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	430a      	orrs	r2, r1
 800dd90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd9a:	d10a      	bne.n	800ddb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	430a      	orrs	r2, r1
 800ddb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00a      	beq.n	800ddd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	430a      	orrs	r2, r1
 800ddd2:	605a      	str	r2, [r3, #4]
  }
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b098      	sub	sp, #96	@ 0x60
 800dde4:	af02      	add	r7, sp, #8
 800dde6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ddf0:	f7f4 fa68 	bl	80022c4 <HAL_GetTick>
 800ddf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0308 	and.w	r3, r3, #8
 800de00:	2b08      	cmp	r3, #8
 800de02:	d12f      	bne.n	800de64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de08:	9300      	str	r3, [sp, #0]
 800de0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de0c:	2200      	movs	r2, #0
 800de0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 f88e 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d022      	beq.n	800de64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	e853 3f00 	ldrex	r3, [r3]
 800de2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de32:	653b      	str	r3, [r7, #80]	@ 0x50
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	461a      	mov	r2, r3
 800de3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800de3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de44:	e841 2300 	strex	r3, r2, [r1]
 800de48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1e6      	bne.n	800de1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2220      	movs	r2, #32
 800de54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e063      	b.n	800df2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b04      	cmp	r3, #4
 800de70:	d149      	bne.n	800df06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de7a:	2200      	movs	r2, #0
 800de7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f857 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d03c      	beq.n	800df06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de94:	e853 3f00 	ldrex	r3, [r3]
 800de98:	623b      	str	r3, [r7, #32]
   return(result);
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	461a      	mov	r2, r3
 800dea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800deac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb2:	e841 2300 	strex	r3, r2, [r1]
 800deb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800deb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1e6      	bne.n	800de8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3308      	adds	r3, #8
 800dec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	e853 3f00 	ldrex	r3, [r3]
 800decc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f023 0301 	bic.w	r3, r3, #1
 800ded4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3308      	adds	r3, #8
 800dedc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dede:	61fa      	str	r2, [r7, #28]
 800dee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee2:	69b9      	ldr	r1, [r7, #24]
 800dee4:	69fa      	ldr	r2, [r7, #28]
 800dee6:	e841 2300 	strex	r3, r2, [r1]
 800deea:	617b      	str	r3, [r7, #20]
   return(result);
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e5      	bne.n	800debe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2220      	movs	r2, #32
 800def6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df02:	2303      	movs	r3, #3
 800df04:	e012      	b.n	800df2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2220      	movs	r2, #32
 800df0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3758      	adds	r7, #88	@ 0x58
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	4613      	mov	r3, r2
 800df42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df44:	e04f      	b.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4c:	d04b      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df4e:	f7f4 f9b9 	bl	80022c4 <HAL_GetTick>
 800df52:	4602      	mov	r2, r0
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	69ba      	ldr	r2, [r7, #24]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d302      	bcc.n	800df64 <UART_WaitOnFlagUntilTimeout+0x30>
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d101      	bne.n	800df68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e04e      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f003 0304 	and.w	r3, r3, #4
 800df72:	2b00      	cmp	r3, #0
 800df74:	d037      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b80      	cmp	r3, #128	@ 0x80
 800df7a:	d034      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b40      	cmp	r3, #64	@ 0x40
 800df80:	d031      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	69db      	ldr	r3, [r3, #28]
 800df88:	f003 0308 	and.w	r3, r3, #8
 800df8c:	2b08      	cmp	r3, #8
 800df8e:	d110      	bne.n	800dfb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2208      	movs	r2, #8
 800df96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f000 f921 	bl	800e1e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2208      	movs	r2, #8
 800dfa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e029      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	69db      	ldr	r3, [r3, #28]
 800dfb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfc0:	d111      	bne.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dfca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 f907 	bl	800e1e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2220      	movs	r2, #32
 800dfd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	e00f      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	4013      	ands	r3, r2
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	bf0c      	ite	eq
 800dff6:	2301      	moveq	r3, #1
 800dff8:	2300      	movne	r3, #0
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	461a      	mov	r2, r3
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	429a      	cmp	r2, r3
 800e002:	d0a0      	beq.n	800df46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b096      	sub	sp, #88	@ 0x58
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	4613      	mov	r3, r2
 800e01c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	88fa      	ldrh	r2, [r7, #6]
 800e028:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2222      	movs	r2, #34	@ 0x22
 800e038:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e042:	2b00      	cmp	r3, #0
 800e044:	d02d      	beq.n	800e0a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e04c:	4a40      	ldr	r2, [pc, #256]	@ (800e150 <UART_Start_Receive_DMA+0x140>)
 800e04e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e056:	4a3f      	ldr	r2, [pc, #252]	@ (800e154 <UART_Start_Receive_DMA+0x144>)
 800e058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e060:	4a3d      	ldr	r2, [pc, #244]	@ (800e158 <UART_Start_Receive_DMA+0x148>)
 800e062:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e06a:	2200      	movs	r2, #0
 800e06c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3324      	adds	r3, #36	@ 0x24
 800e07a:	4619      	mov	r1, r3
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e080:	461a      	mov	r2, r3
 800e082:	88fb      	ldrh	r3, [r7, #6]
 800e084:	f7f4 fd96 	bl	8002bb4 <HAL_DMA_Start_IT>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d009      	beq.n	800e0a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2210      	movs	r2, #16
 800e092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2220      	movs	r2, #32
 800e09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e051      	b.n	800e146 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d018      	beq.n	800e0dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b2:	e853 3f00 	ldrex	r3, [r3]
 800e0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0be:	657b      	str	r3, [r7, #84]	@ 0x54
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e0ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0d0:	e841 2300 	strex	r3, r2, [r1]
 800e0d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e0d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1e6      	bne.n	800e0aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3308      	adds	r3, #8
 800e0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e6:	e853 3f00 	ldrex	r3, [r3]
 800e0ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ee:	f043 0301 	orr.w	r3, r3, #1
 800e0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e0fc:	637a      	str	r2, [r7, #52]	@ 0x34
 800e0fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e100:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e102:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e104:	e841 2300 	strex	r3, r2, [r1]
 800e108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1e5      	bne.n	800e0dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3308      	adds	r3, #8
 800e116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	e853 3f00 	ldrex	r3, [r3]
 800e11e:	613b      	str	r3, [r7, #16]
   return(result);
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3308      	adds	r3, #8
 800e12e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e130:	623a      	str	r2, [r7, #32]
 800e132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e134:	69f9      	ldr	r1, [r7, #28]
 800e136:	6a3a      	ldr	r2, [r7, #32]
 800e138:	e841 2300 	strex	r3, r2, [r1]
 800e13c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1e5      	bne.n	800e110 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3758      	adds	r7, #88	@ 0x58
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	0800e367 	.word	0x0800e367
 800e154:	0800e497 	.word	0x0800e497
 800e158:	0800e4dd 	.word	0x0800e4dd

0800e15c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b08f      	sub	sp, #60	@ 0x3c
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	e853 3f00 	ldrex	r3, [r3]
 800e170:	61fb      	str	r3, [r7, #28]
   return(result);
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e178:	637b      	str	r3, [r7, #52]	@ 0x34
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e184:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e18a:	e841 2300 	strex	r3, r2, [r1]
 800e18e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1e6      	bne.n	800e164 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3308      	adds	r3, #8
 800e19c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	e853 3f00 	ldrex	r3, [r3]
 800e1a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e1ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	3308      	adds	r3, #8
 800e1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1b6:	61ba      	str	r2, [r7, #24]
 800e1b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ba:	6979      	ldr	r1, [r7, #20]
 800e1bc:	69ba      	ldr	r2, [r7, #24]
 800e1be:	e841 2300 	strex	r3, r2, [r1]
 800e1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1e5      	bne.n	800e196 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2220      	movs	r2, #32
 800e1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e1d2:	bf00      	nop
 800e1d4:	373c      	adds	r7, #60	@ 0x3c
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
	...

0800e1e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b095      	sub	sp, #84	@ 0x54
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f0:	e853 3f00 	ldrex	r3, [r3]
 800e1f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e206:	643b      	str	r3, [r7, #64]	@ 0x40
 800e208:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e20c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e6      	bne.n	800e1e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3308      	adds	r3, #8
 800e220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	e853 3f00 	ldrex	r3, [r3]
 800e228:	61fb      	str	r3, [r7, #28]
   return(result);
 800e22a:	69fa      	ldr	r2, [r7, #28]
 800e22c:	4b1e      	ldr	r3, [pc, #120]	@ (800e2a8 <UART_EndRxTransfer+0xc8>)
 800e22e:	4013      	ands	r3, r2
 800e230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3308      	adds	r3, #8
 800e238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e23a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e23c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e242:	e841 2300 	strex	r3, r2, [r1]
 800e246:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1e5      	bne.n	800e21a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e252:	2b01      	cmp	r3, #1
 800e254:	d118      	bne.n	800e288 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	e853 3f00 	ldrex	r3, [r3]
 800e262:	60bb      	str	r3, [r7, #8]
   return(result);
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	f023 0310 	bic.w	r3, r3, #16
 800e26a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	461a      	mov	r2, r3
 800e272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e274:	61bb      	str	r3, [r7, #24]
 800e276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e278:	6979      	ldr	r1, [r7, #20]
 800e27a:	69ba      	ldr	r2, [r7, #24]
 800e27c:	e841 2300 	strex	r3, r2, [r1]
 800e280:	613b      	str	r3, [r7, #16]
   return(result);
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1e6      	bne.n	800e256 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2220      	movs	r2, #32
 800e28c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e29c:	bf00      	nop
 800e29e:	3754      	adds	r7, #84	@ 0x54
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	effffffe 	.word	0xeffffffe

0800e2ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b090      	sub	sp, #64	@ 0x40
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	69db      	ldr	r3, [r3, #28]
 800e2be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2c2:	d037      	beq.n	800e334 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d6:	e853 3f00 	ldrex	r3, [r3]
 800e2da:	623b      	str	r3, [r7, #32]
   return(result);
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800e2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2f4:	e841 2300 	strex	r3, r2, [r1]
 800e2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1e5      	bne.n	800e2cc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	e853 3f00 	ldrex	r3, [r3]
 800e30c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e314:	637b      	str	r3, [r7, #52]	@ 0x34
 800e316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	461a      	mov	r2, r3
 800e31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e322:	69b9      	ldr	r1, [r7, #24]
 800e324:	69fa      	ldr	r2, [r7, #28]
 800e326:	e841 2300 	strex	r3, r2, [r1]
 800e32a:	617b      	str	r3, [r7, #20]
   return(result);
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1e6      	bne.n	800e300 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e332:	e004      	b.n	800e33e <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 800e334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e33a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e33c:	4798      	blx	r3
}
 800e33e:	bf00      	nop
 800e340:	3740      	adds	r7, #64	@ 0x40
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b084      	sub	sp, #16
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e352:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e35e:	bf00      	nop
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b09c      	sub	sp, #112	@ 0x70
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e372:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e37c:	d071      	beq.n	800e462 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e37e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e380:	2200      	movs	r2, #0
 800e382:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e396:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e39a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e39c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e3a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e3aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3ac:	e841 2300 	strex	r3, r2, [r1]
 800e3b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e3b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e6      	bne.n	800e386 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ca:	f023 0301 	bic.w	r3, r3, #1
 800e3ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e3d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800e3da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3e0:	e841 2300 	strex	r3, r2, [r1]
 800e3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1e5      	bne.n	800e3b8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3308      	adds	r3, #8
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f6:	e853 3f00 	ldrex	r3, [r3]
 800e3fa:	623b      	str	r3, [r7, #32]
   return(result);
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e402:	663b      	str	r3, [r7, #96]	@ 0x60
 800e404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3308      	adds	r3, #8
 800e40a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e40c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e414:	e841 2300 	strex	r3, r2, [r1]
 800e418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1e5      	bne.n	800e3ec <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e422:	2220      	movs	r2, #32
 800e424:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e42a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d118      	bne.n	800e462 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	e853 3f00 	ldrex	r3, [r3]
 800e43c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f023 0310 	bic.w	r3, r3, #16
 800e444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e44e:	61fb      	str	r3, [r7, #28]
 800e450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e452:	69b9      	ldr	r1, [r7, #24]
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	e841 2300 	strex	r3, r2, [r1]
 800e45a:	617b      	str	r3, [r7, #20]
   return(result);
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1e6      	bne.n	800e430 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e464:	2200      	movs	r2, #0
 800e466:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d109      	bne.n	800e484 <UART_DMAReceiveCplt+0x11e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e472:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e476:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e478:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e47c:	4611      	mov	r1, r2
 800e47e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e480:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e482:	e004      	b.n	800e48e <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800e484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e48a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e48c:	4798      	blx	r3
}
 800e48e:	bf00      	nop
 800e490:	3770      	adds	r7, #112	@ 0x70
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b084      	sub	sp, #16
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d10b      	bne.n	800e4ca <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e4be:	0852      	lsrs	r2, r2, #1
 800e4c0:	b292      	uxth	r2, r2
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4c8:	e004      	b.n	800e4d4 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	4798      	blx	r3
}
 800e4d4:	bf00      	nop
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e504:	2b80      	cmp	r3, #128	@ 0x80
 800e506:	d109      	bne.n	800e51c <UART_DMAError+0x40>
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	2b21      	cmp	r3, #33	@ 0x21
 800e50c:	d106      	bne.n	800e51c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2200      	movs	r2, #0
 800e512:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e516:	6978      	ldr	r0, [r7, #20]
 800e518:	f7ff fe20 	bl	800e15c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e526:	2b40      	cmp	r3, #64	@ 0x40
 800e528:	d109      	bne.n	800e53e <UART_DMAError+0x62>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2b22      	cmp	r3, #34	@ 0x22
 800e52e:	d106      	bne.n	800e53e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2200      	movs	r2, #0
 800e534:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e538:	6978      	ldr	r0, [r7, #20]
 800e53a:	f7ff fe51 	bl	800e1e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e544:	f043 0210 	orr.w	r2, r3, #16
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e554:	6978      	ldr	r0, [r7, #20]
 800e556:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e558:	bf00      	nop
 800e55a:	3718      	adds	r7, #24
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e56c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2200      	movs	r2, #0
 800e572:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e588:	bf00      	nop
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b088      	sub	sp, #32
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	e853 3f00 	ldrex	r3, [r3]
 800e5a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5ac:	61fb      	str	r3, [r7, #28]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	61bb      	str	r3, [r7, #24]
 800e5b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ba:	6979      	ldr	r1, [r7, #20]
 800e5bc:	69ba      	ldr	r2, [r7, #24]
 800e5be:	e841 2300 	strex	r3, r2, [r1]
 800e5c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1e6      	bne.n	800e598 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5e2:	bf00      	nop
 800e5e4:	3720      	adds	r7, #32
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e5ea:	b480      	push	{r7}
 800e5ec:	b083      	sub	sp, #12
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e5f2:	bf00      	nop
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e606:	bf00      	nop
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e61a:	bf00      	nop
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e626:	b480      	push	{r7}
 800e628:	b085      	sub	sp, #20
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e634:	2b01      	cmp	r3, #1
 800e636:	d101      	bne.n	800e63c <HAL_UARTEx_DisableFifoMode+0x16>
 800e638:	2302      	movs	r3, #2
 800e63a:	e027      	b.n	800e68c <HAL_UARTEx_DisableFifoMode+0x66>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2224      	movs	r2, #36	@ 0x24
 800e648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f022 0201 	bic.w	r2, r2, #1
 800e662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e66a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d101      	bne.n	800e6b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	e02d      	b.n	800e70c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2224      	movs	r2, #36	@ 0x24
 800e6bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f022 0201 	bic.w	r2, r2, #1
 800e6d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	430a      	orrs	r2, r1
 800e6ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f8a3 	bl	800e838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e724:	2b01      	cmp	r3, #1
 800e726:	d101      	bne.n	800e72c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e728:	2302      	movs	r3, #2
 800e72a:	e02d      	b.n	800e788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2224      	movs	r2, #36	@ 0x24
 800e738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f022 0201 	bic.w	r2, r2, #1
 800e752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	430a      	orrs	r2, r1
 800e766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f865 	bl	800e838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2220      	movs	r2, #32
 800e77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08c      	sub	sp, #48	@ 0x30
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	4613      	mov	r3, r2
 800e79c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7a4:	2b20      	cmp	r3, #32
 800e7a6:	d142      	bne.n	800e82e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d002      	beq.n	800e7b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e7ae:	88fb      	ldrh	r3, [r7, #6]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d101      	bne.n	800e7b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e03b      	b.n	800e830 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e7c4:	88fb      	ldrh	r3, [r7, #6]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	68b9      	ldr	r1, [r7, #8]
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f7ff fc20 	bl	800e010 <UART_Start_Receive_DMA>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e7d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d124      	bne.n	800e828 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d11d      	bne.n	800e822 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2210      	movs	r2, #16
 800e7ec:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	e853 3f00 	ldrex	r3, [r3]
 800e7fa:	617b      	str	r3, [r7, #20]
   return(result);
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	f043 0310 	orr.w	r3, r3, #16
 800e802:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	461a      	mov	r2, r3
 800e80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e80e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e810:	6a39      	ldr	r1, [r7, #32]
 800e812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e814:	e841 2300 	strex	r3, r2, [r1]
 800e818:	61fb      	str	r3, [r7, #28]
   return(result);
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d1e6      	bne.n	800e7ee <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800e820:	e002      	b.n	800e828 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800e828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e82c:	e000      	b.n	800e830 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e82e:	2302      	movs	r3, #2
  }
}
 800e830:	4618      	mov	r0, r3
 800e832:	3730      	adds	r7, #48	@ 0x30
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e838:	b480      	push	{r7}
 800e83a:	b085      	sub	sp, #20
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e844:	2b00      	cmp	r3, #0
 800e846:	d108      	bne.n	800e85a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e858:	e031      	b.n	800e8be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e85a:	2310      	movs	r3, #16
 800e85c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e85e:	2310      	movs	r3, #16
 800e860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	0e5b      	lsrs	r3, r3, #25
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	f003 0307 	and.w	r3, r3, #7
 800e870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	0f5b      	lsrs	r3, r3, #29
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	f003 0307 	and.w	r3, r3, #7
 800e880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e882:	7bbb      	ldrb	r3, [r7, #14]
 800e884:	7b3a      	ldrb	r2, [r7, #12]
 800e886:	4911      	ldr	r1, [pc, #68]	@ (800e8cc <UARTEx_SetNbDataToProcess+0x94>)
 800e888:	5c8a      	ldrb	r2, [r1, r2]
 800e88a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e88e:	7b3a      	ldrb	r2, [r7, #12]
 800e890:	490f      	ldr	r1, [pc, #60]	@ (800e8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800e892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e894:	fb93 f3f2 	sdiv	r3, r3, r2
 800e898:	b29a      	uxth	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8a0:	7bfb      	ldrb	r3, [r7, #15]
 800e8a2:	7b7a      	ldrb	r2, [r7, #13]
 800e8a4:	4909      	ldr	r1, [pc, #36]	@ (800e8cc <UARTEx_SetNbDataToProcess+0x94>)
 800e8a6:	5c8a      	ldrb	r2, [r1, r2]
 800e8a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8ac:	7b7a      	ldrb	r2, [r7, #13]
 800e8ae:	4908      	ldr	r1, [pc, #32]	@ (800e8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800e8b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e8be:	bf00      	nop
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	08024cf8 	.word	0x08024cf8
 800e8d0:	08024d00 	.word	0x08024d00

0800e8d4 <__NVIC_SetPriority>:
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	6039      	str	r1, [r7, #0]
 800e8de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e8e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	db0a      	blt.n	800e8fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	490c      	ldr	r1, [pc, #48]	@ (800e920 <__NVIC_SetPriority+0x4c>)
 800e8ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8f2:	0112      	lsls	r2, r2, #4
 800e8f4:	b2d2      	uxtb	r2, r2
 800e8f6:	440b      	add	r3, r1
 800e8f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e8fc:	e00a      	b.n	800e914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	b2da      	uxtb	r2, r3
 800e902:	4908      	ldr	r1, [pc, #32]	@ (800e924 <__NVIC_SetPriority+0x50>)
 800e904:	88fb      	ldrh	r3, [r7, #6]
 800e906:	f003 030f 	and.w	r3, r3, #15
 800e90a:	3b04      	subs	r3, #4
 800e90c:	0112      	lsls	r2, r2, #4
 800e90e:	b2d2      	uxtb	r2, r2
 800e910:	440b      	add	r3, r1
 800e912:	761a      	strb	r2, [r3, #24]
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr
 800e920:	e000e100 	.word	0xe000e100
 800e924:	e000ed00 	.word	0xe000ed00

0800e928 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e92c:	4b05      	ldr	r3, [pc, #20]	@ (800e944 <SysTick_Handler+0x1c>)
 800e92e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e930:	f002 fb60 	bl	8010ff4 <xTaskGetSchedulerState>
 800e934:	4603      	mov	r3, r0
 800e936:	2b01      	cmp	r3, #1
 800e938:	d001      	beq.n	800e93e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e93a:	f003 fbfd 	bl	8012138 <xPortSysTickHandler>
  }
}
 800e93e:	bf00      	nop
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	e000e010 	.word	0xe000e010

0800e948 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e94c:	2100      	movs	r1, #0
 800e94e:	f06f 0004 	mvn.w	r0, #4
 800e952:	f7ff ffbf 	bl	800e8d4 <__NVIC_SetPriority>
#endif
}
 800e956:	bf00      	nop
 800e958:	bd80      	pop	{r7, pc}
	...

0800e95c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e962:	f3ef 8305 	mrs	r3, IPSR
 800e966:	603b      	str	r3, [r7, #0]
  return(result);
 800e968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e96e:	f06f 0305 	mvn.w	r3, #5
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	e00c      	b.n	800e990 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e976:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a0 <osKernelInitialize+0x44>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d105      	bne.n	800e98a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e97e:	4b08      	ldr	r3, [pc, #32]	@ (800e9a0 <osKernelInitialize+0x44>)
 800e980:	2201      	movs	r2, #1
 800e982:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e984:	2300      	movs	r3, #0
 800e986:	607b      	str	r3, [r7, #4]
 800e988:	e002      	b.n	800e990 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e98a:	f04f 33ff 	mov.w	r3, #4294967295
 800e98e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e990:	687b      	ldr	r3, [r7, #4]
}
 800e992:	4618      	mov	r0, r3
 800e994:	370c      	adds	r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	24000c5c 	.word	0x24000c5c

0800e9a4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800e9aa:	f002 fb23 	bl	8010ff4 <xTaskGetSchedulerState>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d004      	beq.n	800e9be <osKernelGetState+0x1a>
 800e9b4:	2b02      	cmp	r3, #2
 800e9b6:	d105      	bne.n	800e9c4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	607b      	str	r3, [r7, #4]
      break;
 800e9bc:	e00c      	b.n	800e9d8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800e9be:	2303      	movs	r3, #3
 800e9c0:	607b      	str	r3, [r7, #4]
      break;
 800e9c2:	e009      	b.n	800e9d8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800e9c4:	4b07      	ldr	r3, [pc, #28]	@ (800e9e4 <osKernelGetState+0x40>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d102      	bne.n	800e9d2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800e9d0:	e001      	b.n	800e9d6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	607b      	str	r3, [r7, #4]
      break;
 800e9d6:	bf00      	nop
  }

  return (state);
 800e9d8:	687b      	ldr	r3, [r7, #4]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	24000c5c 	.word	0x24000c5c

0800e9e8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9ee:	f3ef 8305 	mrs	r3, IPSR
 800e9f2:	603b      	str	r3, [r7, #0]
  return(result);
 800e9f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e9fa:	f06f 0305 	mvn.w	r3, #5
 800e9fe:	607b      	str	r3, [r7, #4]
 800ea00:	e010      	b.n	800ea24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ea02:	4b0b      	ldr	r3, [pc, #44]	@ (800ea30 <osKernelStart+0x48>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d109      	bne.n	800ea1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ea0a:	f7ff ff9d 	bl	800e948 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea0e:	4b08      	ldr	r3, [pc, #32]	@ (800ea30 <osKernelStart+0x48>)
 800ea10:	2202      	movs	r2, #2
 800ea12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ea14:	f001 fe68 	bl	80106e8 <vTaskStartScheduler>
      stat = osOK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	607b      	str	r3, [r7, #4]
 800ea1c:	e002      	b.n	800ea24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ea1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea24:	687b      	ldr	r3, [r7, #4]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	24000c5c 	.word	0x24000c5c

0800ea34 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea3a:	f3ef 8305 	mrs	r3, IPSR
 800ea3e:	603b      	str	r3, [r7, #0]
  return(result);
 800ea40:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d003      	beq.n	800ea4e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ea46:	f001 ff7b 	bl	8010940 <xTaskGetTickCountFromISR>
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	e002      	b.n	800ea54 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ea4e:	f001 ff67 	bl	8010920 <xTaskGetTickCount>
 800ea52:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ea54:	687b      	ldr	r3, [r7, #4]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b08e      	sub	sp, #56	@ 0x38
 800ea62:	af04      	add	r7, sp, #16
 800ea64:	60f8      	str	r0, [r7, #12]
 800ea66:	60b9      	str	r1, [r7, #8]
 800ea68:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea6e:	f3ef 8305 	mrs	r3, IPSR
 800ea72:	617b      	str	r3, [r7, #20]
  return(result);
 800ea74:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d17e      	bne.n	800eb78 <osThreadNew+0x11a>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d07b      	beq.n	800eb78 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ea80:	2380      	movs	r3, #128	@ 0x80
 800ea82:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ea84:	2318      	movs	r3, #24
 800ea86:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ea8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d045      	beq.n	800eb24 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <osThreadNew+0x48>
        name = attr->name;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	699b      	ldr	r3, [r3, #24]
 800eab2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d008      	beq.n	800eacc <osThreadNew+0x6e>
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	2b38      	cmp	r3, #56	@ 0x38
 800eabe:	d805      	bhi.n	800eacc <osThreadNew+0x6e>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	f003 0301 	and.w	r3, r3, #1
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <osThreadNew+0x72>
        return (NULL);
 800eacc:	2300      	movs	r3, #0
 800eace:	e054      	b.n	800eb7a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d003      	beq.n	800eae0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	089b      	lsrs	r3, r3, #2
 800eade:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00e      	beq.n	800eb06 <osThreadNew+0xa8>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	2ba7      	cmp	r3, #167	@ 0xa7
 800eaee:	d90a      	bls.n	800eb06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d006      	beq.n	800eb06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <osThreadNew+0xa8>
        mem = 1;
 800eb00:	2301      	movs	r3, #1
 800eb02:	61bb      	str	r3, [r7, #24]
 800eb04:	e010      	b.n	800eb28 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d10c      	bne.n	800eb28 <osThreadNew+0xca>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d108      	bne.n	800eb28 <osThreadNew+0xca>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	691b      	ldr	r3, [r3, #16]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d104      	bne.n	800eb28 <osThreadNew+0xca>
          mem = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	61bb      	str	r3, [r7, #24]
 800eb22:	e001      	b.n	800eb28 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eb24:	2300      	movs	r3, #0
 800eb26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d110      	bne.n	800eb50 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb36:	9202      	str	r2, [sp, #8]
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	6a3a      	ldr	r2, [r7, #32]
 800eb42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f001 fb5b 	bl	8010200 <xTaskCreateStatic>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	613b      	str	r3, [r7, #16]
 800eb4e:	e013      	b.n	800eb78 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d110      	bne.n	800eb78 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	f107 0310 	add.w	r3, r7, #16
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f001 fba9 	bl	80102c0 <xTaskCreate>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d001      	beq.n	800eb78 <osThreadNew+0x11a>
            hTask = NULL;
 800eb74:	2300      	movs	r3, #0
 800eb76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800eb78:	693b      	ldr	r3, [r7, #16]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3728      	adds	r7, #40	@ 0x28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb8a:	f3ef 8305 	mrs	r3, IPSR
 800eb8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <osDelay+0x1c>
    stat = osErrorISR;
 800eb96:	f06f 0305 	mvn.w	r3, #5
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	e007      	b.n	800ebae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <osDelay+0x2c>
      vTaskDelay(ticks);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f001 fd67 	bl	801067c <vTaskDelay>
    }
  }

  return (stat);
 800ebae:	68fb      	ldr	r3, [r7, #12]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebc0:	f3ef 8305 	mrs	r3, IPSR
 800ebc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ebcc:	f06f 0305 	mvn.w	r3, #5
 800ebd0:	617b      	str	r3, [r7, #20]
 800ebd2:	e019      	b.n	800ec08 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ebd8:	f001 fea2 	bl	8010920 <xTaskGetTickCount>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d009      	beq.n	800ec02 <osDelayUntil+0x4a>
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	db06      	blt.n	800ec02 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ebf4:	f107 0308 	add.w	r3, r7, #8
 800ebf8:	6939      	ldr	r1, [r7, #16]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f001 fcbe 	bl	801057c <vTaskDelayUntil>
 800ec00:	e002      	b.n	800ec08 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ec02:	f06f 0303 	mvn.w	r3, #3
 800ec06:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ec08:	697b      	ldr	r3, [r7, #20]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f003 f8a6 	bl	8011d6c <pvTimerGetTimerID>
 800ec20:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d005      	beq.n	800ec34 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	6852      	ldr	r2, [r2, #4]
 800ec30:	4610      	mov	r0, r2
 800ec32:	4798      	blx	r3
  }
}
 800ec34:	bf00      	nop
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b08c      	sub	sp, #48	@ 0x30
 800ec40:	af02      	add	r7, sp, #8
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	607a      	str	r2, [r7, #4]
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec50:	f3ef 8305 	mrs	r3, IPSR
 800ec54:	613b      	str	r3, [r7, #16]
  return(result);
 800ec56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d163      	bne.n	800ed24 <osTimerNew+0xe8>
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d060      	beq.n	800ed24 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ec62:	2008      	movs	r0, #8
 800ec64:	f003 fafa 	bl	801225c <pvPortMalloc>
 800ec68:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d059      	beq.n	800ed24 <osTimerNew+0xe8>
      callb->func = func;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ec7c:	7afb      	ldrb	r3, [r7, #11]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ec82:	2300      	movs	r3, #0
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	e001      	b.n	800ec8c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ec8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec90:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d01c      	beq.n	800ecd6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <osTimerNew+0x6e>
          name = attr->name;
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d006      	beq.n	800ecc0 <osTimerNew+0x84>
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ecb8:	d902      	bls.n	800ecc0 <osTimerNew+0x84>
          mem = 1;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	61bb      	str	r3, [r7, #24]
 800ecbe:	e00c      	b.n	800ecda <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d108      	bne.n	800ecda <osTimerNew+0x9e>
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d104      	bne.n	800ecda <osTimerNew+0x9e>
            mem = 0;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	61bb      	str	r3, [r7, #24]
 800ecd4:	e001      	b.n	800ecda <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d10c      	bne.n	800ecfa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	4b12      	ldr	r3, [pc, #72]	@ (800ed30 <osTimerNew+0xf4>)
 800ece8:	9300      	str	r3, [sp, #0]
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	69fa      	ldr	r2, [r7, #28]
 800ecee:	2101      	movs	r1, #1
 800ecf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecf2:	f002 fcae 	bl	8011652 <xTimerCreateStatic>
 800ecf6:	6238      	str	r0, [r7, #32]
 800ecf8:	e00b      	b.n	800ed12 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d108      	bne.n	800ed12 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ed00:	4b0b      	ldr	r3, [pc, #44]	@ (800ed30 <osTimerNew+0xf4>)
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	69fa      	ldr	r2, [r7, #28]
 800ed08:	2101      	movs	r1, #1
 800ed0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed0c:	f002 fc80 	bl	8011610 <xTimerCreate>
 800ed10:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d105      	bne.n	800ed24 <osTimerNew+0xe8>
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <osTimerNew+0xe8>
        vPortFree (callb);
 800ed1e:	6978      	ldr	r0, [r7, #20]
 800ed20:	f003 fb6a 	bl	80123f8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ed24:	6a3b      	ldr	r3, [r7, #32]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3728      	adds	r7, #40	@ 0x28
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	0800ec13 	.word	0x0800ec13

0800ed34 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b08a      	sub	sp, #40	@ 0x28
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed44:	f3ef 8305 	mrs	r3, IPSR
 800ed48:	613b      	str	r3, [r7, #16]
  return(result);
 800ed4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d175      	bne.n	800ee3c <osSemaphoreNew+0x108>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d072      	beq.n	800ee3c <osSemaphoreNew+0x108>
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d86e      	bhi.n	800ee3c <osSemaphoreNew+0x108>
    mem = -1;
 800ed5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d015      	beq.n	800ed96 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d006      	beq.n	800ed80 <osSemaphoreNew+0x4c>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	2b4f      	cmp	r3, #79	@ 0x4f
 800ed78:	d902      	bls.n	800ed80 <osSemaphoreNew+0x4c>
        mem = 1;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	61bb      	str	r3, [r7, #24]
 800ed7e:	e00c      	b.n	800ed9a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d108      	bne.n	800ed9a <osSemaphoreNew+0x66>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d104      	bne.n	800ed9a <osSemaphoreNew+0x66>
          mem = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	61bb      	str	r3, [r7, #24]
 800ed94:	e001      	b.n	800ed9a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda0:	d04c      	beq.n	800ee3c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d128      	bne.n	800edfa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d10a      	bne.n	800edc4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	2203      	movs	r2, #3
 800edb4:	9200      	str	r2, [sp, #0]
 800edb6:	2200      	movs	r2, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	2001      	movs	r0, #1
 800edbc:	f000 fa2c 	bl	800f218 <xQueueGenericCreateStatic>
 800edc0:	61f8      	str	r0, [r7, #28]
 800edc2:	e005      	b.n	800edd0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800edc4:	2203      	movs	r2, #3
 800edc6:	2100      	movs	r1, #0
 800edc8:	2001      	movs	r0, #1
 800edca:	f000 faa2 	bl	800f312 <xQueueGenericCreate>
 800edce:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d022      	beq.n	800ee1c <osSemaphoreNew+0xe8>
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d01f      	beq.n	800ee1c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800eddc:	2300      	movs	r3, #0
 800edde:	2200      	movs	r2, #0
 800ede0:	2100      	movs	r1, #0
 800ede2:	69f8      	ldr	r0, [r7, #28]
 800ede4:	f000 fb94 	bl	800f510 <xQueueGenericSend>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b01      	cmp	r3, #1
 800edec:	d016      	beq.n	800ee1c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800edee:	69f8      	ldr	r0, [r7, #28]
 800edf0:	f001 f832 	bl	800fe58 <vQueueDelete>
            hSemaphore = NULL;
 800edf4:	2300      	movs	r3, #0
 800edf6:	61fb      	str	r3, [r7, #28]
 800edf8:	e010      	b.n	800ee1c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d108      	bne.n	800ee12 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	461a      	mov	r2, r3
 800ee06:	68b9      	ldr	r1, [r7, #8]
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f000 fb12 	bl	800f432 <xQueueCreateCountingSemaphoreStatic>
 800ee0e:	61f8      	str	r0, [r7, #28]
 800ee10:	e004      	b.n	800ee1c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ee12:	68b9      	ldr	r1, [r7, #8]
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f000 fb45 	bl	800f4a4 <xQueueCreateCountingSemaphore>
 800ee1a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00c      	beq.n	800ee3c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	617b      	str	r3, [r7, #20]
 800ee2e:	e001      	b.n	800ee34 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ee30:	2300      	movs	r3, #0
 800ee32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ee34:	6979      	ldr	r1, [r7, #20]
 800ee36:	69f8      	ldr	r0, [r7, #28]
 800ee38:	f001 f95a 	bl	80100f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ee3c:	69fb      	ldr	r3, [r7, #28]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3720      	adds	r7, #32
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d103      	bne.n	800ee68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ee60:	f06f 0303 	mvn.w	r3, #3
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	e039      	b.n	800eedc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee68:	f3ef 8305 	mrs	r3, IPSR
 800ee6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d022      	beq.n	800eeba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ee7a:	f06f 0303 	mvn.w	r3, #3
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	e02c      	b.n	800eedc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ee82:	2300      	movs	r3, #0
 800ee84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ee86:	f107 0308 	add.w	r3, r7, #8
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	6938      	ldr	r0, [r7, #16]
 800ee90:	f000 ff60 	bl	800fd54 <xQueueReceiveFromISR>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d003      	beq.n	800eea2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ee9a:	f06f 0302 	mvn.w	r3, #2
 800ee9e:	617b      	str	r3, [r7, #20]
 800eea0:	e01c      	b.n	800eedc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d019      	beq.n	800eedc <osSemaphoreAcquire+0x94>
 800eea8:	4b0f      	ldr	r3, [pc, #60]	@ (800eee8 <osSemaphoreAcquire+0xa0>)
 800eeaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eeae:	601a      	str	r2, [r3, #0]
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	e010      	b.n	800eedc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6938      	ldr	r0, [r7, #16]
 800eebe:	f000 fe39 	bl	800fb34 <xQueueSemaphoreTake>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d009      	beq.n	800eedc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d003      	beq.n	800eed6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800eece:	f06f 0301 	mvn.w	r3, #1
 800eed2:	617b      	str	r3, [r7, #20]
 800eed4:	e002      	b.n	800eedc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800eed6:	f06f 0302 	mvn.w	r3, #2
 800eeda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800eedc:	697b      	ldr	r3, [r7, #20]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3718      	adds	r7, #24
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	e000ed04 	.word	0xe000ed04

0800eeec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d103      	bne.n	800ef0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ef02:	f06f 0303 	mvn.w	r3, #3
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	e02c      	b.n	800ef64 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef0a:	f3ef 8305 	mrs	r3, IPSR
 800ef0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d01a      	beq.n	800ef4c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ef16:	2300      	movs	r3, #0
 800ef18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ef1a:	f107 0308 	add.w	r3, r7, #8
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6938      	ldr	r0, [r7, #16]
 800ef22:	f000 fc95 	bl	800f850 <xQueueGiveFromISR>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d003      	beq.n	800ef34 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ef2c:	f06f 0302 	mvn.w	r3, #2
 800ef30:	617b      	str	r3, [r7, #20]
 800ef32:	e017      	b.n	800ef64 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d014      	beq.n	800ef64 <osSemaphoreRelease+0x78>
 800ef3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef70 <osSemaphoreRelease+0x84>)
 800ef3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef40:	601a      	str	r2, [r3, #0]
 800ef42:	f3bf 8f4f 	dsb	sy
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	e00b      	b.n	800ef64 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	2200      	movs	r2, #0
 800ef50:	2100      	movs	r1, #0
 800ef52:	6938      	ldr	r0, [r7, #16]
 800ef54:	f000 fadc 	bl	800f510 <xQueueGenericSend>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d002      	beq.n	800ef64 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ef5e:	f06f 0302 	mvn.w	r3, #2
 800ef62:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ef64:	697b      	ldr	r3, [r7, #20]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3718      	adds	r7, #24
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	e000ed04 	.word	0xe000ed04

0800ef74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4a07      	ldr	r2, [pc, #28]	@ (800efa0 <vApplicationGetIdleTaskMemory+0x2c>)
 800ef84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	4a06      	ldr	r2, [pc, #24]	@ (800efa4 <vApplicationGetIdleTaskMemory+0x30>)
 800ef8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2280      	movs	r2, #128	@ 0x80
 800ef90:	601a      	str	r2, [r3, #0]
}
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	24000c60 	.word	0x24000c60
 800efa4:	24000d08 	.word	0x24000d08

0800efa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	4a07      	ldr	r2, [pc, #28]	@ (800efd4 <vApplicationGetTimerTaskMemory+0x2c>)
 800efb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	4a06      	ldr	r2, [pc, #24]	@ (800efd8 <vApplicationGetTimerTaskMemory+0x30>)
 800efbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800efc6:	601a      	str	r2, [r3, #0]
}
 800efc8:	bf00      	nop
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	24000f08 	.word	0x24000f08
 800efd8:	24000fb0 	.word	0x24000fb0

0800efdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f103 0208 	add.w	r2, r3, #8
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f04f 32ff 	mov.w	r2, #4294967295
 800eff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f103 0208 	add.w	r2, r3, #8
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f103 0208 	add.w	r2, r3, #8
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f010:	bf00      	nop
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f02a:	bf00      	nop
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr

0800f036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f036:	b480      	push	{r7}
 800f038:	b085      	sub	sp, #20
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
 800f03e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	689a      	ldr	r2, [r3, #8]
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	601a      	str	r2, [r3, #0]
}
 800f072:	bf00      	nop
 800f074:	3714      	adds	r7, #20
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f094:	d103      	bne.n	800f09e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	e00c      	b.n	800f0b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	e002      	b.n	800f0ac <vListInsert+0x2e>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	60fb      	str	r3, [r7, #12]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68ba      	ldr	r2, [r7, #8]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d2f6      	bcs.n	800f0a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	1c5a      	adds	r2, r3, #1
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	601a      	str	r2, [r3, #0]
}
 800f0e4:	bf00      	nop
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	6892      	ldr	r2, [r2, #8]
 800f106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	6852      	ldr	r2, [r2, #4]
 800f110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d103      	bne.n	800f124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	689a      	ldr	r2, [r3, #8]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	1e5a      	subs	r2, r3, #1
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10b      	bne.n	800f170 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f16a:	bf00      	nop
 800f16c:	bf00      	nop
 800f16e:	e7fd      	b.n	800f16c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f170:	f002 ff52 	bl	8012018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f17c:	68f9      	ldr	r1, [r7, #12]
 800f17e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f180:	fb01 f303 	mul.w	r3, r1, r3
 800f184:	441a      	add	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	68f9      	ldr	r1, [r7, #12]
 800f1a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f1a6:	fb01 f303 	mul.w	r3, r1, r3
 800f1aa:	441a      	add	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	22ff      	movs	r2, #255	@ 0xff
 800f1b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	22ff      	movs	r2, #255	@ 0xff
 800f1bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d114      	bne.n	800f1f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d01a      	beq.n	800f204 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	3310      	adds	r3, #16
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f001 fd38 	bl	8010c48 <xTaskRemoveFromEventList>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d012      	beq.n	800f204 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f1de:	4b0d      	ldr	r3, [pc, #52]	@ (800f214 <xQueueGenericReset+0xd0>)
 800f1e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1e4:	601a      	str	r2, [r3, #0]
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	e009      	b.n	800f204 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3310      	adds	r3, #16
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff fef1 	bl	800efdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	3324      	adds	r3, #36	@ 0x24
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff feec 	bl	800efdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f204:	f002 ff3a 	bl	801207c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f208:	2301      	movs	r3, #1
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	e000ed04 	.word	0xe000ed04

0800f218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b08e      	sub	sp, #56	@ 0x38
 800f21c:	af02      	add	r7, sp, #8
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d10b      	bne.n	800f244 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f23e:	bf00      	nop
 800f240:	bf00      	nop
 800f242:	e7fd      	b.n	800f240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10b      	bne.n	800f262 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f25c:	bf00      	nop
 800f25e:	bf00      	nop
 800f260:	e7fd      	b.n	800f25e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <xQueueGenericCreateStatic+0x56>
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d001      	beq.n	800f272 <xQueueGenericCreateStatic+0x5a>
 800f26e:	2301      	movs	r3, #1
 800f270:	e000      	b.n	800f274 <xQueueGenericCreateStatic+0x5c>
 800f272:	2300      	movs	r3, #0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10b      	bne.n	800f290 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27c:	f383 8811 	msr	BASEPRI, r3
 800f280:	f3bf 8f6f 	isb	sy
 800f284:	f3bf 8f4f 	dsb	sy
 800f288:	623b      	str	r3, [r7, #32]
}
 800f28a:	bf00      	nop
 800f28c:	bf00      	nop
 800f28e:	e7fd      	b.n	800f28c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d102      	bne.n	800f29c <xQueueGenericCreateStatic+0x84>
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d101      	bne.n	800f2a0 <xQueueGenericCreateStatic+0x88>
 800f29c:	2301      	movs	r3, #1
 800f29e:	e000      	b.n	800f2a2 <xQueueGenericCreateStatic+0x8a>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10b      	bne.n	800f2be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2aa:	f383 8811 	msr	BASEPRI, r3
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	61fb      	str	r3, [r7, #28]
}
 800f2b8:	bf00      	nop
 800f2ba:	bf00      	nop
 800f2bc:	e7fd      	b.n	800f2ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f2be:	2350      	movs	r3, #80	@ 0x50
 800f2c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	2b50      	cmp	r3, #80	@ 0x50
 800f2c6:	d00b      	beq.n	800f2e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2cc:	f383 8811 	msr	BASEPRI, r3
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	61bb      	str	r3, [r7, #24]
}
 800f2da:	bf00      	nop
 800f2dc:	bf00      	nop
 800f2de:	e7fd      	b.n	800f2dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f2e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00d      	beq.n	800f308 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f000 f840 	bl	800f388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3730      	adds	r7, #48	@ 0x30
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f312:	b580      	push	{r7, lr}
 800f314:	b08a      	sub	sp, #40	@ 0x28
 800f316:	af02      	add	r7, sp, #8
 800f318:	60f8      	str	r0, [r7, #12]
 800f31a:	60b9      	str	r1, [r7, #8]
 800f31c:	4613      	mov	r3, r2
 800f31e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d10b      	bne.n	800f33e <xQueueGenericCreate+0x2c>
	__asm volatile
 800f326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	613b      	str	r3, [r7, #16]
}
 800f338:	bf00      	nop
 800f33a:	bf00      	nop
 800f33c:	e7fd      	b.n	800f33a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	fb02 f303 	mul.w	r3, r2, r3
 800f346:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	3350      	adds	r3, #80	@ 0x50
 800f34c:	4618      	mov	r0, r3
 800f34e:	f002 ff85 	bl	801225c <pvPortMalloc>
 800f352:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d011      	beq.n	800f37e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	3350      	adds	r3, #80	@ 0x50
 800f362:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	2200      	movs	r2, #0
 800f368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f36c:	79fa      	ldrb	r2, [r7, #7]
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	4613      	mov	r3, r2
 800f374:	697a      	ldr	r2, [r7, #20]
 800f376:	68b9      	ldr	r1, [r7, #8]
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	f000 f805 	bl	800f388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f37e:	69bb      	ldr	r3, [r7, #24]
	}
 800f380:	4618      	mov	r0, r3
 800f382:	3720      	adds	r7, #32
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d103      	bne.n	800f3a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	69ba      	ldr	r2, [r7, #24]
 800f3a0:	601a      	str	r2, [r3, #0]
 800f3a2:	e002      	b.n	800f3aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	68fa      	ldr	r2, [r7, #12]
 800f3ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	69b8      	ldr	r0, [r7, #24]
 800f3ba:	f7ff fec3 	bl	800f144 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	78fa      	ldrb	r2, [r7, #3]
 800f3c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f3c6:	bf00      	nop
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f3ce:	b580      	push	{r7, lr}
 800f3d0:	b082      	sub	sp, #8
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00e      	beq.n	800f3fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 f88b 	bl	800f510 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f3fa:	bf00      	nop
 800f3fc:	3708      	adds	r7, #8
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f402:	b580      	push	{r7, lr}
 800f404:	b086      	sub	sp, #24
 800f406:	af00      	add	r7, sp, #0
 800f408:	4603      	mov	r3, r0
 800f40a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f40c:	2301      	movs	r3, #1
 800f40e:	617b      	str	r3, [r7, #20]
 800f410:	2300      	movs	r3, #0
 800f412:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f414:	79fb      	ldrb	r3, [r7, #7]
 800f416:	461a      	mov	r2, r3
 800f418:	6939      	ldr	r1, [r7, #16]
 800f41a:	6978      	ldr	r0, [r7, #20]
 800f41c:	f7ff ff79 	bl	800f312 <xQueueGenericCreate>
 800f420:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff ffd3 	bl	800f3ce <prvInitialiseMutex>

		return xNewQueue;
 800f428:	68fb      	ldr	r3, [r7, #12]
	}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3718      	adds	r7, #24
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f432:	b580      	push	{r7, lr}
 800f434:	b08a      	sub	sp, #40	@ 0x28
 800f436:	af02      	add	r7, sp, #8
 800f438:	60f8      	str	r0, [r7, #12]
 800f43a:	60b9      	str	r1, [r7, #8]
 800f43c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10b      	bne.n	800f45c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	61bb      	str	r3, [r7, #24]
}
 800f456:	bf00      	nop
 800f458:	bf00      	nop
 800f45a:	e7fd      	b.n	800f458 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	429a      	cmp	r2, r3
 800f462:	d90b      	bls.n	800f47c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800f464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	617b      	str	r3, [r7, #20]
}
 800f476:	bf00      	nop
 800f478:	bf00      	nop
 800f47a:	e7fd      	b.n	800f478 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f47c:	2302      	movs	r3, #2
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	2100      	movs	r1, #0
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f7ff fec6 	bl	800f218 <xQueueGenericCreateStatic>
 800f48c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	68ba      	ldr	r2, [r7, #8]
 800f498:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f49a:	69fb      	ldr	r3, [r7, #28]
	}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3720      	adds	r7, #32
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b086      	sub	sp, #24
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10b      	bne.n	800f4cc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	613b      	str	r3, [r7, #16]
}
 800f4c6:	bf00      	nop
 800f4c8:	bf00      	nop
 800f4ca:	e7fd      	b.n	800f4c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d90b      	bls.n	800f4ec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d8:	f383 8811 	msr	BASEPRI, r3
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	f3bf 8f4f 	dsb	sy
 800f4e4:	60fb      	str	r3, [r7, #12]
}
 800f4e6:	bf00      	nop
 800f4e8:	bf00      	nop
 800f4ea:	e7fd      	b.n	800f4e8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f4ec:	2202      	movs	r2, #2
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7ff ff0e 	bl	800f312 <xQueueGenericCreate>
 800f4f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f504:	697b      	ldr	r3, [r7, #20]
	}
 800f506:	4618      	mov	r0, r3
 800f508:	3718      	adds	r7, #24
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
	...

0800f510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b08e      	sub	sp, #56	@ 0x38
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	607a      	str	r2, [r7, #4]
 800f51c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f51e:	2300      	movs	r3, #0
 800f520:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10b      	bne.n	800f544 <xQueueGenericSend+0x34>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f530:	f383 8811 	msr	BASEPRI, r3
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f53e:	bf00      	nop
 800f540:	bf00      	nop
 800f542:	e7fd      	b.n	800f540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d103      	bne.n	800f552 <xQueueGenericSend+0x42>
 800f54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d101      	bne.n	800f556 <xQueueGenericSend+0x46>
 800f552:	2301      	movs	r3, #1
 800f554:	e000      	b.n	800f558 <xQueueGenericSend+0x48>
 800f556:	2300      	movs	r3, #0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d10b      	bne.n	800f574 <xQueueGenericSend+0x64>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f56e:	bf00      	nop
 800f570:	bf00      	nop
 800f572:	e7fd      	b.n	800f570 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b02      	cmp	r3, #2
 800f578:	d103      	bne.n	800f582 <xQueueGenericSend+0x72>
 800f57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d101      	bne.n	800f586 <xQueueGenericSend+0x76>
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <xQueueGenericSend+0x78>
 800f586:	2300      	movs	r3, #0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10b      	bne.n	800f5a4 <xQueueGenericSend+0x94>
	__asm volatile
 800f58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	623b      	str	r3, [r7, #32]
}
 800f59e:	bf00      	nop
 800f5a0:	bf00      	nop
 800f5a2:	e7fd      	b.n	800f5a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5a4:	f001 fd26 	bl	8010ff4 <xTaskGetSchedulerState>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d102      	bne.n	800f5b4 <xQueueGenericSend+0xa4>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <xQueueGenericSend+0xa8>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e000      	b.n	800f5ba <xQueueGenericSend+0xaa>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d10b      	bne.n	800f5d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	61fb      	str	r3, [r7, #28]
}
 800f5d0:	bf00      	nop
 800f5d2:	bf00      	nop
 800f5d4:	e7fd      	b.n	800f5d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5d6:	f002 fd1f 	bl	8012018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d302      	bcc.n	800f5ec <xQueueGenericSend+0xdc>
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	2b02      	cmp	r3, #2
 800f5ea:	d129      	bne.n	800f640 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	68b9      	ldr	r1, [r7, #8]
 800f5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5f2:	f000 fc6d 	bl	800fed0 <prvCopyDataToQueue>
 800f5f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d010      	beq.n	800f622 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f602:	3324      	adds	r3, #36	@ 0x24
 800f604:	4618      	mov	r0, r3
 800f606:	f001 fb1f 	bl	8010c48 <xTaskRemoveFromEventList>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d013      	beq.n	800f638 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f610:	4b3f      	ldr	r3, [pc, #252]	@ (800f710 <xQueueGenericSend+0x200>)
 800f612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	e00a      	b.n	800f638 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f624:	2b00      	cmp	r3, #0
 800f626:	d007      	beq.n	800f638 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f628:	4b39      	ldr	r3, [pc, #228]	@ (800f710 <xQueueGenericSend+0x200>)
 800f62a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f62e:	601a      	str	r2, [r3, #0]
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f638:	f002 fd20 	bl	801207c <vPortExitCritical>
				return pdPASS;
 800f63c:	2301      	movs	r3, #1
 800f63e:	e063      	b.n	800f708 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d103      	bne.n	800f64e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f646:	f002 fd19 	bl	801207c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	e05c      	b.n	800f708 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f650:	2b00      	cmp	r3, #0
 800f652:	d106      	bne.n	800f662 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f654:	f107 0314 	add.w	r3, r7, #20
 800f658:	4618      	mov	r0, r3
 800f65a:	f001 fb59 	bl	8010d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f65e:	2301      	movs	r3, #1
 800f660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f662:	f002 fd0b 	bl	801207c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f666:	f001 f8af 	bl	80107c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f66a:	f002 fcd5 	bl	8012018 <vPortEnterCritical>
 800f66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f674:	b25b      	sxtb	r3, r3
 800f676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67a:	d103      	bne.n	800f684 <xQueueGenericSend+0x174>
 800f67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f68a:	b25b      	sxtb	r3, r3
 800f68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f690:	d103      	bne.n	800f69a <xQueueGenericSend+0x18a>
 800f692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f694:	2200      	movs	r2, #0
 800f696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f69a:	f002 fcef 	bl	801207c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f69e:	1d3a      	adds	r2, r7, #4
 800f6a0:	f107 0314 	add.w	r3, r7, #20
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f001 fb48 	bl	8010d3c <xTaskCheckForTimeOut>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d124      	bne.n	800f6fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f6b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6b4:	f000 fd04 	bl	80100c0 <prvIsQueueFull>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d018      	beq.n	800f6f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	3310      	adds	r3, #16
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f001 fa6c 	bl	8010ba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f6cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6ce:	f000 fc8f 	bl	800fff0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f6d2:	f001 f887 	bl	80107e4 <xTaskResumeAll>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f47f af7c 	bne.w	800f5d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f6de:	4b0c      	ldr	r3, [pc, #48]	@ (800f710 <xQueueGenericSend+0x200>)
 800f6e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	e772      	b.n	800f5d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f6f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6f2:	f000 fc7d 	bl	800fff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6f6:	f001 f875 	bl	80107e4 <xTaskResumeAll>
 800f6fa:	e76c      	b.n	800f5d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f6fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6fe:	f000 fc77 	bl	800fff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f702:	f001 f86f 	bl	80107e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3738      	adds	r7, #56	@ 0x38
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	e000ed04 	.word	0xe000ed04

0800f714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b090      	sub	sp, #64	@ 0x40
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
 800f720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d10b      	bne.n	800f744 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f730:	f383 8811 	msr	BASEPRI, r3
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	f3bf 8f4f 	dsb	sy
 800f73c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f73e:	bf00      	nop
 800f740:	bf00      	nop
 800f742:	e7fd      	b.n	800f740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d103      	bne.n	800f752 <xQueueGenericSendFromISR+0x3e>
 800f74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d101      	bne.n	800f756 <xQueueGenericSendFromISR+0x42>
 800f752:	2301      	movs	r3, #1
 800f754:	e000      	b.n	800f758 <xQueueGenericSendFromISR+0x44>
 800f756:	2300      	movs	r3, #0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10b      	bne.n	800f774 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f760:	f383 8811 	msr	BASEPRI, r3
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f76e:	bf00      	nop
 800f770:	bf00      	nop
 800f772:	e7fd      	b.n	800f770 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	2b02      	cmp	r3, #2
 800f778:	d103      	bne.n	800f782 <xQueueGenericSendFromISR+0x6e>
 800f77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d101      	bne.n	800f786 <xQueueGenericSendFromISR+0x72>
 800f782:	2301      	movs	r3, #1
 800f784:	e000      	b.n	800f788 <xQueueGenericSendFromISR+0x74>
 800f786:	2300      	movs	r3, #0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10b      	bne.n	800f7a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	623b      	str	r3, [r7, #32]
}
 800f79e:	bf00      	nop
 800f7a0:	bf00      	nop
 800f7a2:	e7fd      	b.n	800f7a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7a4:	f002 fd18 	bl	80121d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f7a8:	f3ef 8211 	mrs	r2, BASEPRI
 800f7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b0:	f383 8811 	msr	BASEPRI, r3
 800f7b4:	f3bf 8f6f 	isb	sy
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	61fa      	str	r2, [r7, #28]
 800f7be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f7c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d302      	bcc.n	800f7d6 <xQueueGenericSendFromISR+0xc2>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	2b02      	cmp	r3, #2
 800f7d4:	d12f      	bne.n	800f836 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f7e6:	683a      	ldr	r2, [r7, #0]
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f7ec:	f000 fb70 	bl	800fed0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f8:	d112      	bne.n	800f820 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d016      	beq.n	800f830 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f804:	3324      	adds	r3, #36	@ 0x24
 800f806:	4618      	mov	r0, r3
 800f808:	f001 fa1e 	bl	8010c48 <xTaskRemoveFromEventList>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00e      	beq.n	800f830 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00b      	beq.n	800f830 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	601a      	str	r2, [r3, #0]
 800f81e:	e007      	b.n	800f830 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f820:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f824:	3301      	adds	r3, #1
 800f826:	b2db      	uxtb	r3, r3
 800f828:	b25a      	sxtb	r2, r3
 800f82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f830:	2301      	movs	r3, #1
 800f832:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f834:	e001      	b.n	800f83a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f836:	2300      	movs	r3, #0
 800f838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f83c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3740      	adds	r7, #64	@ 0x40
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08e      	sub	sp, #56	@ 0x38
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10b      	bne.n	800f87c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f868:	f383 8811 	msr	BASEPRI, r3
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f3bf 8f4f 	dsb	sy
 800f874:	623b      	str	r3, [r7, #32]
}
 800f876:	bf00      	nop
 800f878:	bf00      	nop
 800f87a:	e7fd      	b.n	800f878 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	61fb      	str	r3, [r7, #28]
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	e7fd      	b.n	800f898 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <xQueueGiveFromISR+0x5c>
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <xQueueGiveFromISR+0x60>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e000      	b.n	800f8b2 <xQueueGiveFromISR+0x62>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10b      	bne.n	800f8ce <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	61bb      	str	r3, [r7, #24]
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	e7fd      	b.n	800f8ca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8ce:	f002 fc83 	bl	80121d8 <vPortValidateInterruptPriority>
	__asm volatile
 800f8d2:	f3ef 8211 	mrs	r2, BASEPRI
 800f8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	617a      	str	r2, [r7, #20]
 800f8e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f8ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d22b      	bcs.n	800f956 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f910:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f918:	d112      	bne.n	800f940 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d016      	beq.n	800f950 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f924:	3324      	adds	r3, #36	@ 0x24
 800f926:	4618      	mov	r0, r3
 800f928:	f001 f98e 	bl	8010c48 <xTaskRemoveFromEventList>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00e      	beq.n	800f950 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00b      	beq.n	800f950 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2201      	movs	r2, #1
 800f93c:	601a      	str	r2, [r3, #0]
 800f93e:	e007      	b.n	800f950 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f944:	3301      	adds	r3, #1
 800f946:	b2db      	uxtb	r3, r3
 800f948:	b25a      	sxtb	r2, r3
 800f94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f94c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f950:	2301      	movs	r3, #1
 800f952:	637b      	str	r3, [r7, #52]	@ 0x34
 800f954:	e001      	b.n	800f95a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f956:	2300      	movs	r3, #0
 800f958:	637b      	str	r3, [r7, #52]	@ 0x34
 800f95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f95c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f383 8811 	msr	BASEPRI, r3
}
 800f964:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3738      	adds	r7, #56	@ 0x38
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08c      	sub	sp, #48	@ 0x30
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f97c:	2300      	movs	r3, #0
 800f97e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f986:	2b00      	cmp	r3, #0
 800f988:	d10b      	bne.n	800f9a2 <xQueueReceive+0x32>
	__asm volatile
 800f98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98e:	f383 8811 	msr	BASEPRI, r3
 800f992:	f3bf 8f6f 	isb	sy
 800f996:	f3bf 8f4f 	dsb	sy
 800f99a:	623b      	str	r3, [r7, #32]
}
 800f99c:	bf00      	nop
 800f99e:	bf00      	nop
 800f9a0:	e7fd      	b.n	800f99e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d103      	bne.n	800f9b0 <xQueueReceive+0x40>
 800f9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <xQueueReceive+0x44>
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e000      	b.n	800f9b6 <xQueueReceive+0x46>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10b      	bne.n	800f9d2 <xQueueReceive+0x62>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	61fb      	str	r3, [r7, #28]
}
 800f9cc:	bf00      	nop
 800f9ce:	bf00      	nop
 800f9d0:	e7fd      	b.n	800f9ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9d2:	f001 fb0f 	bl	8010ff4 <xTaskGetSchedulerState>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d102      	bne.n	800f9e2 <xQueueReceive+0x72>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <xQueueReceive+0x76>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e000      	b.n	800f9e8 <xQueueReceive+0x78>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10b      	bne.n	800fa04 <xQueueReceive+0x94>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	61bb      	str	r3, [r7, #24]
}
 800f9fe:	bf00      	nop
 800fa00:	bf00      	nop
 800fa02:	e7fd      	b.n	800fa00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa04:	f002 fb08 	bl	8012018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d01f      	beq.n	800fa54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa18:	f000 fac4 	bl	800ffa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1e:	1e5a      	subs	r2, r3, #1
 800fa20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa26:	691b      	ldr	r3, [r3, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00f      	beq.n	800fa4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2e:	3310      	adds	r3, #16
 800fa30:	4618      	mov	r0, r3
 800fa32:	f001 f909 	bl	8010c48 <xTaskRemoveFromEventList>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d007      	beq.n	800fa4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa3c:	4b3c      	ldr	r3, [pc, #240]	@ (800fb30 <xQueueReceive+0x1c0>)
 800fa3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	f3bf 8f4f 	dsb	sy
 800fa48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa4c:	f002 fb16 	bl	801207c <vPortExitCritical>
				return pdPASS;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e069      	b.n	800fb28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d103      	bne.n	800fa62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa5a:	f002 fb0f 	bl	801207c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	e062      	b.n	800fb28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d106      	bne.n	800fa76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa68:	f107 0310 	add.w	r3, r7, #16
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f001 f94f 	bl	8010d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa72:	2301      	movs	r3, #1
 800fa74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa76:	f002 fb01 	bl	801207c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa7a:	f000 fea5 	bl	80107c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa7e:	f002 facb 	bl	8012018 <vPortEnterCritical>
 800fa82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fa88:	b25b      	sxtb	r3, r3
 800fa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa8e:	d103      	bne.n	800fa98 <xQueueReceive+0x128>
 800fa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa92:	2200      	movs	r2, #0
 800fa94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa9e:	b25b      	sxtb	r3, r3
 800faa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa4:	d103      	bne.n	800faae <xQueueReceive+0x13e>
 800faa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800faae:	f002 fae5 	bl	801207c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fab2:	1d3a      	adds	r2, r7, #4
 800fab4:	f107 0310 	add.w	r3, r7, #16
 800fab8:	4611      	mov	r1, r2
 800faba:	4618      	mov	r0, r3
 800fabc:	f001 f93e 	bl	8010d3c <xTaskCheckForTimeOut>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d123      	bne.n	800fb0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fac8:	f000 fae4 	bl	8010094 <prvIsQueueEmpty>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d017      	beq.n	800fb02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fad4:	3324      	adds	r3, #36	@ 0x24
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f001 f862 	bl	8010ba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fae2:	f000 fa85 	bl	800fff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fae6:	f000 fe7d 	bl	80107e4 <xTaskResumeAll>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d189      	bne.n	800fa04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800faf0:	4b0f      	ldr	r3, [pc, #60]	@ (800fb30 <xQueueReceive+0x1c0>)
 800faf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	e780      	b.n	800fa04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fb02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb04:	f000 fa74 	bl	800fff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb08:	f000 fe6c 	bl	80107e4 <xTaskResumeAll>
 800fb0c:	e77a      	b.n	800fa04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fb0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb10:	f000 fa6e 	bl	800fff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb14:	f000 fe66 	bl	80107e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb1a:	f000 fabb 	bl	8010094 <prvIsQueueEmpty>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f43f af6f 	beq.w	800fa04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fb26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3730      	adds	r7, #48	@ 0x30
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	e000ed04 	.word	0xe000ed04

0800fb34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b08e      	sub	sp, #56	@ 0x38
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fb46:	2300      	movs	r3, #0
 800fb48:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10b      	bne.n	800fb68 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	623b      	str	r3, [r7, #32]
}
 800fb62:	bf00      	nop
 800fb64:	bf00      	nop
 800fb66:	e7fd      	b.n	800fb64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00b      	beq.n	800fb88 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	61fb      	str	r3, [r7, #28]
}
 800fb82:	bf00      	nop
 800fb84:	bf00      	nop
 800fb86:	e7fd      	b.n	800fb84 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb88:	f001 fa34 	bl	8010ff4 <xTaskGetSchedulerState>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d102      	bne.n	800fb98 <xQueueSemaphoreTake+0x64>
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d101      	bne.n	800fb9c <xQueueSemaphoreTake+0x68>
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e000      	b.n	800fb9e <xQueueSemaphoreTake+0x6a>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10b      	bne.n	800fbba <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	61bb      	str	r3, [r7, #24]
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop
 800fbb8:	e7fd      	b.n	800fbb6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fbba:	f002 fa2d 	bl	8012018 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbc2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d024      	beq.n	800fc14 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbcc:	1e5a      	subs	r2, r3, #1
 800fbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d104      	bne.n	800fbe4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fbda:	f001 fb85 	bl	80112e8 <pvTaskIncrementMutexHeldCount>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe6:	691b      	ldr	r3, [r3, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00f      	beq.n	800fc0c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbee:	3310      	adds	r3, #16
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f001 f829 	bl	8010c48 <xTaskRemoveFromEventList>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d007      	beq.n	800fc0c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fbfc:	4b54      	ldr	r3, [pc, #336]	@ (800fd50 <xQueueSemaphoreTake+0x21c>)
 800fbfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc02:	601a      	str	r2, [r3, #0]
 800fc04:	f3bf 8f4f 	dsb	sy
 800fc08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fc0c:	f002 fa36 	bl	801207c <vPortExitCritical>
				return pdPASS;
 800fc10:	2301      	movs	r3, #1
 800fc12:	e098      	b.n	800fd46 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d112      	bne.n	800fc40 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	617b      	str	r3, [r7, #20]
}
 800fc32:	bf00      	nop
 800fc34:	bf00      	nop
 800fc36:	e7fd      	b.n	800fc34 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fc38:	f002 fa20 	bl	801207c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	e082      	b.n	800fd46 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d106      	bne.n	800fc54 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc46:	f107 030c 	add.w	r3, r7, #12
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f001 f860 	bl	8010d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc50:	2301      	movs	r3, #1
 800fc52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc54:	f002 fa12 	bl	801207c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc58:	f000 fdb6 	bl	80107c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc5c:	f002 f9dc 	bl	8012018 <vPortEnterCritical>
 800fc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc66:	b25b      	sxtb	r3, r3
 800fc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6c:	d103      	bne.n	800fc76 <xQueueSemaphoreTake+0x142>
 800fc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc7c:	b25b      	sxtb	r3, r3
 800fc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc82:	d103      	bne.n	800fc8c <xQueueSemaphoreTake+0x158>
 800fc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc8c:	f002 f9f6 	bl	801207c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc90:	463a      	mov	r2, r7
 800fc92:	f107 030c 	add.w	r3, r7, #12
 800fc96:	4611      	mov	r1, r2
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f001 f84f 	bl	8010d3c <xTaskCheckForTimeOut>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d132      	bne.n	800fd0a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fca4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fca6:	f000 f9f5 	bl	8010094 <prvIsQueueEmpty>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d026      	beq.n	800fcfe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d109      	bne.n	800fccc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fcb8:	f002 f9ae 	bl	8012018 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f001 f9b5 	bl	8011030 <xTaskPriorityInherit>
 800fcc6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fcc8:	f002 f9d8 	bl	801207c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcce:	3324      	adds	r3, #36	@ 0x24
 800fcd0:	683a      	ldr	r2, [r7, #0]
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 ff65 	bl	8010ba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fcda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fcdc:	f000 f988 	bl	800fff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fce0:	f000 fd80 	bl	80107e4 <xTaskResumeAll>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f47f af67 	bne.w	800fbba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fcec:	4b18      	ldr	r3, [pc, #96]	@ (800fd50 <xQueueSemaphoreTake+0x21c>)
 800fcee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcf2:	601a      	str	r2, [r3, #0]
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	e75d      	b.n	800fbba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fcfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd00:	f000 f976 	bl	800fff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd04:	f000 fd6e 	bl	80107e4 <xTaskResumeAll>
 800fd08:	e757      	b.n	800fbba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fd0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd0c:	f000 f970 	bl	800fff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd10:	f000 fd68 	bl	80107e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd16:	f000 f9bd 	bl	8010094 <prvIsQueueEmpty>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f43f af4c 	beq.w	800fbba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00d      	beq.n	800fd44 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fd28:	f002 f976 	bl	8012018 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fd2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd2e:	f000 f8b7 	bl	800fea0 <prvGetDisinheritPriorityAfterTimeout>
 800fd32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f001 fa50 	bl	80111e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fd40:	f002 f99c 	bl	801207c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fd44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3738      	adds	r7, #56	@ 0x38
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	e000ed04 	.word	0xe000ed04

0800fd54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b08e      	sub	sp, #56	@ 0x38
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10b      	bne.n	800fd82 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	623b      	str	r3, [r7, #32]
}
 800fd7c:	bf00      	nop
 800fd7e:	bf00      	nop
 800fd80:	e7fd      	b.n	800fd7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d103      	bne.n	800fd90 <xQueueReceiveFromISR+0x3c>
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <xQueueReceiveFromISR+0x40>
 800fd90:	2301      	movs	r3, #1
 800fd92:	e000      	b.n	800fd96 <xQueueReceiveFromISR+0x42>
 800fd94:	2300      	movs	r3, #0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10b      	bne.n	800fdb2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9e:	f383 8811 	msr	BASEPRI, r3
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	61fb      	str	r3, [r7, #28]
}
 800fdac:	bf00      	nop
 800fdae:	bf00      	nop
 800fdb0:	e7fd      	b.n	800fdae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdb2:	f002 fa11 	bl	80121d8 <vPortValidateInterruptPriority>
	__asm volatile
 800fdb6:	f3ef 8211 	mrs	r2, BASEPRI
 800fdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	61ba      	str	r2, [r7, #24]
 800fdcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fdce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d02f      	beq.n	800fe3e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fde4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fde8:	68b9      	ldr	r1, [r7, #8]
 800fdea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fdec:	f000 f8da 	bl	800ffa4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf2:	1e5a      	subs	r2, r3, #1
 800fdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fdf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe00:	d112      	bne.n	800fe28 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe04:	691b      	ldr	r3, [r3, #16]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d016      	beq.n	800fe38 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0c:	3310      	adds	r3, #16
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 ff1a 	bl	8010c48 <xTaskRemoveFromEventList>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00e      	beq.n	800fe38 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d00b      	beq.n	800fe38 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	e007      	b.n	800fe38 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fe28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	b25a      	sxtb	r2, r3
 800fe32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe3c:	e001      	b.n	800fe42 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe44:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f383 8811 	msr	BASEPRI, r3
}
 800fe4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3738      	adds	r7, #56	@ 0x38
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10b      	bne.n	800fe82 <vQueueDelete+0x2a>
	__asm volatile
 800fe6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6e:	f383 8811 	msr	BASEPRI, r3
 800fe72:	f3bf 8f6f 	isb	sy
 800fe76:	f3bf 8f4f 	dsb	sy
 800fe7a:	60bb      	str	r3, [r7, #8]
}
 800fe7c:	bf00      	nop
 800fe7e:	bf00      	nop
 800fe80:	e7fd      	b.n	800fe7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f000 f95e 	bl	8010144 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d102      	bne.n	800fe98 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f002 fab0 	bl	80123f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fe98:	bf00      	nop
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fea0:	b480      	push	{r7}
 800fea2:	b085      	sub	sp, #20
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feac:	2b00      	cmp	r3, #0
 800feae:	d006      	beq.n	800febe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800feba:	60fb      	str	r3, [r7, #12]
 800febc:	e001      	b.n	800fec2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800febe:	2300      	movs	r3, #0
 800fec0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fec2:	68fb      	ldr	r3, [r7, #12]
	}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3714      	adds	r7, #20
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fedc:	2300      	movs	r3, #0
 800fede:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fee4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10d      	bne.n	800ff0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d14d      	bne.n	800ff92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	4618      	mov	r0, r3
 800fefc:	f001 f900 	bl	8011100 <xTaskPriorityDisinherit>
 800ff00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2200      	movs	r2, #0
 800ff06:	609a      	str	r2, [r3, #8]
 800ff08:	e043      	b.n	800ff92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d119      	bne.n	800ff44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6858      	ldr	r0, [r3, #4]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff18:	461a      	mov	r2, r3
 800ff1a:	68b9      	ldr	r1, [r7, #8]
 800ff1c:	f012 fee9 	bl	8022cf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	685a      	ldr	r2, [r3, #4]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff28:	441a      	add	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	685a      	ldr	r2, [r3, #4]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d32b      	bcc.n	800ff92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	605a      	str	r2, [r3, #4]
 800ff42:	e026      	b.n	800ff92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	68d8      	ldr	r0, [r3, #12]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	68b9      	ldr	r1, [r7, #8]
 800ff50:	f012 fecf 	bl	8022cf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	68da      	ldr	r2, [r3, #12]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff5c:	425b      	negs	r3, r3
 800ff5e:	441a      	add	r2, r3
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	68da      	ldr	r2, [r3, #12]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d207      	bcs.n	800ff80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	689a      	ldr	r2, [r3, #8]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff78:	425b      	negs	r3, r3
 800ff7a:	441a      	add	r2, r3
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2b02      	cmp	r3, #2
 800ff84:	d105      	bne.n	800ff92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ff9a:	697b      	ldr	r3, [r7, #20]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3718      	adds	r7, #24
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d018      	beq.n	800ffe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	68da      	ldr	r2, [r3, #12]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffbe:	441a      	add	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	68da      	ldr	r2, [r3, #12]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d303      	bcc.n	800ffd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68d9      	ldr	r1, [r3, #12]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	6838      	ldr	r0, [r7, #0]
 800ffe4:	f012 fe85 	bl	8022cf2 <memcpy>
	}
}
 800ffe8:	bf00      	nop
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fff8:	f002 f80e 	bl	8012018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010002:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010004:	e011      	b.n	801002a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801000a:	2b00      	cmp	r3, #0
 801000c:	d012      	beq.n	8010034 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	3324      	adds	r3, #36	@ 0x24
 8010012:	4618      	mov	r0, r3
 8010014:	f000 fe18 	bl	8010c48 <xTaskRemoveFromEventList>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801001e:	f000 fef1 	bl	8010e04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010022:	7bfb      	ldrb	r3, [r7, #15]
 8010024:	3b01      	subs	r3, #1
 8010026:	b2db      	uxtb	r3, r3
 8010028:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801002a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801002e:	2b00      	cmp	r3, #0
 8010030:	dce9      	bgt.n	8010006 <prvUnlockQueue+0x16>
 8010032:	e000      	b.n	8010036 <prvUnlockQueue+0x46>
					break;
 8010034:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	22ff      	movs	r2, #255	@ 0xff
 801003a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801003e:	f002 f81d 	bl	801207c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010042:	f001 ffe9 	bl	8012018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801004c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801004e:	e011      	b.n	8010074 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d012      	beq.n	801007e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	3310      	adds	r3, #16
 801005c:	4618      	mov	r0, r3
 801005e:	f000 fdf3 	bl	8010c48 <xTaskRemoveFromEventList>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010068:	f000 fecc 	bl	8010e04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801006c:	7bbb      	ldrb	r3, [r7, #14]
 801006e:	3b01      	subs	r3, #1
 8010070:	b2db      	uxtb	r3, r3
 8010072:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010078:	2b00      	cmp	r3, #0
 801007a:	dce9      	bgt.n	8010050 <prvUnlockQueue+0x60>
 801007c:	e000      	b.n	8010080 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801007e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	22ff      	movs	r2, #255	@ 0xff
 8010084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010088:	f001 fff8 	bl	801207c <vPortExitCritical>
}
 801008c:	bf00      	nop
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801009c:	f001 ffbc 	bl	8012018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d102      	bne.n	80100ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100a8:	2301      	movs	r3, #1
 80100aa:	60fb      	str	r3, [r7, #12]
 80100ac:	e001      	b.n	80100b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100ae:	2300      	movs	r3, #0
 80100b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100b2:	f001 ffe3 	bl	801207c <vPortExitCritical>

	return xReturn;
 80100b6:	68fb      	ldr	r3, [r7, #12]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100c8:	f001 ffa6 	bl	8012018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d102      	bne.n	80100de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80100d8:	2301      	movs	r3, #1
 80100da:	60fb      	str	r3, [r7, #12]
 80100dc:	e001      	b.n	80100e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80100de:	2300      	movs	r3, #0
 80100e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100e2:	f001 ffcb 	bl	801207c <vPortExitCritical>

	return xReturn;
 80100e6:	68fb      	ldr	r3, [r7, #12]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80100f0:	b480      	push	{r7}
 80100f2:	b085      	sub	sp, #20
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100fa:	2300      	movs	r3, #0
 80100fc:	60fb      	str	r3, [r7, #12]
 80100fe:	e014      	b.n	801012a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010100:	4a0f      	ldr	r2, [pc, #60]	@ (8010140 <vQueueAddToRegistry+0x50>)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d10b      	bne.n	8010124 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801010c:	490c      	ldr	r1, [pc, #48]	@ (8010140 <vQueueAddToRegistry+0x50>)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	683a      	ldr	r2, [r7, #0]
 8010112:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010116:	4a0a      	ldr	r2, [pc, #40]	@ (8010140 <vQueueAddToRegistry+0x50>)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	00db      	lsls	r3, r3, #3
 801011c:	4413      	add	r3, r2
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010122:	e006      	b.n	8010132 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3301      	adds	r3, #1
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2b07      	cmp	r3, #7
 801012e:	d9e7      	bls.n	8010100 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010130:	bf00      	nop
 8010132:	bf00      	nop
 8010134:	3714      	adds	r7, #20
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	240013b0 	.word	0x240013b0

08010144 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801014c:	2300      	movs	r3, #0
 801014e:	60fb      	str	r3, [r7, #12]
 8010150:	e016      	b.n	8010180 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010152:	4a10      	ldr	r2, [pc, #64]	@ (8010194 <vQueueUnregisterQueue+0x50>)
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	00db      	lsls	r3, r3, #3
 8010158:	4413      	add	r3, r2
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	429a      	cmp	r2, r3
 8010160:	d10b      	bne.n	801017a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010162:	4a0c      	ldr	r2, [pc, #48]	@ (8010194 <vQueueUnregisterQueue+0x50>)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2100      	movs	r1, #0
 8010168:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801016c:	4a09      	ldr	r2, [pc, #36]	@ (8010194 <vQueueUnregisterQueue+0x50>)
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	00db      	lsls	r3, r3, #3
 8010172:	4413      	add	r3, r2
 8010174:	2200      	movs	r2, #0
 8010176:	605a      	str	r2, [r3, #4]
				break;
 8010178:	e006      	b.n	8010188 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	3301      	adds	r3, #1
 801017e:	60fb      	str	r3, [r7, #12]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b07      	cmp	r3, #7
 8010184:	d9e5      	bls.n	8010152 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	240013b0 	.word	0x240013b0

08010198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	60f8      	str	r0, [r7, #12]
 80101a0:	60b9      	str	r1, [r7, #8]
 80101a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80101a8:	f001 ff36 	bl	8012018 <vPortEnterCritical>
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80101b2:	b25b      	sxtb	r3, r3
 80101b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b8:	d103      	bne.n	80101c2 <vQueueWaitForMessageRestricted+0x2a>
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80101c8:	b25b      	sxtb	r3, r3
 80101ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ce:	d103      	bne.n	80101d8 <vQueueWaitForMessageRestricted+0x40>
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80101d8:	f001 ff50 	bl	801207c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d106      	bne.n	80101f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	3324      	adds	r3, #36	@ 0x24
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	68b9      	ldr	r1, [r7, #8]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f000 fcff 	bl	8010bf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80101f2:	6978      	ldr	r0, [r7, #20]
 80101f4:	f7ff fefc 	bl	800fff0 <prvUnlockQueue>
	}
 80101f8:	bf00      	nop
 80101fa:	3718      	adds	r7, #24
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08e      	sub	sp, #56	@ 0x38
 8010204:	af04      	add	r7, sp, #16
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801020e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10b      	bne.n	801022c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010218:	f383 8811 	msr	BASEPRI, r3
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f3bf 8f4f 	dsb	sy
 8010224:	623b      	str	r3, [r7, #32]
}
 8010226:	bf00      	nop
 8010228:	bf00      	nop
 801022a:	e7fd      	b.n	8010228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801022c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022e:	2b00      	cmp	r3, #0
 8010230:	d10b      	bne.n	801024a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010236:	f383 8811 	msr	BASEPRI, r3
 801023a:	f3bf 8f6f 	isb	sy
 801023e:	f3bf 8f4f 	dsb	sy
 8010242:	61fb      	str	r3, [r7, #28]
}
 8010244:	bf00      	nop
 8010246:	bf00      	nop
 8010248:	e7fd      	b.n	8010246 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801024a:	23a8      	movs	r3, #168	@ 0xa8
 801024c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	2ba8      	cmp	r3, #168	@ 0xa8
 8010252:	d00b      	beq.n	801026c <xTaskCreateStatic+0x6c>
	__asm volatile
 8010254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010258:	f383 8811 	msr	BASEPRI, r3
 801025c:	f3bf 8f6f 	isb	sy
 8010260:	f3bf 8f4f 	dsb	sy
 8010264:	61bb      	str	r3, [r7, #24]
}
 8010266:	bf00      	nop
 8010268:	bf00      	nop
 801026a:	e7fd      	b.n	8010268 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801026c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801026e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010270:	2b00      	cmp	r3, #0
 8010272:	d01e      	beq.n	80102b2 <xTaskCreateStatic+0xb2>
 8010274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010276:	2b00      	cmp	r3, #0
 8010278:	d01b      	beq.n	80102b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801027a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801027e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010282:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010286:	2202      	movs	r2, #2
 8010288:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801028c:	2300      	movs	r3, #0
 801028e:	9303      	str	r3, [sp, #12]
 8010290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010292:	9302      	str	r3, [sp, #8]
 8010294:	f107 0314 	add.w	r3, r7, #20
 8010298:	9301      	str	r3, [sp, #4]
 801029a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	68b9      	ldr	r1, [r7, #8]
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f000 f851 	bl	801034c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80102aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102ac:	f000 f8f6 	bl	801049c <prvAddNewTaskToReadyList>
 80102b0:	e001      	b.n	80102b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80102b6:	697b      	ldr	r3, [r7, #20]
	}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3728      	adds	r7, #40	@ 0x28
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b08c      	sub	sp, #48	@ 0x30
 80102c4:	af04      	add	r7, sp, #16
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	603b      	str	r3, [r7, #0]
 80102cc:	4613      	mov	r3, r2
 80102ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80102d0:	88fb      	ldrh	r3, [r7, #6]
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	4618      	mov	r0, r3
 80102d6:	f001 ffc1 	bl	801225c <pvPortMalloc>
 80102da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00e      	beq.n	8010300 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80102e2:	20a8      	movs	r0, #168	@ 0xa8
 80102e4:	f001 ffba 	bl	801225c <pvPortMalloc>
 80102e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d003      	beq.n	80102f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	697a      	ldr	r2, [r7, #20]
 80102f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80102f6:	e005      	b.n	8010304 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80102f8:	6978      	ldr	r0, [r7, #20]
 80102fa:	f002 f87d 	bl	80123f8 <vPortFree>
 80102fe:	e001      	b.n	8010304 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010300:	2300      	movs	r3, #0
 8010302:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d017      	beq.n	801033a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	2200      	movs	r2, #0
 801030e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010312:	88fa      	ldrh	r2, [r7, #6]
 8010314:	2300      	movs	r3, #0
 8010316:	9303      	str	r3, [sp, #12]
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	9302      	str	r3, [sp, #8]
 801031c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031e:	9301      	str	r3, [sp, #4]
 8010320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	68b9      	ldr	r1, [r7, #8]
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f000 f80f 	bl	801034c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801032e:	69f8      	ldr	r0, [r7, #28]
 8010330:	f000 f8b4 	bl	801049c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010334:	2301      	movs	r3, #1
 8010336:	61bb      	str	r3, [r7, #24]
 8010338:	e002      	b.n	8010340 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801033a:	f04f 33ff 	mov.w	r3, #4294967295
 801033e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010340:	69bb      	ldr	r3, [r7, #24]
	}
 8010342:	4618      	mov	r0, r3
 8010344:	3720      	adds	r7, #32
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
	...

0801034c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
 8010358:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801035a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	461a      	mov	r2, r3
 8010364:	21a5      	movs	r1, #165	@ 0xa5
 8010366:	f012 fbdc 	bl	8022b22 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801036a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010374:	440b      	add	r3, r1
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	4413      	add	r3, r2
 801037a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	f023 0307 	bic.w	r3, r3, #7
 8010382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	f003 0307 	and.w	r3, r3, #7
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00b      	beq.n	80103a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	617b      	str	r3, [r7, #20]
}
 80103a0:	bf00      	nop
 80103a2:	bf00      	nop
 80103a4:	e7fd      	b.n	80103a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d01f      	beq.n	80103ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103ac:	2300      	movs	r3, #0
 80103ae:	61fb      	str	r3, [r7, #28]
 80103b0:	e012      	b.n	80103d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80103b2:	68ba      	ldr	r2, [r7, #8]
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	4413      	add	r3, r2
 80103b8:	7819      	ldrb	r1, [r3, #0]
 80103ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	4413      	add	r3, r2
 80103c0:	3334      	adds	r3, #52	@ 0x34
 80103c2:	460a      	mov	r2, r1
 80103c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80103c6:	68ba      	ldr	r2, [r7, #8]
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	4413      	add	r3, r2
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d006      	beq.n	80103e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	3301      	adds	r3, #1
 80103d6:	61fb      	str	r3, [r7, #28]
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	2b0f      	cmp	r3, #15
 80103dc:	d9e9      	bls.n	80103b2 <prvInitialiseNewTask+0x66>
 80103de:	e000      	b.n	80103e2 <prvInitialiseNewTask+0x96>
			{
				break;
 80103e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80103e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e4:	2200      	movs	r2, #0
 80103e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80103ea:	e003      	b.n	80103f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ee:	2200      	movs	r2, #0
 80103f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f6:	2b37      	cmp	r3, #55	@ 0x37
 80103f8:	d901      	bls.n	80103fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80103fa:	2337      	movs	r3, #55	@ 0x37
 80103fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80103fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010402:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010408:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801040a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040c:	2200      	movs	r2, #0
 801040e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010412:	3304      	adds	r3, #4
 8010414:	4618      	mov	r0, r3
 8010416:	f7fe fe01 	bl	800f01c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801041a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801041c:	3318      	adds	r3, #24
 801041e:	4618      	mov	r0, r3
 8010420:	f7fe fdfc 	bl	800f01c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010428:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801042a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801042c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010432:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010438:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801043a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801043c:	2200      	movs	r2, #0
 801043e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010444:	2200      	movs	r2, #0
 8010446:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801044a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801044c:	3354      	adds	r3, #84	@ 0x54
 801044e:	224c      	movs	r2, #76	@ 0x4c
 8010450:	2100      	movs	r1, #0
 8010452:	4618      	mov	r0, r3
 8010454:	f012 fb65 	bl	8022b22 <memset>
 8010458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801045a:	4a0d      	ldr	r2, [pc, #52]	@ (8010490 <prvInitialiseNewTask+0x144>)
 801045c:	659a      	str	r2, [r3, #88]	@ 0x58
 801045e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010460:	4a0c      	ldr	r2, [pc, #48]	@ (8010494 <prvInitialiseNewTask+0x148>)
 8010462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010466:	4a0c      	ldr	r2, [pc, #48]	@ (8010498 <prvInitialiseNewTask+0x14c>)
 8010468:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801046a:	683a      	ldr	r2, [r7, #0]
 801046c:	68f9      	ldr	r1, [r7, #12]
 801046e:	69b8      	ldr	r0, [r7, #24]
 8010470:	f001 fc9e 	bl	8011db0 <pxPortInitialiseStack>
 8010474:	4602      	mov	r2, r0
 8010476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010478:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801047a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010486:	bf00      	nop
 8010488:	3720      	adds	r7, #32
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	240289f4 	.word	0x240289f4
 8010494:	24028a5c 	.word	0x24028a5c
 8010498:	24028ac4 	.word	0x24028ac4

0801049c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80104a4:	f001 fdb8 	bl	8012018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80104a8:	4b2d      	ldr	r3, [pc, #180]	@ (8010560 <prvAddNewTaskToReadyList+0xc4>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3301      	adds	r3, #1
 80104ae:	4a2c      	ldr	r2, [pc, #176]	@ (8010560 <prvAddNewTaskToReadyList+0xc4>)
 80104b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80104b2:	4b2c      	ldr	r3, [pc, #176]	@ (8010564 <prvAddNewTaskToReadyList+0xc8>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d109      	bne.n	80104ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80104ba:	4a2a      	ldr	r2, [pc, #168]	@ (8010564 <prvAddNewTaskToReadyList+0xc8>)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80104c0:	4b27      	ldr	r3, [pc, #156]	@ (8010560 <prvAddNewTaskToReadyList+0xc4>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d110      	bne.n	80104ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80104c8:	f000 fcc0 	bl	8010e4c <prvInitialiseTaskLists>
 80104cc:	e00d      	b.n	80104ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80104ce:	4b26      	ldr	r3, [pc, #152]	@ (8010568 <prvAddNewTaskToReadyList+0xcc>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d109      	bne.n	80104ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80104d6:	4b23      	ldr	r3, [pc, #140]	@ (8010564 <prvAddNewTaskToReadyList+0xc8>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d802      	bhi.n	80104ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80104e4:	4a1f      	ldr	r2, [pc, #124]	@ (8010564 <prvAddNewTaskToReadyList+0xc8>)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80104ea:	4b20      	ldr	r3, [pc, #128]	@ (801056c <prvAddNewTaskToReadyList+0xd0>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	3301      	adds	r3, #1
 80104f0:	4a1e      	ldr	r2, [pc, #120]	@ (801056c <prvAddNewTaskToReadyList+0xd0>)
 80104f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80104f4:	4b1d      	ldr	r3, [pc, #116]	@ (801056c <prvAddNewTaskToReadyList+0xd0>)
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010500:	4b1b      	ldr	r3, [pc, #108]	@ (8010570 <prvAddNewTaskToReadyList+0xd4>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	429a      	cmp	r2, r3
 8010506:	d903      	bls.n	8010510 <prvAddNewTaskToReadyList+0x74>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801050c:	4a18      	ldr	r2, [pc, #96]	@ (8010570 <prvAddNewTaskToReadyList+0xd4>)
 801050e:	6013      	str	r3, [r2, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010514:	4613      	mov	r3, r2
 8010516:	009b      	lsls	r3, r3, #2
 8010518:	4413      	add	r3, r2
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	4a15      	ldr	r2, [pc, #84]	@ (8010574 <prvAddNewTaskToReadyList+0xd8>)
 801051e:	441a      	add	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	3304      	adds	r3, #4
 8010524:	4619      	mov	r1, r3
 8010526:	4610      	mov	r0, r2
 8010528:	f7fe fd85 	bl	800f036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801052c:	f001 fda6 	bl	801207c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010530:	4b0d      	ldr	r3, [pc, #52]	@ (8010568 <prvAddNewTaskToReadyList+0xcc>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d00e      	beq.n	8010556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010538:	4b0a      	ldr	r3, [pc, #40]	@ (8010564 <prvAddNewTaskToReadyList+0xc8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010542:	429a      	cmp	r2, r3
 8010544:	d207      	bcs.n	8010556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010546:	4b0c      	ldr	r3, [pc, #48]	@ (8010578 <prvAddNewTaskToReadyList+0xdc>)
 8010548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801054c:	601a      	str	r2, [r3, #0]
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010556:	bf00      	nop
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	240018c4 	.word	0x240018c4
 8010564:	240013f0 	.word	0x240013f0
 8010568:	240018d0 	.word	0x240018d0
 801056c:	240018e0 	.word	0x240018e0
 8010570:	240018cc 	.word	0x240018cc
 8010574:	240013f4 	.word	0x240013f4
 8010578:	e000ed04 	.word	0xe000ed04

0801057c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801057c:	b580      	push	{r7, lr}
 801057e:	b08a      	sub	sp, #40	@ 0x28
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010586:	2300      	movs	r3, #0
 8010588:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d10b      	bne.n	80105a8 <vTaskDelayUntil+0x2c>
	__asm volatile
 8010590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010594:	f383 8811 	msr	BASEPRI, r3
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	617b      	str	r3, [r7, #20]
}
 80105a2:	bf00      	nop
 80105a4:	bf00      	nop
 80105a6:	e7fd      	b.n	80105a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d10b      	bne.n	80105c6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80105ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105b2:	f383 8811 	msr	BASEPRI, r3
 80105b6:	f3bf 8f6f 	isb	sy
 80105ba:	f3bf 8f4f 	dsb	sy
 80105be:	613b      	str	r3, [r7, #16]
}
 80105c0:	bf00      	nop
 80105c2:	bf00      	nop
 80105c4:	e7fd      	b.n	80105c2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80105c6:	4b2a      	ldr	r3, [pc, #168]	@ (8010670 <vTaskDelayUntil+0xf4>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00b      	beq.n	80105e6 <vTaskDelayUntil+0x6a>
	__asm volatile
 80105ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105d2:	f383 8811 	msr	BASEPRI, r3
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	60fb      	str	r3, [r7, #12]
}
 80105e0:	bf00      	nop
 80105e2:	bf00      	nop
 80105e4:	e7fd      	b.n	80105e2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80105e6:	f000 f8ef 	bl	80107c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80105ea:	4b22      	ldr	r3, [pc, #136]	@ (8010674 <vTaskDelayUntil+0xf8>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	683a      	ldr	r2, [r7, #0]
 80105f6:	4413      	add	r3, r2
 80105f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	6a3a      	ldr	r2, [r7, #32]
 8010600:	429a      	cmp	r2, r3
 8010602:	d20b      	bcs.n	801061c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	69fa      	ldr	r2, [r7, #28]
 801060a:	429a      	cmp	r2, r3
 801060c:	d211      	bcs.n	8010632 <vTaskDelayUntil+0xb6>
 801060e:	69fa      	ldr	r2, [r7, #28]
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	429a      	cmp	r2, r3
 8010614:	d90d      	bls.n	8010632 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010616:	2301      	movs	r3, #1
 8010618:	627b      	str	r3, [r7, #36]	@ 0x24
 801061a:	e00a      	b.n	8010632 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	69fa      	ldr	r2, [r7, #28]
 8010622:	429a      	cmp	r2, r3
 8010624:	d303      	bcc.n	801062e <vTaskDelayUntil+0xb2>
 8010626:	69fa      	ldr	r2, [r7, #28]
 8010628:	6a3b      	ldr	r3, [r7, #32]
 801062a:	429a      	cmp	r2, r3
 801062c:	d901      	bls.n	8010632 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801062e:	2301      	movs	r3, #1
 8010630:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	69fa      	ldr	r2, [r7, #28]
 8010636:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063a:	2b00      	cmp	r3, #0
 801063c:	d006      	beq.n	801064c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801063e:	69fa      	ldr	r2, [r7, #28]
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	2100      	movs	r1, #0
 8010646:	4618      	mov	r0, r3
 8010648:	f000 ff44 	bl	80114d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801064c:	f000 f8ca 	bl	80107e4 <xTaskResumeAll>
 8010650:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d107      	bne.n	8010668 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8010658:	4b07      	ldr	r3, [pc, #28]	@ (8010678 <vTaskDelayUntil+0xfc>)
 801065a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	f3bf 8f4f 	dsb	sy
 8010664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010668:	bf00      	nop
 801066a:	3728      	adds	r7, #40	@ 0x28
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	240018ec 	.word	0x240018ec
 8010674:	240018c8 	.word	0x240018c8
 8010678:	e000ed04 	.word	0xe000ed04

0801067c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010684:	2300      	movs	r3, #0
 8010686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d018      	beq.n	80106c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801068e:	4b14      	ldr	r3, [pc, #80]	@ (80106e0 <vTaskDelay+0x64>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00b      	beq.n	80106ae <vTaskDelay+0x32>
	__asm volatile
 8010696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	60bb      	str	r3, [r7, #8]
}
 80106a8:	bf00      	nop
 80106aa:	bf00      	nop
 80106ac:	e7fd      	b.n	80106aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80106ae:	f000 f88b 	bl	80107c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80106b2:	2100      	movs	r1, #0
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 ff0d 	bl	80114d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80106ba:	f000 f893 	bl	80107e4 <xTaskResumeAll>
 80106be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d107      	bne.n	80106d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80106c6:	4b07      	ldr	r3, [pc, #28]	@ (80106e4 <vTaskDelay+0x68>)
 80106c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80106d6:	bf00      	nop
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	240018ec 	.word	0x240018ec
 80106e4:	e000ed04 	.word	0xe000ed04

080106e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b08a      	sub	sp, #40	@ 0x28
 80106ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80106f2:	2300      	movs	r3, #0
 80106f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80106f6:	463a      	mov	r2, r7
 80106f8:	1d39      	adds	r1, r7, #4
 80106fa:	f107 0308 	add.w	r3, r7, #8
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe fc38 	bl	800ef74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010704:	6839      	ldr	r1, [r7, #0]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	68ba      	ldr	r2, [r7, #8]
 801070a:	9202      	str	r2, [sp, #8]
 801070c:	9301      	str	r3, [sp, #4]
 801070e:	2300      	movs	r3, #0
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	2300      	movs	r3, #0
 8010714:	460a      	mov	r2, r1
 8010716:	4924      	ldr	r1, [pc, #144]	@ (80107a8 <vTaskStartScheduler+0xc0>)
 8010718:	4824      	ldr	r0, [pc, #144]	@ (80107ac <vTaskStartScheduler+0xc4>)
 801071a:	f7ff fd71 	bl	8010200 <xTaskCreateStatic>
 801071e:	4603      	mov	r3, r0
 8010720:	4a23      	ldr	r2, [pc, #140]	@ (80107b0 <vTaskStartScheduler+0xc8>)
 8010722:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010724:	4b22      	ldr	r3, [pc, #136]	@ (80107b0 <vTaskStartScheduler+0xc8>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801072c:	2301      	movs	r3, #1
 801072e:	617b      	str	r3, [r7, #20]
 8010730:	e001      	b.n	8010736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010732:	2300      	movs	r3, #0
 8010734:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d102      	bne.n	8010742 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801073c:	f000 ff1e 	bl	801157c <xTimerCreateTimerTask>
 8010740:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	2b01      	cmp	r3, #1
 8010746:	d11b      	bne.n	8010780 <vTaskStartScheduler+0x98>
	__asm volatile
 8010748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801074c:	f383 8811 	msr	BASEPRI, r3
 8010750:	f3bf 8f6f 	isb	sy
 8010754:	f3bf 8f4f 	dsb	sy
 8010758:	613b      	str	r3, [r7, #16]
}
 801075a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801075c:	4b15      	ldr	r3, [pc, #84]	@ (80107b4 <vTaskStartScheduler+0xcc>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3354      	adds	r3, #84	@ 0x54
 8010762:	4a15      	ldr	r2, [pc, #84]	@ (80107b8 <vTaskStartScheduler+0xd0>)
 8010764:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010766:	4b15      	ldr	r3, [pc, #84]	@ (80107bc <vTaskStartScheduler+0xd4>)
 8010768:	f04f 32ff 	mov.w	r2, #4294967295
 801076c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801076e:	4b14      	ldr	r3, [pc, #80]	@ (80107c0 <vTaskStartScheduler+0xd8>)
 8010770:	2201      	movs	r2, #1
 8010772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010774:	4b13      	ldr	r3, [pc, #76]	@ (80107c4 <vTaskStartScheduler+0xdc>)
 8010776:	2200      	movs	r2, #0
 8010778:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801077a:	f001 fba9 	bl	8011ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801077e:	e00f      	b.n	80107a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010786:	d10b      	bne.n	80107a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8010788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801078c:	f383 8811 	msr	BASEPRI, r3
 8010790:	f3bf 8f6f 	isb	sy
 8010794:	f3bf 8f4f 	dsb	sy
 8010798:	60fb      	str	r3, [r7, #12]
}
 801079a:	bf00      	nop
 801079c:	bf00      	nop
 801079e:	e7fd      	b.n	801079c <vTaskStartScheduler+0xb4>
}
 80107a0:	bf00      	nop
 80107a2:	3718      	adds	r7, #24
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	0802497c 	.word	0x0802497c
 80107ac:	08010e1d 	.word	0x08010e1d
 80107b0:	240018e8 	.word	0x240018e8
 80107b4:	240013f0 	.word	0x240013f0
 80107b8:	2400004c 	.word	0x2400004c
 80107bc:	240018e4 	.word	0x240018e4
 80107c0:	240018d0 	.word	0x240018d0
 80107c4:	240018c8 	.word	0x240018c8

080107c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80107c8:	b480      	push	{r7}
 80107ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80107cc:	4b04      	ldr	r3, [pc, #16]	@ (80107e0 <vTaskSuspendAll+0x18>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	3301      	adds	r3, #1
 80107d2:	4a03      	ldr	r2, [pc, #12]	@ (80107e0 <vTaskSuspendAll+0x18>)
 80107d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80107d6:	bf00      	nop
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	240018ec 	.word	0x240018ec

080107e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80107ea:	2300      	movs	r3, #0
 80107ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80107ee:	2300      	movs	r3, #0
 80107f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80107f2:	4b42      	ldr	r3, [pc, #264]	@ (80108fc <xTaskResumeAll+0x118>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d10b      	bne.n	8010812 <xTaskResumeAll+0x2e>
	__asm volatile
 80107fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	603b      	str	r3, [r7, #0]
}
 801080c:	bf00      	nop
 801080e:	bf00      	nop
 8010810:	e7fd      	b.n	801080e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010812:	f001 fc01 	bl	8012018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010816:	4b39      	ldr	r3, [pc, #228]	@ (80108fc <xTaskResumeAll+0x118>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	3b01      	subs	r3, #1
 801081c:	4a37      	ldr	r2, [pc, #220]	@ (80108fc <xTaskResumeAll+0x118>)
 801081e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010820:	4b36      	ldr	r3, [pc, #216]	@ (80108fc <xTaskResumeAll+0x118>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d162      	bne.n	80108ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010828:	4b35      	ldr	r3, [pc, #212]	@ (8010900 <xTaskResumeAll+0x11c>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d05e      	beq.n	80108ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010830:	e02f      	b.n	8010892 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010832:	4b34      	ldr	r3, [pc, #208]	@ (8010904 <xTaskResumeAll+0x120>)
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	3318      	adds	r3, #24
 801083e:	4618      	mov	r0, r3
 8010840:	f7fe fc56 	bl	800f0f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	3304      	adds	r3, #4
 8010848:	4618      	mov	r0, r3
 801084a:	f7fe fc51 	bl	800f0f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010852:	4b2d      	ldr	r3, [pc, #180]	@ (8010908 <xTaskResumeAll+0x124>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	429a      	cmp	r2, r3
 8010858:	d903      	bls.n	8010862 <xTaskResumeAll+0x7e>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801085e:	4a2a      	ldr	r2, [pc, #168]	@ (8010908 <xTaskResumeAll+0x124>)
 8010860:	6013      	str	r3, [r2, #0]
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010866:	4613      	mov	r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	4413      	add	r3, r2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4a27      	ldr	r2, [pc, #156]	@ (801090c <xTaskResumeAll+0x128>)
 8010870:	441a      	add	r2, r3
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	3304      	adds	r3, #4
 8010876:	4619      	mov	r1, r3
 8010878:	4610      	mov	r0, r2
 801087a:	f7fe fbdc 	bl	800f036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010882:	4b23      	ldr	r3, [pc, #140]	@ (8010910 <xTaskResumeAll+0x12c>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010888:	429a      	cmp	r2, r3
 801088a:	d302      	bcc.n	8010892 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801088c:	4b21      	ldr	r3, [pc, #132]	@ (8010914 <xTaskResumeAll+0x130>)
 801088e:	2201      	movs	r2, #1
 8010890:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010892:	4b1c      	ldr	r3, [pc, #112]	@ (8010904 <xTaskResumeAll+0x120>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1cb      	bne.n	8010832 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80108a0:	f000 fb78 	bl	8010f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80108a4:	4b1c      	ldr	r3, [pc, #112]	@ (8010918 <xTaskResumeAll+0x134>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d010      	beq.n	80108d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80108b0:	f000 f858 	bl	8010964 <xTaskIncrementTick>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d002      	beq.n	80108c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80108ba:	4b16      	ldr	r3, [pc, #88]	@ (8010914 <xTaskResumeAll+0x130>)
 80108bc:	2201      	movs	r2, #1
 80108be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	3b01      	subs	r3, #1
 80108c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d1f1      	bne.n	80108b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80108cc:	4b12      	ldr	r3, [pc, #72]	@ (8010918 <xTaskResumeAll+0x134>)
 80108ce:	2200      	movs	r2, #0
 80108d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80108d2:	4b10      	ldr	r3, [pc, #64]	@ (8010914 <xTaskResumeAll+0x130>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d009      	beq.n	80108ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80108da:	2301      	movs	r3, #1
 80108dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80108de:	4b0f      	ldr	r3, [pc, #60]	@ (801091c <xTaskResumeAll+0x138>)
 80108e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108e4:	601a      	str	r2, [r3, #0]
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108ee:	f001 fbc5 	bl	801207c <vPortExitCritical>

	return xAlreadyYielded;
 80108f2:	68bb      	ldr	r3, [r7, #8]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	240018ec 	.word	0x240018ec
 8010900:	240018c4 	.word	0x240018c4
 8010904:	24001884 	.word	0x24001884
 8010908:	240018cc 	.word	0x240018cc
 801090c:	240013f4 	.word	0x240013f4
 8010910:	240013f0 	.word	0x240013f0
 8010914:	240018d8 	.word	0x240018d8
 8010918:	240018d4 	.word	0x240018d4
 801091c:	e000ed04 	.word	0xe000ed04

08010920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010926:	4b05      	ldr	r3, [pc, #20]	@ (801093c <xTaskGetTickCount+0x1c>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801092c:	687b      	ldr	r3, [r7, #4]
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr
 801093a:	bf00      	nop
 801093c:	240018c8 	.word	0x240018c8

08010940 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010946:	f001 fc47 	bl	80121d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801094a:	2300      	movs	r3, #0
 801094c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801094e:	4b04      	ldr	r3, [pc, #16]	@ (8010960 <xTaskGetTickCountFromISR+0x20>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010954:	683b      	ldr	r3, [r7, #0]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	240018c8 	.word	0x240018c8

08010964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b086      	sub	sp, #24
 8010968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801096a:	2300      	movs	r3, #0
 801096c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801096e:	4b4f      	ldr	r3, [pc, #316]	@ (8010aac <xTaskIncrementTick+0x148>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	f040 8090 	bne.w	8010a98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010978:	4b4d      	ldr	r3, [pc, #308]	@ (8010ab0 <xTaskIncrementTick+0x14c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	3301      	adds	r3, #1
 801097e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010980:	4a4b      	ldr	r2, [pc, #300]	@ (8010ab0 <xTaskIncrementTick+0x14c>)
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d121      	bne.n	80109d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801098c:	4b49      	ldr	r3, [pc, #292]	@ (8010ab4 <xTaskIncrementTick+0x150>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00b      	beq.n	80109ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8010996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801099a:	f383 8811 	msr	BASEPRI, r3
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	603b      	str	r3, [r7, #0]
}
 80109a8:	bf00      	nop
 80109aa:	bf00      	nop
 80109ac:	e7fd      	b.n	80109aa <xTaskIncrementTick+0x46>
 80109ae:	4b41      	ldr	r3, [pc, #260]	@ (8010ab4 <xTaskIncrementTick+0x150>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	60fb      	str	r3, [r7, #12]
 80109b4:	4b40      	ldr	r3, [pc, #256]	@ (8010ab8 <xTaskIncrementTick+0x154>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a3e      	ldr	r2, [pc, #248]	@ (8010ab4 <xTaskIncrementTick+0x150>)
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	4a3e      	ldr	r2, [pc, #248]	@ (8010ab8 <xTaskIncrementTick+0x154>)
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6013      	str	r3, [r2, #0]
 80109c2:	4b3e      	ldr	r3, [pc, #248]	@ (8010abc <xTaskIncrementTick+0x158>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	3301      	adds	r3, #1
 80109c8:	4a3c      	ldr	r2, [pc, #240]	@ (8010abc <xTaskIncrementTick+0x158>)
 80109ca:	6013      	str	r3, [r2, #0]
 80109cc:	f000 fae2 	bl	8010f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80109d0:	4b3b      	ldr	r3, [pc, #236]	@ (8010ac0 <xTaskIncrementTick+0x15c>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	693a      	ldr	r2, [r7, #16]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d349      	bcc.n	8010a6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109da:	4b36      	ldr	r3, [pc, #216]	@ (8010ab4 <xTaskIncrementTick+0x150>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d104      	bne.n	80109ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109e4:	4b36      	ldr	r3, [pc, #216]	@ (8010ac0 <xTaskIncrementTick+0x15c>)
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ea:	601a      	str	r2, [r3, #0]
					break;
 80109ec:	e03f      	b.n	8010a6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ee:	4b31      	ldr	r3, [pc, #196]	@ (8010ab4 <xTaskIncrementTick+0x150>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d203      	bcs.n	8010a0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010a06:	4a2e      	ldr	r2, [pc, #184]	@ (8010ac0 <xTaskIncrementTick+0x15c>)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010a0c:	e02f      	b.n	8010a6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	3304      	adds	r3, #4
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe fb6c 	bl	800f0f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d004      	beq.n	8010a2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	3318      	adds	r3, #24
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fe fb63 	bl	800f0f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a2e:	4b25      	ldr	r3, [pc, #148]	@ (8010ac4 <xTaskIncrementTick+0x160>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d903      	bls.n	8010a3e <xTaskIncrementTick+0xda>
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3a:	4a22      	ldr	r2, [pc, #136]	@ (8010ac4 <xTaskIncrementTick+0x160>)
 8010a3c:	6013      	str	r3, [r2, #0]
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a42:	4613      	mov	r3, r2
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	4413      	add	r3, r2
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8010ac8 <xTaskIncrementTick+0x164>)
 8010a4c:	441a      	add	r2, r3
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	3304      	adds	r3, #4
 8010a52:	4619      	mov	r1, r3
 8010a54:	4610      	mov	r0, r2
 8010a56:	f7fe faee 	bl	800f036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8010acc <xTaskIncrementTick+0x168>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d3b8      	bcc.n	80109da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a6c:	e7b5      	b.n	80109da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a6e:	4b17      	ldr	r3, [pc, #92]	@ (8010acc <xTaskIncrementTick+0x168>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a74:	4914      	ldr	r1, [pc, #80]	@ (8010ac8 <xTaskIncrementTick+0x164>)
 8010a76:	4613      	mov	r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	4413      	add	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	440b      	add	r3, r1
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d901      	bls.n	8010a8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010a86:	2301      	movs	r3, #1
 8010a88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010a8a:	4b11      	ldr	r3, [pc, #68]	@ (8010ad0 <xTaskIncrementTick+0x16c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d007      	beq.n	8010aa2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010a92:	2301      	movs	r3, #1
 8010a94:	617b      	str	r3, [r7, #20]
 8010a96:	e004      	b.n	8010aa2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010a98:	4b0e      	ldr	r3, [pc, #56]	@ (8010ad4 <xTaskIncrementTick+0x170>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8010ad4 <xTaskIncrementTick+0x170>)
 8010aa0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010aa2:	697b      	ldr	r3, [r7, #20]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3718      	adds	r7, #24
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	240018ec 	.word	0x240018ec
 8010ab0:	240018c8 	.word	0x240018c8
 8010ab4:	2400187c 	.word	0x2400187c
 8010ab8:	24001880 	.word	0x24001880
 8010abc:	240018dc 	.word	0x240018dc
 8010ac0:	240018e4 	.word	0x240018e4
 8010ac4:	240018cc 	.word	0x240018cc
 8010ac8:	240013f4 	.word	0x240013f4
 8010acc:	240013f0 	.word	0x240013f0
 8010ad0:	240018d8 	.word	0x240018d8
 8010ad4:	240018d4 	.word	0x240018d4

08010ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ade:	4b2b      	ldr	r3, [pc, #172]	@ (8010b8c <vTaskSwitchContext+0xb4>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d003      	beq.n	8010aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8010b90 <vTaskSwitchContext+0xb8>)
 8010ae8:	2201      	movs	r2, #1
 8010aea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010aec:	e047      	b.n	8010b7e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010aee:	4b28      	ldr	r3, [pc, #160]	@ (8010b90 <vTaskSwitchContext+0xb8>)
 8010af0:	2200      	movs	r2, #0
 8010af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010af4:	4b27      	ldr	r3, [pc, #156]	@ (8010b94 <vTaskSwitchContext+0xbc>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60fb      	str	r3, [r7, #12]
 8010afa:	e011      	b.n	8010b20 <vTaskSwitchContext+0x48>
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d10b      	bne.n	8010b1a <vTaskSwitchContext+0x42>
	__asm volatile
 8010b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b06:	f383 8811 	msr	BASEPRI, r3
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	f3bf 8f4f 	dsb	sy
 8010b12:	607b      	str	r3, [r7, #4]
}
 8010b14:	bf00      	nop
 8010b16:	bf00      	nop
 8010b18:	e7fd      	b.n	8010b16 <vTaskSwitchContext+0x3e>
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	60fb      	str	r3, [r7, #12]
 8010b20:	491d      	ldr	r1, [pc, #116]	@ (8010b98 <vTaskSwitchContext+0xc0>)
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	4613      	mov	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	4413      	add	r3, r2
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	440b      	add	r3, r1
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d0e3      	beq.n	8010afc <vTaskSwitchContext+0x24>
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	4613      	mov	r3, r2
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	4413      	add	r3, r2
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	4a16      	ldr	r2, [pc, #88]	@ (8010b98 <vTaskSwitchContext+0xc0>)
 8010b40:	4413      	add	r3, r2
 8010b42:	60bb      	str	r3, [r7, #8]
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	685a      	ldr	r2, [r3, #4]
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	605a      	str	r2, [r3, #4]
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	685a      	ldr	r2, [r3, #4]
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	3308      	adds	r3, #8
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d104      	bne.n	8010b64 <vTaskSwitchContext+0x8c>
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	605a      	str	r2, [r3, #4]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8010b9c <vTaskSwitchContext+0xc4>)
 8010b6c:	6013      	str	r3, [r2, #0]
 8010b6e:	4a09      	ldr	r2, [pc, #36]	@ (8010b94 <vTaskSwitchContext+0xbc>)
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b74:	4b09      	ldr	r3, [pc, #36]	@ (8010b9c <vTaskSwitchContext+0xc4>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	3354      	adds	r3, #84	@ 0x54
 8010b7a:	4a09      	ldr	r2, [pc, #36]	@ (8010ba0 <vTaskSwitchContext+0xc8>)
 8010b7c:	6013      	str	r3, [r2, #0]
}
 8010b7e:	bf00      	nop
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	240018ec 	.word	0x240018ec
 8010b90:	240018d8 	.word	0x240018d8
 8010b94:	240018cc 	.word	0x240018cc
 8010b98:	240013f4 	.word	0x240013f4
 8010b9c:	240013f0 	.word	0x240013f0
 8010ba0:	2400004c 	.word	0x2400004c

08010ba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d10b      	bne.n	8010bcc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	60fb      	str	r3, [r7, #12]
}
 8010bc6:	bf00      	nop
 8010bc8:	bf00      	nop
 8010bca:	e7fd      	b.n	8010bc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bcc:	4b07      	ldr	r3, [pc, #28]	@ (8010bec <vTaskPlaceOnEventList+0x48>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	3318      	adds	r3, #24
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7fe fa52 	bl	800f07e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010bda:	2101      	movs	r1, #1
 8010bdc:	6838      	ldr	r0, [r7, #0]
 8010bde:	f000 fc79 	bl	80114d4 <prvAddCurrentTaskToDelayedList>
}
 8010be2:	bf00      	nop
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	240013f0 	.word	0x240013f0

08010bf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d10b      	bne.n	8010c1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	617b      	str	r3, [r7, #20]
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop
 8010c18:	e7fd      	b.n	8010c16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8010c44 <vTaskPlaceOnEventListRestricted+0x54>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	3318      	adds	r3, #24
 8010c20:	4619      	mov	r1, r3
 8010c22:	68f8      	ldr	r0, [r7, #12]
 8010c24:	f7fe fa07 	bl	800f036 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d002      	beq.n	8010c34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	68b8      	ldr	r0, [r7, #8]
 8010c38:	f000 fc4c 	bl	80114d4 <prvAddCurrentTaskToDelayedList>
	}
 8010c3c:	bf00      	nop
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	240013f0 	.word	0x240013f0

08010c48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b086      	sub	sp, #24
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d10b      	bne.n	8010c76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c62:	f383 8811 	msr	BASEPRI, r3
 8010c66:	f3bf 8f6f 	isb	sy
 8010c6a:	f3bf 8f4f 	dsb	sy
 8010c6e:	60fb      	str	r3, [r7, #12]
}
 8010c70:	bf00      	nop
 8010c72:	bf00      	nop
 8010c74:	e7fd      	b.n	8010c72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	3318      	adds	r3, #24
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fe fa38 	bl	800f0f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c80:	4b1d      	ldr	r3, [pc, #116]	@ (8010cf8 <xTaskRemoveFromEventList+0xb0>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d11d      	bne.n	8010cc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	3304      	adds	r3, #4
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7fe fa2f 	bl	800f0f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c96:	4b19      	ldr	r3, [pc, #100]	@ (8010cfc <xTaskRemoveFromEventList+0xb4>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d903      	bls.n	8010ca6 <xTaskRemoveFromEventList+0x5e>
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ca2:	4a16      	ldr	r2, [pc, #88]	@ (8010cfc <xTaskRemoveFromEventList+0xb4>)
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010caa:	4613      	mov	r3, r2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	4413      	add	r3, r2
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4a13      	ldr	r2, [pc, #76]	@ (8010d00 <xTaskRemoveFromEventList+0xb8>)
 8010cb4:	441a      	add	r2, r3
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	3304      	adds	r3, #4
 8010cba:	4619      	mov	r1, r3
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	f7fe f9ba 	bl	800f036 <vListInsertEnd>
 8010cc2:	e005      	b.n	8010cd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	3318      	adds	r3, #24
 8010cc8:	4619      	mov	r1, r3
 8010cca:	480e      	ldr	r0, [pc, #56]	@ (8010d04 <xTaskRemoveFromEventList+0xbc>)
 8010ccc:	f7fe f9b3 	bl	800f036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8010d08 <xTaskRemoveFromEventList+0xc0>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d905      	bls.n	8010cea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8010d0c <xTaskRemoveFromEventList+0xc4>)
 8010ce4:	2201      	movs	r2, #1
 8010ce6:	601a      	str	r2, [r3, #0]
 8010ce8:	e001      	b.n	8010cee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010cea:	2300      	movs	r3, #0
 8010cec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010cee:	697b      	ldr	r3, [r7, #20]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3718      	adds	r7, #24
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	240018ec 	.word	0x240018ec
 8010cfc:	240018cc 	.word	0x240018cc
 8010d00:	240013f4 	.word	0x240013f4
 8010d04:	24001884 	.word	0x24001884
 8010d08:	240013f0 	.word	0x240013f0
 8010d0c:	240018d8 	.word	0x240018d8

08010d10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010d18:	4b06      	ldr	r3, [pc, #24]	@ (8010d34 <vTaskInternalSetTimeOutState+0x24>)
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010d20:	4b05      	ldr	r3, [pc, #20]	@ (8010d38 <vTaskInternalSetTimeOutState+0x28>)
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	605a      	str	r2, [r3, #4]
}
 8010d28:	bf00      	nop
 8010d2a:	370c      	adds	r7, #12
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr
 8010d34:	240018dc 	.word	0x240018dc
 8010d38:	240018c8 	.word	0x240018c8

08010d3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b088      	sub	sp, #32
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10b      	bne.n	8010d64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	613b      	str	r3, [r7, #16]
}
 8010d5e:	bf00      	nop
 8010d60:	bf00      	nop
 8010d62:	e7fd      	b.n	8010d60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d10b      	bne.n	8010d82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	60fb      	str	r3, [r7, #12]
}
 8010d7c:	bf00      	nop
 8010d7e:	bf00      	nop
 8010d80:	e7fd      	b.n	8010d7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010d82:	f001 f949 	bl	8012018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010d86:	4b1d      	ldr	r3, [pc, #116]	@ (8010dfc <xTaskCheckForTimeOut+0xc0>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	69ba      	ldr	r2, [r7, #24]
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9e:	d102      	bne.n	8010da6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010da0:	2300      	movs	r3, #0
 8010da2:	61fb      	str	r3, [r7, #28]
 8010da4:	e023      	b.n	8010dee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	4b15      	ldr	r3, [pc, #84]	@ (8010e00 <xTaskCheckForTimeOut+0xc4>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d007      	beq.n	8010dc2 <xTaskCheckForTimeOut+0x86>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	69ba      	ldr	r2, [r7, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d302      	bcc.n	8010dc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	61fb      	str	r3, [r7, #28]
 8010dc0:	e015      	b.n	8010dee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d20b      	bcs.n	8010de4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	1ad2      	subs	r2, r2, r3
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f7ff ff99 	bl	8010d10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010dde:	2300      	movs	r3, #0
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	e004      	b.n	8010dee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	2200      	movs	r2, #0
 8010de8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010dea:	2301      	movs	r3, #1
 8010dec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010dee:	f001 f945 	bl	801207c <vPortExitCritical>

	return xReturn;
 8010df2:	69fb      	ldr	r3, [r7, #28]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3720      	adds	r7, #32
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	240018c8 	.word	0x240018c8
 8010e00:	240018dc 	.word	0x240018dc

08010e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010e04:	b480      	push	{r7}
 8010e06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010e08:	4b03      	ldr	r3, [pc, #12]	@ (8010e18 <vTaskMissedYield+0x14>)
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	601a      	str	r2, [r3, #0]
}
 8010e0e:	bf00      	nop
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr
 8010e18:	240018d8 	.word	0x240018d8

08010e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010e24:	f000 f852 	bl	8010ecc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010e28:	4b06      	ldr	r3, [pc, #24]	@ (8010e44 <prvIdleTask+0x28>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d9f9      	bls.n	8010e24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010e30:	4b05      	ldr	r3, [pc, #20]	@ (8010e48 <prvIdleTask+0x2c>)
 8010e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010e40:	e7f0      	b.n	8010e24 <prvIdleTask+0x8>
 8010e42:	bf00      	nop
 8010e44:	240013f4 	.word	0x240013f4
 8010e48:	e000ed04 	.word	0xe000ed04

08010e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e52:	2300      	movs	r3, #0
 8010e54:	607b      	str	r3, [r7, #4]
 8010e56:	e00c      	b.n	8010e72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	4413      	add	r3, r2
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	4a12      	ldr	r2, [pc, #72]	@ (8010eac <prvInitialiseTaskLists+0x60>)
 8010e64:	4413      	add	r3, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fe f8b8 	bl	800efdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	607b      	str	r3, [r7, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2b37      	cmp	r3, #55	@ 0x37
 8010e76:	d9ef      	bls.n	8010e58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010e78:	480d      	ldr	r0, [pc, #52]	@ (8010eb0 <prvInitialiseTaskLists+0x64>)
 8010e7a:	f7fe f8af 	bl	800efdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010e7e:	480d      	ldr	r0, [pc, #52]	@ (8010eb4 <prvInitialiseTaskLists+0x68>)
 8010e80:	f7fe f8ac 	bl	800efdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010e84:	480c      	ldr	r0, [pc, #48]	@ (8010eb8 <prvInitialiseTaskLists+0x6c>)
 8010e86:	f7fe f8a9 	bl	800efdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010e8a:	480c      	ldr	r0, [pc, #48]	@ (8010ebc <prvInitialiseTaskLists+0x70>)
 8010e8c:	f7fe f8a6 	bl	800efdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010e90:	480b      	ldr	r0, [pc, #44]	@ (8010ec0 <prvInitialiseTaskLists+0x74>)
 8010e92:	f7fe f8a3 	bl	800efdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e96:	4b0b      	ldr	r3, [pc, #44]	@ (8010ec4 <prvInitialiseTaskLists+0x78>)
 8010e98:	4a05      	ldr	r2, [pc, #20]	@ (8010eb0 <prvInitialiseTaskLists+0x64>)
 8010e9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010ec8 <prvInitialiseTaskLists+0x7c>)
 8010e9e:	4a05      	ldr	r2, [pc, #20]	@ (8010eb4 <prvInitialiseTaskLists+0x68>)
 8010ea0:	601a      	str	r2, [r3, #0]
}
 8010ea2:	bf00      	nop
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	240013f4 	.word	0x240013f4
 8010eb0:	24001854 	.word	0x24001854
 8010eb4:	24001868 	.word	0x24001868
 8010eb8:	24001884 	.word	0x24001884
 8010ebc:	24001898 	.word	0x24001898
 8010ec0:	240018b0 	.word	0x240018b0
 8010ec4:	2400187c 	.word	0x2400187c
 8010ec8:	24001880 	.word	0x24001880

08010ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ed2:	e019      	b.n	8010f08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010ed4:	f001 f8a0 	bl	8012018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ed8:	4b10      	ldr	r3, [pc, #64]	@ (8010f1c <prvCheckTasksWaitingTermination+0x50>)
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fe f903 	bl	800f0f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010eea:	4b0d      	ldr	r3, [pc, #52]	@ (8010f20 <prvCheckTasksWaitingTermination+0x54>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8010f20 <prvCheckTasksWaitingTermination+0x54>)
 8010ef2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8010f24 <prvCheckTasksWaitingTermination+0x58>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	3b01      	subs	r3, #1
 8010efa:	4a0a      	ldr	r2, [pc, #40]	@ (8010f24 <prvCheckTasksWaitingTermination+0x58>)
 8010efc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010efe:	f001 f8bd 	bl	801207c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f810 	bl	8010f28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f08:	4b06      	ldr	r3, [pc, #24]	@ (8010f24 <prvCheckTasksWaitingTermination+0x58>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1e1      	bne.n	8010ed4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010f10:	bf00      	nop
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	24001898 	.word	0x24001898
 8010f20:	240018c4 	.word	0x240018c4
 8010f24:	240018ac 	.word	0x240018ac

08010f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	3354      	adds	r3, #84	@ 0x54
 8010f34:	4618      	mov	r0, r3
 8010f36:	f011 fe23 	bl	8022b80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d108      	bne.n	8010f56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f001 fa55 	bl	80123f8 <vPortFree>
				vPortFree( pxTCB );
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f001 fa52 	bl	80123f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010f54:	e019      	b.n	8010f8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d103      	bne.n	8010f68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f001 fa49 	bl	80123f8 <vPortFree>
	}
 8010f66:	e010      	b.n	8010f8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010f6e:	2b02      	cmp	r3, #2
 8010f70:	d00b      	beq.n	8010f8a <prvDeleteTCB+0x62>
	__asm volatile
 8010f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f76:	f383 8811 	msr	BASEPRI, r3
 8010f7a:	f3bf 8f6f 	isb	sy
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	60fb      	str	r3, [r7, #12]
}
 8010f84:	bf00      	nop
 8010f86:	bf00      	nop
 8010f88:	e7fd      	b.n	8010f86 <prvDeleteTCB+0x5e>
	}
 8010f8a:	bf00      	nop
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8010fcc <prvResetNextTaskUnblockTime+0x38>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d104      	bne.n	8010fae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8010fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8010fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010fac:	e008      	b.n	8010fc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fae:	4b07      	ldr	r3, [pc, #28]	@ (8010fcc <prvResetNextTaskUnblockTime+0x38>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	4a04      	ldr	r2, [pc, #16]	@ (8010fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8010fbe:	6013      	str	r3, [r2, #0]
}
 8010fc0:	bf00      	nop
 8010fc2:	370c      	adds	r7, #12
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr
 8010fcc:	2400187c 	.word	0x2400187c
 8010fd0:	240018e4 	.word	0x240018e4

08010fd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010fda:	4b05      	ldr	r3, [pc, #20]	@ (8010ff0 <xTaskGetCurrentTaskHandle+0x1c>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010fe0:	687b      	ldr	r3, [r7, #4]
	}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	240013f0 	.word	0x240013f0

08010ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8011028 <xTaskGetSchedulerState+0x34>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d102      	bne.n	8011008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011002:	2301      	movs	r3, #1
 8011004:	607b      	str	r3, [r7, #4]
 8011006:	e008      	b.n	801101a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011008:	4b08      	ldr	r3, [pc, #32]	@ (801102c <xTaskGetSchedulerState+0x38>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d102      	bne.n	8011016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011010:	2302      	movs	r3, #2
 8011012:	607b      	str	r3, [r7, #4]
 8011014:	e001      	b.n	801101a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011016:	2300      	movs	r3, #0
 8011018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801101a:	687b      	ldr	r3, [r7, #4]
	}
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	240018d0 	.word	0x240018d0
 801102c:	240018ec 	.word	0x240018ec

08011030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801103c:	2300      	movs	r3, #0
 801103e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d051      	beq.n	80110ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801104a:	4b2a      	ldr	r3, [pc, #168]	@ (80110f4 <xTaskPriorityInherit+0xc4>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011050:	429a      	cmp	r2, r3
 8011052:	d241      	bcs.n	80110d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	2b00      	cmp	r3, #0
 801105a:	db06      	blt.n	801106a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801105c:	4b25      	ldr	r3, [pc, #148]	@ (80110f4 <xTaskPriorityInherit+0xc4>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011062:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	6959      	ldr	r1, [r3, #20]
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011072:	4613      	mov	r3, r2
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	4413      	add	r3, r2
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	4a1f      	ldr	r2, [pc, #124]	@ (80110f8 <xTaskPriorityInherit+0xc8>)
 801107c:	4413      	add	r3, r2
 801107e:	4299      	cmp	r1, r3
 8011080:	d122      	bne.n	80110c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	3304      	adds	r3, #4
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe f832 	bl	800f0f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801108c:	4b19      	ldr	r3, [pc, #100]	@ (80110f4 <xTaskPriorityInherit+0xc4>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801109a:	4b18      	ldr	r3, [pc, #96]	@ (80110fc <xTaskPriorityInherit+0xcc>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d903      	bls.n	80110aa <xTaskPriorityInherit+0x7a>
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110a6:	4a15      	ldr	r2, [pc, #84]	@ (80110fc <xTaskPriorityInherit+0xcc>)
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ae:	4613      	mov	r3, r2
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	4413      	add	r3, r2
 80110b4:	009b      	lsls	r3, r3, #2
 80110b6:	4a10      	ldr	r2, [pc, #64]	@ (80110f8 <xTaskPriorityInherit+0xc8>)
 80110b8:	441a      	add	r2, r3
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	3304      	adds	r3, #4
 80110be:	4619      	mov	r1, r3
 80110c0:	4610      	mov	r0, r2
 80110c2:	f7fd ffb8 	bl	800f036 <vListInsertEnd>
 80110c6:	e004      	b.n	80110d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80110c8:	4b0a      	ldr	r3, [pc, #40]	@ (80110f4 <xTaskPriorityInherit+0xc4>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80110d2:	2301      	movs	r3, #1
 80110d4:	60fb      	str	r3, [r7, #12]
 80110d6:	e008      	b.n	80110ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110dc:	4b05      	ldr	r3, [pc, #20]	@ (80110f4 <xTaskPriorityInherit+0xc4>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d201      	bcs.n	80110ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80110e6:	2301      	movs	r3, #1
 80110e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80110ea:	68fb      	ldr	r3, [r7, #12]
	}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	240013f0 	.word	0x240013f0
 80110f8:	240013f4 	.word	0x240013f4
 80110fc:	240018cc 	.word	0x240018cc

08011100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801110c:	2300      	movs	r3, #0
 801110e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d058      	beq.n	80111c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011116:	4b2f      	ldr	r3, [pc, #188]	@ (80111d4 <xTaskPriorityDisinherit+0xd4>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	693a      	ldr	r2, [r7, #16]
 801111c:	429a      	cmp	r2, r3
 801111e:	d00b      	beq.n	8011138 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	60fb      	str	r3, [r7, #12]
}
 8011132:	bf00      	nop
 8011134:	bf00      	nop
 8011136:	e7fd      	b.n	8011134 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801113c:	2b00      	cmp	r3, #0
 801113e:	d10b      	bne.n	8011158 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	60bb      	str	r3, [r7, #8]
}
 8011152:	bf00      	nop
 8011154:	bf00      	nop
 8011156:	e7fd      	b.n	8011154 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801115c:	1e5a      	subs	r2, r3, #1
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801116a:	429a      	cmp	r2, r3
 801116c:	d02c      	beq.n	80111c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011172:	2b00      	cmp	r3, #0
 8011174:	d128      	bne.n	80111c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	3304      	adds	r3, #4
 801117a:	4618      	mov	r0, r3
 801117c:	f7fd ffb8 	bl	800f0f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011198:	4b0f      	ldr	r3, [pc, #60]	@ (80111d8 <xTaskPriorityDisinherit+0xd8>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	429a      	cmp	r2, r3
 801119e:	d903      	bls.n	80111a8 <xTaskPriorityDisinherit+0xa8>
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a4:	4a0c      	ldr	r2, [pc, #48]	@ (80111d8 <xTaskPriorityDisinherit+0xd8>)
 80111a6:	6013      	str	r3, [r2, #0]
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111ac:	4613      	mov	r3, r2
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	4413      	add	r3, r2
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4a09      	ldr	r2, [pc, #36]	@ (80111dc <xTaskPriorityDisinherit+0xdc>)
 80111b6:	441a      	add	r2, r3
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	3304      	adds	r3, #4
 80111bc:	4619      	mov	r1, r3
 80111be:	4610      	mov	r0, r2
 80111c0:	f7fd ff39 	bl	800f036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80111c4:	2301      	movs	r3, #1
 80111c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80111c8:	697b      	ldr	r3, [r7, #20]
	}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3718      	adds	r7, #24
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	240013f0 	.word	0x240013f0
 80111d8:	240018cc 	.word	0x240018cc
 80111dc:	240013f4 	.word	0x240013f4

080111e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b088      	sub	sp, #32
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80111ee:	2301      	movs	r3, #1
 80111f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d06c      	beq.n	80112d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d10b      	bne.n	8011218 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011204:	f383 8811 	msr	BASEPRI, r3
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	60fb      	str	r3, [r7, #12]
}
 8011212:	bf00      	nop
 8011214:	bf00      	nop
 8011216:	e7fd      	b.n	8011214 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801121c:	683a      	ldr	r2, [r7, #0]
 801121e:	429a      	cmp	r2, r3
 8011220:	d902      	bls.n	8011228 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	61fb      	str	r3, [r7, #28]
 8011226:	e002      	b.n	801122e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801122c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	429a      	cmp	r2, r3
 8011236:	d04c      	beq.n	80112d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011238:	69bb      	ldr	r3, [r7, #24]
 801123a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801123c:	697a      	ldr	r2, [r7, #20]
 801123e:	429a      	cmp	r2, r3
 8011240:	d147      	bne.n	80112d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011242:	4b26      	ldr	r3, [pc, #152]	@ (80112dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	69ba      	ldr	r2, [r7, #24]
 8011248:	429a      	cmp	r2, r3
 801124a:	d10b      	bne.n	8011264 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801124c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011250:	f383 8811 	msr	BASEPRI, r3
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	60bb      	str	r3, [r7, #8]
}
 801125e:	bf00      	nop
 8011260:	bf00      	nop
 8011262:	e7fd      	b.n	8011260 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011268:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	69fa      	ldr	r2, [r7, #28]
 801126e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	699b      	ldr	r3, [r3, #24]
 8011274:	2b00      	cmp	r3, #0
 8011276:	db04      	blt.n	8011282 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	6959      	ldr	r1, [r3, #20]
 8011286:	693a      	ldr	r2, [r7, #16]
 8011288:	4613      	mov	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	4413      	add	r3, r2
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	4a13      	ldr	r2, [pc, #76]	@ (80112e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011292:	4413      	add	r3, r2
 8011294:	4299      	cmp	r1, r3
 8011296:	d11c      	bne.n	80112d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	3304      	adds	r3, #4
 801129c:	4618      	mov	r0, r3
 801129e:	f7fd ff27 	bl	800f0f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112a6:	4b0f      	ldr	r3, [pc, #60]	@ (80112e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d903      	bls.n	80112b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112b2:	4a0c      	ldr	r2, [pc, #48]	@ (80112e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80112b4:	6013      	str	r3, [r2, #0]
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112ba:	4613      	mov	r3, r2
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4413      	add	r3, r2
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	4a07      	ldr	r2, [pc, #28]	@ (80112e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80112c4:	441a      	add	r2, r3
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	3304      	adds	r3, #4
 80112ca:	4619      	mov	r1, r3
 80112cc:	4610      	mov	r0, r2
 80112ce:	f7fd feb2 	bl	800f036 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80112d2:	bf00      	nop
 80112d4:	3720      	adds	r7, #32
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	240013f0 	.word	0x240013f0
 80112e0:	240013f4 	.word	0x240013f4
 80112e4:	240018cc 	.word	0x240018cc

080112e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80112e8:	b480      	push	{r7}
 80112ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80112ec:	4b07      	ldr	r3, [pc, #28]	@ (801130c <pvTaskIncrementMutexHeldCount+0x24>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d004      	beq.n	80112fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80112f4:	4b05      	ldr	r3, [pc, #20]	@ (801130c <pvTaskIncrementMutexHeldCount+0x24>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80112fa:	3201      	adds	r2, #1
 80112fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80112fe:	4b03      	ldr	r3, [pc, #12]	@ (801130c <pvTaskIncrementMutexHeldCount+0x24>)
 8011300:	681b      	ldr	r3, [r3, #0]
	}
 8011302:	4618      	mov	r0, r3
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr
 801130c:	240013f0 	.word	0x240013f0

08011310 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801131a:	f000 fe7d 	bl	8012018 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801131e:	4b20      	ldr	r3, [pc, #128]	@ (80113a0 <ulTaskNotifyTake+0x90>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d113      	bne.n	8011352 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801132a:	4b1d      	ldr	r3, [pc, #116]	@ (80113a0 <ulTaskNotifyTake+0x90>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	2201      	movs	r2, #1
 8011330:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00b      	beq.n	8011352 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801133a:	2101      	movs	r1, #1
 801133c:	6838      	ldr	r0, [r7, #0]
 801133e:	f000 f8c9 	bl	80114d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011342:	4b18      	ldr	r3, [pc, #96]	@ (80113a4 <ulTaskNotifyTake+0x94>)
 8011344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011348:	601a      	str	r2, [r3, #0]
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011352:	f000 fe93 	bl	801207c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011356:	f000 fe5f 	bl	8012018 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801135a:	4b11      	ldr	r3, [pc, #68]	@ (80113a0 <ulTaskNotifyTake+0x90>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011362:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00e      	beq.n	8011388 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d005      	beq.n	801137c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011370:	4b0b      	ldr	r3, [pc, #44]	@ (80113a0 <ulTaskNotifyTake+0x90>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2200      	movs	r2, #0
 8011376:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801137a:	e005      	b.n	8011388 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801137c:	4b08      	ldr	r3, [pc, #32]	@ (80113a0 <ulTaskNotifyTake+0x90>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	68fa      	ldr	r2, [r7, #12]
 8011382:	3a01      	subs	r2, #1
 8011384:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011388:	4b05      	ldr	r3, [pc, #20]	@ (80113a0 <ulTaskNotifyTake+0x90>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2200      	movs	r2, #0
 801138e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8011392:	f000 fe73 	bl	801207c <vPortExitCritical>

		return ulReturn;
 8011396:	68fb      	ldr	r3, [r7, #12]
	}
 8011398:	4618      	mov	r0, r3
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	240013f0 	.word	0x240013f0
 80113a4:	e000ed04 	.word	0xe000ed04

080113a8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b08a      	sub	sp, #40	@ 0x28
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10b      	bne.n	80113d0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80113b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	61bb      	str	r3, [r7, #24]
}
 80113ca:	bf00      	nop
 80113cc:	bf00      	nop
 80113ce:	e7fd      	b.n	80113cc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113d0:	f000 ff02 	bl	80121d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80113d8:	f3ef 8211 	mrs	r2, BASEPRI
 80113dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e0:	f383 8811 	msr	BASEPRI, r3
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	f3bf 8f4f 	dsb	sy
 80113ec:	617a      	str	r2, [r7, #20]
 80113ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80113f0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113f2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80113f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80113fa:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80113fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113fe:	2202      	movs	r2, #2
 8011400:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8011404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801140a:	1c5a      	adds	r2, r3, #1
 801140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801140e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011412:	7ffb      	ldrb	r3, [r7, #31]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d147      	bne.n	80114a8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00b      	beq.n	8011438 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8011420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	60fb      	str	r3, [r7, #12]
}
 8011432:	bf00      	nop
 8011434:	bf00      	nop
 8011436:	e7fd      	b.n	8011434 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011438:	4b20      	ldr	r3, [pc, #128]	@ (80114bc <vTaskNotifyGiveFromISR+0x114>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d11d      	bne.n	801147c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011442:	3304      	adds	r3, #4
 8011444:	4618      	mov	r0, r3
 8011446:	f7fd fe53 	bl	800f0f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801144c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801144e:	4b1c      	ldr	r3, [pc, #112]	@ (80114c0 <vTaskNotifyGiveFromISR+0x118>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	429a      	cmp	r2, r3
 8011454:	d903      	bls.n	801145e <vTaskNotifyGiveFromISR+0xb6>
 8011456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145a:	4a19      	ldr	r2, [pc, #100]	@ (80114c0 <vTaskNotifyGiveFromISR+0x118>)
 801145c:	6013      	str	r3, [r2, #0]
 801145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011462:	4613      	mov	r3, r2
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	4413      	add	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4a16      	ldr	r2, [pc, #88]	@ (80114c4 <vTaskNotifyGiveFromISR+0x11c>)
 801146c:	441a      	add	r2, r3
 801146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011470:	3304      	adds	r3, #4
 8011472:	4619      	mov	r1, r3
 8011474:	4610      	mov	r0, r2
 8011476:	f7fd fdde 	bl	800f036 <vListInsertEnd>
 801147a:	e005      	b.n	8011488 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801147e:	3318      	adds	r3, #24
 8011480:	4619      	mov	r1, r3
 8011482:	4811      	ldr	r0, [pc, #68]	@ (80114c8 <vTaskNotifyGiveFromISR+0x120>)
 8011484:	f7fd fdd7 	bl	800f036 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801148a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801148c:	4b0f      	ldr	r3, [pc, #60]	@ (80114cc <vTaskNotifyGiveFromISR+0x124>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011492:	429a      	cmp	r2, r3
 8011494:	d908      	bls.n	80114a8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d002      	beq.n	80114a2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	2201      	movs	r2, #1
 80114a0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80114a2:	4b0b      	ldr	r3, [pc, #44]	@ (80114d0 <vTaskNotifyGiveFromISR+0x128>)
 80114a4:	2201      	movs	r2, #1
 80114a6:	601a      	str	r2, [r3, #0]
 80114a8:	6a3b      	ldr	r3, [r7, #32]
 80114aa:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	f383 8811 	msr	BASEPRI, r3
}
 80114b2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80114b4:	bf00      	nop
 80114b6:	3728      	adds	r7, #40	@ 0x28
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	240018ec 	.word	0x240018ec
 80114c0:	240018cc 	.word	0x240018cc
 80114c4:	240013f4 	.word	0x240013f4
 80114c8:	24001884 	.word	0x24001884
 80114cc:	240013f0 	.word	0x240013f0
 80114d0:	240018d8 	.word	0x240018d8

080114d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80114de:	4b21      	ldr	r3, [pc, #132]	@ (8011564 <prvAddCurrentTaskToDelayedList+0x90>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114e4:	4b20      	ldr	r3, [pc, #128]	@ (8011568 <prvAddCurrentTaskToDelayedList+0x94>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	3304      	adds	r3, #4
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fd fe00 	bl	800f0f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f6:	d10a      	bne.n	801150e <prvAddCurrentTaskToDelayedList+0x3a>
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d007      	beq.n	801150e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114fe:	4b1a      	ldr	r3, [pc, #104]	@ (8011568 <prvAddCurrentTaskToDelayedList+0x94>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	3304      	adds	r3, #4
 8011504:	4619      	mov	r1, r3
 8011506:	4819      	ldr	r0, [pc, #100]	@ (801156c <prvAddCurrentTaskToDelayedList+0x98>)
 8011508:	f7fd fd95 	bl	800f036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801150c:	e026      	b.n	801155c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4413      	add	r3, r2
 8011514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011516:	4b14      	ldr	r3, [pc, #80]	@ (8011568 <prvAddCurrentTaskToDelayedList+0x94>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68ba      	ldr	r2, [r7, #8]
 801151c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	429a      	cmp	r2, r3
 8011524:	d209      	bcs.n	801153a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011526:	4b12      	ldr	r3, [pc, #72]	@ (8011570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	4b0f      	ldr	r3, [pc, #60]	@ (8011568 <prvAddCurrentTaskToDelayedList+0x94>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	3304      	adds	r3, #4
 8011530:	4619      	mov	r1, r3
 8011532:	4610      	mov	r0, r2
 8011534:	f7fd fda3 	bl	800f07e <vListInsert>
}
 8011538:	e010      	b.n	801155c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801153a:	4b0e      	ldr	r3, [pc, #56]	@ (8011574 <prvAddCurrentTaskToDelayedList+0xa0>)
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	4b0a      	ldr	r3, [pc, #40]	@ (8011568 <prvAddCurrentTaskToDelayedList+0x94>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3304      	adds	r3, #4
 8011544:	4619      	mov	r1, r3
 8011546:	4610      	mov	r0, r2
 8011548:	f7fd fd99 	bl	800f07e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801154c:	4b0a      	ldr	r3, [pc, #40]	@ (8011578 <prvAddCurrentTaskToDelayedList+0xa4>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	429a      	cmp	r2, r3
 8011554:	d202      	bcs.n	801155c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011556:	4a08      	ldr	r2, [pc, #32]	@ (8011578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	6013      	str	r3, [r2, #0]
}
 801155c:	bf00      	nop
 801155e:	3710      	adds	r7, #16
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	240018c8 	.word	0x240018c8
 8011568:	240013f0 	.word	0x240013f0
 801156c:	240018b0 	.word	0x240018b0
 8011570:	24001880 	.word	0x24001880
 8011574:	2400187c 	.word	0x2400187c
 8011578:	240018e4 	.word	0x240018e4

0801157c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b08a      	sub	sp, #40	@ 0x28
 8011580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011582:	2300      	movs	r3, #0
 8011584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011586:	f000 fbb1 	bl	8011cec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801158a:	4b1d      	ldr	r3, [pc, #116]	@ (8011600 <xTimerCreateTimerTask+0x84>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d021      	beq.n	80115d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011592:	2300      	movs	r3, #0
 8011594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011596:	2300      	movs	r3, #0
 8011598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801159a:	1d3a      	adds	r2, r7, #4
 801159c:	f107 0108 	add.w	r1, r7, #8
 80115a0:	f107 030c 	add.w	r3, r7, #12
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fd fcff 	bl	800efa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80115aa:	6879      	ldr	r1, [r7, #4]
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	9202      	str	r2, [sp, #8]
 80115b2:	9301      	str	r3, [sp, #4]
 80115b4:	2302      	movs	r3, #2
 80115b6:	9300      	str	r3, [sp, #0]
 80115b8:	2300      	movs	r3, #0
 80115ba:	460a      	mov	r2, r1
 80115bc:	4911      	ldr	r1, [pc, #68]	@ (8011604 <xTimerCreateTimerTask+0x88>)
 80115be:	4812      	ldr	r0, [pc, #72]	@ (8011608 <xTimerCreateTimerTask+0x8c>)
 80115c0:	f7fe fe1e 	bl	8010200 <xTaskCreateStatic>
 80115c4:	4603      	mov	r3, r0
 80115c6:	4a11      	ldr	r2, [pc, #68]	@ (801160c <xTimerCreateTimerTask+0x90>)
 80115c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80115ca:	4b10      	ldr	r3, [pc, #64]	@ (801160c <xTimerCreateTimerTask+0x90>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80115d2:	2301      	movs	r3, #1
 80115d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d10b      	bne.n	80115f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80115dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115e0:	f383 8811 	msr	BASEPRI, r3
 80115e4:	f3bf 8f6f 	isb	sy
 80115e8:	f3bf 8f4f 	dsb	sy
 80115ec:	613b      	str	r3, [r7, #16]
}
 80115ee:	bf00      	nop
 80115f0:	bf00      	nop
 80115f2:	e7fd      	b.n	80115f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80115f4:	697b      	ldr	r3, [r7, #20]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	24001920 	.word	0x24001920
 8011604:	08024984 	.word	0x08024984
 8011608:	08011885 	.word	0x08011885
 801160c:	24001924 	.word	0x24001924

08011610 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011610:	b580      	push	{r7, lr}
 8011612:	b088      	sub	sp, #32
 8011614:	af02      	add	r7, sp, #8
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
 801161c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801161e:	202c      	movs	r0, #44	@ 0x2c
 8011620:	f000 fe1c 	bl	801225c <pvPortMalloc>
 8011624:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d00d      	beq.n	8011648 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	2200      	movs	r2, #0
 8011630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	9301      	str	r3, [sp, #4]
 8011638:	6a3b      	ldr	r3, [r7, #32]
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	68b9      	ldr	r1, [r7, #8]
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f000 f845 	bl	80116d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011648:	697b      	ldr	r3, [r7, #20]
	}
 801164a:	4618      	mov	r0, r3
 801164c:	3718      	adds	r7, #24
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}

08011652 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011652:	b580      	push	{r7, lr}
 8011654:	b08a      	sub	sp, #40	@ 0x28
 8011656:	af02      	add	r7, sp, #8
 8011658:	60f8      	str	r0, [r7, #12]
 801165a:	60b9      	str	r1, [r7, #8]
 801165c:	607a      	str	r2, [r7, #4]
 801165e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011660:	232c      	movs	r3, #44	@ 0x2c
 8011662:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	2b2c      	cmp	r3, #44	@ 0x2c
 8011668:	d00b      	beq.n	8011682 <xTimerCreateStatic+0x30>
	__asm volatile
 801166a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801166e:	f383 8811 	msr	BASEPRI, r3
 8011672:	f3bf 8f6f 	isb	sy
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	61bb      	str	r3, [r7, #24]
}
 801167c:	bf00      	nop
 801167e:	bf00      	nop
 8011680:	e7fd      	b.n	801167e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011682:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011686:	2b00      	cmp	r3, #0
 8011688:	d10b      	bne.n	80116a2 <xTimerCreateStatic+0x50>
	__asm volatile
 801168a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801168e:	f383 8811 	msr	BASEPRI, r3
 8011692:	f3bf 8f6f 	isb	sy
 8011696:	f3bf 8f4f 	dsb	sy
 801169a:	617b      	str	r3, [r7, #20]
}
 801169c:	bf00      	nop
 801169e:	bf00      	nop
 80116a0:	e7fd      	b.n	801169e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80116a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00d      	beq.n	80116c8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	2202      	movs	r2, #2
 80116b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	9301      	str	r3, [sp, #4]
 80116b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ba:	9300      	str	r3, [sp, #0]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	68b9      	ldr	r1, [r7, #8]
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f000 f805 	bl	80116d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80116c8:	69fb      	ldr	r3, [r7, #28]
	}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3720      	adds	r7, #32
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b086      	sub	sp, #24
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	60f8      	str	r0, [r7, #12]
 80116da:	60b9      	str	r1, [r7, #8]
 80116dc:	607a      	str	r2, [r7, #4]
 80116de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10b      	bne.n	80116fe <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80116e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ea:	f383 8811 	msr	BASEPRI, r3
 80116ee:	f3bf 8f6f 	isb	sy
 80116f2:	f3bf 8f4f 	dsb	sy
 80116f6:	617b      	str	r3, [r7, #20]
}
 80116f8:	bf00      	nop
 80116fa:	bf00      	nop
 80116fc:	e7fd      	b.n	80116fa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80116fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011700:	2b00      	cmp	r3, #0
 8011702:	d01e      	beq.n	8011742 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011704:	f000 faf2 	bl	8011cec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011710:	68ba      	ldr	r2, [r7, #8]
 8011712:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171c:	6a3a      	ldr	r2, [r7, #32]
 801171e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011722:	3304      	adds	r3, #4
 8011724:	4618      	mov	r0, r3
 8011726:	f7fd fc79 	bl	800f01c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d008      	beq.n	8011742 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011736:	f043 0304 	orr.w	r3, r3, #4
 801173a:	b2da      	uxtb	r2, r3
 801173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801173e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011742:	bf00      	nop
 8011744:	3718      	adds	r7, #24
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
	...

0801174c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08a      	sub	sp, #40	@ 0x28
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801175a:	2300      	movs	r3, #0
 801175c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d10b      	bne.n	801177c <xTimerGenericCommand+0x30>
	__asm volatile
 8011764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011768:	f383 8811 	msr	BASEPRI, r3
 801176c:	f3bf 8f6f 	isb	sy
 8011770:	f3bf 8f4f 	dsb	sy
 8011774:	623b      	str	r3, [r7, #32]
}
 8011776:	bf00      	nop
 8011778:	bf00      	nop
 801177a:	e7fd      	b.n	8011778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801177c:	4b19      	ldr	r3, [pc, #100]	@ (80117e4 <xTimerGenericCommand+0x98>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d02a      	beq.n	80117da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2b05      	cmp	r3, #5
 8011794:	dc18      	bgt.n	80117c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011796:	f7ff fc2d 	bl	8010ff4 <xTaskGetSchedulerState>
 801179a:	4603      	mov	r3, r0
 801179c:	2b02      	cmp	r3, #2
 801179e:	d109      	bne.n	80117b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80117a0:	4b10      	ldr	r3, [pc, #64]	@ (80117e4 <xTimerGenericCommand+0x98>)
 80117a2:	6818      	ldr	r0, [r3, #0]
 80117a4:	f107 0110 	add.w	r1, r7, #16
 80117a8:	2300      	movs	r3, #0
 80117aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117ac:	f7fd feb0 	bl	800f510 <xQueueGenericSend>
 80117b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80117b2:	e012      	b.n	80117da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80117b4:	4b0b      	ldr	r3, [pc, #44]	@ (80117e4 <xTimerGenericCommand+0x98>)
 80117b6:	6818      	ldr	r0, [r3, #0]
 80117b8:	f107 0110 	add.w	r1, r7, #16
 80117bc:	2300      	movs	r3, #0
 80117be:	2200      	movs	r2, #0
 80117c0:	f7fd fea6 	bl	800f510 <xQueueGenericSend>
 80117c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80117c6:	e008      	b.n	80117da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80117c8:	4b06      	ldr	r3, [pc, #24]	@ (80117e4 <xTimerGenericCommand+0x98>)
 80117ca:	6818      	ldr	r0, [r3, #0]
 80117cc:	f107 0110 	add.w	r1, r7, #16
 80117d0:	2300      	movs	r3, #0
 80117d2:	683a      	ldr	r2, [r7, #0]
 80117d4:	f7fd ff9e 	bl	800f714 <xQueueGenericSendFromISR>
 80117d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80117da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3728      	adds	r7, #40	@ 0x28
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	24001920 	.word	0x24001920

080117e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b088      	sub	sp, #32
 80117ec:	af02      	add	r7, sp, #8
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117f2:	4b23      	ldr	r3, [pc, #140]	@ (8011880 <prvProcessExpiredTimer+0x98>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	3304      	adds	r3, #4
 8011800:	4618      	mov	r0, r3
 8011802:	f7fd fc75 	bl	800f0f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801180c:	f003 0304 	and.w	r3, r3, #4
 8011810:	2b00      	cmp	r3, #0
 8011812:	d023      	beq.n	801185c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	699a      	ldr	r2, [r3, #24]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	18d1      	adds	r1, r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	683a      	ldr	r2, [r7, #0]
 8011820:	6978      	ldr	r0, [r7, #20]
 8011822:	f000 f8d5 	bl	80119d0 <prvInsertTimerInActiveList>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d020      	beq.n	801186e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801182c:	2300      	movs	r3, #0
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	2300      	movs	r3, #0
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	2100      	movs	r1, #0
 8011836:	6978      	ldr	r0, [r7, #20]
 8011838:	f7ff ff88 	bl	801174c <xTimerGenericCommand>
 801183c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d114      	bne.n	801186e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	60fb      	str	r3, [r7, #12]
}
 8011856:	bf00      	nop
 8011858:	bf00      	nop
 801185a:	e7fd      	b.n	8011858 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011862:	f023 0301 	bic.w	r3, r3, #1
 8011866:	b2da      	uxtb	r2, r3
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	6a1b      	ldr	r3, [r3, #32]
 8011872:	6978      	ldr	r0, [r7, #20]
 8011874:	4798      	blx	r3
}
 8011876:	bf00      	nop
 8011878:	3718      	adds	r7, #24
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	24001918 	.word	0x24001918

08011884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801188c:	f107 0308 	add.w	r3, r7, #8
 8011890:	4618      	mov	r0, r3
 8011892:	f000 f859 	bl	8011948 <prvGetNextExpireTime>
 8011896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	4619      	mov	r1, r3
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	f000 f805 	bl	80118ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80118a2:	f000 f8d7 	bl	8011a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118a6:	bf00      	nop
 80118a8:	e7f0      	b.n	801188c <prvTimerTask+0x8>
	...

080118ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80118b6:	f7fe ff87 	bl	80107c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80118ba:	f107 0308 	add.w	r3, r7, #8
 80118be:	4618      	mov	r0, r3
 80118c0:	f000 f866 	bl	8011990 <prvSampleTimeNow>
 80118c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d130      	bne.n	801192e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d10a      	bne.n	80118e8 <prvProcessTimerOrBlockTask+0x3c>
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d806      	bhi.n	80118e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80118da:	f7fe ff83 	bl	80107e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80118de:	68f9      	ldr	r1, [r7, #12]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7ff ff81 	bl	80117e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80118e6:	e024      	b.n	8011932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d008      	beq.n	8011900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80118ee:	4b13      	ldr	r3, [pc, #76]	@ (801193c <prvProcessTimerOrBlockTask+0x90>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d101      	bne.n	80118fc <prvProcessTimerOrBlockTask+0x50>
 80118f8:	2301      	movs	r3, #1
 80118fa:	e000      	b.n	80118fe <prvProcessTimerOrBlockTask+0x52>
 80118fc:	2300      	movs	r3, #0
 80118fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011900:	4b0f      	ldr	r3, [pc, #60]	@ (8011940 <prvProcessTimerOrBlockTask+0x94>)
 8011902:	6818      	ldr	r0, [r3, #0]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	683a      	ldr	r2, [r7, #0]
 801190c:	4619      	mov	r1, r3
 801190e:	f7fe fc43 	bl	8010198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011912:	f7fe ff67 	bl	80107e4 <xTaskResumeAll>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10a      	bne.n	8011932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801191c:	4b09      	ldr	r3, [pc, #36]	@ (8011944 <prvProcessTimerOrBlockTask+0x98>)
 801191e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011922:	601a      	str	r2, [r3, #0]
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	f3bf 8f6f 	isb	sy
}
 801192c:	e001      	b.n	8011932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801192e:	f7fe ff59 	bl	80107e4 <xTaskResumeAll>
}
 8011932:	bf00      	nop
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	2400191c 	.word	0x2400191c
 8011940:	24001920 	.word	0x24001920
 8011944:	e000ed04 	.word	0xe000ed04

08011948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011950:	4b0e      	ldr	r3, [pc, #56]	@ (801198c <prvGetNextExpireTime+0x44>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d101      	bne.n	801195e <prvGetNextExpireTime+0x16>
 801195a:	2201      	movs	r2, #1
 801195c:	e000      	b.n	8011960 <prvGetNextExpireTime+0x18>
 801195e:	2200      	movs	r2, #0
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d105      	bne.n	8011978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801196c:	4b07      	ldr	r3, [pc, #28]	@ (801198c <prvGetNextExpireTime+0x44>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	60fb      	str	r3, [r7, #12]
 8011976:	e001      	b.n	801197c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011978:	2300      	movs	r3, #0
 801197a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801197c:	68fb      	ldr	r3, [r7, #12]
}
 801197e:	4618      	mov	r0, r3
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	24001918 	.word	0x24001918

08011990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011998:	f7fe ffc2 	bl	8010920 <xTaskGetTickCount>
 801199c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801199e:	4b0b      	ldr	r3, [pc, #44]	@ (80119cc <prvSampleTimeNow+0x3c>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d205      	bcs.n	80119b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80119a8:	f000 f93a 	bl	8011c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2201      	movs	r2, #1
 80119b0:	601a      	str	r2, [r3, #0]
 80119b2:	e002      	b.n	80119ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80119ba:	4a04      	ldr	r2, [pc, #16]	@ (80119cc <prvSampleTimeNow+0x3c>)
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80119c0:	68fb      	ldr	r3, [r7, #12]
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	24001928 	.word	0x24001928

080119d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
 80119dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80119de:	2300      	movs	r3, #0
 80119e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	68ba      	ldr	r2, [r7, #8]
 80119e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	68fa      	ldr	r2, [r7, #12]
 80119ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d812      	bhi.n	8011a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	1ad2      	subs	r2, r2, r3
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d302      	bcc.n	8011a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011a04:	2301      	movs	r3, #1
 8011a06:	617b      	str	r3, [r7, #20]
 8011a08:	e01b      	b.n	8011a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011a0a:	4b10      	ldr	r3, [pc, #64]	@ (8011a4c <prvInsertTimerInActiveList+0x7c>)
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	3304      	adds	r3, #4
 8011a12:	4619      	mov	r1, r3
 8011a14:	4610      	mov	r0, r2
 8011a16:	f7fd fb32 	bl	800f07e <vListInsert>
 8011a1a:	e012      	b.n	8011a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d206      	bcs.n	8011a32 <prvInsertTimerInActiveList+0x62>
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d302      	bcc.n	8011a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	617b      	str	r3, [r7, #20]
 8011a30:	e007      	b.n	8011a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a32:	4b07      	ldr	r3, [pc, #28]	@ (8011a50 <prvInsertTimerInActiveList+0x80>)
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	3304      	adds	r3, #4
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	f7fd fb1e 	bl	800f07e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011a42:	697b      	ldr	r3, [r7, #20]
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3718      	adds	r7, #24
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	2400191c 	.word	0x2400191c
 8011a50:	24001918 	.word	0x24001918

08011a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b08e      	sub	sp, #56	@ 0x38
 8011a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a5a:	e0ce      	b.n	8011bfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	da19      	bge.n	8011a96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011a62:	1d3b      	adds	r3, r7, #4
 8011a64:	3304      	adds	r3, #4
 8011a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10b      	bne.n	8011a86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	61fb      	str	r3, [r7, #28]
}
 8011a80:	bf00      	nop
 8011a82:	bf00      	nop
 8011a84:	e7fd      	b.n	8011a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a8c:	6850      	ldr	r0, [r2, #4]
 8011a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a90:	6892      	ldr	r2, [r2, #8]
 8011a92:	4611      	mov	r1, r2
 8011a94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f2c0 80ae 	blt.w	8011bfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa4:	695b      	ldr	r3, [r3, #20]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d004      	beq.n	8011ab4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aac:	3304      	adds	r3, #4
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fd fb1e 	bl	800f0f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ab4:	463b      	mov	r3, r7
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff ff6a 	bl	8011990 <prvSampleTimeNow>
 8011abc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b09      	cmp	r3, #9
 8011ac2:	f200 8097 	bhi.w	8011bf4 <prvProcessReceivedCommands+0x1a0>
 8011ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8011acc <prvProcessReceivedCommands+0x78>)
 8011ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011acc:	08011af5 	.word	0x08011af5
 8011ad0:	08011af5 	.word	0x08011af5
 8011ad4:	08011af5 	.word	0x08011af5
 8011ad8:	08011b6b 	.word	0x08011b6b
 8011adc:	08011b7f 	.word	0x08011b7f
 8011ae0:	08011bcb 	.word	0x08011bcb
 8011ae4:	08011af5 	.word	0x08011af5
 8011ae8:	08011af5 	.word	0x08011af5
 8011aec:	08011b6b 	.word	0x08011b6b
 8011af0:	08011b7f 	.word	0x08011b7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011afa:	f043 0301 	orr.w	r3, r3, #1
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b0a:	699b      	ldr	r3, [r3, #24]
 8011b0c:	18d1      	adds	r1, r2, r3
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b14:	f7ff ff5c 	bl	80119d0 <prvInsertTimerInActiveList>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d06c      	beq.n	8011bf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b20:	6a1b      	ldr	r3, [r3, #32]
 8011b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b2c:	f003 0304 	and.w	r3, r3, #4
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d061      	beq.n	8011bf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b38:	699b      	ldr	r3, [r3, #24]
 8011b3a:	441a      	add	r2, r3
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	2300      	movs	r3, #0
 8011b42:	2100      	movs	r1, #0
 8011b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b46:	f7ff fe01 	bl	801174c <xTimerGenericCommand>
 8011b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011b4c:	6a3b      	ldr	r3, [r7, #32]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d152      	bne.n	8011bf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	61bb      	str	r3, [r7, #24]
}
 8011b64:	bf00      	nop
 8011b66:	bf00      	nop
 8011b68:	e7fd      	b.n	8011b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b70:	f023 0301 	bic.w	r3, r3, #1
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011b7c:	e03d      	b.n	8011bfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b84:	f043 0301 	orr.w	r3, r3, #1
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10b      	bne.n	8011bb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba2:	f383 8811 	msr	BASEPRI, r3
 8011ba6:	f3bf 8f6f 	isb	sy
 8011baa:	f3bf 8f4f 	dsb	sy
 8011bae:	617b      	str	r3, [r7, #20]
}
 8011bb0:	bf00      	nop
 8011bb2:	bf00      	nop
 8011bb4:	e7fd      	b.n	8011bb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb8:	699a      	ldr	r2, [r3, #24]
 8011bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bbc:	18d1      	adds	r1, r2, r3
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bc4:	f7ff ff04 	bl	80119d0 <prvInsertTimerInActiveList>
					break;
 8011bc8:	e017      	b.n	8011bfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bd0:	f003 0302 	and.w	r3, r3, #2
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d103      	bne.n	8011be0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bda:	f000 fc0d 	bl	80123f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011bde:	e00c      	b.n	8011bfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011be6:	f023 0301 	bic.w	r3, r3, #1
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011bf2:	e002      	b.n	8011bfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011bf4:	bf00      	nop
 8011bf6:	e000      	b.n	8011bfa <prvProcessReceivedCommands+0x1a6>
					break;
 8011bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011bfa:	4b08      	ldr	r3, [pc, #32]	@ (8011c1c <prvProcessReceivedCommands+0x1c8>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	1d39      	adds	r1, r7, #4
 8011c00:	2200      	movs	r2, #0
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fd feb4 	bl	800f970 <xQueueReceive>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	f47f af26 	bne.w	8011a5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011c10:	bf00      	nop
 8011c12:	bf00      	nop
 8011c14:	3730      	adds	r7, #48	@ 0x30
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	24001920 	.word	0x24001920

08011c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b088      	sub	sp, #32
 8011c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c26:	e049      	b.n	8011cbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c28:	4b2e      	ldr	r3, [pc, #184]	@ (8011ce4 <prvSwitchTimerLists+0xc4>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c32:	4b2c      	ldr	r3, [pc, #176]	@ (8011ce4 <prvSwitchTimerLists+0xc4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	3304      	adds	r3, #4
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fd fa55 	bl	800f0f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6a1b      	ldr	r3, [r3, #32]
 8011c4a:	68f8      	ldr	r0, [r7, #12]
 8011c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c54:	f003 0304 	and.w	r3, r3, #4
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d02f      	beq.n	8011cbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	699b      	ldr	r3, [r3, #24]
 8011c60:	693a      	ldr	r2, [r7, #16]
 8011c62:	4413      	add	r3, r2
 8011c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011c66:	68ba      	ldr	r2, [r7, #8]
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d90e      	bls.n	8011c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8011ce4 <prvSwitchTimerLists+0xc4>)
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3304      	adds	r3, #4
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f7fd f9fa 	bl	800f07e <vListInsert>
 8011c8a:	e017      	b.n	8011cbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	2300      	movs	r3, #0
 8011c92:	693a      	ldr	r2, [r7, #16]
 8011c94:	2100      	movs	r1, #0
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f7ff fd58 	bl	801174c <xTimerGenericCommand>
 8011c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d10b      	bne.n	8011cbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	603b      	str	r3, [r7, #0]
}
 8011cb6:	bf00      	nop
 8011cb8:	bf00      	nop
 8011cba:	e7fd      	b.n	8011cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011cbc:	4b09      	ldr	r3, [pc, #36]	@ (8011ce4 <prvSwitchTimerLists+0xc4>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1b0      	bne.n	8011c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011cc6:	4b07      	ldr	r3, [pc, #28]	@ (8011ce4 <prvSwitchTimerLists+0xc4>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011ccc:	4b06      	ldr	r3, [pc, #24]	@ (8011ce8 <prvSwitchTimerLists+0xc8>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4a04      	ldr	r2, [pc, #16]	@ (8011ce4 <prvSwitchTimerLists+0xc4>)
 8011cd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011cd4:	4a04      	ldr	r2, [pc, #16]	@ (8011ce8 <prvSwitchTimerLists+0xc8>)
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	6013      	str	r3, [r2, #0]
}
 8011cda:	bf00      	nop
 8011cdc:	3718      	adds	r7, #24
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	24001918 	.word	0x24001918
 8011ce8:	2400191c 	.word	0x2400191c

08011cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011cf2:	f000 f991 	bl	8012018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011cf6:	4b15      	ldr	r3, [pc, #84]	@ (8011d4c <prvCheckForValidListAndQueue+0x60>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d120      	bne.n	8011d40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011cfe:	4814      	ldr	r0, [pc, #80]	@ (8011d50 <prvCheckForValidListAndQueue+0x64>)
 8011d00:	f7fd f96c 	bl	800efdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011d04:	4813      	ldr	r0, [pc, #76]	@ (8011d54 <prvCheckForValidListAndQueue+0x68>)
 8011d06:	f7fd f969 	bl	800efdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011d0a:	4b13      	ldr	r3, [pc, #76]	@ (8011d58 <prvCheckForValidListAndQueue+0x6c>)
 8011d0c:	4a10      	ldr	r2, [pc, #64]	@ (8011d50 <prvCheckForValidListAndQueue+0x64>)
 8011d0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011d10:	4b12      	ldr	r3, [pc, #72]	@ (8011d5c <prvCheckForValidListAndQueue+0x70>)
 8011d12:	4a10      	ldr	r2, [pc, #64]	@ (8011d54 <prvCheckForValidListAndQueue+0x68>)
 8011d14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011d16:	2300      	movs	r3, #0
 8011d18:	9300      	str	r3, [sp, #0]
 8011d1a:	4b11      	ldr	r3, [pc, #68]	@ (8011d60 <prvCheckForValidListAndQueue+0x74>)
 8011d1c:	4a11      	ldr	r2, [pc, #68]	@ (8011d64 <prvCheckForValidListAndQueue+0x78>)
 8011d1e:	2110      	movs	r1, #16
 8011d20:	200a      	movs	r0, #10
 8011d22:	f7fd fa79 	bl	800f218 <xQueueGenericCreateStatic>
 8011d26:	4603      	mov	r3, r0
 8011d28:	4a08      	ldr	r2, [pc, #32]	@ (8011d4c <prvCheckForValidListAndQueue+0x60>)
 8011d2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011d2c:	4b07      	ldr	r3, [pc, #28]	@ (8011d4c <prvCheckForValidListAndQueue+0x60>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d005      	beq.n	8011d40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011d34:	4b05      	ldr	r3, [pc, #20]	@ (8011d4c <prvCheckForValidListAndQueue+0x60>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	490b      	ldr	r1, [pc, #44]	@ (8011d68 <prvCheckForValidListAndQueue+0x7c>)
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fe f9d8 	bl	80100f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d40:	f000 f99c 	bl	801207c <vPortExitCritical>
}
 8011d44:	bf00      	nop
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	24001920 	.word	0x24001920
 8011d50:	240018f0 	.word	0x240018f0
 8011d54:	24001904 	.word	0x24001904
 8011d58:	24001918 	.word	0x24001918
 8011d5c:	2400191c 	.word	0x2400191c
 8011d60:	240019cc 	.word	0x240019cc
 8011d64:	2400192c 	.word	0x2400192c
 8011d68:	0802498c 	.word	0x0802498c

08011d6c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b086      	sub	sp, #24
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10b      	bne.n	8011d96 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8011d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d82:	f383 8811 	msr	BASEPRI, r3
 8011d86:	f3bf 8f6f 	isb	sy
 8011d8a:	f3bf 8f4f 	dsb	sy
 8011d8e:	60fb      	str	r3, [r7, #12]
}
 8011d90:	bf00      	nop
 8011d92:	bf00      	nop
 8011d94:	e7fd      	b.n	8011d92 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8011d96:	f000 f93f 	bl	8012018 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	69db      	ldr	r3, [r3, #28]
 8011d9e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011da0:	f000 f96c 	bl	801207c <vPortExitCritical>

	return pvReturn;
 8011da4:	693b      	ldr	r3, [r7, #16]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3718      	adds	r7, #24
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
	...

08011db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011db0:	b480      	push	{r7}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	3b04      	subs	r3, #4
 8011dc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	3b04      	subs	r3, #4
 8011dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	f023 0201 	bic.w	r2, r3, #1
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3b04      	subs	r3, #4
 8011dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011de0:	4a0c      	ldr	r2, [pc, #48]	@ (8011e14 <pxPortInitialiseStack+0x64>)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	3b14      	subs	r3, #20
 8011dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	3b04      	subs	r3, #4
 8011df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f06f 0202 	mvn.w	r2, #2
 8011dfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	3b20      	subs	r3, #32
 8011e04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e06:	68fb      	ldr	r3, [r7, #12]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3714      	adds	r7, #20
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr
 8011e14:	08011e19 	.word	0x08011e19

08011e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e22:	4b13      	ldr	r3, [pc, #76]	@ (8011e70 <prvTaskExitError+0x58>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2a:	d00b      	beq.n	8011e44 <prvTaskExitError+0x2c>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	60fb      	str	r3, [r7, #12]
}
 8011e3e:	bf00      	nop
 8011e40:	bf00      	nop
 8011e42:	e7fd      	b.n	8011e40 <prvTaskExitError+0x28>
	__asm volatile
 8011e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	60bb      	str	r3, [r7, #8]
}
 8011e56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e58:	bf00      	nop
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d0fc      	beq.n	8011e5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e60:	bf00      	nop
 8011e62:	bf00      	nop
 8011e64:	3714      	adds	r7, #20
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr
 8011e6e:	bf00      	nop
 8011e70:	24000010 	.word	0x24000010
	...

08011e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e80:	4b07      	ldr	r3, [pc, #28]	@ (8011ea0 <pxCurrentTCBConst2>)
 8011e82:	6819      	ldr	r1, [r3, #0]
 8011e84:	6808      	ldr	r0, [r1, #0]
 8011e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8a:	f380 8809 	msr	PSP, r0
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f04f 0000 	mov.w	r0, #0
 8011e96:	f380 8811 	msr	BASEPRI, r0
 8011e9a:	4770      	bx	lr
 8011e9c:	f3af 8000 	nop.w

08011ea0 <pxCurrentTCBConst2>:
 8011ea0:	240013f0 	.word	0x240013f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop

08011ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ea8:	4808      	ldr	r0, [pc, #32]	@ (8011ecc <prvPortStartFirstTask+0x24>)
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	6800      	ldr	r0, [r0, #0]
 8011eae:	f380 8808 	msr	MSP, r0
 8011eb2:	f04f 0000 	mov.w	r0, #0
 8011eb6:	f380 8814 	msr	CONTROL, r0
 8011eba:	b662      	cpsie	i
 8011ebc:	b661      	cpsie	f
 8011ebe:	f3bf 8f4f 	dsb	sy
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	df00      	svc	0
 8011ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eca:	bf00      	nop
 8011ecc:	e000ed08 	.word	0xe000ed08

08011ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ed6:	4b47      	ldr	r3, [pc, #284]	@ (8011ff4 <xPortStartScheduler+0x124>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a47      	ldr	r2, [pc, #284]	@ (8011ff8 <xPortStartScheduler+0x128>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d10b      	bne.n	8011ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8011ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	613b      	str	r3, [r7, #16]
}
 8011ef2:	bf00      	nop
 8011ef4:	bf00      	nop
 8011ef6:	e7fd      	b.n	8011ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8011ff4 <xPortStartScheduler+0x124>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a3f      	ldr	r2, [pc, #252]	@ (8011ffc <xPortStartScheduler+0x12c>)
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d10b      	bne.n	8011f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8011f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f06:	f383 8811 	msr	BASEPRI, r3
 8011f0a:	f3bf 8f6f 	isb	sy
 8011f0e:	f3bf 8f4f 	dsb	sy
 8011f12:	60fb      	str	r3, [r7, #12]
}
 8011f14:	bf00      	nop
 8011f16:	bf00      	nop
 8011f18:	e7fd      	b.n	8011f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f1a:	4b39      	ldr	r3, [pc, #228]	@ (8012000 <xPortStartScheduler+0x130>)
 8011f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	22ff      	movs	r2, #255	@ 0xff
 8011f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f34:	78fb      	ldrb	r3, [r7, #3]
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011f3c:	b2da      	uxtb	r2, r3
 8011f3e:	4b31      	ldr	r3, [pc, #196]	@ (8012004 <xPortStartScheduler+0x134>)
 8011f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f42:	4b31      	ldr	r3, [pc, #196]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f44:	2207      	movs	r2, #7
 8011f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f48:	e009      	b.n	8011f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	4a2d      	ldr	r2, [pc, #180]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f54:	78fb      	ldrb	r3, [r7, #3]
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f5e:	78fb      	ldrb	r3, [r7, #3]
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f66:	2b80      	cmp	r3, #128	@ 0x80
 8011f68:	d0ef      	beq.n	8011f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f6a:	4b27      	ldr	r3, [pc, #156]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f1c3 0307 	rsb	r3, r3, #7
 8011f72:	2b04      	cmp	r3, #4
 8011f74:	d00b      	beq.n	8011f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8011f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f7a:	f383 8811 	msr	BASEPRI, r3
 8011f7e:	f3bf 8f6f 	isb	sy
 8011f82:	f3bf 8f4f 	dsb	sy
 8011f86:	60bb      	str	r3, [r7, #8]
}
 8011f88:	bf00      	nop
 8011f8a:	bf00      	nop
 8011f8c:	e7fd      	b.n	8011f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	021b      	lsls	r3, r3, #8
 8011f94:	4a1c      	ldr	r2, [pc, #112]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f98:	4b1b      	ldr	r3, [pc, #108]	@ (8012008 <xPortStartScheduler+0x138>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011fa0:	4a19      	ldr	r2, [pc, #100]	@ (8012008 <xPortStartScheduler+0x138>)
 8011fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	b2da      	uxtb	r2, r3
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011fac:	4b17      	ldr	r3, [pc, #92]	@ (801200c <xPortStartScheduler+0x13c>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4a16      	ldr	r2, [pc, #88]	@ (801200c <xPortStartScheduler+0x13c>)
 8011fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011fb8:	4b14      	ldr	r3, [pc, #80]	@ (801200c <xPortStartScheduler+0x13c>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a13      	ldr	r2, [pc, #76]	@ (801200c <xPortStartScheduler+0x13c>)
 8011fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011fc4:	f000 f8da 	bl	801217c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011fc8:	4b11      	ldr	r3, [pc, #68]	@ (8012010 <xPortStartScheduler+0x140>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011fce:	f000 f8f9 	bl	80121c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011fd2:	4b10      	ldr	r3, [pc, #64]	@ (8012014 <xPortStartScheduler+0x144>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8012014 <xPortStartScheduler+0x144>)
 8011fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011fde:	f7ff ff63 	bl	8011ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011fe2:	f7fe fd79 	bl	8010ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8011fe6:	f7ff ff17 	bl	8011e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3718      	adds	r7, #24
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	e000ed00 	.word	0xe000ed00
 8011ff8:	410fc271 	.word	0x410fc271
 8011ffc:	410fc270 	.word	0x410fc270
 8012000:	e000e400 	.word	0xe000e400
 8012004:	24001a1c 	.word	0x24001a1c
 8012008:	24001a20 	.word	0x24001a20
 801200c:	e000ed20 	.word	0xe000ed20
 8012010:	24000010 	.word	0x24000010
 8012014:	e000ef34 	.word	0xe000ef34

08012018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
	__asm volatile
 801201e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012022:	f383 8811 	msr	BASEPRI, r3
 8012026:	f3bf 8f6f 	isb	sy
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	607b      	str	r3, [r7, #4]
}
 8012030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012032:	4b10      	ldr	r3, [pc, #64]	@ (8012074 <vPortEnterCritical+0x5c>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	3301      	adds	r3, #1
 8012038:	4a0e      	ldr	r2, [pc, #56]	@ (8012074 <vPortEnterCritical+0x5c>)
 801203a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801203c:	4b0d      	ldr	r3, [pc, #52]	@ (8012074 <vPortEnterCritical+0x5c>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2b01      	cmp	r3, #1
 8012042:	d110      	bne.n	8012066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012044:	4b0c      	ldr	r3, [pc, #48]	@ (8012078 <vPortEnterCritical+0x60>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	b2db      	uxtb	r3, r3
 801204a:	2b00      	cmp	r3, #0
 801204c:	d00b      	beq.n	8012066 <vPortEnterCritical+0x4e>
	__asm volatile
 801204e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	603b      	str	r3, [r7, #0]
}
 8012060:	bf00      	nop
 8012062:	bf00      	nop
 8012064:	e7fd      	b.n	8012062 <vPortEnterCritical+0x4a>
	}
}
 8012066:	bf00      	nop
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	24000010 	.word	0x24000010
 8012078:	e000ed04 	.word	0xe000ed04

0801207c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012082:	4b12      	ldr	r3, [pc, #72]	@ (80120cc <vPortExitCritical+0x50>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d10b      	bne.n	80120a2 <vPortExitCritical+0x26>
	__asm volatile
 801208a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801208e:	f383 8811 	msr	BASEPRI, r3
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	607b      	str	r3, [r7, #4]
}
 801209c:	bf00      	nop
 801209e:	bf00      	nop
 80120a0:	e7fd      	b.n	801209e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80120a2:	4b0a      	ldr	r3, [pc, #40]	@ (80120cc <vPortExitCritical+0x50>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	3b01      	subs	r3, #1
 80120a8:	4a08      	ldr	r2, [pc, #32]	@ (80120cc <vPortExitCritical+0x50>)
 80120aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80120ac:	4b07      	ldr	r3, [pc, #28]	@ (80120cc <vPortExitCritical+0x50>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d105      	bne.n	80120c0 <vPortExitCritical+0x44>
 80120b4:	2300      	movs	r3, #0
 80120b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	f383 8811 	msr	BASEPRI, r3
}
 80120be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80120c0:	bf00      	nop
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	24000010 	.word	0x24000010

080120d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120d0:	f3ef 8009 	mrs	r0, PSP
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	4b15      	ldr	r3, [pc, #84]	@ (8012130 <pxCurrentTCBConst>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	f01e 0f10 	tst.w	lr, #16
 80120e0:	bf08      	it	eq
 80120e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80120e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ea:	6010      	str	r0, [r2, #0]
 80120ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80120f4:	f380 8811 	msr	BASEPRI, r0
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f7fe fcea 	bl	8010ad8 <vTaskSwitchContext>
 8012104:	f04f 0000 	mov.w	r0, #0
 8012108:	f380 8811 	msr	BASEPRI, r0
 801210c:	bc09      	pop	{r0, r3}
 801210e:	6819      	ldr	r1, [r3, #0]
 8012110:	6808      	ldr	r0, [r1, #0]
 8012112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012116:	f01e 0f10 	tst.w	lr, #16
 801211a:	bf08      	it	eq
 801211c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012120:	f380 8809 	msr	PSP, r0
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w

08012130 <pxCurrentTCBConst>:
 8012130:	240013f0 	.word	0x240013f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012134:	bf00      	nop
 8012136:	bf00      	nop

08012138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	607b      	str	r3, [r7, #4]
}
 8012150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012152:	f7fe fc07 	bl	8010964 <xTaskIncrementTick>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d003      	beq.n	8012164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801215c:	4b06      	ldr	r3, [pc, #24]	@ (8012178 <xPortSysTickHandler+0x40>)
 801215e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012162:	601a      	str	r2, [r3, #0]
 8012164:	2300      	movs	r3, #0
 8012166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	f383 8811 	msr	BASEPRI, r3
}
 801216e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	e000ed04 	.word	0xe000ed04

0801217c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801217c:	b480      	push	{r7}
 801217e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012180:	4b0b      	ldr	r3, [pc, #44]	@ (80121b0 <vPortSetupTimerInterrupt+0x34>)
 8012182:	2200      	movs	r2, #0
 8012184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012186:	4b0b      	ldr	r3, [pc, #44]	@ (80121b4 <vPortSetupTimerInterrupt+0x38>)
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801218c:	4b0a      	ldr	r3, [pc, #40]	@ (80121b8 <vPortSetupTimerInterrupt+0x3c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a0a      	ldr	r2, [pc, #40]	@ (80121bc <vPortSetupTimerInterrupt+0x40>)
 8012192:	fba2 2303 	umull	r2, r3, r2, r3
 8012196:	099b      	lsrs	r3, r3, #6
 8012198:	4a09      	ldr	r2, [pc, #36]	@ (80121c0 <vPortSetupTimerInterrupt+0x44>)
 801219a:	3b01      	subs	r3, #1
 801219c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801219e:	4b04      	ldr	r3, [pc, #16]	@ (80121b0 <vPortSetupTimerInterrupt+0x34>)
 80121a0:	2207      	movs	r2, #7
 80121a2:	601a      	str	r2, [r3, #0]
}
 80121a4:	bf00      	nop
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	e000e010 	.word	0xe000e010
 80121b4:	e000e018 	.word	0xe000e018
 80121b8:	24000000 	.word	0x24000000
 80121bc:	10624dd3 	.word	0x10624dd3
 80121c0:	e000e014 	.word	0xe000e014

080121c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80121d4 <vPortEnableVFP+0x10>
 80121c8:	6801      	ldr	r1, [r0, #0]
 80121ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80121ce:	6001      	str	r1, [r0, #0]
 80121d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80121d2:	bf00      	nop
 80121d4:	e000ed88 	.word	0xe000ed88

080121d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80121d8:	b480      	push	{r7}
 80121da:	b085      	sub	sp, #20
 80121dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80121de:	f3ef 8305 	mrs	r3, IPSR
 80121e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b0f      	cmp	r3, #15
 80121e8:	d915      	bls.n	8012216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80121ea:	4a18      	ldr	r2, [pc, #96]	@ (801224c <vPortValidateInterruptPriority+0x74>)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	4413      	add	r3, r2
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80121f4:	4b16      	ldr	r3, [pc, #88]	@ (8012250 <vPortValidateInterruptPriority+0x78>)
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	7afa      	ldrb	r2, [r7, #11]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d20b      	bcs.n	8012216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80121fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012202:	f383 8811 	msr	BASEPRI, r3
 8012206:	f3bf 8f6f 	isb	sy
 801220a:	f3bf 8f4f 	dsb	sy
 801220e:	607b      	str	r3, [r7, #4]
}
 8012210:	bf00      	nop
 8012212:	bf00      	nop
 8012214:	e7fd      	b.n	8012212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012216:	4b0f      	ldr	r3, [pc, #60]	@ (8012254 <vPortValidateInterruptPriority+0x7c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801221e:	4b0e      	ldr	r3, [pc, #56]	@ (8012258 <vPortValidateInterruptPriority+0x80>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	429a      	cmp	r2, r3
 8012224:	d90b      	bls.n	801223e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801222a:	f383 8811 	msr	BASEPRI, r3
 801222e:	f3bf 8f6f 	isb	sy
 8012232:	f3bf 8f4f 	dsb	sy
 8012236:	603b      	str	r3, [r7, #0]
}
 8012238:	bf00      	nop
 801223a:	bf00      	nop
 801223c:	e7fd      	b.n	801223a <vPortValidateInterruptPriority+0x62>
	}
 801223e:	bf00      	nop
 8012240:	3714      	adds	r7, #20
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	e000e3f0 	.word	0xe000e3f0
 8012250:	24001a1c 	.word	0x24001a1c
 8012254:	e000ed0c 	.word	0xe000ed0c
 8012258:	24001a20 	.word	0x24001a20

0801225c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b08a      	sub	sp, #40	@ 0x28
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012264:	2300      	movs	r3, #0
 8012266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012268:	f7fe faae 	bl	80107c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801226c:	4b5c      	ldr	r3, [pc, #368]	@ (80123e0 <pvPortMalloc+0x184>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d101      	bne.n	8012278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012274:	f000 f924 	bl	80124c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012278:	4b5a      	ldr	r3, [pc, #360]	@ (80123e4 <pvPortMalloc+0x188>)
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4013      	ands	r3, r2
 8012280:	2b00      	cmp	r3, #0
 8012282:	f040 8095 	bne.w	80123b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d01e      	beq.n	80122ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801228c:	2208      	movs	r2, #8
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	4413      	add	r3, r2
 8012292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f003 0307 	and.w	r3, r3, #7
 801229a:	2b00      	cmp	r3, #0
 801229c:	d015      	beq.n	80122ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f023 0307 	bic.w	r3, r3, #7
 80122a4:	3308      	adds	r3, #8
 80122a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f003 0307 	and.w	r3, r3, #7
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d00b      	beq.n	80122ca <pvPortMalloc+0x6e>
	__asm volatile
 80122b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b6:	f383 8811 	msr	BASEPRI, r3
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	617b      	str	r3, [r7, #20]
}
 80122c4:	bf00      	nop
 80122c6:	bf00      	nop
 80122c8:	e7fd      	b.n	80122c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d06f      	beq.n	80123b0 <pvPortMalloc+0x154>
 80122d0:	4b45      	ldr	r3, [pc, #276]	@ (80123e8 <pvPortMalloc+0x18c>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d86a      	bhi.n	80123b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122da:	4b44      	ldr	r3, [pc, #272]	@ (80123ec <pvPortMalloc+0x190>)
 80122dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122de:	4b43      	ldr	r3, [pc, #268]	@ (80123ec <pvPortMalloc+0x190>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122e4:	e004      	b.n	80122f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80122e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80122ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d903      	bls.n	8012302 <pvPortMalloc+0xa6>
 80122fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1f1      	bne.n	80122e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012302:	4b37      	ldr	r3, [pc, #220]	@ (80123e0 <pvPortMalloc+0x184>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012308:	429a      	cmp	r2, r3
 801230a:	d051      	beq.n	80123b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801230c:	6a3b      	ldr	r3, [r7, #32]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2208      	movs	r2, #8
 8012312:	4413      	add	r3, r2
 8012314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	6a3b      	ldr	r3, [r7, #32]
 801231c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012320:	685a      	ldr	r2, [r3, #4]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	1ad2      	subs	r2, r2, r3
 8012326:	2308      	movs	r3, #8
 8012328:	005b      	lsls	r3, r3, #1
 801232a:	429a      	cmp	r2, r3
 801232c:	d920      	bls.n	8012370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	4413      	add	r3, r2
 8012334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	f003 0307 	and.w	r3, r3, #7
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00b      	beq.n	8012358 <pvPortMalloc+0xfc>
	__asm volatile
 8012340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012344:	f383 8811 	msr	BASEPRI, r3
 8012348:	f3bf 8f6f 	isb	sy
 801234c:	f3bf 8f4f 	dsb	sy
 8012350:	613b      	str	r3, [r7, #16]
}
 8012352:	bf00      	nop
 8012354:	bf00      	nop
 8012356:	e7fd      	b.n	8012354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	1ad2      	subs	r2, r2, r3
 8012360:	69bb      	ldr	r3, [r7, #24]
 8012362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801236a:	69b8      	ldr	r0, [r7, #24]
 801236c:	f000 f90c 	bl	8012588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012370:	4b1d      	ldr	r3, [pc, #116]	@ (80123e8 <pvPortMalloc+0x18c>)
 8012372:	681a      	ldr	r2, [r3, #0]
 8012374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	1ad3      	subs	r3, r2, r3
 801237a:	4a1b      	ldr	r2, [pc, #108]	@ (80123e8 <pvPortMalloc+0x18c>)
 801237c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801237e:	4b1a      	ldr	r3, [pc, #104]	@ (80123e8 <pvPortMalloc+0x18c>)
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	4b1b      	ldr	r3, [pc, #108]	@ (80123f0 <pvPortMalloc+0x194>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	429a      	cmp	r2, r3
 8012388:	d203      	bcs.n	8012392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801238a:	4b17      	ldr	r3, [pc, #92]	@ (80123e8 <pvPortMalloc+0x18c>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a18      	ldr	r2, [pc, #96]	@ (80123f0 <pvPortMalloc+0x194>)
 8012390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012394:	685a      	ldr	r2, [r3, #4]
 8012396:	4b13      	ldr	r3, [pc, #76]	@ (80123e4 <pvPortMalloc+0x188>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	431a      	orrs	r2, r3
 801239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80123a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a2:	2200      	movs	r2, #0
 80123a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80123a6:	4b13      	ldr	r3, [pc, #76]	@ (80123f4 <pvPortMalloc+0x198>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	3301      	adds	r3, #1
 80123ac:	4a11      	ldr	r2, [pc, #68]	@ (80123f4 <pvPortMalloc+0x198>)
 80123ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80123b0:	f7fe fa18 	bl	80107e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80123b4:	69fb      	ldr	r3, [r7, #28]
 80123b6:	f003 0307 	and.w	r3, r3, #7
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00b      	beq.n	80123d6 <pvPortMalloc+0x17a>
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123c2:	f383 8811 	msr	BASEPRI, r3
 80123c6:	f3bf 8f6f 	isb	sy
 80123ca:	f3bf 8f4f 	dsb	sy
 80123ce:	60fb      	str	r3, [r7, #12]
}
 80123d0:	bf00      	nop
 80123d2:	bf00      	nop
 80123d4:	e7fd      	b.n	80123d2 <pvPortMalloc+0x176>
	return pvReturn;
 80123d6:	69fb      	ldr	r3, [r7, #28]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3728      	adds	r7, #40	@ 0x28
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	2401eeec 	.word	0x2401eeec
 80123e4:	2401ef00 	.word	0x2401ef00
 80123e8:	2401eef0 	.word	0x2401eef0
 80123ec:	2401eee4 	.word	0x2401eee4
 80123f0:	2401eef4 	.word	0x2401eef4
 80123f4:	2401eef8 	.word	0x2401eef8

080123f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b086      	sub	sp, #24
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d04f      	beq.n	80124aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801240a:	2308      	movs	r3, #8
 801240c:	425b      	negs	r3, r3
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	4413      	add	r3, r2
 8012412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	685a      	ldr	r2, [r3, #4]
 801241c:	4b25      	ldr	r3, [pc, #148]	@ (80124b4 <vPortFree+0xbc>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	4013      	ands	r3, r2
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10b      	bne.n	801243e <vPortFree+0x46>
	__asm volatile
 8012426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	60fb      	str	r3, [r7, #12]
}
 8012438:	bf00      	nop
 801243a:	bf00      	nop
 801243c:	e7fd      	b.n	801243a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d00b      	beq.n	801245e <vPortFree+0x66>
	__asm volatile
 8012446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801244a:	f383 8811 	msr	BASEPRI, r3
 801244e:	f3bf 8f6f 	isb	sy
 8012452:	f3bf 8f4f 	dsb	sy
 8012456:	60bb      	str	r3, [r7, #8]
}
 8012458:	bf00      	nop
 801245a:	bf00      	nop
 801245c:	e7fd      	b.n	801245a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	685a      	ldr	r2, [r3, #4]
 8012462:	4b14      	ldr	r3, [pc, #80]	@ (80124b4 <vPortFree+0xbc>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	4013      	ands	r3, r2
 8012468:	2b00      	cmp	r3, #0
 801246a:	d01e      	beq.n	80124aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d11a      	bne.n	80124aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	685a      	ldr	r2, [r3, #4]
 8012478:	4b0e      	ldr	r3, [pc, #56]	@ (80124b4 <vPortFree+0xbc>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	43db      	mvns	r3, r3
 801247e:	401a      	ands	r2, r3
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012484:	f7fe f9a0 	bl	80107c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	685a      	ldr	r2, [r3, #4]
 801248c:	4b0a      	ldr	r3, [pc, #40]	@ (80124b8 <vPortFree+0xc0>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4413      	add	r3, r2
 8012492:	4a09      	ldr	r2, [pc, #36]	@ (80124b8 <vPortFree+0xc0>)
 8012494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012496:	6938      	ldr	r0, [r7, #16]
 8012498:	f000 f876 	bl	8012588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801249c:	4b07      	ldr	r3, [pc, #28]	@ (80124bc <vPortFree+0xc4>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	3301      	adds	r3, #1
 80124a2:	4a06      	ldr	r2, [pc, #24]	@ (80124bc <vPortFree+0xc4>)
 80124a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80124a6:	f7fe f99d 	bl	80107e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80124aa:	bf00      	nop
 80124ac:	3718      	adds	r7, #24
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	2401ef00 	.word	0x2401ef00
 80124b8:	2401eef0 	.word	0x2401eef0
 80124bc:	2401eefc 	.word	0x2401eefc

080124c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80124c0:	b480      	push	{r7}
 80124c2:	b085      	sub	sp, #20
 80124c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80124c6:	4b29      	ldr	r3, [pc, #164]	@ (801256c <prvHeapInit+0xac>)
 80124c8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80124ca:	4b29      	ldr	r3, [pc, #164]	@ (8012570 <prvHeapInit+0xb0>)
 80124cc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f003 0307 	and.w	r3, r3, #7
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00c      	beq.n	80124f2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	3307      	adds	r3, #7
 80124dc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f023 0307 	bic.w	r3, r3, #7
 80124e4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80124e6:	68ba      	ldr	r2, [r7, #8]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	4a20      	ldr	r2, [pc, #128]	@ (8012570 <prvHeapInit+0xb0>)
 80124ee:	4413      	add	r3, r2
 80124f0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80124f6:	4a1f      	ldr	r2, [pc, #124]	@ (8012574 <prvHeapInit+0xb4>)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80124fc:	4b1d      	ldr	r3, [pc, #116]	@ (8012574 <prvHeapInit+0xb4>)
 80124fe:	2200      	movs	r2, #0
 8012500:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	4413      	add	r3, r2
 8012508:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801250a:	2208      	movs	r2, #8
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	1a9b      	subs	r3, r3, r2
 8012510:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f023 0307 	bic.w	r3, r3, #7
 8012518:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	4a16      	ldr	r2, [pc, #88]	@ (8012578 <prvHeapInit+0xb8>)
 801251e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012520:	4b15      	ldr	r3, [pc, #84]	@ (8012578 <prvHeapInit+0xb8>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	2200      	movs	r2, #0
 8012526:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012528:	4b13      	ldr	r3, [pc, #76]	@ (8012578 <prvHeapInit+0xb8>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2200      	movs	r2, #0
 801252e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	1ad2      	subs	r2, r2, r3
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801253e:	4b0e      	ldr	r3, [pc, #56]	@ (8012578 <prvHeapInit+0xb8>)
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	4a0c      	ldr	r2, [pc, #48]	@ (801257c <prvHeapInit+0xbc>)
 801254c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	4a0b      	ldr	r2, [pc, #44]	@ (8012580 <prvHeapInit+0xc0>)
 8012554:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012556:	4b0b      	ldr	r3, [pc, #44]	@ (8012584 <prvHeapInit+0xc4>)
 8012558:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801255c:	601a      	str	r2, [r3, #0]
}
 801255e:	bf00      	nop
 8012560:	3714      	adds	r7, #20
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	0001d4c0 	.word	0x0001d4c0
 8012570:	24001a24 	.word	0x24001a24
 8012574:	2401eee4 	.word	0x2401eee4
 8012578:	2401eeec 	.word	0x2401eeec
 801257c:	2401eef4 	.word	0x2401eef4
 8012580:	2401eef0 	.word	0x2401eef0
 8012584:	2401ef00 	.word	0x2401ef00

08012588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012588:	b480      	push	{r7}
 801258a:	b085      	sub	sp, #20
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012590:	4b28      	ldr	r3, [pc, #160]	@ (8012634 <prvInsertBlockIntoFreeList+0xac>)
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	e002      	b.n	801259c <prvInsertBlockIntoFreeList+0x14>
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	60fb      	str	r3, [r7, #12]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d8f7      	bhi.n	8012596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	4413      	add	r3, r2
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d108      	bne.n	80125ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	685a      	ldr	r2, [r3, #4]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	441a      	add	r2, r3
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	68ba      	ldr	r2, [r7, #8]
 80125d4:	441a      	add	r2, r3
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d118      	bne.n	8012610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	4b15      	ldr	r3, [pc, #84]	@ (8012638 <prvInsertBlockIntoFreeList+0xb0>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d00d      	beq.n	8012606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	685a      	ldr	r2, [r3, #4]
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	441a      	add	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	e008      	b.n	8012618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012606:	4b0c      	ldr	r3, [pc, #48]	@ (8012638 <prvInsertBlockIntoFreeList+0xb0>)
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	601a      	str	r2, [r3, #0]
 801260e:	e003      	b.n	8012618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	429a      	cmp	r2, r3
 801261e:	d002      	beq.n	8012626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012626:	bf00      	nop
 8012628:	3714      	adds	r7, #20
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	2401eee4 	.word	0x2401eee4
 8012638:	2401eeec 	.word	0x2401eeec

0801263c <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback() {
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	4a04      	ldr	r2, [pc, #16]	@ (8012658 <_ZN8CallbackC1Ev+0x1c>)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	601a      	str	r2, [r3, #0]

	}
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4618      	mov	r0, r3
 801264e:	370c      	adds	r7, #12
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr
 8012658:	08024d30 	.word	0x08024d30

0801265c <_ZN8Callback4callEv>:

	virtual void call() {
 801265c:	b480      	push	{r7}
 801265e:	b083      	sub	sp, #12
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]

	}
 8012664:	bf00      	nop
 8012666:	370c      	adds	r7, #12
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr

08012670 <_ZN8Callback4callEPv>:

	virtual void call(void *argument) {
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]

	}
 801267a:	bf00      	nop
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <_ZN19core_utils_CallbackIvvE4callEv>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
		_fp = core_utils_FunctionPointer<void, void>(object, member);
		this->registered = 1;
	}

	void call() {
 8012686:	b580      	push	{r7, lr}
 8012688:	b082      	sub	sp, #8
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
		this->_fp();
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	3308      	adds	r3, #8
 8012692:	4618      	mov	r0, r3
 8012694:	f000 f955 	bl	8012942 <_ZN26core_utils_FunctionPointerIvvEclEv>
	}
 8012698:	bf00      	nop
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <_ZN26twipr_spi_comm_callbacks_tC1Ev>:

typedef enum twipr_spi_comm_callback_id_t {
	TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX, TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
} twipr_spi_comm_callback_id_t;

typedef struct twipr_spi_comm_callbacks_t {
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 f954 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	3320      	adds	r3, #32
 80126b4:	4618      	mov	r0, r3
 80126b6:	f000 f94f 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZN23TWIPR_SPI_CommunicationC1Ev>:

#include "twipr_spi_communication.h"
//
//static uint8_t tx_cmd_buf[4] = { 0x55, 0x00, 0x00, 10};

TWIPR_SPI_Communication::TWIPR_SPI_Communication() {
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2200      	movs	r2, #0
 80126d0:	751a      	strb	r2, [r3, #20]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	331c      	adds	r3, #28
 80126d6:	4618      	mov	r0, r3
 80126d8:	f00c ff19 	bl	801f50e <_ZN23core_hardware_SPI_slaveC1Ev>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	3388      	adds	r3, #136	@ 0x88
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7ff ffdd 	bl	80126a0 <_ZN26twipr_spi_comm_callbacks_tC1Ev>

}
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>:

/* =============================================================== */
void TWIPR_SPI_Communication::init(twipr_spi_comm_config_t config) {
 80126f0:	b084      	sub	sp, #16
 80126f2:	b5b0      	push	{r4, r5, r7, lr}
 80126f4:	b09a      	sub	sp, #104	@ 0x68
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80126fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	461d      	mov	r5, r3
 8012706:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 801270a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801270c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801270e:	6823      	ldr	r3, [r4, #0]
 8012710:	602b      	str	r3, [r5, #0]

	core_hardware_spi_config_t spi_config = { .hspi = this->config.hspi,
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
			.rx_buffer = (uint8_t*) this->config.sequence_buffer, .tx_buffer =
					(uint8_t*) this->config.sample_buffer, };
 8012716:	60fb      	str	r3, [r7, #12]
			.rx_buffer = (uint8_t*) this->config.sequence_buffer, .tx_buffer =
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	68db      	ldr	r3, [r3, #12]
					(uint8_t*) this->config.sample_buffer, };
 801271c:	613b      	str	r3, [r7, #16]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	617b      	str	r3, [r7, #20]

	this->spi_slave.init(spi_config);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f103 001c 	add.w	r0, r3, #28
 801272a:	f107 030c 	add.w	r3, r7, #12
 801272e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012730:	f00c fefc 	bl	801f52c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 801273a:	4b18      	ldr	r3, [pc, #96]	@ (801279c <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xac>)
 801273c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801273e:	2300      	movs	r3, #0
 8012740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012742:	f107 0018 	add.w	r0, r7, #24
 8012746:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801274a:	cb0c      	ldmia	r3, {r2, r3}
 801274c:	6879      	ldr	r1, [r7, #4]
 801274e:	f000 f921 	bl	8012994 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8012752:	f107 0318 	add.w	r3, r7, #24
 8012756:	461a      	mov	r2, r3
 8012758:	2100      	movs	r1, #0
 801275a:	4620      	mov	r0, r4
 801275c:	f00c ff40 	bl	801f5e0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_SPI_Communication::rx_cmplt_function));

	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 8012766:	4b0e      	ldr	r3, [pc, #56]	@ (80127a0 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xb0>)
 8012768:	663b      	str	r3, [r7, #96]	@ 0x60
 801276a:	2300      	movs	r3, #0
 801276c:	667b      	str	r3, [r7, #100]	@ 0x64
 801276e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8012772:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8012776:	cb0c      	ldmia	r3, {r2, r3}
 8012778:	6879      	ldr	r1, [r7, #4]
 801277a:	f000 f90b 	bl	8012994 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 801277e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8012782:	461a      	mov	r2, r3
 8012784:	2101      	movs	r1, #1
 8012786:	4620      	mov	r0, r4
 8012788:	f00c ff2a 	bl	801f5e0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
//	uint8_t sample_size = sizeof(twipr_logging_sample_t);

//	tx_cmd_buf[1] = trajectory_size;
//	tx_cmd_buf[2] =	sample_size;

}
 801278c:	bf00      	nop
 801278e:	3768      	adds	r7, #104	@ 0x68
 8012790:	46bd      	mov	sp, r7
 8012792:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012796:	b004      	add	sp, #16
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	080128af 	.word	0x080128af
 80127a0:	080128db 	.word	0x080128db

080127a4 <_ZN23TWIPR_SPI_Communication5startEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::start() {
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
	this->spi_slave.start();
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	331c      	adds	r3, #28
 80127b0:	4618      	mov	r0, r3
 80127b2:	f00c fef9 	bl	801f5a8 <_ZN23core_hardware_SPI_slave5startEv>
	this->provideSampleData();
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 f84e 	bl	8012858 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 80127bc:	bf00      	nop
 80127be:	3708      	adds	r7, #8
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <_ZN8CallbackaSERKS_>:
class Callback {
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6039      	str	r1, [r7, #0]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr

080127dc <_ZN19core_utils_CallbackIvtEaSERKS0_>:
class core_utils_Callback<void, input_type> : public Callback {
 80127dc:	b5b0      	push	{r4, r5, r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	6039      	str	r1, [r7, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	683a      	ldr	r2, [r7, #0]
 80127ea:	4611      	mov	r1, r2
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7ff ffe9 	bl	80127c4 <_ZN8CallbackaSERKS_>
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	791a      	ldrb	r2, [r3, #4]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	711a      	strb	r2, [r3, #4]
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	f102 0408 	add.w	r4, r2, #8
 8012802:	f103 0508 	add.w	r5, r3, #8
 8012806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801280a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801280e:	e884 0003 	stmia.w	r4, {r0, r1}
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bdb0      	pop	{r4, r5, r7, pc}

0801281c <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>:
/* =============================================================== */
void TWIPR_SPI_Communication::registerCallback(
		twipr_spi_comm_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	460b      	mov	r3, r1
 8012826:	607a      	str	r2, [r7, #4]
 8012828:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 801282a:	7afb      	ldrb	r3, [r7, #11]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d008      	beq.n	8012842 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x26>
 8012830:	2b01      	cmp	r3, #1
 8012832:	d10d      	bne.n	8012850 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	case TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX: {
		this->callbacks.sample_tx_callback = callback;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	33a8      	adds	r3, #168	@ 0xa8
 8012838:	6879      	ldr	r1, [r7, #4]
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff ffce 	bl	80127dc <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 8012840:	e006      	b.n	8012850 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	}
	case TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX: {
		this->callbacks.trajectory_rx_callback = callback;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	3388      	adds	r3, #136	@ 0x88
 8012846:	6879      	ldr	r1, [r7, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	f7ff ffc7 	bl	80127dc <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 801284e:	bf00      	nop
	}
	}
}
 8012850:	bf00      	nop
 8012852:	3710      	adds	r7, #16
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(){
	this->receiveTrajectory(this->config.sequence_buffer, this->config.len_sequence_buffer);
}
/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(){
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	this->provideSampleData(this->config.sample_buffer, this->config.len_sample_buffer);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6859      	ldr	r1, [r3, #4]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	891b      	ldrh	r3, [r3, #8]
 8012868:	461a      	mov	r2, r3
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f000 f804 	bl	8012878 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>
}
 8012870:	bf00      	nop
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>:
	this->spi_slave.receiveData((uint8_t*) trajectory_buffer,  sizeof(twipr_sequence_input_t) * len);
}

/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(
		twipr_logging_sample_t *sample_buffer, uint16_t len) {
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	4613      	mov	r3, r2
 8012884:	80fb      	strh	r3, [r7, #6]

	this->mode = TWIPR_SPI_COMM_MODE_TX;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2202      	movs	r2, #2
 801288a:	751a      	strb	r2, [r3, #20]
	this->spi_slave.provideData((uint8_t*) sample_buffer, sizeof(twipr_logging_sample_t) * len);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	f103 001c 	add.w	r0, r3, #28
 8012892:	88fb      	ldrh	r3, [r7, #6]
 8012894:	461a      	mov	r2, r3
 8012896:	0152      	lsls	r2, r2, #5
 8012898:	4413      	add	r3, r2
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	b29b      	uxth	r3, r3
 801289e:	461a      	mov	r2, r3
 80128a0:	68b9      	ldr	r1, [r7, #8]
 80128a2:	f00c fe8b 	bl	801f5bc <_ZN23core_hardware_SPI_slave11provideDataEPht>
}
 80128a6:	bf00      	nop
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::rx_cmplt_function() {
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b082      	sub	sp, #8
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	6078      	str	r0, [r7, #4]
	if (this->callbacks.trajectory_rx_callback.registered) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d008      	beq.n	80128d2 <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv+0x24>
		this->callbacks.trajectory_rx_callback.call(this->config.len_sequence_buffer);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	8a1b      	ldrh	r3, [r3, #16]
 80128ca:	4619      	mov	r1, r3
 80128cc:	4610      	mov	r0, r2
 80128ce:	f000 f895 	bl	80129fc <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 80128d2:	bf00      	nop
 80128d4:	3708      	adds	r7, #8
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}

080128da <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::tx_cmplt_function() {
 80128da:	b580      	push	{r7, lr}
 80128dc:	b082      	sub	sp, #8
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]

	// Execute the TX Callback, if registered
	if (this->callbacks.sample_tx_callback.registered) {
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d008      	beq.n	80128fe <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv+0x24>
		this->callbacks.sample_tx_callback.call(this->_len);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	8b5b      	ldrh	r3, [r3, #26]
 80128f6:	4619      	mov	r1, r3
 80128f8:	4610      	mov	r0, r2
 80128fa:	f000 f87f 	bl	80129fc <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->provideSampleData();
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff ffaa 	bl	8012858 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8012904:	bf00      	nop
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::stopTransmission(){
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(this->config.hspi);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	4618      	mov	r0, r3
 801291a:	f7f8 fb4f 	bl	800afbc <HAL_SPI_Abort>
}
 801291e:	bf00      	nop
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}

08012926 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8012926:	b580      	push	{r7, lr}
 8012928:	b082      	sub	sp, #8
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	6039      	str	r1, [r7, #0]
        attach(function);
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f873 	bl	8012a1e <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 8012942:	b580      	push	{r7, lr}
 8012944:	b082      	sub	sp, #8
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
        return call();
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f878 	bl	8012a40 <_ZN26core_utils_FunctionPointerIvvE4callEv>
 8012950:	bf00      	nop
    }
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <_ZN19core_utils_CallbackIvtEC1Ev>:
	core_utils_Callback() {
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff fe6a 	bl	801263c <_ZN8CallbackC1Ev>
 8012968:	4a09      	ldr	r2, [pc, #36]	@ (8012990 <_ZN19core_utils_CallbackIvtEC1Ev+0x38>)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	711a      	strb	r2, [r3, #4]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	3308      	adds	r3, #8
 8012978:	2100      	movs	r1, #0
 801297a:	4618      	mov	r0, r3
 801297c:	f000 f885 	bl	8012a8a <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		this->registered = 0;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	711a      	strb	r2, [r3, #4]
	}
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4618      	mov	r0, r3
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}
 8012990:	08024d10 	.word	0x08024d10

08012994 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 8012994:	b5b0      	push	{r4, r5, r7, lr}
 8012996:	b08a      	sub	sp, #40	@ 0x28
 8012998:	af00      	add	r7, sp, #0
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	4639      	mov	r1, r7
 80129a0:	e881 000c 	stmia.w	r1, {r2, r3}
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7ff fe48 	bl	801263c <_ZN8CallbackC1Ev>
 80129ac:	4a12      	ldr	r2, [pc, #72]	@ (80129f8 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE+0x64>)
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	601a      	str	r2, [r3, #0]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2200      	movs	r2, #0
 80129b6:	711a      	strb	r2, [r3, #4]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	3308      	adds	r3, #8
 80129bc:	2100      	movs	r1, #0
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff ffb1 	bl	8012926 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 80129c4:	f107 0010 	add.w	r0, r7, #16
 80129c8:	463b      	mov	r3, r7
 80129ca:	cb0c      	ldmia	r3, {r2, r3}
 80129cc:	68b9      	ldr	r1, [r7, #8]
 80129ce:	f000 f86a 	bl	8012aa6 <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f103 0408 	add.w	r4, r3, #8
 80129d8:	f107 0510 	add.w	r5, r7, #16
 80129dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80129e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80129e4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2201      	movs	r2, #1
 80129ec:	711a      	strb	r2, [r3, #4]
	}
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	4618      	mov	r0, r3
 80129f2:	3728      	adds	r7, #40	@ 0x28
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bdb0      	pop	{r4, r5, r7, pc}
 80129f8:	08024d20 	.word	0x08024d20

080129fc <_ZN19core_utils_CallbackIvtE4callEt>:
	void call(input_type input) {
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	807b      	strh	r3, [r7, #2]
		this->_fp(input);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3308      	adds	r3, #8
 8012a0c:	887a      	ldrh	r2, [r7, #2]
 8012a0e:	4611      	mov	r1, r2
 8012a10:	4618      	mov	r0, r3
 8012a12:	f000 f85b 	bl	8012acc <_ZN26core_utils_FunctionPointerIvtEclEt>
	}
 8012a16:	bf00      	nop
 8012a18:	3708      	adds	r7, #8
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 8012a1e:	b480      	push	{r7}
 8012a20:	b083      	sub	sp, #12
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
 8012a26:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	683a      	ldr	r2, [r7, #0]
 8012a2c:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	615a      	str	r2, [r3, #20]
    }
 8012a34:	bf00      	nop
 8012a36:	370c      	adds	r7, #12
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	695b      	ldr	r3, [r3, #20]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d107      	bne.n	8012a60 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d003      	beq.n	8012a60 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4798      	blx	r3
 8012a5e:	e011      	b.n	8012a84 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	695b      	ldr	r3, [r3, #20]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d00c      	beq.n	8012a82 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d008      	beq.n	8012a82 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	695b      	ldr	r3, [r3, #20]
 8012a74:	687a      	ldr	r2, [r7, #4]
 8012a76:	6810      	ldr	r0, [r2, #0]
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	3204      	adds	r2, #4
 8012a7c:	4611      	mov	r1, r2
 8012a7e:	4798      	blx	r3
 8012a80:	e000      	b.n	8012a84 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return R();
 8012a82:	bf00      	nop
    }
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
 8012a92:	6039      	str	r1, [r7, #0]
        attach(function);
 8012a94:	6839      	ldr	r1, [r7, #0]
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f000 f827 	bl	8012aea <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>
    }
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b084      	sub	sp, #16
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	60f8      	str	r0, [r7, #12]
 8012aae:	60b9      	str	r1, [r7, #8]
 8012ab0:	4639      	mov	r1, r7
 8012ab2:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	cb0c      	ldmia	r3, {r2, r3}
 8012aba:	68b9      	ldr	r1, [r7, #8]
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f000 f825 	bl	8012b0c <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>
    }
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <_ZN26core_utils_FunctionPointerIvtEclEt>:
    R operator ()(A1 a) {
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	807b      	strh	r3, [r7, #2]
        return call(a);
 8012ad8:	887b      	ldrh	r3, [r7, #2]
 8012ada:	4619      	mov	r1, r3
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 f833 	bl	8012b48 <_ZN26core_utils_FunctionPointerIvtE4callEt>
 8012ae2:	bf00      	nop
    }
 8012ae4:	3708      	adds	r7, #8
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>:
    void attach(R (*function)(A1)) {
 8012aea:	b480      	push	{r7}
 8012aec:	b083      	sub	sp, #12
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	683a      	ldr	r2, [r7, #0]
 8012af8:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	615a      	str	r2, [r3, #20]
    }
 8012b00:	bf00      	nop
 8012b02:	370c      	adds	r7, #12
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	4639      	mov	r1, r7
 8012b18:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	68ba      	ldr	r2, [r7, #8]
 8012b20:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	3304      	adds	r3, #4
 8012b26:	461a      	mov	r2, r3
 8012b28:	463b      	mov	r3, r7
 8012b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b2e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	4a03      	ldr	r2, [pc, #12]	@ (8012b44 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE+0x38>)
 8012b36:	615a      	str	r2, [r3, #20]
    }
 8012b38:	bf00      	nop
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	08012b9b 	.word	0x08012b9b

08012b48 <_ZN26core_utils_FunctionPointerIvtE4callEt>:
    R call(A1 a) {
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	460b      	mov	r3, r1
 8012b52:	807b      	strh	r3, [r7, #2]
        if (_membercaller == 0 && _p.function) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	695b      	ldr	r3, [r3, #20]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d109      	bne.n	8012b70 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d005      	beq.n	8012b70 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
           return _p.function(a);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	887a      	ldrh	r2, [r7, #2]
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	4798      	blx	r3
 8012b6e:	e011      	b.n	8012b94 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        } else if (_membercaller && _p.object) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	695b      	ldr	r3, [r3, #20]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00c      	beq.n	8012b92 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d008      	beq.n	8012b92 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
           return _membercaller(_p.object, _member, a);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	695b      	ldr	r3, [r3, #20]
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	6810      	ldr	r0, [r2, #0]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	1d11      	adds	r1, r2, #4
 8012b8c:	887a      	ldrh	r2, [r7, #2]
 8012b8e:	4798      	blx	r3
 8012b90:	e000      	b.n	8012b94 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        return R();
 8012b92:	bf00      	nop
    }
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}

08012b9a <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b084      	sub	sp, #16
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	105b      	asrs	r3, r3, #1
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	1899      	adds	r1, r3, r2
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00b      	beq.n	8012bdc <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x42>
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	105b      	asrs	r3, r3, #1
 8012bca:	461a      	mov	r2, r3
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	4413      	add	r3, r2
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	68ba      	ldr	r2, [r7, #8]
 8012bd4:	6812      	ldr	r2, [r2, #0]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	e001      	b.n	8012be0 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x46>
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4608      	mov	r0, r1
 8012be2:	4798      	blx	r3
 8012be4:	bf00      	nop
    }
 8012be6:	3710      	adds	r7, #16
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <_ZN19core_utils_CallbackIvvEC1Ev>:
	core_utils_Callback() {
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f7ff fd20 	bl	801263c <_ZN8CallbackC1Ev>
 8012bfc:	4a09      	ldr	r2, [pc, #36]	@ (8012c24 <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	601a      	str	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2200      	movs	r2, #0
 8012c06:	711a      	strb	r2, [r3, #4]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	3308      	adds	r3, #8
 8012c0c:	2100      	movs	r1, #0
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff fe89 	bl	8012926 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	711a      	strb	r2, [r3, #4]
	}
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	08024d20 	.word	0x08024d20

08012c28 <_ZN6BufferC1Ev>:
#include "stdint.h"
#include "../core_default_config.h"

class Buffer {
public:
	Buffer() {
 8012c28:	b480      	push	{r7}
 8012c2a:	b083      	sub	sp, #12
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2200      	movs	r2, #0
 8012c34:	809a      	strh	r2, [r3, #4]

	}
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	370c      	adds	r7, #12
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr

08012c44 <_Z3nopv>:
#include "core_utils_functionpointer.h"
#include "core_utils_registermap.h"
#include "elapsedMillis.h"


inline void nop(){
 8012c44:	b480      	push	{r7}
 8012c46:	af00      	add	r7, sp, #0

}
 8012c48:	bf00      	nop
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr
	...

08012c54 <_ZN4UARTC1Ev>:
/* =========================================================================== */

/* =========================================================================== */
class UART {
public:
	UART() {
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	4a04      	ldr	r2, [pc, #16]	@ (8012c70 <_ZN4UARTC1Ev+0x1c>)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	601a      	str	r2, [r3, #0]

	}
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	4618      	mov	r0, r3
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr
 8012c70:	08024dac 	.word	0x08024dac

08012c74 <_ZN4UART10rxFunctionEt>:

	virtual void rxFunction(uint16_t len) {
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	807b      	strh	r3, [r7, #2]

	}
 8012c80:	bf00      	nop
 8012c82:	370c      	adds	r7, #12
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <_ZN4UART9get_huartEv>:

	virtual UART_HandleTypeDef* get_huart() {
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
		return NULL;
 8012c94:	2300      	movs	r3, #0
	}
 8012c96:	4618      	mov	r0, r3
 8012c98:	370c      	adds	r7, #12
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr
	...

08012ca4 <_ZN13UartInterfaceC1Ev>:
extern core_hardware_UART_config std_hardware_uart_config;
extern core_comm_UartInterface_config_t std_uart_config;
/* ---------------------------------------------------------- */
class UartInterface {
public:
	UartInterface() {
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	4a06      	ldr	r2, [pc, #24]	@ (8012cc8 <_ZN13UartInterfaceC1Ev+0x24>)
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	601a      	str	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	711a      	strb	r2, [r3, #4]

	}
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	370c      	adds	r7, #12
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop
 8012cc8:	08024d88 	.word	0x08024d88

08012ccc <_ZN13UartInterface11rx_functionEv>:
	virtual void rx_function() {
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
//		return 0;
	}
 8012cd4:	bf00      	nop
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr

08012ce0 <_ZN13UartInterface9setTaskIDEP19tskTaskControlBlock>:
	virtual void setTaskID(TaskHandle_t task) {
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]

	}
 8012cea:	bf00      	nop
 8012cec:	370c      	adds	r7, #12
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr

08012cf6 <_ZN13UartInterface9getTaskIDEv>:
	virtual TaskHandle_t getTaskID() {
 8012cf6:	b480      	push	{r7}
 8012cf8:	b083      	sub	sp, #12
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
		return NULL;
 8012cfe:	2300      	movs	r3, #0
	}
 8012d00:	4618      	mov	r0, r3
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <_Z20twipr_uart_comm_taskPv>:
static core_comm_SerialMessage_memory<128> outgoing_msg;

bool rx_available = false;

/* =========================================================================== */
void twipr_uart_comm_task(void *argument) {
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]

	TWIPR_UART_Communication *comm = (TWIPR_UART_Communication*) argument;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	60fb      	str	r3, [r7, #12]
	comm->task = xTaskGetCurrentTaskHandle();
 8012d18:	f7fe f95c 	bl	8010fd4 <xTaskGetCurrentTaskHandle>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	601a      	str	r2, [r3, #0]
	comm->taskFunction();
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f000 f93e 	bl	8012fa4 <_ZN24TWIPR_UART_Communication12taskFunctionEv>
}
 8012d28:	bf00      	nop
 8012d2a:	3710      	adds	r7, #16
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <_ZN27twipr_uart_comm_callbacks_tC1Ev>:
	TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
	TWIPR_UART_COMM_CALLBACK_MSG_READ,
	TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
} twipr_uart_comm_callback_id_t;

typedef struct twipr_uart_comm_callbacks_t {
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f000 fa80 	bl	8013240 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	3320      	adds	r3, #32
 8012d44:	4618      	mov	r0, r3
 8012d46:	f000 fa7b 	bl	8013240 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	3340      	adds	r3, #64	@ 0x40
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f000 fa76 	bl	8013240 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3360      	adds	r3, #96	@ 0x60
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f000 fa71 	bl	8013240 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <_ZN24TWIPR_UART_CommunicationC1Ev>:

/* =========================================================================== */
TWIPR_UART_Communication::TWIPR_UART_Communication() {
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2200      	movs	r2, #0
 8012d74:	605a      	str	r2, [r3, #4]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	330c      	adds	r3, #12
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f000 fa22 	bl	80131c4 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>
 8012d80:	687a      	ldr	r2, [r7, #4]
 8012d82:	f241 339c 	movw	r3, #5020	@ 0x139c
 8012d86:	4413      	add	r3, r2
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7ff ffd1 	bl	8012d30 <_ZN27twipr_uart_comm_callbacks_tC1Ev>

}
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	4618      	mov	r0, r3
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>:

/* =========================================================================== */
void TWIPR_UART_Communication::init(twipr_uart_comm_config_t config) {
 8012d98:	b590      	push	{r4, r7, lr}
 8012d9a:	b08d      	sub	sp, #52	@ 0x34
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]

	// Initialize the UART interface to the Raspberry Pi
	this->_uart_cm4.init(config.huart,
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f103 000c 	add.w	r0, r3, #12
 8012da8:	6839      	ldr	r1, [r7, #0]
 8012daa:	4b0f      	ldr	r3, [pc, #60]	@ (8012de8 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x50>)
 8012dac:	cb0c      	ldmia	r3, {r2, r3}
 8012dae:	f000 fa65 	bl	801327c <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>
			twipr_communication_uart_cm4_interface_config);

	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f103 040c 	add.w	r4, r3, #12
			core_utils_Callback<void, void>(this,
 8012db8:	4b0c      	ldr	r3, [pc, #48]	@ (8012dec <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x54>)
 8012dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dc0:	f107 0008 	add.w	r0, r7, #8
 8012dc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012dc8:	cb0c      	ldmia	r3, {r2, r3}
 8012dca:	6879      	ldr	r1, [r7, #4]
 8012dcc:	f000 fa8e 	bl	80132ec <_ZN19core_utils_CallbackIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>
	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 8012dd0:	f107 0308 	add.w	r3, r7, #8
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f000 fadb 	bl	8013394 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_UART_Communication::_rx_callback));
}
 8012dde:	bf00      	nop
 8012de0:	3734      	adds	r7, #52	@ 0x34
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd90      	pop	{r4, r7, pc}
 8012de6:	bf00      	nop
 8012de8:	24000014 	.word	0x24000014
 8012dec:	080130e9 	.word	0x080130e9

08012df0 <_ZN24TWIPR_UART_Communication5startEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::start() {
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]

	// Start the UART interfaces
	this->_uart_cm4.start();
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	330c      	adds	r3, #12
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f000 faec 	bl	80133da <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>

	// Start the task
	this->_thread = osThreadNew(twipr_uart_comm_task, this, &task_attributes);
 8012e02:	4a06      	ldr	r2, [pc, #24]	@ (8012e1c <_ZN24TWIPR_UART_Communication5startEv+0x2c>)
 8012e04:	6879      	ldr	r1, [r7, #4]
 8012e06:	4806      	ldr	r0, [pc, #24]	@ (8012e20 <_ZN24TWIPR_UART_Communication5startEv+0x30>)
 8012e08:	f7fb fe29 	bl	800ea5e <osThreadNew>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	609a      	str	r2, [r3, #8]
}
 8012e12:	bf00      	nop
 8012e14:	3708      	adds	r7, #8
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	08024d38 	.word	0x08024d38
 8012e20:	08012d0d 	.word	0x08012d0d

08012e24 <_ZN24TWIPR_UART_Communication5resetEv>:
/* =========================================================================== */
void TWIPR_UART_Communication::reset(){
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
	this->_uart_cm4.reset();
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	330c      	adds	r3, #12
 8012e30:	4618      	mov	r0, r3
 8012e32:	f000 fae3 	bl	80133fc <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>
}
 8012e36:	bf00      	nop
 8012e38:	3708      	adds	r7, #8
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
	...

08012e40 <_ZN24TWIPR_UART_Communication4sendEhhthPhh>:
/* =========================================================================== */
void TWIPR_UART_Communication::send(uint8_t cmd, uint8_t module,
		uint16_t address, uint8_t flag, uint8_t *data, uint8_t len) {
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	4608      	mov	r0, r1
 8012e4a:	4611      	mov	r1, r2
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	4603      	mov	r3, r0
 8012e50:	70fb      	strb	r3, [r7, #3]
 8012e52:	460b      	mov	r3, r1
 8012e54:	70bb      	strb	r3, [r7, #2]
 8012e56:	4613      	mov	r3, r2
 8012e58:	803b      	strh	r3, [r7, #0]

	outgoing_msg.cmd = cmd;
 8012e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012e5c:	78fb      	ldrb	r3, [r7, #3]
 8012e5e:	7013      	strb	r3, [r2, #0]
	outgoing_msg.address_1 = module;
 8012e60:	4a18      	ldr	r2, [pc, #96]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012e62:	78bb      	ldrb	r3, [r7, #2]
 8012e64:	7053      	strb	r3, [r2, #1]
	outgoing_msg.address_2 = address >> 8;
 8012e66:	883b      	ldrh	r3, [r7, #0]
 8012e68:	0a1b      	lsrs	r3, r3, #8
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	b2da      	uxtb	r2, r3
 8012e6e:	4b15      	ldr	r3, [pc, #84]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012e70:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = address;
 8012e72:	883b      	ldrh	r3, [r7, #0]
 8012e74:	b2da      	uxtb	r2, r3
 8012e76:	4b13      	ldr	r3, [pc, #76]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012e78:	70da      	strb	r2, [r3, #3]
	outgoing_msg.flag = flag;
 8012e7a:	4a12      	ldr	r2, [pc, #72]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012e7c:	7e3b      	ldrb	r3, [r7, #24]
 8012e7e:	7113      	strb	r3, [r2, #4]

	for (int i = 0; i < len; i++) {
 8012e80:	2300      	movs	r3, #0
 8012e82:	60fb      	str	r3, [r7, #12]
 8012e84:	e00b      	b.n	8012e9e <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x5e>
		outgoing_msg.data_ptr[i] = data[i];
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	69fa      	ldr	r2, [r7, #28]
 8012e8a:	441a      	add	r2, r3
 8012e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012e8e:	6899      	ldr	r1, [r3, #8]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	440b      	add	r3, r1
 8012e94:	7812      	ldrb	r2, [r2, #0]
 8012e96:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	60fb      	str	r3, [r7, #12]
 8012e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ea2:	68fa      	ldr	r2, [r7, #12]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	dbee      	blt.n	8012e86 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x46>
	}
	outgoing_msg.len = len;
 8012ea8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	4b05      	ldr	r3, [pc, #20]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012eb0:	819a      	strh	r2, [r3, #12]
	this->send(&outgoing_msg);
 8012eb2:	4904      	ldr	r1, [pc, #16]	@ (8012ec4 <_ZN24TWIPR_UART_Communication4sendEhhthPhh+0x84>)
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 f807 	bl	8012ec8 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 8012eba:	bf00      	nop
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	2401ef94 	.word	0x2401ef94

08012ec8 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>:

/* =========================================================================== */
void TWIPR_UART_Communication::send(core_comm_SerialMessage *msg) {
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	6039      	str	r1, [r7, #0]

	// Check the message
	this->_uart_cm4.send(msg);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	330c      	adds	r3, #12
 8012ed6:	6839      	ldr	r1, [r7, #0]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f000 fa9d 	bl	8013418 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>
}
 8012ede:	bf00      	nop
 8012ee0:	3708      	adds	r7, #8
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>:
class core_utils_Callback<void, input_type> : public Callback {
 8012ee6:	b5b0      	push	{r4, r5, r7, lr}
 8012ee8:	b082      	sub	sp, #8
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
 8012eee:	6039      	str	r1, [r7, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	683a      	ldr	r2, [r7, #0]
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7ff fc64 	bl	80127c4 <_ZN8CallbackaSERKS_>
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	791a      	ldrb	r2, [r3, #4]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	711a      	strb	r2, [r3, #4]
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	f102 0408 	add.w	r4, r2, #8
 8012f0c:	f103 0508 	add.w	r5, r3, #8
 8012f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012f18:	e884 0003 	stmia.w	r4, {r0, r1}
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3708      	adds	r7, #8
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012f28 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>:

/* =========================================================================== */
void TWIPR_UART_Communication::registerCallback(
		twipr_uart_comm_callback_id_t callback_id,
		core_utils_Callback<void, core_comm_SerialMessage*> callback) {
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	460b      	mov	r3, r1
 8012f32:	607a      	str	r2, [r7, #4]
 8012f34:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8012f36:	7afb      	ldrb	r3, [r7, #11]
 8012f38:	2b03      	cmp	r3, #3
 8012f3a:	d82f      	bhi.n	8012f9c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
 8012f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8012f44 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x1c>)
 8012f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f42:	bf00      	nop
 8012f44:	08012f55 	.word	0x08012f55
 8012f48:	08012f67 	.word	0x08012f67
 8012f4c:	08012f79 	.word	0x08012f79
 8012f50:	08012f8b 	.word	0x08012f8b
	case TWIPR_UART_COMM_CALLBACK_RX_MSG: {
		this->_callbacks.rx_msg = callback;
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	f241 339c 	movw	r3, #5020	@ 0x139c
 8012f5a:	4413      	add	r3, r2
 8012f5c:	6879      	ldr	r1, [r7, #4]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7ff ffc1 	bl	8012ee6 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012f64:	e01a      	b.n	8012f9c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_WRITE: {
		this->_callbacks.write_msg = callback;
 8012f66:	68fa      	ldr	r2, [r7, #12]
 8012f68:	f241 33bc 	movw	r3, #5052	@ 0x13bc
 8012f6c:	4413      	add	r3, r2
 8012f6e:	6879      	ldr	r1, [r7, #4]
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff ffb8 	bl	8012ee6 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012f76:	e011      	b.n	8012f9c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_READ: {
		this->_callbacks.read_msg = callback;
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	f241 33dc 	movw	r3, #5084	@ 0x13dc
 8012f7e:	4413      	add	r3, r2
 8012f80:	6879      	ldr	r1, [r7, #4]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff ffaf 	bl	8012ee6 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012f88:	e008      	b.n	8012f9c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_FUNC: {
		this->_callbacks.func_msg = callback;
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	f241 33fc 	movw	r3, #5116	@ 0x13fc
 8012f90:	4413      	add	r3, r2
 8012f92:	6879      	ldr	r1, [r7, #4]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7ff ffa6 	bl	8012ee6 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012f9a:	bf00      	nop
	}
	}

}
 8012f9c:	bf00      	nop
 8012f9e:	3710      	adds	r7, #16
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <_ZN24TWIPR_UART_Communication12taskFunctionEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::taskFunction() {
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
	//	uint32_t kernel_ticks = 0;
	while (true) {
		if (rx_available){
 8012fac:	4b0d      	ldr	r3, [pc, #52]	@ (8012fe4 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x40>)
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d012      	beq.n	8012fda <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x36>
			rx_available = false;
 8012fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8012fe4 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x40>)
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	701a      	strb	r2, [r3, #0]
			if (this->_uart_cm4.rx_queue.available()) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	3318      	adds	r3, #24
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f000 fa47 	bl	8013452 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	bf14      	ite	ne
 8012fca:	2301      	movne	r3, #1
 8012fcc:	2300      	moveq	r3, #0
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d002      	beq.n	8012fda <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x36>
						this->_handleIncomingMessages();
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 f807 	bl	8012fe8 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>
			}
		}
		osDelay(1);
 8012fda:	2001      	movs	r0, #1
 8012fdc:	f7fb fdd1 	bl	800eb82 <osDelay>
		if (rx_available){
 8012fe0:	e7e4      	b.n	8012fac <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>
 8012fe2:	bf00      	nop
 8012fe4:	2401f024 	.word	0x2401f024

08012fe8 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>:

	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_handleIncomingMessages() {
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
	// Loop through all the messages in the rx queue
	while (this->_uart_cm4.rx_queue.available()) {
 8012ff0:	e065      	b.n	80130be <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
		this->_uart_cm4.rx_queue.read(&incoming_msg);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	3318      	adds	r3, #24
 8012ff6:	493b      	ldr	r1, [pc, #236]	@ (80130e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 fa49 	bl	8013490 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>
		// TODO

		// Handle the different addresses

		// Handle the different commands
		switch (incoming_msg.cmd) {
 8012ffe:	4b39      	ldr	r3, [pc, #228]	@ (80130e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	3b01      	subs	r3, #1
 8013004:	2b07      	cmp	r3, #7
 8013006:	d859      	bhi.n	80130bc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd4>
 8013008:	a201      	add	r2, pc, #4	@ (adr r2, 8013010 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x28>)
 801300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801300e:	bf00      	nop
 8013010:	08013031 	.word	0x08013031
 8013014:	08013051 	.word	0x08013051
 8013018:	080130bd 	.word	0x080130bd
 801301c:	080130bd 	.word	0x080130bd
 8013020:	08013071 	.word	0x08013071
 8013024:	08013077 	.word	0x08013077
 8013028:	0801307d 	.word	0x0801307d
 801302c:	0801309d 	.word	0x0801309d
		case MSG_COMMAND_WRITE: {
//			this->_handleMessage_write(&incoming_msg);
			if (this->_callbacks.write_msg.registered) {
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013036:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d033      	beq.n	80130a6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
				this->_callbacks.write_msg.call(&incoming_msg);
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	f241 33bc 	movw	r3, #5052	@ 0x13bc
 8013044:	4413      	add	r3, r2
 8013046:	4927      	ldr	r1, [pc, #156]	@ (80130e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8013048:	4618      	mov	r0, r3
 801304a:	f000 faae 	bl	80135aa <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
			break;
 801304e:	e02a      	b.n	80130a6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
		}
		case MSG_COMMAND_READ: {
			if (this->_callbacks.read_msg.registered) {
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013056:	f893 33e0 	ldrb.w	r3, [r3, #992]	@ 0x3e0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d025      	beq.n	80130aa <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
				this->_callbacks.read_msg.call(&incoming_msg);
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	f241 33dc 	movw	r3, #5084	@ 0x13dc
 8013064:	4413      	add	r3, r2
 8013066:	491f      	ldr	r1, [pc, #124]	@ (80130e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8013068:	4618      	mov	r0, r3
 801306a:	f000 fa9e 	bl	80135aa <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_read(&incoming_msg);
			break;
 801306e:	e01c      	b.n	80130aa <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
		}
		case MSG_COMMAND_EVENT: {
			nop();
 8013070:	f7ff fde8 	bl	8012c44 <_Z3nopv>
			break;
 8013074:	e01c      	b.n	80130b0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_MSG: {
			nop();
 8013076:	f7ff fde5 	bl	8012c44 <_Z3nopv>
			break;
 801307a:	e019      	b.n	80130b0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_FCT: {
			if (this->_callbacks.func_msg.registered) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013082:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8013086:	2b00      	cmp	r3, #0
 8013088:	d011      	beq.n	80130ae <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
				this->_callbacks.func_msg.call(&incoming_msg);
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	f241 33fc 	movw	r3, #5116	@ 0x13fc
 8013090:	4413      	add	r3, r2
 8013092:	4914      	ldr	r1, [pc, #80]	@ (80130e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8013094:	4618      	mov	r0, r3
 8013096:	f000 fa88 	bl	80135aa <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_function(&incoming_msg);
			break;
 801309a:	e008      	b.n	80130ae <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
		}
		case MSG_COMMAND_ECHO: {
			this->send(&incoming_msg);
 801309c:	4911      	ldr	r1, [pc, #68]	@ (80130e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f7ff ff12 	bl	8012ec8 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
			break;
 80130a4:	e004      	b.n	80130b0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 80130a6:	bf00      	nop
 80130a8:	e002      	b.n	80130b0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 80130aa:	bf00      	nop
 80130ac:	e000      	b.n	80130b0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 80130ae:	bf00      	nop
		default: {
			continue;
			break;
		}
		}
		this->last_received_message_tick = osKernelGetTickCount();
 80130b0:	f7fb fcc0 	bl	800ea34 <osKernelGetTickCount>
 80130b4:	4602      	mov	r2, r0
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	605a      	str	r2, [r3, #4]
 80130ba:	e000      	b.n	80130be <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
			continue;
 80130bc:	bf00      	nop
	while (this->_uart_cm4.rx_queue.available()) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	3318      	adds	r3, #24
 80130c2:	4618      	mov	r0, r3
 80130c4:	f000 f9c5 	bl	8013452 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	bf14      	ite	ne
 80130ce:	2301      	movne	r3, #1
 80130d0:	2300      	moveq	r3, #0
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d18c      	bne.n	8012ff2 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xa>
	}
}
 80130d8:	bf00      	nop
 80130da:	bf00      	nop
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	2401ef04 	.word	0x2401ef04

080130e8 <_ZN24TWIPR_UART_Communication12_rx_callbackEv>:
//		this->send(&outgoing_msg);
//	}
//}

/* =========================================================================== */
void TWIPR_UART_Communication::_rx_callback() {
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
	rx_available = true;
 80130f0:	4b04      	ldr	r3, [pc, #16]	@ (8013104 <_ZN24TWIPR_UART_Communication12_rx_callbackEv+0x1c>)
 80130f2:	2201      	movs	r2, #1
 80130f4:	701a      	strb	r2, [r3, #0]
//	if (this->task != NULL) {
//		xTaskNotifyGive(this->task);
//	}
}
 80130f6:	bf00      	nop
 80130f8:	370c      	adds	r7, #12
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr
 8013102:	bf00      	nop
 8013104:	2401f024 	.word	0x2401f024

08013108 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>:
};

template <int size>
class core_comm_SerialMessage_memory: public core_comm_SerialMessage {
public:
	core_comm_SerialMessage_memory(){
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
		this->data_ptr = data;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f103 0210 	add.w	r2, r3, #16
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	609a      	str	r2, [r3, #8]
	}
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4618      	mov	r0, r3
 801311e:	370c      	adds	r7, #12
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr

08013128 <_ZN25core_hardware_UART_configC1Ev>:
typedef struct core_hardware_UART_config {
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2202      	movs	r2, #2
 8013134:	701a      	strb	r2, [r3, #0]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2201      	movs	r2, #1
 801313a:	705a      	strb	r2, [r3, #1]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2201      	movs	r2, #1
 8013140:	709a      	strb	r2, [r3, #2]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2201      	movs	r2, #1
 8013146:	70da      	strb	r2, [r3, #3]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	4618      	mov	r0, r3
 801314c:	370c      	adds	r7, #12
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr

08013156 <_ZN32core_comm_UartInterface_config_tC1Ev>:
typedef struct core_comm_UartInterface_config_t {
 8013156:	b580      	push	{r7, lr}
 8013158:	b082      	sub	sp, #8
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff ffe1 	bl	8013128 <_ZN25core_hardware_UART_configC1Ev>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>:
#define CORE_COMMUNICATION_SERIAL_SOCKET_CORE_COMM_MESSAGEQUEUE_H_

#include <communication/uart_interface/core_comm_SerialProtocol.h>

template<int num_messages, int buf_size>
class core_comm_MessageQueue {
 8013170:	b5b0      	push	{r4, r5, r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2409      	movs	r4, #9
 801317c:	461d      	mov	r5, r3
 801317e:	e004      	b.n	801318a <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x1a>
 8013180:	4628      	mov	r0, r5
 8013182:	f7ff ffc1 	bl	8013108 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
 8013186:	3c01      	subs	r4, #1
 8013188:	3590      	adds	r5, #144	@ 0x90
 801318a:	2c00      	cmp	r4, #0
 801318c:	daf8      	bge.n	8013180 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x10>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	220a      	movs	r2, #10
 8013192:	f883 25a3 	strb.w	r2, [r3, #1443]	@ 0x5a3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4618      	mov	r0, r3
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bdb0      	pop	{r4, r5, r7, pc}

080131a0 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>:
typedef struct core_comm_UartInterface_callbacks_t {
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fd1e 	bl	8012bec <_ZN19core_utils_CallbackIvvEC1Ev>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	3320      	adds	r3, #32
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 f843 	bl	8013240 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4618      	mov	r0, r3
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>:
	core_comm_UartInterface_config_t config;
	core_comm_UartInterface_status_t status;
	core_comm_MessageQueue<uart_buffers, uart_buffer_size> rx_queue;

	/* ------------------------------------------------------------- */
	core_comm_UartInterface() {
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ff fd68 	bl	8012ca4 <_ZN13UartInterfaceC1Ev>
 80131d4:	4a19      	ldr	r2, [pc, #100]	@ (801323c <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev+0x78>)
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	601a      	str	r2, [r3, #0]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	3305      	adds	r3, #5
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff ffb9 	bl	8013156 <_ZN32core_comm_UartInterface_config_tC1Ev>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	330c      	adds	r3, #12
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7ff ffc1 	bl	8013170 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80131f4:	4618      	mov	r0, r3
 80131f6:	f000 f9f5 	bl	80135e4 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	f241 3344 	movw	r3, #4932	@ 0x1344
 8013200:	4413      	add	r3, r2
 8013202:	4618      	mov	r0, r3
 8013204:	f7ff ffcc 	bl	80131a0 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801320e:	461a      	mov	r2, r3
 8013210:	2300      	movs	r3, #0
 8013212:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801321c:	461a      	mov	r2, r3
 801321e:	2300      	movs	r3, #0
 8013220:	f8c2 3388 	str.w	r3, [r2, #904]	@ 0x388
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_NONE;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2200      	movs	r2, #0
 8013228:	72da      	strb	r2, [r3, #11]
		this->exit = 0;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2200      	movs	r2, #0
 801322e:	711a      	strb	r2, [r3, #4]
	}
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	08024d64 	.word	0x08024d64

08013240 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>:
	core_utils_Callback() {
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff f9f6 	bl	801263c <_ZN8CallbackC1Ev>
 8013250:	4a09      	ldr	r2, [pc, #36]	@ (8013278 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev+0x38>)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	601a      	str	r2, [r3, #0]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	711a      	strb	r2, [r3, #4]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	3308      	adds	r3, #8
 8013260:	2100      	movs	r1, #0
 8013262:	4618      	mov	r0, r3
 8013264:	f000 f9f6 	bl	8013654 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		this->registered = 0;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2200      	movs	r2, #0
 801326c:	711a      	strb	r2, [r3, #4]
	}
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4618      	mov	r0, r3
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	08024d9c 	.word	0x08024d9c

0801327c <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>:
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, std_uart_config);
	}
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart,
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b08f      	sub	sp, #60	@ 0x3c
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	60b9      	str	r1, [r7, #8]
 8013286:	4639      	mov	r1, r7
 8013288:	e881 000c 	stmia.w	r1, {r2, r3}
			core_comm_UartInterface_config_t config) {

		this->config = config;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	3305      	adds	r3, #5
 8013290:	463a      	mov	r2, r7
 8013292:	6810      	ldr	r0, [r2, #0]
 8013294:	6018      	str	r0, [r3, #0]
 8013296:	8892      	ldrh	r2, [r2, #4]
 8013298:	809a      	strh	r2, [r3, #4]
		this->_uart.init(huart, this->config.uart);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f503 60b8 	add.w	r0, r3, #1472	@ 0x5c0
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80132a6:	4613      	mov	r3, r2
 80132a8:	461a      	mov	r2, r3
 80132aa:	68b9      	ldr	r1, [r7, #8]
 80132ac:	f000 f9e0 	bl	8013670 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>

		// Add the rx callback to the UARTs
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f503 64b8 	add.w	r4, r3, #1472	@ 0x5c0
				core_utils_Callback<void, void>(this,
 80132b6:	2300      	movs	r3, #0
 80132b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80132ba:	2301      	movs	r3, #1
 80132bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80132be:	f107 0010 	add.w	r0, r7, #16
 80132c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80132c6:	cb0c      	ldmia	r3, {r2, r3}
 80132c8:	68f9      	ldr	r1, [r7, #12]
 80132ca:	f000 fb2b 	bl	8013924 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 80132ce:	f107 0310 	add.w	r3, r7, #16
 80132d2:	461a      	mov	r2, r3
 80132d4:	2100      	movs	r1, #0
 80132d6:	4620      	mov	r0, r4
 80132d8:	f000 fb58 	bl	801398c <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>
						&core_comm_UartInterface<uart_buffers, uart_buffer_size>::rx_function));

		this->status = CORE_COMM_SERIAL_SOCKET_STATE_INIT;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2201      	movs	r2, #1
 80132e0:	72da      	strb	r2, [r3, #11]
	}
 80132e2:	bf00      	nop
 80132e4:	373c      	adds	r7, #60	@ 0x3c
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd90      	pop	{r4, r7, pc}
	...

080132ec <_ZN19core_utils_CallbackIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 80132ec:	b5b0      	push	{r4, r5, r7, lr}
 80132ee:	b08a      	sub	sp, #40	@ 0x28
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	4639      	mov	r1, r7
 80132f8:	e881 000c 	stmia.w	r1, {r2, r3}
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7ff f99c 	bl	801263c <_ZN8CallbackC1Ev>
 8013304:	4a12      	ldr	r2, [pc, #72]	@ (8013350 <_ZN19core_utils_CallbackIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE+0x64>)
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	601a      	str	r2, [r3, #0]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2200      	movs	r2, #0
 801330e:	711a      	strb	r2, [r3, #4]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	3308      	adds	r3, #8
 8013314:	2100      	movs	r1, #0
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff fb05 	bl	8012926 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 801331c:	f107 0010 	add.w	r0, r7, #16
 8013320:	463b      	mov	r3, r7
 8013322:	cb0c      	ldmia	r3, {r2, r3}
 8013324:	68b9      	ldr	r1, [r7, #8]
 8013326:	f000 fb46 	bl	80139b6 <_ZN26core_utils_FunctionPointerIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f103 0408 	add.w	r4, r3, #8
 8013330:	f107 0510 	add.w	r5, r7, #16
 8013334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013338:	e895 0003 	ldmia.w	r5, {r0, r1}
 801333c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2201      	movs	r2, #1
 8013344:	711a      	strb	r2, [r3, #4]
	}
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	4618      	mov	r0, r3
 801334a:	3728      	adds	r7, #40	@ 0x28
 801334c:	46bd      	mov	sp, r7
 801334e:	bdb0      	pop	{r4, r5, r7, pc}
 8013350:	08024d20 	.word	0x08024d20

08013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>:
class core_utils_Callback<void, void> : public Callback {
 8013354:	b5b0      	push	{r4, r5, r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6039      	str	r1, [r7, #0]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	683a      	ldr	r2, [r7, #0]
 8013362:	4611      	mov	r1, r2
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff fa2d 	bl	80127c4 <_ZN8CallbackaSERKS_>
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	791a      	ldrb	r2, [r3, #4]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	711a      	strb	r2, [r3, #4]
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	f102 0408 	add.w	r4, r2, #8
 801337a:	f103 0508 	add.w	r5, r3, #8
 801337e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013382:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013386:	e884 0003 	stmia.w	r4, {r0, r1}
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4618      	mov	r0, r3
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bdb0      	pop	{r4, r5, r7, pc}

08013394 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE>:
	/* ------------------------------------------------------------- */
	core_comm_SerialMessage* getMessagePointer() {
		return this->rx_queue.readPointer();
	}
	/* ------------------------------------------------------------- */
	void registerCallback(core_comm_UartInterface_callback_id_t callback_id,
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	460b      	mov	r3, r1
 801339e:	607a      	str	r2, [r7, #4]
 80133a0:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		switch (callback_id) {
 80133a2:	7afb      	ldrb	r3, [r7, #11]
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	d013      	beq.n	80133d0 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3c>
 80133a8:	2b02      	cmp	r3, #2
 80133aa:	dc12      	bgt.n	80133d2 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d002      	beq.n	80133b6 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x22>
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d009      	beq.n	80133c8 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x34>
		}
		case CORE_COMM_SERIAL_SOCKET_CB_ERROR: {
			break;
		}
		}
	}
 80133b4:	e00d      	b.n	80133d2 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
			this->_callbacks.rx = callback;
 80133b6:	68fa      	ldr	r2, [r7, #12]
 80133b8:	f241 3344 	movw	r3, #4932	@ 0x1344
 80133bc:	4413      	add	r3, r2
 80133be:	6879      	ldr	r1, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff ffc7 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
			break;
 80133c6:	e004      	b.n	80133d2 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
			core_ErrorHandler(0x00);
 80133c8:	2000      	movs	r0, #0
 80133ca:	f00d f90e 	bl	80205ea <_Z17core_ErrorHandleri>
			break;
 80133ce:	e000      	b.n	80133d2 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
			break;
 80133d0:	bf00      	nop
	}
 80133d2:	bf00      	nop
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>:
	void start() {
 80133da:	b580      	push	{r7, lr}
 80133dc:	b082      	sub	sp, #8
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
		this->_uart.start();
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80133e8:	4618      	mov	r0, r3
 80133ea:	f000 faf7 	bl	80139dc <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_RUN;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2202      	movs	r2, #2
 80133f2:	72da      	strb	r2, [r3, #11]
	}
 80133f4:	bf00      	nop
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>:
	void reset(){
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
		this->_uart.reset();
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 801340a:	4618      	mov	r0, r3
 801340c:	f000 fb03 	bl	8013a16 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>
	}
 8013410:	bf00      	nop
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}

08013418 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>:
	void send(core_comm_SerialMessage *message) {
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
		uint8_t len = message->encode(this->_tx_buf);
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 8013428:	4413      	add	r3, r2
 801342a:	4619      	mov	r1, r3
 801342c:	6838      	ldr	r0, [r7, #0]
 801342e:	f00a f808 	bl	801d442 <_ZN23core_comm_SerialMessage6encodeEPh>
 8013432:	4603      	mov	r3, r0
 8013434:	73fb      	strb	r3, [r7, #15]
		this->send(this->_tx_buf, len);
 8013436:	687a      	ldr	r2, [r7, #4]
 8013438:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 801343c:	4413      	add	r3, r2
 801343e:	7bfa      	ldrb	r2, [r7, #15]
 8013440:	b292      	uxth	r2, r2
 8013442:	4619      	mov	r1, r3
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f000 faf9 	bl	8013a3c <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>
	}
 801344a:	bf00      	nop
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>:
		core_comm_SerialMessage *msg = &this->messages[this->idx_read];
		this->inc_read();
		return msg;
	}

	uint8_t available() {
 8013452:	b480      	push	{r7}
 8013454:	b085      	sub	sp, #20
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
		int8_t available_msg = this->idx_write - this->idx_read;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f893 25a1 	ldrb.w	r2, [r3, #1441]	@ 0x5a1
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8013466:	1ad3      	subs	r3, r2, r3
 8013468:	b2db      	uxtb	r3, r3
 801346a:	73fb      	strb	r3, [r7, #15]
		if (available_msg < 0) {
 801346c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013470:	2b00      	cmp	r3, #0
 8013472:	da06      	bge.n	8013482 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv+0x30>
			available_msg += this->len;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f893 25a3 	ldrb.w	r2, [r3, #1443]	@ 0x5a3
 801347a:	7bfb      	ldrb	r3, [r7, #15]
 801347c:	4413      	add	r3, r2
 801347e:	b2db      	uxtb	r3, r3
 8013480:	73fb      	strb	r3, [r7, #15]
		}
		return available_msg;
 8013482:	7bfb      	ldrb	r3, [r7, #15]
	}
 8013484:	4618      	mov	r0, r3
 8013486:	3714      	adds	r7, #20
 8013488:	46bd      	mov	sp, r7
 801348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348e:	4770      	bx	lr

08013490 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>:
	uint8_t read(core_comm_SerialMessage *message) {
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7ff ffd9 	bl	8013452 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	bf0c      	ite	eq
 80134a6:	2301      	moveq	r3, #1
 80134a8:	2300      	movne	r3, #0
 80134aa:	b2db      	uxtb	r3, r3
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d001      	beq.n	80134b4 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x24>
			return 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	e076      	b.n	80135a2 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x112>
		message->address_1 = this->messages[this->idx_read].address_1;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80134ba:	4619      	mov	r1, r3
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	460b      	mov	r3, r1
 80134c0:	00db      	lsls	r3, r3, #3
 80134c2:	440b      	add	r3, r1
 80134c4:	011b      	lsls	r3, r3, #4
 80134c6:	4413      	add	r3, r2
 80134c8:	3301      	adds	r3, #1
 80134ca:	781a      	ldrb	r2, [r3, #0]
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	705a      	strb	r2, [r3, #1]
		message->address_2 = this->messages[this->idx_read].address_2;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80134d6:	4619      	mov	r1, r3
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	460b      	mov	r3, r1
 80134dc:	00db      	lsls	r3, r3, #3
 80134de:	440b      	add	r3, r1
 80134e0:	011b      	lsls	r3, r3, #4
 80134e2:	4413      	add	r3, r2
 80134e4:	3302      	adds	r3, #2
 80134e6:	781a      	ldrb	r2, [r3, #0]
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	709a      	strb	r2, [r3, #2]
		message->address_3 = this->messages[this->idx_read].address_3;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80134f2:	4619      	mov	r1, r3
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	460b      	mov	r3, r1
 80134f8:	00db      	lsls	r3, r3, #3
 80134fa:	440b      	add	r3, r1
 80134fc:	011b      	lsls	r3, r3, #4
 80134fe:	4413      	add	r3, r2
 8013500:	3303      	adds	r3, #3
 8013502:	781a      	ldrb	r2, [r3, #0]
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	70da      	strb	r2, [r3, #3]
		message->flag = this->messages[this->idx_read].flag;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 801350e:	4619      	mov	r1, r3
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	460b      	mov	r3, r1
 8013514:	00db      	lsls	r3, r3, #3
 8013516:	440b      	add	r3, r1
 8013518:	011b      	lsls	r3, r3, #4
 801351a:	4413      	add	r3, r2
 801351c:	3304      	adds	r3, #4
 801351e:	781a      	ldrb	r2, [r3, #0]
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	711a      	strb	r2, [r3, #4]
		message->cmd = this->messages[this->idx_read].cmd;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 801352a:	4619      	mov	r1, r3
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	460b      	mov	r3, r1
 8013530:	00db      	lsls	r3, r3, #3
 8013532:	440b      	add	r3, r1
 8013534:	011b      	lsls	r3, r3, #4
 8013536:	4413      	add	r3, r2
 8013538:	781a      	ldrb	r2, [r3, #0]
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	701a      	strb	r2, [r3, #0]
		message->len = this->messages[this->idx_read].len;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8013544:	4619      	mov	r1, r3
 8013546:	687a      	ldr	r2, [r7, #4]
 8013548:	460b      	mov	r3, r1
 801354a:	00db      	lsls	r3, r3, #3
 801354c:	440b      	add	r3, r1
 801354e:	011b      	lsls	r3, r3, #4
 8013550:	4413      	add	r3, r2
 8013552:	330c      	adds	r3, #12
 8013554:	881a      	ldrh	r2, [r3, #0]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	819a      	strh	r2, [r3, #12]
		for (int i = 0; i<message->len; i++){
 801355a:	2300      	movs	r3, #0
 801355c:	60fb      	str	r3, [r7, #12]
 801355e:	e016      	b.n	801358e <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xfe>
			message->data_ptr[i] = this->messages[this->idx_read].data_ptr[i];
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8013566:	4619      	mov	r1, r3
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	460b      	mov	r3, r1
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	440b      	add	r3, r1
 8013570:	011b      	lsls	r3, r3, #4
 8013572:	4413      	add	r3, r2
 8013574:	3308      	adds	r3, #8
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	441a      	add	r2, r3
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	6899      	ldr	r1, [r3, #8]
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	440b      	add	r3, r1
 8013584:	7812      	ldrb	r2, [r2, #0]
 8013586:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<message->len; i++){
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	3301      	adds	r3, #1
 801358c:	60fb      	str	r3, [r7, #12]
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	899b      	ldrh	r3, [r3, #12]
 8013592:	461a      	mov	r2, r3
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	4293      	cmp	r3, r2
 8013598:	dbe2      	blt.n	8013560 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xd0>
		this->inc_read();
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 fa68 	bl	8013a70 <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>
		return 1;
 80135a0:	2301      	movs	r3, #1
	}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3710      	adds	r7, #16
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>:
	void call(input_type input) {
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b082      	sub	sp, #8
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
 80135b2:	6039      	str	r1, [r7, #0]
		this->_fp(input);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	3308      	adds	r3, #8
 80135b8:	6839      	ldr	r1, [r7, #0]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f000 fa79 	bl	8013ab2 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>
	}
 80135c0:	bf00      	nop
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <_ZN30core_hardware_UART_callbacks_tC1Ev>:
typedef struct core_hardware_UART_callbacks_t {
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff fb0a 	bl	8012bec <_ZN19core_utils_CallbackIvvEC1Ev>
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4618      	mov	r0, r3
 80135dc:	3708      	adds	r7, #8
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
	...

080135e4 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>:

template<int num_buffers, int size_buffers>
class core_hardware_UART: public UART {
public:

	core_hardware_UART() {
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7ff fb30 	bl	8012c54 <_ZN4UARTC1Ev>
 80135f4:	4a16      	ldr	r2, [pc, #88]	@ (8013650 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev+0x6c>)
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2200      	movs	r2, #0
 80135fe:	711a      	strb	r2, [r3, #4]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	3305      	adds	r3, #5
 8013604:	4618      	mov	r0, r3
 8013606:	f7ff fd8f 	bl	8013128 <_ZN25core_hardware_UART_configC1Ev>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	3310      	adds	r3, #16
 801360e:	4618      	mov	r0, r3
 8013610:	f000 fa5c 	bl	8013acc <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 801361a:	4618      	mov	r0, r3
 801361c:	f000 fa56 	bl	8013acc <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff ffce 	bl	80135c8 <_ZN30core_hardware_UART_callbacks_tC1Ev>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f603 33f4 	addw	r3, r3, #3060	@ 0xbf4
 8013632:	4618      	mov	r0, r3
 8013634:	f000 fa6e 	bl	8013b14 <_ZN17core_utils_BufferILi128EEC1Ev>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f603 437c 	addw	r3, r3, #3196	@ 0xc7c
 801363e:	4618      	mov	r0, r3
 8013640:	f000 fa68 	bl	8013b14 <_ZN17core_utils_BufferILi128EEC1Ev>

	}
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	4618      	mov	r0, r3
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	08024d78 	.word	0x08024d78

08013654 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
        attach(function);
 801365e:	6839      	ldr	r1, [r7, #0]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fa6f 	bl	8013b44 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>
    }
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	4618      	mov	r0, r3
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>:
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, core_hardware_uart_std_config);
	}

	/* ------------------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart, core_hardware_UART_config config) {
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]

		this->huart = huart;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	60da      	str	r2, [r3, #12]

		this->config = config;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	3305      	adds	r3, #5
 8013686:	1d3a      	adds	r2, r7, #4
 8013688:	6810      	ldr	r0, [r2, #0]
 801368a:	6018      	str	r0, [r3, #0]
		if (this->huart == NULL) {
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	68db      	ldr	r3, [r3, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d102      	bne.n	801369a <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x2a>
			core_ErrorHandler(1);
 8013694:	2001      	movs	r0, #1
 8013696:	f00c ffa8 	bl	80205ea <_Z17core_ErrorHandleri>
		}
		HAL_UART_RegisterRxEventCallback(this->huart, uartRxCmpltDMA_callback);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	495a      	ldr	r1, [pc, #360]	@ (8013808 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x198>)
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7f8 ff5d 	bl	800c560 <HAL_UART_RegisterRxEventCallback>
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	68db      	ldr	r3, [r3, #12]
 80136aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	4a56      	ldr	r2, [pc, #344]	@ (801380c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x19c>)
 80136b2:	4293      	cmp	r3, r2
 80136b4:	d077      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	4a53      	ldr	r2, [pc, #332]	@ (8013810 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a0>)
 80136c2:	4293      	cmp	r3, r2
 80136c4:	d06f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4a50      	ldr	r2, [pc, #320]	@ (8013814 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a4>)
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d067      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	68db      	ldr	r3, [r3, #12]
 80136da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a4d      	ldr	r2, [pc, #308]	@ (8013818 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a8>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d05f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	68db      	ldr	r3, [r3, #12]
 80136ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	4a4a      	ldr	r2, [pc, #296]	@ (801381c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1ac>)
 80136f2:	4293      	cmp	r3, r2
 80136f4:	d057      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	4a47      	ldr	r2, [pc, #284]	@ (8013820 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b0>)
 8013702:	4293      	cmp	r3, r2
 8013704:	d04f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	4a44      	ldr	r2, [pc, #272]	@ (8013824 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b4>)
 8013712:	4293      	cmp	r3, r2
 8013714:	d047      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	68db      	ldr	r3, [r3, #12]
 801371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4a41      	ldr	r2, [pc, #260]	@ (8013828 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b8>)
 8013722:	4293      	cmp	r3, r2
 8013724:	d03f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	68db      	ldr	r3, [r3, #12]
 801372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	4a3e      	ldr	r2, [pc, #248]	@ (801382c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1bc>)
 8013732:	4293      	cmp	r3, r2
 8013734:	d037      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	4a3b      	ldr	r2, [pc, #236]	@ (8013830 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c0>)
 8013742:	4293      	cmp	r3, r2
 8013744:	d02f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	4a38      	ldr	r2, [pc, #224]	@ (8013834 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c4>)
 8013752:	4293      	cmp	r3, r2
 8013754:	d027      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	68db      	ldr	r3, [r3, #12]
 801375a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4a35      	ldr	r2, [pc, #212]	@ (8013838 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d01f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4a32      	ldr	r2, [pc, #200]	@ (801383c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1cc>)
 8013772:	4293      	cmp	r3, r2
 8013774:	d017      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4a2f      	ldr	r2, [pc, #188]	@ (8013840 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d0>)
 8013782:	4293      	cmp	r3, r2
 8013784:	d00f      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4a2c      	ldr	r2, [pc, #176]	@ (8013844 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d4>)
 8013792:	4293      	cmp	r3, r2
 8013794:	d007      	beq.n	80137a6 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4a29      	ldr	r2, [pc, #164]	@ (8013848 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d8>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d10e      	bne.n	80137c4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x154>
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	f022 0208 	bic.w	r2, r2, #8
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	e00d      	b.n	80137e0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x170>
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	68db      	ldr	r3, [r3, #12]
 80137c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	681a      	ldr	r2, [r3, #0]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f022 0204 	bic.w	r2, r2, #4
 80137de:	601a      	str	r2, [r3, #0]

		this->state = CORE_HARDWARE_UART_STATE_INIT;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2201      	movs	r2, #1
 80137e4:	711a      	strb	r2, [r3, #4]

		uarts[num_uarts] = this;
 80137e6:	4b19      	ldr	r3, [pc, #100]	@ (801384c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	4619      	mov	r1, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	4a18      	ldr	r2, [pc, #96]	@ (8013850 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e0>)
 80137f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_uarts++;
 80137f4:	4b15      	ldr	r3, [pc, #84]	@ (801384c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	3301      	adds	r3, #1
 80137fa:	b2da      	uxtb	r2, r3
 80137fc:	4b13      	ldr	r3, [pc, #76]	@ (801384c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80137fe:	701a      	strb	r2, [r3, #0]
	}
 8013800:	bf00      	nop
 8013802:	3710      	adds	r7, #16
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	0801f6a1 	.word	0x0801f6a1
 801380c:	40020010 	.word	0x40020010
 8013810:	40020028 	.word	0x40020028
 8013814:	40020040 	.word	0x40020040
 8013818:	40020058 	.word	0x40020058
 801381c:	40020070 	.word	0x40020070
 8013820:	40020088 	.word	0x40020088
 8013824:	400200a0 	.word	0x400200a0
 8013828:	400200b8 	.word	0x400200b8
 801382c:	40020410 	.word	0x40020410
 8013830:	40020428 	.word	0x40020428
 8013834:	40020440 	.word	0x40020440
 8013838:	40020458 	.word	0x40020458
 801383c:	40020470 	.word	0x40020470
 8013840:	40020488 	.word	0x40020488
 8013844:	400204a0 	.word	0x400204a0
 8013848:	400204b8 	.word	0x400204b8
 801384c:	240286f0 	.word	0x240286f0
 8013850:	240286dc 	.word	0x240286dc

08013854 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv>:
	TaskHandle_t getTaskID() {
		return this->_task_id;
	}

	/* ------------------------------------------------------------- */
	void rx_function() {
 8013854:	b580      	push	{r7, lr}
 8013856:	b086      	sub	sp, #24
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
		uint8_t num_messages = 0;
 801385c:	2300      	movs	r3, #0
 801385e:	75fb      	strb	r3, [r7, #23]

		while (this->_uart.available() > 0) {
 8013860:	e04d      	b.n	80138fe <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
			Buffer *buffer = this->_uart.rx_queue.read();
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8013868:	4618      	mov	r0, r3
 801386a:	f000 f98a 	bl	8013b82 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>
 801386e:	6138      	str	r0, [r7, #16]

			if (this->config.use_protocol) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	7a5b      	ldrb	r3, [r3, #9]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d03a      	beq.n	80138ee <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9a>
				// Decode the buffer into the rx message
				uint8_t correct_message = this->_rx_msg.decode(buffer);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 801387e:	6939      	ldr	r1, [r7, #16]
 8013880:	4618      	mov	r0, r3
 8013882:	f009 feb3 	bl	801d5ec <_ZN23core_comm_SerialMessage6decodeEP6Buffer>
 8013886:	4603      	mov	r3, r0
 8013888:	73fb      	strb	r3, [r7, #15]

				// If the buffer did not contain a correct message do not proceed with the message handling
				if (!correct_message) {
 801388a:	7bfb      	ldrb	r3, [r7, #15]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d035      	beq.n	80138fc <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa8>
					continue;
				}

				if (this->config.use_queue) {
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	7a9b      	ldrb	r3, [r3, #10]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d009      	beq.n	80138ac <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x58>
					this->rx_queue.write(&_rx_msg);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f103 020c 	add.w	r2, r3, #12
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 80138a4:	4619      	mov	r1, r3
 80138a6:	4610      	mov	r0, r2
 80138a8:	f000 f990 	bl	8013bcc <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>
				}

				if (this->_callbacks.rx.registered) {
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138b2:	f893 3348 	ldrb.w	r3, [r3, #840]	@ 0x348
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d006      	beq.n	80138c8 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x74>
					this->_callbacks.rx.call();
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	f241 3344 	movw	r3, #4932	@ 0x1344
 80138c0:	4413      	add	r3, r2
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fe fedf 	bl	8012686 <_ZN19core_utils_CallbackIvvE4callEv>
				}
				if (this->_callbacks.rx_msg.registered) {
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138ce:	f893 3368 	ldrb.w	r3, [r3, #872]	@ 0x368
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00e      	beq.n	80138f4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa0>
					this->_callbacks.rx_msg.call(&_rx_msg);
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	f241 3364 	movw	r3, #4964	@ 0x1364
 80138dc:	4413      	add	r3, r2
 80138de:	687a      	ldr	r2, [r7, #4]
 80138e0:	f502 62b6 	add.w	r2, r2, #1456	@ 0x5b0
 80138e4:	4611      	mov	r1, r2
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7ff fe5f 	bl	80135aa <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
 80138ec:	e002      	b.n	80138f4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa0>
				}
			} else { // no protocol used
				while (1) {
					nop();
 80138ee:	f7ff f9a9 	bl	8012c44 <_Z3nopv>
 80138f2:	e7fc      	b.n	80138ee <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9a>
				}
			}

			num_messages++;
 80138f4:	7dfb      	ldrb	r3, [r7, #23]
 80138f6:	3301      	adds	r3, #1
 80138f8:	75fb      	strb	r3, [r7, #23]
 80138fa:	e000      	b.n	80138fe <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
					continue;
 80138fc:	bf00      	nop
		while (this->_uart.available() > 0) {
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8013904:	4618      	mov	r0, r3
 8013906:	f000 f92e 	bl	8013b66 <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>
 801390a:	4603      	mov	r3, r0
 801390c:	2b00      	cmp	r3, #0
 801390e:	bfcc      	ite	gt
 8013910:	2301      	movgt	r3, #1
 8013912:	2300      	movle	r3, #0
 8013914:	b2db      	uxtb	r3, r3
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1a3      	bne.n	8013862 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xe>

		}
//		return num_messages;
	}
 801391a:	bf00      	nop
 801391c:	bf00      	nop
 801391e:	3718      	adds	r7, #24
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 8013924:	b5b0      	push	{r4, r5, r7, lr}
 8013926:	b08a      	sub	sp, #40	@ 0x28
 8013928:	af00      	add	r7, sp, #0
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	4639      	mov	r1, r7
 8013930:	e881 000c 	stmia.w	r1, {r2, r3}
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	4618      	mov	r0, r3
 8013938:	f7fe fe80 	bl	801263c <_ZN8CallbackC1Ev>
 801393c:	4a12      	ldr	r2, [pc, #72]	@ (8013988 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE+0x64>)
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	601a      	str	r2, [r3, #0]
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2200      	movs	r2, #0
 8013946:	711a      	strb	r2, [r3, #4]
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	3308      	adds	r3, #8
 801394c:	2100      	movs	r1, #0
 801394e:	4618      	mov	r0, r3
 8013950:	f7fe ffe9 	bl	8012926 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 8013954:	f107 0010 	add.w	r0, r7, #16
 8013958:	463b      	mov	r3, r7
 801395a:	cb0c      	ldmia	r3, {r2, r3}
 801395c:	68b9      	ldr	r1, [r7, #8]
 801395e:	f000 f950 	bl	8013c02 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	f103 0408 	add.w	r4, r3, #8
 8013968:	f107 0510 	add.w	r5, r7, #16
 801396c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801396e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013970:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013974:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2201      	movs	r2, #1
 801397c:	711a      	strb	r2, [r3, #4]
	}
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	4618      	mov	r0, r3
 8013982:	3728      	adds	r7, #40	@ 0x28
 8013984:	46bd      	mov	sp, r7
 8013986:	bdb0      	pop	{r4, r5, r7, pc}
 8013988:	08024d20 	.word	0x08024d20

0801398c <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>:

		this->startReceiveDMA();
	}

	/* ------------------------------------------------------------------------- */
	void registerCallback(core_hardware_UART_CB_ID callback_id,
 801398c:	b580      	push	{r7, lr}
 801398e:	b084      	sub	sp, #16
 8013990:	af00      	add	r7, sp, #0
 8013992:	60f8      	str	r0, [r7, #12]
 8013994:	460b      	mov	r3, r1
 8013996:	607a      	str	r2, [r7, #4]
 8013998:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		if (callback_id == CORE_HARDWARE_UART_CB_RX) {
 801399a:	7afb      	ldrb	r3, [r7, #11]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d106      	bne.n	80139ae <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE+0x22>
			this->_callbacks.rx = callback;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 80139a6:	6879      	ldr	r1, [r7, #4]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7ff fcd3 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		}
	}
 80139ae:	bf00      	nop
 80139b0:	3710      	adds	r7, #16
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}

080139b6 <_ZN26core_utils_FunctionPointerIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 80139b6:	b580      	push	{r7, lr}
 80139b8:	b084      	sub	sp, #16
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	60f8      	str	r0, [r7, #12]
 80139be:	60b9      	str	r1, [r7, #8]
 80139c0:	4639      	mov	r1, r7
 80139c2:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80139c6:	463b      	mov	r3, r7
 80139c8:	cb0c      	ldmia	r3, {r2, r3}
 80139ca:	68b9      	ldr	r1, [r7, #8]
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f000 f92b 	bl	8013c28 <_ZN26core_utils_FunctionPointerIvvE6attachI24TWIPR_UART_CommunicationEEvPT_MS3_FvvE>
    }
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	4618      	mov	r0, r3
 80139d6:	3710      	adds	r7, #16
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <_ZN18core_hardware_UARTILi10ELi128EE5startEv>:
	void start() {
 80139dc:	b580      	push	{r7, lr}
 80139de:	b082      	sub	sp, #8
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
		if (this->state != CORE_HARDWARE_UART_STATE_INIT) {
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	791b      	ldrb	r3, [r3, #4]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d002      	beq.n	80139f2 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x16>
			core_ErrorHandler(2);
 80139ec:	2002      	movs	r0, #2
 80139ee:	f00c fdfc 	bl	80205ea <_Z17core_ErrorHandleri>
		if (this->config.mode == CORE_HARDWARE_UART_MODE_DMA) {
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	795b      	ldrb	r3, [r3, #5]
 80139f6:	2b02      	cmp	r3, #2
 80139f8:	d103      	bne.n	8013a02 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x26>
			this->startReceiveDMA();
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f000 f932 	bl	8013c64 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 8013a00:	e002      	b.n	8013a08 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x2c>
			core_ErrorHandler(3);
 8013a02:	2003      	movs	r0, #3
 8013a04:	f00c fdf1 	bl	80205ea <_Z17core_ErrorHandleri>
		this->state = CORE_HARDWARE_UART_STATE_RUN;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2202      	movs	r2, #2
 8013a0c:	711a      	strb	r2, [r3, #4]
	}
 8013a0e:	bf00      	nop
 8013a10:	3708      	adds	r7, #8
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}

08013a16 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>:
	void reset() {
 8013a16:	b580      	push	{r7, lr}
 8013a18:	b082      	sub	sp, #8
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
		HAL_UART_Abort(this->huart);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	68db      	ldr	r3, [r3, #12]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7f8 fe4c 	bl	800c6c0 <HAL_UART_Abort>
		this->state = CORE_HARDWARE_UART_STATE_INIT;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	711a      	strb	r2, [r3, #4]
		this->start();
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7ff ffd4 	bl	80139dc <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
	}
 8013a34:	bf00      	nop
 8013a36:	3708      	adds	r7, #8
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>:
	void send(uint8_t *buffer, uint16_t len) {
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	4613      	mov	r3, r2
 8013a48:	80fb      	strh	r3, [r7, #6]
		if (this->status != CORE_COMM_SERIAL_SOCKET_STATE_RUN) {
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	7adb      	ldrb	r3, [r3, #11]
 8013a4e:	2b02      	cmp	r3, #2
 8013a50:	d002      	beq.n	8013a58 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(1);
 8013a52:	2001      	movs	r0, #1
 8013a54:	f00c fdc9 	bl	80205ea <_Z17core_ErrorHandleri>
		this->_uart.send(buffer, len);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8013a5e:	88fa      	ldrh	r2, [r7, #6]
 8013a60:	68b9      	ldr	r1, [r7, #8]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 f9d6 	bl	8013e14 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>
	}
 8013a68:	bf00      	nop
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8013a7e:	3301      	adds	r3, #1
 8013a80:	b2da      	uxtb	r2, r3
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f883 25a0 	strb.w	r2, [r3, #1440]	@ 0x5a0
		if (this->idx_read == this->len) {
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f893 25a0 	ldrb.w	r2, [r3, #1440]	@ 0x5a0
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f893 35a3 	ldrb.w	r3, [r3, #1443]	@ 0x5a3
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d103      	bne.n	8013aa0 <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f883 25a0 	strb.w	r2, [r3, #1440]	@ 0x5a0
		return this->idx_read;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
	}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	370c      	adds	r7, #12
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr

08013ab2 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>:
    R operator ()(A1 a) {
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b082      	sub	sp, #8
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
 8013aba:	6039      	str	r1, [r7, #0]
        return call(a);
 8013abc:	6839      	ldr	r1, [r7, #0]
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f000 f9f8 	bl	8013eb4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>
 8013ac4:	bf00      	nop
    }
 8013ac6:	3708      	adds	r7, #8
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>:
};

template<int num, int size>
class core_utils_BufferQueue {
public:
	core_utils_BufferQueue() {
 8013acc:	b5b0      	push	{r4, r5, r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	3304      	adds	r3, #4
 8013ad8:	2409      	movs	r4, #9
 8013ada:	461d      	mov	r5, r3
 8013adc:	e004      	b.n	8013ae8 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x1c>
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f000 f818 	bl	8013b14 <_ZN17core_utils_BufferILi128EEC1Ev>
 8013ae4:	3c01      	subs	r4, #1
 8013ae6:	3588      	adds	r5, #136	@ 0x88
 8013ae8:	2c00      	cmp	r4, #0
 8013aea:	daf8      	bge.n	8013ade <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x12>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	220a      	movs	r2, #10
 8013af0:	f883 2554 	strb.w	r2, [r3, #1364]	@ 0x554
		this->idx_read = 0;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2200      	movs	r2, #0
 8013af8:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556
		this->idx_write = 0;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2200      	movs	r2, #0
 8013b00:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		this->overflow = 0;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2200      	movs	r2, #0
 8013b08:	701a      	strb	r2, [r3, #0]
	}
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bdb0      	pop	{r4, r5, r7, pc}

08013b14 <_ZN17core_utils_BufferILi128EEC1Ev>:
	core_utils_Buffer<size>(){
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7ff f882 	bl	8012c28 <_ZN6BufferC1Ev>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	3306      	adds	r3, #6
 8013b28:	2280      	movs	r2, #128	@ 0x80
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f00e fff8 	bl	8022b22 <memset>
		this->data_ptr = this->buffer;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	1d9a      	adds	r2, r3, #6
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	601a      	str	r2, [r3, #0]
	}
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>:
    void attach(R (*function)(A1)) {
 8013b44:	b480      	push	{r7}
 8013b46:	b083      	sub	sp, #12
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2200      	movs	r2, #0
 8013b58:	615a      	str	r2, [r3, #20]
    }
 8013b5a:	bf00      	nop
 8013b5c:	370c      	adds	r7, #12
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b64:	4770      	bx	lr

08013b66 <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>:
	int8_t available() {
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b082      	sub	sp, #8
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
		return this->rx_queue.available();
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	3310      	adds	r3, #16
 8013b72:	4618      	mov	r0, r3
 8013b74:	f000 f9c5 	bl	8013f02 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013b78:	4603      	mov	r3, r0
	}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>:

		uint8_t len = this->buffers[this->idx_read].len;
		this->inc_read();
		return len;
	}
	Buffer* read() {
 8013b82:	b580      	push	{r7, lr}
 8013b84:	b084      	sub	sp, #16
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
		if (this->available() < 1) {
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 f9b9 	bl	8013f02 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013b90:	4603      	mov	r3, r0
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	bfd4      	ite	le
 8013b96:	2301      	movle	r3, #1
 8013b98:	2300      	movgt	r3, #0
 8013b9a:	b2db      	uxtb	r3, r3
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d001      	beq.n	8013ba4 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x22>
			return 0;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	e00f      	b.n	8013bc4 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x42>
		}

		Buffer *buffer = &this->buffers[this->idx_read];
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8013baa:	461a      	mov	r2, r3
 8013bac:	4613      	mov	r3, r2
 8013bae:	011b      	lsls	r3, r3, #4
 8013bb0:	4413      	add	r3, r2
 8013bb2:	00db      	lsls	r3, r3, #3
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	3304      	adds	r3, #4
 8013bba:	60fb      	str	r3, [r7, #12]
		this->inc_read();
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f000 f9c7 	bl	8013f50 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return buffer;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
	}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>:
	uint8_t write(core_comm_SerialMessage *message) {
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	6039      	str	r1, [r7, #0]
		message->copyTo(&this->messages[this->idx_write]);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
 8013bdc:	461a      	mov	r2, r3
 8013bde:	4613      	mov	r3, r2
 8013be0:	00db      	lsls	r3, r3, #3
 8013be2:	4413      	add	r3, r2
 8013be4:	011b      	lsls	r3, r3, #4
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	4413      	add	r3, r2
 8013bea:	4619      	mov	r1, r3
 8013bec:	6838      	ldr	r0, [r7, #0]
 8013bee:	f009 fbf2 	bl	801d3d6 <_ZN23core_comm_SerialMessage6copyToEPS_>
		return this->inc_write();
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f9cb 	bl	8013f8e <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>
 8013bf8:	4603      	mov	r3, r0
	}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3708      	adds	r7, #8
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}

08013c02 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8013c02:	b580      	push	{r7, lr}
 8013c04:	b084      	sub	sp, #16
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	60f8      	str	r0, [r7, #12]
 8013c0a:	60b9      	str	r1, [r7, #8]
 8013c0c:	4639      	mov	r1, r7
 8013c0e:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8013c12:	463b      	mov	r3, r7
 8013c14:	cb0c      	ldmia	r3, {r2, r3}
 8013c16:	68b9      	ldr	r1, [r7, #8]
 8013c18:	68f8      	ldr	r0, [r7, #12]
 8013c1a:	f000 f9d9 	bl	8013fd0 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>
    }
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	4618      	mov	r0, r3
 8013c22:	3710      	adds	r7, #16
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <_ZN26core_utils_FunctionPointerIvvE6attachI24TWIPR_UART_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8013c28:	b480      	push	{r7}
 8013c2a:	b085      	sub	sp, #20
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	60f8      	str	r0, [r7, #12]
 8013c30:	60b9      	str	r1, [r7, #8]
 8013c32:	4639      	mov	r1, r7
 8013c34:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	3304      	adds	r3, #4
 8013c42:	461a      	mov	r2, r3
 8013c44:	463b      	mov	r3, r7
 8013c46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c4a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	4a03      	ldr	r2, [pc, #12]	@ (8013c60 <_ZN26core_utils_FunctionPointerIvvE6attachI24TWIPR_UART_CommunicationEEvPT_MS3_FvvE+0x38>)
 8013c52:	615a      	str	r2, [r3, #20]
    }
 8013c54:	bf00      	nop
 8013c56:	3714      	adds	r7, #20
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	0801400d 	.word	0x0801400d

08013c64 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>:
	void startReceiveDMA() {
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
		if (this->config.queues) {
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	7a1b      	ldrb	r3, [r3, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 80a7 	beq.w	8013dc4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x160>
			HAL_UARTEx_ReceiveToIdle_DMA(this->huart,
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	68d8      	ldr	r0, [r3, #12]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f603 33fa 	addw	r3, r3, #3066	@ 0xbfa
 8013c80:	2280      	movs	r2, #128	@ 0x80
 8013c82:	4619      	mov	r1, r3
 8013c84:	f7fa fd84 	bl	800e790 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4a50      	ldr	r2, [pc, #320]	@ (8013dd4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x170>)
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d077      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8013dd8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x174>)
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	d06f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8013ddc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x178>)
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d067      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	68db      	ldr	r3, [r3, #12]
 8013cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	4a47      	ldr	r2, [pc, #284]	@ (8013de0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x17c>)
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d05f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4a44      	ldr	r2, [pc, #272]	@ (8013de4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x180>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d057      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	4a41      	ldr	r2, [pc, #260]	@ (8013de8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x184>)
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d04f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8013dec <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x188>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d047      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4a3b      	ldr	r2, [pc, #236]	@ (8013df0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x18c>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d03f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4a38      	ldr	r2, [pc, #224]	@ (8013df4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x190>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d037      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4a35      	ldr	r2, [pc, #212]	@ (8013df8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x194>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d02f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	4a32      	ldr	r2, [pc, #200]	@ (8013dfc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x198>)
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d027      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4a2f      	ldr	r2, [pc, #188]	@ (8013e00 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x19c>)
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d01f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	4a2c      	ldr	r2, [pc, #176]	@ (8013e04 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a0>)
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d017      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a29      	ldr	r2, [pc, #164]	@ (8013e08 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a4>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d00f      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	4a26      	ldr	r2, [pc, #152]	@ (8013e0c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a8>)
 8013d74:	4293      	cmp	r3, r2
 8013d76:	d007      	beq.n	8013d88 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	4a23      	ldr	r2, [pc, #140]	@ (8013e10 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1ac>)
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d10e      	bne.n	8013da6 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x142>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f022 0208 	bic.w	r2, r2, #8
 8013da2:	601a      	str	r2, [r3, #0]
	}
 8013da4:	e011      	b.n	8013dca <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	68db      	ldr	r3, [r3, #12]
 8013db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f022 0204 	bic.w	r2, r2, #4
 8013dc0:	601a      	str	r2, [r3, #0]
	}
 8013dc2:	e002      	b.n	8013dca <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
 8013dc4:	2005      	movs	r0, #5
 8013dc6:	f00c fc10 	bl	80205ea <_Z17core_ErrorHandleri>
	}
 8013dca:	bf00      	nop
 8013dcc:	3708      	adds	r7, #8
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	40020010 	.word	0x40020010
 8013dd8:	40020028 	.word	0x40020028
 8013ddc:	40020040 	.word	0x40020040
 8013de0:	40020058 	.word	0x40020058
 8013de4:	40020070 	.word	0x40020070
 8013de8:	40020088 	.word	0x40020088
 8013dec:	400200a0 	.word	0x400200a0
 8013df0:	400200b8 	.word	0x400200b8
 8013df4:	40020410 	.word	0x40020410
 8013df8:	40020428 	.word	0x40020428
 8013dfc:	40020440 	.word	0x40020440
 8013e00:	40020458 	.word	0x40020458
 8013e04:	40020470 	.word	0x40020470
 8013e08:	40020488 	.word	0x40020488
 8013e0c:	400204a0 	.word	0x400204a0
 8013e10:	400204b8 	.word	0x400204b8

08013e14 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>:
	void send(uint8_t *data, uint16_t len) {
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b086      	sub	sp, #24
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	4613      	mov	r3, r2
 8013e20:	80fb      	strh	r3, [r7, #6]
		if (this->state != CORE_HARDWARE_UART_STATE_RUN) {
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	791b      	ldrb	r3, [r3, #4]
 8013e26:	2b02      	cmp	r3, #2
 8013e28:	d002      	beq.n	8013e30 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(4);
 8013e2a:	2004      	movs	r0, #4
 8013e2c:	f00c fbdd 	bl	80205ea <_Z17core_ErrorHandleri>
		if (this->config.mode != CORE_HARDWARE_UART_MODE_DMA
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	795b      	ldrb	r3, [r3, #5]
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d006      	beq.n	8013e46 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
				&& this->config.queues != 1) {
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	7a1b      	ldrb	r3, [r3, #8]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d002      	beq.n	8013e46 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
			core_ErrorHandler(5);
 8013e40:	2005      	movs	r0, #5
 8013e42:	f00c fbd2 	bl	80205ea <_Z17core_ErrorHandleri>
		if (this->config.cobs_encode_tx) {
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	79db      	ldrb	r3, [r3, #7]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d022      	beq.n	8013e94 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x80>
			uint8_t len_encode = cobsEncode(data, len, this->_tx_buffer.buffer);
 8013e4e:	88fb      	ldrh	r3, [r7, #6]
 8013e50:	b2d9      	uxtb	r1, r3
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f603 4382 	addw	r3, r3, #3202	@ 0xc82
 8013e58:	461a      	mov	r2, r3
 8013e5a:	68b8      	ldr	r0, [r7, #8]
 8013e5c:	f00c fa8d 	bl	802037a <_Z10cobsEncodePhhS_>
 8013e60:	4603      	mov	r3, r0
 8013e62:	75fb      	strb	r3, [r7, #23]
			this->_tx_buffer.buffer[len_encode] = 0x00;
 8013e64:	7dfb      	ldrb	r3, [r7, #23]
 8013e66:	68fa      	ldr	r2, [r7, #12]
 8013e68:	4413      	add	r3, r2
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	f883 2c82 	strb.w	r2, [r3, #3202]	@ 0xc82
			this->_tx_buffer.len = len_encode + 1;
 8013e70:	7dfb      	ldrb	r3, [r7, #23]
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	3301      	adds	r3, #1
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f8a3 2c80 	strh.w	r2, [r3, #3200]	@ 0xc80
			this->tx_queue.write(&this->_tx_buffer);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f503 62ad 	add.w	r2, r3, #1384	@ 0x568
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f603 437c 	addw	r3, r3, #3196	@ 0xc7c
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	4610      	mov	r0, r2
 8013e8e:	f000 f8e6 	bl	801405e <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
 8013e92:	e008      	b.n	8013ea6 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x92>
			this->tx_queue.write(data, (uint8_t) len);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8013e9a:	88fa      	ldrh	r2, [r7, #6]
 8013e9c:	b2d2      	uxtb	r2, r2
 8013e9e:	68b9      	ldr	r1, [r7, #8]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f000 f918 	bl	80140d6 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>
		this->flushTx();
 8013ea6:	68f8      	ldr	r0, [r7, #12]
 8013ea8:	f000 f94e 	bl	8014148 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>
	}
 8013eac:	bf00      	nop
 8013eae:	3718      	adds	r7, #24
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>:
    R call(A1 a) {
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	695b      	ldr	r3, [r3, #20]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d108      	bne.n	8013ed8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d004      	beq.n	8013ed8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
           return _p.function(a);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	6838      	ldr	r0, [r7, #0]
 8013ed4:	4798      	blx	r3
 8013ed6:	e011      	b.n	8013efc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        } else if (_membercaller && _p.object) {
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d00c      	beq.n	8013efa <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d008      	beq.n	8013efa <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
           return _membercaller(_p.object, _member, a);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	695b      	ldr	r3, [r3, #20]
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	6810      	ldr	r0, [r2, #0]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	1d11      	adds	r1, r2, #4
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	4798      	blx	r3
 8013ef8:	e000      	b.n	8013efc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        return R();
 8013efa:	bf00      	nop
    }
 8013efc:	3708      	adds	r7, #8
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>:

	int8_t available() {
 8013f02:	b480      	push	{r7}
 8013f04:	b085      	sub	sp, #20
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
		if (this->overflow) {
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d002      	beq.n	8013f18 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x16>
			return -1;
 8013f12:	f04f 33ff 	mov.w	r3, #4294967295
 8013f16:	e015      	b.n	8013f44 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x42>
		}
		int8_t available = this->idx_write - this->idx_read;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	b2db      	uxtb	r3, r3
 8013f28:	73fb      	strb	r3, [r7, #15]
		if (available < 0) {
 8013f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	da06      	bge.n	8013f40 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x3e>
			available += this->num_buffers;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f893 2554 	ldrb.w	r2, [r3, #1364]	@ 0x554
 8013f38:	7bfb      	ldrb	r3, [r7, #15]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	73fb      	strb	r3, [r7, #15]
		}
		return available;
 8013f40:	f997 300f 	ldrsb.w	r3, [r7, #15]

	}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3714      	adds	r7, #20
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>:
			return 0;
		} else {
			return 1;
		}
	}
	uint8_t inc_read() {
 8013f50:	b480      	push	{r7}
 8013f52:	b083      	sub	sp, #12
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8013f5e:	3301      	adds	r3, #1
 8013f60:	b2da      	uxtb	r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556

		if (this->idx_read == this->num_buffers) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f893 2556 	ldrb.w	r2, [r3, #1366]	@ 0x556
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d103      	bne.n	8013f80 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556
		}
		return 1;
 8013f80:	2301      	movs	r3, #1
	}
 8013f82:	4618      	mov	r0, r3
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	b2da      	uxtb	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f883 25a1 	strb.w	r2, [r3, #1441]	@ 0x5a1
		if (this->idx_write == this->len) {
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f893 25a1 	ldrb.w	r2, [r3, #1441]	@ 0x5a1
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f893 35a3 	ldrb.w	r3, [r3, #1443]	@ 0x5a3
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d103      	bne.n	8013fbe <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	f883 25a1 	strb.w	r2, [r3, #1441]	@ 0x5a1
		return this->idx_write;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
	}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	370c      	adds	r7, #12
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr

08013fd0 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8013fd0:	b480      	push	{r7}
 8013fd2:	b085      	sub	sp, #20
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	4639      	mov	r1, r7
 8013fdc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	68ba      	ldr	r2, [r7, #8]
 8013fe4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	3304      	adds	r3, #4
 8013fea:	461a      	mov	r2, r3
 8013fec:	463b      	mov	r3, r7
 8013fee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ff2:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	4a03      	ldr	r2, [pc, #12]	@ (8014008 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE+0x38>)
 8013ffa:	615a      	str	r2, [r3, #20]
    }
 8013ffc:	bf00      	nop
 8013ffe:	3714      	adds	r7, #20
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	08014177 	.word	0x08014177

0801400c <_ZN26core_utils_FunctionPointerIvvE12membercallerI24TWIPR_UART_CommunicationEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	105b      	asrs	r3, r3, #1
 8014024:	461a      	mov	r2, r3
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	1899      	adds	r1, r3, r2
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	f003 0301 	and.w	r3, r3, #1
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00b      	beq.n	801404e <_ZN26core_utils_FunctionPointerIvvE12membercallerI24TWIPR_UART_CommunicationEEvPvPj+0x42>
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	105b      	asrs	r3, r3, #1
 801403c:	461a      	mov	r2, r3
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	4413      	add	r3, r2
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	68ba      	ldr	r2, [r7, #8]
 8014046:	6812      	ldr	r2, [r2, #0]
 8014048:	4413      	add	r3, r2
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	e001      	b.n	8014052 <_ZN26core_utils_FunctionPointerIvvE12membercallerI24TWIPR_UART_CommunicationEEvPvPj+0x46>
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4608      	mov	r0, r1
 8014054:	4798      	blx	r3
 8014056:	bf00      	nop
    }
 8014058:	3710      	adds	r7, #16
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>:
	uint8_t write(Buffer *buffer) {
 801405e:	b580      	push	{r7, lr}
 8014060:	b084      	sub	sp, #16
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
 8014066:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < buffer->len; i++) {
 8014068:	2300      	movs	r3, #0
 801406a:	60fb      	str	r3, [r7, #12]
 801406c:	e016      	b.n	801409c <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x3e>
			this->buffers[this->idx_write].data_ptr[i] = buffer->data_ptr[i];
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	441a      	add	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 801407c:	4618      	mov	r0, r3
 801407e:	6879      	ldr	r1, [r7, #4]
 8014080:	4603      	mov	r3, r0
 8014082:	011b      	lsls	r3, r3, #4
 8014084:	4403      	add	r3, r0
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	440b      	add	r3, r1
 801408a:	3304      	adds	r3, #4
 801408c:	6819      	ldr	r1, [r3, #0]
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	440b      	add	r3, r1
 8014092:	7812      	ldrb	r2, [r2, #0]
 8014094:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < buffer->len; i++) {
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	3301      	adds	r3, #1
 801409a:	60fb      	str	r3, [r7, #12]
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	889b      	ldrh	r3, [r3, #4]
 80140a0:	461a      	mov	r2, r3
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	4293      	cmp	r3, r2
 80140a6:	dbe2      	blt.n	801406e <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x10>
		this->buffers[this->idx_write].len = buffer->len;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 80140ae:	4619      	mov	r1, r3
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	8898      	ldrh	r0, [r3, #4]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	460b      	mov	r3, r1
 80140b8:	011b      	lsls	r3, r3, #4
 80140ba:	440b      	add	r3, r1
 80140bc:	00db      	lsls	r3, r3, #3
 80140be:	4413      	add	r3, r2
 80140c0:	3308      	adds	r3, #8
 80140c2:	4602      	mov	r2, r0
 80140c4:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f000 f87e 	bl	80141c8 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 80140cc:	4603      	mov	r3, r0
	}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3710      	adds	r7, #16
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>:
	uint8_t write(uint8_t *buffer, uint16_t len) {
 80140d6:	b580      	push	{r7, lr}
 80140d8:	b086      	sub	sp, #24
 80140da:	af00      	add	r7, sp, #0
 80140dc:	60f8      	str	r0, [r7, #12]
 80140de:	60b9      	str	r1, [r7, #8]
 80140e0:	4613      	mov	r3, r2
 80140e2:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i < len; i++) {
 80140e4:	2300      	movs	r3, #0
 80140e6:	617b      	str	r3, [r7, #20]
 80140e8:	e015      	b.n	8014116 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x40>
			this->buffers[this->idx_write].data_ptr[i] = buffer[i];
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	68ba      	ldr	r2, [r7, #8]
 80140ee:	441a      	add	r2, r3
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 80140f6:	4618      	mov	r0, r3
 80140f8:	68f9      	ldr	r1, [r7, #12]
 80140fa:	4603      	mov	r3, r0
 80140fc:	011b      	lsls	r3, r3, #4
 80140fe:	4403      	add	r3, r0
 8014100:	00db      	lsls	r3, r3, #3
 8014102:	440b      	add	r3, r1
 8014104:	3304      	adds	r3, #4
 8014106:	6819      	ldr	r1, [r3, #0]
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	440b      	add	r3, r1
 801410c:	7812      	ldrb	r2, [r2, #0]
 801410e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	3301      	adds	r3, #1
 8014114:	617b      	str	r3, [r7, #20]
 8014116:	88fb      	ldrh	r3, [r7, #6]
 8014118:	697a      	ldr	r2, [r7, #20]
 801411a:	429a      	cmp	r2, r3
 801411c:	dbe5      	blt.n	80140ea <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x14>
		this->buffers[this->idx_write].len = len;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 8014124:	4619      	mov	r1, r3
 8014126:	68fa      	ldr	r2, [r7, #12]
 8014128:	460b      	mov	r3, r1
 801412a:	011b      	lsls	r3, r3, #4
 801412c:	440b      	add	r3, r1
 801412e:	00db      	lsls	r3, r3, #3
 8014130:	4413      	add	r3, r2
 8014132:	3308      	adds	r3, #8
 8014134:	88fa      	ldrh	r2, [r7, #6]
 8014136:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	f000 f845 	bl	80141c8 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 801413e:	4603      	mov	r3, r0
	}
 8014140:	4618      	mov	r0, r3
 8014142:	3718      	adds	r7, #24
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>:
	uint8_t _tx_encode_buf[size_buffers + 10];
	core_utils_Buffer<size_buffers> _rx_buffer;
	core_utils_Buffer<size_buffers> _tx_buffer;

	/* ------------------------------------------------------------------------- */
	void flushTx() {
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
		while (!(this->huart->gState == HAL_UART_STATE_READY)) {
 8014150:	bf00      	nop
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	68db      	ldr	r3, [r3, #12]
 8014156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801415a:	2b20      	cmp	r3, #32
 801415c:	bf14      	ite	ne
 801415e:	2301      	movne	r3, #1
 8014160:	2300      	moveq	r3, #0
 8014162:	b2db      	uxtb	r3, r3
 8014164:	2b00      	cmp	r3, #0
 8014166:	d1f4      	bne.n	8014152 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv+0xa>

		}
		this->sendNextBuffer();
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 f859 	bl	8014220 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>
	}
 801416e:	bf00      	nop
 8014170:	3708      	adds	r7, #8
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}

08014176 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8014176:	b580      	push	{r7, lr}
 8014178:	b084      	sub	sp, #16
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	105b      	asrs	r3, r3, #1
 801418e:	461a      	mov	r2, r3
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	1899      	adds	r1, r3, r2
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	f003 0301 	and.w	r3, r3, #1
 801419c:	2b00      	cmp	r3, #0
 801419e:	d00b      	beq.n	80141b8 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x42>
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	105b      	asrs	r3, r3, #1
 80141a6:	461a      	mov	r2, r3
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	4413      	add	r3, r2
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	68ba      	ldr	r2, [r7, #8]
 80141b0:	6812      	ldr	r2, [r2, #0]
 80141b2:	4413      	add	r3, r2
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	e001      	b.n	80141bc <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x46>
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	4608      	mov	r0, r1
 80141be:	4798      	blx	r3
 80141c0:	bf00      	nop
    }
 80141c2:	3710      	adds	r7, #16
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 80141c8:	b480      	push	{r7}
 80141ca:	b083      	sub	sp, #12
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 80141d6:	3301      	adds	r3, #1
 80141d8:	b2da      	uxtb	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		if (this->idx_write == this->num_buffers) {
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d103      	bne.n	80141f8 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2200      	movs	r2, #0
 80141f4:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		if (this->idx_write == this->idx_read) {
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8014204:	429a      	cmp	r2, r3
 8014206:	d104      	bne.n	8014212 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4a>
			this->overflow = 1;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	701a      	strb	r2, [r3, #0]
			return 0;
 801420e:	2300      	movs	r3, #0
 8014210:	e000      	b.n	8014214 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4c>
			return 1;
 8014212:	2301      	movs	r3, #1
	}
 8014214:	4618      	mov	r0, r3
 8014216:	370c      	adds	r7, #12
 8014218:	46bd      	mov	sp, r7
 801421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421e:	4770      	bx	lr

08014220 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>:

	/* ------------------------------------------------------------------------- */
	void sendNextBuffer() {
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
		if (!this->tx_queue.available()) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 801422e:	4618      	mov	r0, r3
 8014230:	f7ff fe67 	bl	8013f02 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	bf0c      	ite	eq
 801423a:	2301      	moveq	r3, #1
 801423c:	2300      	movne	r3, #0
 801423e:	b2db      	uxtb	r3, r3
 8014240:	2b00      	cmp	r3, #0
 8014242:	d120      	bne.n	8014286 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x66>
			return;
		}

		if (this->huart->gState != HAL_UART_STATE_READY) {
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	68db      	ldr	r3, [r3, #12]
 8014248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801424c:	2b20      	cmp	r3, #32
 801424e:	bf14      	ite	ne
 8014250:	2301      	movne	r3, #1
 8014252:	2300      	moveq	r3, #0
 8014254:	b2db      	uxtb	r3, r3
 8014256:	2b00      	cmp	r3, #0
 8014258:	d117      	bne.n	801428a <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6a>
			return;
		}

		uint8_t *buffer = NULL;
 801425a:	2300      	movs	r3, #0
 801425c:	60bb      	str	r3, [r7, #8]
		uint8_t len = this->tx_queue.read(&buffer);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8014264:	f107 0208 	add.w	r2, r7, #8
 8014268:	4611      	mov	r1, r2
 801426a:	4618      	mov	r0, r3
 801426c:	f000 f811 	bl	8014292 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>
 8014270:	4603      	mov	r3, r0
 8014272:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_DMA(this->huart, buffer, len);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	68b9      	ldr	r1, [r7, #8]
 801427a:	7bfa      	ldrb	r2, [r7, #15]
 801427c:	b292      	uxth	r2, r2
 801427e:	4618      	mov	r0, r3
 8014280:	f7f8 f99e 	bl	800c5c0 <HAL_UART_Transmit_DMA>
 8014284:	e002      	b.n	801428c <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8014286:	bf00      	nop
 8014288:	e000      	b.n	801428c <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 801428a:	bf00      	nop
	}
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}

08014292 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>:
	uint8_t read(uint8_t **buffer) {
 8014292:	b580      	push	{r7, lr}
 8014294:	b084      	sub	sp, #16
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
 801429a:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f7ff fe30 	bl	8013f02 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	bfd4      	ite	le
 80142a8:	2301      	movle	r3, #1
 80142aa:	2300      	movgt	r3, #0
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d001      	beq.n	80142b6 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x24>
			return 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	e01e      	b.n	80142f4 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x62>
		*buffer = &this->buffers[this->idx_read].data_ptr[0];
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 80142bc:	4619      	mov	r1, r3
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	460b      	mov	r3, r1
 80142c2:	011b      	lsls	r3, r3, #4
 80142c4:	440b      	add	r3, r1
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	4413      	add	r3, r2
 80142ca:	3304      	adds	r3, #4
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	601a      	str	r2, [r3, #0]
		uint8_t len = this->buffers[this->idx_read].len;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 80142d8:	4619      	mov	r1, r3
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	460b      	mov	r3, r1
 80142de:	011b      	lsls	r3, r3, #4
 80142e0:	440b      	add	r3, r1
 80142e2:	00db      	lsls	r3, r3, #3
 80142e4:	4413      	add	r3, r2
 80142e6:	3308      	adds	r3, #8
 80142e8:	881b      	ldrh	r3, [r3, #0]
 80142ea:	73fb      	strb	r3, [r7, #15]
		this->inc_read();
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7ff fe2f 	bl	8013f50 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return len;
 80142f2:	7bfb      	ldrb	r3, [r7, #15]
	}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}

080142fc <_Z41__static_initialization_and_destruction_0ii>:
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2b01      	cmp	r3, #1
 801430a:	d10a      	bne.n	8014322 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014312:	4293      	cmp	r3, r2
 8014314:	d105      	bne.n	8014322 <_Z41__static_initialization_and_destruction_0ii+0x26>
static core_comm_SerialMessage_memory<128> incoming_msg;
 8014316:	4805      	ldr	r0, [pc, #20]	@ (801432c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014318:	f7fe fef6 	bl	8013108 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
static core_comm_SerialMessage_memory<128> outgoing_msg;
 801431c:	4804      	ldr	r0, [pc, #16]	@ (8014330 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801431e:	f7fe fef3 	bl	8013108 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
}
 8014322:	bf00      	nop
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	2401ef04 	.word	0x2401ef04
 8014330:	2401ef94 	.word	0x2401ef94

08014334 <_ZN23core_comm_UartInterfaceILi10ELi128EE9setTaskIDEP19tskTaskControlBlock>:
	void setTaskID(TaskHandle_t task) {
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	6039      	str	r1, [r7, #0]
		this->_task_id = task;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014344:	461a      	mov	r2, r3
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	f8c2 3388 	str.w	r3, [r2, #904]	@ 0x388
	}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <_ZN23core_comm_UartInterfaceILi10ELi128EE9getTaskIDEv>:
	TaskHandle_t getTaskID() {
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
		return this->_task_id;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014366:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
	}
 801436a:	4618      	mov	r0, r3
 801436c:	370c      	adds	r7, #12
 801436e:	46bd      	mov	sp, r7
 8014370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014374:	4770      	bx	lr

08014376 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt>:
	void rxFunction(uint16_t len) {
 8014376:	b580      	push	{r7, lr}
 8014378:	b082      	sub	sp, #8
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
 801437e:	460b      	mov	r3, r1
 8014380:	807b      	strh	r3, [r7, #2]
		if (len == 0) {
 8014382:	887b      	ldrh	r3, [r7, #2]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d031      	beq.n	80143ec <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x76>
		if (this->config.cobs_encode_rx) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	799b      	ldrb	r3, [r3, #6]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d00c      	beq.n	80143aa <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x34>
			len = cobsDecodeInPlace(this->_rx_buffer.buffer, len - 1);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f603 32fa 	addw	r2, r3, #3066	@ 0xbfa
 8014396:	887b      	ldrh	r3, [r7, #2]
 8014398:	b2db      	uxtb	r3, r3
 801439a:	3b01      	subs	r3, #1
 801439c:	b2db      	uxtb	r3, r3
 801439e:	4619      	mov	r1, r3
 80143a0:	4610      	mov	r0, r2
 80143a2:	f00c f87f 	bl	80204a4 <_Z17cobsDecodeInPlacePhh>
 80143a6:	4603      	mov	r3, r0
 80143a8:	807b      	strh	r3, [r7, #2]
		this->_rx_buffer.len = len;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	887a      	ldrh	r2, [r7, #2]
 80143ae:	f8a3 2bf8 	strh.w	r2, [r3, #3064]	@ 0xbf8
		if (this->config.queues) {
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	7a1b      	ldrb	r3, [r3, #8]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d009      	beq.n	80143ce <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x58>
			this->rx_queue.write(&this->_rx_buffer);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f103 0210 	add.w	r2, r3, #16
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f603 33f4 	addw	r3, r3, #3060	@ 0xbf4
 80143c6:	4619      	mov	r1, r3
 80143c8:	4610      	mov	r0, r2
 80143ca:	f7ff fe48 	bl	801405e <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
		if (this->_callbacks.rx.registered) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f893 3ac4 	ldrb.w	r3, [r3, #2756]	@ 0xac4
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d005      	beq.n	80143e4 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x6e>
			this->_callbacks.rx.call();
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fe f951 	bl	8012686 <_ZN19core_utils_CallbackIvvE4callEv>
		this->startReceiveDMA();
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7ff fc3d 	bl	8013c64 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 80143ea:	e000      	b.n	80143ee <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x78>
			return;
 80143ec:	bf00      	nop
	}
 80143ee:	3708      	adds	r7, #8
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <_ZN18core_hardware_UARTILi10ELi128EE9get_huartEv>:
	UART_HandleTypeDef* get_huart() {
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
		return this->huart;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	68db      	ldr	r3, [r3, #12]
	}
 8014400:	4618      	mov	r0, r3
 8014402:	370c      	adds	r7, #12
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <_GLOBAL__sub_I_rx_available>:
 801440c:	b580      	push	{r7, lr}
 801440e:	af00      	add	r7, sp, #0
 8014410:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014414:	2001      	movs	r0, #1
 8014416:	f7ff ff71 	bl	80142fc <_Z41__static_initialization_and_destruction_0ii>
 801441a:	bd80      	pop	{r7, pc}

0801441c <_ZN15core_utils_GPIOC1Ev>:
void core_utils_gpio_registerExtiCallback(uint16_t line, void (* function) (void));


class core_utils_GPIO {
public:
	core_utils_GPIO(){
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]

	}
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	4618      	mov	r0, r3
 8014428:	370c      	adds	r7, #12
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr

08014432 <_ZN11RegisterMap8addEntryEhP13RegisterEntry>:
};

/* ============================================================ */
class RegisterMap {
public:
	virtual void addEntry(uint8_t address, RegisterEntry *entry) {
 8014432:	b480      	push	{r7}
 8014434:	b085      	sub	sp, #20
 8014436:	af00      	add	r7, sp, #0
 8014438:	60f8      	str	r0, [r7, #12]
 801443a:	460b      	mov	r3, r1
 801443c:	607a      	str	r2, [r7, #4]
 801443e:	72fb      	strb	r3, [r7, #11]

	}
 8014440:	bf00      	nop
 8014442:	3714      	adds	r7, #20
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr

0801444c <_ZN11RegisterMap8hasEntryEh>:
	virtual bool hasEntry(uint8_t address) {
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	70fb      	strb	r3, [r7, #3]
		return false;
 8014458:	2300      	movs	r3, #0
	}
 801445a:	4618      	mov	r0, r3
 801445c:	370c      	adds	r7, #12
 801445e:	46bd      	mov	sp, r7
 8014460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014464:	4770      	bx	lr

08014466 <_ZN11RegisterMap12getInputSizeEh>:
	/* -------------------------------------------------- */
	virtual uint16_t getInputSize(uint8_t address) {
 8014466:	b580      	push	{r7, lr}
 8014468:	b082      	sub	sp, #8
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
 801446e:	460b      	mov	r3, r1
 8014470:	70fb      	strb	r3, [r7, #3]
		return this->entries[address].getInputSize();
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	689a      	ldr	r2, [r3, #8]
 8014476:	78fb      	ldrb	r3, [r7, #3]
 8014478:	00db      	lsls	r3, r3, #3
 801447a:	18d1      	adds	r1, r2, r3
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	689a      	ldr	r2, [r3, #8]
 8014480:	78fb      	ldrb	r3, [r7, #3]
 8014482:	00db      	lsls	r3, r3, #3
 8014484:	4413      	add	r3, r2
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	4608      	mov	r0, r1
 801448c:	4798      	blx	r3
 801448e:	4603      	mov	r3, r0
	}
 8014490:	4618      	mov	r0, r3
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <_ZN11RegisterMap13getOutputSizeEh>:
	/* -------------------------------------------------- */
	virtual uint16_t getOutputSize(uint8_t address) {
 8014498:	b580      	push	{r7, lr}
 801449a:	b082      	sub	sp, #8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	460b      	mov	r3, r1
 80144a2:	70fb      	strb	r3, [r7, #3]
		return this->entries[address].getOutputSize();
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	689a      	ldr	r2, [r3, #8]
 80144a8:	78fb      	ldrb	r3, [r7, #3]
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	18d1      	adds	r1, r2, r3
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	689a      	ldr	r2, [r3, #8]
 80144b2:	78fb      	ldrb	r3, [r7, #3]
 80144b4:	00db      	lsls	r3, r3, #3
 80144b6:	4413      	add	r3, r2
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	3304      	adds	r3, #4
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	4608      	mov	r0, r1
 80144c0:	4798      	blx	r3
 80144c2:	4603      	mov	r3, r0
	}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3708      	adds	r7, #8
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <_ZN11RegisterMap7getTypeEh>:
	virtual register_entry_type_t getType(uint8_t address) {
 80144cc:	b480      	push	{r7}
 80144ce:	b083      	sub	sp, #12
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	460b      	mov	r3, r1
 80144d6:	70fb      	strb	r3, [r7, #3]
		return REGISTER_ENTRY_TYPE_NONE;
 80144d8:	2300      	movs	r3, #0
	}
 80144da:	4618      	mov	r0, r3
 80144dc:	370c      	adds	r7, #12
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr

080144e6 <_ZN11RegisterMap7executeEhPhS0_>:
	/* -------------------------------------------------- */
	virtual uint16_t execute(uint8_t address, uint8_t *input, uint8_t *output) {
 80144e6:	b480      	push	{r7}
 80144e8:	b085      	sub	sp, #20
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	60f8      	str	r0, [r7, #12]
 80144ee:	607a      	str	r2, [r7, #4]
 80144f0:	603b      	str	r3, [r7, #0]
 80144f2:	460b      	mov	r3, r1
 80144f4:	72fb      	strb	r3, [r7, #11]
		return 0;
 80144f6:	2300      	movs	r3, #0
	}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3714      	adds	r7, #20
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr

08014504 <_ZN11RegisterMap5writeEhPh>:
	/* -------------------------------------------------- */
	virtual void write(uint8_t address, uint8_t *input) {
 8014504:	b480      	push	{r7}
 8014506:	b085      	sub	sp, #20
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	460b      	mov	r3, r1
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	72fb      	strb	r3, [r7, #11]

	}
 8014512:	bf00      	nop
 8014514:	3714      	adds	r7, #20
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <_ZN11RegisterMap4readEhPh>:
	/* -------------------------------------------------- */
	virtual uint16_t read(uint8_t address, uint8_t *output) {
 801451e:	b480      	push	{r7}
 8014520:	b085      	sub	sp, #20
 8014522:	af00      	add	r7, sp, #0
 8014524:	60f8      	str	r0, [r7, #12]
 8014526:	460b      	mov	r3, r1
 8014528:	607a      	str	r2, [r7, #4]
 801452a:	72fb      	strb	r3, [r7, #11]
		return 0;
 801452c:	2300      	movs	r3, #0
	}
 801452e:	4618      	mov	r0, r3
 8014530:	3714      	adds	r7, #20
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr

0801453a <_ZN28twipr_communication_config_tC1Ev>:

typedef struct twipr_communication_callbacks_t {
	core_utils_Callback<void, uint16_t> new_trajectory;
} twipr_communication_callbacks_t;

typedef struct twipr_communication_config_t {
 801453a:	b580      	push	{r7, lr}
 801453c:	b082      	sub	sp, #8
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	3308      	adds	r3, #8
 8014546:	4618      	mov	r0, r3
 8014548:	f7ff ff68 	bl	801441c <_ZN15core_utils_GPIOC1Ev>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <_ZN31twipr_communication_callbacks_tC1Ev>:
typedef struct twipr_communication_callbacks_t {
 8014556:	b580      	push	{r7, lr}
 8014558:	b082      	sub	sp, #8
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	4618      	mov	r0, r3
 8014562:	f7fe f9f9 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	4618      	mov	r0, r3
 801456a:	3708      	adds	r7, #8
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <_ZN26TWIPR_CommunicationManagerC1Ev>:

void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma);

TWIPR_CommunicationManager *active_manager = NULL;

TWIPR_CommunicationManager::TWIPR_CommunicationManager() {
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff ffdd 	bl	801453a <_ZN28twipr_communication_config_tC1Ev>
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	3318      	adds	r3, #24
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe fbef 	bl	8012d68 <_ZN24TWIPR_UART_CommunicationC1Ev>
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014590:	4413      	add	r3, r2
 8014592:	4618      	mov	r0, r3
 8014594:	f7fe f896 	bl	80126c4 <_ZN23TWIPR_SPI_CommunicationC1Ev>
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 801459e:	4413      	add	r3, r2
 80145a0:	4618      	mov	r0, r3
 80145a2:	f008 f932 	bl	801c80a <_ZN3CANC1Ev>
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	f641 1304 	movw	r3, #6404	@ 0x1904
 80145ac:	4413      	add	r3, r2
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7ff ffd1 	bl	8014556 <_ZN31twipr_communication_callbacks_tC1Ev>

}
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	4618      	mov	r0, r3
 80145b8:	3708      	adds	r7, #8
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
	...

080145c0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>:

/* ====================================================================== */
void TWIPR_CommunicationManager::init(twipr_communication_config_t config) {
 80145c0:	b084      	sub	sp, #16
 80145c2:	b5b0      	push	{r4, r5, r7, lr}
 80145c4:	b0c8      	sub	sp, #288	@ 0x120
 80145c6:	af02      	add	r7, sp, #8
 80145c8:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80145cc:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 80145d0:	6020      	str	r0, [r4, #0]
 80145d2:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 80145d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80145da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80145de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	461d      	mov	r5, r3
 80145e6:	f507 7496 	add.w	r4, r7, #300	@ 0x12c
 80145ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80145f2:	e885 0003 	stmia.w	r5, {r0, r1}

	active_manager = this;
 80145f6:	4aa6      	ldr	r2, [pc, #664]	@ (8014890 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2d0>)
 80145f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80145fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	6013      	str	r3, [r2, #0]

	// Initialize the UART CM4 Interface
	twipr_uart_comm_config_t uart_config = { .huart = this->config.huart };
 8014604:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014608:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	627b      	str	r3, [r7, #36]	@ 0x24
	this->uart_interface.init(uart_config);
 8014612:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014616:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	3318      	adds	r3, #24
 801461e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014620:	4618      	mov	r0, r3
 8014622:	f7fe fbb9 	bl	8012d98 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 8014626:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801462a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	f103 0418 	add.w	r4, r3, #24
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8014634:	4b97      	ldr	r3, [pc, #604]	@ (8014894 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2d4>)
 8014636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014638:	2300      	movs	r3, #0
 801463a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801463c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014640:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8014644:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8014648:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801464c:	cb0c      	ldmia	r3, {r2, r3}
 801464e:	6809      	ldr	r1, [r1, #0]
 8014650:	f000 fb9c 	bl	8014d8c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 8014654:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014658:	461a      	mov	r2, r3
 801465a:	2101      	movs	r1, #1
 801465c:	4620      	mov	r0, r4
 801465e:	f7fe fc63 	bl	8012f28 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_write_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 8014662:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014666:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	f103 0418 	add.w	r4, r3, #24
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8014670:	4b89      	ldr	r3, [pc, #548]	@ (8014898 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2d8>)
 8014672:	673b      	str	r3, [r7, #112]	@ 0x70
 8014674:	2300      	movs	r3, #0
 8014676:	677b      	str	r3, [r7, #116]	@ 0x74
 8014678:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801467c:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8014680:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8014684:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8014688:	cb0c      	ldmia	r3, {r2, r3}
 801468a:	6809      	ldr	r1, [r1, #0]
 801468c:	f000 fb7e 	bl	8014d8c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 8014690:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8014694:	461a      	mov	r2, r3
 8014696:	2102      	movs	r1, #2
 8014698:	4620      	mov	r0, r4
 801469a:	f7fe fc45 	bl	8012f28 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_read_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 801469e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	f103 0418 	add.w	r4, r3, #24
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 80146ac:	4b7b      	ldr	r3, [pc, #492]	@ (801489c <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2dc>)
 80146ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80146b2:	2300      	movs	r3, #0
 80146b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80146b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146bc:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 80146c0:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80146c4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80146c8:	cb0c      	ldmia	r3, {r2, r3}
 80146ca:	6809      	ldr	r1, [r1, #0]
 80146cc:	f000 fb5e 	bl	8014d8c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80146d0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80146d4:	461a      	mov	r2, r3
 80146d6:	2103      	movs	r1, #3
 80146d8:	4620      	mov	r0, r4
 80146da:	f7fe fc25 	bl	8012f28 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_func_callback));

	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 80146de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	8adc      	ldrh	r4, [r3, #22]
			core_utils_Callback<void, void>(this,
 80146ea:	4b6d      	ldr	r3, [pc, #436]	@ (80148a0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2e0>)
 80146ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80146f0:	2300      	movs	r3, #0
 80146f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80146f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146fa:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 80146fe:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8014702:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8014706:	cb0c      	ldmia	r3, {r2, r3}
 8014708:	6809      	ldr	r1, [r1, #0]
 801470a:	f000 fb73 	bl	8014df4 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 801470e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8014712:	4619      	mov	r1, r3
 8014714:	4620      	mov	r0, r4
 8014716:	f00b ffd5 	bl	80206c4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::resetUART));

	// Initialize the SPI Interface
	twipr_spi_comm_config_t spi_config = { .hspi = this->config.hspi,
 801471a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801471e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014722:	461a      	mov	r2, r3
 8014724:	2300      	movs	r3, #0
 8014726:	6013      	str	r3, [r2, #0]
 8014728:	6053      	str	r3, [r2, #4]
 801472a:	6093      	str	r3, [r2, #8]
 801472c:	60d3      	str	r3, [r2, #12]
 801472e:	6113      	str	r3, [r2, #16]
 8014730:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014738:	220a      	movs	r2, #10
 801473a:	811a      	strh	r2, [r3, #8]
 801473c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014740:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	685a      	ldr	r2, [r3, #4]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
			TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE, .sequence_buffer =
					this->config.sequence_rx_buffer, .len_sequence_buffer =
					this->config.len_sequence_buffer };
 8014748:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801474c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014750:	601a      	str	r2, [r3, #0]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
 8014752:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014756:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	f641 1324 	movw	r3, #6436	@ 0x1924
 8014760:	4413      	add	r3, r2
					this->config.len_sequence_buffer };
 8014762:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8014766:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 801476a:	6053      	str	r3, [r2, #4]
					this->config.sequence_rx_buffer, .len_sequence_buffer =
 801476c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014770:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	691a      	ldr	r2, [r3, #16]
					this->config.len_sequence_buffer };
 8014778:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801477c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014780:	60da      	str	r2, [r3, #12]
 8014782:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014786:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	8a9a      	ldrh	r2, [r3, #20]
 801478e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014796:	821a      	strh	r2, [r3, #16]
	this->spi_interface.init(spi_config);
 8014798:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801479c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f241 4434 	movw	r4, #5172	@ 0x1434
 80147a6:	441c      	add	r4, r3
 80147a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80147ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80147b0:	466d      	mov	r5, sp
 80147b2:	f103 020c 	add.w	r2, r3, #12
 80147b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80147be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80147c0:	4620      	mov	r0, r4
 80147c2:	f7fd ff95 	bl	80126f0 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>

	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 80147c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80147ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f241 4434 	movw	r4, #5172	@ 0x1434
 80147d4:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 80147d6:	4b33      	ldr	r3, [pc, #204]	@ (80148a4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2e4>)
 80147d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80147dc:	2300      	movs	r3, #0
 80147de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80147e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80147e6:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 80147ea:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80147ee:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80147f2:	cb0c      	ldmia	r3, {r2, r3}
 80147f4:	6809      	ldr	r1, [r1, #0]
 80147f6:	f000 fb31 	bl	8014e5c <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 80147fa:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80147fe:	461a      	mov	r2, r3
 8014800:	2100      	movs	r1, #0
 8014802:	4620      	mov	r0, r4
 8014804:	f7fe f80a 	bl	801281c <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_rxTrajectory_callback));
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8014808:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801480c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f241 4434 	movw	r4, #5172	@ 0x1434
 8014816:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 8014818:	4b23      	ldr	r3, [pc, #140]	@ (80148a8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2e8>)
 801481a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801481e:	2300      	movs	r3, #0
 8014820:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8014824:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014828:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 801482c:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8014830:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014834:	cb0c      	ldmia	r3, {r2, r3}
 8014836:	6809      	ldr	r1, [r1, #0]
 8014838:	f000 fb10 	bl	8014e5c <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 801483c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8014840:	461a      	mov	r2, r3
 8014842:	2101      	movs	r1, #1
 8014844:	4620      	mov	r0, r4
 8014846:	f7fd ffe9 	bl	801281c <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_txSamples_callback));

	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 801484a:	4a18      	ldr	r2, [pc, #96]	@ (80148ac <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2ec>)
 801484c:	2100      	movs	r1, #0
 801484e:	4818      	ldr	r0, [pc, #96]	@ (80148b0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2f0>)
 8014850:	f7f0 f8a8 	bl	80049a4 <HAL_DMA_RegisterCallback>
			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);


	// Initialize the CAN Bus
	can_config_t can_config = {
 8014854:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014858:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801485c:	4a15      	ldr	r2, [pc, #84]	@ (80148b4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2f4>)
 801485e:	601a      	str	r2, [r3, #0]
			.hfdcan = BOARD_FDCAN,
	};

	this->can.init(can_config);
 8014860:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014864:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 801486e:	4413      	add	r3, r2
 8014870:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8014874:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8014878:	6811      	ldr	r1, [r2, #0]
 801487a:	4618      	mov	r0, r3
 801487c:	f008 f84c 	bl	801c918 <_ZN3CAN4initE12can_config_t>
}
 8014880:	bf00      	nop
 8014882:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8014886:	46bd      	mov	sp, r7
 8014888:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801488c:	b004      	add	sp, #16
 801488e:	4770      	bx	lr
 8014890:	2401f440 	.word	0x2401f440
 8014894:	08014935 	.word	0x08014935
 8014898:	08014a21 	.word	0x08014a21
 801489c:	08014afd 	.word	0x08014afd
 80148a0:	0801491b 	.word	0x0801491b
 80148a4:	08014c51 	.word	0x08014c51
 80148a8:	08014cc9 	.word	0x08014cc9
 80148ac:	08014d0d 	.word	0x08014d0d
 80148b0:	24000b88 	.word	0x24000b88
 80148b4:	24000224 	.word	0x24000224

080148b8 <_ZN26TWIPR_CommunicationManager5startEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::start() {
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]

	// Start the UART Interface
	this->uart_interface.start();
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	3318      	adds	r3, #24
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fe fa93 	bl	8012df0 <_ZN24TWIPR_UART_Communication5startEv>

	// Start the SPI Interface
	this->spi_interface.start();
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	f241 4334 	movw	r3, #5172	@ 0x1434
 80148d0:	4413      	add	r3, r2
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fd ff66 	bl	80127a4 <_ZN23TWIPR_SPI_Communication5startEv>

	// Start the CAN Bus
	this->can.start();
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 80148de:	4413      	add	r3, r2
 80148e0:	4618      	mov	r0, r3
 80148e2:	f008 f909 	bl	801caf8 <_ZN3CAN5startEv>
}
 80148e6:	bf00      	nop
 80148e8:	3708      	adds	r7, #8
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}

080148ee <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE>:
/* ====================================================================== */
void TWIPR_CommunicationManager::registerCallback(
		twipr_communication_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 80148ee:	b580      	push	{r7, lr}
 80148f0:	b084      	sub	sp, #16
 80148f2:	af00      	add	r7, sp, #0
 80148f4:	60f8      	str	r0, [r7, #12]
 80148f6:	460b      	mov	r3, r1
 80148f8:	607a      	str	r2, [r7, #4]
 80148fa:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 80148fc:	7afb      	ldrb	r3, [r7, #11]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d107      	bne.n	8014912 <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE+0x24>
	case TWIPR_COMM_CALLBACK_NEW_TRAJECTORY: {
		this->_callbacks.new_trajectory = callback;
 8014902:	68fa      	ldr	r2, [r7, #12]
 8014904:	f641 1304 	movw	r3, #6404	@ 0x1904
 8014908:	4413      	add	r3, r2
 801490a:	6879      	ldr	r1, [r7, #4]
 801490c:	4618      	mov	r0, r3
 801490e:	f7fd ff65 	bl	80127dc <_ZN19core_utils_CallbackIvtEaSERKS0_>
	}
	}
}
 8014912:	bf00      	nop
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}

0801491a <_ZN26TWIPR_CommunicationManager9resetUARTEv>:

/* ====================================================================== */
void TWIPR_CommunicationManager::resetUART() {
 801491a:	b580      	push	{r7, lr}
 801491c:	b082      	sub	sp, #8
 801491e:	af00      	add	r7, sp, #0
 8014920:	6078      	str	r0, [r7, #4]
	this->uart_interface.reset();
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	3318      	adds	r3, #24
 8014926:	4618      	mov	r0, r3
 8014928:	f7fe fa7c 	bl	8012e24 <_ZN24TWIPR_UART_Communication5resetEv>
}
 801492c:	bf00      	nop
 801492e:	3708      	adds	r7, #8
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_write_callback(
		core_comm_SerialMessage *msg) {
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	789a      	ldrb	r2, [r3, #2]
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	78db      	ldrb	r3, [r3, #3]
 8014946:	4619      	mov	r1, r3
 8014948:	4610      	mov	r0, r2
 801494a:	f00b fdd3 	bl	80204f4 <_Z15uint8_to_uint16hh>
 801494e:	4603      	mov	r3, r0
 8014950:	81fb      	strh	r3, [r7, #14]

	if (!register_map.hasEntry(address)) {
 8014952:	89fb      	ldrh	r3, [r7, #14]
 8014954:	b2db      	uxtb	r3, r3
 8014956:	4619      	mov	r1, r3
 8014958:	482f      	ldr	r0, [pc, #188]	@ (8014a18 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 801495a:	f000 fab3 	bl	8014ec4 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>
 801495e:	4603      	mov	r3, r0
 8014960:	f083 0301 	eor.w	r3, r3, #1
 8014964:	b2db      	uxtb	r3, r3
 8014966:	2b00      	cmp	r3, #0
 8014968:	d005      	beq.n	8014976 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x42>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 801496a:	2202      	movs	r2, #2
 801496c:	6839      	ldr	r1, [r7, #0]
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 f942 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014974:	e04c      	b.n	8014a10 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xdc>
	}

	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_WRITABLE
 8014976:	89fb      	ldrh	r3, [r7, #14]
 8014978:	b2db      	uxtb	r3, r3
 801497a:	4619      	mov	r1, r3
 801497c:	4826      	ldr	r0, [pc, #152]	@ (8014a18 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 801497e:	f000 fab8 	bl	8014ef2 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014982:	4603      	mov	r3, r0
			&& register_map.getType(address)
 8014984:	2b02      	cmp	r3, #2
 8014986:	d00a      	beq.n	801499e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x6a>
 8014988:	89fb      	ldrh	r3, [r7, #14]
 801498a:	b2db      	uxtb	r3, r3
 801498c:	4619      	mov	r1, r3
 801498e:	4822      	ldr	r0, [pc, #136]	@ (8014a18 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 8014990:	f000 faaf 	bl	8014ef2 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014994:	4603      	mov	r3, r0
 8014996:	2b04      	cmp	r3, #4
 8014998:	d001      	beq.n	801499e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x6a>
 801499a:	2301      	movs	r3, #1
 801499c:	e000      	b.n	80149a0 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x6c>
 801499e:	2300      	movs	r3, #0
	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_WRITABLE
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d005      	beq.n	80149b0 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x7c>
					!= REGISTER_ENTRY_TYPE_READWRITEABLE) {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 80149a4:	2206      	movs	r2, #6
 80149a6:	6839      	ldr	r1, [r7, #0]
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f000 f925 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80149ae:	e02f      	b.n	8014a10 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xdc>
	}

	if (register_map.getInputSize(address) != msg->len) {
 80149b0:	89fb      	ldrh	r3, [r7, #14]
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	4619      	mov	r1, r3
 80149b6:	4818      	ldr	r0, [pc, #96]	@ (8014a18 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 80149b8:	f000 fac4 	bl	8014f44 <_ZN22core_utils_RegisterMapILi255EE12getInputSizeEh>
 80149bc:	4603      	mov	r3, r0
 80149be:	461a      	mov	r2, r3
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	899b      	ldrh	r3, [r3, #12]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	bf14      	ite	ne
 80149c8:	2301      	movne	r3, #1
 80149ca:	2300      	moveq	r3, #0
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d11d      	bne.n	8014a0e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xda>
//		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
		return;
	}

	register_map.write(address, msg->data_ptr);
 80149d2:	89fb      	ldrh	r3, [r7, #14]
 80149d4:	b2d9      	uxtb	r1, r3
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	689b      	ldr	r3, [r3, #8]
 80149da:	461a      	mov	r2, r3
 80149dc:	480e      	ldr	r0, [pc, #56]	@ (8014a18 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 80149de:	f000 facc 	bl	8014f7a <_ZN22core_utils_RegisterMapILi255EE5writeEhPh>

	outgoing_msg.address_1 = msg->address_1;
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	785a      	ldrb	r2, [r3, #1]
 80149e6:	4b0d      	ldr	r3, [pc, #52]	@ (8014a1c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 80149e8:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_2;
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	789a      	ldrb	r2, [r3, #2]
 80149ee:	4b0b      	ldr	r3, [pc, #44]	@ (8014a1c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 80149f0:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_3;
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	78da      	ldrb	r2, [r3, #3]
 80149f6:	4b09      	ldr	r3, [pc, #36]	@ (8014a1c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 80149f8:	705a      	strb	r2, [r3, #1]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 80149fa:	4b08      	ldr	r3, [pc, #32]	@ (8014a1c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 80149fc:	2203      	movs	r2, #3
 80149fe:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 1;
 8014a00:	4b06      	ldr	r3, [pc, #24]	@ (8014a1c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014a02:	2201      	movs	r2, #1
 8014a04:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 0;
 8014a06:	4b05      	ldr	r3, [pc, #20]	@ (8014a1c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014a08:	2200      	movs	r2, #0
 8014a0a:	819a      	strh	r2, [r3, #12]
 8014a0c:	e000      	b.n	8014a10 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xdc>
		return;
 8014a0e:	bf00      	nop

//	this->uart_interface.send(&outgoing_msg);

}
 8014a10:	3710      	adds	r7, #16
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	2401f028 	.word	0x2401f028
 8014a1c:	2401f430 	.word	0x2401f430

08014a20 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_read_callback(
		core_comm_SerialMessage *msg) {
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	789a      	ldrb	r2, [r3, #2]
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	78db      	ldrb	r3, [r3, #3]
 8014a32:	4619      	mov	r1, r3
 8014a34:	4610      	mov	r0, r2
 8014a36:	f00b fd5d 	bl	80204f4 <_Z15uint8_to_uint16hh>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	81fb      	strh	r3, [r7, #14]

	if (!register_map.hasEntry(address)) {
 8014a3e:	89fb      	ldrh	r3, [r7, #14]
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	4619      	mov	r1, r3
 8014a44:	482b      	ldr	r0, [pc, #172]	@ (8014af4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 8014a46:	f000 fa3d 	bl	8014ec4 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	f083 0301 	eor.w	r3, r3, #1
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d005      	beq.n	8014a62 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x42>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8014a56:	2202      	movs	r2, #2
 8014a58:	6839      	ldr	r1, [r7, #0]
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 f8cc 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014a60:	e044      	b.n	8014aec <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xcc>
	}

	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_READABLE
 8014a62:	89fb      	ldrh	r3, [r7, #14]
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	4619      	mov	r1, r3
 8014a68:	4822      	ldr	r0, [pc, #136]	@ (8014af4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 8014a6a:	f000 fa42 	bl	8014ef2 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014a6e:	4603      	mov	r3, r0
			&& register_map.getType(address)
 8014a70:	2b03      	cmp	r3, #3
 8014a72:	d00a      	beq.n	8014a8a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x6a>
 8014a74:	89fb      	ldrh	r3, [r7, #14]
 8014a76:	b2db      	uxtb	r3, r3
 8014a78:	4619      	mov	r1, r3
 8014a7a:	481e      	ldr	r0, [pc, #120]	@ (8014af4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 8014a7c:	f000 fa39 	bl	8014ef2 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b04      	cmp	r3, #4
 8014a84:	d001      	beq.n	8014a8a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x6a>
 8014a86:	2301      	movs	r3, #1
 8014a88:	e000      	b.n	8014a8c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x6c>
 8014a8a:	2300      	movs	r3, #0
	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_READABLE
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d005      	beq.n	8014a9c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x7c>
					!= REGISTER_ENTRY_TYPE_READWRITEABLE) {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8014a90:	2206      	movs	r2, #6
 8014a92:	6839      	ldr	r1, [r7, #0]
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 f8af 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014a9a:	e027      	b.n	8014aec <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xcc>
	}

	// Read the entry into the outgoing message
	uint16_t len = register_map.read(address, outgoing_msg.data_ptr);
 8014a9c:	89fb      	ldrh	r3, [r7, #14]
 8014a9e:	b2db      	uxtb	r3, r3
 8014aa0:	4a15      	ldr	r2, [pc, #84]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014aa2:	6892      	ldr	r2, [r2, #8]
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	4813      	ldr	r0, [pc, #76]	@ (8014af4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 8014aa8:	f000 fa8e 	bl	8014fc8 <_ZN22core_utils_RegisterMapILi255EE4readEhPh>
 8014aac:	4603      	mov	r3, r0
 8014aae:	81bb      	strh	r3, [r7, #12]

	if (len > 0){
 8014ab0:	89bb      	ldrh	r3, [r7, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d01a      	beq.n	8014aec <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xcc>
	// Construct the outgoing message
		outgoing_msg.address_1 = msg->address_1;
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	785a      	ldrb	r2, [r3, #1]
 8014aba:	4b0f      	ldr	r3, [pc, #60]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014abc:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	789a      	ldrb	r2, [r3, #2]
 8014ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014ac4:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	78da      	ldrb	r2, [r3, #3]
 8014aca:	4b0b      	ldr	r3, [pc, #44]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014acc:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 8014ace:	4b0a      	ldr	r3, [pc, #40]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014ad4:	4b08      	ldr	r3, [pc, #32]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014ad6:	2203      	movs	r2, #3
 8014ad8:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = len;
 8014ada:	4a07      	ldr	r2, [pc, #28]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014adc:	89bb      	ldrh	r3, [r7, #12]
 8014ade:	8193      	strh	r3, [r2, #12]

		this->uart_interface.send(&outgoing_msg);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	3318      	adds	r3, #24
 8014ae4:	4904      	ldr	r1, [pc, #16]	@ (8014af8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fe f9ee 	bl	8012ec8 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 8014aec:	3710      	adds	r7, #16
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	2401f028 	.word	0x2401f028
 8014af8:	2401f430 	.word	0x2401f430

08014afc <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_func_callback(
		core_comm_SerialMessage *msg) {
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	789a      	ldrb	r2, [r3, #2]
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	78db      	ldrb	r3, [r3, #3]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	4610      	mov	r0, r2
 8014b12:	f00b fcef 	bl	80204f4 <_Z15uint8_to_uint16hh>
 8014b16:	4603      	mov	r3, r0
 8014b18:	81fb      	strh	r3, [r7, #14]

	if (!register_map.hasEntry(address)) {
 8014b1a:	89fb      	ldrh	r3, [r7, #14]
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	4619      	mov	r1, r3
 8014b20:	4833      	ldr	r0, [pc, #204]	@ (8014bf0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014b22:	f000 f9cf 	bl	8014ec4 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>
 8014b26:	4603      	mov	r3, r0
 8014b28:	f083 0301 	eor.w	r3, r3, #1
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d005      	beq.n	8014b3e <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x42>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8014b32:	2202      	movs	r2, #2
 8014b34:	6839      	ldr	r1, [r7, #0]
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f000 f85e 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014b3c:	e054      	b.n	8014be8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
	}

	if (register_map.getInputSize(address) != msg->len) {
 8014b3e:	89fb      	ldrh	r3, [r7, #14]
 8014b40:	b2db      	uxtb	r3, r3
 8014b42:	4619      	mov	r1, r3
 8014b44:	482a      	ldr	r0, [pc, #168]	@ (8014bf0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014b46:	f000 f9fd 	bl	8014f44 <_ZN22core_utils_RegisterMapILi255EE12getInputSizeEh>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	899b      	ldrh	r3, [r3, #12]
 8014b52:	429a      	cmp	r2, r3
 8014b54:	bf14      	ite	ne
 8014b56:	2301      	movne	r3, #1
 8014b58:	2300      	moveq	r3, #0
 8014b5a:	b2db      	uxtb	r3, r3
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d005      	beq.n	8014b6c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 8014b60:	2205      	movs	r2, #5
 8014b62:	6839      	ldr	r1, [r7, #0]
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f000 f847 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014b6a:	e03d      	b.n	8014be8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
	}

	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_EXECUTABLE) {
 8014b6c:	89fb      	ldrh	r3, [r7, #14]
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	4619      	mov	r1, r3
 8014b72:	481f      	ldr	r0, [pc, #124]	@ (8014bf0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014b74:	f000 f9bd 	bl	8014ef2 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	bf14      	ite	ne
 8014b7e:	2301      	movne	r3, #1
 8014b80:	2300      	moveq	r3, #0
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d005      	beq.n	8014b94 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x98>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8014b88:	2206      	movs	r2, #6
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 f833 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014b92:	e029      	b.n	8014be8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
	}

	// Execute the function and store the data
	uint8_t ret_size = register_map.execute(address, msg->data_ptr,
 8014b94:	89fb      	ldrh	r3, [r7, #14]
 8014b96:	b2d9      	uxtb	r1, r3
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	689a      	ldr	r2, [r3, #8]
 8014b9c:	4b15      	ldr	r3, [pc, #84]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	4813      	ldr	r0, [pc, #76]	@ (8014bf0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014ba2:	f000 fa3b 	bl	801501c <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_>
 8014ba6:	4603      	mov	r3, r0
			outgoing_msg.data_ptr);
 8014ba8:	737b      	strb	r3, [r7, #13]

	// Send back a message if the function returns something
	if (ret_size > 0) {
 8014baa:	7b7b      	ldrb	r3, [r7, #13]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d01b      	beq.n	8014be8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
		outgoing_msg.address_1 = msg->address_1;
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	785a      	ldrb	r2, [r3, #1]
 8014bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014bb6:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	789a      	ldrb	r2, [r3, #2]
 8014bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014bbe:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	78da      	ldrb	r2, [r3, #3]
 8014bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014bc6:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 8014bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014bca:	2201      	movs	r2, #1
 8014bcc:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014bce:	4b09      	ldr	r3, [pc, #36]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014bd0:	2203      	movs	r2, #3
 8014bd2:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = ret_size;
 8014bd4:	7b7b      	ldrb	r3, [r7, #13]
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	4b06      	ldr	r3, [pc, #24]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014bda:	819a      	strh	r2, [r3, #12]
		this->uart_interface.send(&outgoing_msg);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	3318      	adds	r3, #24
 8014be0:	4904      	ldr	r1, [pc, #16]	@ (8014bf4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fe f970 	bl	8012ec8 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	2401f028 	.word	0x2401f028
 8014bf4:	2401f430 	.word	0x2401f430

08014bf8 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uartResponseError(
		core_comm_SerialMessage *incoming_message, uint8_t error_code) {
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	60b9      	str	r1, [r7, #8]
 8014c02:	4613      	mov	r3, r2
 8014c04:	71fb      	strb	r3, [r7, #7]
	outgoing_msg.address_1 = incoming_message->address_1;
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	785a      	ldrb	r2, [r3, #1]
 8014c0a:	4b10      	ldr	r3, [pc, #64]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c0c:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = incoming_message->address_2;
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	789a      	ldrb	r2, [r3, #2]
 8014c12:	4b0e      	ldr	r3, [pc, #56]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c14:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = incoming_message->address_3;
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	78da      	ldrb	r2, [r3, #3]
 8014c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c1c:	70da      	strb	r2, [r3, #3]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c20:	2203      	movs	r2, #3
 8014c22:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 0;
 8014c24:	4b09      	ldr	r3, [pc, #36]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c26:	2200      	movs	r2, #0
 8014c28:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 1;
 8014c2a:	4b08      	ldr	r3, [pc, #32]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	819a      	strh	r2, [r3, #12]
	outgoing_msg.data_ptr[0] = error_code;
 8014c30:	4b06      	ldr	r3, [pc, #24]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c32:	689b      	ldr	r3, [r3, #8]
 8014c34:	79fa      	ldrb	r2, [r7, #7]
 8014c36:	701a      	strb	r2, [r3, #0]
	this->uart_interface.send(&outgoing_msg);
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	3318      	adds	r3, #24
 8014c3c:	4903      	ldr	r1, [pc, #12]	@ (8014c4c <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fe f942 	bl	8012ec8 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 8014c44:	bf00      	nop
 8014c46:	3710      	adds	r7, #16
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	2401f430 	.word	0x2401f430

08014c50 <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_rxTrajectory_callback(uint16_t len) {
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	460b      	mov	r3, r1
 8014c5a:	807b      	strh	r3, [r7, #2]
	// We have received a new trajectory by the CM4
	if (this->_callbacks.new_trajectory.registered) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014c62:	f893 3908 	ldrb.w	r3, [r3, #2312]	@ 0x908
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d008      	beq.n	8014c7c <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt+0x2c>
		this->_callbacks.new_trajectory.call(len);
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	f641 1304 	movw	r3, #6404	@ 0x1904
 8014c70:	4413      	add	r3, r2
 8014c72:	887a      	ldrh	r2, [r7, #2]
 8014c74:	4611      	mov	r1, r2
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fd fec0 	bl	80129fc <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->spi_interface.provideSampleData();
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014c82:	4413      	add	r3, r2
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7fd fde7 	bl	8012858 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8014c8a:	bf00      	nop
 8014c8c:	3708      	adds	r7, #8
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <_ZN26TWIPR_CommunicationManager32sampleBufferDMATransfer_callbackEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::sampleBufferDMATransfer_callback() {
 8014c92:	b580      	push	{r7, lr}
 8014c94:	b082      	sub	sp, #8
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	6078      	str	r0, [r7, #4]
	this->spi_interface.stopTransmission();
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014ca0:	4413      	add	r3, r2
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7fd fe32 	bl	801290c <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>
	this->spi_interface.provideSampleData();
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014cae:	4413      	add	r3, r2
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fd fdd1 	bl	8012858 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
	this->config.notification_gpio_tx.toggle();
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	3308      	adds	r3, #8
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f00b fcf2 	bl	80206a4 <_ZN15core_utils_GPIO6toggleEv>
}
 8014cc0:	bf00      	nop
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <_ZN26TWIPR_CommunicationManager23_spi_txSamples_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_txSamples_callback(uint16_t len) {
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	807b      	strh	r3, [r7, #2]
//	this->config.notification_gpio_tx.write(0);
}
 8014cd4:	bf00      	nop
 8014cd6:	370c      	adds	r7, #12
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cde:	4770      	bx	lr

08014ce0 <_ZN26TWIPR_CommunicationManager17provideSampleDataEP22twipr_logging_sample_t>:
	this->spi_interface.receiveTrajectory();
}

/* ====================================================================== */
void TWIPR_CommunicationManager::provideSampleData(
		twipr_logging_sample_t *buffer) {
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
 8014ce8:	6039      	str	r1, [r7, #0]
	HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM, (uint32_t) buffer,
 8014cea:	6839      	ldr	r1, [r7, #0]
			(uint32_t) &this->_sample_buffer_tx,
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	f641 1324 	movw	r3, #6436	@ 0x1924
 8014cf2:	4413      	add	r3, r2
	HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM, (uint32_t) buffer,
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8014cfa:	4803      	ldr	r0, [pc, #12]	@ (8014d08 <_ZN26TWIPR_CommunicationManager17provideSampleDataEP22twipr_logging_sample_t+0x28>)
 8014cfc:	f7ed ff5a 	bl	8002bb4 <HAL_DMA_Start_IT>
			TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE * sizeof(twipr_logging_sample_t));
}
 8014d00:	bf00      	nop
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	24000b88 	.word	0x24000b88

08014d0c <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef>:

/* ======================================================================*/
void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma) {
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
	active_manager->sampleBufferDMATransfer_callback();
 8014d14:	4b04      	ldr	r3, [pc, #16]	@ (8014d28 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef+0x1c>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7ff ffba 	bl	8014c92 <_ZN26TWIPR_CommunicationManager32sampleBufferDMATransfer_callbackEv>
}
 8014d1e:	bf00      	nop
 8014d20:	3708      	adds	r7, #8
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	2401f440 	.word	0x2401f440

08014d2c <_ZN11RegisterMapC1Ev>:
class RegisterMap {
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	4a04      	ldr	r2, [pc, #16]	@ (8014d48 <_ZN11RegisterMapC1Ev+0x1c>)
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	370c      	adds	r7, #12
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr
 8014d48:	08024de4 	.word	0x08024de4

08014d4c <_ZN22core_utils_RegisterMapILi255EEC1Eh>:

/* ============================================================ */
template<int size>
class core_utils_RegisterMap: public RegisterMap {
public:
	core_utils_RegisterMap<size>(uint8_t address) {
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	460b      	mov	r3, r1
 8014d56:	70fb      	strb	r3, [r7, #3]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7ff ffe6 	bl	8014d2c <_ZN11RegisterMapC1Ev>
 8014d60:	4a09      	ldr	r2, [pc, #36]	@ (8014d88 <_ZN22core_utils_RegisterMapILi255EEC1Eh+0x3c>)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	330c      	adds	r3, #12
 8014d6a:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4618      	mov	r0, r3
 8014d72:	f00d fed6 	bl	8022b22 <memset>
		this->address = address;
 8014d76:	78fb      	ldrb	r3, [r7, #3]
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	809a      	strh	r2, [r3, #4]
	}
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	4618      	mov	r0, r3
 8014d82:	3708      	adds	r7, #8
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	08024dbc 	.word	0x08024dbc

08014d8c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8014d8c:	b5b0      	push	{r4, r5, r7, lr}
 8014d8e:	b08a      	sub	sp, #40	@ 0x28
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	4639      	mov	r1, r7
 8014d98:	e881 000c 	stmia.w	r1, {r2, r3}
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f7fd fc4c 	bl	801263c <_ZN8CallbackC1Ev>
 8014da4:	4a12      	ldr	r2, [pc, #72]	@ (8014df0 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E+0x64>)
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	601a      	str	r2, [r3, #0]
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2200      	movs	r2, #0
 8014dae:	711a      	strb	r2, [r3, #4]
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	3308      	adds	r3, #8
 8014db4:	2100      	movs	r1, #0
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7fe fc4c 	bl	8013654 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8014dbc:	f107 0010 	add.w	r0, r7, #16
 8014dc0:	463b      	mov	r3, r7
 8014dc2:	cb0c      	ldmia	r3, {r2, r3}
 8014dc4:	68b9      	ldr	r1, [r7, #8]
 8014dc6:	f000 f952 	bl	801506e <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	f103 0408 	add.w	r4, r3, #8
 8014dd0:	f107 0510 	add.w	r5, r7, #16
 8014dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ddc:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2201      	movs	r2, #1
 8014de4:	711a      	strb	r2, [r3, #4]
	}
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	4618      	mov	r0, r3
 8014dea:	3728      	adds	r7, #40	@ 0x28
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bdb0      	pop	{r4, r5, r7, pc}
 8014df0:	08024d9c 	.word	0x08024d9c

08014df4 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 8014df4:	b5b0      	push	{r4, r5, r7, lr}
 8014df6:	b08a      	sub	sp, #40	@ 0x28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	4639      	mov	r1, r7
 8014e00:	e881 000c 	stmia.w	r1, {r2, r3}
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7fd fc18 	bl	801263c <_ZN8CallbackC1Ev>
 8014e0c:	4a12      	ldr	r2, [pc, #72]	@ (8014e58 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE+0x64>)
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	601a      	str	r2, [r3, #0]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	711a      	strb	r2, [r3, #4]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	3308      	adds	r3, #8
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fd fd81 	bl	8012926 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 8014e24:	f107 0010 	add.w	r0, r7, #16
 8014e28:	463b      	mov	r3, r7
 8014e2a:	cb0c      	ldmia	r3, {r2, r3}
 8014e2c:	68b9      	ldr	r1, [r7, #8]
 8014e2e:	f000 f931 	bl	8015094 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f103 0408 	add.w	r4, r3, #8
 8014e38:	f107 0510 	add.w	r5, r7, #16
 8014e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e44:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	711a      	strb	r2, [r3, #4]
	}
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	4618      	mov	r0, r3
 8014e52:	3728      	adds	r7, #40	@ 0x28
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bdb0      	pop	{r4, r5, r7, pc}
 8014e58:	08024d20 	.word	0x08024d20

08014e5c <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8014e5c:	b5b0      	push	{r4, r5, r7, lr}
 8014e5e:	b08a      	sub	sp, #40	@ 0x28
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	60f8      	str	r0, [r7, #12]
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	4639      	mov	r1, r7
 8014e68:	e881 000c 	stmia.w	r1, {r2, r3}
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fd fbe4 	bl	801263c <_ZN8CallbackC1Ev>
 8014e74:	4a12      	ldr	r2, [pc, #72]	@ (8014ec0 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE+0x64>)
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	711a      	strb	r2, [r3, #4]
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	3308      	adds	r3, #8
 8014e84:	2100      	movs	r1, #0
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fd fdff 	bl	8012a8a <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8014e8c:	f107 0010 	add.w	r0, r7, #16
 8014e90:	463b      	mov	r3, r7
 8014e92:	cb0c      	ldmia	r3, {r2, r3}
 8014e94:	68b9      	ldr	r1, [r7, #8]
 8014e96:	f000 f910 	bl	80150ba <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	f103 0408 	add.w	r4, r3, #8
 8014ea0:	f107 0510 	add.w	r5, r7, #16
 8014ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ea8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014eac:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	711a      	strb	r2, [r3, #4]
	}
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3728      	adds	r7, #40	@ 0x28
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8014ec0:	08024d10 	.word	0x08024d10

08014ec4 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>:
	void addEntry(uint8_t address, RegisterEntry *entry) {
//		assert(this->entries[address] == nullptr && "Entry at this address is not NULL");
		this->entries[address] = entry;
	}
	/* -------------------------------------------------- */
	bool hasEntry(uint8_t address) {
 8014ec4:	b480      	push	{r7}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	460b      	mov	r3, r1
 8014ece:	70fb      	strb	r3, [r7, #3]
		if (this->entries[address] != NULL) {
 8014ed0:	78fb      	ldrb	r3, [r7, #3]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	3302      	adds	r3, #2
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	4413      	add	r3, r2
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d001      	beq.n	8014ee4 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh+0x20>
			return true;
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	e000      	b.n	8014ee6 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh+0x22>
		} else {
			return false;
 8014ee4:	2300      	movs	r3, #0
		}
	}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	370c      	adds	r7, #12
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr

08014ef2 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>:
	uint16_t getOutputSize(uint8_t address) {
		return this->entries[address]->getOutputSize();
	}
	/* -------------------------------------------------- */

	register_entry_type_t getType(uint8_t address) {
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b082      	sub	sp, #8
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	6078      	str	r0, [r7, #4]
 8014efa:	460b      	mov	r3, r1
 8014efc:	70fb      	strb	r3, [r7, #3]
		if (this->hasEntry(address)) {
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	3304      	adds	r3, #4
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	78fa      	ldrb	r2, [r7, #3]
 8014f08:	4611      	mov	r1, r2
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	4798      	blx	r3
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d012      	beq.n	8014f3a <_ZN22core_utils_RegisterMapILi255EE7getTypeEh+0x48>
			return this->entries[address]->getType();
 8014f14:	78fb      	ldrb	r3, [r7, #3]
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	3302      	adds	r3, #2
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	4413      	add	r3, r2
 8014f1e:	6859      	ldr	r1, [r3, #4]
 8014f20:	78fb      	ldrb	r3, [r7, #3]
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	3302      	adds	r3, #2
 8014f26:	009b      	lsls	r3, r3, #2
 8014f28:	4413      	add	r3, r2
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	3318      	adds	r3, #24
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	4608      	mov	r0, r1
 8014f34:	4798      	blx	r3
 8014f36:	4603      	mov	r3, r0
 8014f38:	e000      	b.n	8014f3c <_ZN22core_utils_RegisterMapILi255EE7getTypeEh+0x4a>
		}
		return REGISTER_ENTRY_TYPE_NONE;
 8014f3a:	2300      	movs	r3, #0
	}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3708      	adds	r7, #8
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <_ZN22core_utils_RegisterMapILi255EE12getInputSizeEh>:
	uint16_t getInputSize(uint8_t address) {
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	70fb      	strb	r3, [r7, #3]
		return this->entries[address]->getInputSize();
 8014f50:	78fb      	ldrb	r3, [r7, #3]
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	3302      	adds	r3, #2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	4413      	add	r3, r2
 8014f5a:	6859      	ldr	r1, [r3, #4]
 8014f5c:	78fb      	ldrb	r3, [r7, #3]
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	3302      	adds	r3, #2
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	4413      	add	r3, r2
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	4608      	mov	r0, r1
 8014f6e:	4798      	blx	r3
 8014f70:	4603      	mov	r3, r0
	}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3708      	adds	r7, #8
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <_ZN22core_utils_RegisterMapILi255EE5writeEhPh>:
	void write(uint8_t address, uint8_t *input) {
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b084      	sub	sp, #16
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	60f8      	str	r0, [r7, #12]
 8014f82:	460b      	mov	r3, r1
 8014f84:	607a      	str	r2, [r7, #4]
 8014f86:	72fb      	strb	r3, [r7, #11]
		if (this->hasEntry(address)) {
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	7afa      	ldrb	r2, [r7, #11]
 8014f92:	4611      	mov	r1, r2
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	4798      	blx	r3
 8014f98:	4603      	mov	r3, r0
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d010      	beq.n	8014fc0 <_ZN22core_utils_RegisterMapILi255EE5writeEhPh+0x46>
			this->entries[address]->write(input);
 8014f9e:	7afb      	ldrb	r3, [r7, #11]
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	3302      	adds	r3, #2
 8014fa4:	009b      	lsls	r3, r3, #2
 8014fa6:	4413      	add	r3, r2
 8014fa8:	6858      	ldr	r0, [r3, #4]
 8014faa:	7afb      	ldrb	r3, [r7, #11]
 8014fac:	68fa      	ldr	r2, [r7, #12]
 8014fae:	3302      	adds	r3, #2
 8014fb0:	009b      	lsls	r3, r3, #2
 8014fb2:	4413      	add	r3, r2
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	3310      	adds	r3, #16
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	6879      	ldr	r1, [r7, #4]
 8014fbe:	4798      	blx	r3
	}
 8014fc0:	bf00      	nop
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <_ZN22core_utils_RegisterMapILi255EE4readEhPh>:
	uint16_t read(uint8_t address, uint8_t *output) {
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	60f8      	str	r0, [r7, #12]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	607a      	str	r2, [r7, #4]
 8014fd4:	72fb      	strb	r3, [r7, #11]
		if (this->hasEntry(address)) {
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	3304      	adds	r3, #4
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	7afa      	ldrb	r2, [r7, #11]
 8014fe0:	4611      	mov	r1, r2
 8014fe2:	68f8      	ldr	r0, [r7, #12]
 8014fe4:	4798      	blx	r3
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d012      	beq.n	8015012 <_ZN22core_utils_RegisterMapILi255EE4readEhPh+0x4a>
			return this->entries[address]->read(output);
 8014fec:	7afb      	ldrb	r3, [r7, #11]
 8014fee:	68fa      	ldr	r2, [r7, #12]
 8014ff0:	3302      	adds	r3, #2
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	4413      	add	r3, r2
 8014ff6:	6858      	ldr	r0, [r3, #4]
 8014ff8:	7afb      	ldrb	r3, [r7, #11]
 8014ffa:	68fa      	ldr	r2, [r7, #12]
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	4413      	add	r3, r2
 8015002:	685b      	ldr	r3, [r3, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	3314      	adds	r3, #20
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	6879      	ldr	r1, [r7, #4]
 801500c:	4798      	blx	r3
 801500e:	4603      	mov	r3, r0
 8015010:	e000      	b.n	8015014 <_ZN22core_utils_RegisterMapILi255EE4readEhPh+0x4c>
		return 0;
 8015012:	2300      	movs	r3, #0
	}
 8015014:	4618      	mov	r0, r3
 8015016:	3710      	adds	r7, #16
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}

0801501c <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_>:
	uint16_t execute(uint8_t address, uint8_t *input, uint8_t *output) {
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	607a      	str	r2, [r7, #4]
 8015026:	603b      	str	r3, [r7, #0]
 8015028:	460b      	mov	r3, r1
 801502a:	72fb      	strb	r3, [r7, #11]
		if (this->entries[address] != NULL) {
 801502c:	7afb      	ldrb	r3, [r7, #11]
 801502e:	68fa      	ldr	r2, [r7, #12]
 8015030:	3302      	adds	r3, #2
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d013      	beq.n	8015064 <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_+0x48>
			return this->entries[address]->execute(input, output);
 801503c:	7afb      	ldrb	r3, [r7, #11]
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	3302      	adds	r3, #2
 8015042:	009b      	lsls	r3, r3, #2
 8015044:	4413      	add	r3, r2
 8015046:	6858      	ldr	r0, [r3, #4]
 8015048:	7afb      	ldrb	r3, [r7, #11]
 801504a:	68fa      	ldr	r2, [r7, #12]
 801504c:	3302      	adds	r3, #2
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	4413      	add	r3, r2
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	330c      	adds	r3, #12
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	6879      	ldr	r1, [r7, #4]
 801505e:	4798      	blx	r3
 8015060:	4603      	mov	r3, r0
 8015062:	e000      	b.n	8015066 <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_+0x4a>
		return 0;
 8015064:	2300      	movs	r3, #0
	}
 8015066:	4618      	mov	r0, r3
 8015068:	3710      	adds	r7, #16
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}

0801506e <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801506e:	b580      	push	{r7, lr}
 8015070:	b084      	sub	sp, #16
 8015072:	af00      	add	r7, sp, #0
 8015074:	60f8      	str	r0, [r7, #12]
 8015076:	60b9      	str	r1, [r7, #8]
 8015078:	4639      	mov	r1, r7
 801507a:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801507e:	463b      	mov	r3, r7
 8015080:	cb0c      	ldmia	r3, {r2, r3}
 8015082:	68b9      	ldr	r1, [r7, #8]
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f000 f82b 	bl	80150e0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>
    }
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	4618      	mov	r0, r3
 801508e:	3710      	adds	r7, #16
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	4639      	mov	r1, r7
 80150a0:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80150a4:	463b      	mov	r3, r7
 80150a6:	cb0c      	ldmia	r3, {r2, r3}
 80150a8:	68b9      	ldr	r1, [r7, #8]
 80150aa:	68f8      	ldr	r0, [r7, #12]
 80150ac:	f000 f836 	bl	801511c <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>
    }
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	4618      	mov	r0, r3
 80150b4:	3710      	adds	r7, #16
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b084      	sub	sp, #16
 80150be:	af00      	add	r7, sp, #0
 80150c0:	60f8      	str	r0, [r7, #12]
 80150c2:	60b9      	str	r1, [r7, #8]
 80150c4:	4639      	mov	r1, r7
 80150c6:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80150ca:	463b      	mov	r3, r7
 80150cc:	cb0c      	ldmia	r3, {r2, r3}
 80150ce:	68b9      	ldr	r1, [r7, #8]
 80150d0:	68f8      	ldr	r0, [r7, #12]
 80150d2:	f000 f841 	bl	8015158 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>
    }
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	4618      	mov	r0, r3
 80150da:	3710      	adds	r7, #16
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80150e0:	b480      	push	{r7}
 80150e2:	b085      	sub	sp, #20
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	4639      	mov	r1, r7
 80150ec:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	68ba      	ldr	r2, [r7, #8]
 80150f4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	3304      	adds	r3, #4
 80150fa:	461a      	mov	r2, r3
 80150fc:	463b      	mov	r3, r7
 80150fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015102:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	4a03      	ldr	r2, [pc, #12]	@ (8015118 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E+0x38>)
 801510a:	615a      	str	r2, [r3, #20]
    }
 801510c:	bf00      	nop
 801510e:	3714      	adds	r7, #20
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr
 8015118:	08015195 	.word	0x08015195

0801511c <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 801511c:	b480      	push	{r7}
 801511e:	b085      	sub	sp, #20
 8015120:	af00      	add	r7, sp, #0
 8015122:	60f8      	str	r0, [r7, #12]
 8015124:	60b9      	str	r1, [r7, #8]
 8015126:	4639      	mov	r1, r7
 8015128:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	3304      	adds	r3, #4
 8015136:	461a      	mov	r2, r3
 8015138:	463b      	mov	r3, r7
 801513a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801513e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	4a03      	ldr	r2, [pc, #12]	@ (8015154 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE+0x38>)
 8015146:	615a      	str	r2, [r3, #20]
    }
 8015148:	bf00      	nop
 801514a:	3714      	adds	r7, #20
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr
 8015154:	080151e9 	.word	0x080151e9

08015158 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 8015158:	b480      	push	{r7}
 801515a:	b085      	sub	sp, #20
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	4639      	mov	r1, r7
 8015164:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	68ba      	ldr	r2, [r7, #8]
 801516c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	3304      	adds	r3, #4
 8015172:	461a      	mov	r2, r3
 8015174:	463b      	mov	r3, r7
 8015176:	e893 0003 	ldmia.w	r3, {r0, r1}
 801517a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	4a03      	ldr	r2, [pc, #12]	@ (8015190 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE+0x38>)
 8015182:	615a      	str	r2, [r3, #20]
    }
 8015184:	bf00      	nop
 8015186:	3714      	adds	r7, #20
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr
 8015190:	0801523b 	.word	0x0801523b

08015194 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	685b      	ldr	r3, [r3, #4]
 80151ac:	105b      	asrs	r3, r3, #1
 80151ae:	461a      	mov	r2, r3
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	1898      	adds	r0, r3, r2
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	f003 0301 	and.w	r3, r3, #1
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d00b      	beq.n	80151d8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x44>
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	105b      	asrs	r3, r3, #1
 80151c6:	461a      	mov	r2, r3
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	4413      	add	r3, r2
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	693a      	ldr	r2, [r7, #16]
 80151d0:	6812      	ldr	r2, [r2, #0]
 80151d2:	4413      	add	r3, r2
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	e001      	b.n	80151dc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x48>
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	6879      	ldr	r1, [r7, #4]
 80151de:	4798      	blx	r3
 80151e0:	bf00      	nop
    }
 80151e2:	3718      	adds	r7, #24
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	105b      	asrs	r3, r3, #1
 8015200:	461a      	mov	r2, r3
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	1899      	adds	r1, r3, r2
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	f003 0301 	and.w	r3, r3, #1
 801520e:	2b00      	cmp	r3, #0
 8015210:	d00b      	beq.n	801522a <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x42>
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	105b      	asrs	r3, r3, #1
 8015218:	461a      	mov	r2, r3
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	4413      	add	r3, r2
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	68ba      	ldr	r2, [r7, #8]
 8015222:	6812      	ldr	r2, [r2, #0]
 8015224:	4413      	add	r3, r2
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	e001      	b.n	801522e <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x46>
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	4608      	mov	r0, r1
 8015230:	4798      	blx	r3
 8015232:	bf00      	nop
    }
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}

0801523a <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801523a:	b580      	push	{r7, lr}
 801523c:	b086      	sub	sp, #24
 801523e:	af00      	add	r7, sp, #0
 8015240:	60f8      	str	r0, [r7, #12]
 8015242:	60b9      	str	r1, [r7, #8]
 8015244:	4613      	mov	r3, r2
 8015246:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	105b      	asrs	r3, r3, #1
 8015256:	461a      	mov	r2, r3
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	1898      	adds	r0, r3, r2
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	f003 0301 	and.w	r3, r3, #1
 8015264:	2b00      	cmp	r3, #0
 8015266:	d00b      	beq.n	8015280 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x46>
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	105b      	asrs	r3, r3, #1
 801526e:	461a      	mov	r2, r3
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	4413      	add	r3, r2
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	693a      	ldr	r2, [r7, #16]
 8015278:	6812      	ldr	r2, [r2, #0]
 801527a:	4413      	add	r3, r2
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	e001      	b.n	8015284 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x4a>
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	88fa      	ldrh	r2, [r7, #6]
 8015286:	4611      	mov	r1, r2
 8015288:	4798      	blx	r3
 801528a:	bf00      	nop
    }
 801528c:	3718      	adds	r7, #24
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
	...

08015294 <_Z41__static_initialization_and_destruction_0ii>:
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2b01      	cmp	r3, #1
 80152a2:	d108      	bne.n	80152b6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d103      	bne.n	80152b6 <_Z41__static_initialization_and_destruction_0ii+0x22>
core_utils_RegisterMap<255> register_map = core_utils_RegisterMap<255>(
 80152ae:	2101      	movs	r1, #1
 80152b0:	4803      	ldr	r0, [pc, #12]	@ (80152c0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80152b2:	f7ff fd4b 	bl	8014d4c <_ZN22core_utils_RegisterMapILi255EEC1Eh>
}
 80152b6:	bf00      	nop
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	2401f028 	.word	0x2401f028

080152c4 <_ZN22core_utils_RegisterMapILi255EE8addEntryEhP13RegisterEntry>:
	void addEntry(uint8_t address, RegisterEntry *entry) {
 80152c4:	b480      	push	{r7}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	460b      	mov	r3, r1
 80152ce:	607a      	str	r2, [r7, #4]
 80152d0:	72fb      	strb	r3, [r7, #11]
		this->entries[address] = entry;
 80152d2:	7afb      	ldrb	r3, [r7, #11]
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	3302      	adds	r3, #2
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	4413      	add	r3, r2
 80152dc:	687a      	ldr	r2, [r7, #4]
 80152de:	605a      	str	r2, [r3, #4]
	}
 80152e0:	bf00      	nop
 80152e2:	3714      	adds	r7, #20
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr

080152ec <_ZN22core_utils_RegisterMapILi255EE13getOutputSizeEh>:
	uint16_t getOutputSize(uint8_t address) {
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	460b      	mov	r3, r1
 80152f6:	70fb      	strb	r3, [r7, #3]
		return this->entries[address]->getOutputSize();
 80152f8:	78fb      	ldrb	r3, [r7, #3]
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	3302      	adds	r3, #2
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	4413      	add	r3, r2
 8015302:	6859      	ldr	r1, [r3, #4]
 8015304:	78fb      	ldrb	r3, [r7, #3]
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	3302      	adds	r3, #2
 801530a:	009b      	lsls	r3, r3, #2
 801530c:	4413      	add	r3, r2
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	3304      	adds	r3, #4
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4608      	mov	r0, r1
 8015318:	4798      	blx	r3
 801531a:	4603      	mov	r3, r0
	}
 801531c:	4618      	mov	r0, r3
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <_GLOBAL__sub_I_register_map>:
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
 8015328:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801532c:	2001      	movs	r0, #1
 801532e:	f7ff ffb1 	bl	8015294 <_Z41__static_initialization_and_destruction_0ii>
 8015332:	bd80      	pop	{r7, pc}

08015334 <_ZN32twipr_balancing_control_config_tC1Ev>:

typedef enum twipr_balancing_control_callback_id_t {
	TWIPR_BALANCING_CONTROL_CALLBACK_ERROR = 1,
} twipr_balancing_control_callback_id_t;

typedef struct twipr_balancing_control_config_t {
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	4618      	mov	r0, r3
 8015340:	2320      	movs	r3, #32
 8015342:	461a      	mov	r2, r3
 8015344:	2100      	movs	r1, #0
 8015346:	f00d fbec 	bl	8022b22 <memset>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f04f 0200 	mov.w	r2, #0
 8015350:	621a      	str	r2, [r3, #32]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	4618      	mov	r0, r3
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <_ZN22TWIPR_BalancingControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include <twipr_balancing_control.h>

TWIPR_BalancingControl::TWIPR_BalancingControl() {
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	3304      	adds	r3, #4
 8015368:	4618      	mov	r0, r3
 801536a:	f7ff ffe3 	bl	8015334 <_ZN32twipr_balancing_control_config_tC1Ev>
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	2200      	movs	r2, #0
 8015372:	705a      	strb	r2, [r3, #1]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_NONE;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2200      	movs	r2, #0
 8015378:	701a      	strb	r2, [r3, #0]
}
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	4618      	mov	r0, r3
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::init(twipr_balancing_control_config_t config) {
 8015384:	b084      	sub	sp, #16
 8015386:	b4b0      	push	{r4, r5, r7}
 8015388:	b083      	sub	sp, #12
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
 801538e:	f107 001c 	add.w	r0, r7, #28
 8015392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	1d1c      	adds	r4, r3, #4
 801539a:	f107 051c 	add.w	r5, r7, #28
 801539e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153a6:	682b      	ldr	r3, [r5, #0]
 80153a8:	6023      	str	r3, [r4, #0]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2201      	movs	r2, #1
 80153ae:	701a      	strb	r2, [r3, #0]
}
 80153b0:	bf00      	nop
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bcb0      	pop	{r4, r5, r7}
 80153b8:	b004      	add	sp, #16
 80153ba:	4770      	bx	lr

080153bc <_ZN22TWIPR_BalancingControl5startEv>:

/* ========================================================================= */
void TWIPR_BalancingControl::start() {
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f993 3000 	ldrsb.w	r3, [r3]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d005      	beq.n	80153da <_ZN22TWIPR_BalancingControl5startEv+0x1e>
			|| this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR) {
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f993 3000 	ldrsb.w	r3, [r3]
 80153d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153d8:	d103      	bne.n	80153e2 <_ZN22TWIPR_BalancingControl5startEv+0x26>
		twipr_error_handler(TWIPR_BALANCING_CONTROL_ERROR_INIT);
 80153da:	f240 6002 	movw	r0, #1538	@ 0x602
 80153de:	f001 ff47 	bl	8017270 <_Z19twipr_error_handlerm>
	}
	this->status = TWIPR_BALANCING_CONTROL_STATUS_RUNNING;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2202      	movs	r2, #2
 80153e6:	701a      	strb	r2, [r3, #0]
}
 80153e8:	bf00      	nop
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::update(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 80153f0:	b084      	sub	sp, #16
 80153f2:	b580      	push	{r7, lr}
 80153f4:	b088      	sub	sp, #32
 80153f6:	af04      	add	r7, sp, #16
 80153f8:	60f8      	str	r0, [r7, #12]
 80153fa:	f107 001c 	add.w	r0, r7, #28
 80153fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015402:	eeb0 7a40 	vmov.f32	s14, s0
 8015406:	eef0 7a60 	vmov.f32	s15, s1
 801540a:	ed87 7a01 	vstr	s14, [r7, #4]
 801540e:	edc7 7a02 	vstr	s15, [r7, #8]

	switch (this->status) {
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	f993 3000 	ldrsb.w	r3, [r3]
 8015418:	3301      	adds	r3, #1
 801541a:	2b03      	cmp	r3, #3
 801541c:	d858      	bhi.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 801541e:	a201      	add	r2, pc, #4	@ (adr r2, 8015424 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x34>)
 8015420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015424:	08015459 	.word	0x08015459
 8015428:	08015435 	.word	0x08015435
 801542c:	08015447 	.word	0x08015447
 8015430:	0801546b 	.word	0x0801546b
	case TWIPR_BALANCING_CONTROL_STATUS_NONE: {
		output->u_1 = 0;
 8015434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015436:	f04f 0200 	mov.w	r2, #0
 801543a:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 801543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543e:	f04f 0200 	mov.w	r2, #0
 8015442:	605a      	str	r2, [r3, #4]
		break;
 8015444:	e044      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_IDLE: {
		output->u_1 = 0;
 8015446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015448:	f04f 0200 	mov.w	r2, #0
 801544c:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 801544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015450:	f04f 0200 	mov.w	r2, #0
 8015454:	605a      	str	r2, [r3, #4]
		break;
 8015456:	e03b      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_ERROR: {
		output->u_1 = 0;
 8015458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801545a:	f04f 0200 	mov.w	r2, #0
 801545e:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8015460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015462:	f04f 0200 	mov.w	r2, #0
 8015466:	605a      	str	r2, [r3, #4]
		break;
 8015468:	e032      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	785b      	ldrb	r3, [r3, #1]
 801546e:	2b02      	cmp	r3, #2
 8015470:	d016      	beq.n	80154a0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xb0>
 8015472:	2b02      	cmp	r3, #2
 8015474:	dc2c      	bgt.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8015476:	2b00      	cmp	r3, #0
 8015478:	d002      	beq.n	8015480 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x90>
 801547a:	2b01      	cmp	r3, #1
 801547c:	d009      	beq.n	8015492 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xa2>
			this->_calculateOutput(state, input, output);
		}
		}
	}
	}
}
 801547e:	e027      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = 0;
 8015480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015482:	f04f 0200 	mov.w	r2, #0
 8015486:	601a      	str	r2, [r3, #0]
			output->u_2 = 0;
 8015488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801548a:	f04f 0200 	mov.w	r2, #0
 801548e:	605a      	str	r2, [r3, #4]
			break;
 8015490:	e01e      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = input.u_1;
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015496:	601a      	str	r2, [r3, #0]
			output->u_2 = input.u_2;
 8015498:	68ba      	ldr	r2, [r7, #8]
 801549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549c:	605a      	str	r2, [r3, #4]
			break;
 801549e:	e017      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			this->_calculateOutput(state, input, output);
 80154a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80154a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80154a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154aa:	9302      	str	r3, [sp, #8]
 80154ac:	466a      	mov	r2, sp
 80154ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80154b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80154b6:	e882 0003 	stmia.w	r2, {r0, r1}
 80154ba:	f107 031c 	add.w	r3, r7, #28
 80154be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80154c0:	eeb0 0a47 	vmov.f32	s0, s14
 80154c4:	eef0 0a67 	vmov.f32	s1, s15
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	f000 f809 	bl	80154e0 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
}
 80154ce:	e7ff      	b.n	80154d0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 80154d0:	bf00      	nop
 80154d2:	3710      	adds	r7, #16
 80154d4:	46bd      	mov	sp, r7
 80154d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80154da:	b004      	add	sp, #16
 80154dc:	4770      	bx	lr
 80154de:	bf00      	nop

080154e0 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::_calculateOutput(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 80154e0:	b084      	sub	sp, #16
 80154e2:	b480      	push	{r7}
 80154e4:	b085      	sub	sp, #20
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	60f8      	str	r0, [r7, #12]
 80154ea:	f107 001c 	add.w	r0, r7, #28
 80154ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80154f2:	eeb0 7a40 	vmov.f32	s14, s0
 80154f6:	eef0 7a60 	vmov.f32	s15, s1
 80154fa:	ed87 7a01 	vstr	s14, [r7, #4]
 80154fe:	edc7 7a02 	vstr	s15, [r7, #8]
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	ed93 7a01 	vldr	s14, [r3, #4]
 8015508:	edd7 7a07 	vldr	s15, [r7, #28]
 801550c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	edd3 6a02 	vldr	s13, [r3, #8]
 8015516:	edd7 7a08 	vldr	s15, [r7, #32]
 801551a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801551e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[2] * state.theta_dot
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	edd3 6a03 	vldr	s13, [r3, #12]
 8015528:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801552c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015530:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[3] * state.psi_dot;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	edd3 6a04 	vldr	s13, [r3, #16]
 801553a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801553e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015542:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8015546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015548:	edc3 7a00 	vstr	s15, [r3]

	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	ed93 7a05 	vldr	s14, [r3, #20]
 8015552:	edd7 7a07 	vldr	s15, [r7, #28]
 8015556:	ee27 7a27 	vmul.f32	s14, s14, s15
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	edd3 6a06 	vldr	s13, [r3, #24]
 8015560:	edd7 7a08 	vldr	s15, [r7, #32]
 8015564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015568:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[6] * state.theta_dot
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	edd3 6a07 	vldr	s13, [r3, #28]
 8015572:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801557a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[7] * state.psi_dot;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	edd3 6a08 	vldr	s13, [r3, #32]
 8015584:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801558c:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 8015590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015592:	edc3 7a01 	vstr	s15, [r3, #4]

	output->u_1 = output->u_1 + input.u_1;
 8015596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015598:	ed93 7a00 	vldr	s14, [r3]
 801559c:	edd7 7a01 	vldr	s15, [r7, #4]
 80155a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a6:	edc3 7a00 	vstr	s15, [r3]
	output->u_2 = output->u_2 + input.u_2;
 80155aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80155b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80155b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ba:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80155be:	bf00      	nop
 80155c0:	3714      	adds	r7, #20
 80155c2:	46bd      	mov	sp, r7
 80155c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c8:	b004      	add	sp, #16
 80155ca:	4770      	bx	lr

080155cc <_ZN22TWIPR_BalancingControl4stopEv>:
void TWIPR_BalancingControl::reset() {
	this->stop();
	this->start();
}
/* ========================================================================= */
void TWIPR_BalancingControl::stop() {
 80155cc:	b480      	push	{r7}
 80155ce:	b083      	sub	sp, #12
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2200      	movs	r2, #0
 80155d8:	705a      	strb	r2, [r3, #1]
//	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
}
 80155da:	bf00      	nop
 80155dc:	370c      	adds	r7, #12
 80155de:	46bd      	mov	sp, r7
 80155e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e4:	4770      	bx	lr

080155e6 <_ZN22TWIPR_BalancingControl5set_KEPf>:
/* ========================================================================= */
void TWIPR_BalancingControl::set_K(float K[8]) {
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b082      	sub	sp, #8
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	6078      	str	r0, [r7, #4]
 80155ee:	6039      	str	r1, [r7, #0]
	memcpy(this->config.K, K, sizeof(float) * 8);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	3304      	adds	r3, #4
 80155f4:	2220      	movs	r2, #32
 80155f6:	6839      	ldr	r1, [r7, #0]
 80155f8:	4618      	mov	r0, r3
 80155fa:	f00d fb7a 	bl	8022cf2 <memcpy>
}
 80155fe:	bf00      	nop
 8015600:	3708      	adds	r7, #8
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}

08015606 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::setMode(twipr_balancing_control_mode_t mode) {
 8015606:	b480      	push	{r7}
 8015608:	b083      	sub	sp, #12
 801560a:	af00      	add	r7, sp, #0
 801560c:	6078      	str	r0, [r7, #4]
 801560e:	460b      	mov	r3, r1
 8015610:	70fb      	strb	r3, [r7, #3]

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR){
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f993 3000 	ldrsb.w	r3, [r3]
 8015618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801561c:	d008      	beq.n	8015630 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2a>
		return;
	}

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE){
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f993 3000 	ldrsb.w	r3, [r3]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d005      	beq.n	8015634 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2e>
		return;
	}
	this->mode = mode;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	78fa      	ldrb	r2, [r7, #3]
 801562c:	705a      	strb	r2, [r3, #1]
 801562e:	e002      	b.n	8015636 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8015630:	bf00      	nop
 8015632:	e000      	b.n	8015636 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8015634:	bf00      	nop
}
 8015636:	370c      	adds	r7, #12
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <_ZN25twipr_control_callbacks_tC1Ev>:
	twipr_control_mode_t control_mode;
	twipr_control_external_input_t external_input;
	twipr_control_data_t data;
} twipr_logging_control_t;

typedef struct twipr_control_callbacks_t {
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	4618      	mov	r0, r3
 801564c:	f7fd f984 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	3320      	adds	r3, #32
 8015654:	4618      	mov	r0, r3
 8015656:	f000 fdcf 	bl	80161f8 <_ZN19core_utils_CallbackIvmEC1Ev>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	4618      	mov	r0, r3
 801565e:	3708      	adds	r7, #8
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <_ZN20TWIPR_ControlManagerC1Ev>:

/* ======================================================== */
//core_utils_RegisterEntry<uint8_t, twipr_control_mode_t> regf_set_mode(&register_map, 0x05, manager, &TWIPR_ControlManager::setMode);

/* ======================================================== */
TWIPR_ControlManager::TWIPR_ControlManager() {
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2200      	movs	r2, #0
 8015670:	701a      	strb	r2, [r3, #0]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2200      	movs	r2, #0
 8015676:	705a      	strb	r2, [r3, #1]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	3314      	adds	r3, #20
 801567c:	4618      	mov	r0, r3
 801567e:	f7ff fe6d 	bl	801535c <_ZN22TWIPR_BalancingControlC1Ev>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	3374      	adds	r3, #116	@ 0x74
 8015686:	4618      	mov	r0, r3
 8015688:	f000 fe8b 	bl	80163a2 <_ZN18TWIPR_SpeedControlC1Ev>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2201      	movs	r2, #1
 8015690:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 801569a:	4618      	mov	r0, r3
 801569c:	f7ff ffd0 	bl	8015640 <_ZN25twipr_control_callbacks_tC1Ev>

}
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
	...

080156ac <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t>:

/* ======================================================== */
void TWIPR_ControlManager::init(twipr_control_init_config_t config) {
 80156ac:	b084      	sub	sp, #16
 80156ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156b0:	b0c7      	sub	sp, #284	@ 0x11c
 80156b2:	af12      	add	r7, sp, #72	@ 0x48
 80156b4:	6078      	str	r0, [r7, #4]
 80156b6:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 80156ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	manager = this;
 80156be:	4a3f      	ldr	r2, [pc, #252]	@ (80157bc <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t+0x110>)
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6013      	str	r3, [r2, #0]
	this->config = config;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	1d1c      	adds	r4, r3, #4
 80156c8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80156cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->_estimation = config.estimation;
 80156d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

	// Initialize the balancing controller
	twipr_balancing_control_config_t balancing_control_config;
 80156dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80156e0:	2224      	movs	r2, #36	@ 0x24
 80156e2:	2100      	movs	r1, #0
 80156e4:	4618      	mov	r0, r3
 80156e6:	f00d fa1c 	bl	8022b22 <memset>
	this->_balancing_control.init(balancing_control_config);
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f103 0614 	add.w	r6, r3, #20
 80156f0:	466d      	mov	r5, sp
 80156f2:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 80156f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80156fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80156fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8015702:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8015706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015708:	4630      	mov	r0, r6
 801570a:	f7ff fe3b 	bl	8015384 <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>

	twipr_speed_control_forward_config_t speed_control_forward_config = { .Kp =
 801570e:	4b2c      	ldr	r3, [pc, #176]	@ (80157c0 <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t+0x114>)
 8015710:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8015714:	461d      	mov	r5, r3
 8015716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801571a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801571c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801571e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015722:	e884 0003 	stmia.w	r4, {r0, r1}
			0, .Ki = 0, .Kd = 0, .Ts = TWIPR_CONTROL_TS_MS / 1000.0 };

	twipr_speed_control_turn_config_t speed_control_turn_config = { .Kp = 0,
 8015726:	4b27      	ldr	r3, [pc, #156]	@ (80157c4 <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t+0x118>)
 8015728:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 801572c:	461d      	mov	r5, r3
 801572e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015736:	e895 0003 	ldmia.w	r5, {r0, r1}
 801573a:	e884 0003 	stmia.w	r4, {r0, r1}
			.Ki = 0, .Kd = 0, .Ts = TWIPR_CONTROL_TS_MS / 1000.0 };

	twipr_speed_control_config_t speed_control_config = { .forward_config =
			speed_control_forward_config, .turn_config =
			speed_control_turn_config };
 801573e:	f107 040c 	add.w	r4, r7, #12
 8015742:	f107 0584 	add.w	r5, r7, #132	@ 0x84
 8015746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801574a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801574c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801574e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015752:	e884 0003 	stmia.w	r4, {r0, r1}
 8015756:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 801575a:	f107 055c 	add.w	r5, r7, #92	@ 0x5c
 801575e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015766:	e895 0003 	ldmia.w	r5, {r0, r1}
 801576a:	e884 0003 	stmia.w	r4, {r0, r1}

	this->_speed_control.init(speed_control_config);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f103 0474 	add.w	r4, r3, #116	@ 0x74
 8015774:	4668      	mov	r0, sp
 8015776:	f107 0318 	add.w	r3, r7, #24
 801577a:	2244      	movs	r2, #68	@ 0x44
 801577c:	4619      	mov	r1, r3
 801577e:	f00d fab8 	bl	8022cf2 <memcpy>
 8015782:	f107 030c 	add.w	r3, r7, #12
 8015786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015788:	4620      	mov	r0, r4
 801578a:	f000 fe21 	bl	80163d0 <_ZN18TWIPR_SpeedControl4initE28twipr_speed_control_config_t>

	this->status = TWIPR_CONTROL_STATUS_IDLE;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2200      	movs	r2, #0
 8015792:	701a      	strb	r2, [r3, #0]
	this->mode = TWIPR_CONTROL_MODE_OFF;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2200      	movs	r2, #0
 8015798:	705a      	strb	r2, [r3, #1]

	this->_resetExternalInput();
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f000 fce5 	bl	801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f000 fd14 	bl	80161ce <_ZN20TWIPR_ControlManager12_resetOutputEv>
	this->_tick = 0;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2200      	movs	r2, #0
 80157aa:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8

}
 80157ae:	bf00      	nop
 80157b0:	37d4      	adds	r7, #212	@ 0xd4
 80157b2:	46bd      	mov	sp, r7
 80157b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157b8:	b004      	add	sp, #16
 80157ba:	4770      	bx	lr
 80157bc:	2401f444 	.word	0x2401f444
 80157c0:	080249ac 	.word	0x080249ac
 80157c4:	080249d4 	.word	0x080249d4

080157c8 <_ZN20TWIPR_ControlManager5startEv>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::start() {
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
	this->status = TWIPR_CONTROL_STATUS_RUNNING;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2201      	movs	r2, #1
 80157d4:	701a      	strb	r2, [r3, #0]
	this->_balancing_control.start();
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	3314      	adds	r3, #20
 80157da:	4618      	mov	r0, r3
 80157dc:	f7ff fdee 	bl	80153bc <_ZN22TWIPR_BalancingControl5startEv>
	return 1;
 80157e0:	2301      	movs	r3, #1
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <_ZN20TWIPR_ControlManager4stopEv>:

/* ======================================================== */

/* ======================================================== */
void TWIPR_ControlManager::stop() {
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b082      	sub	sp, #8
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]

	// Stop the balancing controller
	this->_balancing_control.stop();
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	3314      	adds	r3, #20
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7ff fee8 	bl	80155cc <_ZN22TWIPR_BalancingControl4stopEv>

	// Set the own state to idle
	this->mode = TWIPR_CONTROL_MODE_OFF;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2200      	movs	r2, #0
 8015800:	705a      	strb	r2, [r3, #1]

	// Set the input to 0
	this->_resetExternalInput();
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 fcb1 	bl	801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>

}
 8015808:	bf00      	nop
 801580a:	3708      	adds	r7, #8
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <_ZN20TWIPR_ControlManager6updateEv>:
void TWIPR_ControlManager::reset() {
	twipr_error_handler(0);
}

/* ======================================================== */
void TWIPR_ControlManager::update() {
 8015810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015812:	b097      	sub	sp, #92	@ 0x5c
 8015814:	af08      	add	r7, sp, #32
 8015816:	61f8      	str	r0, [r7, #28]

	// Read the dynamic state from the estimator
	this->_dynamic_state = this->_estimation->getState();
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 801581e:	69fc      	ldr	r4, [r7, #28]
 8015820:	463b      	mov	r3, r7
 8015822:	4611      	mov	r1, r2
 8015824:	4618      	mov	r0, r3
 8015826:	f001 fff1 	bl	801780c <_ZN16TWIPR_Estimation8getStateEv>
 801582a:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 801582e:	463d      	mov	r5, r7
 8015830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015834:	682b      	ldr	r3, [r5, #0]
 8015836:	6023      	str	r3, [r4, #0]

	// Check for errors
	// TODO

	// Initialize the drive input
	twipr_control_output_t control_output = { 0, 0 };
 8015838:	f04f 0300 	mov.w	r3, #0
 801583c:	623b      	str	r3, [r7, #32]
 801583e:	f04f 0300 	mov.w	r3, #0
 8015842:	627b      	str	r3, [r7, #36]	@ 0x24

	switch (this->status) {
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	f993 3000 	ldrsb.w	r3, [r3]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d020      	beq.n	8015890 <_ZN20TWIPR_ControlManager6updateEv+0x80>
 801584e:	2b01      	cmp	r3, #1
 8015850:	f300 808e 	bgt.w	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
 8015854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015858:	d002      	beq.n	8015860 <_ZN20TWIPR_ControlManager6updateEv+0x50>
 801585a:	2b00      	cmp	r3, #0
 801585c:	d00c      	beq.n	8015878 <_ZN20TWIPR_ControlManager6updateEv+0x68>
 801585e:	e087      	b.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
	case (TWIPR_CONTROL_STATUS_ERROR): {
		//
		this->_step_error();
 8015860:	69f8      	ldr	r0, [r7, #28]
 8015862:	f000 faaa 	bl	8015dba <_ZN20TWIPR_ControlManager11_step_errorEv>
 8015866:	eeb0 7a40 	vmov.f32	s14, s0
 801586a:	eef0 7a60 	vmov.f32	s15, s1
 801586e:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8015872:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		break;
 8015876:	e07b      	b.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
	}
	case (TWIPR_CONTROL_STATUS_IDLE): {
		//
		this->_step_idle();
 8015878:	69f8      	ldr	r0, [r7, #28]
 801587a:	f000 fa79 	bl	8015d70 <_ZN20TWIPR_ControlManager10_step_idleEv>
 801587e:	eeb0 7a40 	vmov.f32	s14, s0
 8015882:	eef0 7a60 	vmov.f32	s15, s1
 8015886:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 801588a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		break;
 801588e:	e06f      	b.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
	}
	case (TWIPR_CONTROL_STATUS_RUNNING): {

		switch (this->mode) {
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	785b      	ldrb	r3, [r3, #1]
 8015894:	2b03      	cmp	r3, #3
 8015896:	d86b      	bhi.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
 8015898:	a201      	add	r2, pc, #4	@ (adr r2, 80158a0 <_ZN20TWIPR_ControlManager6updateEv+0x90>)
 801589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589e:	bf00      	nop
 80158a0:	080158b1 	.word	0x080158b1
 80158a4:	080158c9 	.word	0x080158c9
 80158a8:	080158f5 	.word	0x080158f5
 80158ac:	08015933 	.word	0x08015933
		case (TWIPR_CONTROL_MODE_OFF): {
			control_output = this->_step_off();
 80158b0:	69f8      	ldr	r0, [r7, #28]
 80158b2:	f000 fa0e 	bl	8015cd2 <_ZN20TWIPR_ControlManager9_step_offEv>
 80158b6:	eeb0 7a40 	vmov.f32	s14, s0
 80158ba:	eef0 7a60 	vmov.f32	s15, s1
 80158be:	ed87 7a08 	vstr	s14, [r7, #32]
 80158c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			break;
 80158c6:	e053      	b.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
		}
		case (TWIPR_CONTROL_MODE_DIRECT): {
			control_output = this->_step_direct(this->_external_input);
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	466c      	mov	r4, sp
 80158cc:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 80158d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80158d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80158d6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80158da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80158dc:	69f8      	ldr	r0, [r7, #28]
 80158de:	f000 fa1d 	bl	8015d1c <_ZN20TWIPR_ControlManager12_step_directE30twipr_control_external_input_t>
 80158e2:	eeb0 7a40 	vmov.f32	s14, s0
 80158e6:	eef0 7a60 	vmov.f32	s15, s1
 80158ea:	ed87 7a08 	vstr	s14, [r7, #32]
 80158ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			break;
 80158f2:	e03d      	b.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
		}
		case (TWIPR_CONTROL_MODE_BALANCING): {
			control_output = this->_step_balancing(_external_input,
 80158f4:	69fe      	ldr	r6, [r7, #28]
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	ad03      	add	r5, sp, #12
 80158fa:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
 80158fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	602b      	str	r3, [r5, #0]
 8015906:	466c      	mov	r4, sp
 8015908:	f506 73ac 	add.w	r3, r6, #344	@ 0x158
 801590c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015914:	f506 73a6 	add.w	r3, r6, #332	@ 0x14c
 8015918:	cb0e      	ldmia	r3, {r1, r2, r3}
 801591a:	69f8      	ldr	r0, [r7, #28]
 801591c:	f000 fa72 	bl	8015e04 <_ZN20TWIPR_ControlManager15_step_balancingE30twipr_control_external_input_t24twipr_estimation_state_t>
 8015920:	eeb0 7a40 	vmov.f32	s14, s0
 8015924:	eef0 7a60 	vmov.f32	s15, s1
 8015928:	ed87 7a08 	vstr	s14, [r7, #32]
 801592c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
					_dynamic_state);
			break;
 8015930:	e01e      	b.n	8015970 <_ZN20TWIPR_ControlManager6updateEv+0x160>
		}
		case (TWIPR_CONTROL_MODE_VELOCITY): {
//			control_output = this->_step_balancing(_external_input,
//								_dynamic_state);
			control_output = this->_step_velocity(_external_input,
 8015932:	69fe      	ldr	r6, [r7, #28]
 8015934:	69fb      	ldr	r3, [r7, #28]
 8015936:	ad03      	add	r5, sp, #12
 8015938:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
 801593c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801593e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015940:	6823      	ldr	r3, [r4, #0]
 8015942:	602b      	str	r3, [r5, #0]
 8015944:	466c      	mov	r4, sp
 8015946:	f506 73ac 	add.w	r3, r6, #344	@ 0x158
 801594a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801594e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015952:	f506 73a6 	add.w	r3, r6, #332	@ 0x14c
 8015956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015958:	69f8      	ldr	r0, [r7, #28]
 801595a:	f000 faa7 	bl	8015eac <_ZN20TWIPR_ControlManager14_step_velocityE30twipr_control_external_input_t24twipr_estimation_state_t>
 801595e:	eeb0 7a40 	vmov.f32	s14, s0
 8015962:	eef0 7a60 	vmov.f32	s15, s1
 8015966:	ed87 7a08 	vstr	s14, [r7, #32]
 801596a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
					_dynamic_state);
			break;
 801596e:	bf00      	nop
		}

	}
	}

	this->_data.input_left = control_output.u_left;
 8015970:	6a3a      	ldr	r2, [r7, #32]
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	this->_data.input_right = control_output.u_right;
 8015978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	// Limit the Output
	control_output.u_left = limit(control_output.u_left,
 8015980:	edd7 7a08 	vldr	s15, [r7, #32]
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	ed93 7a03 	vldr	s14, [r3, #12]
 801598a:	eef0 0a47 	vmov.f32	s1, s14
 801598e:	eeb0 0a67 	vmov.f32	s0, s15
 8015992:	f00a fe59 	bl	8020648 <_Z5limitff>
 8015996:	eef0 7a40 	vmov.f32	s15, s0
 801599a:	edc7 7a08 	vstr	s15, [r7, #32]
			this->config.max_torque);
	control_output.u_right = limit(control_output.u_right,
 801599e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80159a8:	eef0 0a47 	vmov.f32	s1, s14
 80159ac:	eeb0 0a67 	vmov.f32	s0, s15
 80159b0:	f00a fe4a 	bl	8020648 <_Z5limitff>
 80159b4:	eef0 7a40 	vmov.f32	s15, s0
 80159b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			this->config.max_torque);

	// Write the output to the data
	this->_data.output_left = control_output.u_left;
 80159bc:	6a3a      	ldr	r2, [r7, #32]
 80159be:	69fb      	ldr	r3, [r7, #28]
 80159c0:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	this->_data.output_right = control_output.u_right;
 80159c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159c6:	69fb      	ldr	r3, [r7, #28]
 80159c8:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

//	control_output.u_left = 0;
//	control_output.u_right = 0;
	// Write the output to the motors
	this->_setTorque(control_output);
 80159cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80159d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80159d4:	eeb0 0a47 	vmov.f32	s0, s14
 80159d8:	eef0 0a67 	vmov.f32	s1, s15
 80159dc:	69f8      	ldr	r0, [r7, #28]
 80159de:	f000 fb78 	bl	80160d2 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>

	// Increase the tick
	this->_tick++;
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 80159e8:	1c5a      	adds	r2, r3, #1
 80159ea:	69fb      	ldr	r3, [r7, #28]
 80159ec:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8

	// Call the step callbacks
	if (this->_callbacks.step.registered) {
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d009      	beq.n	8015a0e <_ZN20TWIPR_ControlManager6updateEv+0x1fe>
		this->_callbacks.step.call(this->_tick);
 80159fa:	69fb      	ldr	r3, [r7, #28]
 80159fc:	f503 72e4 	add.w	r2, r3, #456	@ 0x1c8
 8015a00:	69fb      	ldr	r3, [r7, #28]
 8015a02:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8015a06:	4619      	mov	r1, r3
 8015a08:	4610      	mov	r0, r2
 8015a0a:	f000 fc13 	bl	8016234 <_ZN19core_utils_CallbackIvmE4callEm>
	}

}
 8015a0e:	bf00      	nop
 8015a10:	373c      	adds	r7, #60	@ 0x3c
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a16:	bf00      	nop

08015a18 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t>:

/* ======================================================== */
uint8_t TWIPR_ControlManager::setMode(twipr_control_mode_t mode) {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	460b      	mov	r3, r1
 8015a22:	70fb      	strb	r3, [r7, #3]

	// Setting mode should only work while running
	if (this->status == TWIPR_CONTROL_STATUS_IDLE) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f993 3000 	ldrsb.w	r3, [r3]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d101      	bne.n	8015a32 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x1a>
		return 0;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	e03c      	b.n	8015aac <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x94>
	}
	if (this->status == TWIPR_CONTROL_STATUS_ERROR) {
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f993 3000 	ldrsb.w	r3, [r3]
 8015a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a3c:	d101      	bne.n	8015a42 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x2a>
		return 0;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	e034      	b.n	8015aac <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x94>
	}

	this->mode = mode;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	78fa      	ldrb	r2, [r7, #3]
 8015a46:	705a      	strb	r2, [r3, #1]

	// Switch the mode of the balancing controller to the appropriate mode
	switch (this->mode) {
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	785b      	ldrb	r3, [r3, #1]
 8015a4c:	2b03      	cmp	r3, #3
 8015a4e:	d829      	bhi.n	8015aa4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
 8015a50:	a201      	add	r2, pc, #4	@ (adr r2, 8015a58 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x40>)
 8015a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a56:	bf00      	nop
 8015a58:	08015a69 	.word	0x08015a69
 8015a5c:	08015a71 	.word	0x08015a71
 8015a60:	08015a7f 	.word	0x08015a7f
 8015a64:	08015a8d 	.word	0x08015a8d
	case TWIPR_CONTROL_MODE_OFF: {
		this->stop();
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	f7ff febe 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
		break;
 8015a6e:	e019      	b.n	8015aa4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
	case TWIPR_CONTROL_MODE_DIRECT: {
//		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
//			this->config.drive->start();
//		}

		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_DIRECT);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	3314      	adds	r3, #20
 8015a74:	2101      	movs	r1, #1
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7ff fdc5 	bl	8015606 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8015a7c:	e012      	b.n	8015aa4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
	}
	case TWIPR_CONTROL_MODE_BALANCING: {
//		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
//			this->config.drive->start();
//		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	3314      	adds	r3, #20
 8015a82:	2102      	movs	r1, #2
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7ff fdbe 	bl	8015606 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8015a8a:	e00b      	b.n	8015aa4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
	}
	case TWIPR_CONTROL_MODE_VELOCITY: {
//		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
//			this->config.drive->start();
//		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	3314      	adds	r3, #20
 8015a90:	2102      	movs	r1, #2
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7ff fdb7 	bl	8015606 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		this->_speed_control.reset();
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	3374      	adds	r3, #116	@ 0x74
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f000 fd34 	bl	801650a <_ZN18TWIPR_SpeedControl5resetEv>
		break;
 8015aa2:	bf00      	nop
	}
	}

	// Reset the input
	this->_resetExternalInput();
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f000 fb60 	bl	801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>

	return 1;
 8015aaa:	2301      	movs	r3, #1
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t>:
	this->_external_input = input;
	osSemaphoreRelease(semaphore_external_input);
}
/* ======================================================== */
void TWIPR_ControlManager::setBalancingInput(
		twipr_balancing_control_input_t input) {
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b084      	sub	sp, #16
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	eeb0 7a40 	vmov.f32	s14, s0
 8015ac0:	eef0 7a60 	vmov.f32	s15, s1
 8015ac4:	ed87 7a01 	vstr	s14, [r7, #4]
 8015ac8:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->_externalInputEnabled == false) {
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d014      	beq.n	8015b00 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x4c>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8015b08 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x54>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f04f 31ff 	mov.w	r1, #4294967295
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7f9 f9b2 	bl	800ee48 <osSemaphoreAcquire>
	this->_external_input.u_balancing_1 = input.u_1;
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	this->_external_input.u_balancing_2 = input.u_2;
 8015aec:	68ba      	ldr	r2, [r7, #8]
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	osSemaphoreRelease(semaphore_external_input);
 8015af4:	4b04      	ldr	r3, [pc, #16]	@ (8015b08 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x54>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7f9 f9f7 	bl	800eeec <osSemaphoreRelease>
 8015afe:	e000      	b.n	8015b02 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x4e>
		return;
 8015b00:	bf00      	nop
}
 8015b02:	3710      	adds	r7, #16
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	2401f448 	.word	0x2401f448

08015b0c <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t>:

/* ======================================================== */
void TWIPR_ControlManager::setSpeed(twipr_speed_control_input_t speed) {
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	eeb0 7a40 	vmov.f32	s14, s0
 8015b18:	eef0 7a60 	vmov.f32	s15, s1
 8015b1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8015b20:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->_externalInputEnabled == false) {
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d014      	beq.n	8015b58 <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x4c>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8015b60 <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x54>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	f04f 31ff 	mov.w	r1, #4294967295
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7f9 f986 	bl	800ee48 <osSemaphoreAcquire>
	this->_external_input.u_velocity_forward = speed.forward;
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	this->_external_input.u_velocity_turn = speed.turn;
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
	osSemaphoreRelease(semaphore_external_input);
 8015b4c:	4b04      	ldr	r3, [pc, #16]	@ (8015b60 <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x54>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f9 f9cb 	bl	800eeec <osSemaphoreRelease>
 8015b56:	e000      	b.n	8015b5a <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x4e>
		return;
 8015b58:	bf00      	nop
}
 8015b5a:	3710      	adds	r7, #16
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	2401f448 	.word	0x2401f448

08015b64 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t>:

/* ======================================================== */
void TWIPR_ControlManager::setDirectInput(twipr_control_direct_input_t input) {
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	60f8      	str	r0, [r7, #12]
 8015b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8015b70:	eef0 7a60 	vmov.f32	s15, s1
 8015b74:	ed87 7a01 	vstr	s14, [r7, #4]
 8015b78:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->_externalInputEnabled == false) {
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d014      	beq.n	8015bb0 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x4c>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015b86:	4b0c      	ldr	r3, [pc, #48]	@ (8015bb8 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x54>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7f9 f95a 	bl	800ee48 <osSemaphoreAcquire>
	this->_external_input.u_direct_1 = input.input_left;
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	this->_external_input.u_direct_2 = input.input_right;
 8015b9c:	68ba      	ldr	r2, [r7, #8]
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	osSemaphoreRelease(semaphore_external_input);
 8015ba4:	4b04      	ldr	r3, [pc, #16]	@ (8015bb8 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x54>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7f9 f99f 	bl	800eeec <osSemaphoreRelease>
 8015bae:	e000      	b.n	8015bb2 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x4e>
		return;
 8015bb0:	bf00      	nop
}
 8015bb2:	3710      	adds	r7, #16
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}
 8015bb8:	2401f448 	.word	0x2401f448

08015bbc <_ZN20TWIPR_ControlManager16setBalancingGainEPf>:
twipr_control_status_t TWIPR_ControlManager::getStatus() {
	return this->status;
}

/* ======================================================== */
uint8_t TWIPR_ControlManager::setBalancingGain(float *K) {
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
	// This is only allowed if the controller is off
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d001      	beq.n	8015bd4 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x18>
		return 0;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	e00c      	b.n	8015bee <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x32>
//		return;
	}
	if (this->mode != TWIPR_CONTROL_MODE_OFF) {
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	785b      	ldrb	r3, [r3, #1]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d001      	beq.n	8015be0 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x24>
		return 0;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	e006      	b.n	8015bee <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x32>
//		return;
	}

	this->_balancing_control.set_K(K);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	3314      	adds	r3, #20
 8015be4:	6839      	ldr	r1, [r7, #0]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7ff fcfd 	bl	80155e6 <_ZN22TWIPR_BalancingControl5set_KEPf>

	return 1;
 8015bec:	2301      	movs	r3, #1
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <_ZN20TWIPR_ControlManager28setVelocityControlForwardPIDEPf>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::setVelocityControlForwardPID(float *PID) {
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b082      	sub	sp, #8
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
 8015bfe:	6039      	str	r1, [r7, #0]
	this->_speed_control.setForwardPID(PID[0], PID[1], PID[2]);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	edd3 7a00 	vldr	s15, [r3]
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	3304      	adds	r3, #4
 8015c10:	ed93 7a00 	vldr	s14, [r3]
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	3308      	adds	r3, #8
 8015c18:	edd3 6a00 	vldr	s13, [r3]
 8015c1c:	eeb0 1a66 	vmov.f32	s2, s13
 8015c20:	eef0 0a47 	vmov.f32	s1, s14
 8015c24:	eeb0 0a67 	vmov.f32	s0, s15
 8015c28:	4610      	mov	r0, r2
 8015c2a:	f000 fd13 	bl	8016654 <_ZN18TWIPR_SpeedControl13setForwardPIDEfff>

	return 1;
 8015c2e:	2301      	movs	r3, #1
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3708      	adds	r7, #8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <_ZN20TWIPR_ControlManager25setVelocityControlTurnPIDEPf>:

/* ======================================================== */
uint8_t TWIPR_ControlManager::setVelocityControlTurnPID(float *PID) {
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	6039      	str	r1, [r7, #0]
	this->_speed_control.setTurnPID(PID[0], PID[1], PID[2]);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	edd3 7a00 	vldr	s15, [r3]
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	3304      	adds	r3, #4
 8015c52:	ed93 7a00 	vldr	s14, [r3]
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	3308      	adds	r3, #8
 8015c5a:	edd3 6a00 	vldr	s13, [r3]
 8015c5e:	eeb0 1a66 	vmov.f32	s2, s13
 8015c62:	eef0 0a47 	vmov.f32	s1, s14
 8015c66:	eeb0 0a67 	vmov.f32	s0, s15
 8015c6a:	4610      	mov	r0, r2
 8015c6c:	f000 fd14 	bl	8016698 <_ZN18TWIPR_SpeedControl10setTurnPIDEfff>

	return 1;
 8015c70:	2301      	movs	r3, #1
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3708      	adds	r7, #8
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <_ZN20TWIPR_ControlManager23getControlConfigurationEv>:

/* ======================================================== */
twipr_control_configuration_t TWIPR_ControlManager::getControlConfiguration() {
 8015c7a:	b580      	push	{r7, lr}
 8015c7c:	b082      	sub	sp, #8
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	6078      	str	r0, [r7, #4]
 8015c82:	6039      	str	r1, [r7, #0]
	twipr_control_configuration_t config;
//	this->_balancing_control.config	.K[1] = -1;
//	return config;
	memcpy(config.K, this->_balancing_control.config.K, sizeof(float) * 8);
 8015c84:	683b      	ldr	r3, [r7, #0]
 8015c86:	3318      	adds	r3, #24
 8015c88:	2220      	movs	r2, #32
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f00d f830 	bl	8022cf2 <memcpy>
	config.forward_kp = this->_speed_control.config.forward_config.Kp;
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	621a      	str	r2, [r3, #32]
	config.forward_ki = this->_speed_control.config.forward_config.Ki;
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	625a      	str	r2, [r3, #36]	@ 0x24
	config.forward_kd = this->_speed_control.config.forward_config.Kd;
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	629a      	str	r2, [r3, #40]	@ 0x28

	config.turn_kp = this->_speed_control.config.turn_config.Kp;
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	config.turn_ki = this->_speed_control.config.turn_config.Ki;
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	631a      	str	r2, [r3, #48]	@ 0x30
	config.turn_kd = this->_speed_control.config.turn_config.Kd;
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	635a      	str	r2, [r3, #52]	@ 0x34

	return config;
 8015cc8:	bf00      	nop
}
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}

08015cd2 <_ZN20TWIPR_ControlManager9_step_offEv>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_off() {
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b088      	sub	sp, #32
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	60f8      	str	r0, [r7, #12]
	this->_resetExternalInput();
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	f000 fa45 	bl	801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f000 fa74 	bl	80161ce <_ZN20TWIPR_ControlManager12_resetOutputEv>
	twipr_control_output_t output = { 0, 0 };
 8015ce6:	f04f 0300 	mov.w	r3, #0
 8015cea:	613b      	str	r3, [r7, #16]
 8015cec:	f04f 0300 	mov.w	r3, #0
 8015cf0:	617b      	str	r3, [r7, #20]
	return output;
 8015cf2:	f107 0318 	add.w	r3, r7, #24
 8015cf6:	f107 0210 	add.w	r2, r7, #16
 8015cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015cfe:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d02:	69ba      	ldr	r2, [r7, #24]
 8015d04:	69fb      	ldr	r3, [r7, #28]
 8015d06:	ee07 2a10 	vmov	s14, r2
 8015d0a:	ee07 3a90 	vmov	s15, r3
}
 8015d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8015d12:	eef0 0a67 	vmov.f32	s1, s15
 8015d16:	3720      	adds	r7, #32
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <_ZN20TWIPR_ControlManager12_step_directE30twipr_control_external_input_t>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_direct(
		twipr_control_external_input_t input) {
 8015d1c:	b084      	sub	sp, #16
 8015d1e:	b580      	push	{r7, lr}
 8015d20:	b088      	sub	sp, #32
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	60f8      	str	r0, [r7, #12]
 8015d26:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	this->_resetOutput();
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	f000 fa4d 	bl	80161ce <_ZN20TWIPR_ControlManager12_resetOutputEv>
	// TODO

	twipr_control_output_t output = { 0, 0 };
 8015d34:	f04f 0300 	mov.w	r3, #0
 8015d38:	613b      	str	r3, [r7, #16]
 8015d3a:	f04f 0300 	mov.w	r3, #0
 8015d3e:	617b      	str	r3, [r7, #20]
	return output;
 8015d40:	f107 0318 	add.w	r3, r7, #24
 8015d44:	f107 0210 	add.w	r2, r7, #16
 8015d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d50:	69ba      	ldr	r2, [r7, #24]
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	ee07 2a10 	vmov	s14, r2
 8015d58:	ee07 3a90 	vmov	s15, r3

}
 8015d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8015d60:	eef0 0a67 	vmov.f32	s1, s15
 8015d64:	3720      	adds	r7, #32
 8015d66:	46bd      	mov	sp, r7
 8015d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d6c:	b004      	add	sp, #16
 8015d6e:	4770      	bx	lr

08015d70 <_ZN20TWIPR_ControlManager10_step_idleEv>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_idle() {
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b088      	sub	sp, #32
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
	this->_resetExternalInput();
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f000 f9f6 	bl	801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 8015d7e:	68f8      	ldr	r0, [r7, #12]
 8015d80:	f000 fa25 	bl	80161ce <_ZN20TWIPR_ControlManager12_resetOutputEv>
	twipr_control_output_t output = { 0, 0 };
 8015d84:	f04f 0300 	mov.w	r3, #0
 8015d88:	613b      	str	r3, [r7, #16]
 8015d8a:	f04f 0300 	mov.w	r3, #0
 8015d8e:	617b      	str	r3, [r7, #20]
	return output;
 8015d90:	f107 0318 	add.w	r3, r7, #24
 8015d94:	f107 0210 	add.w	r2, r7, #16
 8015d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015da0:	69ba      	ldr	r2, [r7, #24]
 8015da2:	69fb      	ldr	r3, [r7, #28]
 8015da4:	ee07 2a10 	vmov	s14, r2
 8015da8:	ee07 3a90 	vmov	s15, r3
}
 8015dac:	eeb0 0a47 	vmov.f32	s0, s14
 8015db0:	eef0 0a67 	vmov.f32	s1, s15
 8015db4:	3720      	adds	r7, #32
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <_ZN20TWIPR_ControlManager11_step_errorEv>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_error() {
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b088      	sub	sp, #32
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	60f8      	str	r0, [r7, #12]
	this->_resetExternalInput();
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	f000 f9d1 	bl	801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 8015dc8:	68f8      	ldr	r0, [r7, #12]
 8015dca:	f000 fa00 	bl	80161ce <_ZN20TWIPR_ControlManager12_resetOutputEv>
	twipr_control_output_t output = { 0, 0 };
 8015dce:	f04f 0300 	mov.w	r3, #0
 8015dd2:	613b      	str	r3, [r7, #16]
 8015dd4:	f04f 0300 	mov.w	r3, #0
 8015dd8:	617b      	str	r3, [r7, #20]
	return output;
 8015dda:	f107 0318 	add.w	r3, r7, #24
 8015dde:	f107 0210 	add.w	r2, r7, #16
 8015de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015de6:	e883 0003 	stmia.w	r3, {r0, r1}
 8015dea:	69ba      	ldr	r2, [r7, #24]
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	ee07 2a10 	vmov	s14, r2
 8015df2:	ee07 3a90 	vmov	s15, r3
}
 8015df6:	eeb0 0a47 	vmov.f32	s0, s14
 8015dfa:	eef0 0a67 	vmov.f32	s1, s15
 8015dfe:	3720      	adds	r7, #32
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}

08015e04 <_ZN20TWIPR_ControlManager15_step_balancingE30twipr_control_external_input_t24twipr_estimation_state_t>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_balancing(
		twipr_control_external_input_t input, twipr_estimation_state_t state) {
 8015e04:	b084      	sub	sp, #16
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b08e      	sub	sp, #56	@ 0x38
 8015e0a:	af02      	add	r7, sp, #8
 8015e0c:	60f8      	str	r0, [r7, #12]
 8015e0e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8015e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	twipr_control_output_t output = { 0, 0 };
 8015e16:	f04f 0300 	mov.w	r3, #0
 8015e1a:	623b      	str	r3, [r7, #32]
 8015e1c:	f04f 0300 	mov.w	r3, #0
 8015e20:	627b      	str	r3, [r7, #36]	@ 0x24

	twipr_balancing_control_input_t balancing_control_input = {
			input.u_balancing_1, input.u_balancing_2, };
 8015e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e24:	61bb      	str	r3, [r7, #24]
 8015e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015e28:	61fb      	str	r3, [r7, #28]

	this->_data.input_balancing_1 = balancing_control_input.u_1;
 8015e2a:	69ba      	ldr	r2, [r7, #24]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	this->_data.input_balancing_2 = balancing_control_input.u_2;
 8015e32:	69fa      	ldr	r2, [r7, #28]
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

	twipr_balancing_control_output_t balancing_control_output =
			this->_update_balancing_control(balancing_control_input, state);
 8015e3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8015e3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8015e42:	466a      	mov	r2, sp
 8015e44:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8015e48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8015e50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015e56:	eeb0 0a47 	vmov.f32	s0, s14
 8015e5a:	eef0 0a67 	vmov.f32	s1, s15
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f000 f8ed 	bl	801603e <_ZN20TWIPR_ControlManager25_update_balancing_controlE31twipr_balancing_control_input_t24twipr_estimation_state_t>
 8015e64:	eeb0 7a40 	vmov.f32	s14, s0
 8015e68:	eef0 7a60 	vmov.f32	s15, s1
 8015e6c:	ed87 7a04 	vstr	s14, [r7, #16]
 8015e70:	edc7 7a05 	vstr	s15, [r7, #20]

	output.u_left = balancing_control_output.u_1;
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	623b      	str	r3, [r7, #32]
	output.u_right = balancing_control_output.u_2;
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	627b      	str	r3, [r7, #36]	@ 0x24

	return output;
 8015e7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015e80:	f107 0220 	add.w	r2, r7, #32
 8015e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e88:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e90:	ee07 2a10 	vmov	s14, r2
 8015e94:	ee07 3a90 	vmov	s15, r3

}
 8015e98:	eeb0 0a47 	vmov.f32	s0, s14
 8015e9c:	eef0 0a67 	vmov.f32	s1, s15
 8015ea0:	3730      	adds	r7, #48	@ 0x30
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015ea8:	b004      	add	sp, #16
 8015eaa:	4770      	bx	lr

08015eac <_ZN20TWIPR_ControlManager14_step_velocityE30twipr_control_external_input_t24twipr_estimation_state_t>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_velocity(
		twipr_control_external_input_t input, twipr_estimation_state_t state) {
 8015eac:	b084      	sub	sp, #16
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b092      	sub	sp, #72	@ 0x48
 8015eb2:	af02      	add	r7, sp, #8
 8015eb4:	60f8      	str	r0, [r7, #12]
 8015eb6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8015eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	twipr_control_output_t output = { 0, 0 };
 8015ebe:	f04f 0300 	mov.w	r3, #0
 8015ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8015ec4:	f04f 0300 	mov.w	r3, #0
 8015ec8:	637b      	str	r3, [r7, #52]	@ 0x34

	twipr_speed_control_input_t speed_control_input = { .forward =
			input.u_velocity_forward, .turn = input.u_velocity_turn, };
 8015eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	this->_data.input_velocity_forward = input.u_velocity_forward;
 8015ed2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	this->_data.input_velocity_turn = input.u_velocity_turn;
 8015eda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184

	// Update the Speed Controller
	twipr_speed_control_output_t speed_control_output =
			this->_update_velocity_control(speed_control_input, state);
 8015ee2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015ee6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015eea:	466a      	mov	r2, sp
 8015eec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015ef0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ef4:	e882 0003 	stmia.w	r2, {r0, r1}
 8015ef8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015efe:	eeb0 0a47 	vmov.f32	s0, s14
 8015f02:	eef0 0a67 	vmov.f32	s1, s15
 8015f06:	68f8      	ldr	r0, [r7, #12]
 8015f08:	f000 f84d 	bl	8015fa6 <_ZN20TWIPR_ControlManager24_update_velocity_controlE27twipr_speed_control_input_t24twipr_estimation_state_t>
 8015f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8015f10:	eef0 7a60 	vmov.f32	s15, s1
 8015f14:	ed87 7a08 	vstr	s14, [r7, #32]
 8015f18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Feed the result into the balancing controller
	twipr_balancing_control_input_t balancing_control_input = { .u_1 =
			speed_control_output.input_left, .u_2 =
 8015f1c:	6a3b      	ldr	r3, [r7, #32]
			speed_control_output.input_right };
 8015f1e:	61bb      	str	r3, [r7, #24]
 8015f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f22:	61fb      	str	r3, [r7, #28]

	this->_data.input_balancing_1 = balancing_control_input.u_1;
 8015f24:	69ba      	ldr	r2, [r7, #24]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	this->_data.input_balancing_2 = balancing_control_input.u_2;
 8015f2c:	69fa      	ldr	r2, [r7, #28]
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

	twipr_balancing_control_output_t balancing_control_output =
			this->_update_balancing_control(balancing_control_input, state);
 8015f34:	ed97 7a06 	vldr	s14, [r7, #24]
 8015f38:	edd7 7a07 	vldr	s15, [r7, #28]
 8015f3c:	466a      	mov	r2, sp
 8015f3e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015f42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f46:	e882 0003 	stmia.w	r2, {r0, r1}
 8015f4a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015f50:	eeb0 0a47 	vmov.f32	s0, s14
 8015f54:	eef0 0a67 	vmov.f32	s1, s15
 8015f58:	68f8      	ldr	r0, [r7, #12]
 8015f5a:	f000 f870 	bl	801603e <_ZN20TWIPR_ControlManager25_update_balancing_controlE31twipr_balancing_control_input_t24twipr_estimation_state_t>
 8015f5e:	eeb0 7a40 	vmov.f32	s14, s0
 8015f62:	eef0 7a60 	vmov.f32	s15, s1
 8015f66:	ed87 7a04 	vstr	s14, [r7, #16]
 8015f6a:	edc7 7a05 	vstr	s15, [r7, #20]

	output.u_left = balancing_control_output.u_1;
 8015f6e:	693b      	ldr	r3, [r7, #16]
 8015f70:	633b      	str	r3, [r7, #48]	@ 0x30
	output.u_right = balancing_control_output.u_2;
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	637b      	str	r3, [r7, #52]	@ 0x34

	return output;
 8015f76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015f7a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f82:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f8a:	ee07 2a10 	vmov	s14, r2
 8015f8e:	ee07 3a90 	vmov	s15, r3

}
 8015f92:	eeb0 0a47 	vmov.f32	s0, s14
 8015f96:	eef0 0a67 	vmov.f32	s1, s15
 8015f9a:	3740      	adds	r7, #64	@ 0x40
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015fa2:	b004      	add	sp, #16
 8015fa4:	4770      	bx	lr

08015fa6 <_ZN20TWIPR_ControlManager24_update_velocity_controlE27twipr_speed_control_input_t24twipr_estimation_state_t>:
/* ======================================================== */
twipr_speed_control_output_t TWIPR_ControlManager::_update_velocity_control(
		twipr_speed_control_input_t input, twipr_estimation_state_t state) {
 8015fa6:	b084      	sub	sp, #16
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b08a      	sub	sp, #40	@ 0x28
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6178      	str	r0, [r7, #20]
 8015fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8015fb4:	eef0 7a60 	vmov.f32	s15, s1
 8015fb8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015fbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015fc0:	ed87 7a03 	vstr	s14, [r7, #12]
 8015fc4:	edc7 7a04 	vstr	s15, [r7, #16]

	twipr_speed_control_output_t output = { 0, 0 };
 8015fc8:	f04f 0300 	mov.w	r3, #0
 8015fcc:	61bb      	str	r3, [r7, #24]
 8015fce:	f04f 0300 	mov.w	r3, #0
 8015fd2:	61fb      	str	r3, [r7, #28]

	output = this->_speed_control.update(input, state.v, state.psi_dot);
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	3374      	adds	r3, #116	@ 0x74
 8015fd8:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8015fdc:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8015fe0:	ed97 7a03 	vldr	s14, [r7, #12]
 8015fe4:	edd7 7a04 	vldr	s15, [r7, #16]
 8015fe8:	eef0 1a46 	vmov.f32	s3, s12
 8015fec:	eeb0 1a66 	vmov.f32	s2, s13
 8015ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8015ff4:	eef0 0a67 	vmov.f32	s1, s15
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f000 faa8 	bl	801654e <_ZN18TWIPR_SpeedControl6updateE27twipr_speed_control_input_tff>
 8015ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8016002:	eef0 7a60 	vmov.f32	s15, s1
 8016006:	ed87 7a06 	vstr	s14, [r7, #24]
 801600a:	edc7 7a07 	vstr	s15, [r7, #28]

	return output;
 801600e:	f107 0320 	add.w	r3, r7, #32
 8016012:	f107 0218 	add.w	r2, r7, #24
 8016016:	e892 0003 	ldmia.w	r2, {r0, r1}
 801601a:	e883 0003 	stmia.w	r3, {r0, r1}
 801601e:	6a3a      	ldr	r2, [r7, #32]
 8016020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016022:	ee07 2a10 	vmov	s14, r2
 8016026:	ee07 3a90 	vmov	s15, r3
}
 801602a:	eeb0 0a47 	vmov.f32	s0, s14
 801602e:	eef0 0a67 	vmov.f32	s1, s15
 8016032:	3728      	adds	r7, #40	@ 0x28
 8016034:	46bd      	mov	sp, r7
 8016036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801603a:	b004      	add	sp, #16
 801603c:	4770      	bx	lr

0801603e <_ZN20TWIPR_ControlManager25_update_balancing_controlE31twipr_balancing_control_input_t24twipr_estimation_state_t>:

/* ======================================================== */
twipr_balancing_control_output_t TWIPR_ControlManager::_update_balancing_control(
		twipr_balancing_control_input_t input, twipr_estimation_state_t state) {
 801603e:	b084      	sub	sp, #16
 8016040:	b590      	push	{r4, r7, lr}
 8016042:	b08f      	sub	sp, #60	@ 0x3c
 8016044:	af04      	add	r7, sp, #16
 8016046:	6178      	str	r0, [r7, #20]
 8016048:	eeb0 7a40 	vmov.f32	s14, s0
 801604c:	eef0 7a60 	vmov.f32	s15, s1
 8016050:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8016054:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016058:	ed87 7a03 	vstr	s14, [r7, #12]
 801605c:	edc7 7a04 	vstr	s15, [r7, #16]
	//	 Calculate the input from the balancing controller

	twipr_balancing_control_output_t output = { 0, 0 };
 8016060:	f04f 0300 	mov.w	r3, #0
 8016064:	61bb      	str	r3, [r7, #24]
 8016066:	f04f 0300 	mov.w	r3, #0
 801606a:	61fb      	str	r3, [r7, #28]

	// Update the balancing controller
	this->_balancing_control.update(state, input, &output);
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	f103 0414 	add.w	r4, r3, #20
 8016072:	ed97 7a03 	vldr	s14, [r7, #12]
 8016076:	edd7 7a04 	vldr	s15, [r7, #16]
 801607a:	f107 0318 	add.w	r3, r7, #24
 801607e:	9302      	str	r3, [sp, #8]
 8016080:	466a      	mov	r2, sp
 8016082:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016086:	e893 0003 	ldmia.w	r3, {r0, r1}
 801608a:	e882 0003 	stmia.w	r2, {r0, r1}
 801608e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016094:	eeb0 0a47 	vmov.f32	s0, s14
 8016098:	eef0 0a67 	vmov.f32	s1, s15
 801609c:	4620      	mov	r0, r4
 801609e:	f7ff f9a7 	bl	80153f0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>

	return output;
 80160a2:	f107 0320 	add.w	r3, r7, #32
 80160a6:	f107 0218 	add.w	r2, r7, #24
 80160aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80160b2:	6a3a      	ldr	r2, [r7, #32]
 80160b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b6:	ee07 2a10 	vmov	s14, r2
 80160ba:	ee07 3a90 	vmov	s15, r3
}
 80160be:	eeb0 0a47 	vmov.f32	s0, s14
 80160c2:	eef0 0a67 	vmov.f32	s1, s15
 80160c6:	372c      	adds	r7, #44	@ 0x2c
 80160c8:	46bd      	mov	sp, r7
 80160ca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80160ce:	b004      	add	sp, #16
 80160d0:	4770      	bx	lr

080160d2 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>:
/* ======================================================== */
void TWIPR_ControlManager::_setTorque(twipr_control_output_t output) {
 80160d2:	b580      	push	{r7, lr}
 80160d4:	b086      	sub	sp, #24
 80160d6:	af00      	add	r7, sp, #0
 80160d8:	60f8      	str	r0, [r7, #12]
 80160da:	eeb0 7a40 	vmov.f32	s14, s0
 80160de:	eef0 7a60 	vmov.f32	s15, s1
 80160e2:	ed87 7a01 	vstr	s14, [r7, #4]
 80160e6:	edc7 7a02 	vstr	s15, [r7, #8]
	// Limit the maximum torque

	// Apply the torque to the motors
	twipr_drive_can_input_t drive_input = { .torque_left = output.u_left,
 80160ea:	687b      	ldr	r3, [r7, #4]
			.torque_right = output.u_right };
 80160ec:	613b      	str	r3, [r7, #16]
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	617b      	str	r3, [r7, #20]

	this->config.drive->setTorque(drive_input);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80160fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80160fe:	eeb0 0a47 	vmov.f32	s0, s14
 8016102:	eef0 0a67 	vmov.f32	s1, s15
 8016106:	4618      	mov	r0, r3
 8016108:	f001 f862 	bl	80171d0 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t>
}
 801610c:	bf00      	nop
 801610e:	3718      	adds	r7, #24
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <_ZN20TWIPR_ControlManager9getSampleEv>:
	}
	}
}

/* ======================================================== */
twipr_logging_control_t TWIPR_ControlManager::getSample() {
 8016114:	b4b0      	push	{r4, r5, r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
	twipr_logging_control_t sample;
	sample.control_mode = this->mode;
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	785a      	ldrb	r2, [r3, #1]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	705a      	strb	r2, [r3, #1]
	sample.control_status = this->status;
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	f993 2000 	ldrsb.w	r2, [r3]
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	701a      	strb	r2, [r3, #0]
	sample.external_input = this->_external_input;
 8016130:	687a      	ldr	r2, [r7, #4]
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	1d14      	adds	r4, r2, #4
 8016136:	f503 75a6 	add.w	r5, r3, #332	@ 0x14c
 801613a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801613c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801613e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016142:	e884 0003 	stmia.w	r4, {r0, r1}
	sample.data = this->_data;
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	f102 041c 	add.w	r4, r2, #28
 801614e:	f503 75c0 	add.w	r5, r3, #384	@ 0x180
 8016152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016156:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801615a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return sample;
 801615e:	bf00      	nop
}
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	370c      	adds	r7, #12
 8016164:	46bd      	mov	sp, r7
 8016166:	bcb0      	pop	{r4, r5, r7}
 8016168:	4770      	bx	lr

0801616a <_ZN20TWIPR_ControlManager19_resetExternalInputEv>:

void TWIPR_ControlManager::_resetExternalInput() {
 801616a:	b480      	push	{r7}
 801616c:	b083      	sub	sp, #12
 801616e:	af00      	add	r7, sp, #0
 8016170:	6078      	str	r0, [r7, #4]

	this->_external_input.u_direct_1 = 0.0;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f04f 0200 	mov.w	r2, #0
 8016178:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	this->_external_input.u_direct_2 = 0.0;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f04f 0200 	mov.w	r2, #0
 8016182:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	this->_external_input.u_balancing_1 = 0.0;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f04f 0200 	mov.w	r2, #0
 801618c:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	this->_external_input.u_balancing_2 = 0.0;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	f04f 0200 	mov.w	r2, #0
 8016196:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	this->_external_input.u_velocity_forward = 0.0;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f04f 0200 	mov.w	r2, #0
 80161a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	this->_external_input.u_velocity_turn = 0.0;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f04f 0200 	mov.w	r2, #0
 80161aa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
	this->_output.u_left = 0.0;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	f04f 0200 	mov.w	r2, #0
 80161b4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
	this->_output.u_right = 0.0;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f04f 0200 	mov.w	r2, #0
 80161be:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

}
 80161c2:	bf00      	nop
 80161c4:	370c      	adds	r7, #12
 80161c6:	46bd      	mov	sp, r7
 80161c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161cc:	4770      	bx	lr

080161ce <_ZN20TWIPR_ControlManager12_resetOutputEv>:

void TWIPR_ControlManager::_resetOutput() {
 80161ce:	b480      	push	{r7}
 80161d0:	b083      	sub	sp, #12
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
	this->_output.u_left = 0;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f04f 0200 	mov.w	r2, #0
 80161dc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
	this->_output.u_right = 0;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f04f 0200 	mov.w	r2, #0
 80161e6:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
}
 80161ea:	bf00      	nop
 80161ec:	370c      	adds	r7, #12
 80161ee:	46bd      	mov	sp, r7
 80161f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f4:	4770      	bx	lr
	...

080161f8 <_ZN19core_utils_CallbackIvmEC1Ev>:
	core_utils_Callback() {
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	4618      	mov	r0, r3
 8016204:	f7fc fa1a 	bl	801263c <_ZN8CallbackC1Ev>
 8016208:	4a09      	ldr	r2, [pc, #36]	@ (8016230 <_ZN19core_utils_CallbackIvmEC1Ev+0x38>)
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	601a      	str	r2, [r3, #0]
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2200      	movs	r2, #0
 8016212:	711a      	strb	r2, [r3, #4]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	3308      	adds	r3, #8
 8016218:	2100      	movs	r1, #0
 801621a:	4618      	mov	r0, r3
 801621c:	f000 f819 	bl	8016252 <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		this->registered = 0;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2200      	movs	r2, #0
 8016224:	711a      	strb	r2, [r3, #4]
	}
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	4618      	mov	r0, r3
 801622a:	3708      	adds	r7, #8
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}
 8016230:	08024e0c 	.word	0x08024e0c

08016234 <_ZN19core_utils_CallbackIvmE4callEm>:
	void call(input_type input) {
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	6039      	str	r1, [r7, #0]
		this->_fp(input);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	3308      	adds	r3, #8
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	4618      	mov	r0, r3
 8016246:	f000 f812 	bl	801626e <_ZN26core_utils_FunctionPointerIvmEclEm>
	}
 801624a:	bf00      	nop
 801624c:	3708      	adds	r7, #8
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}

08016252 <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8016252:	b580      	push	{r7, lr}
 8016254:	b082      	sub	sp, #8
 8016256:	af00      	add	r7, sp, #0
 8016258:	6078      	str	r0, [r7, #4]
 801625a:	6039      	str	r1, [r7, #0]
        attach(function);
 801625c:	6839      	ldr	r1, [r7, #0]
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f812 	bl	8016288 <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>
    }
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	4618      	mov	r0, r3
 8016268:	3708      	adds	r7, #8
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <_ZN26core_utils_FunctionPointerIvmEclEm>:
    R operator ()(A1 a) {
 801626e:	b580      	push	{r7, lr}
 8016270:	b082      	sub	sp, #8
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
        return call(a);
 8016278:	6839      	ldr	r1, [r7, #0]
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 f815 	bl	80162aa <_ZN26core_utils_FunctionPointerIvmE4callEm>
 8016280:	bf00      	nop
    }
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>:
    void attach(R (*function)(A1)) {
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	683a      	ldr	r2, [r7, #0]
 8016296:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2200      	movs	r2, #0
 801629c:	615a      	str	r2, [r3, #20]
    }
 801629e:	bf00      	nop
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr

080162aa <_ZN26core_utils_FunctionPointerIvmE4callEm>:
    R call(A1 a) {
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b082      	sub	sp, #8
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
 80162b2:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	695b      	ldr	r3, [r3, #20]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d108      	bne.n	80162ce <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d004      	beq.n	80162ce <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
           return _p.function(a);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	6838      	ldr	r0, [r7, #0]
 80162ca:	4798      	blx	r3
 80162cc:	e011      	b.n	80162f2 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        } else if (_membercaller && _p.object) {
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	695b      	ldr	r3, [r3, #20]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d00c      	beq.n	80162f0 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d008      	beq.n	80162f0 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
           return _membercaller(_p.object, _member, a);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	695b      	ldr	r3, [r3, #20]
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	6810      	ldr	r0, [r2, #0]
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	1d11      	adds	r1, r2, #4
 80162ea:	683a      	ldr	r2, [r7, #0]
 80162ec:	4798      	blx	r3
 80162ee:	e000      	b.n	80162f2 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        return R();
 80162f0:	bf00      	nop
    }
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}

080162f8 <_ZN36twipr_speed_control_forward_config_tC1Ev>:

#include "core.h"

class TWIPR_Supervisor; // Definition for a supervisor to have access to the private methods and variables

typedef struct twipr_speed_control_forward_config_t {
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2200      	movs	r2, #0
 8016304:	741a      	strb	r2, [r3, #16]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f04f 0200 	mov.w	r2, #0
 801630c:	615a      	str	r2, [r3, #20]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2200      	movs	r2, #0
 8016312:	761a      	strb	r2, [r3, #24]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	4a08      	ldr	r2, [pc, #32]	@ (8016338 <_ZN36twipr_speed_control_forward_config_tC1Ev+0x40>)
 8016318:	61da      	str	r2, [r3, #28]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2200      	movs	r2, #0
 801631e:	f883 2020 	strb.w	r2, [r3, #32]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f04f 0200 	mov.w	r2, #0
 8016328:	625a      	str	r2, [r3, #36]	@ 0x24
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	4618      	mov	r0, r3
 801632e:	370c      	adds	r7, #12
 8016330:	46bd      	mov	sp, r7
 8016332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016336:	4770      	bx	lr
 8016338:	3d4ccccd 	.word	0x3d4ccccd

0801633c <_ZN33twipr_speed_control_turn_config_tC1Ev>:

	bool enable_rate_limit = false;
	float rate_limit = 0;
} twipr_speed_control_forward_config_t;

typedef struct twipr_speed_control_turn_config_t {
 801633c:	b480      	push	{r7}
 801633e:	b083      	sub	sp, #12
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2200      	movs	r2, #0
 8016348:	741a      	strb	r2, [r3, #16]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f04f 0200 	mov.w	r2, #0
 8016350:	615a      	str	r2, [r3, #20]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2200      	movs	r2, #0
 8016356:	761a      	strb	r2, [r3, #24]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801635e:	61da      	str	r2, [r3, #28]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	f883 2020 	strb.w	r2, [r3, #32]
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f04f 0200 	mov.w	r2, #0
 801636e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	4618      	mov	r0, r3
 8016374:	370c      	adds	r7, #12
 8016376:	46bd      	mov	sp, r7
 8016378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637c:	4770      	bx	lr

0801637e <_ZN28twipr_speed_control_config_tC1Ev>:

	bool enable_rate_limit = false;
	float rate_limit = 0;
} twipr_speed_control_turn_config_t;

typedef struct twipr_speed_control_config_t {
 801637e:	b580      	push	{r7, lr}
 8016380:	b082      	sub	sp, #8
 8016382:	af00      	add	r7, sp, #0
 8016384:	6078      	str	r0, [r7, #4]
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	4618      	mov	r0, r3
 801638a:	f7ff ffb5 	bl	80162f8 <_ZN36twipr_speed_control_forward_config_tC1Ev>
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	3328      	adds	r3, #40	@ 0x28
 8016392:	4618      	mov	r0, r3
 8016394:	f7ff ffd2 	bl	801633c <_ZN33twipr_speed_control_turn_config_tC1Ev>
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	4618      	mov	r0, r3
 801639c:	3708      	adds	r7, #8
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <_ZN18TWIPR_SpeedControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_speed_control.h"

TWIPR_SpeedControl::TWIPR_SpeedControl() {
 80163a2:	b580      	push	{r7, lr}
 80163a4:	b082      	sub	sp, #8
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	6078      	str	r0, [r7, #4]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7ff ffe6 	bl	801637e <_ZN28twipr_speed_control_config_tC1Ev>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	3360      	adds	r3, #96	@ 0x60
 80163b6:	4618      	mov	r0, r3
 80163b8:	f007 f993 	bl	801d6e2 <_ZN11PID_ControlC1Ev>
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	339c      	adds	r3, #156	@ 0x9c
 80163c0:	4618      	mov	r0, r3
 80163c2:	f007 f98e 	bl	801d6e2 <_ZN11PID_ControlC1Ev>

}
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	4618      	mov	r0, r3
 80163ca:	3708      	adds	r7, #8
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <_ZN18TWIPR_SpeedControl4initE28twipr_speed_control_config_t>:


uint8_t counter = 0;

// =========================================================================================================================== //
void TWIPR_SpeedControl::init(twipr_speed_control_config_t config) {
 80163d0:	b084      	sub	sp, #16
 80163d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163d4:	b0a5      	sub	sp, #148	@ 0x94
 80163d6:	af0a      	add	r7, sp, #40	@ 0x28
 80163d8:	6078      	str	r0, [r7, #4]
 80163da:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80163de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	4618      	mov	r0, r3
 80163e6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80163ea:	2250      	movs	r2, #80	@ 0x50
 80163ec:	4619      	mov	r1, r3
 80163ee:	f00c fc80 	bl	8022cf2 <memcpy>
	pid_control_config_t forward_control_config = { .Kp =
			this->config.forward_config.Kp,
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
			.output_limit_max = this->config.forward_config.output_limit,
			.output_limit_min = -this->config.forward_config.output_limit,

			.enable_rate_limit = this->config.forward_config.enable_rate_limit,
			.rate_limit_max = this->config.forward_config.rate_limit,
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80163f6:	63bb      	str	r3, [r7, #56]	@ 0x38
			.Ki = this->config.forward_config.Ki, .Kd =
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	685b      	ldr	r3, [r3, #4]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80163fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
					this->config.forward_config.Kd, .Ts =
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	689b      	ldr	r3, [r3, #8]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 8016402:	643b      	str	r3, [r7, #64]	@ 0x40
					this->config.forward_config.Ts,
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	68db      	ldr	r3, [r3, #12]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 8016408:	647b      	str	r3, [r7, #68]	@ 0x44
					this->config.forward_config.enable_integral_limit,
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	7e1b      	ldrb	r3, [r3, #24]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 801640e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
			.error_integral_limit = this->config.forward_config.integral_limit,
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	69db      	ldr	r3, [r3, #28]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 8016416:	64fb      	str	r3, [r7, #76]	@ 0x4c
					this->config.forward_config.enable_output_limit,
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	7c1b      	ldrb	r3, [r3, #16]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 801641c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
			.output_limit_max = this->config.forward_config.output_limit,
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	695b      	ldr	r3, [r3, #20]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 8016424:	657b      	str	r3, [r7, #84]	@ 0x54
			.output_limit_min = -this->config.forward_config.output_limit,
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	edd3 7a05 	vldr	s15, [r3, #20]
 801642c:	eef1 7a67 	vneg.f32	s15, s15
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 8016430:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			.enable_rate_limit = this->config.forward_config.enable_rate_limit,
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f893 3020 	ldrb.w	r3, [r3, #32]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 801643a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
			.rate_limit_max = this->config.forward_config.rate_limit,
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 8016442:	663b      	str	r3, [r7, #96]	@ 0x60
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801644a:	eef1 7a67 	vneg.f32	s15, s15
 801644e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

	pid_control_config_t turn_control_config = { .Kp =
			this->config.turn_config.Kp, .Ki = this->config.turn_config.Ki,
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			.output_limit_max = this->config.turn_config.output_limit,
			.output_limit_min = -this->config.turn_config.output_limit,

			.enable_rate_limit = this->config.turn_config.enable_rate_limit,
			.rate_limit_max = this->config.turn_config.rate_limit,
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016456:	60bb      	str	r3, [r7, #8]
			this->config.turn_config.Kp, .Ki = this->config.turn_config.Ki,
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801645c:	60fb      	str	r3, [r7, #12]
			.Kd = this->config.turn_config.Kd,
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016462:	613b      	str	r3, [r7, #16]
			.Ts = this->config.turn_config.Ts,
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016468:	617b      	str	r3, [r7, #20]
					this->config.turn_config.enable_integral_limit,
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016470:	763b      	strb	r3, [r7, #24]
			.error_integral_limit = this->config.turn_config.integral_limit,
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016476:	61fb      	str	r3, [r7, #28]
			.enable_output_limit = this->config.turn_config.enable_output_limit,
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801647e:	f887 3020 	strb.w	r3, [r7, #32]
			.output_limit_max = this->config.turn_config.output_limit,
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016486:	627b      	str	r3, [r7, #36]	@ 0x24
			.output_limit_min = -this->config.turn_config.output_limit,
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801648e:	eef1 7a67 	vneg.f32	s15, s15
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016492:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			.enable_rate_limit = this->config.turn_config.enable_rate_limit,
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801649c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			.rate_limit_max = this->config.turn_config.rate_limit,
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 80164a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80164ac:	eef1 7a67 	vneg.f32	s15, s15
 80164b0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	this->_forward_control_pid.init(forward_control_config);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f103 0660 	add.w	r6, r3, #96	@ 0x60
 80164ba:	466d      	mov	r5, sp
 80164bc:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80164c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164c8:	6823      	ldr	r3, [r4, #0]
 80164ca:	602b      	str	r3, [r5, #0]
 80164cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80164d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164d2:	4630      	mov	r0, r6
 80164d4:	f007 f912 	bl	801d6fc <_ZN11PID_Control4initE20pid_control_config_t>
	this->_turn_control_pid.init(turn_control_config);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f103 069c 	add.w	r6, r3, #156	@ 0x9c
 80164de:	466d      	mov	r5, sp
 80164e0:	f107 0414 	add.w	r4, r7, #20
 80164e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164ec:	6823      	ldr	r3, [r4, #0]
 80164ee:	602b      	str	r3, [r5, #0]
 80164f0:	f107 0308 	add.w	r3, r7, #8
 80164f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164f6:	4630      	mov	r0, r6
 80164f8:	f007 f900 	bl	801d6fc <_ZN11PID_Control4initE20pid_control_config_t>

}
 80164fc:	bf00      	nop
 80164fe:	376c      	adds	r7, #108	@ 0x6c
 8016500:	46bd      	mov	sp, r7
 8016502:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016506:	b004      	add	sp, #16
 8016508:	4770      	bx	lr

0801650a <_ZN18TWIPR_SpeedControl5resetEv>:

void TWIPR_SpeedControl::reset() {
 801650a:	b580      	push	{r7, lr}
 801650c:	b082      	sub	sp, #8
 801650e:	af00      	add	r7, sp, #0
 8016510:	6078      	str	r0, [r7, #4]
	this->_forward_control_pid.reset();
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	3360      	adds	r3, #96	@ 0x60
 8016516:	4618      	mov	r0, r3
 8016518:	f007 f90f 	bl	801d73a <_ZN11PID_Control5resetEv>
	this->_turn_control_pid.reset();
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	339c      	adds	r3, #156	@ 0x9c
 8016520:	4618      	mov	r0, r3
 8016522:	f007 f90a 	bl	801d73a <_ZN11PID_Control5resetEv>

	this->input.forward = 0;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f04f 0200 	mov.w	r2, #0
 801652c:	651a      	str	r2, [r3, #80]	@ 0x50
	this->input.turn = 0;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f04f 0200 	mov.w	r2, #0
 8016534:	655a      	str	r2, [r3, #84]	@ 0x54
	this->output.input_left = 0;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f04f 0200 	mov.w	r2, #0
 801653c:	659a      	str	r2, [r3, #88]	@ 0x58
	this->output.input_right = 0;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f04f 0200 	mov.w	r2, #0
 8016544:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8016546:	bf00      	nop
 8016548:	3708      	adds	r7, #8
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <_ZN18TWIPR_SpeedControl6updateE27twipr_speed_control_input_tff>:

// =========================================================================================================================== //
twipr_speed_control_output_t TWIPR_SpeedControl::update(
		twipr_speed_control_input_t input, float speed_forward_meas,
		float speed_turn_meas) {
 801654e:	b580      	push	{r7, lr}
 8016550:	b090      	sub	sp, #64	@ 0x40
 8016552:	af00      	add	r7, sp, #0
 8016554:	61f8      	str	r0, [r7, #28]
 8016556:	eeb0 7a40 	vmov.f32	s14, s0
 801655a:	eef0 7a60 	vmov.f32	s15, s1
 801655e:	ed87 1a04 	vstr	s2, [r7, #16]
 8016562:	edc7 1a03 	vstr	s3, [r7, #12]
 8016566:	ed87 7a05 	vstr	s14, [r7, #20]
 801656a:	edc7 7a06 	vstr	s15, [r7, #24]
	twipr_speed_control_output_t output = { .input_left = 0, .input_right = 0 };
 801656e:	f04f 0300 	mov.w	r3, #0
 8016572:	623b      	str	r3, [r7, #32]
 8016574:	f04f 0300 	mov.w	r3, #0
 8016578:	627b      	str	r3, [r7, #36]	@ 0x24

	this->input = input;
 801657a:	69fb      	ldr	r3, [r7, #28]
 801657c:	3350      	adds	r3, #80	@ 0x50
 801657e:	f107 0214 	add.w	r2, r7, #20
 8016582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016586:	e883 0003 	stmia.w	r3, {r0, r1}
	float error_speed = input.forward - speed_forward_meas;
 801658a:	ed97 7a05 	vldr	s14, [r7, #20]
 801658e:	edd7 7a04 	vldr	s15, [r7, #16]
 8016592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016596:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float error_turn = input.turn - speed_turn_meas;
 801659a:	ed97 7a06 	vldr	s14, [r7, #24]
 801659e:	edd7 7a03 	vldr	s15, [r7, #12]
 80165a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	float output_forward = this->_forward_control_pid.update(error_speed);
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	3360      	adds	r3, #96	@ 0x60
 80165ae:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80165b2:	4618      	mov	r0, r3
 80165b4:	f007 f8d7 	bl	801d766 <_ZN11PID_Control6updateEf>
 80165b8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	float output_turn = this->_turn_control_pid.update(error_turn);
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	339c      	adds	r3, #156	@ 0x9c
 80165c0:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80165c4:	4618      	mov	r0, r3
 80165c6:	f007 f8ce 	bl	801d766 <_ZN11PID_Control6updateEf>
 80165ca:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

	this->output.input_left = output_forward / 2.0 + output_turn / 2.0;
 80165ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80165d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80165d6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80165da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80165de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80165e2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80165e6:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80165ea:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80165ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80165f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80165f6:	69fb      	ldr	r3, [r7, #28]
 80165f8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	this->output.input_right = output_forward / 2.0 - output_turn / 2.0;
 80165fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8016600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016604:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8016608:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801660c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016610:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8016614:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 8016618:	ee85 7b04 	vdiv.f64	d7, d5, d4
 801661c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016620:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016624:	69fb      	ldr	r3, [r7, #28]
 8016626:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	return this->output;
 801662a:	69fa      	ldr	r2, [r7, #28]
 801662c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016630:	3258      	adds	r2, #88	@ 0x58
 8016632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016636:	e883 0003 	stmia.w	r3, {r0, r1}

	return output;
}
 801663a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801663e:	ee07 2a10 	vmov	s14, r2
 8016642:	ee07 3a90 	vmov	s15, r3
 8016646:	eeb0 0a47 	vmov.f32	s0, s14
 801664a:	eef0 0a67 	vmov.f32	s1, s15
 801664e:	3740      	adds	r7, #64	@ 0x40
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <_ZN18TWIPR_SpeedControl13setForwardPIDEfff>:

// =========================================================================================================================== //
void TWIPR_SpeedControl::setForwardPID(float Kp, float Ki, float Kd) {
 8016654:	b480      	push	{r7}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	ed87 0a02 	vstr	s0, [r7, #8]
 8016660:	edc7 0a01 	vstr	s1, [r7, #4]
 8016664:	ed87 1a00 	vstr	s2, [r7]
	this->config.forward_config.Kp = Kp;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	68ba      	ldr	r2, [r7, #8]
 801666c:	601a      	str	r2, [r3, #0]
	this->config.forward_config.Ki = Ki;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	605a      	str	r2, [r3, #4]
	this->config.forward_config.Kd = Kd;
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	683a      	ldr	r2, [r7, #0]
 8016678:	609a      	str	r2, [r3, #8]

	this->_forward_control_pid.config.Kp = Kp;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	68ba      	ldr	r2, [r7, #8]
 801667e:	661a      	str	r2, [r3, #96]	@ 0x60
	this->_forward_control_pid.config.Ki = Ki;
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	687a      	ldr	r2, [r7, #4]
 8016684:	665a      	str	r2, [r3, #100]	@ 0x64
	this->_forward_control_pid.config.Kd = Kd;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	683a      	ldr	r2, [r7, #0]
 801668a:	669a      	str	r2, [r3, #104]	@ 0x68

}
 801668c:	bf00      	nop
 801668e:	3714      	adds	r7, #20
 8016690:	46bd      	mov	sp, r7
 8016692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016696:	4770      	bx	lr

08016698 <_ZN18TWIPR_SpeedControl10setTurnPIDEfff>:

// =========================================================================================================================== //
void TWIPR_SpeedControl::setTurnPID(float Kp, float Ki, float Kd) {
 8016698:	b480      	push	{r7}
 801669a:	b085      	sub	sp, #20
 801669c:	af00      	add	r7, sp, #0
 801669e:	60f8      	str	r0, [r7, #12]
 80166a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80166a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80166a8:	ed87 1a00 	vstr	s2, [r7]
	this->config.turn_config.Kp = Kp;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	68ba      	ldr	r2, [r7, #8]
 80166b0:	629a      	str	r2, [r3, #40]	@ 0x28
	this->config.turn_config.Ki = Ki;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	687a      	ldr	r2, [r7, #4]
 80166b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	this->config.turn_config.Kd = Kd;
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	683a      	ldr	r2, [r7, #0]
 80166bc:	631a      	str	r2, [r3, #48]	@ 0x30

	this->_turn_control_pid.config.Kp = Kp;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	68ba      	ldr	r2, [r7, #8]
 80166c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	this->_turn_control_pid.config.Ki = Ki;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	687a      	ldr	r2, [r7, #4]
 80166ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	this->_turn_control_pid.config.Kd = Kd;
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	683a      	ldr	r2, [r7, #0]
 80166d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
}
 80166d6:	bf00      	nop
 80166d8:	3714      	adds	r7, #20
 80166da:	46bd      	mov	sp, r7
 80166dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e0:	4770      	bx	lr

080166e2 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80166e2:	b480      	push	{r7}
 80166e4:	b083      	sub	sp, #12
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80166ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80166f0:	eef0 7ae7 	vabs.f32	s15, s15
 80166f4:	eeb0 0a67 	vmov.f32	s0, s15
 80166f8:	370c      	adds	r7, #12
 80166fa:	46bd      	mov	sp, r7
 80166fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016700:	4770      	bx	lr

08016702 <_ZN13elapsedMillis5resetEv>:

class elapsedMillis {
private:
	unsigned long ms;
public:
	void reset() {
 8016702:	b580      	push	{r7, lr}
 8016704:	b082      	sub	sp, #8
 8016706:	af00      	add	r7, sp, #0
 8016708:	6078      	str	r0, [r7, #4]
		ms = millis();
 801670a:	f00a fa4b 	bl	8020ba4 <_Z6millisv>
 801670e:	4602      	mov	r2, r0
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	601a      	str	r2, [r3, #0]
	}
 8016714:	bf00      	nop
 8016716:	3708      	adds	r7, #8
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <_ZN13elapsedMillisC1Ev>:
	elapsedMillis(void) {
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
		ms = millis();
 8016724:	f00a fa3e 	bl	8020ba4 <_Z6millisv>
 8016728:	4602      	mov	r2, r0
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	601a      	str	r2, [r3, #0]
	}
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	4618      	mov	r0, r3
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <_ZNK13elapsedMilliscvmEv>:
		ms = millis() - val;
	}
	elapsedMillis(const elapsedMillis &orig) {
		ms = orig.ms;
	}
	operator unsigned long() const {
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
		return millis() - ms;
 8016740:	f00a fa30 	bl	8020ba4 <_Z6millisv>
 8016744:	4602      	mov	r2, r0
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	1ad3      	subs	r3, r2, r3
	}
 801674c:	4618      	mov	r0, r3
 801674e:	3708      	adds	r7, #8
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}

08016754 <_Z41__static_initialization_and_destruction_0ii>:
	this->status = TWIPR_DRIVE_STATUS_ERROR;
	this->error = (twipr_drive_error_t) error;

	// Call the error handler of the TWIPR
	twipr_error_handler(error);
}
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	6039      	str	r1, [r7, #0]
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2b01      	cmp	r3, #1
 8016762:	d107      	bne.n	8016774 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801676a:	4293      	cmp	r3, r2
 801676c:	d102      	bne.n	8016774 <_Z41__static_initialization_and_destruction_0ii+0x20>
elapsedMillis raceConditionTimer;
 801676e:	4803      	ldr	r0, [pc, #12]	@ (801677c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8016770:	f7ff ffd4 	bl	801671c <_ZN13elapsedMillisC1Ev>
}
 8016774:	bf00      	nop
 8016776:	3708      	adds	r7, #8
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	2401f44c 	.word	0x2401f44c

08016780 <_GLOBAL__sub_I_speed_semaphore>:
 8016780:	b580      	push	{r7, lr}
 8016782:	af00      	add	r7, sp, #0
 8016784:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016788:	2001      	movs	r0, #1
 801678a:	f7ff ffe3 	bl	8016754 <_Z41__static_initialization_and_destruction_0ii>
 801678e:	bd80      	pop	{r7, pc}

08016790 <_ZN13elapsedMillisC1Em>:
	elapsedMillis(unsigned long val) {
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 801679a:	f00a fa03 	bl	8020ba4 <_Z6millisv>
 801679e:	4602      	mov	r2, r0
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	1ad2      	subs	r2, r2, r3
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	601a      	str	r2, [r3, #0]
	}
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4618      	mov	r0, r3
 80167ac:	3708      	adds	r7, #8
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}

080167b2 <_ZN17SimplexMotion_CANC1Ev>:

osSemaphoreId_t drive_can_speed_semaphore;
osSemaphoreId_t drive_can_voltage_semaphore;
osSemaphoreId_t drive_can_torque_semaphore;

SimplexMotion_CAN::SimplexMotion_CAN() {
 80167b2:	b480      	push	{r7}
 80167b4:	b083      	sub	sp, #12
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	2200      	movs	r2, #0
 80167be:	701a      	strb	r2, [r3, #0]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2200      	movs	r2, #0
 80167c4:	611a      	str	r2, [r3, #16]

}
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	4618      	mov	r0, r3
 80167ca:	370c      	adds	r7, #12
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr

080167d4 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::init(simplexmotion_can_config_t config) {
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b086      	sub	sp, #24
 80167d8:	af00      	add	r7, sp, #0
 80167da:	60f8      	str	r0, [r7, #12]
 80167dc:	4638      	mov	r0, r7
 80167de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	3304      	adds	r3, #4
 80167e6:	463a      	mov	r2, r7
 80167e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80167ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_StatusTypeDef status;
	// Check the communication
	status = this->checkCommunication();
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f000 f91a 	bl	8016a28 <_ZN17SimplexMotion_CAN18checkCommunicationEv>
 80167f4:	4603      	mov	r3, r0
 80167f6:	75fb      	strb	r3, [r7, #23]

	if (status) {
 80167f8:	7dfb      	ldrb	r3, [r7, #23]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d001      	beq.n	8016802 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x2e>
		return HAL_ERROR;
 80167fe:	2301      	movs	r3, #1
 8016800:	e024      	b.n	801684c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x78>
	}
	// Read the Firmware Version
	uint16_t software_rev = 0;
 8016802:	2300      	movs	r3, #0
 8016804:	82bb      	strh	r3, [r7, #20]
	status = this->readSoftwareRev(software_rev);
 8016806:	f107 0314 	add.w	r3, r7, #20
 801680a:	4619      	mov	r1, r3
 801680c:	68f8      	ldr	r0, [r7, #12]
 801680e:	f000 f9bd 	bl	8016b8c <_ZN17SimplexMotion_CAN15readSoftwareRevERt>
 8016812:	4603      	mov	r3, r0
 8016814:	75fb      	strb	r3, [r7, #23]

	// Reset the motor
	status = this->setMode(SIMPLEXMOTION_CAN_MODE_RESET);
 8016816:	2101      	movs	r1, #1
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f000 f9c6 	bl	8016baa <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>
 801681e:	4603      	mov	r3, r0
 8016820:	75fb      	strb	r3, [r7, #23]

	if (status) {
 8016822:	7dfb      	ldrb	r3, [r7, #23]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d001      	beq.n	801682c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x58>
		return HAL_ERROR;
 8016828:	2301      	movs	r3, #1
 801682a:	e00f      	b.n	801684c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x78>
	}

	// Set the torque limit
	status = this->setTorqueLimit(this->config.torque_limit);
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016832:	eeb0 0a67 	vmov.f32	s0, s15
 8016836:	68f8      	ldr	r0, [r7, #12]
 8016838:	f000 fa58 	bl	8016cec <_ZN17SimplexMotion_CAN14setTorqueLimitEf>
 801683c:	4603      	mov	r3, r0
 801683e:	75fb      	strb	r3, [r7, #23]

	if (status) {
 8016840:	7dfb      	ldrb	r3, [r7, #23]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d001      	beq.n	801684a <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x76>
		return HAL_ERROR;
 8016846:	2301      	movs	r3, #1
 8016848:	e000      	b.n	801684c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x78>
	}

	// Beep

	return HAL_OK;
 801684a:	2300      	movs	r3, #0
}
 801684c:	4618      	mov	r0, r3
 801684e:	3718      	adds	r7, #24
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}

08016854 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::start(simplexmotion_can_mode_t mode) {
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
 801685c:	460b      	mov	r3, r1
 801685e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	status = this->setTarget(0);
 8016860:	2100      	movs	r1, #0
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f000 f9fc 	bl	8016c60 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016868:	4603      	mov	r3, r0
 801686a:	73fb      	strb	r3, [r7, #15]

	if (status) {
 801686c:	7bfb      	ldrb	r3, [r7, #15]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d001      	beq.n	8016876 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x22>
		return HAL_ERROR;
 8016872:	2301      	movs	r3, #1
 8016874:	e00c      	b.n	8016890 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x3c>
	}

	status = this->setMode(mode);
 8016876:	78fb      	ldrb	r3, [r7, #3]
 8016878:	4619      	mov	r1, r3
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f000 f995 	bl	8016baa <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>
 8016880:	4603      	mov	r3, r0
 8016882:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016884:	7bfb      	ldrb	r3, [r7, #15]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d001      	beq.n	801688e <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x3a>
		return HAL_ERROR;
 801688a:	2301      	movs	r3, #1
 801688c:	e000      	b.n	8016890 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x3c>
	}

	return HAL_OK;
 801688e:	2300      	movs	r3, #0

}
 8016890:	4618      	mov	r0, r3
 8016892:	3710      	adds	r7, #16
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}

08016898 <_ZN17SimplexMotion_CAN5writeEtPhh>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::write(uint16_t reg, uint8_t *data,
		uint8_t length) {
 8016898:	b590      	push	{r4, r7, lr}
 801689a:	b087      	sub	sp, #28
 801689c:	af02      	add	r7, sp, #8
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	607a      	str	r2, [r7, #4]
 80168a2:	461a      	mov	r2, r3
 80168a4:	460b      	mov	r3, r1
 80168a6:	817b      	strh	r3, [r7, #10]
 80168a8:	4613      	mov	r3, r2
 80168aa:	727b      	strb	r3, [r7, #9]
	return this->config.can->sendMessage(this->_getCANHeader(reg), data, length);
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	685c      	ldr	r4, [r3, #4]
 80168b0:	897b      	ldrh	r3, [r7, #10]
 80168b2:	4619      	mov	r1, r3
 80168b4:	68f8      	ldr	r0, [r7, #12]
 80168b6:	f000 fa7b 	bl	8016db0 <_ZN17SimplexMotion_CAN13_getCANHeaderEt>
 80168ba:	4601      	mov	r1, r0
 80168bc:	7a7b      	ldrb	r3, [r7, #9]
 80168be:	2201      	movs	r2, #1
 80168c0:	9200      	str	r2, [sp, #0]
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	4620      	mov	r0, r4
 80168c6:	f006 fadd 	bl	801ce84 <_ZN3CAN11sendMessageEmPhhb>
 80168ca:	4603      	mov	r3, r0
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3714      	adds	r7, #20
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd90      	pop	{r4, r7, pc}

080168d4 <_ZN17SimplexMotion_CAN5writeEtt>:
	uint8_t tx_data[4];
	float_to_bytearray(data, tx_data);
	return this->write(reg, tx_data, 4);
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::write(uint16_t reg, uint16_t data) {
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	460b      	mov	r3, r1
 80168de:	807b      	strh	r3, [r7, #2]
 80168e0:	4613      	mov	r3, r2
 80168e2:	803b      	strh	r3, [r7, #0]
	uint8_t tx_data[2];
	uint16_to_bytearray(data, tx_data);
 80168e4:	f107 020c 	add.w	r2, r7, #12
 80168e8:	883b      	ldrh	r3, [r7, #0]
 80168ea:	4611      	mov	r1, r2
 80168ec:	4618      	mov	r0, r3
 80168ee:	f009 fe65 	bl	80205bc <_Z19uint16_to_bytearraytPh>
	return this->write(reg, tx_data, 2);
 80168f2:	f107 020c 	add.w	r2, r7, #12
 80168f6:	8879      	ldrh	r1, [r7, #2]
 80168f8:	2302      	movs	r3, #2
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7ff ffcc 	bl	8016898 <_ZN17SimplexMotion_CAN5writeEtPhh>
 8016900:	4603      	mov	r3, r0
}
 8016902:	4618      	mov	r0, r3
 8016904:	3710      	adds	r7, #16
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}

0801690a <_ZN17SimplexMotion_CAN5writeEtl>:
	uint8_t tx_data[2];
	int16_to_bytearray(data, tx_data);
	return this->write(reg, tx_data, 2);
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::write(uint16_t reg, int32_t data) {
 801690a:	b580      	push	{r7, lr}
 801690c:	b086      	sub	sp, #24
 801690e:	af00      	add	r7, sp, #0
 8016910:	60f8      	str	r0, [r7, #12]
 8016912:	460b      	mov	r3, r1
 8016914:	607a      	str	r2, [r7, #4]
 8016916:	817b      	strh	r3, [r7, #10]
	uint8_t tx_data[4];
	int32_to_bytearray(data, tx_data);
 8016918:	f107 0314 	add.w	r3, r7, #20
 801691c:	4619      	mov	r1, r3
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f009 fe2b 	bl	802057a <_Z18int32_to_bytearraylPh>
	return this->write(reg, tx_data, 4);
 8016924:	f107 0214 	add.w	r2, r7, #20
 8016928:	8979      	ldrh	r1, [r7, #10]
 801692a:	2304      	movs	r3, #4
 801692c:	68f8      	ldr	r0, [r7, #12]
 801692e:	f7ff ffb3 	bl	8016898 <_ZN17SimplexMotion_CAN5writeEtPhh>
 8016932:	4603      	mov	r3, r0
}
 8016934:	4618      	mov	r0, r3
 8016936:	3718      	adds	r7, #24
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <_ZN17SimplexMotion_CAN4readEtPhhRh>:

/* --------------------------------------------------------------------- */
CAN_Status SimplexMotion_CAN::read(uint16_t reg, uint8_t *responseData,
		uint8_t requestLength, uint8_t &responseLength) {
 801693c:	b590      	push	{r4, r7, lr}
 801693e:	b087      	sub	sp, #28
 8016940:	af02      	add	r7, sp, #8
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	607a      	str	r2, [r7, #4]
 8016946:	461a      	mov	r2, r3
 8016948:	460b      	mov	r3, r1
 801694a:	817b      	strh	r3, [r7, #10]
 801694c:	4613      	mov	r3, r2
 801694e:	727b      	strb	r3, [r7, #9]
	return this->config.can->sendRemoteFrame(this->_getCANHeader(reg),
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	685c      	ldr	r4, [r3, #4]
 8016954:	897b      	ldrh	r3, [r7, #10]
 8016956:	4619      	mov	r1, r3
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f000 fa29 	bl	8016db0 <_ZN17SimplexMotion_CAN13_getCANHeaderEt>
 801695e:	4601      	mov	r1, r0
 8016960:	6a3b      	ldr	r3, [r7, #32]
 8016962:	9301      	str	r3, [sp, #4]
 8016964:	7a7b      	ldrb	r3, [r7, #9]
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2202      	movs	r2, #2
 801696c:	4620      	mov	r0, r4
 801696e:	f006 fac7 	bl	801cf00 <_ZN3CAN15sendRemoteFrameEmmPhhRh>
 8016972:	4603      	mov	r3, r0
	SIMPLEXMOTION_CAN_REMOTE_TIMEOUT, responseData, requestLength,
			responseLength);
}
 8016974:	4618      	mov	r0, r3
 8016976:	3714      	adds	r7, #20
 8016978:	46bd      	mov	sp, r7
 801697a:	bd90      	pop	{r4, r7, pc}

0801697c <_ZN17SimplexMotion_CAN4readEtRt>:
	data = bytearray_to_float(responseData);

	return HAL_OK;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::read(uint16_t reg, uint16_t &data) {
 801697c:	b580      	push	{r7, lr}
 801697e:	b088      	sub	sp, #32
 8016980:	af02      	add	r7, sp, #8
 8016982:	60f8      	str	r0, [r7, #12]
 8016984:	460b      	mov	r3, r1
 8016986:	607a      	str	r2, [r7, #4]
 8016988:	817b      	strh	r3, [r7, #10]
	uint8_t responseData[2];
	uint8_t responseLength = 0;
 801698a:	2300      	movs	r3, #0
 801698c:	74fb      	strb	r3, [r7, #19]

	CAN_Status status = this->read(reg, responseData, 2, responseLength);
 801698e:	f107 0214 	add.w	r2, r7, #20
 8016992:	8979      	ldrh	r1, [r7, #10]
 8016994:	f107 0313 	add.w	r3, r7, #19
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	2302      	movs	r3, #2
 801699c:	68f8      	ldr	r0, [r7, #12]
 801699e:	f7ff ffcd 	bl	801693c <_ZN17SimplexMotion_CAN4readEtPhhRh>
 80169a2:	4603      	mov	r3, r0
 80169a4:	75fb      	strb	r3, [r7, #23]

	if (status != CAN_SUCCESS || responseLength != 2) {
 80169a6:	7dfb      	ldrb	r3, [r7, #23]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d102      	bne.n	80169b2 <_ZN17SimplexMotion_CAN4readEtRt+0x36>
 80169ac:	7cfb      	ldrb	r3, [r7, #19]
 80169ae:	2b02      	cmp	r3, #2
 80169b0:	d001      	beq.n	80169b6 <_ZN17SimplexMotion_CAN4readEtRt+0x3a>
		return HAL_ERROR;
 80169b2:	2301      	movs	r3, #1
 80169b4:	e009      	b.n	80169ca <_ZN17SimplexMotion_CAN4readEtRt+0x4e>
	}

	data = bytearray_to_uint16(responseData);
 80169b6:	f107 0314 	add.w	r3, r7, #20
 80169ba:	4618      	mov	r0, r3
 80169bc:	f009 fdb1 	bl	8020522 <_Z19bytearray_to_uint16Ph>
 80169c0:	4603      	mov	r3, r0
 80169c2:	461a      	mov	r2, r3
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80169c8:	2300      	movs	r3, #0
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3718      	adds	r7, #24
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <_ZN17SimplexMotion_CAN4readEtRs>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::read(uint16_t reg, int16_t &data) {
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b088      	sub	sp, #32
 80169d6:	af02      	add	r7, sp, #8
 80169d8:	60f8      	str	r0, [r7, #12]
 80169da:	460b      	mov	r3, r1
 80169dc:	607a      	str	r2, [r7, #4]
 80169de:	817b      	strh	r3, [r7, #10]
	uint8_t responseData[2];
	uint8_t responseLength = 0;
 80169e0:	2300      	movs	r3, #0
 80169e2:	74fb      	strb	r3, [r7, #19]

	CAN_Status status = this->read(reg, responseData, 2, responseLength);
 80169e4:	f107 0214 	add.w	r2, r7, #20
 80169e8:	8979      	ldrh	r1, [r7, #10]
 80169ea:	f107 0313 	add.w	r3, r7, #19
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	2302      	movs	r3, #2
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f7ff ffa2 	bl	801693c <_ZN17SimplexMotion_CAN4readEtPhhRh>
 80169f8:	4603      	mov	r3, r0
 80169fa:	75fb      	strb	r3, [r7, #23]

	if (status != CAN_SUCCESS || responseLength != 2) {
 80169fc:	7dfb      	ldrb	r3, [r7, #23]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d102      	bne.n	8016a08 <_ZN17SimplexMotion_CAN4readEtRs+0x36>
 8016a02:	7cfb      	ldrb	r3, [r7, #19]
 8016a04:	2b02      	cmp	r3, #2
 8016a06:	d001      	beq.n	8016a0c <_ZN17SimplexMotion_CAN4readEtRs+0x3a>
		return HAL_ERROR;
 8016a08:	2301      	movs	r3, #1
 8016a0a:	e009      	b.n	8016a20 <_ZN17SimplexMotion_CAN4readEtRs+0x4e>
	}

	data = bytearray_to_int16(responseData);
 8016a0c:	f107 0314 	add.w	r3, r7, #20
 8016a10:	4618      	mov	r0, r3
 8016a12:	f009 fd9c 	bl	802054e <_Z18bytearray_to_int16Ph>
 8016a16:	4603      	mov	r3, r0
 8016a18:	461a      	mov	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8016a1e:	2300      	movs	r3, #0
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3718      	adds	r7, #24
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <_ZN17SimplexMotion_CAN18checkCommunicationEv>:
	data = bytearray_to_int32(responseData);

	return HAL_OK;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::checkCommunication() {
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b084      	sub	sp, #16
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
	// Read the mode
	simplexmotion_can_mode_t mode;
	HAL_StatusTypeDef status = this->readMode(mode);
 8016a30:	f107 030e 	add.w	r3, r7, #14
 8016a34:	4619      	mov	r1, r3
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 f8e9 	bl	8016c0e <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	73fb      	strb	r3, [r7, #15]
	return status;
 8016a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}

08016a4a <_ZN17SimplexMotion_CAN10checkMotorEv>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::checkMotor() {
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b084      	sub	sp, #16
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	// Check the communication
	status = this->checkCommunication();
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f7ff ffe8 	bl	8016a28 <_ZN17SimplexMotion_CAN18checkCommunicationEv>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	73fb      	strb	r3, [r7, #15]
	if (status) {
 8016a5c:	7bfb      	ldrb	r3, [r7, #15]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d001      	beq.n	8016a66 <_ZN17SimplexMotion_CAN10checkMotorEv+0x1c>
		return status;
 8016a62:	7bfb      	ldrb	r3, [r7, #15]
 8016a64:	e019      	b.n	8016a9a <_ZN17SimplexMotion_CAN10checkMotorEv+0x50>
	}
	status = this->beep(500);
 8016a66:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f000 f91c 	bl	8016ca8 <_ZN17SimplexMotion_CAN4beepEt>
 8016a70:	4603      	mov	r3, r0
 8016a72:	73fb      	strb	r3, [r7, #15]
	if (status) {
 8016a74:	7bfb      	ldrb	r3, [r7, #15]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d001      	beq.n	8016a7e <_ZN17SimplexMotion_CAN10checkMotorEv+0x34>
		return status;
 8016a7a:	7bfb      	ldrb	r3, [r7, #15]
 8016a7c:	e00d      	b.n	8016a9a <_ZN17SimplexMotion_CAN10checkMotorEv+0x50>
	}
	osDelay(150);
 8016a7e:	2096      	movs	r0, #150	@ 0x96
 8016a80:	f7f8 f87f 	bl	800eb82 <osDelay>
	status = this->stop();
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 f8fb 	bl	8016c80 <_ZN17SimplexMotion_CAN4stopEv>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016a8e:	7bfb      	ldrb	r3, [r7, #15]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d001      	beq.n	8016a98 <_ZN17SimplexMotion_CAN10checkMotorEv+0x4e>
		return status;
 8016a94:	7bfb      	ldrb	r3, [r7, #15]
 8016a96:	e000      	b.n	8016a9a <_ZN17SimplexMotion_CAN10checkMotorEv+0x50>
	}

	return HAL_OK;
 8016a98:	2300      	movs	r3, #0

}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3710      	adds	r7, #16
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	0000      	movs	r0, r0
 8016aa4:	0000      	movs	r0, r0
	...

08016aa8 <_ZN17SimplexMotion_CAN9setTorqueEf>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setTorque(float torque) {
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b084      	sub	sp, #16
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	ed87 0a00 	vstr	s0, [r7]
	if (this->mode != SIMPLEXMOTION_CAN_MODE_TORQUE) {
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	2b28      	cmp	r3, #40	@ 0x28
 8016aba:	d001      	beq.n	8016ac0 <_ZN17SimplexMotion_CAN9setTorqueEf+0x18>
		return HAL_ERROR;
 8016abc:	2301      	movs	r3, #1
 8016abe:	e022      	b.n	8016b06 <_ZN17SimplexMotion_CAN9setTorqueEf+0x5e>
	}

	// Calculate the corresponding torque value
	int16_t torque_value_int = (int16_t) (this->config.direction * torque
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8016ac6:	ee07 3a90 	vmov	s15, r3
 8016aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016ace:	edd7 7a00 	vldr	s15, [r7]
 8016ad2:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->config.torque_limit * 32767.0);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	ed93 7a03 	vldr	s14, [r3, #12]
 8016adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016ae0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016ae4:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8016b10 <_ZN17SimplexMotion_CAN9setTorqueEf+0x68>
 8016ae8:	ee27 7b06 	vmul.f64	d7, d7, d6
	int16_t torque_value_int = (int16_t) (this->config.direction * torque
 8016aec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016af0:	ee17 3a90 	vmov	r3, s15
 8016af4:	81fb      	strh	r3, [r7, #14]

	return this->setTarget((int32_t) torque_value_int);
 8016af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016afa:	4619      	mov	r1, r3
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f000 f8af 	bl	8016c60 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016b02:	4603      	mov	r3, r0
 8016b04:	bf00      	nop
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3710      	adds	r7, #16
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	00000000 	.word	0x00000000
 8016b14:	40dfffc0 	.word	0x40dfffc0

08016b18 <_ZN17SimplexMotion_CAN9readSpeedERf>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readSpeed(float &speed) {
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
	int16_t speed_int = 0;
 8016b22:	2300      	movs	r3, #0
 8016b24:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status;

	status = this->read(SIMPLEXMOTION_CAN_REG_SPEED, speed_int);
 8016b26:	f107 030c 	add.w	r3, r7, #12
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	21ca      	movs	r1, #202	@ 0xca
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f7ff ff4f 	bl	80169d2 <_ZN17SimplexMotion_CAN4readEtRs>
 8016b34:	4603      	mov	r3, r0
 8016b36:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016b38:	7bfb      	ldrb	r3, [r7, #15]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d001      	beq.n	8016b42 <_ZN17SimplexMotion_CAN9readSpeedERf+0x2a>
		return HAL_ERROR;
 8016b3e:	2301      	movs	r3, #1
 8016b40:	e01b      	b.n	8016b7a <_ZN17SimplexMotion_CAN9readSpeedERf+0x62>
	}

	speed = this->config.direction * 2 * pi * speed_int / 256;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8016b48:	005b      	lsls	r3, r3, #1
 8016b4a:	ee07 3a90 	vmov	s15, r3
 8016b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b52:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8016b84 <_ZN17SimplexMotion_CAN9readSpeedERf+0x6c>
 8016b56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016b5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016b5e:	ee07 3a90 	vmov	s15, r3
 8016b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016b6a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8016b88 <_ZN17SimplexMotion_CAN9readSpeedERf+0x70>
 8016b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8016b78:	2300      	movs	r3, #0
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3710      	adds	r7, #16
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	bf00      	nop
 8016b84:	40490fdb 	.word	0x40490fdb
 8016b88:	43800000 	.word	0x43800000

08016b8c <_ZN17SimplexMotion_CAN15readSoftwareRevERt>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readHardwareRev() {
	return HAL_ERROR;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readSoftwareRev(uint16_t &software_rev) {
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	6039      	str	r1, [r7, #0]
	return this->read(SIMPLEXMOTION_CAN_REG_SW_REV, software_rev);
 8016b96:	683a      	ldr	r2, [r7, #0]
 8016b98:	2102      	movs	r1, #2
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f7ff feee 	bl	801697c <_ZN17SimplexMotion_CAN4readEtRt>
 8016ba0:	4603      	mov	r3, r0
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3708      	adds	r7, #8
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}

08016baa <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readName() {
	return HAL_ERROR;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setMode(simplexmotion_can_mode_t mode) {
 8016baa:	b580      	push	{r7, lr}
 8016bac:	b084      	sub	sp, #16
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status = this->write(SIMPLEXMOTION_CAN_REG_MODE,
 8016bb6:	78fb      	ldrb	r3, [r7, #3]
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	461a      	mov	r2, r3
 8016bbc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f7ff fe87 	bl	80168d4 <_ZN17SimplexMotion_CAN5writeEtt>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	73fb      	strb	r3, [r7, #15]
			(uint16_t) mode);

	if (status != HAL_OK) {
 8016bca:	7bfb      	ldrb	r3, [r7, #15]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d001      	beq.n	8016bd4 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x2a>
		return status;
 8016bd0:	7bfb      	ldrb	r3, [r7, #15]
 8016bd2:	e018      	b.n	8016c06 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x5c>
	}

	// Read back the mode
	simplexmotion_can_mode_t mode_read = SIMPLEXMOTION_CAN_MODE_OFF;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	73bb      	strb	r3, [r7, #14]
	status = this->readMode(mode_read);
 8016bd8:	f107 030e 	add.w	r3, r7, #14
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f000 f815 	bl	8016c0e <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 8016be8:	7bfb      	ldrb	r3, [r7, #15]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d001      	beq.n	8016bf2 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x48>
		return status;
 8016bee:	7bfb      	ldrb	r3, [r7, #15]
 8016bf0:	e009      	b.n	8016c06 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x5c>
	}

	// Check if the mode has been successfully set

	if (mode_read != mode) {
 8016bf2:	7bbb      	ldrb	r3, [r7, #14]
 8016bf4:	78fa      	ldrb	r2, [r7, #3]
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d001      	beq.n	8016bfe <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x54>
		return HAL_ERROR;
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	e003      	b.n	8016c06 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x5c>
	}

	this->mode = mode;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	78fa      	ldrb	r2, [r7, #3]
 8016c02:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8016c04:	2300      	movs	r3, #0

}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readMode(simplexmotion_can_mode_t &mode) {
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b086      	sub	sp, #24
 8016c12:	af02      	add	r7, sp, #8
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
	uint8_t rx_data[2] = { 0 };
 8016c18:	2300      	movs	r3, #0
 8016c1a:	81bb      	strh	r3, [r7, #12]
	uint8_t responseLength = 0;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	72fb      	strb	r3, [r7, #11]

	CAN_Status status = this->read(SIMPLEXMOTION_CAN_REG_MODE, rx_data, 2,
 8016c20:	f107 020c 	add.w	r2, r7, #12
 8016c24:	f107 030b 	add.w	r3, r7, #11
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	2302      	movs	r3, #2
 8016c2c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f7ff fe83 	bl	801693c <_ZN17SimplexMotion_CAN4readEtPhhRh>
 8016c36:	4603      	mov	r3, r0
 8016c38:	73fb      	strb	r3, [r7, #15]
			responseLength);

	if (status == CAN_SUCCESS) {
 8016c3a:	7bfb      	ldrb	r3, [r7, #15]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d10a      	bne.n	8016c56 <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t+0x48>
		mode = (simplexmotion_can_mode_t) bytearray_to_uint16(rx_data);
 8016c40:	f107 030c 	add.w	r3, r7, #12
 8016c44:	4618      	mov	r0, r3
 8016c46:	f009 fc6c 	bl	8020522 <_Z19bytearray_to_uint16Ph>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	b2da      	uxtb	r2, r3
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8016c52:	2300      	movs	r3, #0
 8016c54:	e000      	b.n	8016c58 <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t+0x4a>
	}

	return HAL_ERROR;
 8016c56:	2301      	movs	r3, #1
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3710      	adds	r7, #16
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <_ZN17SimplexMotion_CAN9setTargetEl>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setTarget(int32_t target) {
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	6039      	str	r1, [r7, #0]
	return this->write(SIMPLEXMOTION_CAN_REG_TARGET_INPUT, target);
 8016c6a:	683a      	ldr	r2, [r7, #0]
 8016c6c:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f7ff fe4a 	bl	801690a <_ZN17SimplexMotion_CAN5writeEtl>
 8016c76:	4603      	mov	r3, r0
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3708      	adds	r7, #8
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <_ZN17SimplexMotion_CAN4stopEv>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::stop() {
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = this->setTarget(0);
 8016c88:	2100      	movs	r1, #0
 8016c8a:	6878      	ldr	r0, [r7, #4]
 8016c8c:	f7ff ffe8 	bl	8016c60 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016c90:	4603      	mov	r3, r0
 8016c92:	73fb      	strb	r3, [r7, #15]
	if (status) {
 8016c94:	7bfb      	ldrb	r3, [r7, #15]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d001      	beq.n	8016c9e <_ZN17SimplexMotion_CAN4stopEv+0x1e>
		return HAL_ERROR;
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	e000      	b.n	8016ca0 <_ZN17SimplexMotion_CAN4stopEv+0x20>
	}
//	status = this->setMode(SIMPLEXMOTION_CAN_MODE_OFF);
//	if (status) {
//		return HAL_ERROR;
//	}
	return HAL_OK;
 8016c9e:	2300      	movs	r3, #0
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3710      	adds	r7, #16
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <_ZN17SimplexMotion_CAN4beepEt>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::beep(uint16_t amplitude) {
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	807b      	strh	r3, [r7, #2]

	HAL_StatusTypeDef ret;
	ret = this->setMode(SIMPLEXMOTION_CAN_MODE_BEEP);
 8016cb4:	213c      	movs	r1, #60	@ 0x3c
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	f7ff ff77 	bl	8016baa <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8016cc0:	7bfb      	ldrb	r3, [r7, #15]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d001      	beq.n	8016cca <_ZN17SimplexMotion_CAN4beepEt+0x22>
		return ret;
 8016cc6:	7bfb      	ldrb	r3, [r7, #15]
 8016cc8:	e00c      	b.n	8016ce4 <_ZN17SimplexMotion_CAN4beepEt+0x3c>
	}
	// Set the amplitude

	ret = this->setTarget((int32_t) amplitude);
 8016cca:	887b      	ldrh	r3, [r7, #2]
 8016ccc:	4619      	mov	r1, r3
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7ff ffc6 	bl	8016c60 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8016cd8:	7bfb      	ldrb	r3, [r7, #15]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d001      	beq.n	8016ce2 <_ZN17SimplexMotion_CAN4beepEt+0x3a>
		return ret;
 8016cde:	7bfb      	ldrb	r3, [r7, #15]
 8016ce0:	e000      	b.n	8016ce4 <_ZN17SimplexMotion_CAN4beepEt+0x3c>
	}
	return ret;
 8016ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3710      	adds	r7, #16
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}

08016cec <_ZN17SimplexMotion_CAN14setTorqueLimitEf>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setTorqueLimit(float maxTorque) {
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b084      	sub	sp, #16
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t torque_limit_int = (uint16_t) (maxTorque * 1000);
 8016cf8:	edd7 7a00 	vldr	s15, [r7]
 8016cfc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8016d54 <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x68>
 8016d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016d08:	ee17 3a90 	vmov	r3, s15
 8016d0c:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef status;

	status = this->write(SIMPLEXMOTION_CAN_REG_TORQUE_LIMIT, torque_limit_int);
 8016d0e:	89fb      	ldrh	r3, [r7, #14]
 8016d10:	461a      	mov	r2, r3
 8016d12:	21cc      	movs	r1, #204	@ 0xcc
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f7ff fddd 	bl	80168d4 <_ZN17SimplexMotion_CAN5writeEtt>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	737b      	strb	r3, [r7, #13]

	if (status) {
 8016d1e:	7b7b      	ldrb	r3, [r7, #13]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x3c>
		return HAL_ERROR;
 8016d24:	2301      	movs	r3, #1
 8016d26:	e011      	b.n	8016d4c <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x60>
	}
	uint16_t torque_limit_check = 0;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	817b      	strh	r3, [r7, #10]

	status = this->read(SIMPLEXMOTION_CAN_REG_TORQUE_LIMIT, torque_limit_check);
 8016d2c:	f107 030a 	add.w	r3, r7, #10
 8016d30:	461a      	mov	r2, r3
 8016d32:	21cc      	movs	r1, #204	@ 0xcc
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7ff fe21 	bl	801697c <_ZN17SimplexMotion_CAN4readEtRt>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	737b      	strb	r3, [r7, #13]

	if (torque_limit_int != torque_limit_check) {
 8016d3e:	897b      	ldrh	r3, [r7, #10]
 8016d40:	89fa      	ldrh	r2, [r7, #14]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d001      	beq.n	8016d4a <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x5e>
		return HAL_ERROR;
 8016d46:	2301      	movs	r3, #1
 8016d48:	e000      	b.n	8016d4c <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x60>
	}

	return HAL_OK;
 8016d4a:	2300      	movs	r3, #0
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3710      	adds	r7, #16
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	447a0000 	.word	0x447a0000

08016d58 <_ZN17SimplexMotion_CAN10getVoltageERf>:
HAL_StatusTypeDef SimplexMotion_CAN::getTemperature(float &temperature) {
	return HAL_ERROR;
}

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::getVoltage(float &voltage) {
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	6039      	str	r1, [r7, #0]
	uint16_t voltage_int = 0;
 8016d62:	2300      	movs	r3, #0
 8016d64:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = this->read(SIMPLEXMOTION_CAN_REG_VOLTAGE,
 8016d66:	f107 030c 	add.w	r3, r7, #12
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	2164      	movs	r1, #100	@ 0x64
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f7ff fe04 	bl	801697c <_ZN17SimplexMotion_CAN4readEtRt>
 8016d74:	4603      	mov	r3, r0
 8016d76:	73fb      	strb	r3, [r7, #15]
			voltage_int);

	if (status) {
 8016d78:	7bfb      	ldrb	r3, [r7, #15]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d001      	beq.n	8016d82 <_ZN17SimplexMotion_CAN10getVoltageERf+0x2a>
		return status;
 8016d7e:	7bfb      	ldrb	r3, [r7, #15]
 8016d80:	e00e      	b.n	8016da0 <_ZN17SimplexMotion_CAN10getVoltageERf+0x48>
	}

	voltage = voltage_int * 0.01;
 8016d82:	89bb      	ldrh	r3, [r7, #12]
 8016d84:	ee07 3a90 	vmov	s15, r3
 8016d88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016d8c:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8016da8 <_ZN17SimplexMotion_CAN10getVoltageERf+0x50>
 8016d90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016d94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8016d9e:	2300      	movs	r3, #0
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	3710      	adds	r7, #16
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	47ae147b 	.word	0x47ae147b
 8016dac:	3f847ae1 	.word	0x3f847ae1

08016db0 <_ZN17SimplexMotion_CAN13_getCANHeaderEt>:

/* --------------------------------------------------------------------- */
uint32_t SimplexMotion_CAN::_getCANHeader(uint16_t address) {
 8016db0:	b480      	push	{r7}
 8016db2:	b083      	sub	sp, #12
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	460b      	mov	r3, r1
 8016dba:	807b      	strh	r3, [r7, #2]

	return (0 << 24) | (this->config.id << 16) | address;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	7a1b      	ldrb	r3, [r3, #8]
 8016dc0:	041a      	lsls	r2, r3, #16
 8016dc2:	887b      	ldrh	r3, [r7, #2]
 8016dc4:	4313      	orrs	r3, r2

}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	370c      	adds	r7, #12
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr

08016dd2 <_ZN15TWIPR_Drive_CANC1Ev>:

/* ====================================================================== */
TWIPR_Drive_CAN::TWIPR_Drive_CAN() {
 8016dd2:	b580      	push	{r7, lr}
 8016dd4:	b082      	sub	sp, #8
 8016dd6:	af00      	add	r7, sp, #0
 8016dd8:	6078      	str	r0, [r7, #4]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	330c      	adds	r3, #12
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7ff fce7 	bl	80167b2 <_ZN17SimplexMotion_CANC1Ev>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	3320      	adds	r3, #32
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ff fce2 	bl	80167b2 <_ZN17SimplexMotion_CANC1Ev>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	3334      	adds	r3, #52	@ 0x34
 8016df2:	2200      	movs	r2, #0
 8016df4:	601a      	str	r2, [r3, #0]
 8016df6:	605a      	str	r2, [r3, #4]
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2200      	movs	r2, #0
 8016e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f04f 0200 	mov.w	r2, #0
 8016e0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	3348      	adds	r3, #72	@ 0x48
 8016e12:	2200      	movs	r2, #0
 8016e14:	601a      	str	r2, [r3, #0]
 8016e16:	605a      	str	r2, [r3, #4]

}
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3708      	adds	r7, #8
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
	...

08016e24 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef TWIPR_Drive_CAN::init(twipr_drive_can_config_t config) {
 8016e24:	b590      	push	{r4, r7, lr}
 8016e26:	b08d      	sub	sp, #52	@ 0x34
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	4638      	mov	r0, r7
 8016e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	461c      	mov	r4, r3
 8016e36:	463b      	mov	r3, r7
 8016e38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016e3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	HAL_StatusTypeDef status;

	simplexmotion_can_config_t config_left = { .can = this->config.can, .id =
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	681b      	ldr	r3, [r3, #0]
			this->config.id_left, .direction = this->config.direction_left,
			.torque_limit = this->config.torque_max };
 8016e44:	623b      	str	r3, [r7, #32]
			this->config.id_left, .direction = this->config.direction_left,
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	791b      	ldrb	r3, [r3, #4]
			.torque_limit = this->config.torque_max };
 8016e4a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			this->config.id_left, .direction = this->config.direction_left,
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	f993 3006 	ldrsb.w	r3, [r3, #6]
			.torque_limit = this->config.torque_max };
 8016e54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	689b      	ldr	r3, [r3, #8]
 8016e5c:	62bb      	str	r3, [r7, #40]	@ 0x28

	simplexmotion_can_config_t config_right = { .can = this->config.can, .id =
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
			this->config.id_right, .direction = this->config.direction_right,
			.torque_limit = this->config.torque_max };
 8016e62:	617b      	str	r3, [r7, #20]
			this->config.id_right, .direction = this->config.direction_right,
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	795b      	ldrb	r3, [r3, #5]
			.torque_limit = this->config.torque_max };
 8016e68:	763b      	strb	r3, [r7, #24]
			this->config.id_right, .direction = this->config.direction_right,
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	f993 3007 	ldrsb.w	r3, [r3, #7]
			.torque_limit = this->config.torque_max };
 8016e70:	767b      	strb	r3, [r7, #25]
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	689b      	ldr	r3, [r3, #8]
 8016e76:	61fb      	str	r3, [r7, #28]

	status = this->motor_left.init(config_left);
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	f103 000c 	add.w	r0, r3, #12
 8016e7e:	f107 0320 	add.w	r3, r7, #32
 8016e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016e84:	f7ff fca6 	bl	80167d4 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status) {
 8016e8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d002      	beq.n	8016e9c <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0x78>
		return status;
 8016e96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016e9a:	e02a      	b.n	8016ef2 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xce>
	}
	status = this->motor_right.init(config_right);
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	f103 0020 	add.w	r0, r3, #32
 8016ea2:	f107 0314 	add.w	r3, r7, #20
 8016ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016ea8:	f7ff fc94 	bl	80167d4 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t>
 8016eac:	4603      	mov	r3, r0
 8016eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status) {
 8016eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d002      	beq.n	8016ec0 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0x9c>
		return status;
 8016eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016ebe:	e018      	b.n	8016ef2 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xce>
	}

	drive_can_speed_semaphore = osSemaphoreNew(1, 1, NULL);
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	2101      	movs	r1, #1
 8016ec4:	2001      	movs	r0, #1
 8016ec6:	f7f7 ff35 	bl	800ed34 <osSemaphoreNew>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8016efc <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xd8>)
 8016ece:	6013      	str	r3, [r2, #0]
	drive_can_torque_semaphore = osSemaphoreNew(1, 1, NULL);
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	2101      	movs	r1, #1
 8016ed4:	2001      	movs	r0, #1
 8016ed6:	f7f7 ff2d 	bl	800ed34 <osSemaphoreNew>
 8016eda:	4603      	mov	r3, r0
 8016edc:	4a08      	ldr	r2, [pc, #32]	@ (8016f00 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xdc>)
 8016ede:	6013      	str	r3, [r2, #0]
	drive_can_voltage_semaphore = osSemaphoreNew(1, 1, NULL);
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	2101      	movs	r1, #1
 8016ee4:	2001      	movs	r0, #1
 8016ee6:	f7f7 ff25 	bl	800ed34 <osSemaphoreNew>
 8016eea:	4603      	mov	r3, r0
 8016eec:	4a05      	ldr	r2, [pc, #20]	@ (8016f04 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xe0>)
 8016eee:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8016ef0:	2300      	movs	r3, #0
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3734      	adds	r7, #52	@ 0x34
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bd90      	pop	{r4, r7, pc}
 8016efa:	bf00      	nop
 8016efc:	2401f450 	.word	0x2401f450
 8016f00:	2401f458 	.word	0x2401f458
 8016f04:	2401f454 	.word	0x2401f454

08016f08 <_ZN15TWIPR_Drive_CAN5startEv>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef TWIPR_Drive_CAN::start() {
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b084      	sub	sp, #16
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = this->motor_left.checkMotor();
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	330c      	adds	r3, #12
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7ff fd98 	bl	8016a4a <_ZN17SimplexMotion_CAN10checkMotorEv>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016f1e:	7bfb      	ldrb	r3, [r7, #15]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d001      	beq.n	8016f28 <_ZN15TWIPR_Drive_CAN5startEv+0x20>
		return HAL_ERROR;
 8016f24:	2301      	movs	r3, #1
 8016f26:	e024      	b.n	8016f72 <_ZN15TWIPR_Drive_CAN5startEv+0x6a>
	}

	osDelay(250);
 8016f28:	20fa      	movs	r0, #250	@ 0xfa
 8016f2a:	f7f7 fe2a 	bl	800eb82 <osDelay>
	status = this->motor_right.checkMotor();
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	3320      	adds	r3, #32
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7ff fd89 	bl	8016a4a <_ZN17SimplexMotion_CAN10checkMotorEv>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016f3c:	7bfb      	ldrb	r3, [r7, #15]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d001      	beq.n	8016f46 <_ZN15TWIPR_Drive_CAN5startEv+0x3e>
		return HAL_ERROR;
 8016f42:	2301      	movs	r3, #1
 8016f44:	e015      	b.n	8016f72 <_ZN15TWIPR_Drive_CAN5startEv+0x6a>
	}

	this->motor_left.start(SIMPLEXMOTION_CAN_MODE_TORQUE);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	330c      	adds	r3, #12
 8016f4a:	2128      	movs	r1, #40	@ 0x28
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7ff fc81 	bl	8016854 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t>
	this->motor_right.start(SIMPLEXMOTION_CAN_MODE_TORQUE);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	3320      	adds	r3, #32
 8016f56:	2128      	movs	r1, #40	@ 0x28
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7ff fc7b 	bl	8016854 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t>
	this->status = TWIPR_DRIVE_CAN_STATUS_RUNNING;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	2201      	movs	r2, #1
 8016f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	osThreadNew(startCANDriveTask, (void*) this, &drive_task_attributes);
 8016f66:	4a05      	ldr	r2, [pc, #20]	@ (8016f7c <_ZN15TWIPR_Drive_CAN5startEv+0x74>)
 8016f68:	6879      	ldr	r1, [r7, #4]
 8016f6a:	4805      	ldr	r0, [pc, #20]	@ (8016f80 <_ZN15TWIPR_Drive_CAN5startEv+0x78>)
 8016f6c:	f7f7 fd77 	bl	800ea5e <osThreadNew>

	return HAL_OK;
 8016f70:	2300      	movs	r3, #0
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	3710      	adds	r7, #16
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}
 8016f7a:	bf00      	nop
 8016f7c:	08024e14 	.word	0x08024e14
 8016f80:	0801722d 	.word	0x0801722d

08016f84 <_ZN15TWIPR_Drive_CAN4taskEv>:

void TWIPR_Drive_CAN::task() {
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b08c      	sub	sp, #48	@ 0x30
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
	uint32_t current_tick = 0;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t ticks_loop = 0;
 8016f90:	2300      	movs	r3, #0
 8016f92:	62bb      	str	r3, [r7, #40]	@ 0x28
	elapsedMillis voltageTimer = 0;
 8016f94:	f107 0318 	add.w	r3, r7, #24
 8016f98:	2100      	movs	r1, #0
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7ff fbf8 	bl	8016790 <_ZN13elapsedMillisC1Em>
	float left_motor_voltage = 0;
 8016fa0:	f04f 0300 	mov.w	r3, #0
 8016fa4:	617b      	str	r3, [r7, #20]
	float left_motor_speed = 0;
 8016fa6:	f04f 0300 	mov.w	r3, #0
 8016faa:	613b      	str	r3, [r7, #16]
	float right_motor_speed = 0;
 8016fac:	f04f 0300 	mov.w	r3, #0
 8016fb0:	60fb      	str	r3, [r7, #12]
	float torque_left = 0;
 8016fb2:	f04f 0300 	mov.w	r3, #0
 8016fb6:	627b      	str	r3, [r7, #36]	@ 0x24
	float torque_right = 0;
 8016fb8:	f04f 0300 	mov.w	r3, #0
 8016fbc:	623b      	str	r3, [r7, #32]
	HAL_StatusTypeDef status = HAL_ERROR;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	77fb      	strb	r3, [r7, #31]

	while (true) {
		current_tick = osKernelGetTickCount();
 8016fc2:	f7f7 fd37 	bl	800ea34 <osKernelGetTickCount>
 8016fc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

		if (this->status == TWIPR_DRIVE_CAN_STATUS_RUNNING) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016fce:	2b01      	cmp	r3, #1
 8016fd0:	d17e      	bne.n	80170d0 <_ZN15TWIPR_Drive_CAN4taskEv+0x14c>
			// Read the voltage
			if (voltageTimer > 1000) {
 8016fd2:	f107 0318 	add.w	r3, r7, #24
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7ff fbae 	bl	8016738 <_ZNK13elapsedMilliscvmEv>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016fe2:	bf8c      	ite	hi
 8016fe4:	2301      	movhi	r3, #1
 8016fe6:	2300      	movls	r3, #0
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d020      	beq.n	8017030 <_ZN15TWIPR_Drive_CAN4taskEv+0xac>
				voltageTimer.reset();
 8016fee:	f107 0318 	add.w	r3, r7, #24
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7ff fb85 	bl	8016702 <_ZN13elapsedMillis5resetEv>

				status = this->motor_left.getVoltage(left_motor_voltage);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	330c      	adds	r3, #12
 8016ffc:	f107 0214 	add.w	r2, r7, #20
 8017000:	4611      	mov	r1, r2
 8017002:	4618      	mov	r0, r3
 8017004:	f7ff fea8 	bl	8016d58 <_ZN17SimplexMotion_CAN10getVoltageERf>
 8017008:	4603      	mov	r3, r0
 801700a:	77fb      	strb	r3, [r7, #31]

				if (status == HAL_OK) {
 801700c:	7ffb      	ldrb	r3, [r7, #31]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d10e      	bne.n	8017030 <_ZN15TWIPR_Drive_CAN4taskEv+0xac>
					osSemaphoreAcquire(drive_can_voltage_semaphore,
 8017012:	4b40      	ldr	r3, [pc, #256]	@ (8017114 <_ZN15TWIPR_Drive_CAN4taskEv+0x190>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	f04f 31ff 	mov.w	r1, #4294967295
 801701a:	4618      	mov	r0, r3
 801701c:	f7f7 ff14 	bl	800ee48 <osSemaphoreAcquire>
					portMAX_DELAY);
					this->drive_voltage = left_motor_voltage;
 8017020:	697a      	ldr	r2, [r7, #20]
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	645a      	str	r2, [r3, #68]	@ 0x44
					osSemaphoreRelease(drive_can_voltage_semaphore);
 8017026:	4b3b      	ldr	r3, [pc, #236]	@ (8017114 <_ZN15TWIPR_Drive_CAN4taskEv+0x190>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	4618      	mov	r0, r3
 801702c:	f7f7 ff5e 	bl	800eeec <osSemaphoreRelease>
					// TODO
				}
			}

			// Read the speed
			status = this->motor_left.readSpeed(left_motor_speed);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	330c      	adds	r3, #12
 8017034:	f107 0210 	add.w	r2, r7, #16
 8017038:	4611      	mov	r1, r2
 801703a:	4618      	mov	r0, r3
 801703c:	f7ff fd6c 	bl	8016b18 <_ZN17SimplexMotion_CAN9readSpeedERf>
 8017040:	4603      	mov	r3, r0
 8017042:	77fb      	strb	r3, [r7, #31]
			if (status) {
 8017044:	7ffb      	ldrb	r3, [r7, #31]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d15f      	bne.n	801710a <_ZN15TWIPR_Drive_CAN4taskEv+0x186>
				continue;
				// TODO
			}
			status = this->motor_right.readSpeed(right_motor_speed);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	3320      	adds	r3, #32
 801704e:	f107 020c 	add.w	r2, r7, #12
 8017052:	4611      	mov	r1, r2
 8017054:	4618      	mov	r0, r3
 8017056:	f7ff fd5f 	bl	8016b18 <_ZN17SimplexMotion_CAN9readSpeedERf>
 801705a:	4603      	mov	r3, r0
 801705c:	77fb      	strb	r3, [r7, #31]
			if (status) {
 801705e:	7ffb      	ldrb	r3, [r7, #31]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d154      	bne.n	801710e <_ZN15TWIPR_Drive_CAN4taskEv+0x18a>
				continue;
				// TODO
			}
			osSemaphoreAcquire(drive_can_speed_semaphore, portMAX_DELAY);
 8017064:	4b2c      	ldr	r3, [pc, #176]	@ (8017118 <_ZN15TWIPR_Drive_CAN4taskEv+0x194>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	f04f 31ff 	mov.w	r1, #4294967295
 801706c:	4618      	mov	r0, r3
 801706e:	f7f7 feeb 	bl	800ee48 <osSemaphoreAcquire>
			this->speed.speed_left = left_motor_speed;
 8017072:	693a      	ldr	r2, [r7, #16]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	649a      	str	r2, [r3, #72]	@ 0x48
			this->speed.speed_right = right_motor_speed;
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	64da      	str	r2, [r3, #76]	@ 0x4c
			osSemaphoreRelease(drive_can_speed_semaphore);
 801707e:	4b26      	ldr	r3, [pc, #152]	@ (8017118 <_ZN15TWIPR_Drive_CAN4taskEv+0x194>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	4618      	mov	r0, r3
 8017084:	f7f7 ff32 	bl	800eeec <osSemaphoreRelease>

			// Write the torque
			osSemaphoreAcquire(drive_can_torque_semaphore, portMAX_DELAY);
 8017088:	4b24      	ldr	r3, [pc, #144]	@ (801711c <_ZN15TWIPR_Drive_CAN4taskEv+0x198>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	f04f 31ff 	mov.w	r1, #4294967295
 8017090:	4618      	mov	r0, r3
 8017092:	f7f7 fed9 	bl	800ee48 <osSemaphoreAcquire>
			torque_left = this->input.torque_left;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801709a:	627b      	str	r3, [r7, #36]	@ 0x24
			torque_right = this->input.torque_right;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80170a0:	623b      	str	r3, [r7, #32]
			osSemaphoreRelease(drive_can_torque_semaphore);
 80170a2:	4b1e      	ldr	r3, [pc, #120]	@ (801711c <_ZN15TWIPR_Drive_CAN4taskEv+0x198>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	4618      	mov	r0, r3
 80170a8:	f7f7 ff20 	bl	800eeec <osSemaphoreRelease>

			status = this->motor_left.setTorque(torque_left);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	330c      	adds	r3, #12
 80170b0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7ff fcf7 	bl	8016aa8 <_ZN17SimplexMotion_CAN9setTorqueEf>
 80170ba:	4603      	mov	r3, r0
 80170bc:	77fb      	strb	r3, [r7, #31]
			if (status) {
				// TODO
			}
			status = this->motor_right.setTorque(torque_right);
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	3320      	adds	r3, #32
 80170c2:	ed97 0a08 	vldr	s0, [r7, #32]
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7ff fcee 	bl	8016aa8 <_ZN17SimplexMotion_CAN9setTorqueEf>
 80170cc:	4603      	mov	r3, r0
 80170ce:	77fb      	strb	r3, [r7, #31]
			if (status) {
				// TODO
			}
		}

		ticks_loop = osKernelGetTickCount() - current_tick;
 80170d0:	f7f7 fcb0 	bl	800ea34 <osKernelGetTickCount>
 80170d4:	4602      	mov	r2, r0
 80170d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170d8:	1ad3      	subs	r3, r2, r3
 80170da:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ticks_loop > TWIPR_DRIVE_CAN_MAIN_TASK_TIME_MS) {
 80170dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170de:	2b0a      	cmp	r3, #10
 80170e0:	d908      	bls.n	80170f4 <_ZN15TWIPR_Drive_CAN4taskEv+0x170>
			nop();
 80170e2:	f7fb fdaf 	bl	8012c44 <_Z3nopv>
			rc_buzzer.beep(1000, 250, 1);
 80170e6:	2201      	movs	r2, #1
 80170e8:	21fa      	movs	r1, #250	@ 0xfa
 80170ea:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8017120 <_ZN15TWIPR_Drive_CAN4taskEv+0x19c>
 80170ee:	480d      	ldr	r0, [pc, #52]	@ (8017124 <_ZN15TWIPR_Drive_CAN4taskEv+0x1a0>)
 80170f0:	f005 fa9a 	bl	801c628 <_ZN19RobotControl_Buzzer4beepEfth>
			// TODO
		}
		this->tick++;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80170f8:	1c5a      	adds	r2, r3, #1
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	63da      	str	r2, [r3, #60]	@ 0x3c
		osDelayUntil(current_tick + TWIPR_DRIVE_CAN_MAIN_TASK_TIME_MS);
 80170fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017100:	330a      	adds	r3, #10
 8017102:	4618      	mov	r0, r3
 8017104:	f7f7 fd58 	bl	800ebb8 <osDelayUntil>
 8017108:	e75b      	b.n	8016fc2 <_ZN15TWIPR_Drive_CAN4taskEv+0x3e>
				continue;
 801710a:	bf00      	nop
 801710c:	e759      	b.n	8016fc2 <_ZN15TWIPR_Drive_CAN4taskEv+0x3e>
				continue;
 801710e:	bf00      	nop
		current_tick = osKernelGetTickCount();
 8017110:	e757      	b.n	8016fc2 <_ZN15TWIPR_Drive_CAN4taskEv+0x3e>
 8017112:	bf00      	nop
 8017114:	2401f454 	.word	0x2401f454
 8017118:	2401f450 	.word	0x2401f450
 801711c:	2401f458 	.word	0x2401f458
 8017120:	447a0000 	.word	0x447a0000
 8017124:	240286a8 	.word	0x240286a8

08017128 <_ZN15TWIPR_Drive_CAN8getSpeedEv>:

	return HAL_OK;
}

/* --------------------------------------------------------------------- */
twipr_drive_can_speed_t TWIPR_Drive_CAN::getSpeed() {
 8017128:	b580      	push	{r7, lr}
 801712a:	b088      	sub	sp, #32
 801712c:	af00      	add	r7, sp, #0
 801712e:	60f8      	str	r0, [r7, #12]
	twipr_drive_can_speed_t speed = { 0 };
 8017130:	f107 0310 	add.w	r3, r7, #16
 8017134:	2200      	movs	r2, #0
 8017136:	601a      	str	r2, [r3, #0]
 8017138:	605a      	str	r2, [r3, #4]
	osSemaphoreAcquire(drive_can_speed_semaphore, portMAX_DELAY);
 801713a:	4b14      	ldr	r3, [pc, #80]	@ (801718c <_ZN15TWIPR_Drive_CAN8getSpeedEv+0x64>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	f04f 31ff 	mov.w	r1, #4294967295
 8017142:	4618      	mov	r0, r3
 8017144:	f7f7 fe80 	bl	800ee48 <osSemaphoreAcquire>
	speed = this->speed;
 8017148:	68fa      	ldr	r2, [r7, #12]
 801714a:	f107 0310 	add.w	r3, r7, #16
 801714e:	3248      	adds	r2, #72	@ 0x48
 8017150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017154:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(drive_can_speed_semaphore);
 8017158:	4b0c      	ldr	r3, [pc, #48]	@ (801718c <_ZN15TWIPR_Drive_CAN8getSpeedEv+0x64>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	4618      	mov	r0, r3
 801715e:	f7f7 fec5 	bl	800eeec <osSemaphoreRelease>

	return speed;
 8017162:	f107 0318 	add.w	r3, r7, #24
 8017166:	f107 0210 	add.w	r2, r7, #16
 801716a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801716e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017172:	69ba      	ldr	r2, [r7, #24]
 8017174:	69fb      	ldr	r3, [r7, #28]
 8017176:	ee07 2a10 	vmov	s14, r2
 801717a:	ee07 3a90 	vmov	s15, r3
}
 801717e:	eeb0 0a47 	vmov.f32	s0, s14
 8017182:	eef0 0a67 	vmov.f32	s1, s15
 8017186:	3720      	adds	r7, #32
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	2401f450 	.word	0x2401f450

08017190 <_ZN15TWIPR_Drive_CAN10getVoltageEv>:

/* --------------------------------------------------------------------- */
float TWIPR_Drive_CAN::getVoltage() {
 8017190:	b580      	push	{r7, lr}
 8017192:	b084      	sub	sp, #16
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
	float voltage = 0;
 8017198:	f04f 0300 	mov.w	r3, #0
 801719c:	60fb      	str	r3, [r7, #12]
	osSemaphoreAcquire(drive_can_voltage_semaphore, portMAX_DELAY);
 801719e:	4b0b      	ldr	r3, [pc, #44]	@ (80171cc <_ZN15TWIPR_Drive_CAN10getVoltageEv+0x3c>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f04f 31ff 	mov.w	r1, #4294967295
 80171a6:	4618      	mov	r0, r3
 80171a8:	f7f7 fe4e 	bl	800ee48 <osSemaphoreAcquire>
	voltage = this->drive_voltage;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171b0:	60fb      	str	r3, [r7, #12]
	osSemaphoreRelease(drive_can_voltage_semaphore);
 80171b2:	4b06      	ldr	r3, [pc, #24]	@ (80171cc <_ZN15TWIPR_Drive_CAN10getVoltageEv+0x3c>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	4618      	mov	r0, r3
 80171b8:	f7f7 fe98 	bl	800eeec <osSemaphoreRelease>
	return voltage;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	ee07 3a90 	vmov	s15, r3
}
 80171c2:	eeb0 0a67 	vmov.f32	s0, s15
 80171c6:	3710      	adds	r7, #16
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	2401f454 	.word	0x2401f454

080171d0 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef TWIPR_Drive_CAN::setTorque(twipr_drive_can_input_t input) {
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b084      	sub	sp, #16
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	eeb0 7a40 	vmov.f32	s14, s0
 80171dc:	eef0 7a60 	vmov.f32	s15, s1
 80171e0:	ed87 7a01 	vstr	s14, [r7, #4]
 80171e4:	edc7 7a02 	vstr	s15, [r7, #8]
	if (this->status != TWIPR_DRIVE_CAN_STATUS_RUNNING) {
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80171ee:	2b01      	cmp	r3, #1
 80171f0:	d001      	beq.n	80171f6 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x26>
		return HAL_ERROR;
 80171f2:	2301      	movs	r3, #1
 80171f4:	e013      	b.n	801721e <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x4e>
	}
	osSemaphoreAcquire(drive_can_torque_semaphore, portMAX_DELAY);
 80171f6:	4b0c      	ldr	r3, [pc, #48]	@ (8017228 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x58>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	f04f 31ff 	mov.w	r1, #4294967295
 80171fe:	4618      	mov	r0, r3
 8017200:	f7f7 fe22 	bl	800ee48 <osSemaphoreAcquire>
	this->input = input;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	3334      	adds	r3, #52	@ 0x34
 8017208:	1d3a      	adds	r2, r7, #4
 801720a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801720e:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(drive_can_torque_semaphore);
 8017212:	4b05      	ldr	r3, [pc, #20]	@ (8017228 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x58>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4618      	mov	r0, r3
 8017218:	f7f7 fe68 	bl	800eeec <osSemaphoreRelease>
	return HAL_OK;
 801721c:	2300      	movs	r3, #0
}
 801721e:	4618      	mov	r0, r3
 8017220:	3710      	adds	r7, #16
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	2401f458 	.word	0x2401f458

0801722c <_Z17startCANDriveTaskPv>:

/* --------------------------------------------------------------------- */
void startCANDriveTask(void *argument) {
 801722c:	b580      	push	{r7, lr}
 801722e:	b084      	sub	sp, #16
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
	TWIPR_Drive_CAN *drive = (TWIPR_Drive_CAN*) argument;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	60fb      	str	r3, [r7, #12]
	drive->task();
 8017238:	68f8      	ldr	r0, [r7, #12]
 801723a:	f7ff fea3 	bl	8016f84 <_ZN15TWIPR_Drive_CAN4taskEv>
}
 801723e:	bf00      	nop
 8017240:	3710      	adds	r7, #16
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}

08017246 <_Z5delaym>:

inline void delay(uint32_t msec){
 8017246:	b580      	push	{r7, lr}
 8017248:	b084      	sub	sp, #16
 801724a:	af00      	add	r7, sp, #0
 801724c:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 801724e:	f7f7 fba9 	bl	800e9a4 <osKernelGetState>
 8017252:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	2b02      	cmp	r3, #2
 8017258:	d103      	bne.n	8017262 <_Z5delaym+0x1c>
		osDelay(msec);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7f7 fc91 	bl	800eb82 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 8017260:	e002      	b.n	8017268 <_Z5delaym+0x22>
		HAL_Delay(msec);
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7eb f83a 	bl	80022dc <HAL_Delay>
}
 8017268:	bf00      	nop
 801726a:	3710      	adds	r7, #16
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}

08017270 <_Z19twipr_error_handlerm>:
 */


#include "twipr_errors.h"

void twipr_error_handler(uint32_t errorcode) {
 8017270:	b580      	push	{r7, lr}
 8017272:	b086      	sub	sp, #24
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]

	// Turn on the LED2

	// if the error code starts with 0x00 then it's severe and should result in a firmware stop
	if (errorcode >> 24 == 0x00) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	0e1b      	lsrs	r3, r3, #24
 801727c:	2b00      	cmp	r3, #0
 801727e:	d13b      	bne.n	80172f8 <_Z19twipr_error_handlerm+0x88>
		// Try to suspend all tasks
		vTaskSuspendAll();
 8017280:	f7f9 faa2 	bl	80107c8 <vTaskSuspendAll>
		while (true) {
			uint8_t id1 = errorcode >> 8 & 0xFF;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	0a1b      	lsrs	r3, r3, #8
 8017288:	73fb      	strb	r3, [r7, #15]
			uint8_t id2 = errorcode & 0xFF;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	73bb      	strb	r3, [r7, #14]

			for (int i = 0; i < id1; i++) {
 801728e:	2300      	movs	r3, #0
 8017290:	617b      	str	r3, [r7, #20]
 8017292:	e00e      	b.n	80172b2 <_Z19twipr_error_handlerm+0x42>
				rc_status_led_2.on();
 8017294:	481a      	ldr	r0, [pc, #104]	@ (8017300 <_Z19twipr_error_handlerm+0x90>)
 8017296:	f008 f8b6 	bl	801f406 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 801729a:	2096      	movs	r0, #150	@ 0x96
 801729c:	f7eb f81e 	bl	80022dc <HAL_Delay>
				rc_status_led_2.off();
 80172a0:	4817      	ldr	r0, [pc, #92]	@ (8017300 <_Z19twipr_error_handlerm+0x90>)
 80172a2:	f008 f8c0 	bl	801f426 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 80172a6:	2096      	movs	r0, #150	@ 0x96
 80172a8:	f7eb f818 	bl	80022dc <HAL_Delay>
			for (int i = 0; i < id1; i++) {
 80172ac:	697b      	ldr	r3, [r7, #20]
 80172ae:	3301      	adds	r3, #1
 80172b0:	617b      	str	r3, [r7, #20]
 80172b2:	7bfb      	ldrb	r3, [r7, #15]
 80172b4:	697a      	ldr	r2, [r7, #20]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	dbec      	blt.n	8017294 <_Z19twipr_error_handlerm+0x24>
			}
			delay(750);
 80172ba:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80172be:	f7ff ffc2 	bl	8017246 <_Z5delaym>
			for (int i = 0; i < id2; i++) {
 80172c2:	2300      	movs	r3, #0
 80172c4:	613b      	str	r3, [r7, #16]
 80172c6:	e00e      	b.n	80172e6 <_Z19twipr_error_handlerm+0x76>
				rc_status_led_2.on();
 80172c8:	480d      	ldr	r0, [pc, #52]	@ (8017300 <_Z19twipr_error_handlerm+0x90>)
 80172ca:	f008 f89c 	bl	801f406 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 80172ce:	2096      	movs	r0, #150	@ 0x96
 80172d0:	f7eb f804 	bl	80022dc <HAL_Delay>
				rc_status_led_2.off();
 80172d4:	480a      	ldr	r0, [pc, #40]	@ (8017300 <_Z19twipr_error_handlerm+0x90>)
 80172d6:	f008 f8a6 	bl	801f426 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 80172da:	2096      	movs	r0, #150	@ 0x96
 80172dc:	f7ea fffe 	bl	80022dc <HAL_Delay>
			for (int i = 0; i < id2; i++) {
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	3301      	adds	r3, #1
 80172e4:	613b      	str	r3, [r7, #16]
 80172e6:	7bbb      	ldrb	r3, [r7, #14]
 80172e8:	693a      	ldr	r2, [r7, #16]
 80172ea:	429a      	cmp	r2, r3
 80172ec:	dbec      	blt.n	80172c8 <_Z19twipr_error_handlerm+0x58>
			}
			HAL_Delay(1500);
 80172ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80172f2:	f7ea fff3 	bl	80022dc <HAL_Delay>
		}
 80172f6:	e7c5      	b.n	8017284 <_Z19twipr_error_handlerm+0x14>
	}
}
 80172f8:	bf00      	nop
 80172fa:	3718      	adds	r7, #24
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}
 8017300:	24028664 	.word	0x24028664

08017304 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	ed87 0a01 	vstr	s0, [r7, #4]
 801730e:	edc7 0a00 	vstr	s1, [r7]
 8017312:	edd7 0a00 	vldr	s1, [r7]
 8017316:	ed97 0a01 	vldr	s0, [r7, #4]
 801731a:	f009 fd41 	bl	8020da0 <atan2f>
 801731e:	eef0 7a40 	vmov.f32	s15, s0
 8017322:	eeb0 0a67 	vmov.f32	s0, s15
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 801732c:	b480      	push	{r7}
 801732e:	b083      	sub	sp, #12
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	ed87 0a00 	vstr	s0, [r7]
 8017338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801733c:	ed97 7a00 	vldr	s14, [r7]
 8017340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	edc3 7a04 	vstr	s15, [r3, #16]
 801734a:	bf00      	nop
 801734c:	370c      	adds	r7, #12
 801734e:	46bd      	mov	sp, r7
 8017350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017354:	4770      	bx	lr
	...

08017358 <_ZN16TWIPR_EstimationC1Ev>:

static const osThreadAttr_t estimation_task_attributes = { .name = "estimation",
		.stack_size = 1280 * 4, .priority = (osPriority_t) osPriorityNormal, };

/* ======================================================= */
TWIPR_Estimation::TWIPR_Estimation() :
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
		vqf(TWIPR_ESTIMATION_TS) {
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2200      	movs	r2, #0
 8017364:	f8a3 281c 	strh.w	r2, [r3, #2076]	@ 0x81c
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 801736e:	4618      	mov	r0, r3
 8017370:	f007 fc82 	bl	801ec78 <_ZN8MadgwickC1Ev>
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 801737a:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 801737e:	eebf 1b00 	vmov.f64	d1, #240	@ 0xbf800000 -1.0
 8017382:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80173b0 <_ZN16TWIPR_EstimationC1Ev+0x58>
 8017386:	4618      	mov	r0, r3
 8017388:	f006 fb28 	bl	801d9dc <_ZN8BasicVQFC1Eddd>
	this->status = TWIPR_ESTIMATION_STATUS_NONE;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2200      	movs	r2, #0
 8017390:	701a      	strb	r2, [r3, #0]
	this->vqf.setTauAcc(0.5);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8017398:	eeb6 0b00 	vmov.f64	d0, #96	@ 0x3f000000  0.5
 801739c:	4618      	mov	r0, r3
 801739e:	f006 fcb9 	bl	801dd14 <_ZN8BasicVQF9setTauAccEd>
}
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	4618      	mov	r0, r3
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	f3af 8000 	nop.w
 80173b0:	47ae147b 	.word	0x47ae147b
 80173b4:	3f847ae1 	.word	0x3f847ae1

080173b8 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>:

/* ======================================================= */
void TWIPR_Estimation::init(twipr_estimation_config_t config) {
 80173b8:	b084      	sub	sp, #16
 80173ba:	b5b0      	push	{r4, r5, r7, lr}
 80173bc:	b082      	sub	sp, #8
 80173be:	af00      	add	r7, sp, #0
 80173c0:	6078      	str	r0, [r7, #4]
 80173c2:	f107 001c 	add.w	r0, r7, #28
 80173c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80173d0:	f107 051c 	add.w	r5, r7, #28
 80173d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80173d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80173dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Initialize the sensors

	this->status = TWIPR_ESTIMATION_STATUS_IDLE;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2201      	movs	r2, #1
 80173e4:	701a      	strb	r2, [r3, #0]
	this->_semaphore = osSemaphoreNew(1, 1, NULL);
 80173e6:	2200      	movs	r2, #0
 80173e8:	2101      	movs	r1, #1
 80173ea:	2001      	movs	r0, #1
 80173ec:	f7f7 fca2 	bl	800ed34 <osSemaphoreNew>
 80173f0:	4602      	mov	r2, r0
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
}
 80173f8:	bf00      	nop
 80173fa:	3708      	adds	r7, #8
 80173fc:	46bd      	mov	sp, r7
 80173fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8017402:	b004      	add	sp, #16
 8017404:	4770      	bx	lr
	...

08017408 <_ZN16TWIPR_Estimation5startEv>:

/* ======================================================= */
void TWIPR_Estimation::start() {
 8017408:	b580      	push	{r7, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
	osThreadNew(estimation_task, (void*) this, &estimation_task_attributes);
 8017410:	4a04      	ldr	r2, [pc, #16]	@ (8017424 <_ZN16TWIPR_Estimation5startEv+0x1c>)
 8017412:	6879      	ldr	r1, [r7, #4]
 8017414:	4804      	ldr	r0, [pc, #16]	@ (8017428 <_ZN16TWIPR_Estimation5startEv+0x20>)
 8017416:	f7f7 fb22 	bl	800ea5e <osThreadNew>
}
 801741a:	bf00      	nop
 801741c:	3708      	adds	r7, #8
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}
 8017422:	bf00      	nop
 8017424:	08024e38 	.word	0x08024e38
 8017428:	08017879 	.word	0x08017879

0801742c <_ZN16TWIPR_Estimation13task_functionEv>:
/* ======================================================= */
void TWIPR_Estimation::reset() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::task_function() {
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]

	this->_orientation_fusion.begin((float) TWIPR_ESTIMATION_FREQUENCY);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 801743a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8017464 <_ZN16TWIPR_Estimation13task_functionEv+0x38>
 801743e:	4618      	mov	r0, r3
 8017440:	f7ff ff74 	bl	801732c <_ZN8Madgwick5beginEf>
	this->status = TWIPR_ESTIMATION_STATUS_OK;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2202      	movs	r2, #2
 8017448:	701a      	strb	r2, [r3, #0]
//	this->_sensors.calibrate();
	uint32_t ticks;

	while (true) {
		ticks = osKernelGetTickCount();
 801744a:	f7f7 faf3 	bl	800ea34 <osKernelGetTickCount>
 801744e:	60f8      	str	r0, [r7, #12]
		this->update();
 8017450:	6878      	ldr	r0, [r7, #4]
 8017452:	f000 f809 	bl	8017468 <_ZN16TWIPR_Estimation6updateEv>
		osDelayUntil(ticks + (uint32_t) (1000.0 / TWIPR_ESTIMATION_FREQUENCY));
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	330a      	adds	r3, #10
 801745a:	4618      	mov	r0, r3
 801745c:	f7f7 fbac 	bl	800ebb8 <osDelayUntil>
		ticks = osKernelGetTickCount();
 8017460:	bf00      	nop
 8017462:	e7f2      	b.n	801744a <_ZN16TWIPR_Estimation13task_functionEv+0x1e>
 8017464:	42c80000 	.word	0x42c80000

08017468 <_ZN16TWIPR_Estimation6updateEv>:
/* ======================================================= */
void TWIPR_Estimation::stop() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::update() {
 8017468:	b5b0      	push	{r4, r5, r7, lr}
 801746a:	b0a8      	sub	sp, #160	@ 0xa0
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]

	// Update the Sensors
	this->config.sensors->update();
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017474:	4618      	mov	r0, r3
 8017476:	f000 fa7c 	bl	8017972 <_ZN13TWIPR_Sensors6updateEv>

	// Read the sensor data
	twipr_sensors_data_t data = this->config.sensors->getData();
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801747e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017482:	4611      	mov	r1, r2
 8017484:	4618      	mov	r0, r3
 8017486:	f000 fa85 	bl	8017994 <_ZN13TWIPR_Sensors7getDataEv>

	// Orientation Estimation
	this->_orientation_fusion.updateIMU(data.gyr.x, data.gyr.y, data.gyr.z,
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8017490:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8017494:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8017498:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 801749c:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 80174a0:	edd7 5a1a 	vldr	s11, [r7, #104]	@ 0x68
 80174a4:	ed97 5a1b 	vldr	s10, [r7, #108]	@ 0x6c
 80174a8:	eef0 2a45 	vmov.f32	s5, s10
 80174ac:	eeb0 2a65 	vmov.f32	s4, s11
 80174b0:	eef0 1a46 	vmov.f32	s3, s12
 80174b4:	eeb0 1a66 	vmov.f32	s2, s13
 80174b8:	eef0 0a47 	vmov.f32	s1, s14
 80174bc:	eeb0 0a67 	vmov.f32	s0, s15
 80174c0:	4618      	mov	r0, r3
 80174c2:	f007 fc01 	bl	801ecc8 <_ZN8Madgwick9updateIMUEffffff>
			data.acc.x, data.acc.y, data.acc.z);

	vqf_real_t gyr[3] = { data.gyr.x, data.gyr.y, data.gyr.z };
 80174c6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80174ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80174ce:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 80174d2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80174d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80174da:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80174de:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80174e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80174e6:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	vqf_real_t acc[3] = { data.acc.x, data.acc.y, data.acc.z };
 80174ea:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80174ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80174f2:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
 80174f6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80174fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80174fe:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
 8017502:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8017506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801750a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	vqf.update(gyr, acc);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8017514:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8017518:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801751c:	4618      	mov	r0, r3
 801751e:	f006 fbd5 	bl	801dccc <_ZN8BasicVQF6updateEPKdS1_>

	vqf_real_t quat[4];

	vqf.getQuat6D(quat);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8017528:	f107 0208 	add.w	r2, r7, #8
 801752c:	4611      	mov	r1, r2
 801752e:	4618      	mov	r0, r3
 8017530:	f006 fbde 	bl	801dcf0 <_ZNK8BasicVQF9getQuat6DEPd>
	float w = quat[0];
 8017534:	ed97 7b02 	vldr	d7, [r7, #8]
 8017538:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801753c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float x = quat[1];
 8017540:	ed97 7b04 	vldr	d7, [r7, #16]
 8017544:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017548:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	float y = quat[2];
 801754c:	ed97 7b06 	vldr	d7, [r7, #24]
 8017550:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017554:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	float z = quat[3];
 8017558:	ed97 7b08 	vldr	d7, [r7, #32]
 801755c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017560:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90

	float theta = atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y));
 8017564:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8017568:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 801756c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017570:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8017574:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8017578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801757c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017580:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017584:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8017588:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801758c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8017590:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017598:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801759c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80175a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80175a4:	eef0 0a67 	vmov.f32	s1, s15
 80175a8:	eeb0 0a66 	vmov.f32	s0, s13
 80175ac:	f7ff feaa 	bl	8017304 <_ZSt5atan2ff>
 80175b0:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c

//	float theta = this->_orientation_fusion.getRollRadians();
	float theta_dot = data.gyr.x;
 80175b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80175b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

//	float theta =

	data.speed_left += theta_dot;
 80175ba:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80175be:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80175c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175c6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	data.speed_right += theta_dot;
 80175ca:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80175ce:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80175d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175d6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	// Get the speed and yaw speed
	float v = ((data.speed_left + data.speed_right) / 2 )
 80175da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80175de:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80175e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80175ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			* this->config.model.r_wheel;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
	float v = ((data.speed_left + data.speed_right) / 2 )
 80175f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80175f8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84

	float psi_dot = (data.speed_right - data.speed_left)
 80175fc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8017600:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8017604:	ee37 7a67 	vsub.f32	s14, s14, s15
			* this->config.model.r_wheel / this->config.model.distance_wheels;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 801760e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
	float psi_dot = (data.speed_right - data.speed_left)
 8017618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801761c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

	// Set the current state
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 8017626:	f04f 31ff 	mov.w	r1, #4294967295
 801762a:	4618      	mov	r0, r3
 801762c:	f7f7 fc0c 	bl	800ee48 <osSemaphoreAcquire>
	this->state.v = v;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8017636:	605a      	str	r2, [r3, #4]
	this->state.theta = theta;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801763e:	609a      	str	r2, [r3, #8]
	this->state.theta_dot = theta_dot;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8017646:	60da      	str	r2, [r3, #12]
	this->state.psi = 0;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f04f 0200 	mov.w	r2, #0
 801764e:	611a      	str	r2, [r3, #16]
	this->state.psi_dot = psi_dot;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017656:	615a      	str	r2, [r3, #20]

	// Calculate the average
	this->mean_state.v = this->mean_state.v
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	ed93 7a06 	vldr	s14, [r3, #24]
			- (this->_state_buffer[this->_state_buffer_index].v
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017664:	4619      	mov	r1, r3
 8017666:	687a      	ldr	r2, [r7, #4]
 8017668:	460b      	mov	r3, r1
 801766a:	009b      	lsls	r3, r3, #2
 801766c:	440b      	add	r3, r1
 801766e:	009b      	lsls	r3, r3, #2
 8017670:	4413      	add	r3, r2
 8017672:	334c      	adds	r3, #76	@ 0x4c
 8017674:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017678:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 801767c:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].v
 8017680:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.v / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	edd3 6a01 	vldr	s13, [r3, #4]
 801768a:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 801768e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8017692:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.v = this->mean_state.v
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	edc3 7a06 	vstr	s15, [r3, #24]
	this->mean_state.theta = this->mean_state.theta
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	ed93 7a07 	vldr	s14, [r3, #28]
			- (this->_state_buffer[this->_state_buffer_index].theta
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80176a8:	4619      	mov	r1, r3
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	460b      	mov	r3, r1
 80176ae:	009b      	lsls	r3, r3, #2
 80176b0:	440b      	add	r3, r1
 80176b2:	009b      	lsls	r3, r3, #2
 80176b4:	4413      	add	r3, r2
 80176b6:	3350      	adds	r3, #80	@ 0x50
 80176b8:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 80176bc:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 80176c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta
 80176c4:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80176ce:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 80176d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80176d6:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta = this->mean_state.theta
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	edc3 7a07 	vstr	s15, [r3, #28]
	this->mean_state.theta_dot = this->mean_state.theta_dot
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	ed93 7a08 	vldr	s14, [r3, #32]
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80176ec:	4619      	mov	r1, r3
 80176ee:	687a      	ldr	r2, [r7, #4]
 80176f0:	460b      	mov	r3, r1
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	440b      	add	r3, r1
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	4413      	add	r3, r2
 80176fa:	3354      	adds	r3, #84	@ 0x54
 80176fc:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017700:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017704:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 8017708:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta_dot
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	edd3 6a03 	vldr	s13, [r3, #12]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8017712:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017716:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.theta_dot
 801771a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta_dot = this->mean_state.theta_dot
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	edc3 7a08 	vstr	s15, [r3, #32]
	this->mean_state.psi = this->mean_state.psi
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			- (this->_state_buffer[this->_state_buffer_index].psi
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017730:	4619      	mov	r1, r3
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	460b      	mov	r3, r1
 8017736:	009b      	lsls	r3, r3, #2
 8017738:	440b      	add	r3, r1
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	4413      	add	r3, r2
 801773e:	3358      	adds	r3, #88	@ 0x58
 8017740:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017744:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017748:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi
 801774c:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	edd3 6a04 	vldr	s13, [r3, #16]
 8017756:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 801775a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801775e:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi = this->mean_state.psi
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	this->mean_state.psi_dot =
			this->mean_state.psi_dot
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					- (this->_state_buffer[this->_state_buffer_index].psi_dot
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017774:	4619      	mov	r1, r3
 8017776:	687a      	ldr	r2, [r7, #4]
 8017778:	460b      	mov	r3, r1
 801777a:	009b      	lsls	r3, r3, #2
 801777c:	440b      	add	r3, r1
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	4413      	add	r3, r2
 8017782:	335c      	adds	r3, #92	@ 0x5c
 8017784:	edd3 6a00 	vldr	s13, [r3]
							/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017788:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 801778c:	eec6 7a86 	vdiv.f32	s15, s13, s12
					- (this->_state_buffer[this->_state_buffer_index].psi_dot
 8017790:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (this->state.psi_dot
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	edd3 6a05 	vldr	s13, [r3, #20]
							/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801779a:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8017808 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 801779e:	eec6 7a86 	vdiv.f32	s15, s13, s12
					+ (this->state.psi_dot
 80177a2:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi_dot =
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	this->_state_buffer[this->_state_buffer_index] = this->state;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80177b2:	4619      	mov	r1, r3
 80177b4:	687a      	ldr	r2, [r7, #4]
 80177b6:	460b      	mov	r3, r1
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	440b      	add	r3, r1
 80177bc:	009b      	lsls	r3, r3, #2
 80177be:	4413      	add	r3, r2
 80177c0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	1d14      	adds	r4, r2, #4
 80177c8:	1d1d      	adds	r5, r3, #4
 80177ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80177ce:	682b      	ldr	r3, [r5, #0]
 80177d0:	6023      	str	r3, [r4, #0]
	osSemaphoreRelease(_semaphore);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 80177d8:	4618      	mov	r0, r3
 80177da:	f7f7 fb87 	bl	800eeec <osSemaphoreRelease>

	this->_state_buffer_index++;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80177e4:	3301      	adds	r3, #1
 80177e6:	b29a      	uxth	r2, r3
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f8a3 281c 	strh.w	r2, [r3, #2076]	@ 0x81c
	if (this->_state_buffer_index == TWIPR_ESTIMATION_STATE_BUFFER_SIZE) {
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80177f4:	2b64      	cmp	r3, #100	@ 0x64
 80177f6:	d103      	bne.n	8017800 <_ZN16TWIPR_Estimation6updateEv+0x398>
		this->_state_buffer_index = 0;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2200      	movs	r2, #0
 80177fc:	f8a3 281c 	strh.w	r2, [r3, #2076]	@ 0x81c
	}

}
 8017800:	bf00      	nop
 8017802:	37a0      	adds	r7, #160	@ 0xa0
 8017804:	46bd      	mov	sp, r7
 8017806:	bdb0      	pop	{r4, r5, r7, pc}
 8017808:	42c80000 	.word	0x42c80000

0801780c <_ZN16TWIPR_Estimation8getStateEv>:
	out = this->mean_state;
	osSemaphoreRelease(_semaphore);
	return out;
}
/* ======================================================= */
twipr_estimation_state_t TWIPR_Estimation::getState() {
 801780c:	b5b0      	push	{r4, r5, r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	6039      	str	r1, [r7, #0]
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 801781c:	f04f 31ff 	mov.w	r1, #4294967295
 8017820:	4618      	mov	r0, r3
 8017822:	f7f7 fb11 	bl	800ee48 <osSemaphoreAcquire>
	twipr_estimation_state_t out = this->state;
 8017826:	687a      	ldr	r2, [r7, #4]
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	4615      	mov	r5, r2
 801782c:	1d1c      	adds	r4, r3, #4
 801782e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017832:	6823      	ldr	r3, [r4, #0]
 8017834:	602b      	str	r3, [r5, #0]
	osSemaphoreRelease(_semaphore);
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 801783c:	4618      	mov	r0, r3
 801783e:	f7f7 fb55 	bl	800eeec <osSemaphoreRelease>
	return out;
 8017842:	bf00      	nop
}
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	3708      	adds	r7, #8
 8017848:	46bd      	mov	sp, r7
 801784a:	bdb0      	pop	{r4, r5, r7, pc}

0801784c <_ZN16TWIPR_Estimation9getSampleEv>:
/* ======================================================= */
void TWIPR_Estimation::setState(twipr_estimation_state_t state) {
	twipr_error_handler(0);
}
/* ======================================================= */
twipr_logging_estimation_t TWIPR_Estimation::getSample() {
 801784c:	b5b0      	push	{r4, r5, r7, lr}
 801784e:	b088      	sub	sp, #32
 8017850:	af00      	add	r7, sp, #0
 8017852:	61f8      	str	r0, [r7, #28]
 8017854:	61b9      	str	r1, [r7, #24]
	twipr_logging_estimation_t sample;
	sample.state = this->getState();
 8017856:	69fc      	ldr	r4, [r7, #28]
 8017858:	463b      	mov	r3, r7
 801785a:	69b9      	ldr	r1, [r7, #24]
 801785c:	4618      	mov	r0, r3
 801785e:	f7ff ffd5 	bl	801780c <_ZN16TWIPR_Estimation8getStateEv>
 8017862:	4625      	mov	r5, r4
 8017864:	463c      	mov	r4, r7
 8017866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	602b      	str	r3, [r5, #0]
	return sample;
 801786e:	bf00      	nop
}
 8017870:	69f8      	ldr	r0, [r7, #28]
 8017872:	3720      	adds	r7, #32
 8017874:	46bd      	mov	sp, r7
 8017876:	bdb0      	pop	{r4, r5, r7, pc}

08017878 <_Z15estimation_taskPv>:
/* ======================================================= */
void estimation_task(void *estimation) {
 8017878:	b580      	push	{r7, lr}
 801787a:	b084      	sub	sp, #16
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
	TWIPR_Estimation *estimator = (TWIPR_Estimation*) estimation;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	60fb      	str	r3, [r7, #12]
	estimator->task_function();
 8017884:	68f8      	ldr	r0, [r7, #12]
 8017886:	f7ff fdd1 	bl	801742c <_ZN16TWIPR_Estimation13task_functionEv>
}
 801788a:	bf00      	nop
 801788c:	3710      	adds	r7, #16
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}

08017892 <_ZN13TWIPR_SensorsC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_sensors.h"

TWIPR_Sensors::TWIPR_Sensors() {
 8017892:	b580      	push	{r7, lr}
 8017894:	b082      	sub	sp, #8
 8017896:	af00      	add	r7, sp, #0
 8017898:	6078      	str	r0, [r7, #4]
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	3304      	adds	r3, #4
 801789e:	4618      	mov	r0, r3
 80178a0:	f007 ffb6 	bl	801f810 <_ZN6BMI160C1Ev>

}
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	4618      	mov	r0, r3
 80178a8:	3708      	adds	r7, #8
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
	...

080178b0 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>:

/* ======================================================= */
uint8_t TWIPR_Sensors::init(twipr_sensors_config_t config) {
 80178b0:	b590      	push	{r4, r7, lr}
 80178b2:	b08d      	sub	sp, #52	@ 0x34
 80178b4:	af02      	add	r7, sp, #8
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	6039      	str	r1, [r7, #0]

	// Initialize the IMU
	bmi160_gyr_config_t gyr_config;
 80178ba:	4b23      	ldr	r3, [pc, #140]	@ (8017948 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x98>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	623b      	str	r3, [r7, #32]
	bmi160_acc_config_t acc_config;
 80178c0:	4b22      	ldr	r3, [pc, #136]	@ (801794c <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x9c>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	61fb      	str	r3, [r7, #28]
	bmi160_config_t imu_config = { .hspi = BOARD_SPI_INTERN, .CS_GPIOx =
 80178c6:	f107 0308 	add.w	r3, r7, #8
 80178ca:	2200      	movs	r2, #0
 80178cc:	601a      	str	r2, [r3, #0]
 80178ce:	605a      	str	r2, [r3, #4]
 80178d0:	609a      	str	r2, [r3, #8]
 80178d2:	60da      	str	r2, [r3, #12]
 80178d4:	611a      	str	r2, [r3, #16]
 80178d6:	4b1e      	ldr	r3, [pc, #120]	@ (8017950 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa0>)
 80178d8:	60bb      	str	r3, [r7, #8]
 80178da:	4b1e      	ldr	r3, [pc, #120]	@ (8017954 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa4>)
 80178dc:	60fb      	str	r3, [r7, #12]
 80178de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80178e2:	823b      	strh	r3, [r7, #16]
	BOARD_CS_IMU_PORT, .CS_GPIO_Pin =
	BOARD_CS_IMU_PIN, .gyr = gyr_config, .acc = acc_config };
 80178e4:	f107 0312 	add.w	r3, r7, #18
 80178e8:	f107 0220 	add.w	r2, r7, #32
 80178ec:	6810      	ldr	r0, [r2, #0]
 80178ee:	6018      	str	r0, [r3, #0]
 80178f0:	f107 0316 	add.w	r3, r7, #22
 80178f4:	f107 021c 	add.w	r2, r7, #28
 80178f8:	6810      	ldr	r0, [r2, #0]
 80178fa:	6018      	str	r0, [r3, #0]
//
	uint8_t success = imu.init(imu_config);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	1d1c      	adds	r4, r3, #4
 8017900:	466a      	mov	r2, sp
 8017902:	f107 0314 	add.w	r3, r7, #20
 8017906:	e893 0003 	ldmia.w	r3, {r0, r1}
 801790a:	e882 0003 	stmia.w	r2, {r0, r1}
 801790e:	f107 0308 	add.w	r3, r7, #8
 8017912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017914:	4620      	mov	r0, r4
 8017916:	f007 ffbb 	bl	801f890 <_ZN6BMI1604initE15bmi160_config_t>
 801791a:	4603      	mov	r3, r0
 801791c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (!success) {
 8017920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017924:	2b00      	cmp	r3, #0
 8017926:	d104      	bne.n	8017932 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x82>
		this->status = TWIPR_SENSORS_STATUS_ERROR;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	22ff      	movs	r2, #255	@ 0xff
 801792c:	701a      	strb	r2, [r3, #0]
		return 0;
 801792e:	2300      	movs	r3, #0
 8017930:	e006      	b.n	8017940 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x90>
	}


	this->_config = config;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	683a      	ldr	r2, [r7, #0]
 8017936:	651a      	str	r2, [r3, #80]	@ 0x50

	this->status = TWIPR_SENSORS_STATUS_IDLE;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2200      	movs	r2, #0
 801793c:	701a      	strb	r2, [r3, #0]
	return 1;
 801793e:	2301      	movs	r3, #1
}
 8017940:	4618      	mov	r0, r3
 8017942:	372c      	adds	r7, #44	@ 0x2c
 8017944:	46bd      	mov	sp, r7
 8017946:	bd90      	pop	{r4, r7, pc}
 8017948:	08024a10 	.word	0x08024a10
 801794c:	08024a14 	.word	0x08024a14
 8017950:	240003cc 	.word	0x240003cc
 8017954:	58020400 	.word	0x58020400

08017958 <_ZN13TWIPR_Sensors5startEv>:
/* ======================================================= */
void TWIPR_Sensors::start() {
 8017958:	b480      	push	{r7}
 801795a:	b083      	sub	sp, #12
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
	// TODO
	this->status = TWIPR_SENSORS_STATUS_RUNNING;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2201      	movs	r2, #1
 8017964:	701a      	strb	r2, [r3, #0]
}
 8017966:	bf00      	nop
 8017968:	370c      	adds	r7, #12
 801796a:	46bd      	mov	sp, r7
 801796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017970:	4770      	bx	lr

08017972 <_ZN13TWIPR_Sensors6updateEv>:

	return success;

}
/* ======================================================= */
void TWIPR_Sensors::update() {
 8017972:	b580      	push	{r7, lr}
 8017974:	b082      	sub	sp, #8
 8017976:	af00      	add	r7, sp, #0
 8017978:	6078      	str	r0, [r7, #4]
	this->_readImu();
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f000 f81f 	bl	80179be <_ZN13TWIPR_Sensors8_readImuEv>
	this->_readMotorSpeed();
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f000 f83b 	bl	80179fc <_ZN13TWIPR_Sensors15_readMotorSpeedEv>
	this->_readBatteryVoltage();
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f000 f855 	bl	8017a36 <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>
}
 801798c:	bf00      	nop
 801798e:	3708      	adds	r7, #8
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}

08017994 <_ZN13TWIPR_Sensors7getDataEv>:
/* ======================================================= */
twipr_sensors_data_t TWIPR_Sensors::getData() {
 8017994:	b4b0      	push	{r4, r5, r7}
 8017996:	b083      	sub	sp, #12
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	6039      	str	r1, [r7, #0]
	return this->_data;
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	4615      	mov	r5, r2
 80179a4:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 80179a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80179ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80179b0:	6823      	ldr	r3, [r4, #0]
 80179b2:	602b      	str	r3, [r5, #0]
}
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	370c      	adds	r7, #12
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bcb0      	pop	{r4, r5, r7}
 80179bc:	4770      	bx	lr

080179be <_ZN13TWIPR_Sensors8_readImuEv>:
	this->imu.fastOffsetCalibration();
	return 0;
}

/* ======================================================= */
void TWIPR_Sensors::_readImu() {
 80179be:	b580      	push	{r7, lr}
 80179c0:	b082      	sub	sp, #8
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
	this->imu.update();
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	3304      	adds	r3, #4
 80179ca:	4618      	mov	r0, r3
 80179cc:	f008 f891 	bl	801faf2 <_ZN6BMI1606updateEv>
	memcpy(&this->_data.acc, &this->imu.acc, sizeof(this->_data.acc));
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	3320      	adds	r3, #32
 80179da:	220c      	movs	r2, #12
 80179dc:	4619      	mov	r1, r3
 80179de:	f00b f988 	bl	8022cf2 <memcpy>
	memcpy(&this->_data.gyr, &this->imu.gyr, sizeof(this->_data.gyr));
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	330c      	adds	r3, #12
 80179ec:	220c      	movs	r2, #12
 80179ee:	4619      	mov	r1, r3
 80179f0:	f00b f97f 	bl	8022cf2 <memcpy>
}
 80179f4:	bf00      	nop
 80179f6:	3708      	adds	r7, #8
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}

080179fc <_ZN13TWIPR_Sensors15_readMotorSpeedEv>:

/* ======================================================= */
void TWIPR_Sensors::_readMotorSpeed() {
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b084      	sub	sp, #16
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
	// TODO: I probably need some check here if this has been initialized or so

	twipr_drive_can_speed_t motor_speed = this->_config.drive->getSpeed();
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7ff fb8d 	bl	8017128 <_ZN15TWIPR_Drive_CAN8getSpeedEv>
 8017a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8017a12:	eef0 7a60 	vmov.f32	s15, s1
 8017a16:	ed87 7a02 	vstr	s14, [r7, #8]
 8017a1a:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_data.speed_left = motor_speed.speed_left;
 8017a1e:	68ba      	ldr	r2, [r7, #8]
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	655a      	str	r2, [r3, #84]	@ 0x54
	this->_data.speed_right = motor_speed.speed_right;
 8017a24:	68fa      	ldr	r2, [r7, #12]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	659a      	str	r2, [r3, #88]	@ 0x58

	nop();
 8017a2a:	f7fb f90b 	bl	8012c44 <_Z3nopv>
}
 8017a2e:	bf00      	nop
 8017a30:	3710      	adds	r7, #16
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}

08017a36 <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>:

/* ======================================================= */
void TWIPR_Sensors::_readBatteryVoltage() {
 8017a36:	b580      	push	{r7, lr}
 8017a38:	b084      	sub	sp, #16
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	6078      	str	r0, [r7, #4]
	float voltage = this->_config.drive->getVoltage();
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7ff fba4 	bl	8017190 <_ZN15TWIPR_Drive_CAN10getVoltageEv>
 8017a48:	ed87 0a03 	vstr	s0, [r7, #12]
	this->_data.battery_voltage = voltage;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	68fa      	ldr	r2, [r7, #12]
 8017a50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8017a52:	bf00      	nop
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}

08017a5a <_ZN13RegisterEntry12getInputSizeEv>:
	virtual uint16_t getInputSize() {
 8017a5a:	b480      	push	{r7}
 8017a5c:	b083      	sub	sp, #12
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	6078      	str	r0, [r7, #4]
		return 0;
 8017a62:	2300      	movs	r3, #0
	}
 8017a64:	4618      	mov	r0, r3
 8017a66:	370c      	adds	r7, #12
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6e:	4770      	bx	lr

08017a70 <_ZN13RegisterEntry13getOutputSizeEv>:
	virtual uint16_t getOutputSize() {
 8017a70:	b480      	push	{r7}
 8017a72:	b083      	sub	sp, #12
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
		return 0;
 8017a78:	2300      	movs	r3, #0
	}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	370c      	adds	r7, #12
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr

08017a86 <_ZN13RegisterEntry7executeEv>:
	virtual void execute() {
 8017a86:	b480      	push	{r7}
 8017a88:	b083      	sub	sp, #12
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	6078      	str	r0, [r7, #4]
	}
 8017a8e:	bf00      	nop
 8017a90:	370c      	adds	r7, #12
 8017a92:	46bd      	mov	sp, r7
 8017a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a98:	4770      	bx	lr

08017a9a <_ZN13RegisterEntry7executeEPhS0_>:
	virtual uint16_t execute(uint8_t *input, uint8_t *output) {
 8017a9a:	b480      	push	{r7}
 8017a9c:	b085      	sub	sp, #20
 8017a9e:	af00      	add	r7, sp, #0
 8017aa0:	60f8      	str	r0, [r7, #12]
 8017aa2:	60b9      	str	r1, [r7, #8]
 8017aa4:	607a      	str	r2, [r7, #4]
		return 0;
 8017aa6:	2300      	movs	r3, #0
	}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3714      	adds	r7, #20
 8017aac:	46bd      	mov	sp, r7
 8017aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab2:	4770      	bx	lr

08017ab4 <_ZN13RegisterEntry5writeEPh>:
	virtual void write(uint8_t *input) {
 8017ab4:	b480      	push	{r7}
 8017ab6:	b083      	sub	sp, #12
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
 8017abc:	6039      	str	r1, [r7, #0]
	}
 8017abe:	bf00      	nop
 8017ac0:	370c      	adds	r7, #12
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <_ZN13RegisterEntry4readEPh>:
	virtual uint16_t read(uint8_t *output) {
 8017aca:	b480      	push	{r7}
 8017acc:	b083      	sub	sp, #12
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	6078      	str	r0, [r7, #4]
 8017ad2:	6039      	str	r1, [r7, #0]
		return 0;
 8017ad4:	2300      	movs	r3, #0
	}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	370c      	adds	r7, #12
 8017ada:	46bd      	mov	sp, r7
 8017adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae0:	4770      	bx	lr

08017ae2 <_ZN13RegisterEntry7getTypeEv>:
	virtual register_entry_type_t getType() {
 8017ae2:	b480      	push	{r7}
 8017ae4:	b083      	sub	sp, #12
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_TYPE_NONE;
 8017aea:	2300      	movs	r3, #0
	}
 8017aec:	4618      	mov	r0, r3
 8017aee:	370c      	adds	r7, #12
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr

08017af8 <_ZN13RegisterEntryC1Ev>:
class RegisterEntry {
 8017af8:	b480      	push	{r7}
 8017afa:	b083      	sub	sp, #12
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
 8017b00:	4a04      	ldr	r2, [pc, #16]	@ (8017b14 <_ZN13RegisterEntryC1Ev+0x1c>)
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	601a      	str	r2, [r3, #0]
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4618      	mov	r0, r3
 8017b0a:	370c      	adds	r7, #12
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b12:	4770      	bx	lr
 8017b14:	080251b8 	.word	0x080251b8

08017b18 <_ZN8CallbackaSEOS_>:
class Callback {
 8017b18:	b480      	push	{r7}
 8017b1a:	b083      	sub	sp, #12
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	4618      	mov	r0, r3
 8017b26:	370c      	adds	r7, #12
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr

08017b30 <firmware>:


/**
 * @brief Initializes and starts the firmware task. This is the function called from the main function.
 */
void firmware() {
 8017b30:	b580      	push	{r7, lr}
 8017b32:	af00      	add	r7, sp, #0
    osThreadNew(start_firmware_task, (void*)&twipr_firmware, &firmware_task_attributes);
 8017b34:	4a03      	ldr	r2, [pc, #12]	@ (8017b44 <firmware+0x14>)
 8017b36:	4904      	ldr	r1, [pc, #16]	@ (8017b48 <firmware+0x18>)
 8017b38:	4804      	ldr	r0, [pc, #16]	@ (8017b4c <firmware+0x1c>)
 8017b3a:	f7f6 ff90 	bl	800ea5e <osThreadNew>
}
 8017b3e:	bf00      	nop
 8017b40:	bd80      	pop	{r7, pc}
 8017b42:	bf00      	nop
 8017b44:	08024e5c 	.word	0x08024e5c
 8017b48:	2401f460 	.word	0x2401f460
 8017b4c:	08017b51 	.word	0x08017b51

08017b50 <_Z19start_firmware_taskPv>:

/**
 * @brief Task wrapper to execute the firmware's main task function.
 * @param argument Pointer to the firmware object.
 */
void start_firmware_task(void* argument) {
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
    TWIPR_Firmware* firmware = (TWIPR_Firmware*)argument;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	60fb      	str	r3, [r7, #12]
//    firmware->task = xTaskGetCurrentTaskHandle();
    firmware->helperTask();
 8017b5c:	68f8      	ldr	r0, [r7, #12]
 8017b5e:	f000 f869 	bl	8017c34 <_ZN14TWIPR_Firmware10helperTaskEv>
}
 8017b62:	bf00      	nop
 8017b64:	3710      	adds	r7, #16
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <_ZN26TWIPR_CommunicationManagerD1Ev>:
	twipr_sequence_input_t *sequence_rx_buffer;
	uint16_t len_sequence_buffer;
	uint16_t reset_uart_exti;
} twipr_communication_config_t;

class TWIPR_CommunicationManager {
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b082      	sub	sp, #8
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 8017b78:	4413      	add	r3, r2
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f004 fe6f 	bl	801c85e <_ZN3CAND1Ev>
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	4618      	mov	r0, r3
 8017b84:	3708      	adds	r7, #8
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
	...

08017b8c <_ZN14TWIPR_FirmwareC1Ev>:

/**
 * @brief Constructor for TWIPR_Firmware.
 */
TWIPR_Firmware::TWIPR_Firmware() {
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b082      	sub	sp, #8
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2202      	movs	r2, #2
 8017b98:	701a      	strb	r2, [r3, #0]
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	705a      	strb	r2, [r3, #1]
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	4a23      	ldr	r2, [pc, #140]	@ (8017c30 <_ZN14TWIPR_FirmwareC1Ev+0xa4>)
 8017ba4:	8812      	ldrh	r2, [r2, #0]
 8017ba6:	805a      	strh	r2, [r3, #2]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2200      	movs	r2, #0
 8017bac:	605a      	str	r2, [r3, #4]
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	3308      	adds	r3, #8
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f7ff f90d 	bl	8016dd2 <_ZN15TWIPR_Drive_CANC1Ev>
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	3358      	adds	r3, #88	@ 0x58
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7fc fcd7 	bl	8014570 <_ZN26TWIPR_CommunicationManagerC1Ev>
 8017bc2:	687a      	ldr	r2, [r7, #4]
 8017bc4:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 8017bc8:	4413      	add	r3, r2
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f7fd fd4a 	bl	8015664 <_ZN20TWIPR_ControlManagerC1Ev>
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	f242 0390 	movw	r3, #8336	@ 0x2090
 8017bd6:	4413      	add	r3, r2
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f004 fa10 	bl	801bffe <_ZN15TWIPR_SequencerC1Ev>
 8017bde:	687a      	ldr	r2, [r7, #4]
 8017be0:	f647 63d0 	movw	r3, #32464	@ 0x7ed0
 8017be4:	4413      	add	r3, r2
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7ff fbb6 	bl	8017358 <_ZN16TWIPR_EstimationC1Ev>
 8017bec:	687a      	ldr	r2, [r7, #4]
 8017bee:	f648 0310 	movw	r3, #34832	@ 0x8810
 8017bf2:	4413      	add	r3, r2
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f003 fff6 	bl	801bbe6 <_ZN16TWIPR_SupervisorC1Ev>
 8017bfa:	687a      	ldr	r2, [r7, #4]
 8017bfc:	f648 0360 	movw	r3, #34912	@ 0x8860
 8017c00:	4413      	add	r3, r2
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7ff fe45 	bl	8017892 <_ZN13TWIPR_SensorsC1Ev>
 8017c08:	687a      	ldr	r2, [r7, #4]
 8017c0a:	f648 03d8 	movw	r3, #35032	@ 0x88d8
 8017c0e:	4413      	add	r3, r2
 8017c10:	4618      	mov	r0, r3
 8017c12:	f003 fec3 	bl	801b99c <_ZN13TWIPR_LoggingC1Ev>
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	f648 631c 	movw	r3, #36380	@ 0x8e1c
 8017c1c:	4413      	add	r3, r2
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7fe fd7c 	bl	801671c <_ZN13elapsedMillisC1Ev>
    // Constructor logic can be extended if necessary
}
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	4618      	mov	r0, r3
 8017c28:	3708      	adds	r7, #8
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	08024a2c 	.word	0x08024a2c

08017c34 <_ZN14TWIPR_Firmware10helperTaskEv>:

/**
 * @brief Main firmware task logic. This is initializing and starting the firmware. It then proceeds to do some monitoring.
 */
void TWIPR_Firmware::helperTask() {
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b084      	sub	sp, #16
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
    // Initialize and start the firmware components
    HAL_StatusTypeDef status;
    status = this->init();
 8017c3c:	6878      	ldr	r0, [r7, #4]
 8017c3e:	f000 f84b 	bl	8017cd8 <_ZN14TWIPR_Firmware4initEv>
 8017c42:	4603      	mov	r3, r0
 8017c44:	73fb      	strb	r3, [r7, #15]

    if (status){
 8017c46:	7bfb      	ldrb	r3, [r7, #15]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d002      	beq.n	8017c52 <_ZN14TWIPR_Firmware10helperTaskEv+0x1e>
    	while (true){
    		nop();
 8017c4c:	f7fa fffa 	bl	8012c44 <_Z3nopv>
 8017c50:	e7fc      	b.n	8017c4c <_ZN14TWIPR_Firmware10helperTaskEv+0x18>
    	}
    }

    status = this->start();
 8017c52:	6878      	ldr	r0, [r7, #4]
 8017c54:	f000 f9a4 	bl	8017fa0 <_ZN14TWIPR_Firmware5startEv>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	73fb      	strb	r3, [r7, #15]

    if (status){
 8017c5c:	7bfb      	ldrb	r3, [r7, #15]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d002      	beq.n	8017c68 <_ZN14TWIPR_Firmware10helperTaskEv+0x34>
    	while (true){
    		nop();
 8017c62:	f7fa ffef 	bl	8012c44 <_Z3nopv>
 8017c66:	e7fc      	b.n	8017c62 <_ZN14TWIPR_Firmware10helperTaskEv+0x2e>
    	}
    }

    osDelay(150);
 8017c68:	2096      	movs	r0, #150	@ 0x96
 8017c6a:	f7f6 ff8a 	bl	800eb82 <osDelay>
    // Signal successful initialization
    rc_buzzer.setConfig(900, 250, 1);
 8017c6e:	2201      	movs	r2, #1
 8017c70:	21fa      	movs	r1, #250	@ 0xfa
 8017c72:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8017ccc <_ZN14TWIPR_Firmware10helperTaskEv+0x98>
 8017c76:	4816      	ldr	r0, [pc, #88]	@ (8017cd0 <_ZN14TWIPR_Firmware10helperTaskEv+0x9c>)
 8017c78:	f004 fcb0 	bl	801c5dc <_ZN19RobotControl_Buzzer9setConfigEfth>
    rc_buzzer.start();
 8017c7c:	4814      	ldr	r0, [pc, #80]	@ (8017cd0 <_ZN14TWIPR_Firmware10helperTaskEv+0x9c>)
 8017c7e:	f004 fcc5 	bl	801c60c <_ZN19RobotControl_Buzzer5startEv>

    // Initialize the LED state
    rc_rgb_led_side_1.setColor(0, 0, 0);
 8017c82:	2300      	movs	r3, #0
 8017c84:	2200      	movs	r2, #0
 8017c86:	2100      	movs	r1, #0
 8017c88:	4812      	ldr	r0, [pc, #72]	@ (8017cd4 <_ZN14TWIPR_Firmware10helperTaskEv+0xa0>)
 8017c8a:	f004 fc69 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
    rc_rgb_led_side_1.state(1);
 8017c8e:	2101      	movs	r1, #1
 8017c90:	4810      	ldr	r0, [pc, #64]	@ (8017cd4 <_ZN14TWIPR_Firmware10helperTaskEv+0xa0>)
 8017c92:	f004 fc83 	bl	801c59c <_ZN19RobotControl_RGBLED5stateEh>

    // Main task loop
    while (true) {

    	// Check the Control Mode LED Timer
    	if (this->timer_control_mode_led > 250){
 8017c96:	687a      	ldr	r2, [r7, #4]
 8017c98:	f648 631c 	movw	r3, #36380	@ 0x8e1c
 8017c9c:	4413      	add	r3, r2
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fe fd4a 	bl	8016738 <_ZNK13elapsedMilliscvmEv>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	2bfa      	cmp	r3, #250	@ 0xfa
 8017ca8:	bf8c      	ite	hi
 8017caa:	2301      	movhi	r3, #1
 8017cac:	2300      	movls	r3, #0
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d0f0      	beq.n	8017c96 <_ZN14TWIPR_Firmware10helperTaskEv+0x62>
    		this->timer_control_mode_led.reset();
 8017cb4:	687a      	ldr	r2, [r7, #4]
 8017cb6:	f648 631c 	movw	r3, #36380	@ 0x8e1c
 8017cba:	4413      	add	r3, r2
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fe fd20 	bl	8016702 <_ZN13elapsedMillis5resetEv>
    		this->setControlModeLed();
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f000 fa9c 	bl	8018200 <_ZN14TWIPR_Firmware17setControlModeLedEv>
    	if (this->timer_control_mode_led > 250){
 8017cc8:	e7e5      	b.n	8017c96 <_ZN14TWIPR_Firmware10helperTaskEv+0x62>
 8017cca:	bf00      	nop
 8017ccc:	44610000 	.word	0x44610000
 8017cd0:	240286a8 	.word	0x240286a8
 8017cd4:	240286a0 	.word	0x240286a0

08017cd8 <_ZN14TWIPR_Firmware4initEv>:
}

/**
 * @brief Initializes all the firmware modules and configurations.
 */
HAL_StatusTypeDef TWIPR_Firmware::init() {
 8017cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cda:	b0b3      	sub	sp, #204	@ 0xcc
 8017cdc:	af08      	add	r7, sp, #32
 8017cde:	6078      	str	r0, [r7, #4]
    // Initialize robot control and peripheral modules
    robot_control_init();
 8017ce0:	f004 fcf0 	bl	801c6c4 <_Z18robot_control_initv>
    robot_control_start();
 8017ce4:	f004 fd00 	bl	801c6e8 <_Z19robot_control_startv>

    // Setup RGB LED and buzzer for feedback
    rc_rgb_led_status.setColor(120, 40, 0); // Orange
 8017ce8:	2300      	movs	r3, #0
 8017cea:	2228      	movs	r2, #40	@ 0x28
 8017cec:	2178      	movs	r1, #120	@ 0x78
 8017cee:	489d      	ldr	r0, [pc, #628]	@ (8017f64 <_ZN14TWIPR_Firmware4initEv+0x28c>)
 8017cf0:	f004 fc36 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
    rc_rgb_led_status.state(1);
 8017cf4:	2101      	movs	r1, #1
 8017cf6:	489b      	ldr	r0, [pc, #620]	@ (8017f64 <_ZN14TWIPR_Firmware4initEv+0x28c>)
 8017cf8:	f004 fc50 	bl	801c59c <_ZN19RobotControl_RGBLED5stateEh>
    rc_buzzer.setConfig(800, 250, 1);
 8017cfc:	2201      	movs	r2, #1
 8017cfe:	21fa      	movs	r1, #250	@ 0xfa
 8017d00:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8017f68 <_ZN14TWIPR_Firmware4initEv+0x290>
 8017d04:	4899      	ldr	r0, [pc, #612]	@ (8017f6c <_ZN14TWIPR_Firmware4initEv+0x294>)
 8017d06:	f004 fc69 	bl	801c5dc <_ZN19RobotControl_Buzzer9setConfigEfth>
    rc_buzzer.start();
 8017d0a:	4898      	ldr	r0, [pc, #608]	@ (8017f6c <_ZN14TWIPR_Firmware4initEv+0x294>)
 8017d0c:	f004 fc7e 	bl	801c60c <_ZN19RobotControl_Buzzer5startEv>

    osDelay(250); // Allow initialization delay
 8017d10:	20fa      	movs	r0, #250	@ 0xfa
 8017d12:	f7f6 ff36 	bl	800eb82 <osDelay>

    // Communication module setup
    twipr_communication_config_t twipr_comm_config = {
 8017d16:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	601a      	str	r2, [r3, #0]
 8017d1e:	605a      	str	r2, [r3, #4]
 8017d20:	609a      	str	r2, [r3, #8]
 8017d22:	60da      	str	r2, [r3, #12]
 8017d24:	611a      	str	r2, [r3, #16]
 8017d26:	615a      	str	r2, [r3, #20]
 8017d28:	4b91      	ldr	r3, [pc, #580]	@ (8017f70 <_ZN14TWIPR_Firmware4initEv+0x298>)
 8017d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017d2e:	4b91      	ldr	r3, [pc, #580]	@ (8017f74 <_ZN14TWIPR_Firmware4initEv+0x29c>)
 8017d30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017d38:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8017d3c:	2304      	movs	r3, #4
 8017d3e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
        .hspi = BOARD_SPI_CM4,
        .notification_gpio_tx = core_utils_GPIO(CM4_SAMPLE_NOTIFICATION_PORT, CM4_SAMPLE_NOTIFICATION_PIN),
        .sequence_rx_buffer = this->sequencer.rx_sequence_buffer,
        .len_sequence_buffer = TWIPR_SEQUENCE_BUFFER_SIZE,
        .reset_uart_exti = CM4_UART_RESET_EXTI,
    };
 8017d42:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8017d46:	3308      	adds	r3, #8
 8017d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d4c:	498a      	ldr	r1, [pc, #552]	@ (8017f78 <_ZN14TWIPR_Firmware4initEv+0x2a0>)
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f008 fc94 	bl	802067c <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>
        .sequence_rx_buffer = this->sequencer.rx_sequence_buffer,
 8017d54:	687a      	ldr	r2, [r7, #4]
 8017d56:	f242 03ac 	movw	r3, #8364	@ 0x20ac
 8017d5a:	4413      	add	r3, r2
    };
 8017d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    this->comm.init(twipr_comm_config);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 8017d66:	466c      	mov	r4, sp
 8017d68:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8017d6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017d74:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8017d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f7fc fc20 	bl	80145c0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>
    this->comm.start();
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	3358      	adds	r3, #88	@ 0x58
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7fc fd97 	bl	80148b8 <_ZN26TWIPR_CommunicationManager5startEv>

    // Sensors initialization
    twipr_sensors_config_t twipr_sensors_config = { .drive = &this->drive };
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	3308      	adds	r3, #8
 8017d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    this->sensors.init(twipr_sensors_config);
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	f648 0360 	movw	r3, #34912	@ 0x8860
 8017d98:	4413      	add	r3, r2
 8017d9a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7ff fd86 	bl	80178b0 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>

    // Estimation module setup
    twipr_estimation_config_t twipr_estimation_config = {
        .drive = &this->drive,
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	3308      	adds	r3, #8
        .sensors = &this->sensors,
//        .enable_slip_detection = 1,
        .model = twipr_model_small,
    };
 8017da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        .sensors = &this->sensors,
 8017daa:	687a      	ldr	r2, [r7, #4]
 8017dac:	f648 0360 	movw	r3, #34912	@ 0x8860
 8017db0:	4413      	add	r3, r2
    };
 8017db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8017db4:	4b71      	ldr	r3, [pc, #452]	@ (8017f7c <_ZN14TWIPR_Firmware4initEv+0x2a4>)
 8017db6:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8017dba:	461d      	mov	r5, r3
 8017dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017dc0:	682b      	ldr	r3, [r5, #0]
 8017dc2:	6023      	str	r3, [r4, #0]
    this->estimation.init(twipr_estimation_config);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f647 64d0 	movw	r4, #32464	@ 0x7ed0
 8017dca:	441c      	add	r4, r3
 8017dcc:	466d      	mov	r5, sp
 8017dce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017dd4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8017dd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8017ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017dde:	4620      	mov	r0, r4
 8017de0:	f7ff faea 	bl	80173b8 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>

    // Control module initialization
    twipr_control_init_config_t twipr_control_config = {
 8017de4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017de8:	2200      	movs	r2, #0
 8017dea:	601a      	str	r2, [r3, #0]
 8017dec:	605a      	str	r2, [r3, #4]
 8017dee:	609a      	str	r2, [r3, #8]
 8017df0:	60da      	str	r2, [r3, #12]
 8017df2:	4b63      	ldr	r3, [pc, #396]	@ (8017f80 <_ZN14TWIPR_Firmware4initEv+0x2a8>)
 8017df4:	667b      	str	r3, [r7, #100]	@ 0x64
 8017df6:	4b63      	ldr	r3, [pc, #396]	@ (8017f84 <_ZN14TWIPR_Firmware4initEv+0x2ac>)
 8017df8:	66bb      	str	r3, [r7, #104]	@ 0x68
        .estimation = &this->estimation,
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	f647 63d0 	movw	r3, #32464	@ 0x7ed0
 8017e00:	4413      	add	r3, r2
        .drive = &this->drive,
        .max_torque = TWIPR_CONTROL_MAX_TORQUE,
        .freq = TWIPR_CONTROL_TASK_FREQ,
    };
 8017e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
        .drive = &this->drive,
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	3308      	adds	r3, #8
    };
 8017e08:	663b      	str	r3, [r7, #96]	@ 0x60
    this->control.init(twipr_control_config);
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	f641 60a4 	movw	r0, #7844	@ 0x1ea4
 8017e10:	4418      	add	r0, r3
 8017e12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017e14:	9300      	str	r3, [sp, #0]
 8017e16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017e1c:	f7fd fc46 	bl	80156ac <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t>

    // Drive
    twipr_drive_can_config_t twipr_drive_config = {
 8017e20:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8017e24:	2200      	movs	r2, #0
 8017e26:	601a      	str	r2, [r3, #0]
 8017e28:	605a      	str	r2, [r3, #4]
 8017e2a:	609a      	str	r2, [r3, #8]
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8017e32:	2302      	movs	r3, #2
 8017e34:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8017e38:	23ff      	movs	r3, #255	@ 0xff
 8017e3a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8017e3e:	2301      	movs	r3, #1
 8017e40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8017e44:	4b50      	ldr	r3, [pc, #320]	@ (8017f88 <_ZN14TWIPR_Firmware4initEv+0x2b0>)
 8017e46:	65bb      	str	r3, [r7, #88]	@ 0x58
    		.can = &this->comm.can,
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	f241 5354 	movw	r3, #5460	@ 0x1554
 8017e4e:	4413      	add	r3, r2
			.id_left = 1,
			.id_right = 2,
			.direction_left = -1,
			.direction_right = 1,
			.torque_max = 0.4
    };
 8017e50:	653b      	str	r3, [r7, #80]	@ 0x50

    HAL_StatusTypeDef status = this->drive.init(twipr_drive_config);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	f103 0008 	add.w	r0, r3, #8
 8017e58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8017e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017e5e:	f7fe ffe1 	bl	8016e24 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t>
 8017e62:	4603      	mov	r3, r0
 8017e64:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    if (status){
 8017e68:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d002      	beq.n	8017e76 <_ZN14TWIPR_Firmware4initEv+0x19e>
    	return status;
 8017e70:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8017e74:	e071      	b.n	8017f5a <_ZN14TWIPR_Firmware4initEv+0x282>
//            return;
//        }
//    }

    // Initialize safety module
    twipr_supervisor_config_t supervisor_config = {
 8017e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017e7a:	222c      	movs	r2, #44	@ 0x2c
 8017e7c:	2100      	movs	r1, #0
 8017e7e:	4618      	mov	r0, r3
 8017e80:	f00a fe4f 	bl	8022b22 <memset>
 8017e84:	4b41      	ldr	r3, [pc, #260]	@ (8017f8c <_ZN14TWIPR_Firmware4initEv+0x2b4>)
 8017e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e88:	4b41      	ldr	r3, [pc, #260]	@ (8017f90 <_ZN14TWIPR_Firmware4initEv+0x2b8>)
 8017e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017e8c:	4b41      	ldr	r3, [pc, #260]	@ (8017f94 <_ZN14TWIPR_Firmware4initEv+0x2bc>)
 8017e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017e90:	4b41      	ldr	r3, [pc, #260]	@ (8017f98 <_ZN14TWIPR_Firmware4initEv+0x2c0>)
 8017e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8017e94:	2332      	movs	r3, #50	@ 0x32
 8017e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8017e98:	4b40      	ldr	r3, [pc, #256]	@ (8017f9c <_ZN14TWIPR_Firmware4initEv+0x2c4>)
 8017e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8017f9c <_ZN14TWIPR_Firmware4initEv+0x2c4>)
 8017e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    	.estimation = &this->estimation,
 8017ea0:	687a      	ldr	r2, [r7, #4]
 8017ea2:	f647 63d0 	movw	r3, #32464	@ 0x7ed0
 8017ea6:	4413      	add	r3, r2
        .drive = &this->drive,
        .control = &this->control,
		.communication = &this->comm,
		.off_button = &off_button,
        .max_wheel_speed = TWIPR_SAFETY_MAX_WHEEL_SPEED,
    };
 8017ea8:	627b      	str	r3, [r7, #36]	@ 0x24
        .drive = &this->drive,
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	3308      	adds	r3, #8
    };
 8017eae:	62bb      	str	r3, [r7, #40]	@ 0x28
        .control = &this->control,
 8017eb0:	687a      	ldr	r2, [r7, #4]
 8017eb2:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 8017eb6:	4413      	add	r3, r2
    };
 8017eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		.communication = &this->comm,
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	3358      	adds	r3, #88	@ 0x58
    };
 8017ebe:	633b      	str	r3, [r7, #48]	@ 0x30
    this->supervisor.init(supervisor_config);
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f648 0610 	movw	r6, #34832	@ 0x8810
 8017ec6:	441e      	add	r6, r3
 8017ec8:	466d      	mov	r5, sp
 8017eca:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8017ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017ed2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017ed6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8017eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017ee0:	4630      	mov	r0, r6
 8017ee2:	f003 fe99 	bl	801bc18 <_ZN16TWIPR_Supervisor4initE25twipr_supervisor_config_t>

    // Sequencer setup
    twipr_sequencer_config_t sequencer_config = {
        .control = &this->control,
 8017ee6:	687a      	ldr	r2, [r7, #4]
 8017ee8:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 8017eec:	4413      	add	r3, r2
        .comm = &this->comm,
    };
 8017eee:	61fb      	str	r3, [r7, #28]
        .comm = &this->comm,
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	3358      	adds	r3, #88	@ 0x58
    };
 8017ef4:	623b      	str	r3, [r7, #32]
    this->sequencer.init(sequencer_config);
 8017ef6:	687a      	ldr	r2, [r7, #4]
 8017ef8:	f242 0390 	movw	r3, #8336	@ 0x2090
 8017efc:	4413      	add	r3, r2
 8017efe:	f107 021c 	add.w	r2, r7, #28
 8017f02:	ca06      	ldmia	r2, {r1, r2}
 8017f04:	4618      	mov	r0, r3
 8017f06:	f004 f88b 	bl	801c020 <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t>
        .firmware = this,
        .control = &this->control,
        .estimation = &this->estimation,
        .sensors = &this->sensors,
        .sequencer = &this->sequencer,
    };
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	60bb      	str	r3, [r7, #8]
        .control = &this->control,
 8017f0e:	687a      	ldr	r2, [r7, #4]
 8017f10:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 8017f14:	4413      	add	r3, r2
    };
 8017f16:	60fb      	str	r3, [r7, #12]
        .estimation = &this->estimation,
 8017f18:	687a      	ldr	r2, [r7, #4]
 8017f1a:	f647 63d0 	movw	r3, #32464	@ 0x7ed0
 8017f1e:	4413      	add	r3, r2
    };
 8017f20:	613b      	str	r3, [r7, #16]
        .sensors = &this->sensors,
 8017f22:	687a      	ldr	r2, [r7, #4]
 8017f24:	f648 0360 	movw	r3, #34912	@ 0x8860
 8017f28:	4413      	add	r3, r2
    };
 8017f2a:	617b      	str	r3, [r7, #20]
        .sequencer = &this->sequencer,
 8017f2c:	687a      	ldr	r2, [r7, #4]
 8017f2e:	f242 0390 	movw	r3, #8336	@ 0x2090
 8017f32:	4413      	add	r3, r2
    };
 8017f34:	61bb      	str	r3, [r7, #24]
    this->logging.init(logging_config);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	f648 04d8 	movw	r4, #35032	@ 0x88d8
 8017f3c:	441c      	add	r4, r3
 8017f3e:	466a      	mov	r2, sp
 8017f40:	f107 0314 	add.w	r3, r7, #20
 8017f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f48:	e882 0003 	stmia.w	r2, {r0, r1}
 8017f4c:	f107 0308 	add.w	r3, r7, #8
 8017f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017f52:	4620      	mov	r0, r4
 8017f54:	f003 fd31 	bl	801b9ba <_ZN13TWIPR_Logging4initE22twipr_logging_config_t>

    return HAL_OK;
 8017f58:	2300      	movs	r3, #0
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	37ac      	adds	r7, #172	@ 0xac
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f62:	bf00      	nop
 8017f64:	2402869c 	.word	0x2402869c
 8017f68:	44480000 	.word	0x44480000
 8017f6c:	240286a8 	.word	0x240286a8
 8017f70:	240007ec 	.word	0x240007ec
 8017f74:	24000318 	.word	0x24000318
 8017f78:	58021000 	.word	0x58021000
 8017f7c:	2400001c 	.word	0x2400001c
 8017f80:	3e99999a 	.word	0x3e99999a
 8017f84:	42c80000 	.word	0x42c80000
 8017f88:	3ecccccd 	.word	0x3ecccccd
 8017f8c:	24028684 	.word	0x24028684
 8017f90:	42960000 	.word	0x42960000
 8017f94:	3dcccccd 	.word	0x3dcccccd
 8017f98:	3d4ccccd 	.word	0x3d4ccccd
 8017f9c:	3e4ccccd 	.word	0x3e4ccccd

08017fa0 <_ZN14TWIPR_Firmware5startEv>:

/**
 * @brief Starts the various firmware components and control tasks.
 */
HAL_StatusTypeDef TWIPR_Firmware::start() {
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b084      	sub	sp, #16
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]

    // Start the Sensors
    this->sensors.start();
 8017fa8:	687a      	ldr	r2, [r7, #4]
 8017faa:	f648 0360 	movw	r3, #34912	@ 0x8860
 8017fae:	4413      	add	r3, r2
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7ff fcd1 	bl	8017958 <_ZN13TWIPR_Sensors5startEv>

    // Start the estimation module
    this->estimation.start();
 8017fb6:	687a      	ldr	r2, [r7, #4]
 8017fb8:	f647 63d0 	movw	r3, #32464	@ 0x7ed0
 8017fbc:	4413      	add	r3, r2
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7ff fa22 	bl	8017408 <_ZN16TWIPR_Estimation5startEv>


    HAL_StatusTypeDef status = this->drive.start();
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	3308      	adds	r3, #8
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7fe ff9d 	bl	8016f08 <_ZN15TWIPR_Drive_CAN5startEv>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	73fb      	strb	r3, [r7, #15]

    if(status){
 8017fd2:	7bfb      	ldrb	r3, [r7, #15]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d002      	beq.n	8017fde <_ZN14TWIPR_Firmware5startEv+0x3e>
    	while(true){
    		nop();
 8017fd8:	f7fa fe34 	bl	8012c44 <_Z3nopv>
 8017fdc:	e7fc      	b.n	8017fd8 <_ZN14TWIPR_Firmware5startEv+0x38>
    	}
    }

    // Start the control module
    this->control.start();
 8017fde:	687a      	ldr	r2, [r7, #4]
 8017fe0:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 8017fe4:	4413      	add	r3, r2
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7fd fbee 	bl	80157c8 <_ZN20TWIPR_ControlManager5startEv>

    // Start the safety module
    this->supervisor.start();
 8017fec:	687a      	ldr	r2, [r7, #4]
 8017fee:	f648 0310 	movw	r3, #34832	@ 0x8810
 8017ff2:	4413      	add	r3, r2
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f003 fe2b 	bl	801bc50 <_ZN16TWIPR_Supervisor5startEv>

    // Start the Sequencer module
    this->sequencer.start();
 8017ffa:	687a      	ldr	r2, [r7, #4]
 8017ffc:	f242 0390 	movw	r3, #8336	@ 0x2090
 8018000:	4413      	add	r3, r2
 8018002:	4618      	mov	r0, r3
 8018004:	f004 f83c 	bl	801c080 <_ZN15TWIPR_Sequencer5startEv>

    // Start the control task
    osThreadNew(start_firmware_control_task, (void*)&twipr_firmware, &control_task_attributes);
 8018008:	4a06      	ldr	r2, [pc, #24]	@ (8018024 <_ZN14TWIPR_Firmware5startEv+0x84>)
 801800a:	4907      	ldr	r1, [pc, #28]	@ (8018028 <_ZN14TWIPR_Firmware5startEv+0x88>)
 801800c:	4807      	ldr	r0, [pc, #28]	@ (801802c <_ZN14TWIPR_Firmware5startEv+0x8c>)
 801800e:	f7f6 fd26 	bl	800ea5e <osThreadNew>

    // Set firmware state to RUNNING
    this->firmware_state = TWIPR_FIRMWARE_STATE_RUNNING;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	2201      	movs	r2, #1
 8018016:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 8018018:	2300      	movs	r3, #0
}
 801801a:	4618      	mov	r0, r3
 801801c:	3710      	adds	r7, #16
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	08024e80 	.word	0x08024e80
 8018028:	2401f460 	.word	0x2401f460
 801802c:	080181b3 	.word	0x080181b3

08018030 <_ZN14TWIPR_Firmware11controlTaskEv>:
 * @brief Main control task function for the firmware.
 *
 * This task ensures periodic execution of control logic and manages the
 * state of the firmware. It checks timing constraints and handles error states.
 */
void TWIPR_Firmware::controlTask() {
 8018030:	b580      	push	{r7, lr}
 8018032:	b084      	sub	sp, #16
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
    uint32_t global_tick;  // Current system tick
    uint32_t loop_time;    // Time taken for one control loop

    while (true) {
        global_tick = osKernelGetTickCount();  // Get current system tick
 8018038:	f7f6 fcfc 	bl	800ea34 <osKernelGetTickCount>
 801803c:	60f8      	str	r0, [r7, #12]

        // Execute the control task step
        this->controlTaskStep();
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f000 f816 	bl	8018070 <_ZN14TWIPR_Firmware15controlTaskStepEv>

        // Measure the time taken for the loop
        loop_time = osKernelGetTickCount() - global_tick;
 8018044:	f7f6 fcf6 	bl	800ea34 <osKernelGetTickCount>
 8018048:	4602      	mov	r2, r0
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	1ad3      	subs	r3, r2, r3
 801804e:	60bb      	str	r3, [r7, #8]

        // Check for race conditions or timing issues
        if (loop_time > (1000.0 / (float)TWIPR_CONTROL_TASK_FREQ)) {
 8018050:	68bb      	ldr	r3, [r7, #8]
 8018052:	2b0a      	cmp	r3, #10
 8018054:	d905      	bls.n	8018062 <_ZN14TWIPR_Firmware11controlTaskEv+0x32>
            this->firmware_state = TWIPR_FIRMWARE_STATE_ERROR;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	22ff      	movs	r2, #255	@ 0xff
 801805a:	701a      	strb	r2, [r3, #0]
            this->error = TWIPR_ERROR_CRITICAL;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2201      	movs	r2, #1
 8018060:	705a      	strb	r2, [r3, #1]
        }

        // Delay until the next loop execution
        osDelayUntil(global_tick + (uint32_t)(1000.0 / (float) TWIPR_CONTROL_TASK_FREQ));
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	330a      	adds	r3, #10
 8018066:	4618      	mov	r0, r3
 8018068:	f7f6 fda6 	bl	800ebb8 <osDelayUntil>
        global_tick = osKernelGetTickCount();  // Get current system tick
 801806c:	e7e4      	b.n	8018038 <_ZN14TWIPR_Firmware11controlTaskEv+0x8>
	...

08018070 <_ZN14TWIPR_Firmware15controlTaskStepEv>:
 *
 * This method updates the state of the firmware based on its current mode,
 * manages the controller, updates the sequencer, and collects data samples
 * for logging.
 */
void TWIPR_Firmware::controlTaskStep() {
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]


    switch (this->firmware_state) {
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f993 3000 	ldrsb.w	r3, [r3]
 801807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018082:	d05c      	beq.n	801813e <_ZN14TWIPR_Firmware15controlTaskStepEv+0xce>
 8018084:	2b01      	cmp	r3, #1
 8018086:	d161      	bne.n	801814c <_ZN14TWIPR_Firmware15controlTaskStepEv+0xdc>
        case TWIPR_FIRMWARE_STATE_RUNNING: {

		if (activityTimer > 250) {
 8018088:	4836      	ldr	r0, [pc, #216]	@ (8018164 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xf4>)
 801808a:	f7fe fb55 	bl	8016738 <_ZNK13elapsedMilliscvmEv>
 801808e:	4603      	mov	r3, r0
 8018090:	2bfa      	cmp	r3, #250	@ 0xfa
 8018092:	bf8c      	ite	hi
 8018094:	2301      	movhi	r3, #1
 8018096:	2300      	movls	r3, #0
 8018098:	b2db      	uxtb	r3, r3
 801809a:	2b00      	cmp	r3, #0
 801809c:	d005      	beq.n	80180aa <_ZN14TWIPR_Firmware15controlTaskStepEv+0x3a>
			activityTimer.reset();
 801809e:	4831      	ldr	r0, [pc, #196]	@ (8018164 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xf4>)
 80180a0:	f7fe fb2f 	bl	8016702 <_ZN13elapsedMillis5resetEv>
			rc_activity_led.toggle();
 80180a4:	4830      	ldr	r0, [pc, #192]	@ (8018168 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xf8>)
 80180a6:	f007 f9ce 	bl	801f446 <_ZN17core_hardware_LED6toggleEv>

        	// Check all modules
        	//TODO

        	// Check for errors in the safety module
        	twipr_error_t error = this->supervisor.check();
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	f648 0310 	movw	r3, #34832	@ 0x8810
 80180b0:	4413      	add	r3, r2
 80180b2:	4618      	mov	r0, r3
 80180b4:	f003 ff02 	bl	801bebc <_ZN16TWIPR_Supervisor5checkEv>
 80180b8:	4603      	mov	r3, r0
 80180ba:	73fb      	strb	r3, [r7, #15]
        	if (!(error == TWIPR_ERROR_NONE)){
 80180bc:	7bfb      	ldrb	r3, [r7, #15]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d004      	beq.n	80180cc <_ZN14TWIPR_Firmware15controlTaskStepEv+0x5c>
        		this->errorHandler(error);
 80180c2:	7bfb      	ldrb	r3, [r7, #15]
 80180c4:	4619      	mov	r1, r3
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	f000 f852 	bl	8018170 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t>
        	}

            // Update the sequencer
            this->sequencer.update();
 80180cc:	687a      	ldr	r2, [r7, #4]
 80180ce:	f242 0390 	movw	r3, #8336	@ 0x2090
 80180d2:	4413      	add	r3, r2
 80180d4:	4618      	mov	r0, r3
 80180d6:	f003 ffdd 	bl	801c094 <_ZN15TWIPR_Sequencer6updateEv>

            // Update the controller
            this->control.update();
 80180da:	687a      	ldr	r2, [r7, #4]
 80180dc:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 80180e0:	4413      	add	r3, r2
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fd fb94 	bl	8015810 <_ZN20TWIPR_ControlManager6updateEv>

            // Collect samples for logging
            sample_buffer_state = this->logging.collectSamples();
 80180e8:	687a      	ldr	r2, [r7, #4]
 80180ea:	f648 03d8 	movw	r3, #35032	@ 0x88d8
 80180ee:	4413      	add	r3, r2
 80180f0:	4618      	mov	r0, r3
 80180f2:	f003 fc7e 	bl	801b9f2 <_ZN13TWIPR_Logging14collectSamplesEv>
 80180f6:	4603      	mov	r3, r0
 80180f8:	461a      	mov	r2, r3
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018100:	f883 2e18 	strb.w	r2, [r3, #3608]	@ 0xe18

            // If the logging buffer is full, provide data to the communication module
            if (sample_buffer_state == TWIPR_LOGGING_BUFFER_FULL) {
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801810a:	f893 3e18 	ldrb.w	r3, [r3, #3608]	@ 0xe18
 801810e:	2b01      	cmp	r3, #1
 8018110:	d109      	bne.n	8018126 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xb6>
                this->comm.provideSampleData(this->logging.sample_buffer);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8018118:	687a      	ldr	r2, [r7, #4]
 801811a:	f648 03d8 	movw	r3, #35032	@ 0x88d8
 801811e:	4413      	add	r3, r2
 8018120:	4619      	mov	r1, r3
 8018122:	f7fc fddd 	bl	8014ce0 <_ZN26TWIPR_CommunicationManager17provideSampleDataEP22twipr_logging_sample_t>
            }

            // Increment the tick counter
            this->tick++;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	685b      	ldr	r3, [r3, #4]
 801812a:	1c5a      	adds	r2, r3, #1
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	605a      	str	r2, [r3, #4]

            // Set the status LED to green (normal operation)
            rc_rgb_led_status.setColor(0, 60, 0);
 8018130:	2300      	movs	r3, #0
 8018132:	223c      	movs	r2, #60	@ 0x3c
 8018134:	2100      	movs	r1, #0
 8018136:	480d      	ldr	r0, [pc, #52]	@ (801816c <_ZN14TWIPR_Firmware15controlTaskStepEv+0xfc>)
 8018138:	f004 fa12 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
            break;
 801813c:	e00d      	b.n	801815a <_ZN14TWIPR_Firmware15controlTaskStepEv+0xea>
        }
        case TWIPR_FIRMWARE_STATE_ERROR: {
            // Set the status LED to red (error state)
            rc_rgb_led_status.setColor(120, 0, 0);
 801813e:	2300      	movs	r3, #0
 8018140:	2200      	movs	r2, #0
 8018142:	2178      	movs	r1, #120	@ 0x78
 8018144:	4809      	ldr	r0, [pc, #36]	@ (801816c <_ZN14TWIPR_Firmware15controlTaskStepEv+0xfc>)
 8018146:	f004 fa0b 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
            break;
 801814a:	e006      	b.n	801815a <_ZN14TWIPR_Firmware15controlTaskStepEv+0xea>
        }
        default: {
            // Handle undefined or unexpected states
            rc_rgb_led_status.setColor(120, 0, 0);
 801814c:	2300      	movs	r3, #0
 801814e:	2200      	movs	r2, #0
 8018150:	2178      	movs	r1, #120	@ 0x78
 8018152:	4806      	ldr	r0, [pc, #24]	@ (801816c <_ZN14TWIPR_Firmware15controlTaskStepEv+0xfc>)
 8018154:	f004 fa04 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
            break;
 8018158:	bf00      	nop
        }
    }
}
 801815a:	bf00      	nop
 801815c:	3710      	adds	r7, #16
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}
 8018162:	bf00      	nop
 8018164:	24028628 	.word	0x24028628
 8018168:	2402868c 	.word	0x2402868c
 801816c:	2402869c 	.word	0x2402869c

08018170 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t>:


void TWIPR_Firmware::errorHandler(twipr_error_t error){
 8018170:	b580      	push	{r7, lr}
 8018172:	b082      	sub	sp, #8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	460b      	mov	r3, r1
 801817a:	70fb      	strb	r3, [r7, #3]
	switch (error) {
 801817c:	78fb      	ldrb	r3, [r7, #3]
 801817e:	2b02      	cmp	r3, #2
 8018180:	d010      	beq.n	80181a4 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x34>
 8018182:	2b02      	cmp	r3, #2
 8018184:	dc11      	bgt.n	80181aa <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
 8018186:	2b00      	cmp	r3, #0
 8018188:	d00e      	beq.n	80181a8 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x38>
 801818a:	2b01      	cmp	r3, #1
 801818c:	d10d      	bne.n	80181aa <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
	case TWIPR_ERROR_CRITICAL:{
		this->control.stop();
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	f641 63a4 	movw	r3, #7844	@ 0x1ea4
 8018194:	4413      	add	r3, r2
 8018196:	4618      	mov	r0, r3
 8018198:	f7fd fb27 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
		this->firmware_state = TWIPR_FIRMWARE_STATE_ERROR;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	22ff      	movs	r2, #255	@ 0xff
 80181a0:	701a      	strb	r2, [r3, #0]
		break;
 80181a2:	e002      	b.n	80181aa <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
	}
	case TWIPR_ERROR_WARNING :{
		break;
 80181a4:	bf00      	nop
 80181a6:	e000      	b.n	80181aa <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
	}
	case TWIPR_ERROR_NONE:{
		break;
 80181a8:	bf00      	nop
	}
	}
}
 80181aa:	bf00      	nop
 80181ac:	3708      	adds	r7, #8
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}

080181b2 <_Z27start_firmware_control_taskPv>:

/**
 * @brief Wrapper function to start the control task.
 * @param argument Pointer to the firmware object.
 */
void start_firmware_control_task(void* argument) {
 80181b2:	b580      	push	{r7, lr}
 80181b4:	b084      	sub	sp, #16
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
    TWIPR_Firmware* firmware = (TWIPR_Firmware*)argument;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	60fb      	str	r3, [r7, #12]
    firmware->controlTask();
 80181be:	68f8      	ldr	r0, [r7, #12]
 80181c0:	f7ff ff36 	bl	8018030 <_ZN14TWIPR_Firmware11controlTaskEv>
}
 80181c4:	bf00      	nop
 80181c6:	3710      	adds	r7, #16
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <_ZN14TWIPR_Firmware9getSampleEv>:

/**
 * @brief Retrieves a logging sample with the current state and tick count.
 * @return A logging structure containing the current tick, state, and error code.
 */
twipr_logging_general_t TWIPR_Firmware::getSample() {
 80181cc:	b480      	push	{r7}
 80181ce:	b083      	sub	sp, #12
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
    twipr_logging_general_t sample = {
        .tick = this->tick,
 80181d6:	683b      	ldr	r3, [r7, #0]
 80181d8:	685a      	ldr	r2, [r3, #4]
        .state = this->firmware_state,
        .error = this->error,
    };
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	601a      	str	r2, [r3, #0]
        .state = this->firmware_state,
 80181de:	683b      	ldr	r3, [r7, #0]
 80181e0:	f993 2000 	ldrsb.w	r2, [r3]
    };
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	711a      	strb	r2, [r3, #4]
        .error = this->error,
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	785a      	ldrb	r2, [r3, #1]
    };
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	715a      	strb	r2, [r3, #5]
    return sample;
 80181f0:	bf00      	nop
}
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	370c      	adds	r7, #12
 80181f6:	46bd      	mov	sp, r7
 80181f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fc:	4770      	bx	lr
	...

08018200 <_ZN14TWIPR_Firmware17setControlModeLedEv>:
 * the robot's current control mode:
 * - **Red**: TWIPR_CONTROL_MODE_OFF (The system is off)
 * - **Amber**: TWIPR_CONTROL_MODE_BALANCING (The system is in balancing mode)
 * - **Green**: TWIPR_CONTROL_MODE_VELOCITY (The system is in velocity mode)
 */
void TWIPR_Firmware::setControlModeLed() {
 8018200:	b580      	push	{r7, lr}
 8018202:	b082      	sub	sp, #8
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
    // Check the current control mode and set the LED color accordingly
    if (this->control.mode == TWIPR_CONTROL_MODE_OFF) {
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801820e:	f893 3ea5 	ldrb.w	r3, [r3, #3749]	@ 0xea5
 8018212:	2b00      	cmp	r3, #0
 8018214:	d106      	bne.n	8018224 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x24>
        rc_rgb_led_side_1.setColor(100, 0, 0); // Red for OFF mode
 8018216:	2300      	movs	r3, #0
 8018218:	2200      	movs	r2, #0
 801821a:	2164      	movs	r1, #100	@ 0x64
 801821c:	4811      	ldr	r0, [pc, #68]	@ (8018264 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x64>)
 801821e:	f004 f99f 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
    } else if (this->control.mode == TWIPR_CONTROL_MODE_BALANCING) {
        rc_rgb_led_side_1.setColor(100, 70, 0); // Amber for Balancing
    } else if (this->control.mode == TWIPR_CONTROL_MODE_VELOCITY) {
        rc_rgb_led_side_1.setColor(0, 100, 0); // Green for Velocity
    }
}
 8018222:	e01a      	b.n	801825a <_ZN14TWIPR_Firmware17setControlModeLedEv+0x5a>
    } else if (this->control.mode == TWIPR_CONTROL_MODE_BALANCING) {
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801822a:	f893 3ea5 	ldrb.w	r3, [r3, #3749]	@ 0xea5
 801822e:	2b02      	cmp	r3, #2
 8018230:	d106      	bne.n	8018240 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x40>
        rc_rgb_led_side_1.setColor(100, 70, 0); // Amber for Balancing
 8018232:	2300      	movs	r3, #0
 8018234:	2246      	movs	r2, #70	@ 0x46
 8018236:	2164      	movs	r1, #100	@ 0x64
 8018238:	480a      	ldr	r0, [pc, #40]	@ (8018264 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x64>)
 801823a:	f004 f991 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
}
 801823e:	e00c      	b.n	801825a <_ZN14TWIPR_Firmware17setControlModeLedEv+0x5a>
    } else if (this->control.mode == TWIPR_CONTROL_MODE_VELOCITY) {
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018246:	f893 3ea5 	ldrb.w	r3, [r3, #3749]	@ 0xea5
 801824a:	2b03      	cmp	r3, #3
 801824c:	d105      	bne.n	801825a <_ZN14TWIPR_Firmware17setControlModeLedEv+0x5a>
        rc_rgb_led_side_1.setColor(0, 100, 0); // Green for Velocity
 801824e:	2300      	movs	r3, #0
 8018250:	2264      	movs	r2, #100	@ 0x64
 8018252:	2100      	movs	r1, #0
 8018254:	4803      	ldr	r0, [pc, #12]	@ (8018264 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x64>)
 8018256:	f004 f983 	bl	801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>
}
 801825a:	bf00      	nop
 801825c:	3708      	adds	r7, #8
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}
 8018262:	bf00      	nop
 8018264:	240286a0 	.word	0x240286a0

08018268 <_ZN14TWIPR_Firmware5debugEh>:

/**
 * @brief Debug function used for custom debugging operations.
 * @param input The debug input value to process.
 */
uint8_t TWIPR_Firmware::debug(uint8_t input) {
 8018268:	b480      	push	{r7}
 801826a:	b083      	sub	sp, #12
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
 8018270:	460b      	mov	r3, r1
 8018272:	70fb      	strb	r3, [r7, #3]
    // Debugging logic can be implemented here
	return input + 1;
 8018274:	78fb      	ldrb	r3, [r7, #3]
 8018276:	3301      	adds	r3, #1
 8018278:	b2db      	uxtb	r3, r3
}
 801827a:	4618      	mov	r0, r3
 801827c:	370c      	adds	r7, #12
 801827e:	46bd      	mov	sp, r7
 8018280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018284:	4770      	bx	lr
	...

08018288 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvEC1EP11RegisterMaphPS0_>:
		this->callback = core_utils_Callback<output_type, void>(function);
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
	}

	/* --------------------------------------------------------------------------------------------------------- */
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018288:	b580      	push	{r7, lr}
 801828a:	b084      	sub	sp, #16
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	603b      	str	r3, [r7, #0]
 8018294:	4613      	mov	r3, r2
 8018296:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	4618      	mov	r0, r3
 801829c:	f7ff fc2c 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80182a0:	4a0e      	ldr	r2, [pc, #56]	@ (80182dc <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvEC1EP11RegisterMaphPS0_+0x54>)
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	601a      	str	r2, [r3, #0]
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	3310      	adds	r3, #16
 80182aa:	4618      	mov	r0, r3
 80182ac:	f000 fc48 	bl	8018b40 <_ZN19core_utils_CallbackI22twipr_firmware_state_tvEC1Ev>
		this->address = address;
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	79fa      	ldrb	r2, [r7, #7]
 80182b4:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	68fa      	ldr	r2, [r7, #12]
 80182be:	7b11      	ldrb	r1, [r2, #12]
 80182c0:	68fa      	ldr	r2, [r7, #12]
 80182c2:	68b8      	ldr	r0, [r7, #8]
 80182c4:	4798      	blx	r3
//		this->callback = core_utils_Callback<output_type, void>(function);
		this->data = data;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	683a      	ldr	r2, [r7, #0]
 80182ca:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2203      	movs	r2, #3
 80182d0:	735a      	strb	r2, [r3, #13]
	}
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	4618      	mov	r0, r3
 80182d6:	3710      	adds	r7, #16
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	08025184 	.word	0x08025184

080182e0 <_ZN24core_utils_RegisterEntryImvEC1EP11RegisterMaphPm>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b084      	sub	sp, #16
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	60f8      	str	r0, [r7, #12]
 80182e8:	60b9      	str	r1, [r7, #8]
 80182ea:	603b      	str	r3, [r7, #0]
 80182ec:	4613      	mov	r3, r2
 80182ee:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7ff fc00 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80182f8:	4a0e      	ldr	r2, [pc, #56]	@ (8018334 <_ZN24core_utils_RegisterEntryImvEC1EP11RegisterMaphPm+0x54>)
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	601a      	str	r2, [r3, #0]
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	3314      	adds	r3, #20
 8018302:	4618      	mov	r0, r3
 8018304:	f000 fc3a 	bl	8018b7c <_ZN19core_utils_CallbackImvEC1Ev>
		this->address = address;
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	79fa      	ldrb	r2, [r7, #7]
 801830c:	741a      	strb	r2, [r3, #16]
		map->addEntry(this->address, this);
 801830e:	68bb      	ldr	r3, [r7, #8]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	68fa      	ldr	r2, [r7, #12]
 8018316:	7c11      	ldrb	r1, [r2, #16]
 8018318:	68fa      	ldr	r2, [r7, #12]
 801831a:	68b8      	ldr	r0, [r7, #8]
 801831c:	4798      	blx	r3
		this->data = data;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	683a      	ldr	r2, [r7, #0]
 8018322:	60da      	str	r2, [r3, #12]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	2203      	movs	r2, #3
 8018328:	745a      	strb	r2, [r3, #17]
	}
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	4618      	mov	r0, r3
 801832e:	3710      	adds	r7, #16
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	08025150 	.word	0x08025150

08018338 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvEC1EP11RegisterMaphPS0_>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018338:	b580      	push	{r7, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	af00      	add	r7, sp, #0
 801833e:	60f8      	str	r0, [r7, #12]
 8018340:	60b9      	str	r1, [r7, #8]
 8018342:	603b      	str	r3, [r7, #0]
 8018344:	4613      	mov	r3, r2
 8018346:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	4618      	mov	r0, r3
 801834c:	f7ff fbd4 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018350:	4a0e      	ldr	r2, [pc, #56]	@ (801838c <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvEC1EP11RegisterMaphPS0_+0x54>)
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	601a      	str	r2, [r3, #0]
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	3310      	adds	r3, #16
 801835a:	4618      	mov	r0, r3
 801835c:	f000 fc2c 	bl	8018bb8 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvEC1Ev>
		this->address = address;
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	79fa      	ldrb	r2, [r7, #7]
 8018364:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018366:	68bb      	ldr	r3, [r7, #8]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	68fa      	ldr	r2, [r7, #12]
 801836e:	7b11      	ldrb	r1, [r2, #12]
 8018370:	68fa      	ldr	r2, [r7, #12]
 8018372:	68b8      	ldr	r0, [r7, #8]
 8018374:	4798      	blx	r3
		this->data = data;
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	683a      	ldr	r2, [r7, #0]
 801837a:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2203      	movs	r2, #3
 8018380:	735a      	strb	r2, [r3, #13]
	}
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	4618      	mov	r0, r3
 8018386:	3710      	adds	r7, #16
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}
 801838c:	0802511c 	.word	0x0802511c

08018390 <_ZN19core_utils_CallbackIhhEaSEOS0_>:
class core_utils_Callback: public Callback {
 8018390:	b5b0      	push	{r4, r5, r7, lr}
 8018392:	b082      	sub	sp, #8
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	6039      	str	r1, [r7, #0]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	683a      	ldr	r2, [r7, #0]
 801839e:	4611      	mov	r1, r2
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7ff fbb9 	bl	8017b18 <_ZN8CallbackaSEOS_>
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	791a      	ldrb	r2, [r3, #4]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	711a      	strb	r2, [r3, #4]
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	f102 0408 	add.w	r4, r2, #8
 80183b6:	f103 0508 	add.w	r5, r3, #8
 80183ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80183c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	4618      	mov	r0, r3
 80183ca:	3708      	adds	r7, #8
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bdb0      	pop	{r4, r5, r7, pc}

080183d0 <_ZN24core_utils_RegisterEntryIhhEC1I14TWIPR_FirmwareEEP11RegisterMaphPT_MS5_FhhE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 80183d0:	b590      	push	{r4, r7, lr}
 80183d2:	b08d      	sub	sp, #52	@ 0x34
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	603b      	str	r3, [r7, #0]
 80183dc:	4613      	mov	r3, r2
 80183de:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	4618      	mov	r0, r3
 80183e4:	f7ff fb88 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80183e8:	4a17      	ldr	r2, [pc, #92]	@ (8018448 <_ZN24core_utils_RegisterEntryIhhEC1I14TWIPR_FirmwareEEP11RegisterMaphPT_MS5_FhhE+0x78>)
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	601a      	str	r2, [r3, #0]
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	2200      	movs	r2, #0
 80183f2:	609a      	str	r2, [r3, #8]
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	3310      	adds	r3, #16
 80183f8:	4618      	mov	r0, r3
 80183fa:	f000 fbfb 	bl	8018bf4 <_ZN19core_utils_CallbackIhhEC1Ev>
		this->address = address;
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	79fa      	ldrb	r2, [r7, #7]
 8018402:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	68fa      	ldr	r2, [r7, #12]
 801840c:	7b11      	ldrb	r1, [r2, #12]
 801840e:	68fa      	ldr	r2, [r7, #12]
 8018410:	68b8      	ldr	r0, [r7, #8]
 8018412:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	f103 0410 	add.w	r4, r3, #16
 801841a:	f107 0010 	add.w	r0, r7, #16
 801841e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018422:	cb0c      	ldmia	r3, {r2, r3}
 8018424:	6839      	ldr	r1, [r7, #0]
 8018426:	f000 fc03 	bl	8018c30 <_ZN19core_utils_CallbackIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>
 801842a:	f107 0310 	add.w	r3, r7, #16
 801842e:	4619      	mov	r1, r3
 8018430:	4620      	mov	r0, r4
 8018432:	f7ff ffad 	bl	8018390 <_ZN19core_utils_CallbackIhhEaSEOS0_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2201      	movs	r2, #1
 801843a:	735a      	strb	r2, [r3, #13]
	}
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	4618      	mov	r0, r3
 8018440:	3734      	adds	r7, #52	@ 0x34
 8018442:	46bd      	mov	sp, r7
 8018444:	bd90      	pop	{r4, r7, pc}
 8018446:	bf00      	nop
 8018448:	080250e8 	.word	0x080250e8

0801844c <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 801844c:	b5b0      	push	{r4, r5, r7, lr}
 801844e:	b082      	sub	sp, #8
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
 8018454:	6039      	str	r1, [r7, #0]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	683a      	ldr	r2, [r7, #0]
 801845a:	4611      	mov	r1, r2
 801845c:	4618      	mov	r0, r3
 801845e:	f7ff fb5b 	bl	8017b18 <_ZN8CallbackaSEOS_>
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	791a      	ldrb	r2, [r3, #4]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	711a      	strb	r2, [r3, #4]
 801846a:	687a      	ldr	r2, [r7, #4]
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	f102 0408 	add.w	r4, r2, #8
 8018472:	f103 0508 	add.w	r5, r3, #8
 8018476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801847a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801847e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	4618      	mov	r0, r3
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bdb0      	pop	{r4, r5, r7, pc}

0801848c <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 801848c:	b590      	push	{r4, r7, lr}
 801848e:	b08d      	sub	sp, #52	@ 0x34
 8018490:	af00      	add	r7, sp, #0
 8018492:	60f8      	str	r0, [r7, #12]
 8018494:	60b9      	str	r1, [r7, #8]
 8018496:	603b      	str	r3, [r7, #0]
 8018498:	4613      	mov	r3, r2
 801849a:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	4618      	mov	r0, r3
 80184a0:	f7ff fb2a 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80184a4:	4a17      	ldr	r2, [pc, #92]	@ (8018504 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	601a      	str	r2, [r3, #0]
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	2200      	movs	r2, #0
 80184ae:	611a      	str	r2, [r3, #16]
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	3318      	adds	r3, #24
 80184b4:	4618      	mov	r0, r3
 80184b6:	f000 fbef 	bl	8018c98 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1Ev>
		this->address = address;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	79fa      	ldrb	r2, [r7, #7]
 80184be:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	68fa      	ldr	r2, [r7, #12]
 80184c8:	7d11      	ldrb	r1, [r2, #20]
 80184ca:	68fa      	ldr	r2, [r7, #12]
 80184cc:	68b8      	ldr	r0, [r7, #8]
 80184ce:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	f103 0418 	add.w	r4, r3, #24
 80184d6:	f107 0010 	add.w	r0, r7, #16
 80184da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80184de:	cb0c      	ldmia	r3, {r2, r3}
 80184e0:	6839      	ldr	r1, [r7, #0]
 80184e2:	f000 fbf7 	bl	8018cd4 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>
 80184e6:	f107 0310 	add.w	r3, r7, #16
 80184ea:	4619      	mov	r1, r3
 80184ec:	4620      	mov	r0, r4
 80184ee:	f7ff ffad 	bl	801844c <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2201      	movs	r2, #1
 80184f6:	755a      	strb	r2, [r3, #21]
	}
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	4618      	mov	r0, r3
 80184fc:	3734      	adds	r7, #52	@ 0x34
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd90      	pop	{r4, r7, pc}
 8018502:	bf00      	nop
 8018504:	080250b4 	.word	0x080250b4

08018508 <_ZN24core_utils_RegisterEntryIhvEC1EP11RegisterMaphPh>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018508:	b580      	push	{r7, lr}
 801850a:	b084      	sub	sp, #16
 801850c:	af00      	add	r7, sp, #0
 801850e:	60f8      	str	r0, [r7, #12]
 8018510:	60b9      	str	r1, [r7, #8]
 8018512:	603b      	str	r3, [r7, #0]
 8018514:	4613      	mov	r3, r2
 8018516:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	4618      	mov	r0, r3
 801851c:	f7ff faec 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018520:	4a0e      	ldr	r2, [pc, #56]	@ (801855c <_ZN24core_utils_RegisterEntryIhvEC1EP11RegisterMaphPh+0x54>)
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	601a      	str	r2, [r3, #0]
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	3310      	adds	r3, #16
 801852a:	4618      	mov	r0, r3
 801852c:	f000 fc06 	bl	8018d3c <_ZN19core_utils_CallbackIhvEC1Ev>
		this->address = address;
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	79fa      	ldrb	r2, [r7, #7]
 8018534:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	68fa      	ldr	r2, [r7, #12]
 801853e:	7b11      	ldrb	r1, [r2, #12]
 8018540:	68fa      	ldr	r2, [r7, #12]
 8018542:	68b8      	ldr	r0, [r7, #8]
 8018544:	4798      	blx	r3
		this->data = data;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	683a      	ldr	r2, [r7, #0]
 801854a:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2203      	movs	r2, #3
 8018550:	735a      	strb	r2, [r3, #13]
	}
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	4618      	mov	r0, r3
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	08025080 	.word	0x08025080

08018560 <_ZN24core_utils_RegisterEntryIffEC1EP11RegisterMaphPf>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018560:	b580      	push	{r7, lr}
 8018562:	b084      	sub	sp, #16
 8018564:	af00      	add	r7, sp, #0
 8018566:	60f8      	str	r0, [r7, #12]
 8018568:	60b9      	str	r1, [r7, #8]
 801856a:	603b      	str	r3, [r7, #0]
 801856c:	4613      	mov	r3, r2
 801856e:	71fb      	strb	r3, [r7, #7]
			input_type *data) {
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	4618      	mov	r0, r3
 8018574:	f7ff fac0 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018578:	4a10      	ldr	r2, [pc, #64]	@ (80185bc <_ZN24core_utils_RegisterEntryIffEC1EP11RegisterMaphPf+0x5c>)
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	601a      	str	r2, [r3, #0]
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	2200      	movs	r2, #0
 8018582:	611a      	str	r2, [r3, #16]
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	3318      	adds	r3, #24
 8018588:	4618      	mov	r0, r3
 801858a:	f000 fbf5 	bl	8018d78 <_ZN19core_utils_CallbackIffEC1Ev>
		this->address = address;
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	79fa      	ldrb	r2, [r7, #7]
 8018592:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	68fa      	ldr	r2, [r7, #12]
 801859c:	7d11      	ldrb	r1, [r2, #20]
 801859e:	68fa      	ldr	r2, [r7, #12]
 80185a0:	68b8      	ldr	r0, [r7, #8]
 80185a2:	4798      	blx	r3
		this->data = data;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	683a      	ldr	r2, [r7, #0]
 80185a8:	611a      	str	r2, [r3, #16]
		this->type = REGISTER_ENTRY_TYPE_READWRITEABLE;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	2204      	movs	r2, #4
 80185ae:	755a      	strb	r2, [r3, #21]
	}
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	4618      	mov	r0, r3
 80185b4:	3710      	adds	r7, #16
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
 80185ba:	bf00      	nop
 80185bc:	0802504c 	.word	0x0802504c

080185c0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvEC1EP11RegisterMaphPS0_>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b084      	sub	sp, #16
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	60f8      	str	r0, [r7, #12]
 80185c8:	60b9      	str	r1, [r7, #8]
 80185ca:	603b      	str	r3, [r7, #0]
 80185cc:	4613      	mov	r3, r2
 80185ce:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	4618      	mov	r0, r3
 80185d4:	f7ff fa90 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80185d8:	4a0e      	ldr	r2, [pc, #56]	@ (8018614 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvEC1EP11RegisterMaphPS0_+0x54>)
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	601a      	str	r2, [r3, #0]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	3310      	adds	r3, #16
 80185e2:	4618      	mov	r0, r3
 80185e4:	f000 fbe6 	bl	8018db4 <_ZN19core_utils_CallbackI20twipr_control_mode_tvEC1Ev>
		this->address = address;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	79fa      	ldrb	r2, [r7, #7]
 80185ec:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	68fa      	ldr	r2, [r7, #12]
 80185f6:	7b11      	ldrb	r1, [r2, #12]
 80185f8:	68fa      	ldr	r2, [r7, #12]
 80185fa:	68b8      	ldr	r0, [r7, #8]
 80185fc:	4798      	blx	r3
		this->data = data;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	683a      	ldr	r2, [r7, #0]
 8018602:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	2203      	movs	r2, #3
 8018608:	735a      	strb	r2, [r3, #13]
	}
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	4618      	mov	r0, r3
 801860e:	3710      	adds	r7, #16
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	08025018 	.word	0x08025018

08018618 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSEOS1_>:
class core_utils_Callback: public Callback {
 8018618:	b5b0      	push	{r4, r5, r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	683a      	ldr	r2, [r7, #0]
 8018626:	4611      	mov	r1, r2
 8018628:	4618      	mov	r0, r3
 801862a:	f7ff fa75 	bl	8017b18 <_ZN8CallbackaSEOS_>
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	791a      	ldrb	r2, [r3, #4]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	711a      	strb	r2, [r3, #4]
 8018636:	687a      	ldr	r2, [r7, #4]
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	f102 0408 	add.w	r4, r2, #8
 801863e:	f103 0508 	add.w	r5, r3, #8
 8018642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018646:	e895 0003 	ldmia.w	r5, {r0, r1}
 801864a:	e884 0003 	stmia.w	r4, {r0, r1}
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	4618      	mov	r0, r3
 8018652:	3708      	adds	r7, #8
 8018654:	46bd      	mov	sp, r7
 8018656:	bdb0      	pop	{r4, r5, r7, pc}

08018658 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018658:	b590      	push	{r4, r7, lr}
 801865a:	b08d      	sub	sp, #52	@ 0x34
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	603b      	str	r3, [r7, #0]
 8018664:	4613      	mov	r3, r2
 8018666:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	4618      	mov	r0, r3
 801866c:	f7ff fa44 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018670:	4a17      	ldr	r2, [pc, #92]	@ (80186d0 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhS0_E+0x78>)
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	601a      	str	r2, [r3, #0]
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	2200      	movs	r2, #0
 801867a:	609a      	str	r2, [r3, #8]
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	3310      	adds	r3, #16
 8018680:	4618      	mov	r0, r3
 8018682:	f000 fbb5 	bl	8018df0 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>
		this->address = address;
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	79fa      	ldrb	r2, [r7, #7]
 801868a:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	68fa      	ldr	r2, [r7, #12]
 8018694:	7b11      	ldrb	r1, [r2, #12]
 8018696:	68fa      	ldr	r2, [r7, #12]
 8018698:	68b8      	ldr	r0, [r7, #8]
 801869a:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	f103 0410 	add.w	r4, r3, #16
 80186a2:	f107 0010 	add.w	r0, r7, #16
 80186a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80186aa:	cb0c      	ldmia	r3, {r2, r3}
 80186ac:	6839      	ldr	r1, [r7, #0]
 80186ae:	f000 fbbd 	bl	8018e2c <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 80186b2:	f107 0310 	add.w	r3, r7, #16
 80186b6:	4619      	mov	r1, r3
 80186b8:	4620      	mov	r0, r4
 80186ba:	f7ff ffad 	bl	8018618 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	2201      	movs	r2, #1
 80186c2:	735a      	strb	r2, [r3, #13]
	}
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	4618      	mov	r0, r3
 80186c8:	3734      	adds	r7, #52	@ 0x34
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd90      	pop	{r4, r7, pc}
 80186ce:	bf00      	nop
 80186d0:	08024fe4 	.word	0x08024fe4

080186d4 <_ZN19core_utils_CallbackIhA8_fEaSEOS1_>:
 80186d4:	b5b0      	push	{r4, r5, r7, lr}
 80186d6:	b082      	sub	sp, #8
 80186d8:	af00      	add	r7, sp, #0
 80186da:	6078      	str	r0, [r7, #4]
 80186dc:	6039      	str	r1, [r7, #0]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	683a      	ldr	r2, [r7, #0]
 80186e2:	4611      	mov	r1, r2
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7ff fa17 	bl	8017b18 <_ZN8CallbackaSEOS_>
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	791a      	ldrb	r2, [r3, #4]
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	711a      	strb	r2, [r3, #4]
 80186f2:	687a      	ldr	r2, [r7, #4]
 80186f4:	683b      	ldr	r3, [r7, #0]
 80186f6:	f102 0408 	add.w	r4, r2, #8
 80186fa:	f103 0508 	add.w	r5, r3, #8
 80186fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018702:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018706:	e884 0003 	stmia.w	r4, {r0, r1}
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	4618      	mov	r0, r3
 801870e:	3708      	adds	r7, #8
 8018710:	46bd      	mov	sp, r7
 8018712:	bdb0      	pop	{r4, r5, r7, pc}

08018714 <_ZN24core_utils_RegisterEntryIhA8_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018714:	b590      	push	{r4, r7, lr}
 8018716:	b08d      	sub	sp, #52	@ 0x34
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	603b      	str	r3, [r7, #0]
 8018720:	4613      	mov	r3, r2
 8018722:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	4618      	mov	r0, r3
 8018728:	f7ff f9e6 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 801872c:	4a18      	ldr	r2, [pc, #96]	@ (8018790 <_ZN24core_utils_RegisterEntryIhA8_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE+0x7c>)
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	601a      	str	r2, [r3, #0]
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2200      	movs	r2, #0
 8018736:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	3334      	adds	r3, #52	@ 0x34
 801873c:	4618      	mov	r0, r3
 801873e:	f000 fba9 	bl	8018e94 <_ZN19core_utils_CallbackIhA8_fEC1Ev>
		this->address = address;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	79fa      	ldrb	r2, [r7, #7]
 8018746:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		map->addEntry(this->address, this);
 801874a:	68bb      	ldr	r3, [r7, #8]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	68fa      	ldr	r2, [r7, #12]
 8018752:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 8018756:	68fa      	ldr	r2, [r7, #12]
 8018758:	68b8      	ldr	r0, [r7, #8]
 801875a:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8018762:	f107 0010 	add.w	r0, r7, #16
 8018766:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801876a:	cb0c      	ldmia	r3, {r2, r3}
 801876c:	6839      	ldr	r1, [r7, #0]
 801876e:	f000 fbaf 	bl	8018ed0 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8018772:	f107 0310 	add.w	r3, r7, #16
 8018776:	4619      	mov	r1, r3
 8018778:	4620      	mov	r0, r4
 801877a:	f7ff ffab 	bl	80186d4 <_ZN19core_utils_CallbackIhA8_fEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	2201      	movs	r2, #1
 8018782:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	4618      	mov	r0, r3
 801878a:	3734      	adds	r7, #52	@ 0x34
 801878c:	46bd      	mov	sp, r7
 801878e:	bd90      	pop	{r4, r7, pc}
 8018790:	08024fb0 	.word	0x08024fb0

08018794 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 8018794:	b5b0      	push	{r4, r5, r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	6039      	str	r1, [r7, #0]
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	683a      	ldr	r2, [r7, #0]
 80187a2:	4611      	mov	r1, r2
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7ff f9b7 	bl	8017b18 <_ZN8CallbackaSEOS_>
 80187aa:	683b      	ldr	r3, [r7, #0]
 80187ac:	791a      	ldrb	r2, [r3, #4]
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	711a      	strb	r2, [r3, #4]
 80187b2:	687a      	ldr	r2, [r7, #4]
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	f102 0408 	add.w	r4, r2, #8
 80187ba:	f103 0508 	add.w	r5, r3, #8
 80187be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80187c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80187c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	4618      	mov	r0, r3
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bdb0      	pop	{r4, r5, r7, pc}

080187d4 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 80187d4:	b590      	push	{r4, r7, lr}
 80187d6:	b08d      	sub	sp, #52	@ 0x34
 80187d8:	af00      	add	r7, sp, #0
 80187da:	60f8      	str	r0, [r7, #12]
 80187dc:	60b9      	str	r1, [r7, #8]
 80187de:	603b      	str	r3, [r7, #0]
 80187e0:	4613      	mov	r3, r2
 80187e2:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7ff f986 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80187ec:	4a17      	ldr	r2, [pc, #92]	@ (801884c <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	601a      	str	r2, [r3, #0]
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	2200      	movs	r2, #0
 80187f6:	611a      	str	r2, [r3, #16]
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	3318      	adds	r3, #24
 80187fc:	4618      	mov	r0, r3
 80187fe:	f000 fb9b 	bl	8018f38 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1Ev>
		this->address = address;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	79fa      	ldrb	r2, [r7, #7]
 8018806:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	68fa      	ldr	r2, [r7, #12]
 8018810:	7d11      	ldrb	r1, [r2, #20]
 8018812:	68fa      	ldr	r2, [r7, #12]
 8018814:	68b8      	ldr	r0, [r7, #8]
 8018816:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	f103 0418 	add.w	r4, r3, #24
 801881e:	f107 0010 	add.w	r0, r7, #16
 8018822:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018826:	cb0c      	ldmia	r3, {r2, r3}
 8018828:	6839      	ldr	r1, [r7, #0]
 801882a:	f000 fba3 	bl	8018f74 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 801882e:	f107 0310 	add.w	r3, r7, #16
 8018832:	4619      	mov	r1, r3
 8018834:	4620      	mov	r0, r4
 8018836:	f7ff ffad 	bl	8018794 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2201      	movs	r2, #1
 801883e:	755a      	strb	r2, [r3, #21]
	}
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	4618      	mov	r0, r3
 8018844:	3734      	adds	r7, #52	@ 0x34
 8018846:	46bd      	mov	sp, r7
 8018848:	bd90      	pop	{r4, r7, pc}
 801884a:	bf00      	nop
 801884c:	08024f7c 	.word	0x08024f7c

08018850 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEaSEOS1_>:
 8018850:	b5b0      	push	{r4, r5, r7, lr}
 8018852:	b082      	sub	sp, #8
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
 8018858:	6039      	str	r1, [r7, #0]
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	683a      	ldr	r2, [r7, #0]
 801885e:	4611      	mov	r1, r2
 8018860:	4618      	mov	r0, r3
 8018862:	f7ff f959 	bl	8017b18 <_ZN8CallbackaSEOS_>
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	791a      	ldrb	r2, [r3, #4]
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	711a      	strb	r2, [r3, #4]
 801886e:	687a      	ldr	r2, [r7, #4]
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	f102 0408 	add.w	r4, r2, #8
 8018876:	f103 0508 	add.w	r5, r3, #8
 801887a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801887c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801887e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018882:	e884 0003 	stmia.w	r4, {r0, r1}
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	4618      	mov	r0, r3
 801888a:	3708      	adds	r7, #8
 801888c:	46bd      	mov	sp, r7
 801888e:	bdb0      	pop	{r4, r5, r7, pc}

08018890 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018890:	b590      	push	{r4, r7, lr}
 8018892:	b08d      	sub	sp, #52	@ 0x34
 8018894:	af00      	add	r7, sp, #0
 8018896:	60f8      	str	r0, [r7, #12]
 8018898:	60b9      	str	r1, [r7, #8]
 801889a:	603b      	str	r3, [r7, #0]
 801889c:	4613      	mov	r3, r2
 801889e:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7ff f928 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 80188a8:	4a17      	ldr	r2, [pc, #92]	@ (8018908 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	601a      	str	r2, [r3, #0]
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	2200      	movs	r2, #0
 80188b2:	611a      	str	r2, [r3, #16]
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	3318      	adds	r3, #24
 80188b8:	4618      	mov	r0, r3
 80188ba:	f000 fb8f 	bl	8018fdc <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1Ev>
		this->address = address;
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	79fa      	ldrb	r2, [r7, #7]
 80188c2:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	68fa      	ldr	r2, [r7, #12]
 80188cc:	7d11      	ldrb	r1, [r2, #20]
 80188ce:	68fa      	ldr	r2, [r7, #12]
 80188d0:	68b8      	ldr	r0, [r7, #8]
 80188d2:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	f103 0418 	add.w	r4, r3, #24
 80188da:	f107 0010 	add.w	r0, r7, #16
 80188de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80188e2:	cb0c      	ldmia	r3, {r2, r3}
 80188e4:	6839      	ldr	r1, [r7, #0]
 80188e6:	f000 fb97 	bl	8019018 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 80188ea:	f107 0310 	add.w	r3, r7, #16
 80188ee:	4619      	mov	r1, r3
 80188f0:	4620      	mov	r0, r4
 80188f2:	f7ff ffad 	bl	8018850 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	2201      	movs	r2, #1
 80188fa:	755a      	strb	r2, [r3, #21]
	}
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	4618      	mov	r0, r3
 8018900:	3734      	adds	r7, #52	@ 0x34
 8018902:	46bd      	mov	sp, r7
 8018904:	bd90      	pop	{r4, r7, pc}
 8018906:	bf00      	nop
 8018908:	08024f48 	.word	0x08024f48

0801890c <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEaSEOS1_>:
 801890c:	b5b0      	push	{r4, r5, r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
 8018914:	6039      	str	r1, [r7, #0]
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	683a      	ldr	r2, [r7, #0]
 801891a:	4611      	mov	r1, r2
 801891c:	4618      	mov	r0, r3
 801891e:	f7ff f8fb 	bl	8017b18 <_ZN8CallbackaSEOS_>
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	791a      	ldrb	r2, [r3, #4]
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	711a      	strb	r2, [r3, #4]
 801892a:	687a      	ldr	r2, [r7, #4]
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	f102 0408 	add.w	r4, r2, #8
 8018932:	f103 0508 	add.w	r5, r3, #8
 8018936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801893a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801893e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	4618      	mov	r0, r3
 8018946:	3708      	adds	r7, #8
 8018948:	46bd      	mov	sp, r7
 801894a:	bdb0      	pop	{r4, r5, r7, pc}

0801894c <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 801894c:	b590      	push	{r4, r7, lr}
 801894e:	b08d      	sub	sp, #52	@ 0x34
 8018950:	af00      	add	r7, sp, #0
 8018952:	60f8      	str	r0, [r7, #12]
 8018954:	60b9      	str	r1, [r7, #8]
 8018956:	603b      	str	r3, [r7, #0]
 8018958:	4613      	mov	r3, r2
 801895a:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	4618      	mov	r0, r3
 8018960:	f7ff f8ca 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018964:	4a17      	ldr	r2, [pc, #92]	@ (80189c4 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	601a      	str	r2, [r3, #0]
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	2200      	movs	r2, #0
 801896e:	611a      	str	r2, [r3, #16]
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	3318      	adds	r3, #24
 8018974:	4618      	mov	r0, r3
 8018976:	f000 fb83 	bl	8019080 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1Ev>
		this->address = address;
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	79fa      	ldrb	r2, [r7, #7]
 801897e:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	68fa      	ldr	r2, [r7, #12]
 8018988:	7d11      	ldrb	r1, [r2, #20]
 801898a:	68fa      	ldr	r2, [r7, #12]
 801898c:	68b8      	ldr	r0, [r7, #8]
 801898e:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	f103 0418 	add.w	r4, r3, #24
 8018996:	f107 0010 	add.w	r0, r7, #16
 801899a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801899e:	cb0c      	ldmia	r3, {r2, r3}
 80189a0:	6839      	ldr	r1, [r7, #0]
 80189a2:	f000 fb8b 	bl	80190bc <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 80189a6:	f107 0310 	add.w	r3, r7, #16
 80189aa:	4619      	mov	r1, r3
 80189ac:	4620      	mov	r0, r4
 80189ae:	f7ff ffad 	bl	801890c <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	2201      	movs	r2, #1
 80189b6:	755a      	strb	r2, [r3, #21]
	}
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	4618      	mov	r0, r3
 80189bc:	3734      	adds	r7, #52	@ 0x34
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd90      	pop	{r4, r7, pc}
 80189c2:	bf00      	nop
 80189c4:	08024f14 	.word	0x08024f14

080189c8 <_ZN19core_utils_CallbackIhA3_fEaSEOS1_>:
class core_utils_Callback: public Callback {
 80189c8:	b5b0      	push	{r4, r5, r7, lr}
 80189ca:	b082      	sub	sp, #8
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	4611      	mov	r1, r2
 80189d8:	4618      	mov	r0, r3
 80189da:	f7ff f89d 	bl	8017b18 <_ZN8CallbackaSEOS_>
 80189de:	683b      	ldr	r3, [r7, #0]
 80189e0:	791a      	ldrb	r2, [r3, #4]
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	711a      	strb	r2, [r3, #4]
 80189e6:	687a      	ldr	r2, [r7, #4]
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	f102 0408 	add.w	r4, r2, #8
 80189ee:	f103 0508 	add.w	r5, r3, #8
 80189f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80189fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	4618      	mov	r0, r3
 8018a02:	3708      	adds	r7, #8
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bdb0      	pop	{r4, r5, r7, pc}

08018a08 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018a08:	b590      	push	{r4, r7, lr}
 8018a0a:	b08d      	sub	sp, #52	@ 0x34
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	60f8      	str	r0, [r7, #12]
 8018a10:	60b9      	str	r1, [r7, #8]
 8018a12:	603b      	str	r3, [r7, #0]
 8018a14:	4613      	mov	r3, r2
 8018a16:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f7ff f86c 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018a20:	4a17      	ldr	r2, [pc, #92]	@ (8018a80 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE+0x78>)
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	601a      	str	r2, [r3, #0]
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	2200      	movs	r2, #0
 8018a2a:	619a      	str	r2, [r3, #24]
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	3320      	adds	r3, #32
 8018a30:	4618      	mov	r0, r3
 8018a32:	f000 fb77 	bl	8019124 <_ZN19core_utils_CallbackIhA3_fEC1Ev>
		this->address = address;
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	79fa      	ldrb	r2, [r7, #7]
 8018a3a:	771a      	strb	r2, [r3, #28]
		map->addEntry(this->address, this);
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	68fa      	ldr	r2, [r7, #12]
 8018a44:	7f11      	ldrb	r1, [r2, #28]
 8018a46:	68fa      	ldr	r2, [r7, #12]
 8018a48:	68b8      	ldr	r0, [r7, #8]
 8018a4a:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	f103 0420 	add.w	r4, r3, #32
 8018a52:	f107 0010 	add.w	r0, r7, #16
 8018a56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018a5a:	cb0c      	ldmia	r3, {r2, r3}
 8018a5c:	6839      	ldr	r1, [r7, #0]
 8018a5e:	f000 fb7f 	bl	8019160 <_ZN19core_utils_CallbackIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8018a62:	f107 0310 	add.w	r3, r7, #16
 8018a66:	4619      	mov	r1, r3
 8018a68:	4620      	mov	r0, r4
 8018a6a:	f7ff ffad 	bl	80189c8 <_ZN19core_utils_CallbackIhA3_fEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	2201      	movs	r2, #1
 8018a72:	775a      	strb	r2, [r3, #29]
	}
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	4618      	mov	r0, r3
 8018a78:	3734      	adds	r7, #52	@ 0x34
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd90      	pop	{r4, r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	08024ee0 	.word	0x08024ee0

08018a84 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEaSEOS1_>:
class core_utils_Callback<output_type, void> : public Callback {
 8018a84:	b5b0      	push	{r4, r5, r7, lr}
 8018a86:	b082      	sub	sp, #8
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
 8018a8c:	6039      	str	r1, [r7, #0]
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	683a      	ldr	r2, [r7, #0]
 8018a92:	4611      	mov	r1, r2
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7ff f83f 	bl	8017b18 <_ZN8CallbackaSEOS_>
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	791a      	ldrb	r2, [r3, #4]
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	711a      	strb	r2, [r3, #4]
 8018aa2:	687a      	ldr	r2, [r7, #4]
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	f102 0408 	add.w	r4, r2, #8
 8018aaa:	f103 0508 	add.w	r5, r3, #8
 8018aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018ab6:	e884 0003 	stmia.w	r4, {r0, r1}
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	4618      	mov	r0, r3
 8018abe:	3708      	adds	r7, #8
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bdb0      	pop	{r4, r5, r7, pc}

08018ac4 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FS0_vE>:

	/* --------------------------------------------------------------------------------------------------------- */
	template<typename cls>
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018ac4:	b590      	push	{r4, r7, lr}
 8018ac6:	b08d      	sub	sp, #52	@ 0x34
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	60f8      	str	r0, [r7, #12]
 8018acc:	60b9      	str	r1, [r7, #8]
 8018ace:	603b      	str	r3, [r7, #0]
 8018ad0:	4613      	mov	r3, r2
 8018ad2:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(void)) {
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7ff f80e 	bl	8017af8 <_ZN13RegisterEntryC1Ev>
 8018adc:	4a17      	ldr	r2, [pc, #92]	@ (8018b3c <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FS0_vE+0x78>)
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	601a      	str	r2, [r3, #0]
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	3348      	adds	r3, #72	@ 0x48
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f000 fb6e 	bl	80191c8 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1Ev>
		this->address = address;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	79fa      	ldrb	r2, [r7, #7]
 8018af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		map->addEntry(this->address, this);
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	68fa      	ldr	r2, [r7, #12]
 8018afc:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8018b00:	68fa      	ldr	r2, [r7, #12]
 8018b02:	68b8      	ldr	r0, [r7, #8]
 8018b04:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, void>(object, member);
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8018b0c:	f107 0010 	add.w	r0, r7, #16
 8018b10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018b14:	cb0c      	ldmia	r3, {r2, r3}
 8018b16:	6839      	ldr	r1, [r7, #0]
 8018b18:	f000 fb74 	bl	8019204 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>
 8018b1c:	f107 0310 	add.w	r3, r7, #16
 8018b20:	4619      	mov	r1, r3
 8018b22:	4620      	mov	r0, r4
 8018b24:	f7ff ffae 	bl	8018a84 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	2201      	movs	r2, #1
 8018b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	4618      	mov	r0, r3
 8018b34:	3734      	adds	r7, #52	@ 0x34
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd90      	pop	{r4, r7, pc}
 8018b3a:	bf00      	nop
 8018b3c:	08024eac 	.word	0x08024eac

08018b40 <_ZN19core_utils_CallbackI22twipr_firmware_state_tvEC1Ev>:
	core_utils_Callback() {
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b082      	sub	sp, #8
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7f9 fd76 	bl	801263c <_ZN8CallbackC1Ev>
 8018b50:	4a09      	ldr	r2, [pc, #36]	@ (8018b78 <_ZN19core_utils_CallbackI22twipr_firmware_state_tvEC1Ev+0x38>)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	601a      	str	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	2200      	movs	r2, #0
 8018b5a:	711a      	strb	r2, [r3, #4]
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	3308      	adds	r3, #8
 8018b60:	2100      	movs	r1, #0
 8018b62:	4618      	mov	r0, r3
 8018b64:	f000 fb82 	bl	801926c <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEC1EPFS0_vE>
		this->registered = 0;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	711a      	strb	r2, [r3, #4]
	}
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	4618      	mov	r0, r3
 8018b72:	3708      	adds	r7, #8
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bd80      	pop	{r7, pc}
 8018b78:	080251a8 	.word	0x080251a8

08018b7c <_ZN19core_utils_CallbackImvEC1Ev>:
	core_utils_Callback() {
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7f9 fd58 	bl	801263c <_ZN8CallbackC1Ev>
 8018b8c:	4a09      	ldr	r2, [pc, #36]	@ (8018bb4 <_ZN19core_utils_CallbackImvEC1Ev+0x38>)
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	601a      	str	r2, [r3, #0]
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	2200      	movs	r2, #0
 8018b96:	711a      	strb	r2, [r3, #4]
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	3308      	adds	r3, #8
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f000 fb72 	bl	8019288 <_ZN26core_utils_FunctionPointerImvEC1EPFmvE>
		this->registered = 0;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	711a      	strb	r2, [r3, #4]
	}
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	4618      	mov	r0, r3
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	08025174 	.word	0x08025174

08018bb8 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvEC1Ev>:
	core_utils_Callback() {
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7f9 fd3a 	bl	801263c <_ZN8CallbackC1Ev>
 8018bc8:	4a09      	ldr	r2, [pc, #36]	@ (8018bf0 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvEC1Ev+0x38>)
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	601a      	str	r2, [r3, #0]
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	711a      	strb	r2, [r3, #4]
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	3308      	adds	r3, #8
 8018bd8:	2100      	movs	r1, #0
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f000 fb62 	bl	80192a4 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEC1EPFS0_vE>
		this->registered = 0;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2200      	movs	r2, #0
 8018be4:	711a      	strb	r2, [r3, #4]
	}
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	4618      	mov	r0, r3
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	08025140 	.word	0x08025140

08018bf4 <_ZN19core_utils_CallbackIhhEC1Ev>:
	core_utils_Callback() {
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7f9 fd1c 	bl	801263c <_ZN8CallbackC1Ev>
 8018c04:	4a09      	ldr	r2, [pc, #36]	@ (8018c2c <_ZN19core_utils_CallbackIhhEC1Ev+0x38>)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	601a      	str	r2, [r3, #0]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	711a      	strb	r2, [r3, #4]
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	3308      	adds	r3, #8
 8018c14:	2100      	movs	r1, #0
 8018c16:	4618      	mov	r0, r3
 8018c18:	f000 fb52 	bl	80192c0 <_ZN26core_utils_FunctionPointerIhhEC1EPFhhE>
		this->registered = 0;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	711a      	strb	r2, [r3, #4]
	}
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	4618      	mov	r0, r3
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	0802510c 	.word	0x0802510c

08018c30 <_ZN19core_utils_CallbackIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 8018c30:	b5b0      	push	{r4, r5, r7, lr}
 8018c32:	b08a      	sub	sp, #40	@ 0x28
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	60f8      	str	r0, [r7, #12]
 8018c38:	60b9      	str	r1, [r7, #8]
 8018c3a:	4639      	mov	r1, r7
 8018c3c:	e881 000c 	stmia.w	r1, {r2, r3}
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	4618      	mov	r0, r3
 8018c44:	f7f9 fcfa 	bl	801263c <_ZN8CallbackC1Ev>
 8018c48:	4a12      	ldr	r2, [pc, #72]	@ (8018c94 <_ZN19core_utils_CallbackIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE+0x64>)
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	601a      	str	r2, [r3, #0]
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	2200      	movs	r2, #0
 8018c52:	711a      	strb	r2, [r3, #4]
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	3308      	adds	r3, #8
 8018c58:	2100      	movs	r1, #0
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f000 fb30 	bl	80192c0 <_ZN26core_utils_FunctionPointerIhhEC1EPFhhE>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 8018c60:	f107 0010 	add.w	r0, r7, #16
 8018c64:	463b      	mov	r3, r7
 8018c66:	cb0c      	ldmia	r3, {r2, r3}
 8018c68:	68b9      	ldr	r1, [r7, #8]
 8018c6a:	f000 fb37 	bl	80192dc <_ZN26core_utils_FunctionPointerIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	f103 0408 	add.w	r4, r3, #8
 8018c74:	f107 0510 	add.w	r5, r7, #16
 8018c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018c80:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2201      	movs	r2, #1
 8018c88:	711a      	strb	r2, [r3, #4]
	}
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3728      	adds	r7, #40	@ 0x28
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bdb0      	pop	{r4, r5, r7, pc}
 8018c94:	0802510c 	.word	0x0802510c

08018c98 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1Ev>:
	core_utils_Callback() {
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b082      	sub	sp, #8
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7f9 fcca 	bl	801263c <_ZN8CallbackC1Ev>
 8018ca8:	4a09      	ldr	r2, [pc, #36]	@ (8018cd0 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1Ev+0x38>)
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	601a      	str	r2, [r3, #0]
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	711a      	strb	r2, [r3, #4]
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	3308      	adds	r3, #8
 8018cb8:	2100      	movs	r1, #0
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f000 fb21 	bl	8019302 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1EPFvS0_E>
		this->registered = 0;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	711a      	strb	r2, [r3, #4]
	}
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4618      	mov	r0, r3
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}
 8018cd0:	080250d8 	.word	0x080250d8

08018cd4 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8018cd4:	b5b0      	push	{r4, r5, r7, lr}
 8018cd6:	b08a      	sub	sp, #40	@ 0x28
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	60f8      	str	r0, [r7, #12]
 8018cdc:	60b9      	str	r1, [r7, #8]
 8018cde:	4639      	mov	r1, r7
 8018ce0:	e881 000c 	stmia.w	r1, {r2, r3}
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7f9 fca8 	bl	801263c <_ZN8CallbackC1Ev>
 8018cec:	4a12      	ldr	r2, [pc, #72]	@ (8018d38 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E+0x64>)
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	601a      	str	r2, [r3, #0]
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	711a      	strb	r2, [r3, #4]
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	3308      	adds	r3, #8
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f000 faff 	bl	8019302 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8018d04:	f107 0010 	add.w	r0, r7, #16
 8018d08:	463b      	mov	r3, r7
 8018d0a:	cb0c      	ldmia	r3, {r2, r3}
 8018d0c:	68b9      	ldr	r1, [r7, #8]
 8018d0e:	f000 fb06 	bl	801931e <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	f103 0408 	add.w	r4, r3, #8
 8018d18:	f107 0510 	add.w	r5, r7, #16
 8018d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d24:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2201      	movs	r2, #1
 8018d2c:	711a      	strb	r2, [r3, #4]
	}
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	4618      	mov	r0, r3
 8018d32:	3728      	adds	r7, #40	@ 0x28
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bdb0      	pop	{r4, r5, r7, pc}
 8018d38:	080250d8 	.word	0x080250d8

08018d3c <_ZN19core_utils_CallbackIhvEC1Ev>:
	core_utils_Callback() {
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b082      	sub	sp, #8
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	4618      	mov	r0, r3
 8018d48:	f7f9 fc78 	bl	801263c <_ZN8CallbackC1Ev>
 8018d4c:	4a09      	ldr	r2, [pc, #36]	@ (8018d74 <_ZN19core_utils_CallbackIhvEC1Ev+0x38>)
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	601a      	str	r2, [r3, #0]
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	2200      	movs	r2, #0
 8018d56:	711a      	strb	r2, [r3, #4]
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	3308      	adds	r3, #8
 8018d5c:	2100      	movs	r1, #0
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f000 faf0 	bl	8019344 <_ZN26core_utils_FunctionPointerIhvEC1EPFhvE>
		this->registered = 0;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	2200      	movs	r2, #0
 8018d68:	711a      	strb	r2, [r3, #4]
	}
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3708      	adds	r7, #8
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}
 8018d74:	080250a4 	.word	0x080250a4

08018d78 <_ZN19core_utils_CallbackIffEC1Ev>:
	core_utils_Callback() {
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	4618      	mov	r0, r3
 8018d84:	f7f9 fc5a 	bl	801263c <_ZN8CallbackC1Ev>
 8018d88:	4a09      	ldr	r2, [pc, #36]	@ (8018db0 <_ZN19core_utils_CallbackIffEC1Ev+0x38>)
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	601a      	str	r2, [r3, #0]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2200      	movs	r2, #0
 8018d92:	711a      	strb	r2, [r3, #4]
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	3308      	adds	r3, #8
 8018d98:	2100      	movs	r1, #0
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f000 fae0 	bl	8019360 <_ZN26core_utils_FunctionPointerIffEC1EPFffE>
		this->registered = 0;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	2200      	movs	r2, #0
 8018da4:	711a      	strb	r2, [r3, #4]
	}
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	4618      	mov	r0, r3
 8018daa:	3708      	adds	r7, #8
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}
 8018db0:	08025070 	.word	0x08025070

08018db4 <_ZN19core_utils_CallbackI20twipr_control_mode_tvEC1Ev>:
	core_utils_Callback() {
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b082      	sub	sp, #8
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7f9 fc3c 	bl	801263c <_ZN8CallbackC1Ev>
 8018dc4:	4a09      	ldr	r2, [pc, #36]	@ (8018dec <_ZN19core_utils_CallbackI20twipr_control_mode_tvEC1Ev+0x38>)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	601a      	str	r2, [r3, #0]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	711a      	strb	r2, [r3, #4]
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	3308      	adds	r3, #8
 8018dd4:	2100      	movs	r1, #0
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f000 fad0 	bl	801937c <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEC1EPFS0_vE>
		this->registered = 0;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2200      	movs	r2, #0
 8018de0:	711a      	strb	r2, [r3, #4]
	}
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	4618      	mov	r0, r3
 8018de6:	3708      	adds	r7, #8
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	0802503c 	.word	0x0802503c

08018df0 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>:
	core_utils_Callback() {
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7f9 fc1e 	bl	801263c <_ZN8CallbackC1Ev>
 8018e00:	4a09      	ldr	r2, [pc, #36]	@ (8018e28 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev+0x38>)
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	601a      	str	r2, [r3, #0]
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	2200      	movs	r2, #0
 8018e0a:	711a      	strb	r2, [r3, #4]
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	3308      	adds	r3, #8
 8018e10:	2100      	movs	r1, #0
 8018e12:	4618      	mov	r0, r3
 8018e14:	f000 fac0 	bl	8019398 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		this->registered = 0;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	711a      	strb	r2, [r3, #4]
	}
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	4618      	mov	r0, r3
 8018e22:	3708      	adds	r7, #8
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}
 8018e28:	08025008 	.word	0x08025008

08018e2c <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 8018e2c:	b5b0      	push	{r4, r5, r7, lr}
 8018e2e:	b08a      	sub	sp, #40	@ 0x28
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	60f8      	str	r0, [r7, #12]
 8018e34:	60b9      	str	r1, [r7, #8]
 8018e36:	4639      	mov	r1, r7
 8018e38:	e881 000c 	stmia.w	r1, {r2, r3}
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f7f9 fbfc 	bl	801263c <_ZN8CallbackC1Ev>
 8018e44:	4a12      	ldr	r2, [pc, #72]	@ (8018e90 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	601a      	str	r2, [r3, #0]
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	711a      	strb	r2, [r3, #4]
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	3308      	adds	r3, #8
 8018e54:	2100      	movs	r1, #0
 8018e56:	4618      	mov	r0, r3
 8018e58:	f000 fa9e 	bl	8019398 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 8018e5c:	f107 0010 	add.w	r0, r7, #16
 8018e60:	463b      	mov	r3, r7
 8018e62:	cb0c      	ldmia	r3, {r2, r3}
 8018e64:	68b9      	ldr	r1, [r7, #8]
 8018e66:	f000 faa5 	bl	80193b4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	f103 0408 	add.w	r4, r3, #8
 8018e70:	f107 0510 	add.w	r5, r7, #16
 8018e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018e7c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	2201      	movs	r2, #1
 8018e84:	711a      	strb	r2, [r3, #4]
	}
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3728      	adds	r7, #40	@ 0x28
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e90:	08025008 	.word	0x08025008

08018e94 <_ZN19core_utils_CallbackIhA8_fEC1Ev>:
	core_utils_Callback() {
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b082      	sub	sp, #8
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f7f9 fbcc 	bl	801263c <_ZN8CallbackC1Ev>
 8018ea4:	4a09      	ldr	r2, [pc, #36]	@ (8018ecc <_ZN19core_utils_CallbackIhA8_fEC1Ev+0x38>)
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	601a      	str	r2, [r3, #0]
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2200      	movs	r2, #0
 8018eae:	711a      	strb	r2, [r3, #4]
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	3308      	adds	r3, #8
 8018eb4:	2100      	movs	r1, #0
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f000 fa8f 	bl	80193da <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		this->registered = 0;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	711a      	strb	r2, [r3, #4]
	}
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3708      	adds	r7, #8
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}
 8018ecc:	08024fd4 	.word	0x08024fd4

08018ed0 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 8018ed0:	b5b0      	push	{r4, r5, r7, lr}
 8018ed2:	b08a      	sub	sp, #40	@ 0x28
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	60f8      	str	r0, [r7, #12]
 8018ed8:	60b9      	str	r1, [r7, #8]
 8018eda:	4639      	mov	r1, r7
 8018edc:	e881 000c 	stmia.w	r1, {r2, r3}
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	f7f9 fbaa 	bl	801263c <_ZN8CallbackC1Ev>
 8018ee8:	4a12      	ldr	r2, [pc, #72]	@ (8018f34 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	601a      	str	r2, [r3, #0]
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	711a      	strb	r2, [r3, #4]
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	3308      	adds	r3, #8
 8018ef8:	2100      	movs	r1, #0
 8018efa:	4618      	mov	r0, r3
 8018efc:	f000 fa6d 	bl	80193da <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 8018f00:	f107 0010 	add.w	r0, r7, #16
 8018f04:	463b      	mov	r3, r7
 8018f06:	cb0c      	ldmia	r3, {r2, r3}
 8018f08:	68b9      	ldr	r1, [r7, #8]
 8018f0a:	f000 fa74 	bl	80193f6 <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	f103 0408 	add.w	r4, r3, #8
 8018f14:	f107 0510 	add.w	r5, r7, #16
 8018f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018f20:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2201      	movs	r2, #1
 8018f28:	711a      	strb	r2, [r3, #4]
	}
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	3728      	adds	r7, #40	@ 0x28
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bdb0      	pop	{r4, r5, r7, pc}
 8018f34:	08024fd4 	.word	0x08024fd4

08018f38 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1Ev>:
	core_utils_Callback() {
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b082      	sub	sp, #8
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7f9 fb7a 	bl	801263c <_ZN8CallbackC1Ev>
 8018f48:	4a09      	ldr	r2, [pc, #36]	@ (8018f70 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1Ev+0x38>)
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	601a      	str	r2, [r3, #0]
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	2200      	movs	r2, #0
 8018f52:	711a      	strb	r2, [r3, #4]
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	3308      	adds	r3, #8
 8018f58:	2100      	movs	r1, #0
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f000 fa5e 	bl	801941c <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1EPFvS0_E>
		this->registered = 0;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2200      	movs	r2, #0
 8018f64:	711a      	strb	r2, [r3, #4]
	}
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3708      	adds	r7, #8
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}
 8018f70:	08024fa0 	.word	0x08024fa0

08018f74 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8018f74:	b5b0      	push	{r4, r5, r7, lr}
 8018f76:	b08a      	sub	sp, #40	@ 0x28
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	4639      	mov	r1, r7
 8018f80:	e881 000c 	stmia.w	r1, {r2, r3}
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7f9 fb58 	bl	801263c <_ZN8CallbackC1Ev>
 8018f8c:	4a12      	ldr	r2, [pc, #72]	@ (8018fd8 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	601a      	str	r2, [r3, #0]
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	2200      	movs	r2, #0
 8018f96:	711a      	strb	r2, [r3, #4]
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	3308      	adds	r3, #8
 8018f9c:	2100      	movs	r1, #0
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f000 fa3c 	bl	801941c <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8018fa4:	f107 0010 	add.w	r0, r7, #16
 8018fa8:	463b      	mov	r3, r7
 8018faa:	cb0c      	ldmia	r3, {r2, r3}
 8018fac:	68b9      	ldr	r1, [r7, #8]
 8018fae:	f000 fa43 	bl	8019438 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	f103 0408 	add.w	r4, r3, #8
 8018fb8:	f107 0510 	add.w	r5, r7, #16
 8018fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018fc4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	2201      	movs	r2, #1
 8018fcc:	711a      	strb	r2, [r3, #4]
	}
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	3728      	adds	r7, #40	@ 0x28
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8018fd8:	08024fa0 	.word	0x08024fa0

08018fdc <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1Ev>:
	core_utils_Callback() {
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7f9 fb28 	bl	801263c <_ZN8CallbackC1Ev>
 8018fec:	4a09      	ldr	r2, [pc, #36]	@ (8019014 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1Ev+0x38>)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	601a      	str	r2, [r3, #0]
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	711a      	strb	r2, [r3, #4]
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	3308      	adds	r3, #8
 8018ffc:	2100      	movs	r1, #0
 8018ffe:	4618      	mov	r0, r3
 8019000:	f000 fa2d 	bl	801945e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	2200      	movs	r2, #0
 8019008:	711a      	strb	r2, [r3, #4]
	}
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	4618      	mov	r0, r3
 801900e:	3708      	adds	r7, #8
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}
 8019014:	08024f6c 	.word	0x08024f6c

08019018 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8019018:	b5b0      	push	{r4, r5, r7, lr}
 801901a:	b08a      	sub	sp, #40	@ 0x28
 801901c:	af00      	add	r7, sp, #0
 801901e:	60f8      	str	r0, [r7, #12]
 8019020:	60b9      	str	r1, [r7, #8]
 8019022:	4639      	mov	r1, r7
 8019024:	e881 000c 	stmia.w	r1, {r2, r3}
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	4618      	mov	r0, r3
 801902c:	f7f9 fb06 	bl	801263c <_ZN8CallbackC1Ev>
 8019030:	4a12      	ldr	r2, [pc, #72]	@ (801907c <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	601a      	str	r2, [r3, #0]
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	2200      	movs	r2, #0
 801903a:	711a      	strb	r2, [r3, #4]
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	3308      	adds	r3, #8
 8019040:	2100      	movs	r1, #0
 8019042:	4618      	mov	r0, r3
 8019044:	f000 fa0b 	bl	801945e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8019048:	f107 0010 	add.w	r0, r7, #16
 801904c:	463b      	mov	r3, r7
 801904e:	cb0c      	ldmia	r3, {r2, r3}
 8019050:	68b9      	ldr	r1, [r7, #8]
 8019052:	f000 fa12 	bl	801947a <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	f103 0408 	add.w	r4, r3, #8
 801905c:	f107 0510 	add.w	r5, r7, #16
 8019060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019064:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019068:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	2201      	movs	r2, #1
 8019070:	711a      	strb	r2, [r3, #4]
	}
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	4618      	mov	r0, r3
 8019076:	3728      	adds	r7, #40	@ 0x28
 8019078:	46bd      	mov	sp, r7
 801907a:	bdb0      	pop	{r4, r5, r7, pc}
 801907c:	08024f6c 	.word	0x08024f6c

08019080 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1Ev>:
	core_utils_Callback() {
 8019080:	b580      	push	{r7, lr}
 8019082:	b082      	sub	sp, #8
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	4618      	mov	r0, r3
 801908c:	f7f9 fad6 	bl	801263c <_ZN8CallbackC1Ev>
 8019090:	4a09      	ldr	r2, [pc, #36]	@ (80190b8 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1Ev+0x38>)
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	601a      	str	r2, [r3, #0]
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2200      	movs	r2, #0
 801909a:	711a      	strb	r2, [r3, #4]
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	3308      	adds	r3, #8
 80190a0:	2100      	movs	r1, #0
 80190a2:	4618      	mov	r0, r3
 80190a4:	f000 f9fc 	bl	80194a0 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2200      	movs	r2, #0
 80190ac:	711a      	strb	r2, [r3, #4]
	}
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	4618      	mov	r0, r3
 80190b2:	3708      	adds	r7, #8
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	08024f38 	.word	0x08024f38

080190bc <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 80190bc:	b5b0      	push	{r4, r5, r7, lr}
 80190be:	b08a      	sub	sp, #40	@ 0x28
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	4639      	mov	r1, r7
 80190c8:	e881 000c 	stmia.w	r1, {r2, r3}
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	4618      	mov	r0, r3
 80190d0:	f7f9 fab4 	bl	801263c <_ZN8CallbackC1Ev>
 80190d4:	4a12      	ldr	r2, [pc, #72]	@ (8019120 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	601a      	str	r2, [r3, #0]
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	2200      	movs	r2, #0
 80190de:	711a      	strb	r2, [r3, #4]
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	3308      	adds	r3, #8
 80190e4:	2100      	movs	r1, #0
 80190e6:	4618      	mov	r0, r3
 80190e8:	f000 f9da 	bl	80194a0 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 80190ec:	f107 0010 	add.w	r0, r7, #16
 80190f0:	463b      	mov	r3, r7
 80190f2:	cb0c      	ldmia	r3, {r2, r3}
 80190f4:	68b9      	ldr	r1, [r7, #8]
 80190f6:	f000 f9e1 	bl	80194bc <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	f103 0408 	add.w	r4, r3, #8
 8019100:	f107 0510 	add.w	r5, r7, #16
 8019104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019108:	e895 0003 	ldmia.w	r5, {r0, r1}
 801910c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	2201      	movs	r2, #1
 8019114:	711a      	strb	r2, [r3, #4]
	}
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	4618      	mov	r0, r3
 801911a:	3728      	adds	r7, #40	@ 0x28
 801911c:	46bd      	mov	sp, r7
 801911e:	bdb0      	pop	{r4, r5, r7, pc}
 8019120:	08024f38 	.word	0x08024f38

08019124 <_ZN19core_utils_CallbackIhA3_fEC1Ev>:
	core_utils_Callback() {
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	4618      	mov	r0, r3
 8019130:	f7f9 fa84 	bl	801263c <_ZN8CallbackC1Ev>
 8019134:	4a09      	ldr	r2, [pc, #36]	@ (801915c <_ZN19core_utils_CallbackIhA3_fEC1Ev+0x38>)
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	601a      	str	r2, [r3, #0]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2200      	movs	r2, #0
 801913e:	711a      	strb	r2, [r3, #4]
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	3308      	adds	r3, #8
 8019144:	2100      	movs	r1, #0
 8019146:	4618      	mov	r0, r3
 8019148:	f000 f9cb 	bl	80194e2 <_ZN26core_utils_FunctionPointerIhA3_fEC1EPFhPfE>
		this->registered = 0;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2200      	movs	r2, #0
 8019150:	711a      	strb	r2, [r3, #4]
	}
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	4618      	mov	r0, r3
 8019156:	3708      	adds	r7, #8
 8019158:	46bd      	mov	sp, r7
 801915a:	bd80      	pop	{r7, pc}
 801915c:	08024f04 	.word	0x08024f04

08019160 <_ZN19core_utils_CallbackIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 8019160:	b5b0      	push	{r4, r5, r7, lr}
 8019162:	b08a      	sub	sp, #40	@ 0x28
 8019164:	af00      	add	r7, sp, #0
 8019166:	60f8      	str	r0, [r7, #12]
 8019168:	60b9      	str	r1, [r7, #8]
 801916a:	4639      	mov	r1, r7
 801916c:	e881 000c 	stmia.w	r1, {r2, r3}
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	4618      	mov	r0, r3
 8019174:	f7f9 fa62 	bl	801263c <_ZN8CallbackC1Ev>
 8019178:	4a12      	ldr	r2, [pc, #72]	@ (80191c4 <_ZN19core_utils_CallbackIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	601a      	str	r2, [r3, #0]
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	2200      	movs	r2, #0
 8019182:	711a      	strb	r2, [r3, #4]
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	3308      	adds	r3, #8
 8019188:	2100      	movs	r1, #0
 801918a:	4618      	mov	r0, r3
 801918c:	f000 f9a9 	bl	80194e2 <_ZN26core_utils_FunctionPointerIhA3_fEC1EPFhPfE>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 8019190:	f107 0010 	add.w	r0, r7, #16
 8019194:	463b      	mov	r3, r7
 8019196:	cb0c      	ldmia	r3, {r2, r3}
 8019198:	68b9      	ldr	r1, [r7, #8]
 801919a:	f000 f9b0 	bl	80194fe <_ZN26core_utils_FunctionPointerIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	f103 0408 	add.w	r4, r3, #8
 80191a4:	f107 0510 	add.w	r5, r7, #16
 80191a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80191b0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	2201      	movs	r2, #1
 80191b8:	711a      	strb	r2, [r3, #4]
	}
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	4618      	mov	r0, r3
 80191be:	3728      	adds	r7, #40	@ 0x28
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bdb0      	pop	{r4, r5, r7, pc}
 80191c4:	08024f04 	.word	0x08024f04

080191c8 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1Ev>:
	core_utils_Callback() {
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b082      	sub	sp, #8
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	4618      	mov	r0, r3
 80191d4:	f7f9 fa32 	bl	801263c <_ZN8CallbackC1Ev>
 80191d8:	4a09      	ldr	r2, [pc, #36]	@ (8019200 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1Ev+0x38>)
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	601a      	str	r2, [r3, #0]
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	2200      	movs	r2, #0
 80191e2:	711a      	strb	r2, [r3, #4]
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	3308      	adds	r3, #8
 80191e8:	2100      	movs	r1, #0
 80191ea:	4618      	mov	r0, r3
 80191ec:	f000 f99a 	bl	8019524 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1EPFS0_vE>
		this->registered = 0;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	2200      	movs	r2, #0
 80191f4:	711a      	strb	r2, [r3, #4]
	}
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	4618      	mov	r0, r3
 80191fa:	3708      	adds	r7, #8
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd80      	pop	{r7, pc}
 8019200:	08024ed0 	.word	0x08024ed0

08019204 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(void)) {
 8019204:	b5b0      	push	{r4, r5, r7, lr}
 8019206:	b08a      	sub	sp, #40	@ 0x28
 8019208:	af00      	add	r7, sp, #0
 801920a:	60f8      	str	r0, [r7, #12]
 801920c:	60b9      	str	r1, [r7, #8]
 801920e:	4639      	mov	r1, r7
 8019210:	e881 000c 	stmia.w	r1, {r2, r3}
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	4618      	mov	r0, r3
 8019218:	f7f9 fa10 	bl	801263c <_ZN8CallbackC1Ev>
 801921c:	4a12      	ldr	r2, [pc, #72]	@ (8019268 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE+0x64>)
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	601a      	str	r2, [r3, #0]
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	2200      	movs	r2, #0
 8019226:	711a      	strb	r2, [r3, #4]
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	3308      	adds	r3, #8
 801922c:	2100      	movs	r1, #0
 801922e:	4618      	mov	r0, r3
 8019230:	f000 f978 	bl	8019524 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1EPFS0_vE>
		_fp = core_utils_FunctionPointer<output_type, void>(object, member);
 8019234:	f107 0010 	add.w	r0, r7, #16
 8019238:	463b      	mov	r3, r7
 801923a:	cb0c      	ldmia	r3, {r2, r3}
 801923c:	68b9      	ldr	r1, [r7, #8]
 801923e:	f000 f97f 	bl	8019540 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	f103 0408 	add.w	r4, r3, #8
 8019248:	f107 0510 	add.w	r5, r7, #16
 801924c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801924e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019250:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019254:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2201      	movs	r2, #1
 801925c:	711a      	strb	r2, [r3, #4]
	}
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	4618      	mov	r0, r3
 8019262:	3728      	adds	r7, #40	@ 0x28
 8019264:	46bd      	mov	sp, r7
 8019266:	bdb0      	pop	{r4, r5, r7, pc}
 8019268:	08024ed0 	.word	0x08024ed0

0801926c <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
 8019274:	6039      	str	r1, [r7, #0]
        attach(function);
 8019276:	6839      	ldr	r1, [r7, #0]
 8019278:	6878      	ldr	r0, [r7, #4]
 801927a:	f000 f974 	bl	8019566 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE6attachEPFS0_vE>
    }
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	4618      	mov	r0, r3
 8019282:	3708      	adds	r7, #8
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <_ZN26core_utils_FunctionPointerImvEC1EPFmvE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019288:	b580      	push	{r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
 8019290:	6039      	str	r1, [r7, #0]
        attach(function);
 8019292:	6839      	ldr	r1, [r7, #0]
 8019294:	6878      	ldr	r0, [r7, #4]
 8019296:	f000 f977 	bl	8019588 <_ZN26core_utils_FunctionPointerImvE6attachEPFmvE>
    }
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	4618      	mov	r0, r3
 801929e:	3708      	adds	r7, #8
 80192a0:	46bd      	mov	sp, r7
 80192a2:	bd80      	pop	{r7, pc}

080192a4 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b082      	sub	sp, #8
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	6078      	str	r0, [r7, #4]
 80192ac:	6039      	str	r1, [r7, #0]
        attach(function);
 80192ae:	6839      	ldr	r1, [r7, #0]
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f000 f97a 	bl	80195aa <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE6attachEPFS0_vE>
    }
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	4618      	mov	r0, r3
 80192ba:	3708      	adds	r7, #8
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}

080192c0 <_ZN26core_utils_FunctionPointerIhhEC1EPFhhE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b082      	sub	sp, #8
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	6039      	str	r1, [r7, #0]
        attach(function);
 80192ca:	6839      	ldr	r1, [r7, #0]
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f000 f97d 	bl	80195cc <_ZN26core_utils_FunctionPointerIhhE6attachEPFhhE>
    }
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	4618      	mov	r0, r3
 80192d6:	3708      	adds	r7, #8
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}

080192dc <_ZN26core_utils_FunctionPointerIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	60b9      	str	r1, [r7, #8]
 80192e6:	4639      	mov	r1, r7
 80192e8:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80192ec:	463b      	mov	r3, r7
 80192ee:	cb0c      	ldmia	r3, {r2, r3}
 80192f0:	68b9      	ldr	r1, [r7, #8]
 80192f2:	68f8      	ldr	r0, [r7, #12]
 80192f4:	f000 f97c 	bl	80195f0 <_ZN26core_utils_FunctionPointerIhhE6attachI14TWIPR_FirmwareEEvPT_MS3_FhhE>
    }
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	4618      	mov	r0, r3
 80192fc:	3710      	adds	r7, #16
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}

08019302 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019302:	b580      	push	{r7, lr}
 8019304:	b082      	sub	sp, #8
 8019306:	af00      	add	r7, sp, #0
 8019308:	6078      	str	r0, [r7, #4]
 801930a:	6039      	str	r1, [r7, #0]
        attach(function);
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	f000 f98c 	bl	801962c <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachEPFvS0_E>
    }
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	4618      	mov	r0, r3
 8019318:	3708      	adds	r7, #8
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}

0801931e <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801931e:	b580      	push	{r7, lr}
 8019320:	b084      	sub	sp, #16
 8019322:	af00      	add	r7, sp, #0
 8019324:	60f8      	str	r0, [r7, #12]
 8019326:	60b9      	str	r1, [r7, #8]
 8019328:	4639      	mov	r1, r7
 801932a:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801932e:	463b      	mov	r3, r7
 8019330:	cb0c      	ldmia	r3, {r2, r3}
 8019332:	68b9      	ldr	r1, [r7, #8]
 8019334:	68f8      	ldr	r0, [r7, #12]
 8019336:	f000 f98b 	bl	8019650 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachI19RobotControl_BuzzerEEvPT_MS4_FvS0_E>
    }
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	4618      	mov	r0, r3
 801933e:	3710      	adds	r7, #16
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}

08019344 <_ZN26core_utils_FunctionPointerIhvEC1EPFhvE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019344:	b580      	push	{r7, lr}
 8019346:	b082      	sub	sp, #8
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
 801934c:	6039      	str	r1, [r7, #0]
        attach(function);
 801934e:	6839      	ldr	r1, [r7, #0]
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	f000 f99b 	bl	801968c <_ZN26core_utils_FunctionPointerIhvE6attachEPFhvE>
    }
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	4618      	mov	r0, r3
 801935a:	3708      	adds	r7, #8
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}

08019360 <_ZN26core_utils_FunctionPointerIffEC1EPFffE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	6039      	str	r1, [r7, #0]
        attach(function);
 801936a:	6839      	ldr	r1, [r7, #0]
 801936c:	6878      	ldr	r0, [r7, #4]
 801936e:	f000 f99e 	bl	80196ae <_ZN26core_utils_FunctionPointerIffE6attachEPFffE>
    }
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	4618      	mov	r0, r3
 8019376:	3708      	adds	r7, #8
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}

0801937c <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 801937c:	b580      	push	{r7, lr}
 801937e:	b082      	sub	sp, #8
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
        attach(function);
 8019386:	6839      	ldr	r1, [r7, #0]
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	f000 f9a1 	bl	80196d0 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE6attachEPFS0_vE>
    }
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	4618      	mov	r0, r3
 8019392:	3708      	adds	r7, #8
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}

08019398 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
 80193a0:	6039      	str	r1, [r7, #0]
        attach(function);
 80193a2:	6839      	ldr	r1, [r7, #0]
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f000 f9a4 	bl	80196f2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>
    }
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	4618      	mov	r0, r3
 80193ae:	3708      	adds	r7, #8
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}

080193b4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b084      	sub	sp, #16
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	4639      	mov	r1, r7
 80193c0:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80193c4:	463b      	mov	r3, r7
 80193c6:	cb0c      	ldmia	r3, {r2, r3}
 80193c8:	68b9      	ldr	r1, [r7, #8]
 80193ca:	68f8      	ldr	r0, [r7, #12]
 80193cc:	f000 f9a2 	bl	8019714 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	4618      	mov	r0, r3
 80193d4:	3710      	adds	r7, #16
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}

080193da <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80193da:	b580      	push	{r7, lr}
 80193dc:	b082      	sub	sp, #8
 80193de:	af00      	add	r7, sp, #0
 80193e0:	6078      	str	r0, [r7, #4]
 80193e2:	6039      	str	r1, [r7, #0]
        attach(function);
 80193e4:	6839      	ldr	r1, [r7, #0]
 80193e6:	6878      	ldr	r0, [r7, #4]
 80193e8:	f000 f9b2 	bl	8019750 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>
    }
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	4618      	mov	r0, r3
 80193f0:	3708      	adds	r7, #8
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}

080193f6 <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80193f6:	b580      	push	{r7, lr}
 80193f8:	b084      	sub	sp, #16
 80193fa:	af00      	add	r7, sp, #0
 80193fc:	60f8      	str	r0, [r7, #12]
 80193fe:	60b9      	str	r1, [r7, #8]
 8019400:	4639      	mov	r1, r7
 8019402:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019406:	463b      	mov	r3, r7
 8019408:	cb0c      	ldmia	r3, {r2, r3}
 801940a:	68b9      	ldr	r1, [r7, #8]
 801940c:	68f8      	ldr	r0, [r7, #12]
 801940e:	f000 f9b1 	bl	8019774 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	4618      	mov	r0, r3
 8019416:	3710      	adds	r7, #16
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}

0801941c <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801941c:	b580      	push	{r7, lr}
 801941e:	b082      	sub	sp, #8
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
 8019424:	6039      	str	r1, [r7, #0]
        attach(function);
 8019426:	6839      	ldr	r1, [r7, #0]
 8019428:	6878      	ldr	r0, [r7, #4]
 801942a:	f000 f9c1 	bl	80197b0 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachEPFvS0_E>
    }
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	4618      	mov	r0, r3
 8019432:	3708      	adds	r7, #8
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}

08019438 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019438:	b580      	push	{r7, lr}
 801943a:	b084      	sub	sp, #16
 801943c:	af00      	add	r7, sp, #0
 801943e:	60f8      	str	r0, [r7, #12]
 8019440:	60b9      	str	r1, [r7, #8]
 8019442:	4639      	mov	r1, r7
 8019444:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019448:	463b      	mov	r3, r7
 801944a:	cb0c      	ldmia	r3, {r2, r3}
 801944c:	68b9      	ldr	r1, [r7, #8]
 801944e:	68f8      	ldr	r0, [r7, #12]
 8019450:	f000 f9c0 	bl	80197d4 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	4618      	mov	r0, r3
 8019458:	3710      	adds	r7, #16
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}

0801945e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801945e:	b580      	push	{r7, lr}
 8019460:	b082      	sub	sp, #8
 8019462:	af00      	add	r7, sp, #0
 8019464:	6078      	str	r0, [r7, #4]
 8019466:	6039      	str	r1, [r7, #0]
        attach(function);
 8019468:	6839      	ldr	r1, [r7, #0]
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	f000 f9d0 	bl	8019810 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachEPFvS0_E>
    }
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	4618      	mov	r0, r3
 8019474:	3708      	adds	r7, #8
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}

0801947a <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801947a:	b580      	push	{r7, lr}
 801947c:	b084      	sub	sp, #16
 801947e:	af00      	add	r7, sp, #0
 8019480:	60f8      	str	r0, [r7, #12]
 8019482:	60b9      	str	r1, [r7, #8]
 8019484:	4639      	mov	r1, r7
 8019486:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801948a:	463b      	mov	r3, r7
 801948c:	cb0c      	ldmia	r3, {r2, r3}
 801948e:	68b9      	ldr	r1, [r7, #8]
 8019490:	68f8      	ldr	r0, [r7, #12]
 8019492:	f000 f9cf 	bl	8019834 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	4618      	mov	r0, r3
 801949a:	3710      	adds	r7, #16
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}

080194a0 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b082      	sub	sp, #8
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
 80194a8:	6039      	str	r1, [r7, #0]
        attach(function);
 80194aa:	6839      	ldr	r1, [r7, #0]
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f000 f9df 	bl	8019870 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachEPFvS0_E>
    }
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	4618      	mov	r0, r3
 80194b6:	3708      	adds	r7, #8
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}

080194bc <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80194bc:	b580      	push	{r7, lr}
 80194be:	b084      	sub	sp, #16
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	60f8      	str	r0, [r7, #12]
 80194c4:	60b9      	str	r1, [r7, #8]
 80194c6:	4639      	mov	r1, r7
 80194c8:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80194cc:	463b      	mov	r3, r7
 80194ce:	cb0c      	ldmia	r3, {r2, r3}
 80194d0:	68b9      	ldr	r1, [r7, #8]
 80194d2:	68f8      	ldr	r0, [r7, #12]
 80194d4:	f000 f9de 	bl	8019894 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	4618      	mov	r0, r3
 80194dc:	3710      	adds	r7, #16
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}

080194e2 <_ZN26core_utils_FunctionPointerIhA3_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80194e2:	b580      	push	{r7, lr}
 80194e4:	b082      	sub	sp, #8
 80194e6:	af00      	add	r7, sp, #0
 80194e8:	6078      	str	r0, [r7, #4]
 80194ea:	6039      	str	r1, [r7, #0]
        attach(function);
 80194ec:	6839      	ldr	r1, [r7, #0]
 80194ee:	6878      	ldr	r0, [r7, #4]
 80194f0:	f000 f9ee 	bl	80198d0 <_ZN26core_utils_FunctionPointerIhA3_fE6attachEPFhPfE>
    }
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	4618      	mov	r0, r3
 80194f8:	3708      	adds	r7, #8
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}

080194fe <_ZN26core_utils_FunctionPointerIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80194fe:	b580      	push	{r7, lr}
 8019500:	b084      	sub	sp, #16
 8019502:	af00      	add	r7, sp, #0
 8019504:	60f8      	str	r0, [r7, #12]
 8019506:	60b9      	str	r1, [r7, #8]
 8019508:	4639      	mov	r1, r7
 801950a:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801950e:	463b      	mov	r3, r7
 8019510:	cb0c      	ldmia	r3, {r2, r3}
 8019512:	68b9      	ldr	r1, [r7, #8]
 8019514:	68f8      	ldr	r0, [r7, #12]
 8019516:	f000 f9ed 	bl	80198f4 <_ZN26core_utils_FunctionPointerIhA3_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	4618      	mov	r0, r3
 801951e:	3710      	adds	r7, #16
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}

08019524 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019524:	b580      	push	{r7, lr}
 8019526:	b082      	sub	sp, #8
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
 801952c:	6039      	str	r1, [r7, #0]
        attach(function);
 801952e:	6839      	ldr	r1, [r7, #0]
 8019530:	6878      	ldr	r0, [r7, #4]
 8019532:	f000 f9fd 	bl	8019930 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachEPFS0_vE>
    }
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	4618      	mov	r0, r3
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8019540:	b580      	push	{r7, lr}
 8019542:	b084      	sub	sp, #16
 8019544:	af00      	add	r7, sp, #0
 8019546:	60f8      	str	r0, [r7, #12]
 8019548:	60b9      	str	r1, [r7, #8]
 801954a:	4639      	mov	r1, r7
 801954c:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019550:	463b      	mov	r3, r7
 8019552:	cb0c      	ldmia	r3, {r2, r3}
 8019554:	68b9      	ldr	r1, [r7, #8]
 8019556:	68f8      	ldr	r0, [r7, #12]
 8019558:	f000 f9fc 	bl	8019954 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachI20TWIPR_ControlManagerEEvPT_MS4_FS0_vE>
    }
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	4618      	mov	r0, r3
 8019560:	3710      	adds	r7, #16
 8019562:	46bd      	mov	sp, r7
 8019564:	bd80      	pop	{r7, pc}

08019566 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 8019566:	b480      	push	{r7}
 8019568:	b083      	sub	sp, #12
 801956a:	af00      	add	r7, sp, #0
 801956c:	6078      	str	r0, [r7, #4]
 801956e:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	683a      	ldr	r2, [r7, #0]
 8019574:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	2200      	movs	r2, #0
 801957a:	615a      	str	r2, [r3, #20]
    }
 801957c:	bf00      	nop
 801957e:	370c      	adds	r7, #12
 8019580:	46bd      	mov	sp, r7
 8019582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019586:	4770      	bx	lr

08019588 <_ZN26core_utils_FunctionPointerImvE6attachEPFmvE>:
    void attach(R (*function)(void)) {
 8019588:	b480      	push	{r7}
 801958a:	b083      	sub	sp, #12
 801958c:	af00      	add	r7, sp, #0
 801958e:	6078      	str	r0, [r7, #4]
 8019590:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	683a      	ldr	r2, [r7, #0]
 8019596:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2200      	movs	r2, #0
 801959c:	615a      	str	r2, [r3, #20]
    }
 801959e:	bf00      	nop
 80195a0:	370c      	adds	r7, #12
 80195a2:	46bd      	mov	sp, r7
 80195a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a8:	4770      	bx	lr

080195aa <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 80195aa:	b480      	push	{r7}
 80195ac:	b083      	sub	sp, #12
 80195ae:	af00      	add	r7, sp, #0
 80195b0:	6078      	str	r0, [r7, #4]
 80195b2:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	683a      	ldr	r2, [r7, #0]
 80195b8:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2200      	movs	r2, #0
 80195be:	615a      	str	r2, [r3, #20]
    }
 80195c0:	bf00      	nop
 80195c2:	370c      	adds	r7, #12
 80195c4:	46bd      	mov	sp, r7
 80195c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ca:	4770      	bx	lr

080195cc <_ZN26core_utils_FunctionPointerIhhE6attachEPFhhE>:
    void attach(R (*function)(A1)) {
 80195cc:	b480      	push	{r7}
 80195ce:	b083      	sub	sp, #12
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
 80195d4:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	683a      	ldr	r2, [r7, #0]
 80195da:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2200      	movs	r2, #0
 80195e0:	615a      	str	r2, [r3, #20]
    }
 80195e2:	bf00      	nop
 80195e4:	370c      	adds	r7, #12
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr
	...

080195f0 <_ZN26core_utils_FunctionPointerIhhE6attachI14TWIPR_FirmwareEEvPT_MS3_FhhE>:
    void attach(T *object, R (T::*member)(A1)) {
 80195f0:	b480      	push	{r7}
 80195f2:	b085      	sub	sp, #20
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	60f8      	str	r0, [r7, #12]
 80195f8:	60b9      	str	r1, [r7, #8]
 80195fa:	4639      	mov	r1, r7
 80195fc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	68ba      	ldr	r2, [r7, #8]
 8019604:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	3304      	adds	r3, #4
 801960a:	461a      	mov	r2, r3
 801960c:	463b      	mov	r3, r7
 801960e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019612:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	4a03      	ldr	r2, [pc, #12]	@ (8019628 <_ZN26core_utils_FunctionPointerIhhE6attachI14TWIPR_FirmwareEEvPT_MS3_FhhE+0x38>)
 801961a:	615a      	str	r2, [r3, #20]
    }
 801961c:	bf00      	nop
 801961e:	3714      	adds	r7, #20
 8019620:	46bd      	mov	sp, r7
 8019622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019626:	4770      	bx	lr
 8019628:	08019991 	.word	0x08019991

0801962c <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801962c:	b480      	push	{r7}
 801962e:	b083      	sub	sp, #12
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	683a      	ldr	r2, [r7, #0]
 801963a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2200      	movs	r2, #0
 8019640:	615a      	str	r2, [r3, #20]
    }
 8019642:	bf00      	nop
 8019644:	370c      	adds	r7, #12
 8019646:	46bd      	mov	sp, r7
 8019648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964c:	4770      	bx	lr
	...

08019650 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachI19RobotControl_BuzzerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8019650:	b480      	push	{r7}
 8019652:	b085      	sub	sp, #20
 8019654:	af00      	add	r7, sp, #0
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	4639      	mov	r1, r7
 801965c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	68ba      	ldr	r2, [r7, #8]
 8019664:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	3304      	adds	r3, #4
 801966a:	461a      	mov	r2, r3
 801966c:	463b      	mov	r3, r7
 801966e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019672:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	4a03      	ldr	r2, [pc, #12]	@ (8019688 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachI19RobotControl_BuzzerEEvPT_MS4_FvS0_E+0x38>)
 801967a:	615a      	str	r2, [r3, #20]
    }
 801967c:	bf00      	nop
 801967e:	3714      	adds	r7, #20
 8019680:	46bd      	mov	sp, r7
 8019682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019686:	4770      	bx	lr
 8019688:	080199eb 	.word	0x080199eb

0801968c <_ZN26core_utils_FunctionPointerIhvE6attachEPFhvE>:
    void attach(R (*function)(void)) {
 801968c:	b480      	push	{r7}
 801968e:	b083      	sub	sp, #12
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
 8019694:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	683a      	ldr	r2, [r7, #0]
 801969a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2200      	movs	r2, #0
 80196a0:	615a      	str	r2, [r3, #20]
    }
 80196a2:	bf00      	nop
 80196a4:	370c      	adds	r7, #12
 80196a6:	46bd      	mov	sp, r7
 80196a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ac:	4770      	bx	lr

080196ae <_ZN26core_utils_FunctionPointerIffE6attachEPFffE>:
    void attach(R (*function)(A1)) {
 80196ae:	b480      	push	{r7}
 80196b0:	b083      	sub	sp, #12
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
 80196b6:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	683a      	ldr	r2, [r7, #0]
 80196bc:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2200      	movs	r2, #0
 80196c2:	615a      	str	r2, [r3, #20]
    }
 80196c4:	bf00      	nop
 80196c6:	370c      	adds	r7, #12
 80196c8:	46bd      	mov	sp, r7
 80196ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ce:	4770      	bx	lr

080196d0 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 80196d0:	b480      	push	{r7}
 80196d2:	b083      	sub	sp, #12
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	683a      	ldr	r2, [r7, #0]
 80196de:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2200      	movs	r2, #0
 80196e4:	615a      	str	r2, [r3, #20]
    }
 80196e6:	bf00      	nop
 80196e8:	370c      	adds	r7, #12
 80196ea:	46bd      	mov	sp, r7
 80196ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f0:	4770      	bx	lr

080196f2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 80196f2:	b480      	push	{r7}
 80196f4:	b083      	sub	sp, #12
 80196f6:	af00      	add	r7, sp, #0
 80196f8:	6078      	str	r0, [r7, #4]
 80196fa:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	683a      	ldr	r2, [r7, #0]
 8019700:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	2200      	movs	r2, #0
 8019706:	615a      	str	r2, [r3, #20]
    }
 8019708:	bf00      	nop
 801970a:	370c      	adds	r7, #12
 801970c:	46bd      	mov	sp, r7
 801970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019712:	4770      	bx	lr

08019714 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8019714:	b480      	push	{r7}
 8019716:	b085      	sub	sp, #20
 8019718:	af00      	add	r7, sp, #0
 801971a:	60f8      	str	r0, [r7, #12]
 801971c:	60b9      	str	r1, [r7, #8]
 801971e:	4639      	mov	r1, r7
 8019720:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	68ba      	ldr	r2, [r7, #8]
 8019728:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	3304      	adds	r3, #4
 801972e:	461a      	mov	r2, r3
 8019730:	463b      	mov	r3, r7
 8019732:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019736:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	4a03      	ldr	r2, [pc, #12]	@ (801974c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 801973e:	615a      	str	r2, [r3, #20]
    }
 8019740:	bf00      	nop
 8019742:	3714      	adds	r7, #20
 8019744:	46bd      	mov	sp, r7
 8019746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974a:	4770      	bx	lr
 801974c:	08019a45 	.word	0x08019a45

08019750 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 8019750:	b480      	push	{r7}
 8019752:	b083      	sub	sp, #12
 8019754:	af00      	add	r7, sp, #0
 8019756:	6078      	str	r0, [r7, #4]
 8019758:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	683a      	ldr	r2, [r7, #0]
 801975e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	2200      	movs	r2, #0
 8019764:	615a      	str	r2, [r3, #20]
    }
 8019766:	bf00      	nop
 8019768:	370c      	adds	r7, #12
 801976a:	46bd      	mov	sp, r7
 801976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019770:	4770      	bx	lr
	...

08019774 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 8019774:	b480      	push	{r7}
 8019776:	b085      	sub	sp, #20
 8019778:	af00      	add	r7, sp, #0
 801977a:	60f8      	str	r0, [r7, #12]
 801977c:	60b9      	str	r1, [r7, #8]
 801977e:	4639      	mov	r1, r7
 8019780:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	68ba      	ldr	r2, [r7, #8]
 8019788:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	3304      	adds	r3, #4
 801978e:	461a      	mov	r2, r3
 8019790:	463b      	mov	r3, r7
 8019792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019796:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	4a03      	ldr	r2, [pc, #12]	@ (80197ac <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 801979e:	615a      	str	r2, [r3, #20]
    }
 80197a0:	bf00      	nop
 80197a2:	3714      	adds	r7, #20
 80197a4:	46bd      	mov	sp, r7
 80197a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197aa:	4770      	bx	lr
 80197ac:	08019a9f 	.word	0x08019a9f

080197b0 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 80197b0:	b480      	push	{r7}
 80197b2:	b083      	sub	sp, #12
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	683a      	ldr	r2, [r7, #0]
 80197be:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	2200      	movs	r2, #0
 80197c4:	615a      	str	r2, [r3, #20]
    }
 80197c6:	bf00      	nop
 80197c8:	370c      	adds	r7, #12
 80197ca:	46bd      	mov	sp, r7
 80197cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d0:	4770      	bx	lr
	...

080197d4 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80197d4:	b480      	push	{r7}
 80197d6:	b085      	sub	sp, #20
 80197d8:	af00      	add	r7, sp, #0
 80197da:	60f8      	str	r0, [r7, #12]
 80197dc:	60b9      	str	r1, [r7, #8]
 80197de:	4639      	mov	r1, r7
 80197e0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	68ba      	ldr	r2, [r7, #8]
 80197e8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	3304      	adds	r3, #4
 80197ee:	461a      	mov	r2, r3
 80197f0:	463b      	mov	r3, r7
 80197f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80197f6:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	4a03      	ldr	r2, [pc, #12]	@ (801980c <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 80197fe:	615a      	str	r2, [r3, #20]
    }
 8019800:	bf00      	nop
 8019802:	3714      	adds	r7, #20
 8019804:	46bd      	mov	sp, r7
 8019806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980a:	4770      	bx	lr
 801980c:	08019af5 	.word	0x08019af5

08019810 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 8019810:	b480      	push	{r7}
 8019812:	b083      	sub	sp, #12
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	683a      	ldr	r2, [r7, #0]
 801981e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	2200      	movs	r2, #0
 8019824:	615a      	str	r2, [r3, #20]
    }
 8019826:	bf00      	nop
 8019828:	370c      	adds	r7, #12
 801982a:	46bd      	mov	sp, r7
 801982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019830:	4770      	bx	lr
	...

08019834 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8019834:	b480      	push	{r7}
 8019836:	b085      	sub	sp, #20
 8019838:	af00      	add	r7, sp, #0
 801983a:	60f8      	str	r0, [r7, #12]
 801983c:	60b9      	str	r1, [r7, #8]
 801983e:	4639      	mov	r1, r7
 8019840:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	68ba      	ldr	r2, [r7, #8]
 8019848:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	3304      	adds	r3, #4
 801984e:	461a      	mov	r2, r3
 8019850:	463b      	mov	r3, r7
 8019852:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019856:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	4a03      	ldr	r2, [pc, #12]	@ (801986c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 801985e:	615a      	str	r2, [r3, #20]
    }
 8019860:	bf00      	nop
 8019862:	3714      	adds	r7, #20
 8019864:	46bd      	mov	sp, r7
 8019866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986a:	4770      	bx	lr
 801986c:	08019b67 	.word	0x08019b67

08019870 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 8019870:	b480      	push	{r7}
 8019872:	b083      	sub	sp, #12
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
 8019878:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	683a      	ldr	r2, [r7, #0]
 801987e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	2200      	movs	r2, #0
 8019884:	615a      	str	r2, [r3, #20]
    }
 8019886:	bf00      	nop
 8019888:	370c      	adds	r7, #12
 801988a:	46bd      	mov	sp, r7
 801988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019890:	4770      	bx	lr
	...

08019894 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8019894:	b480      	push	{r7}
 8019896:	b085      	sub	sp, #20
 8019898:	af00      	add	r7, sp, #0
 801989a:	60f8      	str	r0, [r7, #12]
 801989c:	60b9      	str	r1, [r7, #8]
 801989e:	4639      	mov	r1, r7
 80198a0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	68ba      	ldr	r2, [r7, #8]
 80198a8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	3304      	adds	r3, #4
 80198ae:	461a      	mov	r2, r3
 80198b0:	463b      	mov	r3, r7
 80198b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198b6:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	4a03      	ldr	r2, [pc, #12]	@ (80198cc <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 80198be:	615a      	str	r2, [r3, #20]
    }
 80198c0:	bf00      	nop
 80198c2:	3714      	adds	r7, #20
 80198c4:	46bd      	mov	sp, r7
 80198c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ca:	4770      	bx	lr
 80198cc:	08019bd9 	.word	0x08019bd9

080198d0 <_ZN26core_utils_FunctionPointerIhA3_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 80198d0:	b480      	push	{r7}
 80198d2:	b083      	sub	sp, #12
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
 80198d8:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	683a      	ldr	r2, [r7, #0]
 80198de:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2200      	movs	r2, #0
 80198e4:	615a      	str	r2, [r3, #20]
    }
 80198e6:	bf00      	nop
 80198e8:	370c      	adds	r7, #12
 80198ea:	46bd      	mov	sp, r7
 80198ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f0:	4770      	bx	lr
	...

080198f4 <_ZN26core_utils_FunctionPointerIhA3_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 80198f4:	b480      	push	{r7}
 80198f6:	b085      	sub	sp, #20
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	60f8      	str	r0, [r7, #12]
 80198fc:	60b9      	str	r1, [r7, #8]
 80198fe:	4639      	mov	r1, r7
 8019900:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	68ba      	ldr	r2, [r7, #8]
 8019908:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	3304      	adds	r3, #4
 801990e:	461a      	mov	r2, r3
 8019910:	463b      	mov	r3, r7
 8019912:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019916:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	4a03      	ldr	r2, [pc, #12]	@ (801992c <_ZN26core_utils_FunctionPointerIhA3_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 801991e:	615a      	str	r2, [r3, #20]
    }
 8019920:	bf00      	nop
 8019922:	3714      	adds	r7, #20
 8019924:	46bd      	mov	sp, r7
 8019926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801992a:	4770      	bx	lr
 801992c:	08019c4b 	.word	0x08019c4b

08019930 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 8019930:	b480      	push	{r7}
 8019932:	b083      	sub	sp, #12
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
 8019938:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	683a      	ldr	r2, [r7, #0]
 801993e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	2200      	movs	r2, #0
 8019944:	615a      	str	r2, [r3, #20]
    }
 8019946:	bf00      	nop
 8019948:	370c      	adds	r7, #12
 801994a:	46bd      	mov	sp, r7
 801994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019950:	4770      	bx	lr
	...

08019954 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachI20TWIPR_ControlManagerEEvPT_MS4_FS0_vE>:
    void attach(T *object, R (T::*member)(void)) {
 8019954:	b480      	push	{r7}
 8019956:	b085      	sub	sp, #20
 8019958:	af00      	add	r7, sp, #0
 801995a:	60f8      	str	r0, [r7, #12]
 801995c:	60b9      	str	r1, [r7, #8]
 801995e:	4639      	mov	r1, r7
 8019960:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	68ba      	ldr	r2, [r7, #8]
 8019968:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	3304      	adds	r3, #4
 801996e:	461a      	mov	r2, r3
 8019970:	463b      	mov	r3, r7
 8019972:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019976:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	4a03      	ldr	r2, [pc, #12]	@ (801998c <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachI20TWIPR_ControlManagerEEvPT_MS4_FS0_vE+0x38>)
 801997e:	615a      	str	r2, [r3, #20]
    }
 8019980:	bf00      	nop
 8019982:	3714      	adds	r7, #20
 8019984:	46bd      	mov	sp, r7
 8019986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998a:	4770      	bx	lr
 801998c:	08019ca1 	.word	0x08019ca1

08019990 <_ZN26core_utils_FunctionPointerIhhE12membercallerI14TWIPR_FirmwareEEhPvPjh>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019990:	b580      	push	{r7, lr}
 8019992:	b086      	sub	sp, #24
 8019994:	af00      	add	r7, sp, #0
 8019996:	60f8      	str	r0, [r7, #12]
 8019998:	60b9      	str	r1, [r7, #8]
 801999a:	4613      	mov	r3, r2
 801999c:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80199a2:	68bb      	ldr	r3, [r7, #8]
 80199a4:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	685b      	ldr	r3, [r3, #4]
 80199aa:	105b      	asrs	r3, r3, #1
 80199ac:	461a      	mov	r2, r3
 80199ae:	697b      	ldr	r3, [r7, #20]
 80199b0:	1898      	adds	r0, r3, r2
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	685b      	ldr	r3, [r3, #4]
 80199b6:	f003 0301 	and.w	r3, r3, #1
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d00b      	beq.n	80199d6 <_ZN26core_utils_FunctionPointerIhhE12membercallerI14TWIPR_FirmwareEEhPvPjh+0x46>
 80199be:	693b      	ldr	r3, [r7, #16]
 80199c0:	685b      	ldr	r3, [r3, #4]
 80199c2:	105b      	asrs	r3, r3, #1
 80199c4:	461a      	mov	r2, r3
 80199c6:	697b      	ldr	r3, [r7, #20]
 80199c8:	4413      	add	r3, r2
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	693a      	ldr	r2, [r7, #16]
 80199ce:	6812      	ldr	r2, [r2, #0]
 80199d0:	4413      	add	r3, r2
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	e001      	b.n	80199da <_ZN26core_utils_FunctionPointerIhhE12membercallerI14TWIPR_FirmwareEEhPvPjh+0x4a>
 80199d6:	693b      	ldr	r3, [r7, #16]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	79fa      	ldrb	r2, [r7, #7]
 80199dc:	4611      	mov	r1, r2
 80199de:	4798      	blx	r3
 80199e0:	4603      	mov	r3, r0
    }
 80199e2:	4618      	mov	r0, r3
 80199e4:	3718      	adds	r7, #24
 80199e6:	46bd      	mov	sp, r7
 80199e8:	bd80      	pop	{r7, pc}

080199ea <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE12membercallerI19RobotControl_BuzzerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80199ea:	b580      	push	{r7, lr}
 80199ec:	b086      	sub	sp, #24
 80199ee:	af00      	add	r7, sp, #0
 80199f0:	60f8      	str	r0, [r7, #12]
 80199f2:	60b9      	str	r1, [r7, #8]
 80199f4:	4639      	mov	r1, r7
 80199f6:	e881 000c 	stmia.w	r1, {r2, r3}
        T* o = static_cast<T*>(object);
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80199fe:	68bb      	ldr	r3, [r7, #8]
 8019a00:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	685b      	ldr	r3, [r3, #4]
 8019a06:	105b      	asrs	r3, r3, #1
 8019a08:	461a      	mov	r2, r3
 8019a0a:	697b      	ldr	r3, [r7, #20]
 8019a0c:	1898      	adds	r0, r3, r2
 8019a0e:	693b      	ldr	r3, [r7, #16]
 8019a10:	685b      	ldr	r3, [r3, #4]
 8019a12:	f003 0301 	and.w	r3, r3, #1
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d00b      	beq.n	8019a32 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE12membercallerI19RobotControl_BuzzerEEvPvPjS0_+0x48>
 8019a1a:	693b      	ldr	r3, [r7, #16]
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	105b      	asrs	r3, r3, #1
 8019a20:	461a      	mov	r2, r3
 8019a22:	697b      	ldr	r3, [r7, #20]
 8019a24:	4413      	add	r3, r2
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	693a      	ldr	r2, [r7, #16]
 8019a2a:	6812      	ldr	r2, [r2, #0]
 8019a2c:	4413      	add	r3, r2
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	e001      	b.n	8019a36 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE12membercallerI19RobotControl_BuzzerEEvPvPjS0_+0x4c>
 8019a32:	693b      	ldr	r3, [r7, #16]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	463a      	mov	r2, r7
 8019a38:	ca06      	ldmia	r2, {r1, r2}
 8019a3a:	4798      	blx	r3
 8019a3c:	bf00      	nop
    }
 8019a3e:	3718      	adds	r7, #24
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}

08019a44 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b086      	sub	sp, #24
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	60f8      	str	r0, [r7, #12]
 8019a4c:	60b9      	str	r1, [r7, #8]
 8019a4e:	4613      	mov	r3, r2
 8019a50:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019a5a:	693b      	ldr	r3, [r7, #16]
 8019a5c:	685b      	ldr	r3, [r3, #4]
 8019a5e:	105b      	asrs	r3, r3, #1
 8019a60:	461a      	mov	r2, r3
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	1898      	adds	r0, r3, r2
 8019a66:	693b      	ldr	r3, [r7, #16]
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	f003 0301 	and.w	r3, r3, #1
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d00b      	beq.n	8019a8a <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x46>
 8019a72:	693b      	ldr	r3, [r7, #16]
 8019a74:	685b      	ldr	r3, [r3, #4]
 8019a76:	105b      	asrs	r3, r3, #1
 8019a78:	461a      	mov	r2, r3
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	4413      	add	r3, r2
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	693a      	ldr	r2, [r7, #16]
 8019a82:	6812      	ldr	r2, [r2, #0]
 8019a84:	4413      	add	r3, r2
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	e001      	b.n	8019a8e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4a>
 8019a8a:	693b      	ldr	r3, [r7, #16]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	79fa      	ldrb	r2, [r7, #7]
 8019a90:	4611      	mov	r1, r2
 8019a92:	4798      	blx	r3
 8019a94:	4603      	mov	r3, r0
    }
 8019a96:	4618      	mov	r0, r3
 8019a98:	3718      	adds	r7, #24
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}

08019a9e <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b086      	sub	sp, #24
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	60f8      	str	r0, [r7, #12]
 8019aa6:	60b9      	str	r1, [r7, #8]
 8019aa8:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019ab2:	693b      	ldr	r3, [r7, #16]
 8019ab4:	685b      	ldr	r3, [r3, #4]
 8019ab6:	105b      	asrs	r3, r3, #1
 8019ab8:	461a      	mov	r2, r3
 8019aba:	697b      	ldr	r3, [r7, #20]
 8019abc:	1898      	adds	r0, r3, r2
 8019abe:	693b      	ldr	r3, [r7, #16]
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	f003 0301 	and.w	r3, r3, #1
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d00b      	beq.n	8019ae2 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	685b      	ldr	r3, [r3, #4]
 8019ace:	105b      	asrs	r3, r3, #1
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	4413      	add	r3, r2
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	693a      	ldr	r2, [r7, #16]
 8019ada:	6812      	ldr	r2, [r2, #0]
 8019adc:	4413      	add	r3, r2
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	e001      	b.n	8019ae6 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	6879      	ldr	r1, [r7, #4]
 8019ae8:	4798      	blx	r3
 8019aea:	4603      	mov	r3, r0
    }
 8019aec:	4618      	mov	r0, r3
 8019aee:	3718      	adds	r7, #24
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}

08019af4 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b086      	sub	sp, #24
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	60f8      	str	r0, [r7, #12]
 8019afc:	60b9      	str	r1, [r7, #8]
 8019afe:	eeb0 7a40 	vmov.f32	s14, s0
 8019b02:	eef0 7a60 	vmov.f32	s15, s1
 8019b06:	ed87 7a00 	vstr	s14, [r7]
 8019b0a:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019b16:	693b      	ldr	r3, [r7, #16]
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	105b      	asrs	r3, r3, #1
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	1899      	adds	r1, r3, r2
 8019b22:	693b      	ldr	r3, [r7, #16]
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	f003 0301 	and.w	r3, r3, #1
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00b      	beq.n	8019b46 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 8019b2e:	693b      	ldr	r3, [r7, #16]
 8019b30:	685b      	ldr	r3, [r3, #4]
 8019b32:	105b      	asrs	r3, r3, #1
 8019b34:	461a      	mov	r2, r3
 8019b36:	697b      	ldr	r3, [r7, #20]
 8019b38:	4413      	add	r3, r2
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	693a      	ldr	r2, [r7, #16]
 8019b3e:	6812      	ldr	r2, [r2, #0]
 8019b40:	4413      	add	r3, r2
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	e001      	b.n	8019b4a <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	ed97 7a00 	vldr	s14, [r7]
 8019b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8019b52:	eeb0 0a47 	vmov.f32	s0, s14
 8019b56:	eef0 0a67 	vmov.f32	s1, s15
 8019b5a:	4608      	mov	r0, r1
 8019b5c:	4798      	blx	r3
 8019b5e:	bf00      	nop
    }
 8019b60:	3718      	adds	r7, #24
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bd80      	pop	{r7, pc}

08019b66 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019b66:	b580      	push	{r7, lr}
 8019b68:	b086      	sub	sp, #24
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	60f8      	str	r0, [r7, #12]
 8019b6e:	60b9      	str	r1, [r7, #8]
 8019b70:	eeb0 7a40 	vmov.f32	s14, s0
 8019b74:	eef0 7a60 	vmov.f32	s15, s1
 8019b78:	ed87 7a00 	vstr	s14, [r7]
 8019b7c:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	105b      	asrs	r3, r3, #1
 8019b8e:	461a      	mov	r2, r3
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	1899      	adds	r1, r3, r2
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	685b      	ldr	r3, [r3, #4]
 8019b98:	f003 0301 	and.w	r3, r3, #1
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d00b      	beq.n	8019bb8 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 8019ba0:	693b      	ldr	r3, [r7, #16]
 8019ba2:	685b      	ldr	r3, [r3, #4]
 8019ba4:	105b      	asrs	r3, r3, #1
 8019ba6:	461a      	mov	r2, r3
 8019ba8:	697b      	ldr	r3, [r7, #20]
 8019baa:	4413      	add	r3, r2
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	693a      	ldr	r2, [r7, #16]
 8019bb0:	6812      	ldr	r2, [r2, #0]
 8019bb2:	4413      	add	r3, r2
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	e001      	b.n	8019bbc <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 8019bb8:	693b      	ldr	r3, [r7, #16]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	ed97 7a00 	vldr	s14, [r7]
 8019bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8019bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8019bc8:	eef0 0a67 	vmov.f32	s1, s15
 8019bcc:	4608      	mov	r0, r1
 8019bce:	4798      	blx	r3
 8019bd0:	bf00      	nop
    }
 8019bd2:	3718      	adds	r7, #24
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b086      	sub	sp, #24
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	60f8      	str	r0, [r7, #12]
 8019be0:	60b9      	str	r1, [r7, #8]
 8019be2:	eeb0 7a40 	vmov.f32	s14, s0
 8019be6:	eef0 7a60 	vmov.f32	s15, s1
 8019bea:	ed87 7a00 	vstr	s14, [r7]
 8019bee:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019bfa:	693b      	ldr	r3, [r7, #16]
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	105b      	asrs	r3, r3, #1
 8019c00:	461a      	mov	r2, r3
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	1899      	adds	r1, r3, r2
 8019c06:	693b      	ldr	r3, [r7, #16]
 8019c08:	685b      	ldr	r3, [r3, #4]
 8019c0a:	f003 0301 	and.w	r3, r3, #1
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d00b      	beq.n	8019c2a <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 8019c12:	693b      	ldr	r3, [r7, #16]
 8019c14:	685b      	ldr	r3, [r3, #4]
 8019c16:	105b      	asrs	r3, r3, #1
 8019c18:	461a      	mov	r2, r3
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	4413      	add	r3, r2
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	693a      	ldr	r2, [r7, #16]
 8019c22:	6812      	ldr	r2, [r2, #0]
 8019c24:	4413      	add	r3, r2
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	e001      	b.n	8019c2e <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 8019c2a:	693b      	ldr	r3, [r7, #16]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	ed97 7a00 	vldr	s14, [r7]
 8019c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8019c36:	eeb0 0a47 	vmov.f32	s0, s14
 8019c3a:	eef0 0a67 	vmov.f32	s1, s15
 8019c3e:	4608      	mov	r0, r1
 8019c40:	4798      	blx	r3
 8019c42:	bf00      	nop
    }
 8019c44:	3718      	adds	r7, #24
 8019c46:	46bd      	mov	sp, r7
 8019c48:	bd80      	pop	{r7, pc}

08019c4a <_ZN26core_utils_FunctionPointerIhA3_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019c4a:	b580      	push	{r7, lr}
 8019c4c:	b086      	sub	sp, #24
 8019c4e:	af00      	add	r7, sp, #0
 8019c50:	60f8      	str	r0, [r7, #12]
 8019c52:	60b9      	str	r1, [r7, #8]
 8019c54:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	685b      	ldr	r3, [r3, #4]
 8019c62:	105b      	asrs	r3, r3, #1
 8019c64:	461a      	mov	r2, r3
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	1898      	adds	r0, r3, r2
 8019c6a:	693b      	ldr	r3, [r7, #16]
 8019c6c:	685b      	ldr	r3, [r3, #4]
 8019c6e:	f003 0301 	and.w	r3, r3, #1
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d00b      	beq.n	8019c8e <_ZN26core_utils_FunctionPointerIhA3_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 8019c76:	693b      	ldr	r3, [r7, #16]
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	105b      	asrs	r3, r3, #1
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	697b      	ldr	r3, [r7, #20]
 8019c80:	4413      	add	r3, r2
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	693a      	ldr	r2, [r7, #16]
 8019c86:	6812      	ldr	r2, [r2, #0]
 8019c88:	4413      	add	r3, r2
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	e001      	b.n	8019c92 <_ZN26core_utils_FunctionPointerIhA3_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	6879      	ldr	r1, [r7, #4]
 8019c94:	4798      	blx	r3
 8019c96:	4603      	mov	r3, r0
    }
 8019c98:	4618      	mov	r0, r3
 8019c9a:	3718      	adds	r7, #24
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}

08019ca0 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE12membercallerI20TWIPR_ControlManagerEES0_PvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b086      	sub	sp, #24
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	60f8      	str	r0, [r7, #12]
 8019ca8:	60b9      	str	r1, [r7, #8]
 8019caa:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	617b      	str	r3, [r7, #20]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	613b      	str	r3, [r7, #16]
        return (o->**m)();
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	685b      	ldr	r3, [r3, #4]
 8019cb8:	105b      	asrs	r3, r3, #1
 8019cba:	461a      	mov	r2, r3
 8019cbc:	697b      	ldr	r3, [r7, #20]
 8019cbe:	1899      	adds	r1, r3, r2
 8019cc0:	693b      	ldr	r3, [r7, #16]
 8019cc2:	685b      	ldr	r3, [r3, #4]
 8019cc4:	f003 0301 	and.w	r3, r3, #1
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d00b      	beq.n	8019ce4 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE12membercallerI20TWIPR_ControlManagerEES0_PvPj+0x44>
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	685b      	ldr	r3, [r3, #4]
 8019cd0:	105b      	asrs	r3, r3, #1
 8019cd2:	461a      	mov	r2, r3
 8019cd4:	697b      	ldr	r3, [r7, #20]
 8019cd6:	4413      	add	r3, r2
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	693a      	ldr	r2, [r7, #16]
 8019cdc:	6812      	ldr	r2, [r2, #0]
 8019cde:	4413      	add	r3, r2
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	e001      	b.n	8019ce8 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE12membercallerI20TWIPR_ControlManagerEES0_PvPj+0x48>
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	68fa      	ldr	r2, [r7, #12]
 8019cea:	4610      	mov	r0, r2
 8019cec:	4798      	blx	r3
 8019cee:	bf00      	nop
    }
 8019cf0:	68f8      	ldr	r0, [r7, #12]
 8019cf2:	3718      	adds	r7, #24
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}

08019cf8 <_ZN14TWIPR_FirmwareD1Ev>:
#include "firmware_defs.h"
#include "twipr_safety.h"
#include "twipr_sequencer.h"


class TWIPR_Firmware {
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	3358      	adds	r3, #88	@ 0x58
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7fd ff30 	bl	8017b6a <_ZN26TWIPR_CommunicationManagerD1Ev>
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	3708      	adds	r7, #8
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bd80      	pop	{r7, pc}

08019d14 <_Z41__static_initialization_and_destruction_0ii>:
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b098      	sub	sp, #96	@ 0x60
 8019d18:	af02      	add	r7, sp, #8
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	6039      	str	r1, [r7, #0]
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	2b01      	cmp	r3, #1
 8019d22:	f040 80da 	bne.w	8019eda <_Z41__static_initialization_and_destruction_0ii+0x1c6>
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019d2c:	4293      	cmp	r3, r2
 8019d2e:	f040 80d4 	bne.w	8019eda <_Z41__static_initialization_and_destruction_0ii+0x1c6>
TWIPR_Firmware twipr_firmware;
 8019d32:	4871      	ldr	r0, [pc, #452]	@ (8019ef8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8019d34:	f7fd ff2a 	bl	8017b8c <_ZN14TWIPR_FirmwareC1Ev>
core_utils_RegisterEntry<twipr_firmware_state_t, void> regentry_read_firmware_state(&register_map, REG_ADDRESS_R_FIRMWARE_STATE, &twipr_firmware.firmware_state);
 8019d38:	4b6f      	ldr	r3, [pc, #444]	@ (8019ef8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	496f      	ldr	r1, [pc, #444]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019d3e:	4870      	ldr	r0, [pc, #448]	@ (8019f00 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8019d40:	f7fe faa2 	bl	8018288 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvEC1EP11RegisterMaphPS0_>
core_utils_RegisterEntry<uint32_t, void> regentry_read_firmware_tick(&register_map, REG_ADDRESS_R_FIRMWARE_TICK, &twipr_firmware.tick);
 8019d44:	4b6f      	ldr	r3, [pc, #444]	@ (8019f04 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8019d46:	2202      	movs	r2, #2
 8019d48:	496c      	ldr	r1, [pc, #432]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019d4a:	486f      	ldr	r0, [pc, #444]	@ (8019f08 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8019d4c:	f7fe fac8 	bl	80182e0 <_ZN24core_utils_RegisterEntryImvEC1EP11RegisterMaphPm>
core_utils_RegisterEntry<twipr_firmware_revision_t, void> regentry_read_firmware_revision(&register_map, REG_ADDRESS_R_FIRMWARE_REVISION, &twipr_firmware.revision);
 8019d50:	4b6e      	ldr	r3, [pc, #440]	@ (8019f0c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8019d52:	2203      	movs	r2, #3
 8019d54:	4969      	ldr	r1, [pc, #420]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019d56:	486e      	ldr	r0, [pc, #440]	@ (8019f10 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8019d58:	f7fe faee 	bl	8018338 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvEC1EP11RegisterMaphPS0_>
core_utils_RegisterEntry<uint8_t, uint8_t>regentry_f_firmware_debug(&register_map, REG_ADDRESS_F_FIRMWARE_DEBUGFUNCTION, &twipr_firmware, &TWIPR_Firmware::debug);
 8019d5c:	4b6d      	ldr	r3, [pc, #436]	@ (8019f14 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8019d5e:	60bb      	str	r3, [r7, #8]
 8019d60:	2300      	movs	r3, #0
 8019d62:	60fb      	str	r3, [r7, #12]
 8019d64:	466a      	mov	r2, sp
 8019d66:	f107 0308 	add.w	r3, r7, #8
 8019d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8019d72:	4b61      	ldr	r3, [pc, #388]	@ (8019ef8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8019d74:	2204      	movs	r2, #4
 8019d76:	4961      	ldr	r1, [pc, #388]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019d78:	4867      	ldr	r0, [pc, #412]	@ (8019f18 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8019d7a:	f7fe fb29 	bl	80183d0 <_ZN24core_utils_RegisterEntryIhhEC1I14TWIPR_FirmwareEEP11RegisterMaphPT_MS5_FhhE>
core_utils_RegisterEntry<void, buzzer_beep_struct_t>regentry_f_firmware_beep(&register_map, REG_ADDRESS_F_FIRMWARE_BEEP, &rc_buzzer, &RobotControl_Buzzer::beep);
 8019d7e:	4b67      	ldr	r3, [pc, #412]	@ (8019f1c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8019d80:	613b      	str	r3, [r7, #16]
 8019d82:	2300      	movs	r3, #0
 8019d84:	617b      	str	r3, [r7, #20]
 8019d86:	466a      	mov	r2, sp
 8019d88:	f107 0310 	add.w	r3, r7, #16
 8019d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d90:	e882 0003 	stmia.w	r2, {r0, r1}
 8019d94:	4b62      	ldr	r3, [pc, #392]	@ (8019f20 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8019d96:	2205      	movs	r2, #5
 8019d98:	4958      	ldr	r1, [pc, #352]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019d9a:	4862      	ldr	r0, [pc, #392]	@ (8019f24 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8019d9c:	f7fe fb76 	bl	801848c <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<uint8_t, void>regentry_r_board_revision(&register_map, REG_ADDRESS_R_BOARD_REVISION, &board_revision);
 8019da0:	4b61      	ldr	r3, [pc, #388]	@ (8019f28 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8019da2:	2206      	movs	r2, #6
 8019da4:	4955      	ldr	r1, [pc, #340]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019da6:	4861      	ldr	r0, [pc, #388]	@ (8019f2c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8019da8:	f7fe fbae 	bl	8018508 <_ZN24core_utils_RegisterEntryIhvEC1EP11RegisterMaphPh>
core_utils_RegisterEntry<float, float>regentry_rw_max_wheel_speed(&register_map, REG_ADDRESS_RW_MAX_WHEEL_SPEED, &twipr_firmware.supervisor.config.max_wheel_speed);
 8019dac:	4b60      	ldr	r3, [pc, #384]	@ (8019f30 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8019dae:	2220      	movs	r2, #32
 8019db0:	4952      	ldr	r1, [pc, #328]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019db2:	4860      	ldr	r0, [pc, #384]	@ (8019f34 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8019db4:	f7fe fbd4 	bl	8018560 <_ZN24core_utils_RegisterEntryIffEC1EP11RegisterMaphPf>
core_utils_RegisterEntry<twipr_control_mode_t, void> regentry_read_control_mode(&register_map, REG_ADDRESS_R_CONTROL_MODE, &twipr_firmware.control.mode);
 8019db8:	4b5f      	ldr	r3, [pc, #380]	@ (8019f38 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8019dba:	2210      	movs	r2, #16
 8019dbc:	494f      	ldr	r1, [pc, #316]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019dbe:	485f      	ldr	r0, [pc, #380]	@ (8019f3c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8019dc0:	f7fe fbfe 	bl	80185c0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvEC1EP11RegisterMaphPS0_>
core_utils_RegisterEntry<uint8_t, twipr_control_mode_t> regentry_function_control_setMode(&register_map, REG_ADDRESS_F_CONTROL_SET_MODE, &twipr_firmware.control, &TWIPR_ControlManager::setMode);
 8019dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8019f40 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8019dc6:	61bb      	str	r3, [r7, #24]
 8019dc8:	2300      	movs	r3, #0
 8019dca:	61fb      	str	r3, [r7, #28]
 8019dcc:	466a      	mov	r2, sp
 8019dce:	f107 0318 	add.w	r3, r7, #24
 8019dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019dd6:	e882 0003 	stmia.w	r2, {r0, r1}
 8019dda:	4b5a      	ldr	r3, [pc, #360]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019ddc:	2211      	movs	r2, #17
 8019dde:	4947      	ldr	r1, [pc, #284]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019de0:	4859      	ldr	r0, [pc, #356]	@ (8019f48 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8019de2:	f7fe fc39 	bl	8018658 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhS0_E>
core_utils_RegisterEntry<uint8_t, float[8]> regentry_function_control_setK(&register_map, REG_ADDRESS_F_CONTROL_SET_K, &twipr_firmware.control, &TWIPR_ControlManager::setBalancingGain);
 8019de6:	4b59      	ldr	r3, [pc, #356]	@ (8019f4c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8019de8:	623b      	str	r3, [r7, #32]
 8019dea:	2300      	movs	r3, #0
 8019dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8019dee:	466a      	mov	r2, sp
 8019df0:	f107 0320 	add.w	r3, r7, #32
 8019df4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019df8:	e882 0003 	stmia.w	r2, {r0, r1}
 8019dfc:	4b51      	ldr	r3, [pc, #324]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019dfe:	2212      	movs	r2, #18
 8019e00:	493e      	ldr	r1, [pc, #248]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019e02:	4853      	ldr	r0, [pc, #332]	@ (8019f50 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8019e04:	f7fe fc86 	bl	8018714 <_ZN24core_utils_RegisterEntryIhA8_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>
core_utils_RegisterEntry<void, twipr_control_direct_input_t> regentry_function_control_setDirectInput(&register_map, REG_ADDRESS_F_CONTROL_SET_DIRECT_INPUT, &twipr_firmware.control, &TWIPR_ControlManager::setDirectInput);
 8019e08:	4b52      	ldr	r3, [pc, #328]	@ (8019f54 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8019e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e10:	466a      	mov	r2, sp
 8019e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8019e16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e1a:	e882 0003 	stmia.w	r2, {r0, r1}
 8019e1e:	4b49      	ldr	r3, [pc, #292]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019e20:	2215      	movs	r2, #21
 8019e22:	4936      	ldr	r1, [pc, #216]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019e24:	484c      	ldr	r0, [pc, #304]	@ (8019f58 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8019e26:	f7fe fcd5 	bl	80187d4 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<void, twipr_balancing_control_input_t> regentry_function_control_setBalancingInput(&register_map, REG_ADDRESS_F_CONTROL_SET_BALANCING_INPUT, &twipr_firmware.control, &TWIPR_ControlManager::setBalancingInput);
 8019e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8019f5c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8019e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e2e:	2300      	movs	r3, #0
 8019e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8019e32:	466a      	mov	r2, sp
 8019e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019e38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8019e40:	4b40      	ldr	r3, [pc, #256]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019e42:	2216      	movs	r2, #22
 8019e44:	492d      	ldr	r1, [pc, #180]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019e46:	4846      	ldr	r0, [pc, #280]	@ (8019f60 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8019e48:	f7fe fd22 	bl	8018890 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<void, twipr_speed_control_input_t> regentry_function_control_setSpeedInput(&register_map, REG_ADDRESS_F_CONTROL_SET_SPEED_INPUT, &twipr_firmware.control, &TWIPR_ControlManager::setSpeed);
 8019e4c:	4b45      	ldr	r3, [pc, #276]	@ (8019f64 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8019e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e50:	2300      	movs	r3, #0
 8019e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019e54:	466a      	mov	r2, sp
 8019e56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8019e5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8019e62:	4b38      	ldr	r3, [pc, #224]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019e64:	2217      	movs	r2, #23
 8019e66:	4925      	ldr	r1, [pc, #148]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019e68:	483f      	ldr	r0, [pc, #252]	@ (8019f68 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8019e6a:	f7fe fd6f 	bl	801894c <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<uint8_t, float[3]> regentry_function_control_setPIDForward(&register_map, REG_ADDRESS_F_CONTROL_SET_FORWARD_PID, &twipr_firmware.control, &TWIPR_ControlManager::setVelocityControlForwardPID);
 8019e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8019f6c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8019e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8019e72:	2300      	movs	r3, #0
 8019e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8019e76:	466a      	mov	r2, sp
 8019e78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019e7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e80:	e882 0003 	stmia.w	r2, {r0, r1}
 8019e84:	4b2f      	ldr	r3, [pc, #188]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019e86:	2213      	movs	r2, #19
 8019e88:	491c      	ldr	r1, [pc, #112]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019e8a:	4839      	ldr	r0, [pc, #228]	@ (8019f70 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8019e8c:	f7fe fdbc 	bl	8018a08 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>
core_utils_RegisterEntry<uint8_t, float[3]> regentry_function_control_setPIDTurn(&register_map, REG_ADDRESS_F_CONTROL_SET_TURN_PID, &twipr_firmware.control, &TWIPR_ControlManager::setVelocityControlTurnPID);
 8019e90:	4b38      	ldr	r3, [pc, #224]	@ (8019f74 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8019e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019e94:	2300      	movs	r3, #0
 8019e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019e98:	466a      	mov	r2, sp
 8019e9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8019e9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019ea2:	e882 0003 	stmia.w	r2, {r0, r1}
 8019ea6:	4b27      	ldr	r3, [pc, #156]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019ea8:	2214      	movs	r2, #20
 8019eaa:	4914      	ldr	r1, [pc, #80]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019eac:	4832      	ldr	r0, [pc, #200]	@ (8019f78 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8019eae:	f7fe fdab 	bl	8018a08 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>
core_utils_RegisterEntry<twipr_control_configuration_t, void> regentry_function_control_getControlConfiguration(&register_map, REG_ADDRESS_F_CONTROL_GET_CONFIGURATION, &twipr_firmware.control, &TWIPR_ControlManager::getControlConfiguration);
 8019eb2:	4b32      	ldr	r3, [pc, #200]	@ (8019f7c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8019eb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8019eba:	466a      	mov	r2, sp
 8019ebc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019ec0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019ec4:	e882 0003 	stmia.w	r2, {r0, r1}
 8019ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8019f44 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8019eca:	2218      	movs	r2, #24
 8019ecc:	490b      	ldr	r1, [pc, #44]	@ (8019efc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8019ece:	482c      	ldr	r0, [pc, #176]	@ (8019f80 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8019ed0:	f7fe fdf8 	bl	8018ac4 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FS0_vE>
elapsedMillis activityTimer;
 8019ed4:	482b      	ldr	r0, [pc, #172]	@ (8019f84 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8019ed6:	f7fc fc21 	bl	801671c <_ZN13elapsedMillisC1Ev>
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d107      	bne.n	8019ef0 <_Z41__static_initialization_and_destruction_0ii+0x1dc>
 8019ee0:	683b      	ldr	r3, [r7, #0]
 8019ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	d102      	bne.n	8019ef0 <_Z41__static_initialization_and_destruction_0ii+0x1dc>
TWIPR_Firmware twipr_firmware;
 8019eea:	4803      	ldr	r0, [pc, #12]	@ (8019ef8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8019eec:	f7ff ff04 	bl	8019cf8 <_ZN14TWIPR_FirmwareD1Ev>
}
 8019ef0:	bf00      	nop
 8019ef2:	3758      	adds	r7, #88	@ 0x58
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bd80      	pop	{r7, pc}
 8019ef8:	2401f460 	.word	0x2401f460
 8019efc:	2401f028 	.word	0x2401f028
 8019f00:	24028280 	.word	0x24028280
 8019f04:	2401f464 	.word	0x2401f464
 8019f08:	240282b0 	.word	0x240282b0
 8019f0c:	2401f462 	.word	0x2401f462
 8019f10:	240282e4 	.word	0x240282e4
 8019f14:	08018269 	.word	0x08018269
 8019f18:	24028314 	.word	0x24028314
 8019f1c:	0801c65b 	.word	0x0801c65b
 8019f20:	240286a8 	.word	0x240286a8
 8019f24:	24028344 	.word	0x24028344
 8019f28:	24000030 	.word	0x24000030
 8019f2c:	2402837c 	.word	0x2402837c
 8019f30:	24027c84 	.word	0x24027c84
 8019f34:	240283ac 	.word	0x240283ac
 8019f38:	24021305 	.word	0x24021305
 8019f3c:	240283e4 	.word	0x240283e4
 8019f40:	08015a19 	.word	0x08015a19
 8019f44:	24021304 	.word	0x24021304
 8019f48:	24028414 	.word	0x24028414
 8019f4c:	08015bbd 	.word	0x08015bbd
 8019f50:	24028444 	.word	0x24028444
 8019f54:	08015b65 	.word	0x08015b65
 8019f58:	24028498 	.word	0x24028498
 8019f5c:	08015ab5 	.word	0x08015ab5
 8019f60:	240284d0 	.word	0x240284d0
 8019f64:	08015b0d 	.word	0x08015b0d
 8019f68:	24028508 	.word	0x24028508
 8019f6c:	08015bf7 	.word	0x08015bf7
 8019f70:	24028540 	.word	0x24028540
 8019f74:	08015c39 	.word	0x08015c39
 8019f78:	24028580 	.word	0x24028580
 8019f7c:	08015c7b 	.word	0x08015c7b
 8019f80:	240285c0 	.word	0x240285c0
 8019f84:	24028628 	.word	0x24028628

08019f88 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE12getInputSizeEv>:
		}
		return 0;
	}

	/* --------------------------------------------------------------------------------------------------------- */
	uint16_t getInputSize() {
 8019f88:	b480      	push	{r7}
 8019f8a:	b083      	sub	sp, #12
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
		return 0;
 8019f90:	2300      	movs	r3, #0
	}
 8019f92:	4618      	mov	r0, r3
 8019f94:	370c      	adds	r7, #12
 8019f96:	46bd      	mov	sp, r7
 8019f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9c:	4770      	bx	lr

08019f9e <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE13getOutputSizeEv>:

	/* --------------------------------------------------------------------------------------------------------- */
	uint16_t getOutputSize() {
 8019f9e:	b480      	push	{r7}
 8019fa0:	b083      	sub	sp, #12
 8019fa2:	af00      	add	r7, sp, #0
 8019fa4:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 8019fa6:	2338      	movs	r3, #56	@ 0x38
	}
 8019fa8:	4618      	mov	r0, r3
 8019faa:	370c      	adds	r7, #12
 8019fac:	46bd      	mov	sp, r7
 8019fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb2:	4770      	bx	lr

08019fb4 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b086      	sub	sp, #24
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	60f8      	str	r0, [r7, #12]
 8019fbc:	60b9      	str	r1, [r7, #8]
 8019fbe:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	3308      	adds	r3, #8
 8019fca:	4619      	mov	r1, r3
 8019fcc:	4610      	mov	r0, r2
 8019fce:	f000 ffbc 	bl	801af4a <_ZN19core_utils_CallbackI29twipr_control_configuration_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	75fb      	strb	r3, [r7, #23]
 8019fd6:	e00a      	b.n	8019fee <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 8019fd8:	7dfa      	ldrb	r2, [r7, #23]
 8019fda:	7dfb      	ldrb	r3, [r7, #23]
 8019fdc:	6879      	ldr	r1, [r7, #4]
 8019fde:	440b      	add	r3, r1
 8019fe0:	68f9      	ldr	r1, [r7, #12]
 8019fe2:	440a      	add	r2, r1
 8019fe4:	7a12      	ldrb	r2, [r2, #8]
 8019fe6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 8019fe8:	7dfb      	ldrb	r3, [r7, #23]
 8019fea:	3301      	adds	r3, #1
 8019fec:	75fb      	strb	r3, [r7, #23]
 8019fee:	7dfb      	ldrb	r3, [r7, #23]
 8019ff0:	2b37      	cmp	r3, #55	@ 0x37
 8019ff2:	d9f1      	bls.n	8019fd8 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	3304      	adds	r3, #4
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	68f8      	ldr	r0, [r7, #12]
 8019ffe:	4798      	blx	r3
 801a000:	4603      	mov	r3, r0
	}
 801a002:	4618      	mov	r0, r3
 801a004:	3718      	adds	r7, #24
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}

0801a00a <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801a00a:	b480      	push	{r7}
 801a00c:	b085      	sub	sp, #20
 801a00e:	af00      	add	r7, sp, #0
 801a010:	6078      	str	r0, [r7, #4]
 801a012:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a01a:	2b03      	cmp	r3, #3
 801a01c:	d115      	bne.n	801a04a <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x40>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a022:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a024:	2300      	movs	r3, #0
 801a026:	73fb      	strb	r3, [r7, #15]
 801a028:	e00a      	b.n	801a040 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x36>
				output[i] = target_address[i];
 801a02a:	7bfb      	ldrb	r3, [r7, #15]
 801a02c:	68ba      	ldr	r2, [r7, #8]
 801a02e:	441a      	add	r2, r3
 801a030:	7bfb      	ldrb	r3, [r7, #15]
 801a032:	6839      	ldr	r1, [r7, #0]
 801a034:	440b      	add	r3, r1
 801a036:	7812      	ldrb	r2, [r2, #0]
 801a038:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a03a:	7bfb      	ldrb	r3, [r7, #15]
 801a03c:	3301      	adds	r3, #1
 801a03e:	73fb      	strb	r3, [r7, #15]
 801a040:	7bfb      	ldrb	r3, [r7, #15]
 801a042:	2b37      	cmp	r3, #55	@ 0x37
 801a044:	d9f1      	bls.n	801a02a <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x20>
			return sizeof(output_type);
 801a046:	2338      	movs	r3, #56	@ 0x38
 801a048:	e000      	b.n	801a04c <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x42>
		return 0;
 801a04a:	2300      	movs	r3, #0
	}
 801a04c:	4618      	mov	r0, r3
 801a04e:	3714      	adds	r7, #20
 801a050:	46bd      	mov	sp, r7
 801a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a056:	4770      	bx	lr

0801a058 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7getTypeEv>:
	/* --------------------------------------------------------------------------------------------------------- */
	register_entry_type_t getType() {
 801a058:	b480      	push	{r7}
 801a05a:	b083      	sub	sp, #12
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
		return this->type;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
	}
 801a066:	4618      	mov	r0, r3
 801a068:	370c      	adds	r7, #12
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr

0801a072 <_ZN24core_utils_RegisterEntryIhA3_fE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a072:	b480      	push	{r7}
 801a074:	b083      	sub	sp, #12
 801a076:	af00      	add	r7, sp, #0
 801a078:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a07a:	230c      	movs	r3, #12
	}
 801a07c:	4618      	mov	r0, r3
 801a07e:	370c      	adds	r7, #12
 801a080:	46bd      	mov	sp, r7
 801a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a086:	4770      	bx	lr

0801a088 <_ZN24core_utils_RegisterEntryIhA3_fE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a088:	b480      	push	{r7}
 801a08a:	b083      	sub	sp, #12
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801a090:	2301      	movs	r3, #1
	}
 801a092:	4618      	mov	r0, r3
 801a094:	370c      	adds	r7, #12
 801a096:	46bd      	mov	sp, r7
 801a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09c:	4770      	bx	lr

0801a09e <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a09e:	b580      	push	{r7, lr}
 801a0a0:	b086      	sub	sp, #24
 801a0a2:	af00      	add	r7, sp, #0
 801a0a4:	60f8      	str	r0, [r7, #12]
 801a0a6:	60b9      	str	r1, [r7, #8]
 801a0a8:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	75fb      	strb	r3, [r7, #23]
 801a0ae:	e00b      	b.n	801a0c8 <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a0b0:	7dfb      	ldrb	r3, [r7, #23]
 801a0b2:	68ba      	ldr	r2, [r7, #8]
 801a0b4:	441a      	add	r2, r3
 801a0b6:	7dfb      	ldrb	r3, [r7, #23]
 801a0b8:	7811      	ldrb	r1, [r2, #0]
 801a0ba:	68fa      	ldr	r2, [r7, #12]
 801a0bc:	4413      	add	r3, r2
 801a0be:	460a      	mov	r2, r1
 801a0c0:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a0c2:	7dfb      	ldrb	r3, [r7, #23]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	75fb      	strb	r3, [r7, #23]
 801a0c8:	7dfb      	ldrb	r3, [r7, #23]
 801a0ca:	2b0b      	cmp	r3, #11
 801a0cc:	d9f0      	bls.n	801a0b0 <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data,
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	f103 0020 	add.w	r0, r3, #32
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	f103 0108 	add.w	r1, r3, #8
				this->output_data_union_t.data);
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	3314      	adds	r3, #20
		this->callback.call(this->input_data_union.data,
 801a0de:	461a      	mov	r2, r3
 801a0e0:	f000 ff51 	bl	801af86 <_ZN19core_utils_CallbackIhA3_fE4callEPfRh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	75bb      	strb	r3, [r7, #22]
 801a0e8:	e00a      	b.n	801a100 <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x62>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801a0ea:	7dba      	ldrb	r2, [r7, #22]
 801a0ec:	7dbb      	ldrb	r3, [r7, #22]
 801a0ee:	6879      	ldr	r1, [r7, #4]
 801a0f0:	440b      	add	r3, r1
 801a0f2:	68f9      	ldr	r1, [r7, #12]
 801a0f4:	440a      	add	r2, r1
 801a0f6:	7d12      	ldrb	r2, [r2, #20]
 801a0f8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a0fa:	7dbb      	ldrb	r3, [r7, #22]
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	75bb      	strb	r3, [r7, #22]
 801a100:	7dbb      	ldrb	r3, [r7, #22]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d0f1      	beq.n	801a0ea <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x4c>
		return this->getOutputSize();
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	3304      	adds	r3, #4
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	68f8      	ldr	r0, [r7, #12]
 801a110:	4798      	blx	r3
 801a112:	4603      	mov	r3, r0
	}
 801a114:	4618      	mov	r0, r3
 801a116:	3718      	adds	r7, #24
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd80      	pop	{r7, pc}

0801a11c <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh>:
	void write(uint8_t *input) {
 801a11c:	b480      	push	{r7}
 801a11e:	b085      	sub	sp, #20
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
 801a124:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	7f5b      	ldrb	r3, [r3, #29]
 801a12a:	2b04      	cmp	r3, #4
 801a12c:	d113      	bne.n	801a156 <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	699b      	ldr	r3, [r3, #24]
 801a132:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a134:	2300      	movs	r3, #0
 801a136:	73fb      	strb	r3, [r7, #15]
 801a138:	e00a      	b.n	801a150 <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh+0x34>
				target_address[i] = input[i];
 801a13a:	7bfb      	ldrb	r3, [r7, #15]
 801a13c:	683a      	ldr	r2, [r7, #0]
 801a13e:	441a      	add	r2, r3
 801a140:	7bfb      	ldrb	r3, [r7, #15]
 801a142:	68b9      	ldr	r1, [r7, #8]
 801a144:	440b      	add	r3, r1
 801a146:	7812      	ldrb	r2, [r2, #0]
 801a148:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a14a:	7bfb      	ldrb	r3, [r7, #15]
 801a14c:	3301      	adds	r3, #1
 801a14e:	73fb      	strb	r3, [r7, #15]
 801a150:	7bfb      	ldrb	r3, [r7, #15]
 801a152:	2b0b      	cmp	r3, #11
 801a154:	d9f1      	bls.n	801a13a <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh+0x1e>
	}
 801a156:	bf00      	nop
 801a158:	3714      	adds	r7, #20
 801a15a:	46bd      	mov	sp, r7
 801a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a160:	4770      	bx	lr

0801a162 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh>:
	uint16_t read(uint8_t *output) {
 801a162:	b480      	push	{r7}
 801a164:	b085      	sub	sp, #20
 801a166:	af00      	add	r7, sp, #0
 801a168:	6078      	str	r0, [r7, #4]
 801a16a:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	7f5b      	ldrb	r3, [r3, #29]
 801a170:	2b04      	cmp	r3, #4
 801a172:	d115      	bne.n	801a1a0 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	699b      	ldr	r3, [r3, #24]
 801a178:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a17a:	2300      	movs	r3, #0
 801a17c:	73fb      	strb	r3, [r7, #15]
 801a17e:	e00a      	b.n	801a196 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x34>
				output[i] = target_address[i];
 801a180:	7bfb      	ldrb	r3, [r7, #15]
 801a182:	68ba      	ldr	r2, [r7, #8]
 801a184:	441a      	add	r2, r3
 801a186:	7bfb      	ldrb	r3, [r7, #15]
 801a188:	6839      	ldr	r1, [r7, #0]
 801a18a:	440b      	add	r3, r1
 801a18c:	7812      	ldrb	r2, [r2, #0]
 801a18e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a190:	7bfb      	ldrb	r3, [r7, #15]
 801a192:	3301      	adds	r3, #1
 801a194:	73fb      	strb	r3, [r7, #15]
 801a196:	7bfb      	ldrb	r3, [r7, #15]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d0f1      	beq.n	801a180 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x1e>
			return sizeof(output_type);
 801a19c:	2301      	movs	r3, #1
 801a19e:	e000      	b.n	801a1a2 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x40>
		return 0;
 801a1a0:	2300      	movs	r3, #0
	}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3714      	adds	r7, #20
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ac:	4770      	bx	lr

0801a1ae <_ZN24core_utils_RegisterEntryIhA3_fE7getTypeEv>:
	register_entry_type_t getType() {
 801a1ae:	b480      	push	{r7}
 801a1b0:	b083      	sub	sp, #12
 801a1b2:	af00      	add	r7, sp, #0
 801a1b4:	6078      	str	r0, [r7, #4]
		return this->type;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	7f5b      	ldrb	r3, [r3, #29]
	}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	370c      	adds	r7, #12
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c4:	4770      	bx	lr

0801a1c6 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a1c6:	b480      	push	{r7}
 801a1c8:	b083      	sub	sp, #12
 801a1ca:	af00      	add	r7, sp, #0
 801a1cc:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a1ce:	2308      	movs	r3, #8
	}
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	370c      	adds	r7, #12
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1da:	4770      	bx	lr

0801a1dc <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a1dc:	b480      	push	{r7}
 801a1de:	b083      	sub	sp, #12
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
		return 0;
 801a1e4:	2300      	movs	r3, #0
	}
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	370c      	adds	r7, #12
 801a1ea:	46bd      	mov	sp, r7
 801a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f0:	4770      	bx	lr

0801a1f2 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a1f2:	b580      	push	{r7, lr}
 801a1f4:	b086      	sub	sp, #24
 801a1f6:	af00      	add	r7, sp, #0
 801a1f8:	60f8      	str	r0, [r7, #12]
 801a1fa:	60b9      	str	r1, [r7, #8]
 801a1fc:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a1fe:	2300      	movs	r3, #0
 801a200:	75fb      	strb	r3, [r7, #23]
 801a202:	e00b      	b.n	801a21c <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a204:	7dfb      	ldrb	r3, [r7, #23]
 801a206:	68ba      	ldr	r2, [r7, #8]
 801a208:	441a      	add	r2, r3
 801a20a:	7dfb      	ldrb	r3, [r7, #23]
 801a20c:	7811      	ldrb	r1, [r2, #0]
 801a20e:	68fa      	ldr	r2, [r7, #12]
 801a210:	4413      	add	r3, r2
 801a212:	460a      	mov	r2, r1
 801a214:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a216:	7dfb      	ldrb	r3, [r7, #23]
 801a218:	3301      	adds	r3, #1
 801a21a:	75fb      	strb	r3, [r7, #23]
 801a21c:	7dfb      	ldrb	r3, [r7, #23]
 801a21e:	2b07      	cmp	r3, #7
 801a220:	d9f0      	bls.n	801a204 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	f103 0218 	add.w	r2, r3, #24
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	ed93 7a02 	vldr	s14, [r3, #8]
 801a22e:	edd3 7a03 	vldr	s15, [r3, #12]
 801a232:	eeb0 0a47 	vmov.f32	s0, s14
 801a236:	eef0 0a67 	vmov.f32	s1, s15
 801a23a:	4610      	mov	r0, r2
 801a23c:	f000 feb7 	bl	801afae <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tE4callES0_>
		return this->getOutputSize();
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	3304      	adds	r3, #4
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	68f8      	ldr	r0, [r7, #12]
 801a24a:	4798      	blx	r3
 801a24c:	4603      	mov	r3, r0
	}
 801a24e:	4618      	mov	r0, r3
 801a250:	3718      	adds	r7, #24
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}

0801a256 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh>:
	void write(uint8_t *input) {
 801a256:	b480      	push	{r7}
 801a258:	b085      	sub	sp, #20
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	6078      	str	r0, [r7, #4]
 801a25e:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	7d5b      	ldrb	r3, [r3, #21]
 801a264:	2b02      	cmp	r3, #2
 801a266:	d113      	bne.n	801a290 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	691b      	ldr	r3, [r3, #16]
 801a26c:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a26e:	2300      	movs	r3, #0
 801a270:	73fb      	strb	r3, [r7, #15]
 801a272:	e00a      	b.n	801a28a <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801a274:	7bfb      	ldrb	r3, [r7, #15]
 801a276:	683a      	ldr	r2, [r7, #0]
 801a278:	441a      	add	r2, r3
 801a27a:	7bfb      	ldrb	r3, [r7, #15]
 801a27c:	68b9      	ldr	r1, [r7, #8]
 801a27e:	440b      	add	r3, r1
 801a280:	7812      	ldrb	r2, [r2, #0]
 801a282:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a284:	7bfb      	ldrb	r3, [r7, #15]
 801a286:	3301      	adds	r3, #1
 801a288:	73fb      	strb	r3, [r7, #15]
 801a28a:	7bfb      	ldrb	r3, [r7, #15]
 801a28c:	2b07      	cmp	r3, #7
 801a28e:	d9f1      	bls.n	801a274 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh+0x1e>
	}
 801a290:	bf00      	nop
 801a292:	3714      	adds	r7, #20
 801a294:	46bd      	mov	sp, r7
 801a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29a:	4770      	bx	lr

0801a29c <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7getTypeEv>:
	register_entry_type_t getType() {
 801a29c:	b480      	push	{r7}
 801a29e:	b083      	sub	sp, #12
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
		return this->type;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	7d5b      	ldrb	r3, [r3, #21]
	}
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	370c      	adds	r7, #12
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b2:	4770      	bx	lr

0801a2b4 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a2b4:	b480      	push	{r7}
 801a2b6:	b083      	sub	sp, #12
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a2bc:	2308      	movs	r3, #8
	}
 801a2be:	4618      	mov	r0, r3
 801a2c0:	370c      	adds	r7, #12
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c8:	4770      	bx	lr

0801a2ca <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a2ca:	b480      	push	{r7}
 801a2cc:	b083      	sub	sp, #12
 801a2ce:	af00      	add	r7, sp, #0
 801a2d0:	6078      	str	r0, [r7, #4]
		return 0;
 801a2d2:	2300      	movs	r3, #0
	}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	370c      	adds	r7, #12
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2de:	4770      	bx	lr

0801a2e0 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b086      	sub	sp, #24
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	60f8      	str	r0, [r7, #12]
 801a2e8:	60b9      	str	r1, [r7, #8]
 801a2ea:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	75fb      	strb	r3, [r7, #23]
 801a2f0:	e00b      	b.n	801a30a <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a2f2:	7dfb      	ldrb	r3, [r7, #23]
 801a2f4:	68ba      	ldr	r2, [r7, #8]
 801a2f6:	441a      	add	r2, r3
 801a2f8:	7dfb      	ldrb	r3, [r7, #23]
 801a2fa:	7811      	ldrb	r1, [r2, #0]
 801a2fc:	68fa      	ldr	r2, [r7, #12]
 801a2fe:	4413      	add	r3, r2
 801a300:	460a      	mov	r2, r1
 801a302:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a304:	7dfb      	ldrb	r3, [r7, #23]
 801a306:	3301      	adds	r3, #1
 801a308:	75fb      	strb	r3, [r7, #23]
 801a30a:	7dfb      	ldrb	r3, [r7, #23]
 801a30c:	2b07      	cmp	r3, #7
 801a30e:	d9f0      	bls.n	801a2f2 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	f103 0218 	add.w	r2, r3, #24
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	ed93 7a02 	vldr	s14, [r3, #8]
 801a31c:	edd3 7a03 	vldr	s15, [r3, #12]
 801a320:	eeb0 0a47 	vmov.f32	s0, s14
 801a324:	eef0 0a67 	vmov.f32	s1, s15
 801a328:	4610      	mov	r0, r2
 801a32a:	f000 fe5d 	bl	801afe8 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tE4callES0_>
		return this->getOutputSize();
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	3304      	adds	r3, #4
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	68f8      	ldr	r0, [r7, #12]
 801a338:	4798      	blx	r3
 801a33a:	4603      	mov	r3, r0
	}
 801a33c:	4618      	mov	r0, r3
 801a33e:	3718      	adds	r7, #24
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}

0801a344 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh>:
	void write(uint8_t *input) {
 801a344:	b480      	push	{r7}
 801a346:	b085      	sub	sp, #20
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	7d5b      	ldrb	r3, [r3, #21]
 801a352:	2b02      	cmp	r3, #2
 801a354:	d113      	bne.n	801a37e <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	691b      	ldr	r3, [r3, #16]
 801a35a:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a35c:	2300      	movs	r3, #0
 801a35e:	73fb      	strb	r3, [r7, #15]
 801a360:	e00a      	b.n	801a378 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801a362:	7bfb      	ldrb	r3, [r7, #15]
 801a364:	683a      	ldr	r2, [r7, #0]
 801a366:	441a      	add	r2, r3
 801a368:	7bfb      	ldrb	r3, [r7, #15]
 801a36a:	68b9      	ldr	r1, [r7, #8]
 801a36c:	440b      	add	r3, r1
 801a36e:	7812      	ldrb	r2, [r2, #0]
 801a370:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a372:	7bfb      	ldrb	r3, [r7, #15]
 801a374:	3301      	adds	r3, #1
 801a376:	73fb      	strb	r3, [r7, #15]
 801a378:	7bfb      	ldrb	r3, [r7, #15]
 801a37a:	2b07      	cmp	r3, #7
 801a37c:	d9f1      	bls.n	801a362 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh+0x1e>
	}
 801a37e:	bf00      	nop
 801a380:	3714      	adds	r7, #20
 801a382:	46bd      	mov	sp, r7
 801a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a388:	4770      	bx	lr

0801a38a <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7getTypeEv>:
	register_entry_type_t getType() {
 801a38a:	b480      	push	{r7}
 801a38c:	b083      	sub	sp, #12
 801a38e:	af00      	add	r7, sp, #0
 801a390:	6078      	str	r0, [r7, #4]
		return this->type;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	7d5b      	ldrb	r3, [r3, #21]
	}
 801a396:	4618      	mov	r0, r3
 801a398:	370c      	adds	r7, #12
 801a39a:	46bd      	mov	sp, r7
 801a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a0:	4770      	bx	lr

0801a3a2 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a3a2:	b480      	push	{r7}
 801a3a4:	b083      	sub	sp, #12
 801a3a6:	af00      	add	r7, sp, #0
 801a3a8:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a3aa:	2308      	movs	r3, #8
	}
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	370c      	adds	r7, #12
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b6:	4770      	bx	lr

0801a3b8 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a3b8:	b480      	push	{r7}
 801a3ba:	b083      	sub	sp, #12
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
		return 0;
 801a3c0:	2300      	movs	r3, #0
	}
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	370c      	adds	r7, #12
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3cc:	4770      	bx	lr

0801a3ce <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a3ce:	b580      	push	{r7, lr}
 801a3d0:	b086      	sub	sp, #24
 801a3d2:	af00      	add	r7, sp, #0
 801a3d4:	60f8      	str	r0, [r7, #12]
 801a3d6:	60b9      	str	r1, [r7, #8]
 801a3d8:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a3da:	2300      	movs	r3, #0
 801a3dc:	75fb      	strb	r3, [r7, #23]
 801a3de:	e00b      	b.n	801a3f8 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a3e0:	7dfb      	ldrb	r3, [r7, #23]
 801a3e2:	68ba      	ldr	r2, [r7, #8]
 801a3e4:	441a      	add	r2, r3
 801a3e6:	7dfb      	ldrb	r3, [r7, #23]
 801a3e8:	7811      	ldrb	r1, [r2, #0]
 801a3ea:	68fa      	ldr	r2, [r7, #12]
 801a3ec:	4413      	add	r3, r2
 801a3ee:	460a      	mov	r2, r1
 801a3f0:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a3f2:	7dfb      	ldrb	r3, [r7, #23]
 801a3f4:	3301      	adds	r3, #1
 801a3f6:	75fb      	strb	r3, [r7, #23]
 801a3f8:	7dfb      	ldrb	r3, [r7, #23]
 801a3fa:	2b07      	cmp	r3, #7
 801a3fc:	d9f0      	bls.n	801a3e0 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	f103 0218 	add.w	r2, r3, #24
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	ed93 7a02 	vldr	s14, [r3, #8]
 801a40a:	edd3 7a03 	vldr	s15, [r3, #12]
 801a40e:	eeb0 0a47 	vmov.f32	s0, s14
 801a412:	eef0 0a67 	vmov.f32	s1, s15
 801a416:	4610      	mov	r0, r2
 801a418:	f000 fe03 	bl	801b022 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tE4callES0_>
		return this->getOutputSize();
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	3304      	adds	r3, #4
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	68f8      	ldr	r0, [r7, #12]
 801a426:	4798      	blx	r3
 801a428:	4603      	mov	r3, r0
	}
 801a42a:	4618      	mov	r0, r3
 801a42c:	3718      	adds	r7, #24
 801a42e:	46bd      	mov	sp, r7
 801a430:	bd80      	pop	{r7, pc}

0801a432 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh>:
	void write(uint8_t *input) {
 801a432:	b480      	push	{r7}
 801a434:	b085      	sub	sp, #20
 801a436:	af00      	add	r7, sp, #0
 801a438:	6078      	str	r0, [r7, #4]
 801a43a:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	7d5b      	ldrb	r3, [r3, #21]
 801a440:	2b02      	cmp	r3, #2
 801a442:	d113      	bne.n	801a46c <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	691b      	ldr	r3, [r3, #16]
 801a448:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a44a:	2300      	movs	r3, #0
 801a44c:	73fb      	strb	r3, [r7, #15]
 801a44e:	e00a      	b.n	801a466 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801a450:	7bfb      	ldrb	r3, [r7, #15]
 801a452:	683a      	ldr	r2, [r7, #0]
 801a454:	441a      	add	r2, r3
 801a456:	7bfb      	ldrb	r3, [r7, #15]
 801a458:	68b9      	ldr	r1, [r7, #8]
 801a45a:	440b      	add	r3, r1
 801a45c:	7812      	ldrb	r2, [r2, #0]
 801a45e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a460:	7bfb      	ldrb	r3, [r7, #15]
 801a462:	3301      	adds	r3, #1
 801a464:	73fb      	strb	r3, [r7, #15]
 801a466:	7bfb      	ldrb	r3, [r7, #15]
 801a468:	2b07      	cmp	r3, #7
 801a46a:	d9f1      	bls.n	801a450 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh+0x1e>
	}
 801a46c:	bf00      	nop
 801a46e:	3714      	adds	r7, #20
 801a470:	46bd      	mov	sp, r7
 801a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a476:	4770      	bx	lr

0801a478 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7getTypeEv>:
	register_entry_type_t getType() {
 801a478:	b480      	push	{r7}
 801a47a:	b083      	sub	sp, #12
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
		return this->type;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	7d5b      	ldrb	r3, [r3, #21]
	}
 801a484:	4618      	mov	r0, r3
 801a486:	370c      	adds	r7, #12
 801a488:	46bd      	mov	sp, r7
 801a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48e:	4770      	bx	lr

0801a490 <_ZN24core_utils_RegisterEntryIhA8_fE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a490:	b480      	push	{r7}
 801a492:	b083      	sub	sp, #12
 801a494:	af00      	add	r7, sp, #0
 801a496:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a498:	2320      	movs	r3, #32
	}
 801a49a:	4618      	mov	r0, r3
 801a49c:	370c      	adds	r7, #12
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a4:	4770      	bx	lr

0801a4a6 <_ZN24core_utils_RegisterEntryIhA8_fE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a4a6:	b480      	push	{r7}
 801a4a8:	b083      	sub	sp, #12
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801a4ae:	2301      	movs	r3, #1
	}
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	370c      	adds	r7, #12
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ba:	4770      	bx	lr

0801a4bc <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b086      	sub	sp, #24
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	60f8      	str	r0, [r7, #12]
 801a4c4:	60b9      	str	r1, [r7, #8]
 801a4c6:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	75fb      	strb	r3, [r7, #23]
 801a4cc:	e00b      	b.n	801a4e6 <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a4ce:	7dfb      	ldrb	r3, [r7, #23]
 801a4d0:	68ba      	ldr	r2, [r7, #8]
 801a4d2:	441a      	add	r2, r3
 801a4d4:	7dfb      	ldrb	r3, [r7, #23]
 801a4d6:	7811      	ldrb	r1, [r2, #0]
 801a4d8:	68fa      	ldr	r2, [r7, #12]
 801a4da:	4413      	add	r3, r2
 801a4dc:	460a      	mov	r2, r1
 801a4de:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a4e0:	7dfb      	ldrb	r3, [r7, #23]
 801a4e2:	3301      	adds	r3, #1
 801a4e4:	75fb      	strb	r3, [r7, #23]
 801a4e6:	7dfb      	ldrb	r3, [r7, #23]
 801a4e8:	2b1f      	cmp	r3, #31
 801a4ea:	d9f0      	bls.n	801a4ce <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data,
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	f103 0108 	add.w	r1, r3, #8
				this->output_data_union_t.data);
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	3328      	adds	r3, #40	@ 0x28
		this->callback.call(this->input_data_union.data,
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	f000 fdad 	bl	801b05c <_ZN19core_utils_CallbackIhA8_fE4callEPfRh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a502:	2300      	movs	r3, #0
 801a504:	75bb      	strb	r3, [r7, #22]
 801a506:	e00b      	b.n	801a520 <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x64>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801a508:	7dba      	ldrb	r2, [r7, #22]
 801a50a:	7dbb      	ldrb	r3, [r7, #22]
 801a50c:	6879      	ldr	r1, [r7, #4]
 801a50e:	440b      	add	r3, r1
 801a510:	68f9      	ldr	r1, [r7, #12]
 801a512:	440a      	add	r2, r1
 801a514:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801a518:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a51a:	7dbb      	ldrb	r3, [r7, #22]
 801a51c:	3301      	adds	r3, #1
 801a51e:	75bb      	strb	r3, [r7, #22]
 801a520:	7dbb      	ldrb	r3, [r7, #22]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d0f0      	beq.n	801a508 <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x4c>
		return this->getOutputSize();
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	3304      	adds	r3, #4
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	68f8      	ldr	r0, [r7, #12]
 801a530:	4798      	blx	r3
 801a532:	4603      	mov	r3, r0
	}
 801a534:	4618      	mov	r0, r3
 801a536:	3718      	adds	r7, #24
 801a538:	46bd      	mov	sp, r7
 801a53a:	bd80      	pop	{r7, pc}

0801a53c <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh>:
	void write(uint8_t *input) {
 801a53c:	b480      	push	{r7}
 801a53e:	b085      	sub	sp, #20
 801a540:	af00      	add	r7, sp, #0
 801a542:	6078      	str	r0, [r7, #4]
 801a544:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a54c:	2b04      	cmp	r3, #4
 801a54e:	d113      	bne.n	801a578 <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh+0x3c>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a554:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a556:	2300      	movs	r3, #0
 801a558:	73fb      	strb	r3, [r7, #15]
 801a55a:	e00a      	b.n	801a572 <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh+0x36>
				target_address[i] = input[i];
 801a55c:	7bfb      	ldrb	r3, [r7, #15]
 801a55e:	683a      	ldr	r2, [r7, #0]
 801a560:	441a      	add	r2, r3
 801a562:	7bfb      	ldrb	r3, [r7, #15]
 801a564:	68b9      	ldr	r1, [r7, #8]
 801a566:	440b      	add	r3, r1
 801a568:	7812      	ldrb	r2, [r2, #0]
 801a56a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a56c:	7bfb      	ldrb	r3, [r7, #15]
 801a56e:	3301      	adds	r3, #1
 801a570:	73fb      	strb	r3, [r7, #15]
 801a572:	7bfb      	ldrb	r3, [r7, #15]
 801a574:	2b1f      	cmp	r3, #31
 801a576:	d9f1      	bls.n	801a55c <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh+0x20>
	}
 801a578:	bf00      	nop
 801a57a:	3714      	adds	r7, #20
 801a57c:	46bd      	mov	sp, r7
 801a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a582:	4770      	bx	lr

0801a584 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh>:
	uint16_t read(uint8_t *output) {
 801a584:	b480      	push	{r7}
 801a586:	b085      	sub	sp, #20
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a594:	2b04      	cmp	r3, #4
 801a596:	d115      	bne.n	801a5c4 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x40>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a59c:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a59e:	2300      	movs	r3, #0
 801a5a0:	73fb      	strb	r3, [r7, #15]
 801a5a2:	e00a      	b.n	801a5ba <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x36>
				output[i] = target_address[i];
 801a5a4:	7bfb      	ldrb	r3, [r7, #15]
 801a5a6:	68ba      	ldr	r2, [r7, #8]
 801a5a8:	441a      	add	r2, r3
 801a5aa:	7bfb      	ldrb	r3, [r7, #15]
 801a5ac:	6839      	ldr	r1, [r7, #0]
 801a5ae:	440b      	add	r3, r1
 801a5b0:	7812      	ldrb	r2, [r2, #0]
 801a5b2:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a5b4:	7bfb      	ldrb	r3, [r7, #15]
 801a5b6:	3301      	adds	r3, #1
 801a5b8:	73fb      	strb	r3, [r7, #15]
 801a5ba:	7bfb      	ldrb	r3, [r7, #15]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d0f1      	beq.n	801a5a4 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x20>
			return sizeof(output_type);
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	e000      	b.n	801a5c6 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x42>
		return 0;
 801a5c4:	2300      	movs	r3, #0
	}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	3714      	adds	r7, #20
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d0:	4770      	bx	lr

0801a5d2 <_ZN24core_utils_RegisterEntryIhA8_fE7getTypeEv>:
	register_entry_type_t getType() {
 801a5d2:	b480      	push	{r7}
 801a5d4:	b083      	sub	sp, #12
 801a5d6:	af00      	add	r7, sp, #0
 801a5d8:	6078      	str	r0, [r7, #4]
		return this->type;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
	}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	370c      	adds	r7, #12
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ea:	4770      	bx	lr

0801a5ec <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a5ec:	b480      	push	{r7}
 801a5ee:	b083      	sub	sp, #12
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a5f4:	2301      	movs	r3, #1
	}
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	370c      	adds	r7, #12
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a600:	4770      	bx	lr

0801a602 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a602:	b480      	push	{r7}
 801a604:	b083      	sub	sp, #12
 801a606:	af00      	add	r7, sp, #0
 801a608:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801a60a:	2301      	movs	r3, #1
	}
 801a60c:	4618      	mov	r0, r3
 801a60e:	370c      	adds	r7, #12
 801a610:	46bd      	mov	sp, r7
 801a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a616:	4770      	bx	lr

0801a618 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a618:	b580      	push	{r7, lr}
 801a61a:	b086      	sub	sp, #24
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	60b9      	str	r1, [r7, #8]
 801a622:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a624:	2300      	movs	r3, #0
 801a626:	75fb      	strb	r3, [r7, #23]
 801a628:	e00b      	b.n	801a642 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a62a:	7dfb      	ldrb	r3, [r7, #23]
 801a62c:	68ba      	ldr	r2, [r7, #8]
 801a62e:	441a      	add	r2, r3
 801a630:	7dfb      	ldrb	r3, [r7, #23]
 801a632:	7811      	ldrb	r1, [r2, #0]
 801a634:	68fa      	ldr	r2, [r7, #12]
 801a636:	4413      	add	r3, r2
 801a638:	460a      	mov	r2, r1
 801a63a:	715a      	strb	r2, [r3, #5]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a63c:	7dfb      	ldrb	r3, [r7, #23]
 801a63e:	3301      	adds	r3, #1
 801a640:	75fb      	strb	r3, [r7, #23]
 801a642:	7dfb      	ldrb	r3, [r7, #23]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d0f0      	beq.n	801a62a <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data,
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	f103 0010 	add.w	r0, r3, #16
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	7959      	ldrb	r1, [r3, #5]
				this->output_data_union_t.data);
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	3306      	adds	r3, #6
		this->callback.call(this->input_data_union.data,
 801a656:	461a      	mov	r2, r3
 801a658:	f000 fd14 	bl	801b084 <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_Rh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a65c:	2300      	movs	r3, #0
 801a65e:	75bb      	strb	r3, [r7, #22]
 801a660:	e00a      	b.n	801a678 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x60>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801a662:	7dba      	ldrb	r2, [r7, #22]
 801a664:	7dbb      	ldrb	r3, [r7, #22]
 801a666:	6879      	ldr	r1, [r7, #4]
 801a668:	440b      	add	r3, r1
 801a66a:	68f9      	ldr	r1, [r7, #12]
 801a66c:	440a      	add	r2, r1
 801a66e:	7992      	ldrb	r2, [r2, #6]
 801a670:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a672:	7dbb      	ldrb	r3, [r7, #22]
 801a674:	3301      	adds	r3, #1
 801a676:	75bb      	strb	r3, [r7, #22]
 801a678:	7dbb      	ldrb	r3, [r7, #22]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d0f1      	beq.n	801a662 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x4a>
		return this->getOutputSize();
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	3304      	adds	r3, #4
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	68f8      	ldr	r0, [r7, #12]
 801a688:	4798      	blx	r3
 801a68a:	4603      	mov	r3, r0
	}
 801a68c:	4618      	mov	r0, r3
 801a68e:	3718      	adds	r7, #24
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}

0801a694 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh>:
	void write(uint8_t *input) {
 801a694:	b480      	push	{r7}
 801a696:	b085      	sub	sp, #20
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	7b5b      	ldrb	r3, [r3, #13]
 801a6a2:	2b04      	cmp	r3, #4
 801a6a4:	d113      	bne.n	801a6ce <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	689b      	ldr	r3, [r3, #8]
 801a6aa:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	73fb      	strb	r3, [r7, #15]
 801a6b0:	e00a      	b.n	801a6c8 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801a6b2:	7bfb      	ldrb	r3, [r7, #15]
 801a6b4:	683a      	ldr	r2, [r7, #0]
 801a6b6:	441a      	add	r2, r3
 801a6b8:	7bfb      	ldrb	r3, [r7, #15]
 801a6ba:	68b9      	ldr	r1, [r7, #8]
 801a6bc:	440b      	add	r3, r1
 801a6be:	7812      	ldrb	r2, [r2, #0]
 801a6c0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a6c2:	7bfb      	ldrb	r3, [r7, #15]
 801a6c4:	3301      	adds	r3, #1
 801a6c6:	73fb      	strb	r3, [r7, #15]
 801a6c8:	7bfb      	ldrb	r3, [r7, #15]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d0f1      	beq.n	801a6b2 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh+0x1e>
	}
 801a6ce:	bf00      	nop
 801a6d0:	3714      	adds	r7, #20
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d8:	4770      	bx	lr

0801a6da <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh>:
	uint16_t read(uint8_t *output) {
 801a6da:	b480      	push	{r7}
 801a6dc:	b085      	sub	sp, #20
 801a6de:	af00      	add	r7, sp, #0
 801a6e0:	6078      	str	r0, [r7, #4]
 801a6e2:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	7b5b      	ldrb	r3, [r3, #13]
 801a6e8:	2b04      	cmp	r3, #4
 801a6ea:	d115      	bne.n	801a718 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	689b      	ldr	r3, [r3, #8]
 801a6f0:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	73fb      	strb	r3, [r7, #15]
 801a6f6:	e00a      	b.n	801a70e <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x34>
				output[i] = target_address[i];
 801a6f8:	7bfb      	ldrb	r3, [r7, #15]
 801a6fa:	68ba      	ldr	r2, [r7, #8]
 801a6fc:	441a      	add	r2, r3
 801a6fe:	7bfb      	ldrb	r3, [r7, #15]
 801a700:	6839      	ldr	r1, [r7, #0]
 801a702:	440b      	add	r3, r1
 801a704:	7812      	ldrb	r2, [r2, #0]
 801a706:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a708:	7bfb      	ldrb	r3, [r7, #15]
 801a70a:	3301      	adds	r3, #1
 801a70c:	73fb      	strb	r3, [r7, #15]
 801a70e:	7bfb      	ldrb	r3, [r7, #15]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d0f1      	beq.n	801a6f8 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x1e>
			return sizeof(output_type);
 801a714:	2301      	movs	r3, #1
 801a716:	e000      	b.n	801a71a <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x40>
		return 0;
 801a718:	2300      	movs	r3, #0
	}
 801a71a:	4618      	mov	r0, r3
 801a71c:	3714      	adds	r7, #20
 801a71e:	46bd      	mov	sp, r7
 801a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a724:	4770      	bx	lr

0801a726 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7getTypeEv>:
	register_entry_type_t getType() {
 801a726:	b480      	push	{r7}
 801a728:	b083      	sub	sp, #12
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	6078      	str	r0, [r7, #4]
		return this->type;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	7b5b      	ldrb	r3, [r3, #13]
	}
 801a732:	4618      	mov	r0, r3
 801a734:	370c      	adds	r7, #12
 801a736:	46bd      	mov	sp, r7
 801a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73c:	4770      	bx	lr

0801a73e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a73e:	b480      	push	{r7}
 801a740:	b083      	sub	sp, #12
 801a742:	af00      	add	r7, sp, #0
 801a744:	6078      	str	r0, [r7, #4]
		return 0;
 801a746:	2300      	movs	r3, #0
	}
 801a748:	4618      	mov	r0, r3
 801a74a:	370c      	adds	r7, #12
 801a74c:	46bd      	mov	sp, r7
 801a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a752:	4770      	bx	lr

0801a754 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a754:	b480      	push	{r7}
 801a756:	b083      	sub	sp, #12
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801a75c:	2301      	movs	r3, #1
	}
 801a75e:	4618      	mov	r0, r3
 801a760:	370c      	adds	r7, #12
 801a762:	46bd      	mov	sp, r7
 801a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a768:	4770      	bx	lr

0801a76a <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a76a:	b580      	push	{r7, lr}
 801a76c:	b086      	sub	sp, #24
 801a76e:	af00      	add	r7, sp, #0
 801a770:	60f8      	str	r0, [r7, #12]
 801a772:	60b9      	str	r1, [r7, #8]
 801a774:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	f103 0210 	add.w	r2, r3, #16
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	3305      	adds	r3, #5
 801a780:	4619      	mov	r1, r3
 801a782:	4610      	mov	r0, r2
 801a784:	f000 fc94 	bl	801b0b0 <_ZN19core_utils_CallbackI20twipr_control_mode_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a788:	2300      	movs	r3, #0
 801a78a:	75fb      	strb	r3, [r7, #23]
 801a78c:	e00a      	b.n	801a7a4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801a78e:	7dfa      	ldrb	r2, [r7, #23]
 801a790:	7dfb      	ldrb	r3, [r7, #23]
 801a792:	6879      	ldr	r1, [r7, #4]
 801a794:	440b      	add	r3, r1
 801a796:	68f9      	ldr	r1, [r7, #12]
 801a798:	440a      	add	r2, r1
 801a79a:	7952      	ldrb	r2, [r2, #5]
 801a79c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a79e:	7dfb      	ldrb	r3, [r7, #23]
 801a7a0:	3301      	adds	r3, #1
 801a7a2:	75fb      	strb	r3, [r7, #23]
 801a7a4:	7dfb      	ldrb	r3, [r7, #23]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d0f1      	beq.n	801a78e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	3304      	adds	r3, #4
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	68f8      	ldr	r0, [r7, #12]
 801a7b4:	4798      	blx	r3
 801a7b6:	4603      	mov	r3, r0
	}
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	3718      	adds	r7, #24
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}

0801a7c0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801a7c0:	b480      	push	{r7}
 801a7c2:	b085      	sub	sp, #20
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
 801a7c8:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	7b5b      	ldrb	r3, [r3, #13]
 801a7ce:	2b03      	cmp	r3, #3
 801a7d0:	d115      	bne.n	801a7fe <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	689b      	ldr	r3, [r3, #8]
 801a7d6:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a7d8:	2300      	movs	r3, #0
 801a7da:	73fb      	strb	r3, [r7, #15]
 801a7dc:	e00a      	b.n	801a7f4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x34>
				output[i] = target_address[i];
 801a7de:	7bfb      	ldrb	r3, [r7, #15]
 801a7e0:	68ba      	ldr	r2, [r7, #8]
 801a7e2:	441a      	add	r2, r3
 801a7e4:	7bfb      	ldrb	r3, [r7, #15]
 801a7e6:	6839      	ldr	r1, [r7, #0]
 801a7e8:	440b      	add	r3, r1
 801a7ea:	7812      	ldrb	r2, [r2, #0]
 801a7ec:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a7ee:	7bfb      	ldrb	r3, [r7, #15]
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	73fb      	strb	r3, [r7, #15]
 801a7f4:	7bfb      	ldrb	r3, [r7, #15]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d0f1      	beq.n	801a7de <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x1e>
			return sizeof(output_type);
 801a7fa:	2301      	movs	r3, #1
 801a7fc:	e000      	b.n	801a800 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x40>
		return 0;
 801a7fe:	2300      	movs	r3, #0
	}
 801a800:	4618      	mov	r0, r3
 801a802:	3714      	adds	r7, #20
 801a804:	46bd      	mov	sp, r7
 801a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a80a:	4770      	bx	lr

0801a80c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801a80c:	b480      	push	{r7}
 801a80e:	b083      	sub	sp, #12
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
		return this->type;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	7b5b      	ldrb	r3, [r3, #13]
	}
 801a818:	4618      	mov	r0, r3
 801a81a:	370c      	adds	r7, #12
 801a81c:	46bd      	mov	sp, r7
 801a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a822:	4770      	bx	lr

0801a824 <_ZN24core_utils_RegisterEntryIffE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a824:	b480      	push	{r7}
 801a826:	b083      	sub	sp, #12
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801a82c:	2304      	movs	r3, #4
	}
 801a82e:	4618      	mov	r0, r3
 801a830:	370c      	adds	r7, #12
 801a832:	46bd      	mov	sp, r7
 801a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a838:	4770      	bx	lr

0801a83a <_ZN24core_utils_RegisterEntryIffE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a83a:	b480      	push	{r7}
 801a83c:	b083      	sub	sp, #12
 801a83e:	af00      	add	r7, sp, #0
 801a840:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801a842:	2304      	movs	r3, #4
	}
 801a844:	4618      	mov	r0, r3
 801a846:	370c      	adds	r7, #12
 801a848:	46bd      	mov	sp, r7
 801a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a84e:	4770      	bx	lr

0801a850 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a850:	b580      	push	{r7, lr}
 801a852:	b086      	sub	sp, #24
 801a854:	af00      	add	r7, sp, #0
 801a856:	60f8      	str	r0, [r7, #12]
 801a858:	60b9      	str	r1, [r7, #8]
 801a85a:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a85c:	2300      	movs	r3, #0
 801a85e:	75fb      	strb	r3, [r7, #23]
 801a860:	e00b      	b.n	801a87a <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801a862:	7dfb      	ldrb	r3, [r7, #23]
 801a864:	68ba      	ldr	r2, [r7, #8]
 801a866:	441a      	add	r2, r3
 801a868:	7dfb      	ldrb	r3, [r7, #23]
 801a86a:	7811      	ldrb	r1, [r2, #0]
 801a86c:	68fa      	ldr	r2, [r7, #12]
 801a86e:	4413      	add	r3, r2
 801a870:	460a      	mov	r2, r1
 801a872:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a874:	7dfb      	ldrb	r3, [r7, #23]
 801a876:	3301      	adds	r3, #1
 801a878:	75fb      	strb	r3, [r7, #23]
 801a87a:	7dfb      	ldrb	r3, [r7, #23]
 801a87c:	2b03      	cmp	r3, #3
 801a87e:	d9f0      	bls.n	801a862 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x12>
		this->callback.call(this->input_data_union.data,
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	f103 0218 	add.w	r2, r3, #24
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	edd3 7a02 	vldr	s15, [r3, #8]
				this->output_data_union_t.data);
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	330c      	adds	r3, #12
		this->callback.call(this->input_data_union.data,
 801a890:	4619      	mov	r1, r3
 801a892:	eeb0 0a67 	vmov.f32	s0, s15
 801a896:	4610      	mov	r0, r2
 801a898:	f000 fc1c 	bl	801b0d4 <_ZN19core_utils_CallbackIffE4callEfRf>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a89c:	2300      	movs	r3, #0
 801a89e:	75bb      	strb	r3, [r7, #22]
 801a8a0:	e00a      	b.n	801a8b8 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x68>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801a8a2:	7dba      	ldrb	r2, [r7, #22]
 801a8a4:	7dbb      	ldrb	r3, [r7, #22]
 801a8a6:	6879      	ldr	r1, [r7, #4]
 801a8a8:	440b      	add	r3, r1
 801a8aa:	68f9      	ldr	r1, [r7, #12]
 801a8ac:	440a      	add	r2, r1
 801a8ae:	7b12      	ldrb	r2, [r2, #12]
 801a8b0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a8b2:	7dbb      	ldrb	r3, [r7, #22]
 801a8b4:	3301      	adds	r3, #1
 801a8b6:	75bb      	strb	r3, [r7, #22]
 801a8b8:	7dbb      	ldrb	r3, [r7, #22]
 801a8ba:	2b03      	cmp	r3, #3
 801a8bc:	d9f1      	bls.n	801a8a2 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x52>
		return this->getOutputSize();
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	3304      	adds	r3, #4
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	68f8      	ldr	r0, [r7, #12]
 801a8c8:	4798      	blx	r3
 801a8ca:	4603      	mov	r3, r0
	}
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	3718      	adds	r7, #24
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	bd80      	pop	{r7, pc}

0801a8d4 <_ZN24core_utils_RegisterEntryIffE5writeEPh>:
	void write(uint8_t *input) {
 801a8d4:	b480      	push	{r7}
 801a8d6:	b085      	sub	sp, #20
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
 801a8dc:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	7d5b      	ldrb	r3, [r3, #21]
 801a8e2:	2b04      	cmp	r3, #4
 801a8e4:	d113      	bne.n	801a90e <_ZN24core_utils_RegisterEntryIffE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	691b      	ldr	r3, [r3, #16]
 801a8ea:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	73fb      	strb	r3, [r7, #15]
 801a8f0:	e00a      	b.n	801a908 <_ZN24core_utils_RegisterEntryIffE5writeEPh+0x34>
				target_address[i] = input[i];
 801a8f2:	7bfb      	ldrb	r3, [r7, #15]
 801a8f4:	683a      	ldr	r2, [r7, #0]
 801a8f6:	441a      	add	r2, r3
 801a8f8:	7bfb      	ldrb	r3, [r7, #15]
 801a8fa:	68b9      	ldr	r1, [r7, #8]
 801a8fc:	440b      	add	r3, r1
 801a8fe:	7812      	ldrb	r2, [r2, #0]
 801a900:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801a902:	7bfb      	ldrb	r3, [r7, #15]
 801a904:	3301      	adds	r3, #1
 801a906:	73fb      	strb	r3, [r7, #15]
 801a908:	7bfb      	ldrb	r3, [r7, #15]
 801a90a:	2b03      	cmp	r3, #3
 801a90c:	d9f1      	bls.n	801a8f2 <_ZN24core_utils_RegisterEntryIffE5writeEPh+0x1e>
	}
 801a90e:	bf00      	nop
 801a910:	3714      	adds	r7, #20
 801a912:	46bd      	mov	sp, r7
 801a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a918:	4770      	bx	lr

0801a91a <_ZN24core_utils_RegisterEntryIffE4readEPh>:
	uint16_t read(uint8_t *output) {
 801a91a:	b480      	push	{r7}
 801a91c:	b085      	sub	sp, #20
 801a91e:	af00      	add	r7, sp, #0
 801a920:	6078      	str	r0, [r7, #4]
 801a922:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	7d5b      	ldrb	r3, [r3, #21]
 801a928:	2b04      	cmp	r3, #4
 801a92a:	d115      	bne.n	801a958 <_ZN24core_utils_RegisterEntryIffE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	691b      	ldr	r3, [r3, #16]
 801a930:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a932:	2300      	movs	r3, #0
 801a934:	73fb      	strb	r3, [r7, #15]
 801a936:	e00a      	b.n	801a94e <_ZN24core_utils_RegisterEntryIffE4readEPh+0x34>
				output[i] = target_address[i];
 801a938:	7bfb      	ldrb	r3, [r7, #15]
 801a93a:	68ba      	ldr	r2, [r7, #8]
 801a93c:	441a      	add	r2, r3
 801a93e:	7bfb      	ldrb	r3, [r7, #15]
 801a940:	6839      	ldr	r1, [r7, #0]
 801a942:	440b      	add	r3, r1
 801a944:	7812      	ldrb	r2, [r2, #0]
 801a946:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a948:	7bfb      	ldrb	r3, [r7, #15]
 801a94a:	3301      	adds	r3, #1
 801a94c:	73fb      	strb	r3, [r7, #15]
 801a94e:	7bfb      	ldrb	r3, [r7, #15]
 801a950:	2b03      	cmp	r3, #3
 801a952:	d9f1      	bls.n	801a938 <_ZN24core_utils_RegisterEntryIffE4readEPh+0x1e>
			return sizeof(output_type);
 801a954:	2304      	movs	r3, #4
 801a956:	e000      	b.n	801a95a <_ZN24core_utils_RegisterEntryIffE4readEPh+0x40>
		return 0;
 801a958:	2300      	movs	r3, #0
	}
 801a95a:	4618      	mov	r0, r3
 801a95c:	3714      	adds	r7, #20
 801a95e:	46bd      	mov	sp, r7
 801a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a964:	4770      	bx	lr

0801a966 <_ZN24core_utils_RegisterEntryIffE7getTypeEv>:
	register_entry_type_t getType() {
 801a966:	b480      	push	{r7}
 801a968:	b083      	sub	sp, #12
 801a96a:	af00      	add	r7, sp, #0
 801a96c:	6078      	str	r0, [r7, #4]
		return this->type;
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	7d5b      	ldrb	r3, [r3, #21]
	}
 801a972:	4618      	mov	r0, r3
 801a974:	370c      	adds	r7, #12
 801a976:	46bd      	mov	sp, r7
 801a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a97c:	4770      	bx	lr

0801a97e <_ZN24core_utils_RegisterEntryIhvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801a97e:	b480      	push	{r7}
 801a980:	b083      	sub	sp, #12
 801a982:	af00      	add	r7, sp, #0
 801a984:	6078      	str	r0, [r7, #4]
		return 0;
 801a986:	2300      	movs	r3, #0
	}
 801a988:	4618      	mov	r0, r3
 801a98a:	370c      	adds	r7, #12
 801a98c:	46bd      	mov	sp, r7
 801a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a992:	4770      	bx	lr

0801a994 <_ZN24core_utils_RegisterEntryIhvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801a994:	b480      	push	{r7}
 801a996:	b083      	sub	sp, #12
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801a99c:	2301      	movs	r3, #1
	}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	370c      	adds	r7, #12
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a8:	4770      	bx	lr

0801a9aa <_ZN24core_utils_RegisterEntryIhvE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b086      	sub	sp, #24
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	60f8      	str	r0, [r7, #12]
 801a9b2:	60b9      	str	r1, [r7, #8]
 801a9b4:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	f103 0210 	add.w	r2, r3, #16
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	3305      	adds	r3, #5
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	4610      	mov	r0, r2
 801a9c4:	f000 fb9d 	bl	801b102 <_ZN19core_utils_CallbackIhvE4callERh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	75fb      	strb	r3, [r7, #23]
 801a9cc:	e00a      	b.n	801a9e4 <_ZN24core_utils_RegisterEntryIhvE7executeEPhS1_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801a9ce:	7dfa      	ldrb	r2, [r7, #23]
 801a9d0:	7dfb      	ldrb	r3, [r7, #23]
 801a9d2:	6879      	ldr	r1, [r7, #4]
 801a9d4:	440b      	add	r3, r1
 801a9d6:	68f9      	ldr	r1, [r7, #12]
 801a9d8:	440a      	add	r2, r1
 801a9da:	7952      	ldrb	r2, [r2, #5]
 801a9dc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801a9de:	7dfb      	ldrb	r3, [r7, #23]
 801a9e0:	3301      	adds	r3, #1
 801a9e2:	75fb      	strb	r3, [r7, #23]
 801a9e4:	7dfb      	ldrb	r3, [r7, #23]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d0f1      	beq.n	801a9ce <_ZN24core_utils_RegisterEntryIhvE7executeEPhS1_+0x24>
		return this->getOutputSize();
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	3304      	adds	r3, #4
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	68f8      	ldr	r0, [r7, #12]
 801a9f4:	4798      	blx	r3
 801a9f6:	4603      	mov	r3, r0
	}
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	3718      	adds	r7, #24
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	bd80      	pop	{r7, pc}

0801aa00 <_ZN24core_utils_RegisterEntryIhvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801aa00:	b480      	push	{r7}
 801aa02:	b085      	sub	sp, #20
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	7b5b      	ldrb	r3, [r3, #13]
 801aa0e:	2b03      	cmp	r3, #3
 801aa10:	d115      	bne.n	801aa3e <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	689b      	ldr	r3, [r3, #8]
 801aa16:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aa18:	2300      	movs	r3, #0
 801aa1a:	73fb      	strb	r3, [r7, #15]
 801aa1c:	e00a      	b.n	801aa34 <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x34>
				output[i] = target_address[i];
 801aa1e:	7bfb      	ldrb	r3, [r7, #15]
 801aa20:	68ba      	ldr	r2, [r7, #8]
 801aa22:	441a      	add	r2, r3
 801aa24:	7bfb      	ldrb	r3, [r7, #15]
 801aa26:	6839      	ldr	r1, [r7, #0]
 801aa28:	440b      	add	r3, r1
 801aa2a:	7812      	ldrb	r2, [r2, #0]
 801aa2c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aa2e:	7bfb      	ldrb	r3, [r7, #15]
 801aa30:	3301      	adds	r3, #1
 801aa32:	73fb      	strb	r3, [r7, #15]
 801aa34:	7bfb      	ldrb	r3, [r7, #15]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d0f1      	beq.n	801aa1e <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x1e>
			return sizeof(output_type);
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	e000      	b.n	801aa40 <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x40>
		return 0;
 801aa3e:	2300      	movs	r3, #0
	}
 801aa40:	4618      	mov	r0, r3
 801aa42:	3714      	adds	r7, #20
 801aa44:	46bd      	mov	sp, r7
 801aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4a:	4770      	bx	lr

0801aa4c <_ZN24core_utils_RegisterEntryIhvE7getTypeEv>:
	register_entry_type_t getType() {
 801aa4c:	b480      	push	{r7}
 801aa4e:	b083      	sub	sp, #12
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
		return this->type;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	7b5b      	ldrb	r3, [r3, #13]
	}
 801aa58:	4618      	mov	r0, r3
 801aa5a:	370c      	adds	r7, #12
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa62:	4770      	bx	lr

0801aa64 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801aa64:	b480      	push	{r7}
 801aa66:	b083      	sub	sp, #12
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801aa6c:	2308      	movs	r3, #8
	}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	370c      	adds	r7, #12
 801aa72:	46bd      	mov	sp, r7
 801aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa78:	4770      	bx	lr

0801aa7a <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801aa7a:	b480      	push	{r7}
 801aa7c:	b083      	sub	sp, #12
 801aa7e:	af00      	add	r7, sp, #0
 801aa80:	6078      	str	r0, [r7, #4]
		return 0;
 801aa82:	2300      	movs	r3, #0
	}
 801aa84:	4618      	mov	r0, r3
 801aa86:	370c      	adds	r7, #12
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa8e:	4770      	bx	lr

0801aa90 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b086      	sub	sp, #24
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	60f8      	str	r0, [r7, #12]
 801aa98:	60b9      	str	r1, [r7, #8]
 801aa9a:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	75fb      	strb	r3, [r7, #23]
 801aaa0:	e00b      	b.n	801aaba <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801aaa2:	7dfb      	ldrb	r3, [r7, #23]
 801aaa4:	68ba      	ldr	r2, [r7, #8]
 801aaa6:	441a      	add	r2, r3
 801aaa8:	7dfb      	ldrb	r3, [r7, #23]
 801aaaa:	7811      	ldrb	r1, [r2, #0]
 801aaac:	68fa      	ldr	r2, [r7, #12]
 801aaae:	4413      	add	r3, r2
 801aab0:	460a      	mov	r2, r1
 801aab2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801aab4:	7dfb      	ldrb	r3, [r7, #23]
 801aab6:	3301      	adds	r3, #1
 801aab8:	75fb      	strb	r3, [r7, #23]
 801aaba:	7dfb      	ldrb	r3, [r7, #23]
 801aabc:	2b07      	cmp	r3, #7
 801aabe:	d9f0      	bls.n	801aaa2 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	f103 0018 	add.w	r0, r3, #24
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	3308      	adds	r3, #8
 801aaca:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aace:	f000 fb2a 	bl	801b126 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tE4callES0_>
		return this->getOutputSize();
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	3304      	adds	r3, #4
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	68f8      	ldr	r0, [r7, #12]
 801aadc:	4798      	blx	r3
 801aade:	4603      	mov	r3, r0
	}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3718      	adds	r7, #24
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}

0801aae8 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh>:
	void write(uint8_t *input) {
 801aae8:	b480      	push	{r7}
 801aaea:	b085      	sub	sp, #20
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
 801aaf0:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	7d5b      	ldrb	r3, [r3, #21]
 801aaf6:	2b02      	cmp	r3, #2
 801aaf8:	d113      	bne.n	801ab22 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	691b      	ldr	r3, [r3, #16]
 801aafe:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ab00:	2300      	movs	r3, #0
 801ab02:	73fb      	strb	r3, [r7, #15]
 801ab04:	e00a      	b.n	801ab1c <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801ab06:	7bfb      	ldrb	r3, [r7, #15]
 801ab08:	683a      	ldr	r2, [r7, #0]
 801ab0a:	441a      	add	r2, r3
 801ab0c:	7bfb      	ldrb	r3, [r7, #15]
 801ab0e:	68b9      	ldr	r1, [r7, #8]
 801ab10:	440b      	add	r3, r1
 801ab12:	7812      	ldrb	r2, [r2, #0]
 801ab14:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ab16:	7bfb      	ldrb	r3, [r7, #15]
 801ab18:	3301      	adds	r3, #1
 801ab1a:	73fb      	strb	r3, [r7, #15]
 801ab1c:	7bfb      	ldrb	r3, [r7, #15]
 801ab1e:	2b07      	cmp	r3, #7
 801ab20:	d9f1      	bls.n	801ab06 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh+0x1e>
	}
 801ab22:	bf00      	nop
 801ab24:	3714      	adds	r7, #20
 801ab26:	46bd      	mov	sp, r7
 801ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2c:	4770      	bx	lr

0801ab2e <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7getTypeEv>:
	register_entry_type_t getType() {
 801ab2e:	b480      	push	{r7}
 801ab30:	b083      	sub	sp, #12
 801ab32:	af00      	add	r7, sp, #0
 801ab34:	6078      	str	r0, [r7, #4]
		return this->type;
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	7d5b      	ldrb	r3, [r3, #21]
	}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	370c      	adds	r7, #12
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab44:	4770      	bx	lr

0801ab46 <_ZN24core_utils_RegisterEntryIhhE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ab46:	b480      	push	{r7}
 801ab48:	b083      	sub	sp, #12
 801ab4a:	af00      	add	r7, sp, #0
 801ab4c:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801ab4e:	2301      	movs	r3, #1
	}
 801ab50:	4618      	mov	r0, r3
 801ab52:	370c      	adds	r7, #12
 801ab54:	46bd      	mov	sp, r7
 801ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5a:	4770      	bx	lr

0801ab5c <_ZN24core_utils_RegisterEntryIhhE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801ab5c:	b480      	push	{r7}
 801ab5e:	b083      	sub	sp, #12
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801ab64:	2301      	movs	r3, #1
	}
 801ab66:	4618      	mov	r0, r3
 801ab68:	370c      	adds	r7, #12
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab70:	4770      	bx	lr

0801ab72 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801ab72:	b580      	push	{r7, lr}
 801ab74:	b086      	sub	sp, #24
 801ab76:	af00      	add	r7, sp, #0
 801ab78:	60f8      	str	r0, [r7, #12]
 801ab7a:	60b9      	str	r1, [r7, #8]
 801ab7c:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ab7e:	2300      	movs	r3, #0
 801ab80:	75fb      	strb	r3, [r7, #23]
 801ab82:	e00b      	b.n	801ab9c <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801ab84:	7dfb      	ldrb	r3, [r7, #23]
 801ab86:	68ba      	ldr	r2, [r7, #8]
 801ab88:	441a      	add	r2, r3
 801ab8a:	7dfb      	ldrb	r3, [r7, #23]
 801ab8c:	7811      	ldrb	r1, [r2, #0]
 801ab8e:	68fa      	ldr	r2, [r7, #12]
 801ab90:	4413      	add	r3, r2
 801ab92:	460a      	mov	r2, r1
 801ab94:	715a      	strb	r2, [r3, #5]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ab96:	7dfb      	ldrb	r3, [r7, #23]
 801ab98:	3301      	adds	r3, #1
 801ab9a:	75fb      	strb	r3, [r7, #23]
 801ab9c:	7dfb      	ldrb	r3, [r7, #23]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d0f0      	beq.n	801ab84 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x12>
		this->callback.call(this->input_data_union.data,
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	f103 0010 	add.w	r0, r3, #16
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	7959      	ldrb	r1, [r3, #5]
				this->output_data_union_t.data);
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	3306      	adds	r3, #6
		this->callback.call(this->input_data_union.data,
 801abb0:	461a      	mov	r2, r3
 801abb2:	f000 facb 	bl	801b14c <_ZN19core_utils_CallbackIhhE4callEhRh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801abb6:	2300      	movs	r3, #0
 801abb8:	75bb      	strb	r3, [r7, #22]
 801abba:	e00a      	b.n	801abd2 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x60>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801abbc:	7dba      	ldrb	r2, [r7, #22]
 801abbe:	7dbb      	ldrb	r3, [r7, #22]
 801abc0:	6879      	ldr	r1, [r7, #4]
 801abc2:	440b      	add	r3, r1
 801abc4:	68f9      	ldr	r1, [r7, #12]
 801abc6:	440a      	add	r2, r1
 801abc8:	7992      	ldrb	r2, [r2, #6]
 801abca:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801abcc:	7dbb      	ldrb	r3, [r7, #22]
 801abce:	3301      	adds	r3, #1
 801abd0:	75bb      	strb	r3, [r7, #22]
 801abd2:	7dbb      	ldrb	r3, [r7, #22]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d0f1      	beq.n	801abbc <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x4a>
		return this->getOutputSize();
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	3304      	adds	r3, #4
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	68f8      	ldr	r0, [r7, #12]
 801abe2:	4798      	blx	r3
 801abe4:	4603      	mov	r3, r0
	}
 801abe6:	4618      	mov	r0, r3
 801abe8:	3718      	adds	r7, #24
 801abea:	46bd      	mov	sp, r7
 801abec:	bd80      	pop	{r7, pc}

0801abee <_ZN24core_utils_RegisterEntryIhhE5writeEPh>:
	void write(uint8_t *input) {
 801abee:	b480      	push	{r7}
 801abf0:	b085      	sub	sp, #20
 801abf2:	af00      	add	r7, sp, #0
 801abf4:	6078      	str	r0, [r7, #4]
 801abf6:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	7b5b      	ldrb	r3, [r3, #13]
 801abfc:	2b04      	cmp	r3, #4
 801abfe:	d113      	bne.n	801ac28 <_ZN24core_utils_RegisterEntryIhhE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	689b      	ldr	r3, [r3, #8]
 801ac04:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ac06:	2300      	movs	r3, #0
 801ac08:	73fb      	strb	r3, [r7, #15]
 801ac0a:	e00a      	b.n	801ac22 <_ZN24core_utils_RegisterEntryIhhE5writeEPh+0x34>
				target_address[i] = input[i];
 801ac0c:	7bfb      	ldrb	r3, [r7, #15]
 801ac0e:	683a      	ldr	r2, [r7, #0]
 801ac10:	441a      	add	r2, r3
 801ac12:	7bfb      	ldrb	r3, [r7, #15]
 801ac14:	68b9      	ldr	r1, [r7, #8]
 801ac16:	440b      	add	r3, r1
 801ac18:	7812      	ldrb	r2, [r2, #0]
 801ac1a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ac1c:	7bfb      	ldrb	r3, [r7, #15]
 801ac1e:	3301      	adds	r3, #1
 801ac20:	73fb      	strb	r3, [r7, #15]
 801ac22:	7bfb      	ldrb	r3, [r7, #15]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d0f1      	beq.n	801ac0c <_ZN24core_utils_RegisterEntryIhhE5writeEPh+0x1e>
	}
 801ac28:	bf00      	nop
 801ac2a:	3714      	adds	r7, #20
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac32:	4770      	bx	lr

0801ac34 <_ZN24core_utils_RegisterEntryIhhE4readEPh>:
	uint16_t read(uint8_t *output) {
 801ac34:	b480      	push	{r7}
 801ac36:	b085      	sub	sp, #20
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
 801ac3c:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	7b5b      	ldrb	r3, [r3, #13]
 801ac42:	2b04      	cmp	r3, #4
 801ac44:	d115      	bne.n	801ac72 <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	689b      	ldr	r3, [r3, #8]
 801ac4a:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	73fb      	strb	r3, [r7, #15]
 801ac50:	e00a      	b.n	801ac68 <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x34>
				output[i] = target_address[i];
 801ac52:	7bfb      	ldrb	r3, [r7, #15]
 801ac54:	68ba      	ldr	r2, [r7, #8]
 801ac56:	441a      	add	r2, r3
 801ac58:	7bfb      	ldrb	r3, [r7, #15]
 801ac5a:	6839      	ldr	r1, [r7, #0]
 801ac5c:	440b      	add	r3, r1
 801ac5e:	7812      	ldrb	r2, [r2, #0]
 801ac60:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ac62:	7bfb      	ldrb	r3, [r7, #15]
 801ac64:	3301      	adds	r3, #1
 801ac66:	73fb      	strb	r3, [r7, #15]
 801ac68:	7bfb      	ldrb	r3, [r7, #15]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d0f1      	beq.n	801ac52 <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x1e>
			return sizeof(output_type);
 801ac6e:	2301      	movs	r3, #1
 801ac70:	e000      	b.n	801ac74 <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x40>
		return 0;
 801ac72:	2300      	movs	r3, #0
	}
 801ac74:	4618      	mov	r0, r3
 801ac76:	3714      	adds	r7, #20
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7e:	4770      	bx	lr

0801ac80 <_ZN24core_utils_RegisterEntryIhhE7getTypeEv>:
	register_entry_type_t getType() {
 801ac80:	b480      	push	{r7}
 801ac82:	b083      	sub	sp, #12
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
		return this->type;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	7b5b      	ldrb	r3, [r3, #13]
	}
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	370c      	adds	r7, #12
 801ac90:	46bd      	mov	sp, r7
 801ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac96:	4770      	bx	lr

0801ac98 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ac98:	b480      	push	{r7}
 801ac9a:	b083      	sub	sp, #12
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
		return 0;
 801aca0:	2300      	movs	r3, #0
	}
 801aca2:	4618      	mov	r0, r3
 801aca4:	370c      	adds	r7, #12
 801aca6:	46bd      	mov	sp, r7
 801aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acac:	4770      	bx	lr

0801acae <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801acae:	b480      	push	{r7}
 801acb0:	b083      	sub	sp, #12
 801acb2:	af00      	add	r7, sp, #0
 801acb4:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801acb6:	2302      	movs	r3, #2
	}
 801acb8:	4618      	mov	r0, r3
 801acba:	370c      	adds	r7, #12
 801acbc:	46bd      	mov	sp, r7
 801acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc2:	4770      	bx	lr

0801acc4 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b086      	sub	sp, #24
 801acc8:	af00      	add	r7, sp, #0
 801acca:	60f8      	str	r0, [r7, #12]
 801accc:	60b9      	str	r1, [r7, #8]
 801acce:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	f103 0210 	add.w	r2, r3, #16
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	3305      	adds	r3, #5
 801acda:	4619      	mov	r1, r3
 801acdc:	4610      	mov	r0, r2
 801acde:	f000 fa4b 	bl	801b178 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ace2:	2300      	movs	r3, #0
 801ace4:	75fb      	strb	r3, [r7, #23]
 801ace6:	e00a      	b.n	801acfe <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801ace8:	7dfa      	ldrb	r2, [r7, #23]
 801acea:	7dfb      	ldrb	r3, [r7, #23]
 801acec:	6879      	ldr	r1, [r7, #4]
 801acee:	440b      	add	r3, r1
 801acf0:	68f9      	ldr	r1, [r7, #12]
 801acf2:	440a      	add	r2, r1
 801acf4:	7952      	ldrb	r2, [r2, #5]
 801acf6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801acf8:	7dfb      	ldrb	r3, [r7, #23]
 801acfa:	3301      	adds	r3, #1
 801acfc:	75fb      	strb	r3, [r7, #23]
 801acfe:	7dfb      	ldrb	r3, [r7, #23]
 801ad00:	2b01      	cmp	r3, #1
 801ad02:	d9f1      	bls.n	801ace8 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	3304      	adds	r3, #4
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	68f8      	ldr	r0, [r7, #12]
 801ad0e:	4798      	blx	r3
 801ad10:	4603      	mov	r3, r0
	}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3718      	adds	r7, #24
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}

0801ad1a <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801ad1a:	b480      	push	{r7}
 801ad1c:	b085      	sub	sp, #20
 801ad1e:	af00      	add	r7, sp, #0
 801ad20:	6078      	str	r0, [r7, #4]
 801ad22:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	7b5b      	ldrb	r3, [r3, #13]
 801ad28:	2b03      	cmp	r3, #3
 801ad2a:	d115      	bne.n	801ad58 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	689b      	ldr	r3, [r3, #8]
 801ad30:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ad32:	2300      	movs	r3, #0
 801ad34:	73fb      	strb	r3, [r7, #15]
 801ad36:	e00a      	b.n	801ad4e <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x34>
				output[i] = target_address[i];
 801ad38:	7bfb      	ldrb	r3, [r7, #15]
 801ad3a:	68ba      	ldr	r2, [r7, #8]
 801ad3c:	441a      	add	r2, r3
 801ad3e:	7bfb      	ldrb	r3, [r7, #15]
 801ad40:	6839      	ldr	r1, [r7, #0]
 801ad42:	440b      	add	r3, r1
 801ad44:	7812      	ldrb	r2, [r2, #0]
 801ad46:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ad48:	7bfb      	ldrb	r3, [r7, #15]
 801ad4a:	3301      	adds	r3, #1
 801ad4c:	73fb      	strb	r3, [r7, #15]
 801ad4e:	7bfb      	ldrb	r3, [r7, #15]
 801ad50:	2b01      	cmp	r3, #1
 801ad52:	d9f1      	bls.n	801ad38 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x1e>
			return sizeof(output_type);
 801ad54:	2302      	movs	r3, #2
 801ad56:	e000      	b.n	801ad5a <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x40>
		return 0;
 801ad58:	2300      	movs	r3, #0
	}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	3714      	adds	r7, #20
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad64:	4770      	bx	lr

0801ad66 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801ad66:	b480      	push	{r7}
 801ad68:	b083      	sub	sp, #12
 801ad6a:	af00      	add	r7, sp, #0
 801ad6c:	6078      	str	r0, [r7, #4]
		return this->type;
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	7b5b      	ldrb	r3, [r3, #13]
	}
 801ad72:	4618      	mov	r0, r3
 801ad74:	370c      	adds	r7, #12
 801ad76:	46bd      	mov	sp, r7
 801ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7c:	4770      	bx	lr

0801ad7e <_ZN24core_utils_RegisterEntryImvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ad7e:	b480      	push	{r7}
 801ad80:	b083      	sub	sp, #12
 801ad82:	af00      	add	r7, sp, #0
 801ad84:	6078      	str	r0, [r7, #4]
		return 0;
 801ad86:	2300      	movs	r3, #0
	}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	370c      	adds	r7, #12
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad92:	4770      	bx	lr

0801ad94 <_ZN24core_utils_RegisterEntryImvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801ad94:	b480      	push	{r7}
 801ad96:	b083      	sub	sp, #12
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801ad9c:	2304      	movs	r3, #4
	}
 801ad9e:	4618      	mov	r0, r3
 801ada0:	370c      	adds	r7, #12
 801ada2:	46bd      	mov	sp, r7
 801ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada8:	4770      	bx	lr

0801adaa <_ZN24core_utils_RegisterEntryImvE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801adaa:	b580      	push	{r7, lr}
 801adac:	b086      	sub	sp, #24
 801adae:	af00      	add	r7, sp, #0
 801adb0:	60f8      	str	r0, [r7, #12]
 801adb2:	60b9      	str	r1, [r7, #8]
 801adb4:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	f103 0214 	add.w	r2, r3, #20
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	3308      	adds	r3, #8
 801adc0:	4619      	mov	r1, r3
 801adc2:	4610      	mov	r0, r2
 801adc4:	f000 f9ee 	bl	801b1a4 <_ZN19core_utils_CallbackImvE4callERm>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801adc8:	2300      	movs	r3, #0
 801adca:	75fb      	strb	r3, [r7, #23]
 801adcc:	e00a      	b.n	801ade4 <_ZN24core_utils_RegisterEntryImvE7executeEPhS1_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801adce:	7dfa      	ldrb	r2, [r7, #23]
 801add0:	7dfb      	ldrb	r3, [r7, #23]
 801add2:	6879      	ldr	r1, [r7, #4]
 801add4:	440b      	add	r3, r1
 801add6:	68f9      	ldr	r1, [r7, #12]
 801add8:	440a      	add	r2, r1
 801adda:	7a12      	ldrb	r2, [r2, #8]
 801addc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801adde:	7dfb      	ldrb	r3, [r7, #23]
 801ade0:	3301      	adds	r3, #1
 801ade2:	75fb      	strb	r3, [r7, #23]
 801ade4:	7dfb      	ldrb	r3, [r7, #23]
 801ade6:	2b03      	cmp	r3, #3
 801ade8:	d9f1      	bls.n	801adce <_ZN24core_utils_RegisterEntryImvE7executeEPhS1_+0x24>
		return this->getOutputSize();
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	3304      	adds	r3, #4
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	68f8      	ldr	r0, [r7, #12]
 801adf4:	4798      	blx	r3
 801adf6:	4603      	mov	r3, r0
	}
 801adf8:	4618      	mov	r0, r3
 801adfa:	3718      	adds	r7, #24
 801adfc:	46bd      	mov	sp, r7
 801adfe:	bd80      	pop	{r7, pc}

0801ae00 <_ZN24core_utils_RegisterEntryImvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801ae00:	b480      	push	{r7}
 801ae02:	b085      	sub	sp, #20
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	7c5b      	ldrb	r3, [r3, #17]
 801ae0e:	2b03      	cmp	r3, #3
 801ae10:	d115      	bne.n	801ae3e <_ZN24core_utils_RegisterEntryImvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	68db      	ldr	r3, [r3, #12]
 801ae16:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ae18:	2300      	movs	r3, #0
 801ae1a:	73fb      	strb	r3, [r7, #15]
 801ae1c:	e00a      	b.n	801ae34 <_ZN24core_utils_RegisterEntryImvE4readEPh+0x34>
				output[i] = target_address[i];
 801ae1e:	7bfb      	ldrb	r3, [r7, #15]
 801ae20:	68ba      	ldr	r2, [r7, #8]
 801ae22:	441a      	add	r2, r3
 801ae24:	7bfb      	ldrb	r3, [r7, #15]
 801ae26:	6839      	ldr	r1, [r7, #0]
 801ae28:	440b      	add	r3, r1
 801ae2a:	7812      	ldrb	r2, [r2, #0]
 801ae2c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ae2e:	7bfb      	ldrb	r3, [r7, #15]
 801ae30:	3301      	adds	r3, #1
 801ae32:	73fb      	strb	r3, [r7, #15]
 801ae34:	7bfb      	ldrb	r3, [r7, #15]
 801ae36:	2b03      	cmp	r3, #3
 801ae38:	d9f1      	bls.n	801ae1e <_ZN24core_utils_RegisterEntryImvE4readEPh+0x1e>
			return sizeof(output_type);
 801ae3a:	2304      	movs	r3, #4
 801ae3c:	e000      	b.n	801ae40 <_ZN24core_utils_RegisterEntryImvE4readEPh+0x40>
		return 0;
 801ae3e:	2300      	movs	r3, #0
	}
 801ae40:	4618      	mov	r0, r3
 801ae42:	3714      	adds	r7, #20
 801ae44:	46bd      	mov	sp, r7
 801ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4a:	4770      	bx	lr

0801ae4c <_ZN24core_utils_RegisterEntryImvE7getTypeEv>:
	register_entry_type_t getType() {
 801ae4c:	b480      	push	{r7}
 801ae4e:	b083      	sub	sp, #12
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	6078      	str	r0, [r7, #4]
		return this->type;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	7c5b      	ldrb	r3, [r3, #17]
	}
 801ae58:	4618      	mov	r0, r3
 801ae5a:	370c      	adds	r7, #12
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae62:	4770      	bx	lr

0801ae64 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ae64:	b480      	push	{r7}
 801ae66:	b083      	sub	sp, #12
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
		return 0;
 801ae6c:	2300      	movs	r3, #0
	}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	370c      	adds	r7, #12
 801ae72:	46bd      	mov	sp, r7
 801ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae78:	4770      	bx	lr

0801ae7a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801ae7a:	b480      	push	{r7}
 801ae7c:	b083      	sub	sp, #12
 801ae7e:	af00      	add	r7, sp, #0
 801ae80:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801ae82:	2301      	movs	r3, #1
	}
 801ae84:	4618      	mov	r0, r3
 801ae86:	370c      	adds	r7, #12
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8e:	4770      	bx	lr

0801ae90 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801ae90:	b580      	push	{r7, lr}
 801ae92:	b086      	sub	sp, #24
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	60f8      	str	r0, [r7, #12]
 801ae98:	60b9      	str	r1, [r7, #8]
 801ae9a:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f103 0210 	add.w	r2, r3, #16
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	3305      	adds	r3, #5
 801aea6:	4619      	mov	r1, r3
 801aea8:	4610      	mov	r0, r2
 801aeaa:	f000 f98c 	bl	801b1c6 <_ZN19core_utils_CallbackI22twipr_firmware_state_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aeae:	2300      	movs	r3, #0
 801aeb0:	75fb      	strb	r3, [r7, #23]
 801aeb2:	e00a      	b.n	801aeca <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801aeb4:	7dfa      	ldrb	r2, [r7, #23]
 801aeb6:	7dfb      	ldrb	r3, [r7, #23]
 801aeb8:	6879      	ldr	r1, [r7, #4]
 801aeba:	440b      	add	r3, r1
 801aebc:	68f9      	ldr	r1, [r7, #12]
 801aebe:	440a      	add	r2, r1
 801aec0:	7952      	ldrb	r2, [r2, #5]
 801aec2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aec4:	7dfb      	ldrb	r3, [r7, #23]
 801aec6:	3301      	adds	r3, #1
 801aec8:	75fb      	strb	r3, [r7, #23]
 801aeca:	7dfb      	ldrb	r3, [r7, #23]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d0f1      	beq.n	801aeb4 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	3304      	adds	r3, #4
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	68f8      	ldr	r0, [r7, #12]
 801aeda:	4798      	blx	r3
 801aedc:	4603      	mov	r3, r0
	}
 801aede:	4618      	mov	r0, r3
 801aee0:	3718      	adds	r7, #24
 801aee2:	46bd      	mov	sp, r7
 801aee4:	bd80      	pop	{r7, pc}

0801aee6 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801aee6:	b480      	push	{r7}
 801aee8:	b085      	sub	sp, #20
 801aeea:	af00      	add	r7, sp, #0
 801aeec:	6078      	str	r0, [r7, #4]
 801aeee:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	7b5b      	ldrb	r3, [r3, #13]
 801aef4:	2b03      	cmp	r3, #3
 801aef6:	d115      	bne.n	801af24 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	689b      	ldr	r3, [r3, #8]
 801aefc:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aefe:	2300      	movs	r3, #0
 801af00:	73fb      	strb	r3, [r7, #15]
 801af02:	e00a      	b.n	801af1a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x34>
				output[i] = target_address[i];
 801af04:	7bfb      	ldrb	r3, [r7, #15]
 801af06:	68ba      	ldr	r2, [r7, #8]
 801af08:	441a      	add	r2, r3
 801af0a:	7bfb      	ldrb	r3, [r7, #15]
 801af0c:	6839      	ldr	r1, [r7, #0]
 801af0e:	440b      	add	r3, r1
 801af10:	7812      	ldrb	r2, [r2, #0]
 801af12:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801af14:	7bfb      	ldrb	r3, [r7, #15]
 801af16:	3301      	adds	r3, #1
 801af18:	73fb      	strb	r3, [r7, #15]
 801af1a:	7bfb      	ldrb	r3, [r7, #15]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d0f1      	beq.n	801af04 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x1e>
			return sizeof(output_type);
 801af20:	2301      	movs	r3, #1
 801af22:	e000      	b.n	801af26 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x40>
		return 0;
 801af24:	2300      	movs	r3, #0
	}
 801af26:	4618      	mov	r0, r3
 801af28:	3714      	adds	r7, #20
 801af2a:	46bd      	mov	sp, r7
 801af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af30:	4770      	bx	lr

0801af32 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801af32:	b480      	push	{r7}
 801af34:	b083      	sub	sp, #12
 801af36:	af00      	add	r7, sp, #0
 801af38:	6078      	str	r0, [r7, #4]
		return this->type;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	7b5b      	ldrb	r3, [r3, #13]
	}
 801af3e:	4618      	mov	r0, r3
 801af40:	370c      	adds	r7, #12
 801af42:	46bd      	mov	sp, r7
 801af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af48:	4770      	bx	lr

0801af4a <_ZN19core_utils_CallbackI29twipr_control_configuration_tvE4callERS0_>:
	void call(output_type &output) {
 801af4a:	b5b0      	push	{r4, r5, r7, lr}
 801af4c:	b090      	sub	sp, #64	@ 0x40
 801af4e:	af00      	add	r7, sp, #0
 801af50:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801af52:	63b9      	str	r1, [r7, #56]	@ 0x38
		output = this->_fp();
 801af54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af56:	f103 0208 	add.w	r2, r3, #8
 801af5a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801af5c:	463b      	mov	r3, r7
 801af5e:	4611      	mov	r1, r2
 801af60:	4618      	mov	r0, r3
 801af62:	f000 f942 	bl	801b1ea <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEclEv>
 801af66:	4625      	mov	r5, r4
 801af68:	463c      	mov	r4, r7
 801af6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af76:	e894 0003 	ldmia.w	r4, {r0, r1}
 801af7a:	e885 0003 	stmia.w	r5, {r0, r1}
	}
 801af7e:	bf00      	nop
 801af80:	3740      	adds	r7, #64	@ 0x40
 801af82:	46bd      	mov	sp, r7
 801af84:	bdb0      	pop	{r4, r5, r7, pc}

0801af86 <_ZN19core_utils_CallbackIhA3_fE4callEPfRh>:
	void call(input_type argument, output_type &output) {
 801af86:	b580      	push	{r7, lr}
 801af88:	b084      	sub	sp, #16
 801af8a:	af00      	add	r7, sp, #0
 801af8c:	60f8      	str	r0, [r7, #12]
 801af8e:	60b9      	str	r1, [r7, #8]
 801af90:	607a      	str	r2, [r7, #4]
		output = this->function_pointer(argument);
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	3308      	adds	r3, #8
 801af96:	68b9      	ldr	r1, [r7, #8]
 801af98:	4618      	mov	r0, r3
 801af9a:	f000 f935 	bl	801b208 <_ZN26core_utils_FunctionPointerIhA3_fEclEPf>
 801af9e:	4603      	mov	r3, r0
 801afa0:	461a      	mov	r2, r3
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	701a      	strb	r2, [r3, #0]
	}
 801afa6:	bf00      	nop
 801afa8:	3710      	adds	r7, #16
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}

0801afae <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tE4callES0_>:
	void call(input_type input) {
 801afae:	b580      	push	{r7, lr}
 801afb0:	b084      	sub	sp, #16
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	60f8      	str	r0, [r7, #12]
 801afb6:	eeb0 7a40 	vmov.f32	s14, s0
 801afba:	eef0 7a60 	vmov.f32	s15, s1
 801afbe:	ed87 7a01 	vstr	s14, [r7, #4]
 801afc2:	edc7 7a02 	vstr	s15, [r7, #8]
		this->_fp(input);
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	3308      	adds	r3, #8
 801afca:	ed97 7a01 	vldr	s14, [r7, #4]
 801afce:	edd7 7a02 	vldr	s15, [r7, #8]
 801afd2:	eeb0 0a47 	vmov.f32	s0, s14
 801afd6:	eef0 0a67 	vmov.f32	s1, s15
 801afda:	4618      	mov	r0, r3
 801afdc:	f000 f922 	bl	801b224 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEclES0_>
	}
 801afe0:	bf00      	nop
 801afe2:	3710      	adds	r7, #16
 801afe4:	46bd      	mov	sp, r7
 801afe6:	bd80      	pop	{r7, pc}

0801afe8 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tE4callES0_>:
	void call(input_type input) {
 801afe8:	b580      	push	{r7, lr}
 801afea:	b084      	sub	sp, #16
 801afec:	af00      	add	r7, sp, #0
 801afee:	60f8      	str	r0, [r7, #12]
 801aff0:	eeb0 7a40 	vmov.f32	s14, s0
 801aff4:	eef0 7a60 	vmov.f32	s15, s1
 801aff8:	ed87 7a01 	vstr	s14, [r7, #4]
 801affc:	edc7 7a02 	vstr	s15, [r7, #8]
		this->_fp(input);
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	3308      	adds	r3, #8
 801b004:	ed97 7a01 	vldr	s14, [r7, #4]
 801b008:	edd7 7a02 	vldr	s15, [r7, #8]
 801b00c:	eeb0 0a47 	vmov.f32	s0, s14
 801b010:	eef0 0a67 	vmov.f32	s1, s15
 801b014:	4618      	mov	r0, r3
 801b016:	f000 f920 	bl	801b25a <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEclES0_>
	}
 801b01a:	bf00      	nop
 801b01c:	3710      	adds	r7, #16
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}

0801b022 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tE4callES0_>:
	void call(input_type input) {
 801b022:	b580      	push	{r7, lr}
 801b024:	b084      	sub	sp, #16
 801b026:	af00      	add	r7, sp, #0
 801b028:	60f8      	str	r0, [r7, #12]
 801b02a:	eeb0 7a40 	vmov.f32	s14, s0
 801b02e:	eef0 7a60 	vmov.f32	s15, s1
 801b032:	ed87 7a01 	vstr	s14, [r7, #4]
 801b036:	edc7 7a02 	vstr	s15, [r7, #8]
		this->_fp(input);
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	3308      	adds	r3, #8
 801b03e:	ed97 7a01 	vldr	s14, [r7, #4]
 801b042:	edd7 7a02 	vldr	s15, [r7, #8]
 801b046:	eeb0 0a47 	vmov.f32	s0, s14
 801b04a:	eef0 0a67 	vmov.f32	s1, s15
 801b04e:	4618      	mov	r0, r3
 801b050:	f000 f91e 	bl	801b290 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEclES0_>
	}
 801b054:	bf00      	nop
 801b056:	3710      	adds	r7, #16
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}

0801b05c <_ZN19core_utils_CallbackIhA8_fE4callEPfRh>:
	void call(input_type argument, output_type &output) {
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b084      	sub	sp, #16
 801b060:	af00      	add	r7, sp, #0
 801b062:	60f8      	str	r0, [r7, #12]
 801b064:	60b9      	str	r1, [r7, #8]
 801b066:	607a      	str	r2, [r7, #4]
		output = this->function_pointer(argument);
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	3308      	adds	r3, #8
 801b06c:	68b9      	ldr	r1, [r7, #8]
 801b06e:	4618      	mov	r0, r3
 801b070:	f000 f929 	bl	801b2c6 <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>
 801b074:	4603      	mov	r3, r0
 801b076:	461a      	mov	r2, r3
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	701a      	strb	r2, [r3, #0]
	}
 801b07c:	bf00      	nop
 801b07e:	3710      	adds	r7, #16
 801b080:	46bd      	mov	sp, r7
 801b082:	bd80      	pop	{r7, pc}

0801b084 <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_Rh>:
	void call(input_type argument, output_type &output) {
 801b084:	b580      	push	{r7, lr}
 801b086:	b084      	sub	sp, #16
 801b088:	af00      	add	r7, sp, #0
 801b08a:	60f8      	str	r0, [r7, #12]
 801b08c:	460b      	mov	r3, r1
 801b08e:	607a      	str	r2, [r7, #4]
 801b090:	72fb      	strb	r3, [r7, #11]
		output = this->function_pointer(argument);
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	3308      	adds	r3, #8
 801b096:	7afa      	ldrb	r2, [r7, #11]
 801b098:	4611      	mov	r1, r2
 801b09a:	4618      	mov	r0, r3
 801b09c:	f000 f921 	bl	801b2e2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	461a      	mov	r2, r3
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	701a      	strb	r2, [r3, #0]
	}
 801b0a8:	bf00      	nop
 801b0aa:	3710      	adds	r7, #16
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bd80      	pop	{r7, pc}

0801b0b0 <_ZN19core_utils_CallbackI20twipr_control_mode_tvE4callERS0_>:
	void call(output_type &output) {
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b082      	sub	sp, #8
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
 801b0b8:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	3308      	adds	r3, #8
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f000 f91f 	bl	801b302 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEclEv>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	461a      	mov	r2, r3
 801b0c8:	683b      	ldr	r3, [r7, #0]
 801b0ca:	701a      	strb	r2, [r3, #0]
	}
 801b0cc:	bf00      	nop
 801b0ce:	3708      	adds	r7, #8
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	bd80      	pop	{r7, pc}

0801b0d4 <_ZN19core_utils_CallbackIffE4callEfRf>:
	void call(input_type argument, output_type &output) {
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b084      	sub	sp, #16
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	60f8      	str	r0, [r7, #12]
 801b0dc:	ed87 0a02 	vstr	s0, [r7, #8]
 801b0e0:	6079      	str	r1, [r7, #4]
		output = this->function_pointer(argument);
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	3308      	adds	r3, #8
 801b0e6:	ed97 0a02 	vldr	s0, [r7, #8]
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f000 f915 	bl	801b31a <_ZN26core_utils_FunctionPointerIffEclEf>
 801b0f0:	eef0 7a40 	vmov.f32	s15, s0
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	edc3 7a00 	vstr	s15, [r3]
	}
 801b0fa:	bf00      	nop
 801b0fc:	3710      	adds	r7, #16
 801b0fe:	46bd      	mov	sp, r7
 801b100:	bd80      	pop	{r7, pc}

0801b102 <_ZN19core_utils_CallbackIhvE4callERh>:
	void call(output_type &output) {
 801b102:	b580      	push	{r7, lr}
 801b104:	b082      	sub	sp, #8
 801b106:	af00      	add	r7, sp, #0
 801b108:	6078      	str	r0, [r7, #4]
 801b10a:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	3308      	adds	r3, #8
 801b110:	4618      	mov	r0, r3
 801b112:	f000 f914 	bl	801b33e <_ZN26core_utils_FunctionPointerIhvEclEv>
 801b116:	4603      	mov	r3, r0
 801b118:	461a      	mov	r2, r3
 801b11a:	683b      	ldr	r3, [r7, #0]
 801b11c:	701a      	strb	r2, [r3, #0]
	}
 801b11e:	bf00      	nop
 801b120:	3708      	adds	r7, #8
 801b122:	46bd      	mov	sp, r7
 801b124:	bd80      	pop	{r7, pc}

0801b126 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tE4callES0_>:
	void call(input_type input) {
 801b126:	b580      	push	{r7, lr}
 801b128:	b084      	sub	sp, #16
 801b12a:	af00      	add	r7, sp, #0
 801b12c:	60f8      	str	r0, [r7, #12]
 801b12e:	1d3b      	adds	r3, r7, #4
 801b130:	e883 0006 	stmia.w	r3, {r1, r2}
		this->_fp(input);
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	f103 0008 	add.w	r0, r3, #8
 801b13a:	1d3b      	adds	r3, r7, #4
 801b13c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b140:	f000 f909 	bl	801b356 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEclES0_>
	}
 801b144:	bf00      	nop
 801b146:	3710      	adds	r7, #16
 801b148:	46bd      	mov	sp, r7
 801b14a:	bd80      	pop	{r7, pc}

0801b14c <_ZN19core_utils_CallbackIhhE4callEhRh>:
	void call(input_type argument, output_type &output) {
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b084      	sub	sp, #16
 801b150:	af00      	add	r7, sp, #0
 801b152:	60f8      	str	r0, [r7, #12]
 801b154:	460b      	mov	r3, r1
 801b156:	607a      	str	r2, [r7, #4]
 801b158:	72fb      	strb	r3, [r7, #11]
		output = this->function_pointer(argument);
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	3308      	adds	r3, #8
 801b15e:	7afa      	ldrb	r2, [r7, #11]
 801b160:	4611      	mov	r1, r2
 801b162:	4618      	mov	r0, r3
 801b164:	f000 f908 	bl	801b378 <_ZN26core_utils_FunctionPointerIhhEclEh>
 801b168:	4603      	mov	r3, r0
 801b16a:	461a      	mov	r2, r3
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	701a      	strb	r2, [r3, #0]
	}
 801b170:	bf00      	nop
 801b172:	3710      	adds	r7, #16
 801b174:	46bd      	mov	sp, r7
 801b176:	bd80      	pop	{r7, pc}

0801b178 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvE4callERS0_>:
	void call(output_type &output) {
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	3308      	adds	r3, #8
 801b186:	4618      	mov	r0, r3
 801b188:	f000 f906 	bl	801b398 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEclEv>
 801b18c:	4602      	mov	r2, r0
 801b18e:	683b      	ldr	r3, [r7, #0]
 801b190:	b212      	sxth	r2, r2
 801b192:	4611      	mov	r1, r2
 801b194:	7019      	strb	r1, [r3, #0]
 801b196:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b19a:	705a      	strb	r2, [r3, #1]
	}
 801b19c:	bf00      	nop
 801b19e:	3708      	adds	r7, #8
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd80      	pop	{r7, pc}

0801b1a4 <_ZN19core_utils_CallbackImvE4callERm>:
	void call(output_type &output) {
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b082      	sub	sp, #8
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	3308      	adds	r3, #8
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f000 f904 	bl	801b3c0 <_ZN26core_utils_FunctionPointerImvEclEv>
 801b1b8:	4602      	mov	r2, r0
 801b1ba:	683b      	ldr	r3, [r7, #0]
 801b1bc:	601a      	str	r2, [r3, #0]
	}
 801b1be:	bf00      	nop
 801b1c0:	3708      	adds	r7, #8
 801b1c2:	46bd      	mov	sp, r7
 801b1c4:	bd80      	pop	{r7, pc}

0801b1c6 <_ZN19core_utils_CallbackI22twipr_firmware_state_tvE4callERS0_>:
	void call(output_type &output) {
 801b1c6:	b580      	push	{r7, lr}
 801b1c8:	b082      	sub	sp, #8
 801b1ca:	af00      	add	r7, sp, #0
 801b1cc:	6078      	str	r0, [r7, #4]
 801b1ce:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	3308      	adds	r3, #8
 801b1d4:	4618      	mov	r0, r3
 801b1d6:	f000 f8ff 	bl	801b3d8 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEclEv>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	461a      	mov	r2, r3
 801b1de:	683b      	ldr	r3, [r7, #0]
 801b1e0:	701a      	strb	r2, [r3, #0]
	}
 801b1e2:	bf00      	nop
 801b1e4:	3708      	adds	r7, #8
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd80      	pop	{r7, pc}

0801b1ea <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEclEv>:
    R operator ()(void) {
 801b1ea:	b580      	push	{r7, lr}
 801b1ec:	b082      	sub	sp, #8
 801b1ee:	af00      	add	r7, sp, #0
 801b1f0:	6078      	str	r0, [r7, #4]
 801b1f2:	6039      	str	r1, [r7, #0]
        return call();
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	6839      	ldr	r1, [r7, #0]
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f000 f8f9 	bl	801b3f0 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv>
 801b1fe:	bf00      	nop
    }
 801b200:	6878      	ldr	r0, [r7, #4]
 801b202:	3708      	adds	r7, #8
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}

0801b208 <_ZN26core_utils_FunctionPointerIhA3_fEclEPf>:
    R operator ()(A1 a) {
 801b208:	b580      	push	{r7, lr}
 801b20a:	b082      	sub	sp, #8
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
 801b210:	6039      	str	r1, [r7, #0]
        return call(a);
 801b212:	6839      	ldr	r1, [r7, #0]
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f000 f91a 	bl	801b44e <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf>
 801b21a:	4603      	mov	r3, r0
    }
 801b21c:	4618      	mov	r0, r3
 801b21e:	3708      	adds	r7, #8
 801b220:	46bd      	mov	sp, r7
 801b222:	bd80      	pop	{r7, pc}

0801b224 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEclES0_>:
    R operator ()(A1 a) {
 801b224:	b580      	push	{r7, lr}
 801b226:	b084      	sub	sp, #16
 801b228:	af00      	add	r7, sp, #0
 801b22a:	60f8      	str	r0, [r7, #12]
 801b22c:	eeb0 7a40 	vmov.f32	s14, s0
 801b230:	eef0 7a60 	vmov.f32	s15, s1
 801b234:	ed87 7a01 	vstr	s14, [r7, #4]
 801b238:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 801b23c:	ed97 7a01 	vldr	s14, [r7, #4]
 801b240:	edd7 7a02 	vldr	s15, [r7, #8]
 801b244:	eeb0 0a47 	vmov.f32	s0, s14
 801b248:	eef0 0a67 	vmov.f32	s1, s15
 801b24c:	68f8      	ldr	r0, [r7, #12]
 801b24e:	f000 f928 	bl	801b4a2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_>
 801b252:	bf00      	nop
    }
 801b254:	3710      	adds	r7, #16
 801b256:	46bd      	mov	sp, r7
 801b258:	bd80      	pop	{r7, pc}

0801b25a <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEclES0_>:
    R operator ()(A1 a) {
 801b25a:	b580      	push	{r7, lr}
 801b25c:	b084      	sub	sp, #16
 801b25e:	af00      	add	r7, sp, #0
 801b260:	60f8      	str	r0, [r7, #12]
 801b262:	eeb0 7a40 	vmov.f32	s14, s0
 801b266:	eef0 7a60 	vmov.f32	s15, s1
 801b26a:	ed87 7a01 	vstr	s14, [r7, #4]
 801b26e:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 801b272:	ed97 7a01 	vldr	s14, [r7, #4]
 801b276:	edd7 7a02 	vldr	s15, [r7, #8]
 801b27a:	eeb0 0a47 	vmov.f32	s0, s14
 801b27e:	eef0 0a67 	vmov.f32	s1, s15
 801b282:	68f8      	ldr	r0, [r7, #12]
 801b284:	f000 f94a 	bl	801b51c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_>
 801b288:	bf00      	nop
    }
 801b28a:	3710      	adds	r7, #16
 801b28c:	46bd      	mov	sp, r7
 801b28e:	bd80      	pop	{r7, pc}

0801b290 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEclES0_>:
    R operator ()(A1 a) {
 801b290:	b580      	push	{r7, lr}
 801b292:	b084      	sub	sp, #16
 801b294:	af00      	add	r7, sp, #0
 801b296:	60f8      	str	r0, [r7, #12]
 801b298:	eeb0 7a40 	vmov.f32	s14, s0
 801b29c:	eef0 7a60 	vmov.f32	s15, s1
 801b2a0:	ed87 7a01 	vstr	s14, [r7, #4]
 801b2a4:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 801b2a8:	ed97 7a01 	vldr	s14, [r7, #4]
 801b2ac:	edd7 7a02 	vldr	s15, [r7, #8]
 801b2b0:	eeb0 0a47 	vmov.f32	s0, s14
 801b2b4:	eef0 0a67 	vmov.f32	s1, s15
 801b2b8:	68f8      	ldr	r0, [r7, #12]
 801b2ba:	f000 f96c 	bl	801b596 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_>
 801b2be:	bf00      	nop
    }
 801b2c0:	3710      	adds	r7, #16
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bd80      	pop	{r7, pc}

0801b2c6 <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>:
    R operator ()(A1 a) {
 801b2c6:	b580      	push	{r7, lr}
 801b2c8:	b082      	sub	sp, #8
 801b2ca:	af00      	add	r7, sp, #0
 801b2cc:	6078      	str	r0, [r7, #4]
 801b2ce:	6039      	str	r1, [r7, #0]
        return call(a);
 801b2d0:	6839      	ldr	r1, [r7, #0]
 801b2d2:	6878      	ldr	r0, [r7, #4]
 801b2d4:	f000 f99c 	bl	801b610 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>
 801b2d8:	4603      	mov	r3, r0
    }
 801b2da:	4618      	mov	r0, r3
 801b2dc:	3708      	adds	r7, #8
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bd80      	pop	{r7, pc}

0801b2e2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>:
    R operator ()(A1 a) {
 801b2e2:	b580      	push	{r7, lr}
 801b2e4:	b082      	sub	sp, #8
 801b2e6:	af00      	add	r7, sp, #0
 801b2e8:	6078      	str	r0, [r7, #4]
 801b2ea:	460b      	mov	r3, r1
 801b2ec:	70fb      	strb	r3, [r7, #3]
        return call(a);
 801b2ee:	78fb      	ldrb	r3, [r7, #3]
 801b2f0:	4619      	mov	r1, r3
 801b2f2:	6878      	ldr	r0, [r7, #4]
 801b2f4:	f000 f9b6 	bl	801b664 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>
 801b2f8:	4603      	mov	r3, r0
    }
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	3708      	adds	r7, #8
 801b2fe:	46bd      	mov	sp, r7
 801b300:	bd80      	pop	{r7, pc}

0801b302 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEclEv>:
    R operator ()(void) {
 801b302:	b580      	push	{r7, lr}
 801b304:	b082      	sub	sp, #8
 801b306:	af00      	add	r7, sp, #0
 801b308:	6078      	str	r0, [r7, #4]
        return call();
 801b30a:	6878      	ldr	r0, [r7, #4]
 801b30c:	f000 f9d6 	bl	801b6bc <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv>
 801b310:	4603      	mov	r3, r0
    }
 801b312:	4618      	mov	r0, r3
 801b314:	3708      	adds	r7, #8
 801b316:	46bd      	mov	sp, r7
 801b318:	bd80      	pop	{r7, pc}

0801b31a <_ZN26core_utils_FunctionPointerIffEclEf>:
    R operator ()(A1 a) {
 801b31a:	b580      	push	{r7, lr}
 801b31c:	b082      	sub	sp, #8
 801b31e:	af00      	add	r7, sp, #0
 801b320:	6078      	str	r0, [r7, #4]
 801b322:	ed87 0a00 	vstr	s0, [r7]
        return call(a);
 801b326:	ed97 0a00 	vldr	s0, [r7]
 801b32a:	6878      	ldr	r0, [r7, #4]
 801b32c:	f000 f9ee 	bl	801b70c <_ZN26core_utils_FunctionPointerIffE4callEf>
 801b330:	eef0 7a40 	vmov.f32	s15, s0
    }
 801b334:	eeb0 0a67 	vmov.f32	s0, s15
 801b338:	3708      	adds	r7, #8
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd80      	pop	{r7, pc}

0801b33e <_ZN26core_utils_FunctionPointerIhvEclEv>:
    R operator ()(void) {
 801b33e:	b580      	push	{r7, lr}
 801b340:	b082      	sub	sp, #8
 801b342:	af00      	add	r7, sp, #0
 801b344:	6078      	str	r0, [r7, #4]
        return call();
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f000 fa14 	bl	801b774 <_ZN26core_utils_FunctionPointerIhvE4callEv>
 801b34c:	4603      	mov	r3, r0
    }
 801b34e:	4618      	mov	r0, r3
 801b350:	3708      	adds	r7, #8
 801b352:	46bd      	mov	sp, r7
 801b354:	bd80      	pop	{r7, pc}

0801b356 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEclES0_>:
    R operator ()(A1 a) {
 801b356:	b580      	push	{r7, lr}
 801b358:	b084      	sub	sp, #16
 801b35a:	af00      	add	r7, sp, #0
 801b35c:	60f8      	str	r0, [r7, #12]
 801b35e:	1d3b      	adds	r3, r7, #4
 801b360:	e883 0006 	stmia.w	r3, {r1, r2}
        return call(a);
 801b364:	1d3b      	adds	r3, r7, #4
 801b366:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b36a:	68f8      	ldr	r0, [r7, #12]
 801b36c:	f000 fa2a 	bl	801b7c4 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_>
 801b370:	bf00      	nop
    }
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}

0801b378 <_ZN26core_utils_FunctionPointerIhhEclEh>:
    R operator ()(A1 a) {
 801b378:	b580      	push	{r7, lr}
 801b37a:	b082      	sub	sp, #8
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
 801b380:	460b      	mov	r3, r1
 801b382:	70fb      	strb	r3, [r7, #3]
        return call(a);
 801b384:	78fb      	ldrb	r3, [r7, #3]
 801b386:	4619      	mov	r1, r3
 801b388:	6878      	ldr	r0, [r7, #4]
 801b38a:	f000 fa47 	bl	801b81c <_ZN26core_utils_FunctionPointerIhhE4callEh>
 801b38e:	4603      	mov	r3, r0
    }
 801b390:	4618      	mov	r0, r3
 801b392:	3708      	adds	r7, #8
 801b394:	46bd      	mov	sp, r7
 801b396:	bd80      	pop	{r7, pc}

0801b398 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEclEv>:
    R operator ()(void) {
 801b398:	b580      	push	{r7, lr}
 801b39a:	b084      	sub	sp, #16
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
        return call();
 801b3a0:	6878      	ldr	r0, [r7, #4]
 801b3a2:	f000 fa67 	bl	801b874 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	81bb      	strh	r3, [r7, #12]
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	7b3a      	ldrb	r2, [r7, #12]
 801b3ae:	f362 0307 	bfi	r3, r2, #0, #8
 801b3b2:	7b7a      	ldrb	r2, [r7, #13]
 801b3b4:	f362 230f 	bfi	r3, r2, #8, #8
    }
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	3710      	adds	r7, #16
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}

0801b3c0 <_ZN26core_utils_FunctionPointerImvEclEv>:
    R operator ()(void) {
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b082      	sub	sp, #8
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
        return call();
 801b3c8:	6878      	ldr	r0, [r7, #4]
 801b3ca:	f000 fa87 	bl	801b8dc <_ZN26core_utils_FunctionPointerImvE4callEv>
 801b3ce:	4603      	mov	r3, r0
    }
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	3708      	adds	r7, #8
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	bd80      	pop	{r7, pc}

0801b3d8 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEclEv>:
    R operator ()(void) {
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b082      	sub	sp, #8
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
        return call();
 801b3e0:	6878      	ldr	r0, [r7, #4]
 801b3e2:	f000 faa3 	bl	801b92c <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv>
 801b3e6:	4603      	mov	r3, r0
    }
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	3708      	adds	r7, #8
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	bd80      	pop	{r7, pc}

0801b3f0 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv>:
    R call(){
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
 801b3f8:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801b3fa:	683b      	ldr	r3, [r7, #0]
 801b3fc:	695b      	ldr	r3, [r3, #20]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d109      	bne.n	801b416 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x26>
 801b402:	683b      	ldr	r3, [r7, #0]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d005      	beq.n	801b416 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x26>
            return _p.function();
 801b40a:	683b      	ldr	r3, [r7, #0]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	687a      	ldr	r2, [r7, #4]
 801b410:	4610      	mov	r0, r2
 801b412:	4798      	blx	r3
 801b414:	e017      	b.n	801b446 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x56>
        } else if (_membercaller && _p.object) {
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	695b      	ldr	r3, [r3, #20]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d00c      	beq.n	801b438 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x48>
 801b41e:	683b      	ldr	r3, [r7, #0]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d008      	beq.n	801b438 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x48>
            return _membercaller(_p.object, _member);
 801b426:	683b      	ldr	r3, [r7, #0]
 801b428:	695b      	ldr	r3, [r3, #20]
 801b42a:	683a      	ldr	r2, [r7, #0]
 801b42c:	6811      	ldr	r1, [r2, #0]
 801b42e:	683a      	ldr	r2, [r7, #0]
 801b430:	3204      	adds	r2, #4
 801b432:	6878      	ldr	r0, [r7, #4]
 801b434:	4798      	blx	r3
 801b436:	e006      	b.n	801b446 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x56>
        return R();
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	4618      	mov	r0, r3
 801b43c:	2338      	movs	r3, #56	@ 0x38
 801b43e:	461a      	mov	r2, r3
 801b440:	2100      	movs	r1, #0
 801b442:	f007 fb6e 	bl	8022b22 <memset>
    }
 801b446:	6878      	ldr	r0, [r7, #4]
 801b448:	3708      	adds	r7, #8
 801b44a:	46bd      	mov	sp, r7
 801b44c:	bd80      	pop	{r7, pc}

0801b44e <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf>:
    R call(A1 a) {
 801b44e:	b580      	push	{r7, lr}
 801b450:	b082      	sub	sp, #8
 801b452:	af00      	add	r7, sp, #0
 801b454:	6078      	str	r0, [r7, #4]
 801b456:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	695b      	ldr	r3, [r3, #20]
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d109      	bne.n	801b474 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x26>
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d005      	beq.n	801b474 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x26>
           return _p.function(a);
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	6838      	ldr	r0, [r7, #0]
 801b46e:	4798      	blx	r3
 801b470:	4603      	mov	r3, r0
 801b472:	e012      	b.n	801b49a <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	695b      	ldr	r3, [r3, #20]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d00d      	beq.n	801b498 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4a>
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d009      	beq.n	801b498 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	695b      	ldr	r3, [r3, #20]
 801b488:	687a      	ldr	r2, [r7, #4]
 801b48a:	6810      	ldr	r0, [r2, #0]
 801b48c:	687a      	ldr	r2, [r7, #4]
 801b48e:	1d11      	adds	r1, r2, #4
 801b490:	683a      	ldr	r2, [r7, #0]
 801b492:	4798      	blx	r3
 801b494:	4603      	mov	r3, r0
 801b496:	e000      	b.n	801b49a <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4c>
        return R();
 801b498:	2300      	movs	r3, #0
    }
 801b49a:	4618      	mov	r0, r3
 801b49c:	3708      	adds	r7, #8
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	bd80      	pop	{r7, pc}

0801b4a2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_>:
    R call(A1 a) {
 801b4a2:	b580      	push	{r7, lr}
 801b4a4:	b084      	sub	sp, #16
 801b4a6:	af00      	add	r7, sp, #0
 801b4a8:	60f8      	str	r0, [r7, #12]
 801b4aa:	eeb0 7a40 	vmov.f32	s14, s0
 801b4ae:	eef0 7a60 	vmov.f32	s15, s1
 801b4b2:	ed87 7a01 	vstr	s14, [r7, #4]
 801b4b6:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	695b      	ldr	r3, [r3, #20]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d10f      	bne.n	801b4e2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x40>
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d00b      	beq.n	801b4e2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x40>
           return _p.function(a);
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	ed97 7a01 	vldr	s14, [r7, #4]
 801b4d2:	edd7 7a02 	vldr	s15, [r7, #8]
 801b4d6:	eeb0 0a47 	vmov.f32	s0, s14
 801b4da:	eef0 0a67 	vmov.f32	s1, s15
 801b4de:	4798      	blx	r3
 801b4e0:	e019      	b.n	801b516 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	695b      	ldr	r3, [r3, #20]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d014      	beq.n	801b514 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x72>
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d010      	beq.n	801b514 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	695b      	ldr	r3, [r3, #20]
 801b4f6:	68fa      	ldr	r2, [r7, #12]
 801b4f8:	6810      	ldr	r0, [r2, #0]
 801b4fa:	68fa      	ldr	r2, [r7, #12]
 801b4fc:	3204      	adds	r2, #4
 801b4fe:	ed97 7a01 	vldr	s14, [r7, #4]
 801b502:	edd7 7a02 	vldr	s15, [r7, #8]
 801b506:	eeb0 0a47 	vmov.f32	s0, s14
 801b50a:	eef0 0a67 	vmov.f32	s1, s15
 801b50e:	4611      	mov	r1, r2
 801b510:	4798      	blx	r3
 801b512:	e000      	b.n	801b516 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x74>
        return R();
 801b514:	bf00      	nop
    }
 801b516:	3710      	adds	r7, #16
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}

0801b51c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_>:
    R call(A1 a) {
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b084      	sub	sp, #16
 801b520:	af00      	add	r7, sp, #0
 801b522:	60f8      	str	r0, [r7, #12]
 801b524:	eeb0 7a40 	vmov.f32	s14, s0
 801b528:	eef0 7a60 	vmov.f32	s15, s1
 801b52c:	ed87 7a01 	vstr	s14, [r7, #4]
 801b530:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	695b      	ldr	r3, [r3, #20]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d10f      	bne.n	801b55c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x40>
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d00b      	beq.n	801b55c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x40>
           return _p.function(a);
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	ed97 7a01 	vldr	s14, [r7, #4]
 801b54c:	edd7 7a02 	vldr	s15, [r7, #8]
 801b550:	eeb0 0a47 	vmov.f32	s0, s14
 801b554:	eef0 0a67 	vmov.f32	s1, s15
 801b558:	4798      	blx	r3
 801b55a:	e019      	b.n	801b590 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	695b      	ldr	r3, [r3, #20]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d014      	beq.n	801b58e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x72>
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d010      	beq.n	801b58e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	695b      	ldr	r3, [r3, #20]
 801b570:	68fa      	ldr	r2, [r7, #12]
 801b572:	6810      	ldr	r0, [r2, #0]
 801b574:	68fa      	ldr	r2, [r7, #12]
 801b576:	3204      	adds	r2, #4
 801b578:	ed97 7a01 	vldr	s14, [r7, #4]
 801b57c:	edd7 7a02 	vldr	s15, [r7, #8]
 801b580:	eeb0 0a47 	vmov.f32	s0, s14
 801b584:	eef0 0a67 	vmov.f32	s1, s15
 801b588:	4611      	mov	r1, r2
 801b58a:	4798      	blx	r3
 801b58c:	e000      	b.n	801b590 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x74>
        return R();
 801b58e:	bf00      	nop
    }
 801b590:	3710      	adds	r7, #16
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}

0801b596 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_>:
    R call(A1 a) {
 801b596:	b580      	push	{r7, lr}
 801b598:	b084      	sub	sp, #16
 801b59a:	af00      	add	r7, sp, #0
 801b59c:	60f8      	str	r0, [r7, #12]
 801b59e:	eeb0 7a40 	vmov.f32	s14, s0
 801b5a2:	eef0 7a60 	vmov.f32	s15, s1
 801b5a6:	ed87 7a01 	vstr	s14, [r7, #4]
 801b5aa:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	695b      	ldr	r3, [r3, #20]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d10f      	bne.n	801b5d6 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x40>
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d00b      	beq.n	801b5d6 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x40>
           return _p.function(a);
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	ed97 7a01 	vldr	s14, [r7, #4]
 801b5c6:	edd7 7a02 	vldr	s15, [r7, #8]
 801b5ca:	eeb0 0a47 	vmov.f32	s0, s14
 801b5ce:	eef0 0a67 	vmov.f32	s1, s15
 801b5d2:	4798      	blx	r3
 801b5d4:	e019      	b.n	801b60a <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	695b      	ldr	r3, [r3, #20]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d014      	beq.n	801b608 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x72>
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d010      	beq.n	801b608 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	695b      	ldr	r3, [r3, #20]
 801b5ea:	68fa      	ldr	r2, [r7, #12]
 801b5ec:	6810      	ldr	r0, [r2, #0]
 801b5ee:	68fa      	ldr	r2, [r7, #12]
 801b5f0:	3204      	adds	r2, #4
 801b5f2:	ed97 7a01 	vldr	s14, [r7, #4]
 801b5f6:	edd7 7a02 	vldr	s15, [r7, #8]
 801b5fa:	eeb0 0a47 	vmov.f32	s0, s14
 801b5fe:	eef0 0a67 	vmov.f32	s1, s15
 801b602:	4611      	mov	r1, r2
 801b604:	4798      	blx	r3
 801b606:	e000      	b.n	801b60a <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x74>
        return R();
 801b608:	bf00      	nop
    }
 801b60a:	3710      	adds	r7, #16
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bd80      	pop	{r7, pc}

0801b610 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>:
    R call(A1 a) {
 801b610:	b580      	push	{r7, lr}
 801b612:	b082      	sub	sp, #8
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	695b      	ldr	r3, [r3, #20]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d109      	bne.n	801b636 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d005      	beq.n	801b636 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
           return _p.function(a);
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	6838      	ldr	r0, [r7, #0]
 801b630:	4798      	blx	r3
 801b632:	4603      	mov	r3, r0
 801b634:	e012      	b.n	801b65c <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	695b      	ldr	r3, [r3, #20]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d00d      	beq.n	801b65a <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d009      	beq.n	801b65a <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	695b      	ldr	r3, [r3, #20]
 801b64a:	687a      	ldr	r2, [r7, #4]
 801b64c:	6810      	ldr	r0, [r2, #0]
 801b64e:	687a      	ldr	r2, [r7, #4]
 801b650:	1d11      	adds	r1, r2, #4
 801b652:	683a      	ldr	r2, [r7, #0]
 801b654:	4798      	blx	r3
 801b656:	4603      	mov	r3, r0
 801b658:	e000      	b.n	801b65c <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        return R();
 801b65a:	2300      	movs	r3, #0
    }
 801b65c:	4618      	mov	r0, r3
 801b65e:	3708      	adds	r7, #8
 801b660:	46bd      	mov	sp, r7
 801b662:	bd80      	pop	{r7, pc}

0801b664 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>:
    R call(A1 a) {
 801b664:	b580      	push	{r7, lr}
 801b666:	b082      	sub	sp, #8
 801b668:	af00      	add	r7, sp, #0
 801b66a:	6078      	str	r0, [r7, #4]
 801b66c:	460b      	mov	r3, r1
 801b66e:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	695b      	ldr	r3, [r3, #20]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d10a      	bne.n	801b68e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d006      	beq.n	801b68e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
           return _p.function(a);
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	78fa      	ldrb	r2, [r7, #3]
 801b686:	4610      	mov	r0, r2
 801b688:	4798      	blx	r3
 801b68a:	4603      	mov	r3, r0
 801b68c:	e012      	b.n	801b6b4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        } else if (_membercaller && _p.object) {
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	695b      	ldr	r3, [r3, #20]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d00d      	beq.n	801b6b2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d009      	beq.n	801b6b2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
           return _membercaller(_p.object, _member, a);
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	695b      	ldr	r3, [r3, #20]
 801b6a2:	687a      	ldr	r2, [r7, #4]
 801b6a4:	6810      	ldr	r0, [r2, #0]
 801b6a6:	687a      	ldr	r2, [r7, #4]
 801b6a8:	1d11      	adds	r1, r2, #4
 801b6aa:	78fa      	ldrb	r2, [r7, #3]
 801b6ac:	4798      	blx	r3
 801b6ae:	4603      	mov	r3, r0
 801b6b0:	e000      	b.n	801b6b4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        return R();
 801b6b2:	2300      	movs	r3, #0
    }
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	3708      	adds	r7, #8
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	bd80      	pop	{r7, pc}

0801b6bc <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv>:
    R call(){
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b082      	sub	sp, #8
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	695b      	ldr	r3, [r3, #20]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d108      	bne.n	801b6de <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x22>
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d004      	beq.n	801b6de <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x22>
            return _p.function();
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	4798      	blx	r3
 801b6da:	4603      	mov	r3, r0
 801b6dc:	e012      	b.n	801b704 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	695b      	ldr	r3, [r3, #20]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d00d      	beq.n	801b702 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x46>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d009      	beq.n	801b702 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	695b      	ldr	r3, [r3, #20]
 801b6f2:	687a      	ldr	r2, [r7, #4]
 801b6f4:	6810      	ldr	r0, [r2, #0]
 801b6f6:	687a      	ldr	r2, [r7, #4]
 801b6f8:	3204      	adds	r2, #4
 801b6fa:	4611      	mov	r1, r2
 801b6fc:	4798      	blx	r3
 801b6fe:	4603      	mov	r3, r0
 801b700:	e000      	b.n	801b704 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x48>
        return R();
 801b702:	2300      	movs	r3, #0
    }
 801b704:	4618      	mov	r0, r3
 801b706:	3708      	adds	r7, #8
 801b708:	46bd      	mov	sp, r7
 801b70a:	bd80      	pop	{r7, pc}

0801b70c <_ZN26core_utils_FunctionPointerIffE4callEf>:
    R call(A1 a) {
 801b70c:	b580      	push	{r7, lr}
 801b70e:	b082      	sub	sp, #8
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
 801b714:	ed87 0a00 	vstr	s0, [r7]
        if (_membercaller == 0 && _p.function) {
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	695b      	ldr	r3, [r3, #20]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d10b      	bne.n	801b738 <_ZN26core_utils_FunctionPointerIffE4callEf+0x2c>
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d007      	beq.n	801b738 <_ZN26core_utils_FunctionPointerIffE4callEf+0x2c>
           return _p.function(a);
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	ed97 0a00 	vldr	s0, [r7]
 801b730:	4798      	blx	r3
 801b732:	eef0 7a40 	vmov.f32	s15, s0
 801b736:	e016      	b.n	801b766 <_ZN26core_utils_FunctionPointerIffE4callEf+0x5a>
        } else if (_membercaller && _p.object) {
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	695b      	ldr	r3, [r3, #20]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d010      	beq.n	801b762 <_ZN26core_utils_FunctionPointerIffE4callEf+0x56>
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d00c      	beq.n	801b762 <_ZN26core_utils_FunctionPointerIffE4callEf+0x56>
           return _membercaller(_p.object, _member, a);
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	695b      	ldr	r3, [r3, #20]
 801b74c:	687a      	ldr	r2, [r7, #4]
 801b74e:	6810      	ldr	r0, [r2, #0]
 801b750:	687a      	ldr	r2, [r7, #4]
 801b752:	3204      	adds	r2, #4
 801b754:	ed97 0a00 	vldr	s0, [r7]
 801b758:	4611      	mov	r1, r2
 801b75a:	4798      	blx	r3
 801b75c:	eef0 7a40 	vmov.f32	s15, s0
 801b760:	e001      	b.n	801b766 <_ZN26core_utils_FunctionPointerIffE4callEf+0x5a>
        return R();
 801b762:	eddf 7a03 	vldr	s15, [pc, #12]	@ 801b770 <_ZN26core_utils_FunctionPointerIffE4callEf+0x64>
    }
 801b766:	eeb0 0a67 	vmov.f32	s0, s15
 801b76a:	3708      	adds	r7, #8
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd80      	pop	{r7, pc}
 801b770:	00000000 	.word	0x00000000

0801b774 <_ZN26core_utils_FunctionPointerIhvE4callEv>:
    R call(){
 801b774:	b580      	push	{r7, lr}
 801b776:	b082      	sub	sp, #8
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	695b      	ldr	r3, [r3, #20]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d108      	bne.n	801b796 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x22>
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d004      	beq.n	801b796 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x22>
            return _p.function();
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	4798      	blx	r3
 801b792:	4603      	mov	r3, r0
 801b794:	e012      	b.n	801b7bc <_ZN26core_utils_FunctionPointerIhvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	695b      	ldr	r3, [r3, #20]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d00d      	beq.n	801b7ba <_ZN26core_utils_FunctionPointerIhvE4callEv+0x46>
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d009      	beq.n	801b7ba <_ZN26core_utils_FunctionPointerIhvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	695b      	ldr	r3, [r3, #20]
 801b7aa:	687a      	ldr	r2, [r7, #4]
 801b7ac:	6810      	ldr	r0, [r2, #0]
 801b7ae:	687a      	ldr	r2, [r7, #4]
 801b7b0:	3204      	adds	r2, #4
 801b7b2:	4611      	mov	r1, r2
 801b7b4:	4798      	blx	r3
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	e000      	b.n	801b7bc <_ZN26core_utils_FunctionPointerIhvE4callEv+0x48>
        return R();
 801b7ba:	2300      	movs	r3, #0
    }
 801b7bc:	4618      	mov	r0, r3
 801b7be:	3708      	adds	r7, #8
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}

0801b7c4 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_>:
    R call(A1 a) {
 801b7c4:	b590      	push	{r4, r7, lr}
 801b7c6:	b085      	sub	sp, #20
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	60f8      	str	r0, [r7, #12]
 801b7cc:	1d3b      	adds	r3, r7, #4
 801b7ce:	e883 0006 	stmia.w	r3, {r1, r2}
        if (_membercaller == 0 && _p.function) {
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	695b      	ldr	r3, [r3, #20]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d10a      	bne.n	801b7f0 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x2c>
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d006      	beq.n	801b7f0 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x2c>
           return _p.function(a);
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	1d3a      	adds	r2, r7, #4
 801b7e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7ec:	4798      	blx	r3
 801b7ee:	e012      	b.n	801b816 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x52>
        } else if (_membercaller && _p.object) {
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	695b      	ldr	r3, [r3, #20]
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d00d      	beq.n	801b814 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x50>
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d009      	beq.n	801b814 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x50>
           return _membercaller(_p.object, _member, a);
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	695c      	ldr	r4, [r3, #20]
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	6818      	ldr	r0, [r3, #0]
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	1d19      	adds	r1, r3, #4
 801b80c:	1d3b      	adds	r3, r7, #4
 801b80e:	cb0c      	ldmia	r3, {r2, r3}
 801b810:	47a0      	blx	r4
 801b812:	e000      	b.n	801b816 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x52>
        return R();
 801b814:	bf00      	nop
    }
 801b816:	3714      	adds	r7, #20
 801b818:	46bd      	mov	sp, r7
 801b81a:	bd90      	pop	{r4, r7, pc}

0801b81c <_ZN26core_utils_FunctionPointerIhhE4callEh>:
    R call(A1 a) {
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b082      	sub	sp, #8
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
 801b824:	460b      	mov	r3, r1
 801b826:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	695b      	ldr	r3, [r3, #20]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d10a      	bne.n	801b846 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x2a>
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d006      	beq.n	801b846 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x2a>
           return _p.function(a);
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	78fa      	ldrb	r2, [r7, #3]
 801b83e:	4610      	mov	r0, r2
 801b840:	4798      	blx	r3
 801b842:	4603      	mov	r3, r0
 801b844:	e012      	b.n	801b86c <_ZN26core_utils_FunctionPointerIhhE4callEh+0x50>
        } else if (_membercaller && _p.object) {
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	695b      	ldr	r3, [r3, #20]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d00d      	beq.n	801b86a <_ZN26core_utils_FunctionPointerIhhE4callEh+0x4e>
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d009      	beq.n	801b86a <_ZN26core_utils_FunctionPointerIhhE4callEh+0x4e>
           return _membercaller(_p.object, _member, a);
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	695b      	ldr	r3, [r3, #20]
 801b85a:	687a      	ldr	r2, [r7, #4]
 801b85c:	6810      	ldr	r0, [r2, #0]
 801b85e:	687a      	ldr	r2, [r7, #4]
 801b860:	1d11      	adds	r1, r2, #4
 801b862:	78fa      	ldrb	r2, [r7, #3]
 801b864:	4798      	blx	r3
 801b866:	4603      	mov	r3, r0
 801b868:	e000      	b.n	801b86c <_ZN26core_utils_FunctionPointerIhhE4callEh+0x50>
        return R();
 801b86a:	2300      	movs	r3, #0
    }
 801b86c:	4618      	mov	r0, r3
 801b86e:	3708      	adds	r7, #8
 801b870:	46bd      	mov	sp, r7
 801b872:	bd80      	pop	{r7, pc}

0801b874 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv>:
    R call(){
 801b874:	b580      	push	{r7, lr}
 801b876:	b084      	sub	sp, #16
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	695b      	ldr	r3, [r3, #20]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d109      	bne.n	801b898 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x24>
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d005      	beq.n	801b898 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x24>
            return _p.function();
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	4798      	blx	r3
 801b892:	4603      	mov	r3, r0
 801b894:	81bb      	strh	r3, [r7, #12]
 801b896:	e016      	b.n	801b8c6 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x52>
        } else if (_membercaller && _p.object) {
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	695b      	ldr	r3, [r3, #20]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d00e      	beq.n	801b8be <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x4a>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d00a      	beq.n	801b8be <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x4a>
            return _membercaller(_p.object, _member);
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	695b      	ldr	r3, [r3, #20]
 801b8ac:	687a      	ldr	r2, [r7, #4]
 801b8ae:	6810      	ldr	r0, [r2, #0]
 801b8b0:	687a      	ldr	r2, [r7, #4]
 801b8b2:	3204      	adds	r2, #4
 801b8b4:	4611      	mov	r1, r2
 801b8b6:	4798      	blx	r3
 801b8b8:	4603      	mov	r3, r0
 801b8ba:	81bb      	strh	r3, [r7, #12]
 801b8bc:	e003      	b.n	801b8c6 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x52>
        return R();
 801b8be:	2300      	movs	r3, #0
 801b8c0:	733b      	strb	r3, [r7, #12]
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	737b      	strb	r3, [r7, #13]
    }
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	7b3a      	ldrb	r2, [r7, #12]
 801b8ca:	f362 0307 	bfi	r3, r2, #0, #8
 801b8ce:	7b7a      	ldrb	r2, [r7, #13]
 801b8d0:	f362 230f 	bfi	r3, r2, #8, #8
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	3710      	adds	r7, #16
 801b8d8:	46bd      	mov	sp, r7
 801b8da:	bd80      	pop	{r7, pc}

0801b8dc <_ZN26core_utils_FunctionPointerImvE4callEv>:
    R call(){
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b082      	sub	sp, #8
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	695b      	ldr	r3, [r3, #20]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d108      	bne.n	801b8fe <_ZN26core_utils_FunctionPointerImvE4callEv+0x22>
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d004      	beq.n	801b8fe <_ZN26core_utils_FunctionPointerImvE4callEv+0x22>
            return _p.function();
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	4798      	blx	r3
 801b8fa:	4603      	mov	r3, r0
 801b8fc:	e012      	b.n	801b924 <_ZN26core_utils_FunctionPointerImvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	695b      	ldr	r3, [r3, #20]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d00d      	beq.n	801b922 <_ZN26core_utils_FunctionPointerImvE4callEv+0x46>
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d009      	beq.n	801b922 <_ZN26core_utils_FunctionPointerImvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	695b      	ldr	r3, [r3, #20]
 801b912:	687a      	ldr	r2, [r7, #4]
 801b914:	6810      	ldr	r0, [r2, #0]
 801b916:	687a      	ldr	r2, [r7, #4]
 801b918:	3204      	adds	r2, #4
 801b91a:	4611      	mov	r1, r2
 801b91c:	4798      	blx	r3
 801b91e:	4603      	mov	r3, r0
 801b920:	e000      	b.n	801b924 <_ZN26core_utils_FunctionPointerImvE4callEv+0x48>
        return R();
 801b922:	2300      	movs	r3, #0
    }
 801b924:	4618      	mov	r0, r3
 801b926:	3708      	adds	r7, #8
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}

0801b92c <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv>:
    R call(){
 801b92c:	b580      	push	{r7, lr}
 801b92e:	b082      	sub	sp, #8
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	695b      	ldr	r3, [r3, #20]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d108      	bne.n	801b94e <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x22>
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d004      	beq.n	801b94e <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x22>
            return _p.function();
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	4798      	blx	r3
 801b94a:	4603      	mov	r3, r0
 801b94c:	e012      	b.n	801b974 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	695b      	ldr	r3, [r3, #20]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d00d      	beq.n	801b972 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x46>
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d009      	beq.n	801b972 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	695b      	ldr	r3, [r3, #20]
 801b962:	687a      	ldr	r2, [r7, #4]
 801b964:	6810      	ldr	r0, [r2, #0]
 801b966:	687a      	ldr	r2, [r7, #4]
 801b968:	3204      	adds	r2, #4
 801b96a:	4611      	mov	r1, r2
 801b96c:	4798      	blx	r3
 801b96e:	4603      	mov	r3, r0
 801b970:	e000      	b.n	801b974 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x48>
        return R();
 801b972:	2300      	movs	r3, #0
    }
 801b974:	4618      	mov	r0, r3
 801b976:	3708      	adds	r7, #8
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd80      	pop	{r7, pc}

0801b97c <_GLOBAL__sub_I_twipr_firmware>:
 801b97c:	b580      	push	{r7, lr}
 801b97e:	af00      	add	r7, sp, #0
 801b980:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801b984:	2001      	movs	r0, #1
 801b986:	f7fe f9c5 	bl	8019d14 <_Z41__static_initialization_and_destruction_0ii>
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <_GLOBAL__sub_D_twipr_firmware>:
 801b98c:	b580      	push	{r7, lr}
 801b98e:	af00      	add	r7, sp, #0
 801b990:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801b994:	2000      	movs	r0, #0
 801b996:	f7fe f9bd 	bl	8019d14 <_Z41__static_initialization_and_destruction_0ii>
 801b99a:	bd80      	pop	{r7, pc}

0801b99c <_ZN13TWIPR_LoggingC1Ev>:


#include "twipr_logging.h"
#include "firmware.hpp"

TWIPR_Logging::TWIPR_Logging(){
 801b99c:	b480      	push	{r7}
 801b99e:	b083      	sub	sp, #12
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	6078      	str	r0, [r7, #4]
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	f8c3 253c 	str.w	r2, [r3, #1340]	@ 0x53c

}
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	370c      	adds	r7, #12
 801b9b2:	46bd      	mov	sp, r7
 801b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b8:	4770      	bx	lr

0801b9ba <_ZN13TWIPR_Logging4initE22twipr_logging_config_t>:


void TWIPR_Logging::init(twipr_logging_config_t config){
 801b9ba:	b084      	sub	sp, #16
 801b9bc:	b4b0      	push	{r4, r5, r7}
 801b9be:	b083      	sub	sp, #12
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
 801b9c4:	f107 001c 	add.w	r0, r7, #28
 801b9c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	f503 64a5 	add.w	r4, r3, #1320	@ 0x528
 801b9d2:	f107 051c 	add.w	r5, r7, #28
 801b9d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b9da:	682b      	ldr	r3, [r5, #0]
 801b9dc:	6023      	str	r3, [r4, #0]
	this->sample_index = 0;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	2200      	movs	r2, #0
 801b9e2:	f8c3 253c 	str.w	r2, [r3, #1340]	@ 0x53c
}
 801b9e6:	bf00      	nop
 801b9e8:	370c      	adds	r7, #12
 801b9ea:	46bd      	mov	sp, r7
 801b9ec:	bcb0      	pop	{r4, r5, r7}
 801b9ee:	b004      	add	sp, #16
 801b9f0:	4770      	bx	lr

0801b9f2 <_ZN13TWIPR_Logging14collectSamplesEv>:

}



twipr_logging_buffer_status_t TWIPR_Logging::collectSamples(){
 801b9f2:	b5b0      	push	{r4, r5, r7, lr}
 801b9f4:	b094      	sub	sp, #80	@ 0x50
 801b9f6:	af00      	add	r7, sp, #0
 801b9f8:	64f8      	str	r0, [r7, #76]	@ 0x4c
	this->sample_buffer[this->sample_index].general = this->config.firmware->getSample();
 801b9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9fc:	f8d3 0528 	ldr.w	r0, [r3, #1320]	@ 0x528
 801ba00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba02:	f8d3 253c 	ldr.w	r2, [r3, #1340]	@ 0x53c
 801ba06:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801ba08:	4613      	mov	r3, r2
 801ba0a:	015b      	lsls	r3, r3, #5
 801ba0c:	4413      	add	r3, r2
 801ba0e:	009b      	lsls	r3, r3, #2
 801ba10:	18cc      	adds	r4, r1, r3
 801ba12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ba16:	4601      	mov	r1, r0
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f7fc fbd7 	bl	80181cc <_ZN14TWIPR_Firmware9getSampleEv>
 801ba1e:	4622      	mov	r2, r4
 801ba20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ba24:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba28:	e882 0003 	stmia.w	r2, {r0, r1}
	this->sample_buffer[this->sample_index].control = this->config.control->getSample();
 801ba2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba2e:	f8d3 052c 	ldr.w	r0, [r3, #1324]	@ 0x52c
 801ba32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba34:	f8d3 253c 	ldr.w	r2, [r3, #1340]	@ 0x53c
 801ba38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801ba3a:	4613      	mov	r3, r2
 801ba3c:	015b      	lsls	r3, r3, #5
 801ba3e:	4413      	add	r3, r2
 801ba40:	009b      	lsls	r3, r3, #2
 801ba42:	440b      	add	r3, r1
 801ba44:	f103 0408 	add.w	r4, r3, #8
 801ba48:	463b      	mov	r3, r7
 801ba4a:	4601      	mov	r1, r0
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	f7fa fb61 	bl	8016114 <_ZN20TWIPR_ControlManager9getSampleEv>
 801ba52:	4625      	mov	r5, r4
 801ba54:	463c      	mov	r4, r7
 801ba56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ba5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ba5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ba62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ba66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	this->sample_buffer[this->sample_index].estimation = this->config.estimation->getSample();
 801ba6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba6c:	f8d3 0530 	ldr.w	r0, [r3, #1328]	@ 0x530
 801ba70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba72:	f8d3 253c 	ldr.w	r2, [r3, #1340]	@ 0x53c
 801ba76:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801ba78:	4613      	mov	r3, r2
 801ba7a:	015b      	lsls	r3, r3, #5
 801ba7c:	4413      	add	r3, r2
 801ba7e:	009b      	lsls	r3, r3, #2
 801ba80:	440b      	add	r3, r1
 801ba82:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801ba86:	463b      	mov	r3, r7
 801ba88:	4601      	mov	r1, r0
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	f7fb fede 	bl	801784c <_ZN16TWIPR_Estimation9getSampleEv>
 801ba90:	3404      	adds	r4, #4
 801ba92:	463d      	mov	r5, r7
 801ba94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ba98:	682b      	ldr	r3, [r5, #0]
 801ba9a:	6023      	str	r3, [r4, #0]
	this->sample_buffer[this->sample_index].sensors = this->config.sensors->getData();
 801ba9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba9e:	f8d3 0534 	ldr.w	r0, [r3, #1332]	@ 0x534
 801baa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801baa4:	f8d3 253c 	ldr.w	r2, [r3, #1340]	@ 0x53c
 801baa8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801baaa:	4613      	mov	r3, r2
 801baac:	015b      	lsls	r3, r3, #5
 801baae:	4413      	add	r3, r2
 801bab0:	009b      	lsls	r3, r3, #2
 801bab2:	440b      	add	r3, r1
 801bab4:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 801bab8:	463b      	mov	r3, r7
 801baba:	4601      	mov	r1, r0
 801babc:	4618      	mov	r0, r3
 801babe:	f7fb ff69 	bl	8017994 <_ZN13TWIPR_Sensors7getDataEv>
 801bac2:	4625      	mov	r5, r4
 801bac4:	463c      	mov	r4, r7
 801bac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801baca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bacc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bace:	6823      	ldr	r3, [r4, #0]
 801bad0:	602b      	str	r3, [r5, #0]
	this->sample_buffer[this->sample_index].sequence = this->config.sequencer->getSample();
 801bad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bad4:	f8d3 0538 	ldr.w	r0, [r3, #1336]	@ 0x538
 801bad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bada:	f8d3 253c 	ldr.w	r2, [r3, #1340]	@ 0x53c
 801bade:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801bae0:	4613      	mov	r3, r2
 801bae2:	015b      	lsls	r3, r3, #5
 801bae4:	4413      	add	r3, r2
 801bae6:	009b      	lsls	r3, r3, #2
 801bae8:	440b      	add	r3, r1
 801baea:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 801baee:	463b      	mov	r3, r7
 801baf0:	4601      	mov	r1, r0
 801baf2:	4618      	mov	r0, r3
 801baf4:	f000 fada 	bl	801c0ac <_ZN15TWIPR_Sequencer9getSampleEv>
 801baf8:	1d23      	adds	r3, r4, #4
 801bafa:	463a      	mov	r2, r7
 801bafc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bb00:	e883 0003 	stmia.w	r3, {r0, r1}

	this->sample_index++;
 801bb04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb06:	f8d3 353c 	ldr.w	r3, [r3, #1340]	@ 0x53c
 801bb0a:	1c5a      	adds	r2, r3, #1
 801bb0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb0e:	f8c3 253c 	str.w	r2, [r3, #1340]	@ 0x53c

	if (this->sample_index == TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE){
 801bb12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb14:	f8d3 353c 	ldr.w	r3, [r3, #1340]	@ 0x53c
 801bb18:	2b0a      	cmp	r3, #10
 801bb1a:	d105      	bne.n	801bb28 <_ZN13TWIPR_Logging14collectSamplesEv+0x136>
		this->sample_index = 0;
 801bb1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb1e:	2200      	movs	r2, #0
 801bb20:	f8c3 253c 	str.w	r2, [r3, #1340]	@ 0x53c
		return TWIPR_LOGGING_BUFFER_FULL;
 801bb24:	2301      	movs	r3, #1
 801bb26:	e000      	b.n	801bb2a <_ZN13TWIPR_Logging14collectSamplesEv+0x138>
	}

	return TWIPR_LOGGING_BUFFER_NOT_FULL;
 801bb28:	2300      	movs	r3, #0
}
 801bb2a:	4618      	mov	r0, r3
 801bb2c:	3750      	adds	r7, #80	@ 0x50
 801bb2e:	46bd      	mov	sp, r7
 801bb30:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801bb34 <_ZN31twipr_supervisor_stuck_config_tC1Ev>:
//#include "twipr_drive.h"
#include "twipr_drive_can.h"
#include "twipr_control.h"
#include "twipr_communication.h"

typedef struct twipr_supervisor_stuck_config_t {
 801bb34:	b480      	push	{r7}
 801bb36:	b083      	sub	sp, #12
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	4a07      	ldr	r2, [pc, #28]	@ (801bb5c <_ZN31twipr_supervisor_stuck_config_tC1Ev+0x28>)
 801bb40:	601a      	str	r2, [r3, #0]
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	4a06      	ldr	r2, [pc, #24]	@ (801bb60 <_ZN31twipr_supervisor_stuck_config_tC1Ev+0x2c>)
 801bb46:	605a      	str	r2, [r3, #4]
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	2232      	movs	r2, #50	@ 0x32
 801bb4c:	609a      	str	r2, [r3, #8]
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	4618      	mov	r0, r3
 801bb52:	370c      	adds	r7, #12
 801bb54:	46bd      	mov	sp, r7
 801bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb5a:	4770      	bx	lr
 801bb5c:	3dcccccd 	.word	0x3dcccccd
 801bb60:	3d4ccccd 	.word	0x3d4ccccd

0801bb64 <_ZN36twipr_supervisor_controller_config_tC1Ev>:
	float last_velocity_error = 0;
	float last_pitch_angle = 0;
	float error_count = 0;
} twipr_supervisor_stuck_data_t;

typedef struct twipr_supervisor_controller_config_t {
 801bb64:	b480      	push	{r7}
 801bb66:	b083      	sub	sp, #12
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	4a06      	ldr	r2, [pc, #24]	@ (801bb88 <_ZN36twipr_supervisor_controller_config_tC1Ev+0x24>)
 801bb70:	601a      	str	r2, [r3, #0]
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	4a04      	ldr	r2, [pc, #16]	@ (801bb88 <_ZN36twipr_supervisor_controller_config_tC1Ev+0x24>)
 801bb76:	605a      	str	r2, [r3, #4]
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	370c      	adds	r7, #12
 801bb7e:	46bd      	mov	sp, r7
 801bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb84:	4770      	bx	lr
 801bb86:	bf00      	nop
 801bb88:	3e4ccccd 	.word	0x3e4ccccd

0801bb8c <_ZN25twipr_supervisor_config_tC1Ev>:
	float max_forward_pid_integrator = 0.2;
	float max_turn_pid_integrator = 0.2;
} twipr_supervisor_controller_config_t;

typedef struct twipr_supervisor_config_t {
 801bb8c:	b580      	push	{r7, lr}
 801bb8e:	b082      	sub	sp, #8
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	3318      	adds	r3, #24
 801bb98:	4618      	mov	r0, r3
 801bb9a:	f7ff ffcb 	bl	801bb34 <_ZN31twipr_supervisor_stuck_config_tC1Ev>
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	3324      	adds	r3, #36	@ 0x24
 801bba2:	4618      	mov	r0, r3
 801bba4:	f7ff ffde 	bl	801bb64 <_ZN36twipr_supervisor_controller_config_tC1Ev>
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	4618      	mov	r0, r3
 801bbac:	3708      	adds	r7, #8
 801bbae:	46bd      	mov	sp, r7
 801bbb0:	bd80      	pop	{r7, pc}

0801bbb2 <_ZN29twipr_supervisor_stuck_data_tC1Ev>:
typedef struct twipr_supervisor_stuck_data_t {
 801bbb2:	b480      	push	{r7}
 801bbb4:	b083      	sub	sp, #12
 801bbb6:	af00      	add	r7, sp, #0
 801bbb8:	6078      	str	r0, [r7, #4]
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	2200      	movs	r2, #0
 801bbbe:	701a      	strb	r2, [r3, #0]
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	f04f 0200 	mov.w	r2, #0
 801bbc6:	605a      	str	r2, [r3, #4]
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	f04f 0200 	mov.w	r2, #0
 801bbce:	609a      	str	r2, [r3, #8]
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	f04f 0200 	mov.w	r2, #0
 801bbd6:	60da      	str	r2, [r3, #12]
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	4618      	mov	r0, r3
 801bbdc:	370c      	adds	r7, #12
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe4:	4770      	bx	lr

0801bbe6 <_ZN16TWIPR_SupervisorC1Ev>:
elapsedMillis timerDriveTick;

warning_message_struct_t warning_message;

/* ============================================================================= */
TWIPR_Supervisor::TWIPR_Supervisor() {
 801bbe6:	b580      	push	{r7, lr}
 801bbe8:	b082      	sub	sp, #8
 801bbea:	af00      	add	r7, sp, #0
 801bbec:	6078      	str	r0, [r7, #4]
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	f7ff ffcb 	bl	801bb8c <_ZN25twipr_supervisor_config_tC1Ev>
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	2200      	movs	r2, #0
 801bbfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	2200      	movs	r2, #0
 801bc02:	631a      	str	r2, [r3, #48]	@ 0x30
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	3340      	adds	r3, #64	@ 0x40
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7ff ffd2 	bl	801bbb2 <_ZN29twipr_supervisor_stuck_data_tC1Ev>

}
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	4618      	mov	r0, r3
 801bc12:	3708      	adds	r7, #8
 801bc14:	46bd      	mov	sp, r7
 801bc16:	bd80      	pop	{r7, pc}

0801bc18 <_ZN16TWIPR_Supervisor4initE25twipr_supervisor_config_t>:

/* ============================================================================= */
void TWIPR_Supervisor::init(twipr_supervisor_config_t config) {
 801bc18:	b084      	sub	sp, #16
 801bc1a:	b4b0      	push	{r4, r5, r7}
 801bc1c:	b083      	sub	sp, #12
 801bc1e:	af00      	add	r7, sp, #0
 801bc20:	6078      	str	r0, [r7, #4]
 801bc22:	f107 001c 	add.w	r0, r7, #28
 801bc26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	461d      	mov	r5, r3
 801bc2e:	f107 041c 	add.w	r4, r7, #28
 801bc32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bc3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801bc42:	bf00      	nop
 801bc44:	370c      	adds	r7, #12
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bcb0      	pop	{r4, r5, r7}
 801bc4a:	b004      	add	sp, #16
 801bc4c:	4770      	bx	lr
	...

0801bc50 <_ZN16TWIPR_Supervisor5startEv>:

/* ============================================================================= */
void TWIPR_Supervisor::start() {
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b082      	sub	sp, #8
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	6078      	str	r0, [r7, #4]
	osThreadNew(startTwiprSupervisorTask, (void*) this,
 801bc58:	4a04      	ldr	r2, [pc, #16]	@ (801bc6c <_ZN16TWIPR_Supervisor5startEv+0x1c>)
 801bc5a:	6879      	ldr	r1, [r7, #4]
 801bc5c:	4804      	ldr	r0, [pc, #16]	@ (801bc70 <_ZN16TWIPR_Supervisor5startEv+0x20>)
 801bc5e:	f7f2 fefe 	bl	800ea5e <osThreadNew>
			&safety_task_attributes);
}
 801bc62:	bf00      	nop
 801bc64:	3708      	adds	r7, #8
 801bc66:	46bd      	mov	sp, r7
 801bc68:	bd80      	pop	{r7, pc}
 801bc6a:	bf00      	nop
 801bc6c:	080251d4 	.word	0x080251d4
 801bc70:	0801bf79 	.word	0x0801bf79

0801bc74 <_ZN16TWIPR_Supervisor4taskEv>:

/* ============================================================================= */
void TWIPR_Supervisor::task() {
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b086      	sub	sp, #24
 801bc78:	af02      	add	r7, sp, #8
 801bc7a:	6078      	str	r0, [r7, #4]
	timerDriveTick.reset();
 801bc7c:	483b      	ldr	r0, [pc, #236]	@ (801bd6c <_ZN16TWIPR_Supervisor4taskEv+0xf8>)
 801bc7e:	f7fa fd40 	bl	8016702 <_ZN13elapsedMillis5resetEv>
	while (true) {
		twipr_supervisor_error_t error;

		// Check the motors
		error = this->checkMotors();
 801bc82:	6878      	ldr	r0, [r7, #4]
 801bc84:	f000 f87c 	bl	801bd80 <_ZN16TWIPR_Supervisor11checkMotorsEv>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_MOTOR_TIMEOUT) {
 801bc8c:	7bfb      	ldrb	r3, [r7, #15]
 801bc8e:	2b04      	cmp	r3, #4
 801bc90:	d110      	bne.n	801bcb4 <_ZN16TWIPR_Supervisor4taskEv+0x40>

			// Stop the control module
			this->config.control->stop();
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	689b      	ldr	r3, [r3, #8]
 801bc96:	4618      	mov	r0, r3
 801bc98:	f7f9 fda7 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_CRITICAL);
 801bc9c:	2101      	movs	r1, #1
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f000 f954 	bl	801bf4c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_CRITICAL, "Motor Timeout", 13);
 801bca4:	7bf9      	ldrb	r1, [r7, #15]
 801bca6:	230d      	movs	r3, #13
 801bca8:	9300      	str	r3, [sp, #0]
 801bcaa:	4b31      	ldr	r3, [pc, #196]	@ (801bd70 <_ZN16TWIPR_Supervisor4taskEv+0xfc>)
 801bcac:	2201      	movs	r2, #1
 801bcae:	6878      	ldr	r0, [r7, #4]
 801bcb0:	f000 f918 	bl	801bee4 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>
		}
		if (error == TWIPR_SUPERVISOR_MOTOR_RACECONDITION_RESETS){
 801bcb4:	7bfb      	ldrb	r3, [r7, #15]
 801bcb6:	2b07      	cmp	r3, #7
 801bcb8:	d110      	bne.n	801bcdc <_ZN16TWIPR_Supervisor4taskEv+0x68>
			this->config.control->stop();
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	689b      	ldr	r3, [r3, #8]
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f7f9 fd93 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_CRITICAL);
 801bcc4:	2101      	movs	r1, #1
 801bcc6:	6878      	ldr	r0, [r7, #4]
 801bcc8:	f000 f940 	bl	801bf4c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_CRITICAL, "Motor Race Conditions", 21);
 801bccc:	7bf9      	ldrb	r1, [r7, #15]
 801bcce:	2315      	movs	r3, #21
 801bcd0:	9300      	str	r3, [sp, #0]
 801bcd2:	4b28      	ldr	r3, [pc, #160]	@ (801bd74 <_ZN16TWIPR_Supervisor4taskEv+0x100>)
 801bcd4:	2201      	movs	r2, #1
 801bcd6:	6878      	ldr	r0, [r7, #4]
 801bcd8:	f000 f904 	bl	801bee4 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>
		}

		// Check the motor speed
		error = this->checkMotorSpeed();
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f000 f87f 	bl	801bde0 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv>
 801bce2:	4603      	mov	r3, r0
 801bce4:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_WHEEL_SPEED) {
 801bce6:	7bfb      	ldrb	r3, [r7, #15]
 801bce8:	2b02      	cmp	r3, #2
 801bcea:	d110      	bne.n	801bd0e <_ZN16TWIPR_Supervisor4taskEv+0x9a>
			// Stop the control module
			this->config.control->stop();
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	689b      	ldr	r3, [r3, #8]
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f7f9 fd7a 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_WARNING);
 801bcf6:	2102      	movs	r1, #2
 801bcf8:	6878      	ldr	r0, [r7, #4]
 801bcfa:	f000 f927 	bl	801bf4c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_WARNING, "Motor Speed Warning", 19);
 801bcfe:	7bf9      	ldrb	r1, [r7, #15]
 801bd00:	2313      	movs	r3, #19
 801bd02:	9300      	str	r3, [sp, #0]
 801bd04:	4b1c      	ldr	r3, [pc, #112]	@ (801bd78 <_ZN16TWIPR_Supervisor4taskEv+0x104>)
 801bd06:	2202      	movs	r2, #2
 801bd08:	6878      	ldr	r0, [r7, #4]
 801bd0a:	f000 f8eb 	bl	801bee4 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>

		}

		// Check the button
		error = this->checkButton();
 801bd0e:	6878      	ldr	r0, [r7, #4]
 801bd10:	f000 f8aa 	bl	801be68 <_ZN16TWIPR_Supervisor11checkButtonEv>
 801bd14:	4603      	mov	r3, r0
 801bd16:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_MANUAL_STOP) {
 801bd18:	7bfb      	ldrb	r3, [r7, #15]
 801bd1a:	2b03      	cmp	r3, #3
 801bd1c:	d110      	bne.n	801bd40 <_ZN16TWIPR_Supervisor4taskEv+0xcc>
			// Stop the control module
			this->config.control->stop();
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	689b      	ldr	r3, [r3, #8]
 801bd22:	4618      	mov	r0, r3
 801bd24:	f7f9 fd61 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_WARNING);
 801bd28:	2102      	movs	r1, #2
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f000 f90e 	bl	801bf4c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_WARNING, "Manual Stop", 11);
 801bd30:	7bf9      	ldrb	r1, [r7, #15]
 801bd32:	230b      	movs	r3, #11
 801bd34:	9300      	str	r3, [sp, #0]
 801bd36:	4b11      	ldr	r3, [pc, #68]	@ (801bd7c <_ZN16TWIPR_Supervisor4taskEv+0x108>)
 801bd38:	2202      	movs	r2, #2
 801bd3a:	6878      	ldr	r0, [r7, #4]
 801bd3c:	f000 f8d2 	bl	801bee4 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>
//			this->config.control->stop();
//			this->setError(TWIPR_ERROR_WARNING);
//		}

// Check the controllers
		error = this->checkControllers();
 801bd40:	6878      	ldr	r0, [r7, #4]
 801bd42:	f000 f8b0 	bl	801bea6 <_ZN16TWIPR_Supervisor16checkControllersEv>
 801bd46:	4603      	mov	r3, r0
 801bd48:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_ERROR_INTEGRATOR_OVERRUN) {
 801bd4a:	7bfb      	ldrb	r3, [r7, #15]
 801bd4c:	2b06      	cmp	r3, #6
 801bd4e:	d108      	bne.n	801bd62 <_ZN16TWIPR_Supervisor4taskEv+0xee>
			// Stop the control module
			this->config.control->stop();
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	689b      	ldr	r3, [r3, #8]
 801bd54:	4618      	mov	r0, r3
 801bd56:	f7f9 fd48 	bl	80157ea <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_WARNING);
 801bd5a:	2102      	movs	r1, #2
 801bd5c:	6878      	ldr	r0, [r7, #4]
 801bd5e:	f000 f8f5 	bl	801bf4c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
		}
		osDelay(10);
 801bd62:	200a      	movs	r0, #10
 801bd64:	f7f2 ff0d 	bl	800eb82 <osDelay>
	}
 801bd68:	e78b      	b.n	801bc82 <_ZN16TWIPR_Supervisor4taskEv+0xe>
 801bd6a:	bf00      	nop
 801bd6c:	2402862c 	.word	0x2402862c
 801bd70:	08024a38 	.word	0x08024a38
 801bd74:	08024a48 	.word	0x08024a48
 801bd78:	08024a60 	.word	0x08024a60
 801bd7c:	08024a74 	.word	0x08024a74

0801bd80 <_ZN16TWIPR_Supervisor11checkMotorsEv>:
}

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkMotors() {
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b082      	sub	sp, #8
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	6078      	str	r0, [r7, #4]

	if (timerDriveTick > 1000) {
 801bd88:	4814      	ldr	r0, [pc, #80]	@ (801bddc <_ZN16TWIPR_Supervisor11checkMotorsEv+0x5c>)
 801bd8a:	f7fa fcd5 	bl	8016738 <_ZNK13elapsedMilliscvmEv>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bd94:	bf8c      	ite	hi
 801bd96:	2301      	movhi	r3, #1
 801bd98:	2300      	movls	r3, #0
 801bd9a:	b2db      	uxtb	r3, r3
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d017      	beq.n	801bdd0 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x50>
		timerDriveTick.reset();
 801bda0:	480e      	ldr	r0, [pc, #56]	@ (801bddc <_ZN16TWIPR_Supervisor11checkMotorsEv+0x5c>)
 801bda2:	f7fa fcae 	bl	8016702 <_ZN13elapsedMillis5resetEv>
		if (!(this->config.drive->tick > this->lastDriveTick)) {
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	685b      	ldr	r3, [r3, #4]
 801bdaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bdb0:	429a      	cmp	r2, r3
 801bdb2:	d806      	bhi.n	801bdc2 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x42>

			this->lastDriveTick = this->config.drive->tick;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	631a      	str	r2, [r3, #48]	@ 0x30
			return TWIPR_SUPERVISOR_MOTOR_TIMEOUT;
 801bdbe:	2304      	movs	r3, #4
 801bdc0:	e007      	b.n	801bdd2 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x52>
		} else {
			this->lastDriveTick = this->config.drive->tick;
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	685b      	ldr	r3, [r3, #4]
 801bdc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	631a      	str	r2, [r3, #48]	@ 0x30
			return TWIPR_SUPERVISOR_NONE;
 801bdcc:	2300      	movs	r3, #0
 801bdce:	e000      	b.n	801bdd2 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x52>
	}
//	if (this->config.drive->race_conditions >=10){
//		return TWIPR_SUPERVISOR_MOTOR_RACECONDITION_RESETS;
//	}

	return TWIPR_SUPERVISOR_NONE;
 801bdd0:	2300      	movs	r3, #0
}
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	3708      	adds	r7, #8
 801bdd6:	46bd      	mov	sp, r7
 801bdd8:	bd80      	pop	{r7, pc}
 801bdda:	bf00      	nop
 801bddc:	2402862c 	.word	0x2402862c

0801bde0 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv>:

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkMotorSpeed() {
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b084      	sub	sp, #16
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]

	if (this->config.control->mode == TWIPR_CONTROL_MODE_OFF) {
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	689b      	ldr	r3, [r3, #8]
 801bdec:	785b      	ldrb	r3, [r3, #1]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d101      	bne.n	801bdf6 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x16>
		return TWIPR_SUPERVISOR_NONE;
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	e034      	b.n	801be60 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x80>
	}

	twipr_drive_can_speed_t speed = this->config.drive->getSpeed();
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	685b      	ldr	r3, [r3, #4]
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	f7fb f994 	bl	8017128 <_ZN15TWIPR_Drive_CAN8getSpeedEv>
 801be00:	eeb0 7a40 	vmov.f32	s14, s0
 801be04:	eef0 7a60 	vmov.f32	s15, s1
 801be08:	ed87 7a02 	vstr	s14, [r7, #8]
 801be0c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (abs(speed.speed_left) > this->config.max_wheel_speed
 801be10:	edd7 7a02 	vldr	s15, [r7, #8]
 801be14:	eeb0 0a67 	vmov.f32	s0, s15
 801be18:	f7fa fc63 	bl	80166e2 <_ZSt3absf>
 801be1c:	eeb0 7a40 	vmov.f32	s14, s0
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	edd3 7a05 	vldr	s15, [r3, #20]
			|| abs(speed.speed_right) > this->config.max_wheel_speed) {
 801be26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be2e:	dc0f      	bgt.n	801be50 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x70>
 801be30:	edd7 7a03 	vldr	s15, [r7, #12]
 801be34:	eeb0 0a67 	vmov.f32	s0, s15
 801be38:	f7fa fc53 	bl	80166e2 <_ZSt3absf>
 801be3c:	eeb0 7a40 	vmov.f32	s14, s0
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	edd3 7a05 	vldr	s15, [r3, #20]
 801be46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be4e:	dd01      	ble.n	801be54 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x74>
 801be50:	2301      	movs	r3, #1
 801be52:	e000      	b.n	801be56 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x76>
 801be54:	2300      	movs	r3, #0
	if (abs(speed.speed_left) > this->config.max_wheel_speed
 801be56:	2b00      	cmp	r3, #0
 801be58:	d001      	beq.n	801be5e <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x7e>
		return TWIPR_SUPERVISOR_WHEEL_SPEED;
 801be5a:	2302      	movs	r3, #2
 801be5c:	e000      	b.n	801be60 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x80>
	}
	return TWIPR_SUPERVISOR_NONE;
 801be5e:	2300      	movs	r3, #0
}
 801be60:	4618      	mov	r0, r3
 801be62:	3710      	adds	r7, #16
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}

0801be68 <_ZN16TWIPR_Supervisor11checkButtonEv>:

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkButton() {
 801be68:	b580      	push	{r7, lr}
 801be6a:	b082      	sub	sp, #8
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]

	if (this->config.control->mode == TWIPR_CONTROL_MODE_OFF) {
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	689b      	ldr	r3, [r3, #8]
 801be74:	785b      	ldrb	r3, [r3, #1]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d101      	bne.n	801be7e <_ZN16TWIPR_Supervisor11checkButtonEv+0x16>
		return TWIPR_SUPERVISOR_NONE;
 801be7a:	2300      	movs	r3, #0
 801be7c:	e00f      	b.n	801be9e <_ZN16TWIPR_Supervisor11checkButtonEv+0x36>
	}

	if (this->config.off_button->check() == 0) {
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	691b      	ldr	r3, [r3, #16]
 801be82:	4618      	mov	r0, r3
 801be84:	f003 fa9a 	bl	801f3bc <_ZN20core_hardware_Button5checkEv>
 801be88:	4603      	mov	r3, r0
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	bf0c      	ite	eq
 801be8e:	2301      	moveq	r3, #1
 801be90:	2300      	movne	r3, #0
 801be92:	b2db      	uxtb	r3, r3
 801be94:	2b00      	cmp	r3, #0
 801be96:	d001      	beq.n	801be9c <_ZN16TWIPR_Supervisor11checkButtonEv+0x34>
		return TWIPR_SUPERVISOR_MANUAL_STOP;
 801be98:	2303      	movs	r3, #3
 801be9a:	e000      	b.n	801be9e <_ZN16TWIPR_Supervisor11checkButtonEv+0x36>
	} else {
		return TWIPR_SUPERVISOR_NONE;
 801be9c:	2300      	movs	r3, #0
	}
}
 801be9e:	4618      	mov	r0, r3
 801bea0:	3708      	adds	r7, #8
 801bea2:	46bd      	mov	sp, r7
 801bea4:	bd80      	pop	{r7, pc}

0801bea6 <_ZN16TWIPR_Supervisor16checkControllersEv>:
	return TWIPR_SUPERVISOR_NONE;

}

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkControllers() {
 801bea6:	b480      	push	{r7}
 801bea8:	b083      	sub	sp, #12
 801beaa:	af00      	add	r7, sp, #0
 801beac:	6078      	str	r0, [r7, #4]

	return TWIPR_SUPERVISOR_NONE;
 801beae:	2300      	movs	r3, #0

}
 801beb0:	4618      	mov	r0, r3
 801beb2:	370c      	adds	r7, #12
 801beb4:	46bd      	mov	sp, r7
 801beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beba:	4770      	bx	lr

0801bebc <_ZN16TWIPR_Supervisor5checkEv>:

/* ============================================================================= */
twipr_error_t TWIPR_Supervisor::check() {
 801bebc:	b480      	push	{r7}
 801bebe:	b085      	sub	sp, #20
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
	twipr_error_t output = this->error;
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801beca:	73fb      	strb	r3, [r7, #15]
	this->error = TWIPR_ERROR_NONE;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	2200      	movs	r2, #0
 801bed0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	return output;
 801bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	3714      	adds	r7, #20
 801beda:	46bd      	mov	sp, r7
 801bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee0:	4770      	bx	lr
	...

0801bee4 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>:
/* ============================================================================= */
void TWIPR_Supervisor::sendWarning(twipr_supervisor_error_t id,
		twipr_error_t error, const char *message, uint8_t len) {
 801bee4:	b580      	push	{r7, lr}
 801bee6:	b088      	sub	sp, #32
 801bee8:	af04      	add	r7, sp, #16
 801beea:	60f8      	str	r0, [r7, #12]
 801beec:	607b      	str	r3, [r7, #4]
 801beee:	460b      	mov	r3, r1
 801bef0:	72fb      	strb	r3, [r7, #11]
 801bef2:	4613      	mov	r3, r2
 801bef4:	72bb      	strb	r3, [r7, #10]
	warning_message.id = id;
 801bef6:	4a13      	ldr	r2, [pc, #76]	@ (801bf44 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x60>)
 801bef8:	7afb      	ldrb	r3, [r7, #11]
 801befa:	7013      	strb	r3, [r2, #0]
	warning_message.error = error;
 801befc:	4a11      	ldr	r2, [pc, #68]	@ (801bf44 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x60>)
 801befe:	7abb      	ldrb	r3, [r7, #10]
 801bf00:	7053      	strb	r3, [r2, #1]
	strncpy(warning_message.text, message, len);
 801bf02:	7e3b      	ldrb	r3, [r7, #24]
 801bf04:	461a      	mov	r2, r3
 801bf06:	6879      	ldr	r1, [r7, #4]
 801bf08:	480f      	ldr	r0, [pc, #60]	@ (801bf48 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x64>)
 801bf0a:	f006 fe12 	bl	8022b32 <strncpy>
	warning_message.text[len + 1] = '\0';
 801bf0e:	7e3b      	ldrb	r3, [r7, #24]
 801bf10:	3301      	adds	r3, #1
 801bf12:	4a0c      	ldr	r2, [pc, #48]	@ (801bf44 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x60>)
 801bf14:	4413      	add	r3, r2
 801bf16:	2200      	movs	r2, #0
 801bf18:	709a      	strb	r2, [r3, #2]

	this->config.communication->uart_interface.send(MSG_COMMAND_EVENT,
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	68db      	ldr	r3, [r3, #12]
 801bf1e:	f103 0018 	add.w	r0, r3, #24
 801bf22:	2334      	movs	r3, #52	@ 0x34
 801bf24:	9302      	str	r3, [sp, #8]
 801bf26:	4b07      	ldr	r3, [pc, #28]	@ (801bf44 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x60>)
 801bf28:	9301      	str	r3, [sp, #4]
 801bf2a:	2301      	movs	r3, #1
 801bf2c:	9300      	str	r3, [sp, #0]
 801bf2e:	f240 3301 	movw	r3, #769	@ 0x301
 801bf32:	2201      	movs	r2, #1
 801bf34:	2105      	movs	r1, #5
 801bf36:	f7f6 ff83 	bl	8012e40 <_ZN24TWIPR_UART_Communication4sendEhhthPhh>
	CM4_STANDARD_REGISTER_MAP,
	TWIPR_MESSAGE_EVENT_WARNING, 0x01, (uint8_t*) &warning_message,
			sizeof(warning_message_struct_t));

}
 801bf3a:	bf00      	nop
 801bf3c:	3710      	adds	r7, #16
 801bf3e:	46bd      	mov	sp, r7
 801bf40:	bd80      	pop	{r7, pc}
 801bf42:	bf00      	nop
 801bf44:	24028630 	.word	0x24028630
 801bf48:	24028632 	.word	0x24028632

0801bf4c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>:

/* ============================================================================= */
void TWIPR_Supervisor::setError(twipr_error_t error) {
 801bf4c:	b480      	push	{r7}
 801bf4e:	b083      	sub	sp, #12
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
 801bf54:	460b      	mov	r3, r1
 801bf56:	70fb      	strb	r3, [r7, #3]
	if (error > this->error) {
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bf5e:	78fa      	ldrb	r2, [r7, #3]
 801bf60:	429a      	cmp	r2, r3
 801bf62:	d903      	bls.n	801bf6c <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t+0x20>
		this->error = error;
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	78fa      	ldrb	r2, [r7, #3]
 801bf68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}
}
 801bf6c:	bf00      	nop
 801bf6e:	370c      	adds	r7, #12
 801bf70:	46bd      	mov	sp, r7
 801bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf76:	4770      	bx	lr

0801bf78 <_Z24startTwiprSupervisorTaskPv>:

/* ============================================================================= */
void startTwiprSupervisorTask(void *args) {
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b084      	sub	sp, #16
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]

	TWIPR_Supervisor *argument = (TWIPR_Supervisor*) args;
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	60fb      	str	r3, [r7, #12]
	argument->task();
 801bf84:	68f8      	ldr	r0, [r7, #12]
 801bf86:	f7ff fe75 	bl	801bc74 <_ZN16TWIPR_Supervisor4taskEv>

}
 801bf8a:	bf00      	nop
 801bf8c:	3710      	adds	r7, #16
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	bd80      	pop	{r7, pc}
	...

0801bf94 <_Z41__static_initialization_and_destruction_0ii>:
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b082      	sub	sp, #8
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
 801bf9c:	6039      	str	r1, [r7, #0]
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	2b01      	cmp	r3, #1
 801bfa2:	d107      	bne.n	801bfb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801bfa4:	683b      	ldr	r3, [r7, #0]
 801bfa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bfaa:	4293      	cmp	r3, r2
 801bfac:	d102      	bne.n	801bfb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
elapsedMillis timerDriveTick;
 801bfae:	4803      	ldr	r0, [pc, #12]	@ (801bfbc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801bfb0:	f7fa fbb4 	bl	801671c <_ZN13elapsedMillisC1Ev>
}
 801bfb4:	bf00      	nop
 801bfb6:	3708      	adds	r7, #8
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bd80      	pop	{r7, pc}
 801bfbc:	2402862c 	.word	0x2402862c

0801bfc0 <_GLOBAL__sub_I_timerDriveTick>:
 801bfc0:	b580      	push	{r7, lr}
 801bfc2:	af00      	add	r7, sp, #0
 801bfc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801bfc8:	2001      	movs	r0, #1
 801bfca:	f7ff ffe3 	bl	801bf94 <_Z41__static_initialization_and_destruction_0ii>
 801bfce:	bd80      	pop	{r7, pc}

0801bfd0 <_ZN27twipr_sequencer_callbacks_tC1Ev>:
//	core_utils_RegisterFunction<void, void> regf_stop_sequence;
//	core_utils_RegisterFunction<void, void> regf_start_sequence;
//} twipr_sequencer_reg_entries_t;


typedef struct twipr_sequencer_callbacks_t {
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	b082      	sub	sp, #8
 801bfd4:	af00      	add	r7, sp, #0
 801bfd6:	6078      	str	r0, [r7, #4]
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7f6 fcbc 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	3320      	adds	r3, #32
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	f7f6 fcb7 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	3340      	adds	r3, #64	@ 0x40
 801bfee:	4618      	mov	r0, r3
 801bff0:	f7f6 fcb2 	bl	8012958 <_ZN19core_utils_CallbackIvtEC1Ev>
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	4618      	mov	r0, r3
 801bff8:	3708      	adds	r7, #8
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}

0801bffe <_ZN15TWIPR_SequencerC1Ev>:

#include "twipr_sequencer.h"
#include "twipr_communication.h"
#include "robot-control_std.h"

TWIPR_Sequencer::TWIPR_Sequencer() {
 801bffe:	b580      	push	{r7, lr}
 801c000:	b082      	sub	sp, #8
 801c002:	af00      	add	r7, sp, #0
 801c004:	6078      	str	r0, [r7, #4]
 801c006:	687a      	ldr	r2, [r7, #4]
 801c008:	f645 53e0 	movw	r3, #24032	@ 0x5de0
 801c00c:	4413      	add	r3, r2
 801c00e:	4618      	mov	r0, r3
 801c010:	f7ff ffde 	bl	801bfd0 <_ZN27twipr_sequencer_callbacks_tC1Ev>

}
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	4618      	mov	r0, r3
 801c018:	3708      	adds	r7, #8
 801c01a:	46bd      	mov	sp, r7
 801c01c:	bd80      	pop	{r7, pc}
	...

0801c020 <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t>:
/* =============================================================== */
void TWIPR_Sequencer::init(twipr_sequencer_config_t config) {
 801c020:	b590      	push	{r4, r7, lr}
 801c022:	b08f      	sub	sp, #60	@ 0x3c
 801c024:	af00      	add	r7, sp, #0
 801c026:	60f8      	str	r0, [r7, #12]
 801c028:	1d3b      	adds	r3, r7, #4
 801c02a:	e883 0006 	stmia.w	r3, {r1, r2}
	this->config = config;
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	3308      	adds	r3, #8
 801c032:	1d3a      	adds	r2, r7, #4
 801c034:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c038:	e883 0003 	stmia.w	r3, {r0, r1}
	this->sequence_tick = 0;
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	2200      	movs	r2, #0
 801c040:	605a      	str	r2, [r3, #4]
	this->mode = TWIPR_SEQUENCER_MODE_IDLE;
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2200      	movs	r2, #0
 801c046:	701a      	strb	r2, [r3, #0]

	this->config.comm->registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	68dc      	ldr	r4, [r3, #12]
			core_utils_Callback<void, uint16_t>(this,
 801c04c:	4b0b      	ldr	r3, [pc, #44]	@ (801c07c <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t+0x5c>)
 801c04e:	633b      	str	r3, [r7, #48]	@ 0x30
 801c050:	2300      	movs	r3, #0
 801c052:	637b      	str	r3, [r7, #52]	@ 0x34
 801c054:	f107 0010 	add.w	r0, r7, #16
 801c058:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801c05c:	cb0c      	ldmia	r3, {r2, r3}
 801c05e:	68f9      	ldr	r1, [r7, #12]
 801c060:	f000 f866 	bl	801c130 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>
	this->config.comm->registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
 801c064:	f107 0310 	add.w	r3, r7, #16
 801c068:	461a      	mov	r2, r3
 801c06a:	2100      	movs	r1, #0
 801c06c:	4620      	mov	r0, r4
 801c06e:	f7f8 fc3e 	bl	80148ee <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_Sequencer::spiSequenceReceived_callback));
}
 801c072:	bf00      	nop
 801c074:	373c      	adds	r7, #60	@ 0x3c
 801c076:	46bd      	mov	sp, r7
 801c078:	bd90      	pop	{r4, r7, pc}
 801c07a:	bf00      	nop
 801c07c:	0801c0f7 	.word	0x0801c0f7

0801c080 <_ZN15TWIPR_Sequencer5startEv>:
/* =============================================================== */
void TWIPR_Sequencer::start() {
 801c080:	b480      	push	{r7}
 801c082:	b083      	sub	sp, #12
 801c084:	af00      	add	r7, sp, #0
 801c086:	6078      	str	r0, [r7, #4]

}
 801c088:	bf00      	nop
 801c08a:	370c      	adds	r7, #12
 801c08c:	46bd      	mov	sp, r7
 801c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c092:	4770      	bx	lr

0801c094 <_ZN15TWIPR_Sequencer6updateEv>:
		break;
	}
	}
}
/* =============================================================== */
void TWIPR_Sequencer::update() {
 801c094:	b480      	push	{r7}
 801c096:	b083      	sub	sp, #12
 801c098:	af00      	add	r7, sp, #0
 801c09a:	6078      	str	r0, [r7, #4]

	if (this->mode == TWIPR_SEQUENCER_MODE_IDLE) {
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	781b      	ldrb	r3, [r3, #0]
 801c0a0:	2b00      	cmp	r3, #0
		return;
	}

	// Do the Update

}
 801c0a2:	370c      	adds	r7, #12
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0aa:	4770      	bx	lr

0801c0ac <_ZN15TWIPR_Sequencer9getSampleEv>:
void TWIPR_Sequencer::resetSequenceData() {

}

/* =============================================================== */
twipr_sequencer_sample_t TWIPR_Sequencer::getSample() {
 801c0ac:	b480      	push	{r7}
 801c0ae:	b083      	sub	sp, #12
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
 801c0b4:	6039      	str	r1, [r7, #0]
	twipr_sequencer_sample_t sample;

	if (this->mode == TWIPR_SEQUENCER_MODE_RUNNING) {
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	781b      	ldrb	r3, [r3, #0]
 801c0ba:	2b01      	cmp	r3, #1
 801c0bc:	d108      	bne.n	801c0d0 <_ZN15TWIPR_Sequencer9getSampleEv+0x24>
		sample.sequence_id = this->loaded_sequence.sequence_id;
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	8a1a      	ldrh	r2, [r3, #16]
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	801a      	strh	r2, [r3, #0]
		sample.sequence_tick = this->sequence_tick;
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	685a      	ldr	r2, [r3, #4]
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	605a      	str	r2, [r3, #4]
 801c0ce:	e005      	b.n	801c0dc <_ZN15TWIPR_Sequencer9getSampleEv+0x30>
	} else {
		sample.sequence_id = 0;
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	801a      	strh	r2, [r3, #0]
		sample.sequence_tick = 0;
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	2200      	movs	r2, #0
 801c0da:	605a      	str	r2, [r3, #4]
	}

	sample.sequence_id = 2;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	2202      	movs	r2, #2
 801c0e0:	801a      	strh	r2, [r3, #0]
	sample.sequence_tick = 3;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	2203      	movs	r2, #3
 801c0e6:	605a      	str	r2, [r3, #4]

	return sample;
 801c0e8:	bf00      	nop
}
 801c0ea:	6878      	ldr	r0, [r7, #4]
 801c0ec:	370c      	adds	r7, #12
 801c0ee:	46bd      	mov	sp, r7
 801c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0f4:	4770      	bx	lr

0801c0f6 <_ZN15TWIPR_Sequencer28spiSequenceReceived_callbackEt>:

/* =============================================================== */
void TWIPR_Sequencer::spiSequenceReceived_callback(uint16_t trajectory_length) {
 801c0f6:	b580      	push	{r7, lr}
 801c0f8:	b082      	sub	sp, #8
 801c0fa:	af00      	add	r7, sp, #0
 801c0fc:	6078      	str	r0, [r7, #4]
 801c0fe:	460b      	mov	r3, r1
 801c100:	807b      	strh	r3, [r7, #2]
	// Copy the trajectory into the buffer
	memcpy((uint8_t*) this->sequence_buffer,
 801c102:	687a      	ldr	r2, [r7, #4]
 801c104:	f642 63fc 	movw	r3, #12028	@ 0x2efc
 801c108:	4413      	add	r3, r2
			(uint8_t*) this->rx_sequence_buffer,
 801c10a:	687a      	ldr	r2, [r7, #4]
 801c10c:	f102 011c 	add.w	r1, r2, #28
	memcpy((uint8_t*) this->sequence_buffer,
 801c110:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 801c114:	4618      	mov	r0, r3
 801c116:	f006 fdec 	bl	8022cf2 <memcpy>
			sizeof(twipr_sequence_input_t) * TWIPR_SEQUENCE_BUFFER_SIZE);

	this->_sequence_received = true;
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 801c120:	2201      	movs	r2, #1
 801c122:	f883 2ddc 	strb.w	r2, [r3, #3548]	@ 0xddc
}
 801c126:	bf00      	nop
 801c128:	3708      	adds	r7, #8
 801c12a:	46bd      	mov	sp, r7
 801c12c:	bd80      	pop	{r7, pc}
	...

0801c130 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 801c130:	b5b0      	push	{r4, r5, r7, lr}
 801c132:	b08a      	sub	sp, #40	@ 0x28
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	4639      	mov	r1, r7
 801c13c:	e881 000c 	stmia.w	r1, {r2, r3}
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	4618      	mov	r0, r3
 801c144:	f7f6 fa7a 	bl	801263c <_ZN8CallbackC1Ev>
 801c148:	4a12      	ldr	r2, [pc, #72]	@ (801c194 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE+0x64>)
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	601a      	str	r2, [r3, #0]
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	2200      	movs	r2, #0
 801c152:	711a      	strb	r2, [r3, #4]
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	3308      	adds	r3, #8
 801c158:	2100      	movs	r1, #0
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7f6 fc95 	bl	8012a8a <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 801c160:	f107 0010 	add.w	r0, r7, #16
 801c164:	463b      	mov	r3, r7
 801c166:	cb0c      	ldmia	r3, {r2, r3}
 801c168:	68b9      	ldr	r1, [r7, #8]
 801c16a:	f000 f815 	bl	801c198 <_ZN26core_utils_FunctionPointerIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	f103 0408 	add.w	r4, r3, #8
 801c174:	f107 0510 	add.w	r5, r7, #16
 801c178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c17a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c17c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c180:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	2201      	movs	r2, #1
 801c188:	711a      	strb	r2, [r3, #4]
	}
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	4618      	mov	r0, r3
 801c18e:	3728      	adds	r7, #40	@ 0x28
 801c190:	46bd      	mov	sp, r7
 801c192:	bdb0      	pop	{r4, r5, r7, pc}
 801c194:	08024d10 	.word	0x08024d10

0801c198 <_ZN26core_utils_FunctionPointerIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801c198:	b580      	push	{r7, lr}
 801c19a:	b084      	sub	sp, #16
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	60f8      	str	r0, [r7, #12]
 801c1a0:	60b9      	str	r1, [r7, #8]
 801c1a2:	4639      	mov	r1, r7
 801c1a4:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801c1a8:	463b      	mov	r3, r7
 801c1aa:	cb0c      	ldmia	r3, {r2, r3}
 801c1ac:	68b9      	ldr	r1, [r7, #8]
 801c1ae:	68f8      	ldr	r0, [r7, #12]
 801c1b0:	f000 f806 	bl	801c1c0 <_ZN26core_utils_FunctionPointerIvtE6attachI15TWIPR_SequencerEEvPT_MS3_FvtE>
    }
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	3710      	adds	r7, #16
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd80      	pop	{r7, pc}
	...

0801c1c0 <_ZN26core_utils_FunctionPointerIvtE6attachI15TWIPR_SequencerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 801c1c0:	b480      	push	{r7}
 801c1c2:	b085      	sub	sp, #20
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	60f8      	str	r0, [r7, #12]
 801c1c8:	60b9      	str	r1, [r7, #8]
 801c1ca:	4639      	mov	r1, r7
 801c1cc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	68ba      	ldr	r2, [r7, #8]
 801c1d4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	3304      	adds	r3, #4
 801c1da:	461a      	mov	r2, r3
 801c1dc:	463b      	mov	r3, r7
 801c1de:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c1e2:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	4a03      	ldr	r2, [pc, #12]	@ (801c1f8 <_ZN26core_utils_FunctionPointerIvtE6attachI15TWIPR_SequencerEEvPT_MS3_FvtE+0x38>)
 801c1ea:	615a      	str	r2, [r3, #20]
    }
 801c1ec:	bf00      	nop
 801c1ee:	3714      	adds	r7, #20
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f6:	4770      	bx	lr
 801c1f8:	0801c1fd 	.word	0x0801c1fd

0801c1fc <_ZN26core_utils_FunctionPointerIvtE12membercallerI15TWIPR_SequencerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b086      	sub	sp, #24
 801c200:	af00      	add	r7, sp, #0
 801c202:	60f8      	str	r0, [r7, #12]
 801c204:	60b9      	str	r1, [r7, #8]
 801c206:	4613      	mov	r3, r2
 801c208:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801c212:	693b      	ldr	r3, [r7, #16]
 801c214:	685b      	ldr	r3, [r3, #4]
 801c216:	105b      	asrs	r3, r3, #1
 801c218:	461a      	mov	r2, r3
 801c21a:	697b      	ldr	r3, [r7, #20]
 801c21c:	1898      	adds	r0, r3, r2
 801c21e:	693b      	ldr	r3, [r7, #16]
 801c220:	685b      	ldr	r3, [r3, #4]
 801c222:	f003 0301 	and.w	r3, r3, #1
 801c226:	2b00      	cmp	r3, #0
 801c228:	d00b      	beq.n	801c242 <_ZN26core_utils_FunctionPointerIvtE12membercallerI15TWIPR_SequencerEEvPvPjt+0x46>
 801c22a:	693b      	ldr	r3, [r7, #16]
 801c22c:	685b      	ldr	r3, [r3, #4]
 801c22e:	105b      	asrs	r3, r3, #1
 801c230:	461a      	mov	r2, r3
 801c232:	697b      	ldr	r3, [r7, #20]
 801c234:	4413      	add	r3, r2
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	693a      	ldr	r2, [r7, #16]
 801c23a:	6812      	ldr	r2, [r2, #0]
 801c23c:	4413      	add	r3, r2
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	e001      	b.n	801c246 <_ZN26core_utils_FunctionPointerIvtE12membercallerI15TWIPR_SequencerEEvPvPjt+0x4a>
 801c242:	693b      	ldr	r3, [r7, #16]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	88fa      	ldrh	r2, [r7, #6]
 801c248:	4611      	mov	r1, r2
 801c24a:	4798      	blx	r3
 801c24c:	bf00      	nop
    }
 801c24e:	3718      	adds	r7, #24
 801c250:	46bd      	mov	sp, r7
 801c252:	bd80      	pop	{r7, pc}

0801c254 <_ZN21RobotControl_ExtenderC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "robot-control_extender.h"

RobotControl_Extender::RobotControl_Extender() {
 801c254:	b480      	push	{r7}
 801c256:	b083      	sub	sp, #12
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]

}
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	4618      	mov	r0, r3
 801c260:	370c      	adds	r7, #12
 801c262:	46bd      	mov	sp, r7
 801c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c268:	4770      	bx	lr

0801c26a <_ZN21RobotControl_Extender4initE24extender_config_struct_t>:

void RobotControl_Extender::init(extender_config_struct_t config) {
 801c26a:	b480      	push	{r7}
 801c26c:	b083      	sub	sp, #12
 801c26e:	af00      	add	r7, sp, #0
 801c270:	6078      	str	r0, [r7, #4]
 801c272:	6039      	str	r1, [r7, #0]

	this->config = config;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	683a      	ldr	r2, [r7, #0]
 801c278:	601a      	str	r2, [r3, #0]

}
 801c27a:	bf00      	nop
 801c27c:	370c      	adds	r7, #12
 801c27e:	46bd      	mov	sp, r7
 801c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c284:	4770      	bx	lr

0801c286 <_ZN21RobotControl_Extender12setStatusLEDEa>:

void RobotControl_Extender::start() {

}

void RobotControl_Extender::setStatusLED(int8_t status) {
 801c286:	b580      	push	{r7, lr}
 801c288:	b088      	sub	sp, #32
 801c28a:	af04      	add	r7, sp, #16
 801c28c:	6078      	str	r0, [r7, #4]
 801c28e:	460b      	mov	r3, r1
 801c290:	70fb      	strb	r3, [r7, #3]

	uint8_t data = (uint8_t) status;
 801c292:	78fb      	ldrb	r3, [r7, #3]
 801c294:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c,
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	6818      	ldr	r0, [r3, #0]
 801c29a:	2364      	movs	r3, #100	@ 0x64
 801c29c:	9302      	str	r3, [sp, #8]
 801c29e:	2301      	movs	r3, #1
 801c2a0:	9301      	str	r3, [sp, #4]
 801c2a2:	f107 030f 	add.w	r3, r7, #15
 801c2a6:	9300      	str	r3, [sp, #0]
 801c2a8:	2301      	movs	r3, #1
 801c2aa:	221c      	movs	r2, #28
 801c2ac:	2102      	movs	r1, #2
 801c2ae:	f7ea fc29 	bl	8006b04 <HAL_I2C_Mem_Write>
	EXTENDER_ADDRESS, REG_ERROR_LED_CONFIG, 1, &data, 1, 100);
}
 801c2b2:	bf00      	nop
 801c2b4:	3710      	adds	r7, #16
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	bd80      	pop	{r7, pc}

0801c2ba <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>:


void RobotControl_Extender::rgbLED_intern_setState(uint8_t position,
		uint8_t state) {
 801c2ba:	b580      	push	{r7, lr}
 801c2bc:	b086      	sub	sp, #24
 801c2be:	af04      	add	r7, sp, #16
 801c2c0:	6078      	str	r0, [r7, #4]
 801c2c2:	460b      	mov	r3, r1
 801c2c4:	70fb      	strb	r3, [r7, #3]
 801c2c6:	4613      	mov	r3, r2
 801c2c8:	70bb      	strb	r3, [r7, #2]

	state = (state << 7) + 0;
 801c2ca:	78bb      	ldrb	r3, [r7, #2]
 801c2cc:	01db      	lsls	r3, r3, #7
 801c2ce:	b2db      	uxtb	r3, r3
 801c2d0:	70bb      	strb	r3, [r7, #2]

	switch (position) {
 801c2d2:	78fb      	ldrb	r3, [r7, #3]
 801c2d4:	2b02      	cmp	r3, #2
 801c2d6:	d022      	beq.n	801c31e <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x64>
 801c2d8:	2b02      	cmp	r3, #2
 801c2da:	dc2e      	bgt.n	801c33a <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d002      	beq.n	801c2e6 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x2c>
 801c2e0:	2b01      	cmp	r3, #1
 801c2e2:	d00e      	beq.n	801c302 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x48>
	case 2:
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_CONFIG, 1, &state, 1, 10);
		break;
	default:
		break;
 801c2e4:	e029      	b.n	801c33a <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	6818      	ldr	r0, [r3, #0]
 801c2ea:	230a      	movs	r3, #10
 801c2ec:	9302      	str	r3, [sp, #8]
 801c2ee:	2301      	movs	r3, #1
 801c2f0:	9301      	str	r3, [sp, #4]
 801c2f2:	1cbb      	adds	r3, r7, #2
 801c2f4:	9300      	str	r3, [sp, #0]
 801c2f6:	2301      	movs	r3, #1
 801c2f8:	2220      	movs	r2, #32
 801c2fa:	2102      	movs	r1, #2
 801c2fc:	f7ea fc02 	bl	8006b04 <HAL_I2C_Mem_Write>
		break;
 801c300:	e01c      	b.n	801c33c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	6818      	ldr	r0, [r3, #0]
 801c306:	230a      	movs	r3, #10
 801c308:	9302      	str	r3, [sp, #8]
 801c30a:	2301      	movs	r3, #1
 801c30c:	9301      	str	r3, [sp, #4]
 801c30e:	1cbb      	adds	r3, r7, #2
 801c310:	9300      	str	r3, [sp, #0]
 801c312:	2301      	movs	r3, #1
 801c314:	2226      	movs	r2, #38	@ 0x26
 801c316:	2102      	movs	r1, #2
 801c318:	f7ea fbf4 	bl	8006b04 <HAL_I2C_Mem_Write>
		break;
 801c31c:	e00e      	b.n	801c33c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	6818      	ldr	r0, [r3, #0]
 801c322:	230a      	movs	r3, #10
 801c324:	9302      	str	r3, [sp, #8]
 801c326:	2301      	movs	r3, #1
 801c328:	9301      	str	r3, [sp, #4]
 801c32a:	1cbb      	adds	r3, r7, #2
 801c32c:	9300      	str	r3, [sp, #0]
 801c32e:	2301      	movs	r3, #1
 801c330:	222c      	movs	r2, #44	@ 0x2c
 801c332:	2102      	movs	r1, #2
 801c334:	f7ea fbe6 	bl	8006b04 <HAL_I2C_Mem_Write>
		break;
 801c338:	e000      	b.n	801c33c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		break;
 801c33a:	bf00      	nop
	}
}
 801c33c:	bf00      	nop
 801c33e:	3708      	adds	r7, #8
 801c340:	46bd      	mov	sp, r7
 801c342:	bd80      	pop	{r7, pc}

0801c344 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>:

void RobotControl_Extender::rgbLED_intern_setColor(uint8_t position,
		uint8_t red, uint8_t green, uint8_t blue) {
 801c344:	b580      	push	{r7, lr}
 801c346:	b086      	sub	sp, #24
 801c348:	af04      	add	r7, sp, #16
 801c34a:	6078      	str	r0, [r7, #4]
 801c34c:	4608      	mov	r0, r1
 801c34e:	4611      	mov	r1, r2
 801c350:	461a      	mov	r2, r3
 801c352:	4603      	mov	r3, r0
 801c354:	70fb      	strb	r3, [r7, #3]
 801c356:	460b      	mov	r3, r1
 801c358:	70bb      	strb	r3, [r7, #2]
 801c35a:	4613      	mov	r3, r2
 801c35c:	707b      	strb	r3, [r7, #1]
	switch (position) {
 801c35e:	78fb      	ldrb	r3, [r7, #3]
 801c360:	2b02      	cmp	r3, #2
 801c362:	d058      	beq.n	801c416 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0xd2>
 801c364:	2b02      	cmp	r3, #2
 801c366:	dc7f      	bgt.n	801c468 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d002      	beq.n	801c372 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x2e>
 801c36c:	2b01      	cmp	r3, #1
 801c36e:	d029      	beq.n	801c3c4 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x80>
		REG_STATUS_RGB_LED_3_GREEN, 1, &green, 1, 10);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_BLUE, 1, &blue, 1, 10);
		break;
	default:
		break;
 801c370:	e07a      	b.n	801c468 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	6818      	ldr	r0, [r3, #0]
 801c376:	230a      	movs	r3, #10
 801c378:	9302      	str	r3, [sp, #8]
 801c37a:	2301      	movs	r3, #1
 801c37c:	9301      	str	r3, [sp, #4]
 801c37e:	1cbb      	adds	r3, r7, #2
 801c380:	9300      	str	r3, [sp, #0]
 801c382:	2301      	movs	r3, #1
 801c384:	2221      	movs	r2, #33	@ 0x21
 801c386:	2102      	movs	r1, #2
 801c388:	f7ea fbbc 	bl	8006b04 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	6818      	ldr	r0, [r3, #0]
 801c390:	230a      	movs	r3, #10
 801c392:	9302      	str	r3, [sp, #8]
 801c394:	2301      	movs	r3, #1
 801c396:	9301      	str	r3, [sp, #4]
 801c398:	1c7b      	adds	r3, r7, #1
 801c39a:	9300      	str	r3, [sp, #0]
 801c39c:	2301      	movs	r3, #1
 801c39e:	2222      	movs	r2, #34	@ 0x22
 801c3a0:	2102      	movs	r1, #2
 801c3a2:	f7ea fbaf 	bl	8006b04 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	6818      	ldr	r0, [r3, #0]
 801c3aa:	230a      	movs	r3, #10
 801c3ac:	9302      	str	r3, [sp, #8]
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	9301      	str	r3, [sp, #4]
 801c3b2:	f107 0310 	add.w	r3, r7, #16
 801c3b6:	9300      	str	r3, [sp, #0]
 801c3b8:	2301      	movs	r3, #1
 801c3ba:	2223      	movs	r2, #35	@ 0x23
 801c3bc:	2102      	movs	r1, #2
 801c3be:	f7ea fba1 	bl	8006b04 <HAL_I2C_Mem_Write>
		break;
 801c3c2:	e052      	b.n	801c46a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	6818      	ldr	r0, [r3, #0]
 801c3c8:	230a      	movs	r3, #10
 801c3ca:	9302      	str	r3, [sp, #8]
 801c3cc:	2301      	movs	r3, #1
 801c3ce:	9301      	str	r3, [sp, #4]
 801c3d0:	1cbb      	adds	r3, r7, #2
 801c3d2:	9300      	str	r3, [sp, #0]
 801c3d4:	2301      	movs	r3, #1
 801c3d6:	2227      	movs	r2, #39	@ 0x27
 801c3d8:	2102      	movs	r1, #2
 801c3da:	f7ea fb93 	bl	8006b04 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6818      	ldr	r0, [r3, #0]
 801c3e2:	230a      	movs	r3, #10
 801c3e4:	9302      	str	r3, [sp, #8]
 801c3e6:	2301      	movs	r3, #1
 801c3e8:	9301      	str	r3, [sp, #4]
 801c3ea:	1c7b      	adds	r3, r7, #1
 801c3ec:	9300      	str	r3, [sp, #0]
 801c3ee:	2301      	movs	r3, #1
 801c3f0:	2228      	movs	r2, #40	@ 0x28
 801c3f2:	2102      	movs	r1, #2
 801c3f4:	f7ea fb86 	bl	8006b04 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	6818      	ldr	r0, [r3, #0]
 801c3fc:	230a      	movs	r3, #10
 801c3fe:	9302      	str	r3, [sp, #8]
 801c400:	2301      	movs	r3, #1
 801c402:	9301      	str	r3, [sp, #4]
 801c404:	f107 0310 	add.w	r3, r7, #16
 801c408:	9300      	str	r3, [sp, #0]
 801c40a:	2301      	movs	r3, #1
 801c40c:	2229      	movs	r2, #41	@ 0x29
 801c40e:	2102      	movs	r1, #2
 801c410:	f7ea fb78 	bl	8006b04 <HAL_I2C_Mem_Write>
		break;
 801c414:	e029      	b.n	801c46a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	6818      	ldr	r0, [r3, #0]
 801c41a:	230a      	movs	r3, #10
 801c41c:	9302      	str	r3, [sp, #8]
 801c41e:	2301      	movs	r3, #1
 801c420:	9301      	str	r3, [sp, #4]
 801c422:	1cbb      	adds	r3, r7, #2
 801c424:	9300      	str	r3, [sp, #0]
 801c426:	2301      	movs	r3, #1
 801c428:	222d      	movs	r2, #45	@ 0x2d
 801c42a:	2102      	movs	r1, #2
 801c42c:	f7ea fb6a 	bl	8006b04 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	6818      	ldr	r0, [r3, #0]
 801c434:	230a      	movs	r3, #10
 801c436:	9302      	str	r3, [sp, #8]
 801c438:	2301      	movs	r3, #1
 801c43a:	9301      	str	r3, [sp, #4]
 801c43c:	1c7b      	adds	r3, r7, #1
 801c43e:	9300      	str	r3, [sp, #0]
 801c440:	2301      	movs	r3, #1
 801c442:	222e      	movs	r2, #46	@ 0x2e
 801c444:	2102      	movs	r1, #2
 801c446:	f7ea fb5d 	bl	8006b04 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	6818      	ldr	r0, [r3, #0]
 801c44e:	230a      	movs	r3, #10
 801c450:	9302      	str	r3, [sp, #8]
 801c452:	2301      	movs	r3, #1
 801c454:	9301      	str	r3, [sp, #4]
 801c456:	f107 0310 	add.w	r3, r7, #16
 801c45a:	9300      	str	r3, [sp, #0]
 801c45c:	2301      	movs	r3, #1
 801c45e:	222f      	movs	r2, #47	@ 0x2f
 801c460:	2102      	movs	r1, #2
 801c462:	f7ea fb4f 	bl	8006b04 <HAL_I2C_Mem_Write>
		break;
 801c466:	e000      	b.n	801c46a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		break;
 801c468:	bf00      	nop
	}
}
 801c46a:	bf00      	nop
 801c46c:	3708      	adds	r7, #8
 801c46e:	46bd      	mov	sp, r7
 801c470:	bd80      	pop	{r7, pc}
	...

0801c474 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>:
		break;
	}
}


void RobotControl_Extender::buzzer_setConfig(float frequency, uint16_t on_time, uint8_t repeats){
 801c474:	b580      	push	{r7, lr}
 801c476:	b08a      	sub	sp, #40	@ 0x28
 801c478:	af04      	add	r7, sp, #16
 801c47a:	60f8      	str	r0, [r7, #12]
 801c47c:	ed87 0a02 	vstr	s0, [r7, #8]
 801c480:	460b      	mov	r3, r1
 801c482:	80fb      	strh	r3, [r7, #6]
 801c484:	4613      	mov	r3, r2
 801c486:	717b      	strb	r3, [r7, #5]

	uint8_t freq = (uint8_t) (frequency / 10);
 801c488:	ed97 7a02 	vldr	s14, [r7, #8]
 801c48c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 801c490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c498:	edc7 7a00 	vstr	s15, [r7]
 801c49c:	783b      	ldrb	r3, [r7, #0]
 801c49e:	b2db      	uxtb	r3, r3
 801c4a0:	75fb      	strb	r3, [r7, #23]
	uint8_t time = (uint8_t) (on_time / 10);
 801c4a2:	88fb      	ldrh	r3, [r7, #6]
 801c4a4:	4a19      	ldr	r2, [pc, #100]	@ (801c50c <_ZN21RobotControl_Extender16buzzer_setConfigEfth+0x98>)
 801c4a6:	fba2 2303 	umull	r2, r3, r2, r3
 801c4aa:	08db      	lsrs	r3, r3, #3
 801c4ac:	b29b      	uxth	r3, r3
 801c4ae:	b2db      	uxtb	r3, r3
 801c4b0:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	6818      	ldr	r0, [r3, #0]
 801c4b6:	230a      	movs	r3, #10
 801c4b8:	9302      	str	r3, [sp, #8]
 801c4ba:	2301      	movs	r3, #1
 801c4bc:	9301      	str	r3, [sp, #4]
 801c4be:	f107 0317 	add.w	r3, r7, #23
 801c4c2:	9300      	str	r3, [sp, #0]
 801c4c4:	2301      	movs	r3, #1
 801c4c6:	2235      	movs	r2, #53	@ 0x35
 801c4c8:	2102      	movs	r1, #2
 801c4ca:	f7ea fb1b 	bl	8006b04 <HAL_I2C_Mem_Write>
			REG_BUZZER_FREQ, 1, &freq, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	6818      	ldr	r0, [r3, #0]
 801c4d2:	230a      	movs	r3, #10
 801c4d4:	9302      	str	r3, [sp, #8]
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	9301      	str	r3, [sp, #4]
 801c4da:	f107 0316 	add.w	r3, r7, #22
 801c4de:	9300      	str	r3, [sp, #0]
 801c4e0:	2301      	movs	r3, #1
 801c4e2:	2237      	movs	r2, #55	@ 0x37
 801c4e4:	2102      	movs	r1, #2
 801c4e6:	f7ea fb0d 	bl	8006b04 <HAL_I2C_Mem_Write>
			REG_BUZZER_BLINK_TIME, 1, &time, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	6818      	ldr	r0, [r3, #0]
 801c4ee:	230a      	movs	r3, #10
 801c4f0:	9302      	str	r3, [sp, #8]
 801c4f2:	2301      	movs	r3, #1
 801c4f4:	9301      	str	r3, [sp, #4]
 801c4f6:	1d7b      	adds	r3, r7, #5
 801c4f8:	9300      	str	r3, [sp, #0]
 801c4fa:	2301      	movs	r3, #1
 801c4fc:	2238      	movs	r2, #56	@ 0x38
 801c4fe:	2102      	movs	r1, #2
 801c500:	f7ea fb00 	bl	8006b04 <HAL_I2C_Mem_Write>
			REG_BUZZER_BLINK_COUNTER, 1, &repeats, 1, 10);

}
 801c504:	bf00      	nop
 801c506:	3718      	adds	r7, #24
 801c508:	46bd      	mov	sp, r7
 801c50a:	bd80      	pop	{r7, pc}
 801c50c:	cccccccd 	.word	0xcccccccd

0801c510 <_ZN21RobotControl_Extender12buzzer_startEv>:
void RobotControl_Extender::buzzer_start(){
 801c510:	b580      	push	{r7, lr}
 801c512:	b088      	sub	sp, #32
 801c514:	af04      	add	r7, sp, #16
 801c516:	6078      	str	r0, [r7, #4]
	uint8_t data = 1;
 801c518:	2301      	movs	r3, #1
 801c51a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	6818      	ldr	r0, [r3, #0]
 801c520:	230a      	movs	r3, #10
 801c522:	9302      	str	r3, [sp, #8]
 801c524:	2301      	movs	r3, #1
 801c526:	9301      	str	r3, [sp, #4]
 801c528:	f107 030f 	add.w	r3, r7, #15
 801c52c:	9300      	str	r3, [sp, #0]
 801c52e:	2301      	movs	r3, #1
 801c530:	2234      	movs	r2, #52	@ 0x34
 801c532:	2102      	movs	r1, #2
 801c534:	f7ea fae6 	bl	8006b04 <HAL_I2C_Mem_Write>
			REG_BUZZER_DATA, 1, &data, 1, 10);
}
 801c538:	bf00      	nop
 801c53a:	3710      	adds	r7, #16
 801c53c:	46bd      	mov	sp, r7
 801c53e:	bd80      	pop	{r7, pc}

0801c540 <_ZN19RobotControl_RGBLEDC1Eh>:

#include "robot-control_indicators.h"

extern RobotControl_Extender extender;

RobotControl_RGBLED::RobotControl_RGBLED(uint8_t position) {
 801c540:	b480      	push	{r7}
 801c542:	b083      	sub	sp, #12
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
 801c548:	460b      	mov	r3, r1
 801c54a:	70fb      	strb	r3, [r7, #3]
	this->position = position;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	78fa      	ldrb	r2, [r7, #3]
 801c550:	701a      	strb	r2, [r3, #0]
}
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	4618      	mov	r0, r3
 801c556:	370c      	adds	r7, #12
 801c558:	46bd      	mov	sp, r7
 801c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55e:	4770      	bx	lr

0801c560 <_ZN19RobotControl_RGBLED8setColorEhhh>:

void RobotControl_RGBLED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 801c560:	b580      	push	{r7, lr}
 801c562:	b084      	sub	sp, #16
 801c564:	af02      	add	r7, sp, #8
 801c566:	6078      	str	r0, [r7, #4]
 801c568:	4608      	mov	r0, r1
 801c56a:	4611      	mov	r1, r2
 801c56c:	461a      	mov	r2, r3
 801c56e:	4603      	mov	r3, r0
 801c570:	70fb      	strb	r3, [r7, #3]
 801c572:	460b      	mov	r3, r1
 801c574:	70bb      	strb	r3, [r7, #2]
 801c576:	4613      	mov	r3, r2
 801c578:	707b      	strb	r3, [r7, #1]
	extender.rgbLED_intern_setColor(position, red, green, blue);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	7819      	ldrb	r1, [r3, #0]
 801c57e:	78b8      	ldrb	r0, [r7, #2]
 801c580:	78fa      	ldrb	r2, [r7, #3]
 801c582:	787b      	ldrb	r3, [r7, #1]
 801c584:	9300      	str	r3, [sp, #0]
 801c586:	4603      	mov	r3, r0
 801c588:	4803      	ldr	r0, [pc, #12]	@ (801c598 <_ZN19RobotControl_RGBLED8setColorEhhh+0x38>)
 801c58a:	f7ff fedb 	bl	801c344 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>

}
 801c58e:	bf00      	nop
 801c590:	3708      	adds	r7, #8
 801c592:	46bd      	mov	sp, r7
 801c594:	bd80      	pop	{r7, pc}
 801c596:	bf00      	nop
 801c598:	24028698 	.word	0x24028698

0801c59c <_ZN19RobotControl_RGBLED5stateEh>:
void RobotControl_RGBLED::blink(uint16_t on_time) {
	extender.rgbLED_intern_blink(position, on_time);
}
void RobotControl_RGBLED::state(uint8_t state) {
 801c59c:	b580      	push	{r7, lr}
 801c59e:	b082      	sub	sp, #8
 801c5a0:	af00      	add	r7, sp, #0
 801c5a2:	6078      	str	r0, [r7, #4]
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	70fb      	strb	r3, [r7, #3]
	extender.rgbLED_intern_setState(position, state);
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	781b      	ldrb	r3, [r3, #0]
 801c5ac:	78fa      	ldrb	r2, [r7, #3]
 801c5ae:	4619      	mov	r1, r3
 801c5b0:	4803      	ldr	r0, [pc, #12]	@ (801c5c0 <_ZN19RobotControl_RGBLED5stateEh+0x24>)
 801c5b2:	f7ff fe82 	bl	801c2ba <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>
}
 801c5b6:	bf00      	nop
 801c5b8:	3708      	adds	r7, #8
 801c5ba:	46bd      	mov	sp, r7
 801c5bc:	bd80      	pop	{r7, pc}
 801c5be:	bf00      	nop
 801c5c0:	24028698 	.word	0x24028698

0801c5c4 <_ZN19RobotControl_BuzzerC1Ev>:

RobotControl_Buzzer::RobotControl_Buzzer() {
 801c5c4:	b480      	push	{r7}
 801c5c6:	b083      	sub	sp, #12
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]

}
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	370c      	adds	r7, #12
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d8:	4770      	bx	lr
	...

0801c5dc <_ZN19RobotControl_Buzzer9setConfigEfth>:

void RobotControl_Buzzer::setConfig(float freq, uint16_t on_time,
		uint8_t repeats) {
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b084      	sub	sp, #16
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	60f8      	str	r0, [r7, #12]
 801c5e4:	ed87 0a02 	vstr	s0, [r7, #8]
 801c5e8:	460b      	mov	r3, r1
 801c5ea:	80fb      	strh	r3, [r7, #6]
 801c5ec:	4613      	mov	r3, r2
 801c5ee:	717b      	strb	r3, [r7, #5]
	extender.buzzer_setConfig(freq, on_time, repeats);
 801c5f0:	797a      	ldrb	r2, [r7, #5]
 801c5f2:	88fb      	ldrh	r3, [r7, #6]
 801c5f4:	4619      	mov	r1, r3
 801c5f6:	ed97 0a02 	vldr	s0, [r7, #8]
 801c5fa:	4803      	ldr	r0, [pc, #12]	@ (801c608 <_ZN19RobotControl_Buzzer9setConfigEfth+0x2c>)
 801c5fc:	f7ff ff3a 	bl	801c474 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>
}
 801c600:	bf00      	nop
 801c602:	3710      	adds	r7, #16
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}
 801c608:	24028698 	.word	0x24028698

0801c60c <_ZN19RobotControl_Buzzer5startEv>:
void RobotControl_Buzzer::start() {
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b082      	sub	sp, #8
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
	extender.buzzer_start();
 801c614:	4803      	ldr	r0, [pc, #12]	@ (801c624 <_ZN19RobotControl_Buzzer5startEv+0x18>)
 801c616:	f7ff ff7b 	bl	801c510 <_ZN21RobotControl_Extender12buzzer_startEv>
}
 801c61a:	bf00      	nop
 801c61c:	3708      	adds	r7, #8
 801c61e:	46bd      	mov	sp, r7
 801c620:	bd80      	pop	{r7, pc}
 801c622:	bf00      	nop
 801c624:	24028698 	.word	0x24028698

0801c628 <_ZN19RobotControl_Buzzer4beepEfth>:

void RobotControl_Buzzer::beep(float freq, uint16_t on_time, uint8_t repeats){
 801c628:	b580      	push	{r7, lr}
 801c62a:	b084      	sub	sp, #16
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	60f8      	str	r0, [r7, #12]
 801c630:	ed87 0a02 	vstr	s0, [r7, #8]
 801c634:	460b      	mov	r3, r1
 801c636:	80fb      	strh	r3, [r7, #6]
 801c638:	4613      	mov	r3, r2
 801c63a:	717b      	strb	r3, [r7, #5]
	this->setConfig(freq, on_time, repeats);
 801c63c:	797a      	ldrb	r2, [r7, #5]
 801c63e:	88fb      	ldrh	r3, [r7, #6]
 801c640:	4619      	mov	r1, r3
 801c642:	ed97 0a02 	vldr	s0, [r7, #8]
 801c646:	68f8      	ldr	r0, [r7, #12]
 801c648:	f7ff ffc8 	bl	801c5dc <_ZN19RobotControl_Buzzer9setConfigEfth>
	this->start();
 801c64c:	68f8      	ldr	r0, [r7, #12]
 801c64e:	f7ff ffdd 	bl	801c60c <_ZN19RobotControl_Buzzer5startEv>
}
 801c652:	bf00      	nop
 801c654:	3710      	adds	r7, #16
 801c656:	46bd      	mov	sp, r7
 801c658:	bd80      	pop	{r7, pc}

0801c65a <_ZN19RobotControl_Buzzer4beepE20buzzer_beep_struct_t>:
void RobotControl_Buzzer::beep(buzzer_beep_struct_t data){
 801c65a:	b580      	push	{r7, lr}
 801c65c:	b084      	sub	sp, #16
 801c65e:	af00      	add	r7, sp, #0
 801c660:	60f8      	str	r0, [r7, #12]
 801c662:	1d3b      	adds	r3, r7, #4
 801c664:	e883 0006 	stmia.w	r3, {r1, r2}
	this->setConfig(data.freq, data.on_time, data.repeats);
 801c668:	edd7 7a01 	vldr	s15, [r7, #4]
 801c66c:	893b      	ldrh	r3, [r7, #8]
 801c66e:	7aba      	ldrb	r2, [r7, #10]
 801c670:	4619      	mov	r1, r3
 801c672:	eeb0 0a67 	vmov.f32	s0, s15
 801c676:	68f8      	ldr	r0, [r7, #12]
 801c678:	f7ff ffb0 	bl	801c5dc <_ZN19RobotControl_Buzzer9setConfigEfth>
	this->start();
 801c67c:	68f8      	ldr	r0, [r7, #12]
 801c67e:	f7ff ffc5 	bl	801c60c <_ZN19RobotControl_Buzzer5startEv>
}
 801c682:	bf00      	nop
 801c684:	3710      	adds	r7, #16
 801c686:	46bd      	mov	sp, r7
 801c688:	bd80      	pop	{r7, pc}

0801c68a <_ZN22RobotControl_StatusLEDC1Ev>:

RobotControl_StatusLED::RobotControl_StatusLED() {
 801c68a:	b480      	push	{r7}
 801c68c:	b083      	sub	sp, #12
 801c68e:	af00      	add	r7, sp, #0
 801c690:	6078      	str	r0, [r7, #4]

}
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	4618      	mov	r0, r3
 801c696:	370c      	adds	r7, #12
 801c698:	46bd      	mov	sp, r7
 801c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c69e:	4770      	bx	lr

0801c6a0 <_ZN22RobotControl_StatusLED8setStateEa>:
void RobotControl_StatusLED::setState(int8_t state) {
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b082      	sub	sp, #8
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
 801c6a8:	460b      	mov	r3, r1
 801c6aa:	70fb      	strb	r3, [r7, #3]
	extender.setStatusLED(state);
 801c6ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c6b0:	4619      	mov	r1, r3
 801c6b2:	4803      	ldr	r0, [pc, #12]	@ (801c6c0 <_ZN22RobotControl_StatusLED8setStateEa+0x20>)
 801c6b4:	f7ff fde7 	bl	801c286 <_ZN21RobotControl_Extender12setStatusLEDEa>
}
 801c6b8:	bf00      	nop
 801c6ba:	3708      	adds	r7, #8
 801c6bc:	46bd      	mov	sp, r7
 801c6be:	bd80      	pop	{r7, pc}
 801c6c0:	24028698 	.word	0x24028698

0801c6c4 <_Z18robot_control_initv>:
void robot_control_task(void *argument);



// ------------------------------------------------------------------------------------------------------------
void robot_control_init(){
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b082      	sub	sp, #8
 801c6c8:	af00      	add	r7, sp, #0
	extender_config_struct_t extender_config = {
 801c6ca:	4b05      	ldr	r3, [pc, #20]	@ (801c6e0 <_Z18robot_control_initv+0x1c>)
 801c6cc:	607b      	str	r3, [r7, #4]
			.hi2c = BOARD_I2C_INTERN,
	};
	extender.init(extender_config);
 801c6ce:	6879      	ldr	r1, [r7, #4]
 801c6d0:	4804      	ldr	r0, [pc, #16]	@ (801c6e4 <_Z18robot_control_initv+0x20>)
 801c6d2:	f7ff fdca 	bl	801c26a <_ZN21RobotControl_Extender4initE24extender_config_struct_t>
//	debug_uart.init();
//	debug_uart.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX, uart_rx_fun, NULL);

}
 801c6d6:	bf00      	nop
 801c6d8:	3708      	adds	r7, #8
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bd80      	pop	{r7, pc}
 801c6de:	bf00      	nop
 801c6e0:	240002c4 	.word	0x240002c4
 801c6e4:	24028698 	.word	0x24028698

0801c6e8 <_Z19robot_control_startv>:
// ------------------------------------------------------------------------------------------------------------
void robot_control_start(){
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	af00      	add	r7, sp, #0
	rc_error_led.setState(0);
 801c6ec:	2100      	movs	r1, #0
 801c6ee:	4805      	ldr	r0, [pc, #20]	@ (801c704 <_Z19robot_control_startv+0x1c>)
 801c6f0:	f7ff ffd6 	bl	801c6a0 <_ZN22RobotControl_StatusLED8setStateEa>
	rc_button_led_1.on();
 801c6f4:	4804      	ldr	r0, [pc, #16]	@ (801c708 <_Z19robot_control_startv+0x20>)
 801c6f6:	f002 fe86 	bl	801f406 <_ZN17core_hardware_LED2onEv>
	rc_button_led_2.on();
 801c6fa:	4804      	ldr	r0, [pc, #16]	@ (801c70c <_Z19robot_control_startv+0x24>)
 801c6fc:	f002 fe83 	bl	801f406 <_ZN17core_hardware_LED2onEv>
//	debug_uart.start();
//	osThreadNew(robot_control_task, NULL, &rc_task_attributes);
}
 801c700:	bf00      	nop
 801c702:	bd80      	pop	{r7, pc}
 801c704:	24028694 	.word	0x24028694
 801c708:	2402866c 	.word	0x2402866c
 801c70c:	24028674 	.word	0x24028674

0801c710 <_Z41__static_initialization_and_destruction_0ii>:
	while (true){
			kernel_ticks = osKernelGetTickCount();
//			rc_activity_led.toggle();
			osDelayUntil(kernel_ticks + (uint32_t) 250);
	}
}
 801c710:	b580      	push	{r7, lr}
 801c712:	b082      	sub	sp, #8
 801c714:	af00      	add	r7, sp, #0
 801c716:	6078      	str	r0, [r7, #4]
 801c718:	6039      	str	r1, [r7, #0]
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	2b01      	cmp	r3, #1
 801c71e:	d13b      	bne.n	801c798 <_Z41__static_initialization_and_destruction_0ii+0x88>
 801c720:	683b      	ldr	r3, [r7, #0]
 801c722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c726:	4293      	cmp	r3, r2
 801c728:	d136      	bne.n	801c798 <_Z41__static_initialization_and_destruction_0ii+0x88>
core_hardware_LED rc_status_led_2(BOARD_LED_2_PORT, BOARD_LED_2_PIN);
 801c72a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c72e:	491c      	ldr	r1, [pc, #112]	@ (801c7a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 801c730:	481c      	ldr	r0, [pc, #112]	@ (801c7a4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 801c732:	f002 fe54 	bl	801f3de <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_1(GPIOA, GPIO_PIN_0);
 801c736:	2201      	movs	r2, #1
 801c738:	491b      	ldr	r1, [pc, #108]	@ (801c7a8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801c73a:	481c      	ldr	r0, [pc, #112]	@ (801c7ac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801c73c:	f002 fe4f 	bl	801f3de <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_2(GPIOA, GPIO_PIN_1);
 801c740:	2202      	movs	r2, #2
 801c742:	4919      	ldr	r1, [pc, #100]	@ (801c7a8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801c744:	481a      	ldr	r0, [pc, #104]	@ (801c7b0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 801c746:	f002 fe4a 	bl	801f3de <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_Button side_button(GPIOC, GPIO_PIN_1);
 801c74a:	2202      	movs	r2, #2
 801c74c:	4919      	ldr	r1, [pc, #100]	@ (801c7b4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801c74e:	481a      	ldr	r0, [pc, #104]	@ (801c7b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801c750:	f002 fe20 	bl	801f394 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_Button off_button(GPIOC, GPIO_PIN_0);
 801c754:	2201      	movs	r2, #1
 801c756:	4917      	ldr	r1, [pc, #92]	@ (801c7b4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801c758:	4818      	ldr	r0, [pc, #96]	@ (801c7bc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801c75a:	f002 fe1b 	bl	801f394 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_LED rc_activity_led(BOARD_LED_ACT_PORT, BOARD_LED_ACT_PIN);
 801c75e:	2208      	movs	r2, #8
 801c760:	490f      	ldr	r1, [pc, #60]	@ (801c7a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 801c762:	4817      	ldr	r0, [pc, #92]	@ (801c7c0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 801c764:	f002 fe3b 	bl	801f3de <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
RobotControl_StatusLED rc_error_led;
 801c768:	4816      	ldr	r0, [pc, #88]	@ (801c7c4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801c76a:	f7ff ff8e 	bl	801c68a <_ZN22RobotControl_StatusLEDC1Ev>
RobotControl_Extender extender;
 801c76e:	4816      	ldr	r0, [pc, #88]	@ (801c7c8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 801c770:	f7ff fd70 	bl	801c254 <_ZN21RobotControl_ExtenderC1Ev>
RobotControl_RGBLED rc_rgb_led_status(0);
 801c774:	2100      	movs	r1, #0
 801c776:	4815      	ldr	r0, [pc, #84]	@ (801c7cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 801c778:	f7ff fee2 	bl	801c540 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_1(1);
 801c77c:	2101      	movs	r1, #1
 801c77e:	4814      	ldr	r0, [pc, #80]	@ (801c7d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 801c780:	f7ff fede 	bl	801c540 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_2(2);
 801c784:	2102      	movs	r1, #2
 801c786:	4813      	ldr	r0, [pc, #76]	@ (801c7d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801c788:	f7ff feda 	bl	801c540 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_Buzzer rc_buzzer;
 801c78c:	4812      	ldr	r0, [pc, #72]	@ (801c7d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 801c78e:	f7ff ff19 	bl	801c5c4 <_ZN19RobotControl_BuzzerC1Ev>
Madgwick sensor_fusion;
 801c792:	4812      	ldr	r0, [pc, #72]	@ (801c7dc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 801c794:	f002 fa70 	bl	801ec78 <_ZN8MadgwickC1Ev>
}
 801c798:	bf00      	nop
 801c79a:	3708      	adds	r7, #8
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd80      	pop	{r7, pc}
 801c7a0:	58021000 	.word	0x58021000
 801c7a4:	24028664 	.word	0x24028664
 801c7a8:	58020000 	.word	0x58020000
 801c7ac:	2402866c 	.word	0x2402866c
 801c7b0:	24028674 	.word	0x24028674
 801c7b4:	58020800 	.word	0x58020800
 801c7b8:	2402867c 	.word	0x2402867c
 801c7bc:	24028684 	.word	0x24028684
 801c7c0:	2402868c 	.word	0x2402868c
 801c7c4:	24028694 	.word	0x24028694
 801c7c8:	24028698 	.word	0x24028698
 801c7cc:	2402869c 	.word	0x2402869c
 801c7d0:	240286a0 	.word	0x240286a0
 801c7d4:	240286a4 	.word	0x240286a4
 801c7d8:	240286a8 	.word	0x240286a8
 801c7dc:	240286ac 	.word	0x240286ac

0801c7e0 <_GLOBAL__sub_I_rc_status_led_2>:
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	af00      	add	r7, sp, #0
 801c7e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801c7e8:	2001      	movs	r0, #1
 801c7ea:	f7ff ff91 	bl	801c710 <_Z41__static_initialization_and_destruction_0ii>
 801c7ee:	bd80      	pop	{r7, pc}

0801c7f0 <_ZN13CallbackEntryC1Ev>:
	uint8_t length;
} can_frame_callback_input_t;

typedef core_utils_Callback<void, can_frame_callback_input_t> can_frame_callback;

struct CallbackEntry {
 801c7f0:	b580      	push	{r7, lr}
 801c7f2:	b082      	sub	sp, #8
 801c7f4:	af00      	add	r7, sp, #0
 801c7f6:	6078      	str	r0, [r7, #4]
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f000 fd2e 	bl	801d25c <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1Ev>
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	4618      	mov	r0, r3
 801c804:	3708      	adds	r7, #8
 801c806:	46bd      	mov	sp, r7
 801c808:	bd80      	pop	{r7, pc}

0801c80a <_ZN3CANC1Ev>:

CAN *can;

uint32_t mapDLC(uint8_t dataLength);

CAN::CAN() {
 801c80a:	b5b0      	push	{r4, r5, r7, lr}
 801c80c:	b082      	sub	sp, #8
 801c80e:	af00      	add	r7, sp, #0
 801c810:	6078      	str	r0, [r7, #4]
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 801c818:	2407      	movs	r4, #7
 801c81a:	461d      	mov	r5, r3
 801c81c:	e004      	b.n	801c828 <_ZN3CANC1Ev+0x1e>
 801c81e:	4628      	mov	r0, r5
 801c820:	f7ff ffe6 	bl	801c7f0 <_ZN13CallbackEntryC1Ev>
 801c824:	3c01      	subs	r4, #1
 801c826:	3528      	adds	r5, #40	@ 0x28
 801c828:	2c00      	cmp	r4, #0
 801c82a:	daf8      	bge.n	801c81e <_ZN3CANC1Ev+0x14>
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 801c832:	2407      	movs	r4, #7
 801c834:	461d      	mov	r5, r3
 801c836:	e004      	b.n	801c842 <_ZN3CANC1Ev+0x38>
 801c838:	4628      	mov	r0, r5
 801c83a:	f7ff ffd9 	bl	801c7f0 <_ZN13CallbackEntryC1Ev>
 801c83e:	3c01      	subs	r4, #1
 801c840:	3528      	adds	r5, #40	@ 0x28
 801c842:	2c00      	cmp	r4, #0
 801c844:	daf8      	bge.n	801c838 <_ZN3CANC1Ev+0x2e>
    this->mapMutex = xSemaphoreCreateMutex(); // Use a mutex for task-level synchronization
 801c846:	2001      	movs	r0, #1
 801c848:	f7f2 fddb 	bl	800f402 <xQueueCreateMutex>
 801c84c:	4602      	mov	r2, r0
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
}
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	4618      	mov	r0, r3
 801c858:	3708      	adds	r7, #8
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bdb0      	pop	{r4, r5, r7, pc}

0801c85e <_ZN3CAND1Ev>:

CAN::~CAN() {
 801c85e:	b580      	push	{r7, lr}
 801c860:	b084      	sub	sp, #16
 801c862:	af00      	add	r7, sp, #0
 801c864:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(this->mapMutex, portMAX_DELAY);
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801c86c:	f04f 31ff 	mov.w	r1, #4294967295
 801c870:	4618      	mov	r0, r3
 801c872:	f7f3 f95f 	bl	800fb34 <xQueueSemaphoreTake>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801c876:	2300      	movs	r3, #0
 801c878:	60fb      	str	r3, [r7, #12]
 801c87a:	e017      	b.n	801c8ac <_ZN3CAND1Ev+0x4e>
        if (readRequests[i].isOpen) {
 801c87c:	6879      	ldr	r1, [r7, #4]
 801c87e:	68fa      	ldr	r2, [r7, #12]
 801c880:	4613      	mov	r3, r2
 801c882:	005b      	lsls	r3, r3, #1
 801c884:	4413      	add	r3, r2
 801c886:	00db      	lsls	r3, r3, #3
 801c888:	440b      	add	r3, r1
 801c88a:	3318      	adds	r3, #24
 801c88c:	781b      	ldrb	r3, [r3, #0]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d009      	beq.n	801c8a6 <_ZN3CAND1Ev+0x48>
            // No need to delete task notifications
            readRequests[i].isOpen = false;
 801c892:	6879      	ldr	r1, [r7, #4]
 801c894:	68fa      	ldr	r2, [r7, #12]
 801c896:	4613      	mov	r3, r2
 801c898:	005b      	lsls	r3, r3, #1
 801c89a:	4413      	add	r3, r2
 801c89c:	00db      	lsls	r3, r3, #3
 801c89e:	440b      	add	r3, r1
 801c8a0:	3318      	adds	r3, #24
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	3301      	adds	r3, #1
 801c8aa:	60fb      	str	r3, [r7, #12]
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2b0f      	cmp	r3, #15
 801c8b0:	dde4      	ble.n	801c87c <_ZN3CAND1Ev+0x1e>
        }
    }
    xSemaphoreGive(this->mapMutex);
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	2100      	movs	r1, #0
 801c8be:	f7f2 fe27 	bl	800f510 <xQueueGenericSend>
    vSemaphoreDelete(this->mapMutex);
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	f7f3 fac5 	bl	800fe58 <vQueueDelete>
}
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	3710      	adds	r7, #16
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 801c8d8:	b5b0      	push	{r4, r5, r7, lr}
 801c8da:	b082      	sub	sp, #8
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	6039      	str	r1, [r7, #0]
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	683a      	ldr	r2, [r7, #0]
 801c8e6:	4611      	mov	r1, r2
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f7fb f915 	bl	8017b18 <_ZN8CallbackaSEOS_>
 801c8ee:	683b      	ldr	r3, [r7, #0]
 801c8f0:	791a      	ldrb	r2, [r3, #4]
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	711a      	strb	r2, [r3, #4]
 801c8f6:	687a      	ldr	r2, [r7, #4]
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	f102 0408 	add.w	r4, r2, #8
 801c8fe:	f103 0508 	add.w	r5, r3, #8
 801c902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c906:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c90a:	e884 0003 	stmia.w	r4, {r0, r1}
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	4618      	mov	r0, r3
 801c912:	3708      	adds	r7, #8
 801c914:	46bd      	mov	sp, r7
 801c916:	bdb0      	pop	{r4, r5, r7, pc}

0801c918 <_ZN3CAN4initE12can_config_t>:

HAL_StatusTypeDef CAN::init(can_config_t config) {
 801c918:	b590      	push	{r4, r7, lr}
 801c91a:	b097      	sub	sp, #92	@ 0x5c
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
 801c920:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    can = this;
 801c922:	4a74      	ldr	r2, [pc, #464]	@ (801caf4 <_ZN3CAN4initE12can_config_t+0x1dc>)
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	6013      	str	r3, [r2, #0]
    this->config = config;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	683a      	ldr	r2, [r7, #0]
 801c92c:	601a      	str	r2, [r3, #0]

    // Initialize read requests
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801c92e:	2300      	movs	r3, #0
 801c930:	657b      	str	r3, [r7, #84]	@ 0x54
 801c932:	e020      	b.n	801c976 <_ZN3CAN4initE12can_config_t+0x5e>
        readRequests[i].id = 0;
 801c934:	6879      	ldr	r1, [r7, #4]
 801c936:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c938:	4613      	mov	r3, r2
 801c93a:	005b      	lsls	r3, r3, #1
 801c93c:	4413      	add	r3, r2
 801c93e:	00db      	lsls	r3, r3, #3
 801c940:	440b      	add	r3, r1
 801c942:	3304      	adds	r3, #4
 801c944:	2200      	movs	r2, #0
 801c946:	601a      	str	r2, [r3, #0]
        readRequests[i].taskHandle = nullptr;
 801c948:	6879      	ldr	r1, [r7, #4]
 801c94a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c94c:	4613      	mov	r3, r2
 801c94e:	005b      	lsls	r3, r3, #1
 801c950:	4413      	add	r3, r2
 801c952:	00db      	lsls	r3, r3, #3
 801c954:	440b      	add	r3, r1
 801c956:	3314      	adds	r3, #20
 801c958:	2200      	movs	r2, #0
 801c95a:	601a      	str	r2, [r3, #0]
        readRequests[i].isOpen = false;
 801c95c:	6879      	ldr	r1, [r7, #4]
 801c95e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c960:	4613      	mov	r3, r2
 801c962:	005b      	lsls	r3, r3, #1
 801c964:	4413      	add	r3, r2
 801c966:	00db      	lsls	r3, r3, #3
 801c968:	440b      	add	r3, r1
 801c96a:	3318      	adds	r3, #24
 801c96c:	2200      	movs	r2, #0
 801c96e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801c970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c972:	3301      	adds	r3, #1
 801c974:	657b      	str	r3, [r7, #84]	@ 0x54
 801c976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c978:	2b0f      	cmp	r3, #15
 801c97a:	dddb      	ble.n	801c934 <_ZN3CAN4initE12can_config_t+0x1c>
    }

    for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801c97c:	2300      	movs	r3, #0
 801c97e:	653b      	str	r3, [r7, #80]	@ 0x50
 801c980:	e05c      	b.n	801ca3c <_ZN3CAN4initE12can_config_t+0x124>
        standardIDCallbacks[i].FilterID1 = 0x000;
 801c982:	6879      	ldr	r1, [r7, #4]
 801c984:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c986:	4613      	mov	r3, r2
 801c988:	009b      	lsls	r3, r3, #2
 801c98a:	4413      	add	r3, r2
 801c98c:	00db      	lsls	r3, r3, #3
 801c98e:	440b      	add	r3, r1
 801c990:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 801c994:	2200      	movs	r2, #0
 801c996:	601a      	str	r2, [r3, #0]
        standardIDCallbacks[i].FilterID2 = 0x7FF; // Default: match all 11-bit IDs
 801c998:	6879      	ldr	r1, [r7, #4]
 801c99a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c99c:	4613      	mov	r3, r2
 801c99e:	009b      	lsls	r3, r3, #2
 801c9a0:	4413      	add	r3, r2
 801c9a2:	00db      	lsls	r3, r3, #3
 801c9a4:	440b      	add	r3, r1
 801c9a6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 801c9aa:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c9ae:	601a      	str	r2, [r3, #0]
        standardIDCallbacks[i].callback.registered = false;
 801c9b0:	6879      	ldr	r1, [r7, #4]
 801c9b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9b4:	4613      	mov	r3, r2
 801c9b6:	009b      	lsls	r3, r3, #2
 801c9b8:	4413      	add	r3, r2
 801c9ba:	00db      	lsls	r3, r3, #3
 801c9bc:	440b      	add	r3, r1
 801c9be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 801c9c2:	2200      	movs	r2, #0
 801c9c4:	701a      	strb	r2, [r3, #0]

        extendedIDCallbacks[i].callback = nullptr;
 801c9c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9c8:	4613      	mov	r3, r2
 801c9ca:	009b      	lsls	r3, r3, #2
 801c9cc:	4413      	add	r3, r2
 801c9ce:	00db      	lsls	r3, r3, #3
 801c9d0:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 801c9d4:	687a      	ldr	r2, [r7, #4]
 801c9d6:	4413      	add	r3, r2
 801c9d8:	1d1c      	adds	r4, r3, #4
 801c9da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801c9de:	2100      	movs	r1, #0
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f000 fc59 	bl	801d298 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1EPFvS0_E>
 801c9e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801c9ea:	4619      	mov	r1, r3
 801c9ec:	4620      	mov	r0, r4
 801c9ee:	f7ff ff73 	bl	801c8d8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEaSEOS1_>
        extendedIDCallbacks[i].FilterID1 = 0x00000000;
 801c9f2:	6879      	ldr	r1, [r7, #4]
 801c9f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9f6:	4613      	mov	r3, r2
 801c9f8:	009b      	lsls	r3, r3, #2
 801c9fa:	4413      	add	r3, r2
 801c9fc:	00db      	lsls	r3, r3, #3
 801c9fe:	440b      	add	r3, r1
 801ca00:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 801ca04:	2200      	movs	r2, #0
 801ca06:	601a      	str	r2, [r3, #0]
        extendedIDCallbacks[i].FilterID2 = 0x1FFFFFFF; // Default: match all 29-bit IDs
 801ca08:	6879      	ldr	r1, [r7, #4]
 801ca0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ca0c:	4613      	mov	r3, r2
 801ca0e:	009b      	lsls	r3, r3, #2
 801ca10:	4413      	add	r3, r2
 801ca12:	00db      	lsls	r3, r3, #3
 801ca14:	440b      	add	r3, r1
 801ca16:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 801ca1a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 801ca1e:	601a      	str	r2, [r3, #0]
        extendedIDCallbacks[i].callback.registered = false;
 801ca20:	6879      	ldr	r1, [r7, #4]
 801ca22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ca24:	4613      	mov	r3, r2
 801ca26:	009b      	lsls	r3, r3, #2
 801ca28:	4413      	add	r3, r2
 801ca2a:	00db      	lsls	r3, r3, #3
 801ca2c:	440b      	add	r3, r1
 801ca2e:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 801ca32:	2200      	movs	r2, #0
 801ca34:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801ca36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ca38:	3301      	adds	r3, #1
 801ca3a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ca3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ca3e:	2b07      	cmp	r3, #7
 801ca40:	dd9f      	ble.n	801c982 <_ZN3CAN4initE12can_config_t+0x6a>

    // Configure filters (same as original)
    FDCAN_FilterTypeDef filterConfig;

    // Filter for 11-bit frames -> FIFO 1
    filterConfig.IdType = FDCAN_STANDARD_ID;
 801ca42:	2300      	movs	r3, #0
 801ca44:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterIndex = 0; // First filter
 801ca46:	2300      	movs	r3, #0
 801ca48:	613b      	str	r3, [r7, #16]
    filterConfig.FilterType = FDCAN_FILTER_RANGE;
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	617b      	str	r3, [r7, #20]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1; // Route to FIFO 1
 801ca4e:	2302      	movs	r3, #2
 801ca50:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterID1 = 0x000; // Match all 11-bit IDs (0x000 to 0x7FF)
 801ca52:	2300      	movs	r3, #0
 801ca54:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterID2 = 0x7FF;
 801ca56:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801ca5a:	623b      	str	r3, [r7, #32]
    status = HAL_FDCAN_ConfigFilter(this->config.hfdcan, &filterConfig);
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	f107 020c 	add.w	r2, r7, #12
 801ca64:	4611      	mov	r1, r2
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7e8 fdc8 	bl	80055fc <HAL_FDCAN_ConfigFilter>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (status != HAL_OK) {
 801ca72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d002      	beq.n	801ca80 <_ZN3CAN4initE12can_config_t+0x168>
        return status;
 801ca7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801ca7e:	e035      	b.n	801caec <_ZN3CAN4initE12can_config_t+0x1d4>
    }

    // Filter for 29-bit frames -> FIFO 0
    filterConfig.IdType = FDCAN_EXTENDED_ID;
 801ca80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ca84:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterIndex = 1; // Second filter
 801ca86:	2301      	movs	r3, #1
 801ca88:	613b      	str	r3, [r7, #16]
    filterConfig.FilterType = FDCAN_FILTER_RANGE;
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	617b      	str	r3, [r7, #20]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; // Route to FIFO 0
 801ca8e:	2301      	movs	r3, #1
 801ca90:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterID1 = 0x00000000; // Match all 29-bit IDs (0x00000000 to 0x1FFFFFFF)
 801ca92:	2300      	movs	r3, #0
 801ca94:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterID2 = 0x1FFFFFFF;
 801ca96:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 801ca9a:	623b      	str	r3, [r7, #32]
    status = HAL_FDCAN_ConfigFilter(this->config.hfdcan, &filterConfig);
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	f107 020c 	add.w	r2, r7, #12
 801caa4:	4611      	mov	r1, r2
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7e8 fda8 	bl	80055fc <HAL_FDCAN_ConfigFilter>
 801caac:	4603      	mov	r3, r0
 801caae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (status != HAL_OK) {
 801cab2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d002      	beq.n	801cac0 <_ZN3CAN4initE12can_config_t+0x1a8>
        return status;
 801caba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801cabe:	e015      	b.n	801caec <_ZN3CAN4initE12can_config_t+0x1d4>
    }

    // Enable Notifications
    status = HAL_FDCAN_ActivateNotification(this->config.hfdcan,
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	2200      	movs	r2, #0
 801cac6:	2101      	movs	r1, #1
 801cac8:	4618      	mov	r0, r3
 801caca:	f7e8 ffff 	bl	8005acc <HAL_FDCAN_ActivateNotification>
 801cace:	4603      	mov	r3, r0
 801cad0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

    status = HAL_FDCAN_ActivateNotification(this->config.hfdcan,
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	2200      	movs	r2, #0
 801cada:	2110      	movs	r1, #16
 801cadc:	4618      	mov	r0, r3
 801cade:	f7e8 fff5 	bl	8005acc <HAL_FDCAN_ActivateNotification>
 801cae2:	4603      	mov	r3, r0
 801cae4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);

    return status;
 801cae8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801caec:	4618      	mov	r0, r3
 801caee:	375c      	adds	r7, #92	@ 0x5c
 801caf0:	46bd      	mov	sp, r7
 801caf2:	bd90      	pop	{r4, r7, pc}
 801caf4:	240286d4 	.word	0x240286d4

0801caf8 <_ZN3CAN5startEv>:

HAL_StatusTypeDef CAN::start() {
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b082      	sub	sp, #8
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	6078      	str	r0, [r7, #4]
    return HAL_FDCAN_Start(this->config.hfdcan);
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	4618      	mov	r0, r3
 801cb06:	f7e8 fdef 	bl	80056e8 <HAL_FDCAN_Start>
 801cb0a:	4603      	mov	r3, r0
}
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	3708      	adds	r7, #8
 801cb10:	46bd      	mov	sp, r7
 801cb12:	bd80      	pop	{r7, pc}

0801cb14 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock>:

bool CAN::addReadRequest(uint32_t id, TaskHandle_t taskHandle) {
 801cb14:	b580      	push	{r7, lr}
 801cb16:	b086      	sub	sp, #24
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	60f8      	str	r0, [r7, #12]
 801cb1c:	60b9      	str	r1, [r7, #8]
 801cb1e:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(this->mapMutex, portMAX_DELAY);
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801cb26:	f04f 31ff 	mov.w	r1, #4294967295
 801cb2a:	4618      	mov	r0, r3
 801cb2c:	f7f3 f802 	bl	800fb34 <xQueueSemaphoreTake>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cb30:	2300      	movs	r3, #0
 801cb32:	617b      	str	r3, [r7, #20]
 801cb34:	e038      	b.n	801cba8 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0x94>
        if (!readRequests[i].isOpen) {
 801cb36:	68f9      	ldr	r1, [r7, #12]
 801cb38:	697a      	ldr	r2, [r7, #20]
 801cb3a:	4613      	mov	r3, r2
 801cb3c:	005b      	lsls	r3, r3, #1
 801cb3e:	4413      	add	r3, r2
 801cb40:	00db      	lsls	r3, r3, #3
 801cb42:	440b      	add	r3, r1
 801cb44:	3318      	adds	r3, #24
 801cb46:	781b      	ldrb	r3, [r3, #0]
 801cb48:	f083 0301 	eor.w	r3, r3, #1
 801cb4c:	b2db      	uxtb	r3, r3
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d027      	beq.n	801cba2 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0x8e>
            readRequests[i].id = id;
 801cb52:	68f9      	ldr	r1, [r7, #12]
 801cb54:	697a      	ldr	r2, [r7, #20]
 801cb56:	4613      	mov	r3, r2
 801cb58:	005b      	lsls	r3, r3, #1
 801cb5a:	4413      	add	r3, r2
 801cb5c:	00db      	lsls	r3, r3, #3
 801cb5e:	440b      	add	r3, r1
 801cb60:	3304      	adds	r3, #4
 801cb62:	68ba      	ldr	r2, [r7, #8]
 801cb64:	601a      	str	r2, [r3, #0]
            readRequests[i].taskHandle = taskHandle;
 801cb66:	68f9      	ldr	r1, [r7, #12]
 801cb68:	697a      	ldr	r2, [r7, #20]
 801cb6a:	4613      	mov	r3, r2
 801cb6c:	005b      	lsls	r3, r3, #1
 801cb6e:	4413      	add	r3, r2
 801cb70:	00db      	lsls	r3, r3, #3
 801cb72:	440b      	add	r3, r1
 801cb74:	3314      	adds	r3, #20
 801cb76:	687a      	ldr	r2, [r7, #4]
 801cb78:	601a      	str	r2, [r3, #0]
            readRequests[i].isOpen = true;
 801cb7a:	68f9      	ldr	r1, [r7, #12]
 801cb7c:	697a      	ldr	r2, [r7, #20]
 801cb7e:	4613      	mov	r3, r2
 801cb80:	005b      	lsls	r3, r3, #1
 801cb82:	4413      	add	r3, r2
 801cb84:	00db      	lsls	r3, r3, #3
 801cb86:	440b      	add	r3, r1
 801cb88:	3318      	adds	r3, #24
 801cb8a:	2201      	movs	r2, #1
 801cb8c:	701a      	strb	r2, [r3, #0]
            xSemaphoreGive(this->mapMutex);
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801cb94:	2300      	movs	r3, #0
 801cb96:	2200      	movs	r2, #0
 801cb98:	2100      	movs	r1, #0
 801cb9a:	f7f2 fcb9 	bl	800f510 <xQueueGenericSend>
            return true;
 801cb9e:	2301      	movs	r3, #1
 801cba0:	e00e      	b.n	801cbc0 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0xac>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cba2:	697b      	ldr	r3, [r7, #20]
 801cba4:	3301      	adds	r3, #1
 801cba6:	617b      	str	r3, [r7, #20]
 801cba8:	697b      	ldr	r3, [r7, #20]
 801cbaa:	2b0f      	cmp	r3, #15
 801cbac:	ddc3      	ble.n	801cb36 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0x22>
        }
    }
    xSemaphoreGive(this->mapMutex);
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	2100      	movs	r1, #0
 801cbba:	f7f2 fca9 	bl	800f510 <xQueueGenericSend>
    return false;
 801cbbe:	2300      	movs	r3, #0
}
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	3718      	adds	r7, #24
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd80      	pop	{r7, pc}

0801cbc8 <_ZN3CAN17removeReadRequestEm>:

void CAN::removeReadRequest(uint32_t id) {
 801cbc8:	b580      	push	{r7, lr}
 801cbca:	b084      	sub	sp, #16
 801cbcc:	af00      	add	r7, sp, #0
 801cbce:	6078      	str	r0, [r7, #4]
 801cbd0:	6039      	str	r1, [r7, #0]
    xSemaphoreTake(this->mapMutex, portMAX_DELAY);
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801cbd8:	f04f 31ff 	mov.w	r1, #4294967295
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f7f2 ffa9 	bl	800fb34 <xQueueSemaphoreTake>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	60fb      	str	r3, [r7, #12]
 801cbe6:	e02e      	b.n	801cc46 <_ZN3CAN17removeReadRequestEm+0x7e>
        if (readRequests[i].isOpen && readRequests[i].id == id) {
 801cbe8:	6879      	ldr	r1, [r7, #4]
 801cbea:	68fa      	ldr	r2, [r7, #12]
 801cbec:	4613      	mov	r3, r2
 801cbee:	005b      	lsls	r3, r3, #1
 801cbf0:	4413      	add	r3, r2
 801cbf2:	00db      	lsls	r3, r3, #3
 801cbf4:	440b      	add	r3, r1
 801cbf6:	3318      	adds	r3, #24
 801cbf8:	781b      	ldrb	r3, [r3, #0]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d020      	beq.n	801cc40 <_ZN3CAN17removeReadRequestEm+0x78>
 801cbfe:	6879      	ldr	r1, [r7, #4]
 801cc00:	68fa      	ldr	r2, [r7, #12]
 801cc02:	4613      	mov	r3, r2
 801cc04:	005b      	lsls	r3, r3, #1
 801cc06:	4413      	add	r3, r2
 801cc08:	00db      	lsls	r3, r3, #3
 801cc0a:	440b      	add	r3, r1
 801cc0c:	3304      	adds	r3, #4
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	683a      	ldr	r2, [r7, #0]
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d114      	bne.n	801cc40 <_ZN3CAN17removeReadRequestEm+0x78>
            readRequests[i].isOpen = false;
 801cc16:	6879      	ldr	r1, [r7, #4]
 801cc18:	68fa      	ldr	r2, [r7, #12]
 801cc1a:	4613      	mov	r3, r2
 801cc1c:	005b      	lsls	r3, r3, #1
 801cc1e:	4413      	add	r3, r2
 801cc20:	00db      	lsls	r3, r3, #3
 801cc22:	440b      	add	r3, r1
 801cc24:	3318      	adds	r3, #24
 801cc26:	2200      	movs	r2, #0
 801cc28:	701a      	strb	r2, [r3, #0]
            readRequests[i].taskHandle = nullptr;
 801cc2a:	6879      	ldr	r1, [r7, #4]
 801cc2c:	68fa      	ldr	r2, [r7, #12]
 801cc2e:	4613      	mov	r3, r2
 801cc30:	005b      	lsls	r3, r3, #1
 801cc32:	4413      	add	r3, r2
 801cc34:	00db      	lsls	r3, r3, #3
 801cc36:	440b      	add	r3, r1
 801cc38:	3314      	adds	r3, #20
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	601a      	str	r2, [r3, #0]
            break;
 801cc3e:	e005      	b.n	801cc4c <_ZN3CAN17removeReadRequestEm+0x84>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	3301      	adds	r3, #1
 801cc44:	60fb      	str	r3, [r7, #12]
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	2b0f      	cmp	r3, #15
 801cc4a:	ddcd      	ble.n	801cbe8 <_ZN3CAN17removeReadRequestEm+0x20>
        }
    }
    xSemaphoreGive(this->mapMutex);
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801cc52:	2300      	movs	r3, #0
 801cc54:	2200      	movs	r2, #0
 801cc56:	2100      	movs	r1, #0
 801cc58:	f7f2 fc5a 	bl	800f510 <xQueueGenericSend>
}
 801cc5c:	bf00      	nop
 801cc5e:	3710      	adds	r7, #16
 801cc60:	46bd      	mov	sp, r7
 801cc62:	bd80      	pop	{r7, pc}

0801cc64 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh>:

void CAN::onMessageReceived(const FDCAN_RxHeaderTypeDef &header, uint8_t *data) {
 801cc64:	b580      	push	{r7, lr}
 801cc66:	b090      	sub	sp, #64	@ 0x40
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	60f8      	str	r0, [r7, #12]
 801cc6c:	60b9      	str	r1, [r7, #8]
 801cc6e:	607a      	str	r2, [r7, #4]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 801cc70:	2300      	movs	r3, #0
 801cc72:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Check for matching read request
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cc74:	2300      	movs	r3, #0
 801cc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cc78:	e05c      	b.n	801cd34 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xd0>
        if (readRequests[i].isOpen && readRequests[i].id == header.Identifier) {
 801cc7a:	68f9      	ldr	r1, [r7, #12]
 801cc7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cc7e:	4613      	mov	r3, r2
 801cc80:	005b      	lsls	r3, r3, #1
 801cc82:	4413      	add	r3, r2
 801cc84:	00db      	lsls	r3, r3, #3
 801cc86:	440b      	add	r3, r1
 801cc88:	3318      	adds	r3, #24
 801cc8a:	781b      	ldrb	r3, [r3, #0]
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d04e      	beq.n	801cd2e <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xca>
 801cc90:	68f9      	ldr	r1, [r7, #12]
 801cc92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cc94:	4613      	mov	r3, r2
 801cc96:	005b      	lsls	r3, r3, #1
 801cc98:	4413      	add	r3, r2
 801cc9a:	00db      	lsls	r3, r3, #3
 801cc9c:	440b      	add	r3, r1
 801cc9e:	3304      	adds	r3, #4
 801cca0:	681a      	ldr	r2, [r3, #0]
 801cca2:	68bb      	ldr	r3, [r7, #8]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	429a      	cmp	r2, r3
 801cca8:	d141      	bne.n	801cd2e <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xca>
            uint8_t actualLength = (uint8_t) header.DataLength;
 801ccaa:	68bb      	ldr	r3, [r7, #8]
 801ccac:	68db      	ldr	r3, [r3, #12]
 801ccae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            // Store response data
            memcpy(readRequests[i].responseData, data, actualLength);
 801ccb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ccb4:	4613      	mov	r3, r2
 801ccb6:	005b      	lsls	r3, r3, #1
 801ccb8:	4413      	add	r3, r2
 801ccba:	00db      	lsls	r3, r3, #3
 801ccbc:	68fa      	ldr	r2, [r7, #12]
 801ccbe:	4413      	add	r3, r2
 801ccc0:	3308      	adds	r3, #8
 801ccc2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801ccc6:	6879      	ldr	r1, [r7, #4]
 801ccc8:	4618      	mov	r0, r3
 801ccca:	f006 f812 	bl	8022cf2 <memcpy>
            readRequests[i].responseLength = actualLength;
 801ccce:	68f9      	ldr	r1, [r7, #12]
 801ccd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ccd2:	4613      	mov	r3, r2
 801ccd4:	005b      	lsls	r3, r3, #1
 801ccd6:	4413      	add	r3, r2
 801ccd8:	00db      	lsls	r3, r3, #3
 801ccda:	440b      	add	r3, r1
 801ccdc:	3310      	adds	r3, #16
 801ccde:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801cce2:	701a      	strb	r2, [r3, #0]
            readRequests[i].isOpen = false;
 801cce4:	68f9      	ldr	r1, [r7, #12]
 801cce6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cce8:	4613      	mov	r3, r2
 801ccea:	005b      	lsls	r3, r3, #1
 801ccec:	4413      	add	r3, r2
 801ccee:	00db      	lsls	r3, r3, #3
 801ccf0:	440b      	add	r3, r1
 801ccf2:	3318      	adds	r3, #24
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	701a      	strb	r2, [r3, #0]

            // Notify the task
            vTaskNotifyGiveFromISR(readRequests[i].taskHandle, &higherPriorityTaskWoken);
 801ccf8:	68f9      	ldr	r1, [r7, #12]
 801ccfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ccfc:	4613      	mov	r3, r2
 801ccfe:	005b      	lsls	r3, r3, #1
 801cd00:	4413      	add	r3, r2
 801cd02:	00db      	lsls	r3, r3, #3
 801cd04:	440b      	add	r3, r1
 801cd06:	3314      	adds	r3, #20
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801cd0e:	4611      	mov	r1, r2
 801cd10:	4618      	mov	r0, r3
 801cd12:	f7f4 fb49 	bl	80113a8 <vTaskNotifyGiveFromISR>
            portYIELD_FROM_ISR(higherPriorityTaskWoken);
 801cd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d00f      	beq.n	801cd3c <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xd8>
 801cd1c:	4b58      	ldr	r3, [pc, #352]	@ (801ce80 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x21c>)
 801cd1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cd22:	601a      	str	r2, [r3, #0]
 801cd24:	f3bf 8f4f 	dsb	sy
 801cd28:	f3bf 8f6f 	isb	sy
            break;
 801cd2c:	e006      	b.n	801cd3c <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xd8>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cd30:	3301      	adds	r3, #1
 801cd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cd36:	2b0f      	cmp	r3, #15
 801cd38:	dd9f      	ble.n	801cc7a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16>
 801cd3a:	e000      	b.n	801cd3e <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xda>
            break;
 801cd3c:	bf00      	nop
        }
    }

    // Process callbacks (same as original)
    if (header.IdType == FDCAN_STANDARD_ID) {
 801cd3e:	68bb      	ldr	r3, [r7, #8]
 801cd40:	685b      	ldr	r3, [r3, #4]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d149      	bne.n	801cdda <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x176>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801cd46:	2300      	movs	r3, #0
 801cd48:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cd4a:	e043      	b.n	801cdd4 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x170>
            if (standardIDCallbacks[i].callback.registered &&
 801cd4c:	68f9      	ldr	r1, [r7, #12]
 801cd4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd50:	4613      	mov	r3, r2
 801cd52:	009b      	lsls	r3, r3, #2
 801cd54:	4413      	add	r3, r2
 801cd56:	00db      	lsls	r3, r3, #3
 801cd58:	440b      	add	r3, r1
 801cd5a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 801cd5e:	781b      	ldrb	r3, [r3, #0]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d034      	beq.n	801cdce <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16a>
                header.Identifier >= standardIDCallbacks[i].FilterID1 &&
 801cd64:	68bb      	ldr	r3, [r7, #8]
 801cd66:	6819      	ldr	r1, [r3, #0]
 801cd68:	68f8      	ldr	r0, [r7, #12]
 801cd6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd6c:	4613      	mov	r3, r2
 801cd6e:	009b      	lsls	r3, r3, #2
 801cd70:	4413      	add	r3, r2
 801cd72:	00db      	lsls	r3, r3, #3
 801cd74:	4403      	add	r3, r0
 801cd76:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 801cd7a:	681b      	ldr	r3, [r3, #0]
            if (standardIDCallbacks[i].callback.registered &&
 801cd7c:	4299      	cmp	r1, r3
 801cd7e:	d326      	bcc.n	801cdce <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16a>
                header.Identifier <= standardIDCallbacks[i].FilterID2) {
 801cd80:	68bb      	ldr	r3, [r7, #8]
 801cd82:	6819      	ldr	r1, [r3, #0]
 801cd84:	68f8      	ldr	r0, [r7, #12]
 801cd86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd88:	4613      	mov	r3, r2
 801cd8a:	009b      	lsls	r3, r3, #2
 801cd8c:	4413      	add	r3, r2
 801cd8e:	00db      	lsls	r3, r3, #3
 801cd90:	4403      	add	r3, r0
 801cd92:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 801cd96:	681b      	ldr	r3, [r3, #0]
                header.Identifier >= standardIDCallbacks[i].FilterID1 &&
 801cd98:	4299      	cmp	r1, r3
 801cd9a:	d818      	bhi.n	801cdce <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16a>

                can_frame_callback_input_t callback_input = {
                    .id = header.Identifier,
 801cd9c:	68bb      	ldr	r3, [r7, #8]
 801cd9e:	681b      	ldr	r3, [r3, #0]
                    .data = data,
                    .length = (uint8_t) header.DataLength
                };
 801cda0:	623b      	str	r3, [r7, #32]
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	627b      	str	r3, [r7, #36]	@ 0x24
                    .length = (uint8_t) header.DataLength
 801cda6:	68bb      	ldr	r3, [r7, #8]
 801cda8:	68db      	ldr	r3, [r3, #12]
                };
 801cdaa:	b2db      	uxtb	r3, r3
 801cdac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                standardIDCallbacks[i].callback.call(callback_input);
 801cdb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cdb2:	4613      	mov	r3, r2
 801cdb4:	009b      	lsls	r3, r3, #2
 801cdb6:	4413      	add	r3, r2
 801cdb8:	00db      	lsls	r3, r3, #3
 801cdba:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801cdbe:	68fa      	ldr	r2, [r7, #12]
 801cdc0:	4413      	add	r3, r2
 801cdc2:	1d18      	adds	r0, r3, #4
 801cdc4:	f107 0320 	add.w	r3, r7, #32
 801cdc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 801cdca:	f000 fa95 	bl	801d2f8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tE4callES0_>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801cdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdd0:	3301      	adds	r3, #1
 801cdd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdd6:	2b07      	cmp	r3, #7
 801cdd8:	ddb8      	ble.n	801cd4c <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xe8>
            }
        }
    }

    if (header.IdType == FDCAN_EXTENDED_ID) {
 801cdda:	68bb      	ldr	r3, [r7, #8]
 801cddc:	685b      	ldr	r3, [r3, #4]
 801cdde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cde2:	d148      	bne.n	801ce76 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x212>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801cde4:	2300      	movs	r3, #0
 801cde6:	637b      	str	r3, [r7, #52]	@ 0x34
 801cde8:	e042      	b.n	801ce70 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x20c>
            if (extendedIDCallbacks[i].callback.registered &&
 801cdea:	68f9      	ldr	r1, [r7, #12]
 801cdec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cdee:	4613      	mov	r3, r2
 801cdf0:	009b      	lsls	r3, r3, #2
 801cdf2:	4413      	add	r3, r2
 801cdf4:	00db      	lsls	r3, r3, #3
 801cdf6:	440b      	add	r3, r1
 801cdf8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 801cdfc:	781b      	ldrb	r3, [r3, #0]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d033      	beq.n	801ce6a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x206>
                header.Identifier >= extendedIDCallbacks[i].FilterID1 &&
 801ce02:	68bb      	ldr	r3, [r7, #8]
 801ce04:	6819      	ldr	r1, [r3, #0]
 801ce06:	68f8      	ldr	r0, [r7, #12]
 801ce08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce0a:	4613      	mov	r3, r2
 801ce0c:	009b      	lsls	r3, r3, #2
 801ce0e:	4413      	add	r3, r2
 801ce10:	00db      	lsls	r3, r3, #3
 801ce12:	4403      	add	r3, r0
 801ce14:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 801ce18:	681b      	ldr	r3, [r3, #0]
            if (extendedIDCallbacks[i].callback.registered &&
 801ce1a:	4299      	cmp	r1, r3
 801ce1c:	d325      	bcc.n	801ce6a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x206>
                header.Identifier <= extendedIDCallbacks[i].FilterID2) {
 801ce1e:	68bb      	ldr	r3, [r7, #8]
 801ce20:	6819      	ldr	r1, [r3, #0]
 801ce22:	68f8      	ldr	r0, [r7, #12]
 801ce24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce26:	4613      	mov	r3, r2
 801ce28:	009b      	lsls	r3, r3, #2
 801ce2a:	4413      	add	r3, r2
 801ce2c:	00db      	lsls	r3, r3, #3
 801ce2e:	4403      	add	r3, r0
 801ce30:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 801ce34:	681b      	ldr	r3, [r3, #0]
                header.Identifier >= extendedIDCallbacks[i].FilterID1 &&
 801ce36:	4299      	cmp	r1, r3
 801ce38:	d817      	bhi.n	801ce6a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x206>

                can_frame_callback_input_t callback_input = {
                    .id = header.Identifier,
 801ce3a:	68bb      	ldr	r3, [r7, #8]
 801ce3c:	681b      	ldr	r3, [r3, #0]
                    .data = data,
                    .length = (uint8_t) header.DataLength
                };
 801ce3e:	617b      	str	r3, [r7, #20]
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	61bb      	str	r3, [r7, #24]
                    .length = (uint8_t) header.DataLength
 801ce44:	68bb      	ldr	r3, [r7, #8]
 801ce46:	68db      	ldr	r3, [r3, #12]
                };
 801ce48:	b2db      	uxtb	r3, r3
 801ce4a:	773b      	strb	r3, [r7, #28]
                extendedIDCallbacks[i].callback.call(callback_input);
 801ce4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce4e:	4613      	mov	r3, r2
 801ce50:	009b      	lsls	r3, r3, #2
 801ce52:	4413      	add	r3, r2
 801ce54:	00db      	lsls	r3, r3, #3
 801ce56:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 801ce5a:	68fa      	ldr	r2, [r7, #12]
 801ce5c:	4413      	add	r3, r2
 801ce5e:	1d18      	adds	r0, r3, #4
 801ce60:	f107 0314 	add.w	r3, r7, #20
 801ce64:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ce66:	f000 fa47 	bl	801d2f8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tE4callES0_>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801ce6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce6c:	3301      	adds	r3, #1
 801ce6e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ce70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce72:	2b07      	cmp	r3, #7
 801ce74:	ddb9      	ble.n	801cdea <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x186>
            }
        }
    }
}
 801ce76:	bf00      	nop
 801ce78:	3740      	adds	r7, #64	@ 0x40
 801ce7a:	46bd      	mov	sp, r7
 801ce7c:	bd80      	pop	{r7, pc}
 801ce7e:	bf00      	nop
 801ce80:	e000ed04 	.word	0xe000ed04

0801ce84 <_ZN3CAN11sendMessageEmPhhb>:

HAL_StatusTypeDef CAN::sendMessage(uint32_t id, uint8_t *data, uint8_t length, bool isExtendedID) {
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b090      	sub	sp, #64	@ 0x40
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	60f8      	str	r0, [r7, #12]
 801ce8c:	60b9      	str	r1, [r7, #8]
 801ce8e:	607a      	str	r2, [r7, #4]
 801ce90:	70fb      	strb	r3, [r7, #3]
    // Map the length
    uint32_t can_dlc = mapDLC(length);
 801ce92:	78fb      	ldrb	r3, [r7, #3]
 801ce94:	4618      	mov	r0, r3
 801ce96:	f000 f92b 	bl	801d0f0 <_Z6mapDLCh>
 801ce9a:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (can_dlc == 0xFFFFFFFF) {
 801ce9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ce9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cea2:	d101      	bne.n	801cea8 <_ZN3CAN11sendMessageEmPhhb+0x24>
        return HAL_ERROR;
 801cea4:	2301      	movs	r3, #1
 801cea6:	e026      	b.n	801cef6 <_ZN3CAN11sendMessageEmPhhb+0x72>
    }

    FDCAN_TxHeaderTypeDef TxHeader = {
 801cea8:	f107 0314 	add.w	r3, r7, #20
 801ceac:	2224      	movs	r2, #36	@ 0x24
 801ceae:	2100      	movs	r1, #0
 801ceb0:	4618      	mov	r0, r3
 801ceb2:	f005 fe36 	bl	8022b22 <memset>
        .ErrorStateIndicator = FDCAN_ESI_ACTIVE,
        .BitRateSwitch = FDCAN_BRS_OFF,
        .FDFormat = FDCAN_CLASSIC_CAN,
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };
 801ceb6:	68bb      	ldr	r3, [r7, #8]
 801ceb8:	617b      	str	r3, [r7, #20]
        .IdType = isExtendedID ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID,
 801ceba:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d002      	beq.n	801cec8 <_ZN3CAN11sendMessageEmPhhb+0x44>
 801cec2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801cec6:	e000      	b.n	801ceca <_ZN3CAN11sendMessageEmPhhb+0x46>
 801cec8:	2300      	movs	r3, #0
    };
 801ceca:	61bb      	str	r3, [r7, #24]
 801cecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cece:	623b      	str	r3, [r7, #32]

    HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(this->config.hfdcan, &TxHeader, data);
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	f107 0114 	add.w	r1, r7, #20
 801ced8:	687a      	ldr	r2, [r7, #4]
 801ceda:	4618      	mov	r0, r3
 801cedc:	f7e8 fc2f 	bl	800573e <HAL_FDCAN_AddMessageToTxFifoQ>
 801cee0:	4603      	mov	r3, r0
 801cee2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (status) {
 801cee6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d001      	beq.n	801cef2 <_ZN3CAN11sendMessageEmPhhb+0x6e>
        nop(); // Placeholder for additional logic if needed
 801ceee:	f7f5 fea9 	bl	8012c44 <_Z3nopv>
    }

    return status;
 801cef2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 801cef6:	4618      	mov	r0, r3
 801cef8:	3740      	adds	r7, #64	@ 0x40
 801cefa:	46bd      	mov	sp, r7
 801cefc:	bd80      	pop	{r7, pc}
	...

0801cf00 <_ZN3CAN15sendRemoteFrameEmmPhhRh>:

CAN_Status CAN::sendRemoteFrame(uint32_t id, uint32_t timeoutMs,
    uint8_t *responseData, uint8_t requestLength, uint8_t &responseLength) {
 801cf00:	b580      	push	{r7, lr}
 801cf02:	b090      	sub	sp, #64	@ 0x40
 801cf04:	af00      	add	r7, sp, #0
 801cf06:	60f8      	str	r0, [r7, #12]
 801cf08:	60b9      	str	r1, [r7, #8]
 801cf0a:	607a      	str	r2, [r7, #4]
 801cf0c:	603b      	str	r3, [r7, #0]

    TaskHandle_t currentTask = xTaskGetCurrentTaskHandle();
 801cf0e:	f7f4 f861 	bl	8010fd4 <xTaskGetCurrentTaskHandle>
 801cf12:	63b8      	str	r0, [r7, #56]	@ 0x38

    if (!addReadRequest(id, currentTask)) {
 801cf14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf16:	68b9      	ldr	r1, [r7, #8]
 801cf18:	68f8      	ldr	r0, [r7, #12]
 801cf1a:	f7ff fdfb 	bl	801cb14 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock>
 801cf1e:	4603      	mov	r3, r0
 801cf20:	f083 0301 	eor.w	r3, r3, #1
 801cf24:	b2db      	uxtb	r3, r3
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d001      	beq.n	801cf2e <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x2e>
        return CAN_RR_FULL;
 801cf2a:	2302      	movs	r3, #2
 801cf2c:	e091      	b.n	801d052 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x152>
    }

    // Send Remote Frame
    FDCAN_TxHeaderTypeDef TxHeader = {
 801cf2e:	f107 0314 	add.w	r3, r7, #20
 801cf32:	2224      	movs	r2, #36	@ 0x24
 801cf34:	2100      	movs	r1, #0
 801cf36:	4618      	mov	r0, r3
 801cf38:	f005 fdf3 	bl	8022b22 <memset>
 801cf3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801cf40:	61bb      	str	r3, [r7, #24]
 801cf42:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801cf46:	61fb      	str	r3, [r7, #28]
        .ErrorStateIndicator = FDCAN_ESI_ACTIVE,
        .BitRateSwitch = FDCAN_BRS_OFF,
        .FDFormat = FDCAN_CLASSIC_CAN,
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };
 801cf48:	68bb      	ldr	r3, [r7, #8]
 801cf4a:	617b      	str	r3, [r7, #20]
        .DataLength = mapDLC(requestLength),
 801cf4c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801cf50:	4618      	mov	r0, r3
 801cf52:	f000 f8cd 	bl	801d0f0 <_Z6mapDLCh>
 801cf56:	4603      	mov	r3, r0
    };
 801cf58:	623b      	str	r3, [r7, #32]

    if (HAL_FDCAN_AddMessageToTxFifoQ(this->config.hfdcan, &TxHeader, nullptr) != HAL_OK) {
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	f107 0114 	add.w	r1, r7, #20
 801cf62:	2200      	movs	r2, #0
 801cf64:	4618      	mov	r0, r3
 801cf66:	f7e8 fbea 	bl	800573e <HAL_FDCAN_AddMessageToTxFifoQ>
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	bf14      	ite	ne
 801cf70:	2301      	movne	r3, #1
 801cf72:	2300      	moveq	r3, #0
 801cf74:	b2db      	uxtb	r3, r3
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d005      	beq.n	801cf86 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x86>
        removeReadRequest(id);
 801cf7a:	68b9      	ldr	r1, [r7, #8]
 801cf7c:	68f8      	ldr	r0, [r7, #12]
 801cf7e:	f7ff fe23 	bl	801cbc8 <_ZN3CAN17removeReadRequestEm>
        return CAN_READING_ERROR;
 801cf82:	2301      	movs	r3, #1
 801cf84:	e065      	b.n	801d052 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x152>
    }

    // Wait for response or timeout
    if (ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(timeoutMs)) > 0) {
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801cf8c:	fb02 f303 	mul.w	r3, r2, r3
 801cf90:	4a32      	ldr	r2, [pc, #200]	@ (801d05c <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x15c>)
 801cf92:	fba2 2303 	umull	r2, r3, r2, r3
 801cf96:	099b      	lsrs	r3, r3, #6
 801cf98:	4619      	mov	r1, r3
 801cf9a:	2001      	movs	r0, #1
 801cf9c:	f7f4 f9b8 	bl	8011310 <ulTaskNotifyTake>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	bf14      	ite	ne
 801cfa6:	2301      	movne	r3, #1
 801cfa8:	2300      	moveq	r3, #0
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d04b      	beq.n	801d048 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x148>
        for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801cfb0:	2300      	movs	r3, #0
 801cfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cfb4:	e03f      	b.n	801d036 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x136>
            if (readRequests[i].id == id && !readRequests[i].isOpen) {
 801cfb6:	68f9      	ldr	r1, [r7, #12]
 801cfb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cfba:	4613      	mov	r3, r2
 801cfbc:	005b      	lsls	r3, r3, #1
 801cfbe:	4413      	add	r3, r2
 801cfc0:	00db      	lsls	r3, r3, #3
 801cfc2:	440b      	add	r3, r1
 801cfc4:	3304      	adds	r3, #4
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	68ba      	ldr	r2, [r7, #8]
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	d130      	bne.n	801d030 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x130>
 801cfce:	68f9      	ldr	r1, [r7, #12]
 801cfd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cfd2:	4613      	mov	r3, r2
 801cfd4:	005b      	lsls	r3, r3, #1
 801cfd6:	4413      	add	r3, r2
 801cfd8:	00db      	lsls	r3, r3, #3
 801cfda:	440b      	add	r3, r1
 801cfdc:	3318      	adds	r3, #24
 801cfde:	781b      	ldrb	r3, [r3, #0]
 801cfe0:	f083 0301 	eor.w	r3, r3, #1
 801cfe4:	b2db      	uxtb	r3, r3
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d022      	beq.n	801d030 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x130>
                memcpy(responseData, readRequests[i].responseData, readRequests[i].responseLength);
 801cfea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cfec:	4613      	mov	r3, r2
 801cfee:	005b      	lsls	r3, r3, #1
 801cff0:	4413      	add	r3, r2
 801cff2:	00db      	lsls	r3, r3, #3
 801cff4:	68fa      	ldr	r2, [r7, #12]
 801cff6:	4413      	add	r3, r2
 801cff8:	f103 0008 	add.w	r0, r3, #8
 801cffc:	68f9      	ldr	r1, [r7, #12]
 801cffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d000:	4613      	mov	r3, r2
 801d002:	005b      	lsls	r3, r3, #1
 801d004:	4413      	add	r3, r2
 801d006:	00db      	lsls	r3, r3, #3
 801d008:	440b      	add	r3, r1
 801d00a:	3310      	adds	r3, #16
 801d00c:	781b      	ldrb	r3, [r3, #0]
 801d00e:	461a      	mov	r2, r3
 801d010:	4601      	mov	r1, r0
 801d012:	6838      	ldr	r0, [r7, #0]
 801d014:	f005 fe6d 	bl	8022cf2 <memcpy>
                responseLength = readRequests[i].responseLength;
 801d018:	68f9      	ldr	r1, [r7, #12]
 801d01a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d01c:	4613      	mov	r3, r2
 801d01e:	005b      	lsls	r3, r3, #1
 801d020:	4413      	add	r3, r2
 801d022:	00db      	lsls	r3, r3, #3
 801d024:	440b      	add	r3, r1
 801d026:	3310      	adds	r3, #16
 801d028:	781a      	ldrb	r2, [r3, #0]
 801d02a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d02c:	701a      	strb	r2, [r3, #0]
                break;
 801d02e:	e005      	b.n	801d03c <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x13c>
        for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801d030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d032:	3301      	adds	r3, #1
 801d034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d038:	2b0f      	cmp	r3, #15
 801d03a:	ddbc      	ble.n	801cfb6 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0xb6>
            }
        }
        removeReadRequest(id);
 801d03c:	68b9      	ldr	r1, [r7, #8]
 801d03e:	68f8      	ldr	r0, [r7, #12]
 801d040:	f7ff fdc2 	bl	801cbc8 <_ZN3CAN17removeReadRequestEm>
        return CAN_SUCCESS;
 801d044:	2300      	movs	r3, #0
 801d046:	e004      	b.n	801d052 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x152>
    } else {
        removeReadRequest(id);
 801d048:	68b9      	ldr	r1, [r7, #8]
 801d04a:	68f8      	ldr	r0, [r7, #12]
 801d04c:	f7ff fdbc 	bl	801cbc8 <_ZN3CAN17removeReadRequestEm>
        return CAN_READING_ERROR;
 801d050:	2301      	movs	r3, #1
    }
}
 801d052:	4618      	mov	r0, r3
 801d054:	3740      	adds	r7, #64	@ 0x40
 801d056:	46bd      	mov	sp, r7
 801d058:	bd80      	pop	{r7, pc}
 801d05a:	bf00      	nop
 801d05c:	10624dd3 	.word	0x10624dd3

0801d060 <HAL_FDCAN_RxFifo0Callback>:

/* ---------------------------------------------------------------------------- */
// IRQ Callback Integration for FIFO 0 (29-bit IDs)
extern "C" void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t RxFifo0ITs) {
 801d060:	b580      	push	{r7, lr}
 801d062:	b08e      	sub	sp, #56	@ 0x38
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
 801d068:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData)
 801d06a:	f107 0308 	add.w	r3, r7, #8
 801d06e:	f107 0210 	add.w	r2, r7, #16
 801d072:	2140      	movs	r1, #64	@ 0x40
 801d074:	6878      	ldr	r0, [r7, #4]
 801d076:	f7e8 fbbd 	bl	80057f4 <HAL_FDCAN_GetRxMessage>
 801d07a:	4603      	mov	r3, r0
			== HAL_OK) {
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	bf0c      	ite	eq
 801d080:	2301      	moveq	r3, #1
 801d082:	2300      	movne	r3, #0
 801d084:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData)
 801d086:	2b00      	cmp	r3, #0
 801d088:	d008      	beq.n	801d09c <HAL_FDCAN_RxFifo0Callback+0x3c>
		can->onMessageReceived(rxHeader, rxData);
 801d08a:	4b06      	ldr	r3, [pc, #24]	@ (801d0a4 <HAL_FDCAN_RxFifo0Callback+0x44>)
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	f107 0208 	add.w	r2, r7, #8
 801d092:	f107 0110 	add.w	r1, r7, #16
 801d096:	4618      	mov	r0, r3
 801d098:	f7ff fde4 	bl	801cc64 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh>
	}
}
 801d09c:	bf00      	nop
 801d09e:	3738      	adds	r7, #56	@ 0x38
 801d0a0:	46bd      	mov	sp, r7
 801d0a2:	bd80      	pop	{r7, pc}
 801d0a4:	240286d4 	.word	0x240286d4

0801d0a8 <HAL_FDCAN_RxFifo1Callback>:

// IRQ Callback Integration for FIFO 1 (11-bit IDs)
extern "C" void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t RxFifo1ITs) {
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	b08e      	sub	sp, #56	@ 0x38
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
 801d0b0:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &rxHeader, rxData)
 801d0b2:	f107 0308 	add.w	r3, r7, #8
 801d0b6:	f107 0210 	add.w	r2, r7, #16
 801d0ba:	2141      	movs	r1, #65	@ 0x41
 801d0bc:	6878      	ldr	r0, [r7, #4]
 801d0be:	f7e8 fb99 	bl	80057f4 <HAL_FDCAN_GetRxMessage>
 801d0c2:	4603      	mov	r3, r0
			== HAL_OK) {
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	bf0c      	ite	eq
 801d0c8:	2301      	moveq	r3, #1
 801d0ca:	2300      	movne	r3, #0
 801d0cc:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &rxHeader, rxData)
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d008      	beq.n	801d0e4 <HAL_FDCAN_RxFifo1Callback+0x3c>
		can->onMessageReceived(rxHeader, rxData);
 801d0d2:	4b06      	ldr	r3, [pc, #24]	@ (801d0ec <HAL_FDCAN_RxFifo1Callback+0x44>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	f107 0208 	add.w	r2, r7, #8
 801d0da:	f107 0110 	add.w	r1, r7, #16
 801d0de:	4618      	mov	r0, r3
 801d0e0:	f7ff fdc0 	bl	801cc64 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh>
	}
}
 801d0e4:	bf00      	nop
 801d0e6:	3738      	adds	r7, #56	@ 0x38
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	240286d4 	.word	0x240286d4

0801d0f0 <_Z6mapDLCh>:

/* ---------------------------------------------------------------------------- */
uint32_t mapDLC(uint8_t dataLength) {
 801d0f0:	b480      	push	{r7}
 801d0f2:	b083      	sub	sp, #12
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	71fb      	strb	r3, [r7, #7]
	switch (dataLength) {
 801d0fa:	79fb      	ldrb	r3, [r7, #7]
 801d0fc:	2b40      	cmp	r3, #64	@ 0x40
 801d0fe:	f200 80a5 	bhi.w	801d24c <_Z6mapDLCh+0x15c>
 801d102:	a201      	add	r2, pc, #4	@ (adr r2, 801d108 <_Z6mapDLCh+0x18>)
 801d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d108:	0801d20d 	.word	0x0801d20d
 801d10c:	0801d211 	.word	0x0801d211
 801d110:	0801d215 	.word	0x0801d215
 801d114:	0801d219 	.word	0x0801d219
 801d118:	0801d21d 	.word	0x0801d21d
 801d11c:	0801d221 	.word	0x0801d221
 801d120:	0801d225 	.word	0x0801d225
 801d124:	0801d229 	.word	0x0801d229
 801d128:	0801d22d 	.word	0x0801d22d
 801d12c:	0801d24d 	.word	0x0801d24d
 801d130:	0801d24d 	.word	0x0801d24d
 801d134:	0801d24d 	.word	0x0801d24d
 801d138:	0801d231 	.word	0x0801d231
 801d13c:	0801d24d 	.word	0x0801d24d
 801d140:	0801d24d 	.word	0x0801d24d
 801d144:	0801d24d 	.word	0x0801d24d
 801d148:	0801d235 	.word	0x0801d235
 801d14c:	0801d24d 	.word	0x0801d24d
 801d150:	0801d24d 	.word	0x0801d24d
 801d154:	0801d24d 	.word	0x0801d24d
 801d158:	0801d239 	.word	0x0801d239
 801d15c:	0801d24d 	.word	0x0801d24d
 801d160:	0801d24d 	.word	0x0801d24d
 801d164:	0801d24d 	.word	0x0801d24d
 801d168:	0801d23d 	.word	0x0801d23d
 801d16c:	0801d24d 	.word	0x0801d24d
 801d170:	0801d24d 	.word	0x0801d24d
 801d174:	0801d24d 	.word	0x0801d24d
 801d178:	0801d24d 	.word	0x0801d24d
 801d17c:	0801d24d 	.word	0x0801d24d
 801d180:	0801d24d 	.word	0x0801d24d
 801d184:	0801d24d 	.word	0x0801d24d
 801d188:	0801d241 	.word	0x0801d241
 801d18c:	0801d24d 	.word	0x0801d24d
 801d190:	0801d24d 	.word	0x0801d24d
 801d194:	0801d24d 	.word	0x0801d24d
 801d198:	0801d24d 	.word	0x0801d24d
 801d19c:	0801d24d 	.word	0x0801d24d
 801d1a0:	0801d24d 	.word	0x0801d24d
 801d1a4:	0801d24d 	.word	0x0801d24d
 801d1a8:	0801d24d 	.word	0x0801d24d
 801d1ac:	0801d24d 	.word	0x0801d24d
 801d1b0:	0801d24d 	.word	0x0801d24d
 801d1b4:	0801d24d 	.word	0x0801d24d
 801d1b8:	0801d24d 	.word	0x0801d24d
 801d1bc:	0801d24d 	.word	0x0801d24d
 801d1c0:	0801d24d 	.word	0x0801d24d
 801d1c4:	0801d24d 	.word	0x0801d24d
 801d1c8:	0801d245 	.word	0x0801d245
 801d1cc:	0801d24d 	.word	0x0801d24d
 801d1d0:	0801d24d 	.word	0x0801d24d
 801d1d4:	0801d24d 	.word	0x0801d24d
 801d1d8:	0801d24d 	.word	0x0801d24d
 801d1dc:	0801d24d 	.word	0x0801d24d
 801d1e0:	0801d24d 	.word	0x0801d24d
 801d1e4:	0801d24d 	.word	0x0801d24d
 801d1e8:	0801d24d 	.word	0x0801d24d
 801d1ec:	0801d24d 	.word	0x0801d24d
 801d1f0:	0801d24d 	.word	0x0801d24d
 801d1f4:	0801d24d 	.word	0x0801d24d
 801d1f8:	0801d24d 	.word	0x0801d24d
 801d1fc:	0801d24d 	.word	0x0801d24d
 801d200:	0801d24d 	.word	0x0801d24d
 801d204:	0801d24d 	.word	0x0801d24d
 801d208:	0801d249 	.word	0x0801d249
	case 0:
		return FDCAN_DLC_BYTES_0;
 801d20c:	2300      	movs	r3, #0
 801d20e:	e01f      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 1:
		return FDCAN_DLC_BYTES_1;
 801d210:	2301      	movs	r3, #1
 801d212:	e01d      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 2:
		return FDCAN_DLC_BYTES_2;
 801d214:	2302      	movs	r3, #2
 801d216:	e01b      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 3:
		return FDCAN_DLC_BYTES_3;
 801d218:	2303      	movs	r3, #3
 801d21a:	e019      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 4:
		return FDCAN_DLC_BYTES_4;
 801d21c:	2304      	movs	r3, #4
 801d21e:	e017      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 5:
		return FDCAN_DLC_BYTES_5;
 801d220:	2305      	movs	r3, #5
 801d222:	e015      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 6:
		return FDCAN_DLC_BYTES_6;
 801d224:	2306      	movs	r3, #6
 801d226:	e013      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 7:
		return FDCAN_DLC_BYTES_7;
 801d228:	2307      	movs	r3, #7
 801d22a:	e011      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 8:
		return FDCAN_DLC_BYTES_8;
 801d22c:	2308      	movs	r3, #8
 801d22e:	e00f      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 12:
		return FDCAN_DLC_BYTES_12;
 801d230:	2309      	movs	r3, #9
 801d232:	e00d      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 16:
		return FDCAN_DLC_BYTES_16;
 801d234:	230a      	movs	r3, #10
 801d236:	e00b      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 20:
		return FDCAN_DLC_BYTES_20;
 801d238:	230b      	movs	r3, #11
 801d23a:	e009      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 24:
		return FDCAN_DLC_BYTES_24;
 801d23c:	230c      	movs	r3, #12
 801d23e:	e007      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 32:
		return FDCAN_DLC_BYTES_32;
 801d240:	230d      	movs	r3, #13
 801d242:	e005      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 48:
		return FDCAN_DLC_BYTES_48;
 801d244:	230e      	movs	r3, #14
 801d246:	e003      	b.n	801d250 <_Z6mapDLCh+0x160>
	case 64:
		return FDCAN_DLC_BYTES_64;
 801d248:	230f      	movs	r3, #15
 801d24a:	e001      	b.n	801d250 <_Z6mapDLCh+0x160>
	default:
		return 0xFFFFFFFF; // Invalid DLC value
 801d24c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 801d250:	4618      	mov	r0, r3
 801d252:	370c      	adds	r7, #12
 801d254:	46bd      	mov	sp, r7
 801d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d25a:	4770      	bx	lr

0801d25c <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1Ev>:
	core_utils_Callback() {
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b082      	sub	sp, #8
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	4618      	mov	r0, r3
 801d268:	f7f5 f9e8 	bl	801263c <_ZN8CallbackC1Ev>
 801d26c:	4a09      	ldr	r2, [pc, #36]	@ (801d294 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1Ev+0x38>)
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	601a      	str	r2, [r3, #0]
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	2200      	movs	r2, #0
 801d276:	711a      	strb	r2, [r3, #4]
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	3308      	adds	r3, #8
 801d27c:	2100      	movs	r1, #0
 801d27e:	4618      	mov	r0, r3
 801d280:	f000 f84c 	bl	801d31c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>
		this->registered = 0;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	2200      	movs	r2, #0
 801d288:	711a      	strb	r2, [r3, #4]
	}
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	4618      	mov	r0, r3
 801d28e:	3708      	adds	r7, #8
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}
 801d294:	08025200 	.word	0x08025200

0801d298 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1EPFvS0_E>:
	core_utils_Callback(void (*function)(input_type)) {
 801d298:	b5b0      	push	{r4, r5, r7, lr}
 801d29a:	b088      	sub	sp, #32
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	6078      	str	r0, [r7, #4]
 801d2a0:	6039      	str	r1, [r7, #0]
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7f5 f9c9 	bl	801263c <_ZN8CallbackC1Ev>
 801d2aa:	4a12      	ldr	r2, [pc, #72]	@ (801d2f4 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1EPFvS0_E+0x5c>)
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	601a      	str	r2, [r3, #0]
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	711a      	strb	r2, [r3, #4]
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	3308      	adds	r3, #8
 801d2ba:	2100      	movs	r1, #0
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f000 f82d 	bl	801d31c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(function);
 801d2c2:	f107 0308 	add.w	r3, r7, #8
 801d2c6:	6839      	ldr	r1, [r7, #0]
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	f000 f827 	bl	801d31c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	f103 0408 	add.w	r4, r3, #8
 801d2d4:	f107 0508 	add.w	r5, r7, #8
 801d2d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d2da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d2dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d2e0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2201      	movs	r2, #1
 801d2e8:	711a      	strb	r2, [r3, #4]
	}
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	4618      	mov	r0, r3
 801d2ee:	3720      	adds	r7, #32
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	bdb0      	pop	{r4, r5, r7, pc}
 801d2f4:	08025200 	.word	0x08025200

0801d2f8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tE4callES0_>:
	void call(input_type input) {
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b084      	sub	sp, #16
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	60f8      	str	r0, [r7, #12]
 801d300:	4638      	mov	r0, r7
 801d302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		this->_fp(input);
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	f103 0008 	add.w	r0, r3, #8
 801d30c:	463b      	mov	r3, r7
 801d30e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d310:	f000 f812 	bl	801d338 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEclES0_>
	}
 801d314:	bf00      	nop
 801d316:	3710      	adds	r7, #16
 801d318:	46bd      	mov	sp, r7
 801d31a:	bd80      	pop	{r7, pc}

0801d31c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b082      	sub	sp, #8
 801d320:	af00      	add	r7, sp, #0
 801d322:	6078      	str	r0, [r7, #4]
 801d324:	6039      	str	r1, [r7, #0]
        attach(function);
 801d326:	6839      	ldr	r1, [r7, #0]
 801d328:	6878      	ldr	r0, [r7, #4]
 801d32a:	f000 f815 	bl	801d358 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE6attachEPFvS0_E>
    }
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	4618      	mov	r0, r3
 801d332:	3708      	adds	r7, #8
 801d334:	46bd      	mov	sp, r7
 801d336:	bd80      	pop	{r7, pc}

0801d338 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEclES0_>:
    R operator ()(A1 a) {
 801d338:	b580      	push	{r7, lr}
 801d33a:	b084      	sub	sp, #16
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	60f8      	str	r0, [r7, #12]
 801d340:	4638      	mov	r0, r7
 801d342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        return call(a);
 801d346:	463b      	mov	r3, r7
 801d348:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d34a:	68f8      	ldr	r0, [r7, #12]
 801d34c:	f000 f815 	bl	801d37a <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_>
 801d350:	bf00      	nop
    }
 801d352:	3710      	adds	r7, #16
 801d354:	46bd      	mov	sp, r7
 801d356:	bd80      	pop	{r7, pc}

0801d358 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801d358:	b480      	push	{r7}
 801d35a:	b083      	sub	sp, #12
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	6078      	str	r0, [r7, #4]
 801d360:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	683a      	ldr	r2, [r7, #0]
 801d366:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	2200      	movs	r2, #0
 801d36c:	615a      	str	r2, [r3, #20]
    }
 801d36e:	bf00      	nop
 801d370:	370c      	adds	r7, #12
 801d372:	46bd      	mov	sp, r7
 801d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d378:	4770      	bx	lr

0801d37a <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_>:
    R call(A1 a) {
 801d37a:	b590      	push	{r4, r7, lr}
 801d37c:	b087      	sub	sp, #28
 801d37e:	af02      	add	r7, sp, #8
 801d380:	60f8      	str	r0, [r7, #12]
 801d382:	4638      	mov	r0, r7
 801d384:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        if (_membercaller == 0 && _p.function) {
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	695b      	ldr	r3, [r3, #20]
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d10a      	bne.n	801d3a6 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x2c>
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d006      	beq.n	801d3a6 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x2c>
           return _p.function(a);
 801d398:	68fb      	ldr	r3, [r7, #12]
 801d39a:	681c      	ldr	r4, [r3, #0]
 801d39c:	463b      	mov	r3, r7
 801d39e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d3a2:	47a0      	blx	r4
 801d3a4:	e014      	b.n	801d3d0 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x56>
        } else if (_membercaller && _p.object) {
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	695b      	ldr	r3, [r3, #20]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d00f      	beq.n	801d3ce <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x54>
 801d3ae:	68fb      	ldr	r3, [r7, #12]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d00b      	beq.n	801d3ce <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x54>
           return _membercaller(_p.object, _member, a);
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	695c      	ldr	r4, [r3, #20]
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	6818      	ldr	r0, [r3, #0]
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	1d19      	adds	r1, r3, #4
 801d3c2:	68bb      	ldr	r3, [r7, #8]
 801d3c4:	9300      	str	r3, [sp, #0]
 801d3c6:	463b      	mov	r3, r7
 801d3c8:	cb0c      	ldmia	r3, {r2, r3}
 801d3ca:	47a0      	blx	r4
 801d3cc:	e000      	b.n	801d3d0 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x56>
        return R();
 801d3ce:	bf00      	nop
    }
 801d3d0:	3714      	adds	r7, #20
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd90      	pop	{r4, r7, pc}

0801d3d6 <_ZN23core_comm_SerialMessage6copyToEPS_>:
 *      Author: Dustin Lehmann
 */

#include "core_comm_SerialProtocol.h"

void core_comm_SerialMessage::copyTo(core_comm_SerialMessage *msg) {
 801d3d6:	b480      	push	{r7}
 801d3d8:	b085      	sub	sp, #20
 801d3da:	af00      	add	r7, sp, #0
 801d3dc:	6078      	str	r0, [r7, #4]
 801d3de:	6039      	str	r1, [r7, #0]
	msg->address_1 = this->address_1;
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	785a      	ldrb	r2, [r3, #1]
 801d3e4:	683b      	ldr	r3, [r7, #0]
 801d3e6:	705a      	strb	r2, [r3, #1]
	msg->address_2 = this->address_2;
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	789a      	ldrb	r2, [r3, #2]
 801d3ec:	683b      	ldr	r3, [r7, #0]
 801d3ee:	709a      	strb	r2, [r3, #2]
	msg->address_3 = this->address_3;
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	78da      	ldrb	r2, [r3, #3]
 801d3f4:	683b      	ldr	r3, [r7, #0]
 801d3f6:	70da      	strb	r2, [r3, #3]
	msg->cmd = this->cmd;
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	781a      	ldrb	r2, [r3, #0]
 801d3fc:	683b      	ldr	r3, [r7, #0]
 801d3fe:	701a      	strb	r2, [r3, #0]
	msg->len = this->len;
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	899a      	ldrh	r2, [r3, #12]
 801d404:	683b      	ldr	r3, [r7, #0]
 801d406:	819a      	strh	r2, [r3, #12]

	for (int i = 0; i < len; i++) {
 801d408:	2300      	movs	r3, #0
 801d40a:	60fb      	str	r3, [r7, #12]
 801d40c:	e00c      	b.n	801d428 <_ZN23core_comm_SerialMessage6copyToEPS_+0x52>
		msg->data_ptr[i] = this->data_ptr[i];
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	689a      	ldr	r2, [r3, #8]
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	441a      	add	r2, r3
 801d416:	683b      	ldr	r3, [r7, #0]
 801d418:	6899      	ldr	r1, [r3, #8]
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	440b      	add	r3, r1
 801d41e:	7812      	ldrb	r2, [r2, #0]
 801d420:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	3301      	adds	r3, #1
 801d426:	60fb      	str	r3, [r7, #12]
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	899b      	ldrh	r3, [r3, #12]
 801d42c:	461a      	mov	r2, r3
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	4293      	cmp	r3, r2
 801d432:	dbec      	blt.n	801d40e <_ZN23core_comm_SerialMessage6copyToEPS_+0x38>
	}
}
 801d434:	bf00      	nop
 801d436:	bf00      	nop
 801d438:	3714      	adds	r7, #20
 801d43a:	46bd      	mov	sp, r7
 801d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d440:	4770      	bx	lr

0801d442 <_ZN23core_comm_SerialMessage6encodeEPh>:

uint8_t core_comm_SerialMessage::encode(uint8_t *buffer) {
 801d442:	b480      	push	{r7}
 801d444:	b085      	sub	sp, #20
 801d446:	af00      	add	r7, sp, #0
 801d448:	6078      	str	r0, [r7, #4]
 801d44a:	6039      	str	r1, [r7, #0]
	buffer[0] = CORE_SERIAL_MESSAGE_HEADER;
 801d44c:	683b      	ldr	r3, [r7, #0]
 801d44e:	2255      	movs	r2, #85	@ 0x55
 801d450:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->cmd;
 801d452:	683b      	ldr	r3, [r7, #0]
 801d454:	3301      	adds	r3, #1
 801d456:	687a      	ldr	r2, [r7, #4]
 801d458:	7812      	ldrb	r2, [r2, #0]
 801d45a:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->address_1;
 801d45c:	683b      	ldr	r3, [r7, #0]
 801d45e:	3302      	adds	r3, #2
 801d460:	687a      	ldr	r2, [r7, #4]
 801d462:	7852      	ldrb	r2, [r2, #1]
 801d464:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->address_2;
 801d466:	683b      	ldr	r3, [r7, #0]
 801d468:	3303      	adds	r3, #3
 801d46a:	687a      	ldr	r2, [r7, #4]
 801d46c:	7892      	ldrb	r2, [r2, #2]
 801d46e:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->address_3;
 801d470:	683b      	ldr	r3, [r7, #0]
 801d472:	3304      	adds	r3, #4
 801d474:	687a      	ldr	r2, [r7, #4]
 801d476:	78d2      	ldrb	r2, [r2, #3]
 801d478:	701a      	strb	r2, [r3, #0]
	buffer[5] = this->flag;
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	3305      	adds	r3, #5
 801d47e:	687a      	ldr	r2, [r7, #4]
 801d480:	7912      	ldrb	r2, [r2, #4]
 801d482:	701a      	strb	r2, [r3, #0]
	buffer[6] = this->len >> 8;
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	899b      	ldrh	r3, [r3, #12]
 801d488:	0a1b      	lsrs	r3, r3, #8
 801d48a:	b29a      	uxth	r2, r3
 801d48c:	683b      	ldr	r3, [r7, #0]
 801d48e:	3306      	adds	r3, #6
 801d490:	b2d2      	uxtb	r2, r2
 801d492:	701a      	strb	r2, [r3, #0]
	buffer[7] = this->len & 0xFF;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	899a      	ldrh	r2, [r3, #12]
 801d498:	683b      	ldr	r3, [r7, #0]
 801d49a:	3307      	adds	r3, #7
 801d49c:	b2d2      	uxtb	r2, r2
 801d49e:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < this->len; i++) {
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	73fb      	strb	r3, [r7, #15]
 801d4a4:	e00d      	b.n	801d4c2 <_ZN23core_comm_SerialMessage6encodeEPh+0x80>
		buffer[8 + i] = this->data_ptr[i];
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	689a      	ldr	r2, [r3, #8]
 801d4aa:	7bfb      	ldrb	r3, [r7, #15]
 801d4ac:	441a      	add	r2, r3
 801d4ae:	7bfb      	ldrb	r3, [r7, #15]
 801d4b0:	3308      	adds	r3, #8
 801d4b2:	4619      	mov	r1, r3
 801d4b4:	683b      	ldr	r3, [r7, #0]
 801d4b6:	440b      	add	r3, r1
 801d4b8:	7812      	ldrb	r2, [r2, #0]
 801d4ba:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801d4bc:	7bfb      	ldrb	r3, [r7, #15]
 801d4be:	3301      	adds	r3, #1
 801d4c0:	73fb      	strb	r3, [r7, #15]
 801d4c2:	7bfb      	ldrb	r3, [r7, #15]
 801d4c4:	687a      	ldr	r2, [r7, #4]
 801d4c6:	8992      	ldrh	r2, [r2, #12]
 801d4c8:	4293      	cmp	r3, r2
 801d4ca:	dbec      	blt.n	801d4a6 <_ZN23core_comm_SerialMessage6encodeEPh+0x64>
	}
	buffer[8 + this->len] = 0; // CRC8
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	899b      	ldrh	r3, [r3, #12]
 801d4d0:	3308      	adds	r3, #8
 801d4d2:	461a      	mov	r2, r3
 801d4d4:	683b      	ldr	r3, [r7, #0]
 801d4d6:	4413      	add	r3, r2
 801d4d8:	2200      	movs	r2, #0
 801d4da:	701a      	strb	r2, [r3, #0]
	return CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	899b      	ldrh	r3, [r3, #12]
 801d4e0:	b2db      	uxtb	r3, r3
 801d4e2:	3309      	adds	r3, #9
 801d4e4:	b2db      	uxtb	r3, r3
//	CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
}
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	3714      	adds	r7, #20
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f0:	4770      	bx	lr

0801d4f2 <_ZN23core_comm_SerialMessage5checkEPht>:
	}
	buffer->data_ptr[8 + this->len] = 0; // CRC8
	buffer->len = this->len;
}

uint8_t core_comm_SerialMessage::check(uint8_t *buffer, uint16_t len) {
 801d4f2:	b580      	push	{r7, lr}
 801d4f4:	b086      	sub	sp, #24
 801d4f6:	af00      	add	r7, sp, #0
 801d4f8:	60f8      	str	r0, [r7, #12]
 801d4fa:	60b9      	str	r1, [r7, #8]
 801d4fc:	4613      	mov	r3, r2
 801d4fe:	80fb      	strh	r3, [r7, #6]

	if (len < CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801d500:	88fb      	ldrh	r3, [r7, #6]
 801d502:	2b08      	cmp	r3, #8
 801d504:	d801      	bhi.n	801d50a <_ZN23core_comm_SerialMessage5checkEPht+0x18>
		return CORE_ERROR;
 801d506:	2300      	movs	r3, #0
 801d508:	e019      	b.n	801d53e <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	/* Check for the header */
	if (!(buffer[0] == CORE_SERIAL_MESSAGE_HEADER)) {
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	781b      	ldrb	r3, [r3, #0]
 801d50e:	2b55      	cmp	r3, #85	@ 0x55
 801d510:	d001      	beq.n	801d516 <_ZN23core_comm_SerialMessage5checkEPht+0x24>
		return CORE_ERROR;
 801d512:	2300      	movs	r3, #0
 801d514:	e013      	b.n	801d53e <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
//		return CORE_ERROR;
//	}

	/* Extract the data length */
	// Check if the data length matches with the length of the message
	uint16_t data_len = uint8_to_uint16(buffer[6], buffer[7]);
 801d516:	68bb      	ldr	r3, [r7, #8]
 801d518:	3306      	adds	r3, #6
 801d51a:	781a      	ldrb	r2, [r3, #0]
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	3307      	adds	r3, #7
 801d520:	781b      	ldrb	r3, [r3, #0]
 801d522:	4619      	mov	r1, r3
 801d524:	4610      	mov	r0, r2
 801d526:	f002 ffe5 	bl	80204f4 <_Z15uint8_to_uint16hh>
 801d52a:	4603      	mov	r3, r0
 801d52c:	82fb      	strh	r3, [r7, #22]
	if ((len - data_len) == CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801d52e:	88fa      	ldrh	r2, [r7, #6]
 801d530:	8afb      	ldrh	r3, [r7, #22]
 801d532:	1ad3      	subs	r3, r2, r3
 801d534:	2b09      	cmp	r3, #9
 801d536:	d001      	beq.n	801d53c <_ZN23core_comm_SerialMessage5checkEPht+0x4a>
	} else {
		return CORE_ERROR;
 801d538:	2300      	movs	r3, #0
 801d53a:	e000      	b.n	801d53e <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	return CORE_OK;
 801d53c:	2301      	movs	r3, #1

}
 801d53e:	4618      	mov	r0, r3
 801d540:	3718      	adds	r7, #24
 801d542:	46bd      	mov	sp, r7
 801d544:	bd80      	pop	{r7, pc}

0801d546 <_ZN23core_comm_SerialMessage6decodeEPht>:
uint8_t core_comm_SerialMessage::check(Buffer *buffer) {
	return this->check(buffer->data_ptr, buffer->len);
}

uint8_t core_comm_SerialMessage::decode(uint8_t *buffer, uint16_t len) {
 801d546:	b580      	push	{r7, lr}
 801d548:	b086      	sub	sp, #24
 801d54a:	af00      	add	r7, sp, #0
 801d54c:	60f8      	str	r0, [r7, #12]
 801d54e:	60b9      	str	r1, [r7, #8]
 801d550:	4613      	mov	r3, r2
 801d552:	80fb      	strh	r3, [r7, #6]
	if (this->check(buffer, len) == CORE_ERROR) {
 801d554:	88fb      	ldrh	r3, [r7, #6]
 801d556:	461a      	mov	r2, r3
 801d558:	68b9      	ldr	r1, [r7, #8]
 801d55a:	68f8      	ldr	r0, [r7, #12]
 801d55c:	f7ff ffc9 	bl	801d4f2 <_ZN23core_comm_SerialMessage5checkEPht>
 801d560:	4603      	mov	r3, r0
 801d562:	2b00      	cmp	r3, #0
 801d564:	bf0c      	ite	eq
 801d566:	2301      	moveq	r3, #1
 801d568:	2300      	movne	r3, #0
 801d56a:	b2db      	uxtb	r3, r3
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d001      	beq.n	801d574 <_ZN23core_comm_SerialMessage6decodeEPht+0x2e>
		return CORE_ERROR;
 801d570:	2300      	movs	r3, #0
 801d572:	e037      	b.n	801d5e4 <_ZN23core_comm_SerialMessage6decodeEPht+0x9e>
	}

	/* Extract the command */
	this->cmd = buffer[1];
 801d574:	68bb      	ldr	r3, [r7, #8]
 801d576:	785a      	ldrb	r2, [r3, #1]
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	701a      	strb	r2, [r3, #0]

	/* Extract the address */
	this->address_1 = buffer[2];
 801d57c:	68bb      	ldr	r3, [r7, #8]
 801d57e:	789a      	ldrb	r2, [r3, #2]
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	705a      	strb	r2, [r3, #1]
	this->address_2 = buffer[3];
 801d584:	68bb      	ldr	r3, [r7, #8]
 801d586:	78da      	ldrb	r2, [r3, #3]
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	709a      	strb	r2, [r3, #2]
	this->address_3 = buffer[4];
 801d58c:	68bb      	ldr	r3, [r7, #8]
 801d58e:	791a      	ldrb	r2, [r3, #4]
 801d590:	68fb      	ldr	r3, [r7, #12]
 801d592:	70da      	strb	r2, [r3, #3]

	/* Flag */
	this->flag = buffer[5];
 801d594:	68bb      	ldr	r3, [r7, #8]
 801d596:	795a      	ldrb	r2, [r3, #5]
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	711a      	strb	r2, [r3, #4]

	/* Extract the data length */
	this->len = uint8_to_uint16(buffer[6], buffer[7]);
 801d59c:	68bb      	ldr	r3, [r7, #8]
 801d59e:	3306      	adds	r3, #6
 801d5a0:	781a      	ldrb	r2, [r3, #0]
 801d5a2:	68bb      	ldr	r3, [r7, #8]
 801d5a4:	3307      	adds	r3, #7
 801d5a6:	781b      	ldrb	r3, [r3, #0]
 801d5a8:	4619      	mov	r1, r3
 801d5aa:	4610      	mov	r0, r2
 801d5ac:	f002 ffa2 	bl	80204f4 <_Z15uint8_to_uint16hh>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	461a      	mov	r2, r3
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	819a      	strh	r2, [r3, #12]

	/* Extract the data */
	for (uint8_t i = 0; i < this->len; i++) {
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	75fb      	strb	r3, [r7, #23]
 801d5bc:	e00c      	b.n	801d5d8 <_ZN23core_comm_SerialMessage6decodeEPht+0x92>
		this->data_ptr[i] = buffer[i + 8];
 801d5be:	7dfb      	ldrb	r3, [r7, #23]
 801d5c0:	3308      	adds	r3, #8
 801d5c2:	68ba      	ldr	r2, [r7, #8]
 801d5c4:	441a      	add	r2, r3
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	6899      	ldr	r1, [r3, #8]
 801d5ca:	7dfb      	ldrb	r3, [r7, #23]
 801d5cc:	440b      	add	r3, r1
 801d5ce:	7812      	ldrb	r2, [r2, #0]
 801d5d0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801d5d2:	7dfb      	ldrb	r3, [r7, #23]
 801d5d4:	3301      	adds	r3, #1
 801d5d6:	75fb      	strb	r3, [r7, #23]
 801d5d8:	7dfb      	ldrb	r3, [r7, #23]
 801d5da:	68fa      	ldr	r2, [r7, #12]
 801d5dc:	8992      	ldrh	r2, [r2, #12]
 801d5de:	4293      	cmp	r3, r2
 801d5e0:	dbed      	blt.n	801d5be <_ZN23core_comm_SerialMessage6decodeEPht+0x78>
	}

	return CORE_OK;
 801d5e2:	2301      	movs	r3, #1
}
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	3718      	adds	r7, #24
 801d5e8:	46bd      	mov	sp, r7
 801d5ea:	bd80      	pop	{r7, pc}

0801d5ec <_ZN23core_comm_SerialMessage6decodeEP6Buffer>:

uint8_t core_comm_SerialMessage::decode(Buffer *buffer) {
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b082      	sub	sp, #8
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
 801d5f4:	6039      	str	r1, [r7, #0]
	return this->decode(buffer->data_ptr, buffer->len);
 801d5f6:	683b      	ldr	r3, [r7, #0]
 801d5f8:	6819      	ldr	r1, [r3, #0]
 801d5fa:	683b      	ldr	r3, [r7, #0]
 801d5fc:	889b      	ldrh	r3, [r3, #4]
 801d5fe:	461a      	mov	r2, r3
 801d600:	6878      	ldr	r0, [r7, #4]
 801d602:	f7ff ffa0 	bl	801d546 <_ZN23core_comm_SerialMessage6decodeEPht>
 801d606:	4603      	mov	r3, r0
}
 801d608:	4618      	mov	r0, r3
 801d60a:	3708      	adds	r7, #8
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bd80      	pop	{r7, pc}

0801d610 <_Z41__static_initialization_and_destruction_0ii>:
			socket->rx_function();
		}

	}
	vTaskDelete(socket->getTaskID());
}
 801d610:	b480      	push	{r7}
 801d612:	b083      	sub	sp, #12
 801d614:	af00      	add	r7, sp, #0
 801d616:	6078      	str	r0, [r7, #4]
 801d618:	6039      	str	r1, [r7, #0]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	2b01      	cmp	r3, #1
 801d61e:	d108      	bne.n	801d632 <_Z41__static_initialization_and_destruction_0ii+0x22>
 801d620:	683b      	ldr	r3, [r7, #0]
 801d622:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d626:	4293      	cmp	r3, r2
 801d628:	d103      	bne.n	801d632 <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 801d62a:	4a05      	ldr	r2, [pc, #20]	@ (801d640 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801d62c:	4b05      	ldr	r3, [pc, #20]	@ (801d644 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	6013      	str	r3, [r2, #0]
}
 801d632:	bf00      	nop
 801d634:	370c      	adds	r7, #12
 801d636:	46bd      	mov	sp, r7
 801d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d63c:	4770      	bx	lr
 801d63e:	bf00      	nop
 801d640:	24000038 	.word	0x24000038
 801d644:	24000034 	.word	0x24000034

0801d648 <_GLOBAL__sub_I_std_hardware_uart_config>:
 801d648:	b580      	push	{r7, lr}
 801d64a:	af00      	add	r7, sp, #0
 801d64c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801d650:	2001      	movs	r0, #1
 801d652:	f7ff ffdd 	bl	801d610 <_Z41__static_initialization_and_destruction_0ii>
 801d656:	bd80      	pop	{r7, pc}

0801d658 <_Z3sgnf>:
 */

#include "pid.h"
#include "math.h"

float sgn(float input) {
 801d658:	b480      	push	{r7}
 801d65a:	b083      	sub	sp, #12
 801d65c:	af00      	add	r7, sp, #0
 801d65e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (input >= 0) {
 801d662:	edd7 7a01 	vldr	s15, [r7, #4]
 801d666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d66e:	db02      	blt.n	801d676 <_Z3sgnf+0x1e>
		return 1;
 801d670:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801d674:	e000      	b.n	801d678 <_Z3sgnf+0x20>
	} else {
		return -1;
 801d676:	4b05      	ldr	r3, [pc, #20]	@ (801d68c <_Z3sgnf+0x34>)
	}
}
 801d678:	ee07 3a90 	vmov	s15, r3
 801d67c:	eeb0 0a67 	vmov.f32	s0, s15
 801d680:	370c      	adds	r7, #12
 801d682:	46bd      	mov	sp, r7
 801d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d688:	4770      	bx	lr
 801d68a:	bf00      	nop
 801d68c:	bf800000 	.word	0xbf800000

0801d690 <_ZN20pid_control_config_tC1Ev>:
 */

#ifndef CONTROL_PID_PID_H_
#define CONTROL_PID_PID_H_

typedef struct pid_control_config_t {
 801d690:	b480      	push	{r7}
 801d692:	b083      	sub	sp, #12
 801d694:	af00      	add	r7, sp, #0
 801d696:	6078      	str	r0, [r7, #4]
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	2200      	movs	r2, #0
 801d69c:	741a      	strb	r2, [r3, #16]
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	f04f 0200 	mov.w	r2, #0
 801d6a4:	615a      	str	r2, [r3, #20]
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	2200      	movs	r2, #0
 801d6aa:	761a      	strb	r2, [r3, #24]
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	f04f 0200 	mov.w	r2, #0
 801d6b2:	61da      	str	r2, [r3, #28]
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	f04f 0200 	mov.w	r2, #0
 801d6ba:	621a      	str	r2, [r3, #32]
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	2200      	movs	r2, #0
 801d6c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	f04f 0200 	mov.w	r2, #0
 801d6ca:	629a      	str	r2, [r3, #40]	@ 0x28
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	f04f 0200 	mov.w	r2, #0
 801d6d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	370c      	adds	r7, #12
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e0:	4770      	bx	lr

0801d6e2 <_ZN11PID_ControlC1Ev>:

PID_Control::PID_Control() {
 801d6e2:	b580      	push	{r7, lr}
 801d6e4:	b082      	sub	sp, #8
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	6078      	str	r0, [r7, #4]
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	f7ff ffcf 	bl	801d690 <_ZN20pid_control_config_tC1Ev>

}
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	3708      	adds	r7, #8
 801d6f8:	46bd      	mov	sp, r7
 801d6fa:	bd80      	pop	{r7, pc}

0801d6fc <_ZN11PID_Control4initE20pid_control_config_t>:

void PID_Control::init(pid_control_config_t config) {
 801d6fc:	b084      	sub	sp, #16
 801d6fe:	b5b0      	push	{r4, r5, r7, lr}
 801d700:	b082      	sub	sp, #8
 801d702:	af00      	add	r7, sp, #0
 801d704:	6078      	str	r0, [r7, #4]
 801d706:	f107 001c 	add.w	r0, r7, #28
 801d70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	461d      	mov	r5, r3
 801d712:	f107 041c 	add.w	r4, r7, #28
 801d716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d71a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d71c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d71e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d722:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	this->reset();
 801d726:	6878      	ldr	r0, [r7, #4]
 801d728:	f000 f807 	bl	801d73a <_ZN11PID_Control5resetEv>
}
 801d72c:	bf00      	nop
 801d72e:	3708      	adds	r7, #8
 801d730:	46bd      	mov	sp, r7
 801d732:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d736:	b004      	add	sp, #16
 801d738:	4770      	bx	lr

0801d73a <_ZN11PID_Control5resetEv>:

void PID_Control::reset() {
 801d73a:	b480      	push	{r7}
 801d73c:	b083      	sub	sp, #12
 801d73e:	af00      	add	r7, sp, #0
 801d740:	6078      	str	r0, [r7, #4]
	this->error_integral = 0;
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	f04f 0200 	mov.w	r2, #0
 801d748:	631a      	str	r2, [r3, #48]	@ 0x30
	this->error_last = 0;
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	f04f 0200 	mov.w	r2, #0
 801d750:	639a      	str	r2, [r3, #56]	@ 0x38
	this->last_output = 0;
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	f04f 0200 	mov.w	r2, #0
 801d758:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801d75a:	bf00      	nop
 801d75c:	370c      	adds	r7, #12
 801d75e:	46bd      	mov	sp, r7
 801d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d764:	4770      	bx	lr

0801d766 <_ZN11PID_Control6updateEf>:

float PID_Control::update(float error) {
 801d766:	b580      	push	{r7, lr}
 801d768:	b084      	sub	sp, #16
 801d76a:	af00      	add	r7, sp, #0
 801d76c:	6078      	str	r0, [r7, #4]
 801d76e:	ed87 0a00 	vstr	s0, [r7]
	float output = this->config.Kp * error
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	ed93 7a00 	vldr	s14, [r3]
 801d778:	edd7 7a00 	vldr	s15, [r7]
 801d77c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ this->config.Ki * this->error_integral
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	edd3 6a01 	vldr	s13, [r3, #4]
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801d78c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d790:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d794:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			+ this->config.Kd * 1.0 / this->config.Ts
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	edd3 7a02 	vldr	s15, [r3, #8]
 801d79e:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	edd3 7a03 	vldr	s15, [r3, #12]
 801d7a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d7ac:	ee84 5b07 	vdiv.f64	d5, d4, d7
					* (error - this->error_last);
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 801d7b6:	ed97 7a00 	vldr	s14, [r7]
 801d7ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d7be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d7c2:	ee25 7b07 	vmul.f64	d7, d5, d7
			+ this->config.Kd * 1.0 / this->config.Ts
 801d7c6:	ee36 7b07 	vadd.f64	d7, d6, d7
	float output = this->config.Kp * error
 801d7ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801d7ce:	edc7 7a03 	vstr	s15, [r7, #12]

	this->error_last = error;
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	683a      	ldr	r2, [r7, #0]
 801d7d6:	639a      	str	r2, [r3, #56]	@ 0x38

	this->error_integral = this->error_integral + this->config.Ts * error;
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	edd3 6a03 	vldr	s13, [r3, #12]
 801d7e4:	edd7 7a00 	vldr	s15, [r7]
 801d7e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d7ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if (this->config.enable_integral_limit && abs(this->error_integral) > this->config.error_integral_limit) {
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	7c1b      	ldrb	r3, [r3, #16]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d012      	beq.n	801d824 <_ZN11PID_Control6updateEf+0xbe>
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801d804:	eeb0 0a67 	vmov.f32	s0, s15
 801d808:	f7f8 ff6b 	bl	80166e2 <_ZSt3absf>
 801d80c:	eeb0 7a40 	vmov.f32	s14, s0
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	edd3 7a05 	vldr	s15, [r3, #20]
 801d816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d81e:	dd01      	ble.n	801d824 <_ZN11PID_Control6updateEf+0xbe>
 801d820:	2301      	movs	r3, #1
 801d822:	e000      	b.n	801d826 <_ZN11PID_Control6updateEf+0xc0>
 801d824:	2300      	movs	r3, #0
 801d826:	2b00      	cmp	r3, #0
 801d828:	d010      	beq.n	801d84c <_ZN11PID_Control6updateEf+0xe6>
		this->error_integral = sgn(this->error_integral)
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801d830:	eeb0 0a67 	vmov.f32	s0, s15
 801d834:	f7ff ff10 	bl	801d658 <_Z3sgnf>
 801d838:	eeb0 7a40 	vmov.f32	s14, s0
				* this->config.error_integral_limit;
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	edd3 7a05 	vldr	s15, [r3, #20]
 801d842:	ee67 7a27 	vmul.f32	s15, s14, s15
		this->error_integral = sgn(this->error_integral)
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	}

	if (this->config.enable_output_limit) {
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	7e1b      	ldrb	r3, [r3, #24]
 801d850:	2b00      	cmp	r3, #0
 801d852:	d019      	beq.n	801d888 <_ZN11PID_Control6updateEf+0x122>
		if (output > this->config.output_limit_max) {
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	edd3 7a07 	vldr	s15, [r3, #28]
 801d85a:	ed97 7a03 	vldr	s14, [r7, #12]
 801d85e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d866:	dd02      	ble.n	801d86e <_ZN11PID_Control6updateEf+0x108>
			output = this->config.output_limit_max;
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	69db      	ldr	r3, [r3, #28]
 801d86c:	60fb      	str	r3, [r7, #12]
		}
		if (output < this->config.output_limit_min) {
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	edd3 7a08 	vldr	s15, [r3, #32]
 801d874:	ed97 7a03 	vldr	s14, [r7, #12]
 801d878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d880:	d502      	bpl.n	801d888 <_ZN11PID_Control6updateEf+0x122>
			output = this->config.output_limit_min;
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	6a1b      	ldr	r3, [r3, #32]
 801d886:	60fb      	str	r3, [r7, #12]
		}
	}

	if (this->config.enable_rate_limit){
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d040      	beq.n	801d914 <_ZN11PID_Control6updateEf+0x1ae>
		float d_u = (output-this->last_output)/this->config.Ts;
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801d898:	ed97 7a03 	vldr	s14, [r7, #12]
 801d89c:	ee77 6a67 	vsub.f32	s13, s14, s15
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	ed93 7a03 	vldr	s14, [r3, #12]
 801d8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d8aa:	edc7 7a02 	vstr	s15, [r7, #8]

		if(d_u > this->config.rate_limit_max){
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801d8b4:	ed97 7a02 	vldr	s14, [r7, #8]
 801d8b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8c0:	dd0f      	ble.n	801d8e2 <_ZN11PID_Control6updateEf+0x17c>
			output = this->last_output + this->config.rate_limit_max * this->config.Ts;
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	edd3 7a03 	vldr	s15, [r3, #12]
 801d8d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d8d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8dc:	edc7 7a03 	vstr	s15, [r7, #12]
 801d8e0:	e018      	b.n	801d914 <_ZN11PID_Control6updateEf+0x1ae>
		}
		else if (d_u < this->config.rate_limit_min){
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801d8e8:	ed97 7a02 	vldr	s14, [r7, #8]
 801d8ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8f4:	d50e      	bpl.n	801d914 <_ZN11PID_Control6updateEf+0x1ae>
			output = this->last_output + this->config.rate_limit_min * this->config.Ts;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	edd3 7a03 	vldr	s15, [r3, #12]
 801d908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d90c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d910:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	this->last_output = output;
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	68fa      	ldr	r2, [r7, #12]
 801d918:	635a      	str	r2, [r3, #52]	@ 0x34

	return output;
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	ee07 3a90 	vmov	s15, r3
}
 801d920:	eeb0 0a67 	vmov.f32	s0, s15
 801d924:	3710      	adds	r7, #16
 801d926:	46bd      	mov	sp, r7
 801d928:	bd80      	pop	{r7, pc}
	...

0801d92c <_ZNSt14numeric_limitsIdE7epsilonEv>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR double
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __DBL_EPSILON__; }
 801d92c:	b480      	push	{r7}
 801d92e:	af00      	add	r7, sp, #0
 801d930:	f04f 0200 	mov.w	r2, #0
 801d934:	4b04      	ldr	r3, [pc, #16]	@ (801d948 <_ZNSt14numeric_limitsIdE7epsilonEv+0x1c>)
 801d936:	ec43 2b17 	vmov	d7, r2, r3
 801d93a:	eeb0 0b47 	vmov.f64	d0, d7
 801d93e:	46bd      	mov	sp, r7
 801d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d944:	4770      	bx	lr
 801d946:	bf00      	nop
 801d948:	3cb00000 	.word	0x3cb00000

0801d94c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>:

      static _GLIBCXX_CONSTEXPR double
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_val(); }

      static _GLIBCXX_CONSTEXPR double
      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nan(""); }
 801d94c:	b480      	push	{r7}
 801d94e:	af00      	add	r7, sp, #0
 801d950:	f04f 0200 	mov.w	r2, #0
 801d954:	4b04      	ldr	r3, [pc, #16]	@ (801d968 <_ZNSt14numeric_limitsIdE9quiet_NaNEv+0x1c>)
 801d956:	ec43 2b17 	vmov	d7, r2, r3
 801d95a:	eeb0 0b47 	vmov.f64	d0, d7
 801d95e:	46bd      	mov	sp, r7
 801d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d964:	4770      	bx	lr
 801d966:	bf00      	nop
 801d968:	7ff80000 	.word	0x7ff80000

0801d96c <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 801d96c:	b480      	push	{r7}
 801d96e:	b083      	sub	sp, #12
 801d970:	af00      	add	r7, sp, #0
 801d972:	ed87 0b00 	vstr	d0, [r7]
 801d976:	ed97 6b00 	vldr	d6, [r7]
 801d97a:	ed97 7b00 	vldr	d7, [r7]
 801d97e:	eeb4 6b47 	vcmp.f64	d6, d7
 801d982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d986:	bf6c      	ite	vs
 801d988:	2301      	movvs	r3, #1
 801d98a:	2300      	movvc	r3, #0
 801d98c:	b2db      	uxtb	r3, r3
 801d98e:	2b00      	cmp	r3, #0
 801d990:	bf14      	ite	ne
 801d992:	2301      	movne	r3, #1
 801d994:	2300      	moveq	r3, #0
 801d996:	b2db      	uxtb	r3, r3
 801d998:	4618      	mov	r0, r3
 801d99a:	370c      	adds	r7, #12
 801d99c:	46bd      	mov	sp, r7
 801d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9a2:	4770      	bx	lr

0801d9a4 <_ZN14BasicVQFParamsC1Ev>:
#define EPS std::numeric_limits<vqf_real_t>::epsilon()
#define NaN std::numeric_limits<vqf_real_t>::quiet_NaN()

inline vqf_real_t square(vqf_real_t x) { return x*x; }

BasicVQFParams::BasicVQFParams()
 801d9a4:	b480      	push	{r7}
 801d9a6:	b083      	sub	sp, #12
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
    : tauAcc(3.0)
 801d9ac:	6879      	ldr	r1, [r7, #4]
 801d9ae:	f04f 0200 	mov.w	r2, #0
 801d9b2:	4b08      	ldr	r3, [pc, #32]	@ (801d9d4 <_ZN14BasicVQFParamsC1Ev+0x30>)
 801d9b4:	e9c1 2300 	strd	r2, r3, [r1]
    , tauMag(9.0)
 801d9b8:	6879      	ldr	r1, [r7, #4]
 801d9ba:	f04f 0200 	mov.w	r2, #0
 801d9be:	4b06      	ldr	r3, [pc, #24]	@ (801d9d8 <_ZN14BasicVQFParamsC1Ev+0x34>)
 801d9c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
{

}
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	370c      	adds	r7, #12
 801d9ca:	46bd      	mov	sp, r7
 801d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d0:	4770      	bx	lr
 801d9d2:	bf00      	nop
 801d9d4:	40080000 	.word	0x40080000
 801d9d8:	40220000 	.word	0x40220000

0801d9dc <_ZN8BasicVQFC1Eddd>:

BasicVQF::BasicVQF(vqf_real_t gyrTs, vqf_real_t accTs, vqf_real_t magTs)
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b088      	sub	sp, #32
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	61f8      	str	r0, [r7, #28]
 801d9e4:	ed87 0b04 	vstr	d0, [r7, #16]
 801d9e8:	ed87 1b02 	vstr	d1, [r7, #8]
 801d9ec:	ed87 2b00 	vstr	d2, [r7]
 801d9f0:	69fb      	ldr	r3, [r7, #28]
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f7ff ffd6 	bl	801d9a4 <_ZN14BasicVQFParamsC1Ev>
{
    coeffs.gyrTs = gyrTs;
 801d9f8:	69f9      	ldr	r1, [r7, #28]
 801d9fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d9fe:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    coeffs.accTs = accTs > 0 ? accTs : gyrTs;
 801da02:	ed97 7b02 	vldr	d7, [r7, #8]
 801da06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801da0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da0e:	dd02      	ble.n	801da16 <_ZN8BasicVQFC1Eddd+0x3a>
 801da10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801da14:	e001      	b.n	801da1a <_ZN8BasicVQFC1Eddd+0x3e>
 801da16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801da1a:	69f9      	ldr	r1, [r7, #28]
 801da1c:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    coeffs.magTs = magTs > 0 ? magTs : gyrTs;
 801da20:	ed97 7b00 	vldr	d7, [r7]
 801da24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801da28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da2c:	dd02      	ble.n	801da34 <_ZN8BasicVQFC1Eddd+0x58>
 801da2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801da32:	e001      	b.n	801da38 <_ZN8BasicVQFC1Eddd+0x5c>
 801da34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801da38:	69f9      	ldr	r1, [r7, #28]
 801da3a:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

    setup();
 801da3e:	69f8      	ldr	r0, [r7, #28]
 801da40:	f000 ff9e 	bl	801e980 <_ZN8BasicVQF5setupEv>
}
 801da44:	69fb      	ldr	r3, [r7, #28]
 801da46:	4618      	mov	r0, r3
 801da48:	3720      	adds	r7, #32
 801da4a:	46bd      	mov	sp, r7
 801da4c:	bd80      	pop	{r7, pc}

0801da4e <_ZN8BasicVQF9updateGyrEPKd>:

    setup();
}

void BasicVQF::updateGyr(const vqf_real_t gyr[3])
{
 801da4e:	b580      	push	{r7, lr}
 801da50:	b092      	sub	sp, #72	@ 0x48
 801da52:	af00      	add	r7, sp, #0
 801da54:	6078      	str	r0, [r7, #4]
 801da56:	6039      	str	r1, [r7, #0]
    // gyroscope prediction step
    vqf_real_t gyrNorm = norm(gyr, 3);
 801da58:	2103      	movs	r1, #3
 801da5a:	6838      	ldr	r0, [r7, #0]
 801da5c:	f000 fc46 	bl	801e2ec <_ZN8BasicVQF4normEPKdj>
 801da60:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    vqf_real_t angle = gyrNorm * coeffs.gyrTs;
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	ed93 7b2a 	vldr	d7, [r3, #168]	@ 0xa8
 801da6a:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801da6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801da72:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    if (gyrNorm > EPS) {
 801da76:	f7ff ff59 	bl	801d92c <_ZNSt14numeric_limitsIdE7epsilonEv>
 801da7a:	eeb0 6b40 	vmov.f64	d6, d0
 801da7e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 801da82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801da86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da8a:	bfcc      	ite	gt
 801da8c:	2301      	movgt	r3, #1
 801da8e:	2300      	movle	r3, #0
 801da90:	b2db      	uxtb	r3, r3
 801da92:	2b00      	cmp	r3, #0
 801da94:	d04f      	beq.n	801db36 <_ZN8BasicVQF9updateGyrEPKd+0xe8>
        vqf_real_t c = cos(angle/2);
 801da96:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 801da9a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 801da9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801daa2:	eeb0 0b46 	vmov.f64	d0, d6
 801daa6:	f003 f8a7 	bl	8020bf8 <cos>
 801daaa:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
        vqf_real_t s = sin(angle/2)/gyrNorm;
 801daae:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 801dab2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 801dab6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801daba:	eeb0 0b46 	vmov.f64	d0, d6
 801dabe:	f003 f8ef 	bl	8020ca0 <sin>
 801dac2:	eeb0 5b40 	vmov.f64	d5, d0
 801dac6:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801daca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801dace:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
        vqf_real_t gyrStepQuat[4] = {c, s*gyr[0], s*gyr[1], s*gyr[2]};
 801dad2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801dad6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 801dada:	683b      	ldr	r3, [r7, #0]
 801dadc:	ed93 6b00 	vldr	d6, [r3]
 801dae0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801dae4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dae8:	ed87 7b04 	vstr	d7, [r7, #16]
 801daec:	683b      	ldr	r3, [r7, #0]
 801daee:	3308      	adds	r3, #8
 801daf0:	ed93 6b00 	vldr	d6, [r3]
 801daf4:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801daf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dafc:	ed87 7b06 	vstr	d7, [r7, #24]
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	3310      	adds	r3, #16
 801db04:	ed93 6b00 	vldr	d6, [r3]
 801db08:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801db0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801db10:	ed87 7b08 	vstr	d7, [r7, #32]
        quatMultiply(state.gyrQuat, gyrStepQuat, state.gyrQuat);
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	f103 0010 	add.w	r0, r3, #16
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	f103 0210 	add.w	r2, r3, #16
 801db20:	f107 0308 	add.w	r3, r7, #8
 801db24:	4619      	mov	r1, r3
 801db26:	f000 f98d 	bl	801de44 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
        normalize(state.gyrQuat, 4);
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	3310      	adds	r3, #16
 801db2e:	2104      	movs	r1, #4
 801db30:	4618      	mov	r0, r3
 801db32:	f000 fc0f 	bl	801e354 <_ZN8BasicVQF9normalizeEPdj>
    }
}
 801db36:	bf00      	nop
 801db38:	3748      	adds	r7, #72	@ 0x48
 801db3a:	46bd      	mov	sp, r7
 801db3c:	bd80      	pop	{r7, pc}
	...

0801db40 <_ZN8BasicVQF9updateAccEPKd>:

void BasicVQF::updateAcc(const vqf_real_t acc[3])
{
 801db40:	b590      	push	{r4, r7, lr}
 801db42:	b095      	sub	sp, #84	@ 0x54
 801db44:	af02      	add	r7, sp, #8
 801db46:	6078      	str	r0, [r7, #4]
 801db48:	6039      	str	r1, [r7, #0]
    // ignore [0 0 0] samples
    if (acc[0] == vqf_real_t(0.0) && acc[1] == vqf_real_t(0.0) && acc[2] == vqf_real_t(0.0)) {
 801db4a:	683b      	ldr	r3, [r7, #0]
 801db4c:	ed93 7b00 	vldr	d7, [r3]
 801db50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db58:	d112      	bne.n	801db80 <_ZN8BasicVQF9updateAccEPKd+0x40>
 801db5a:	683b      	ldr	r3, [r7, #0]
 801db5c:	3308      	adds	r3, #8
 801db5e:	ed93 7b00 	vldr	d7, [r3]
 801db62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db6a:	d109      	bne.n	801db80 <_ZN8BasicVQF9updateAccEPKd+0x40>
 801db6c:	683b      	ldr	r3, [r7, #0]
 801db6e:	3310      	adds	r3, #16
 801db70:	ed93 7b00 	vldr	d7, [r3]
 801db74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db7c:	f000 809a 	beq.w	801dcb4 <_ZN8BasicVQF9updateAccEPKd+0x174>
    }

    vqf_real_t accEarth[3];

    // filter acc in inertial frame
    quatRotate(state.gyrQuat, acc, accEarth);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	3310      	adds	r3, #16
 801db84:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801db88:	6839      	ldr	r1, [r7, #0]
 801db8a:	4618      	mov	r0, r3
 801db8c:	f000 fa66 	bl	801e05c <_ZN8BasicVQF10quatRotateEPKdS1_Pd>
    filterVec(accEarth, 3, params.tauAcc, coeffs.accTs, coeffs.accLpB, coeffs.accLpA, state.accLpState, state.lastAccLp);
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	ed93 7b00 	vldr	d7, [r3]
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	f103 04d8 	add.w	r4, r3, #216	@ 0xd8
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	3370      	adds	r3, #112	@ 0x70
 801dbac:	687a      	ldr	r2, [r7, #4]
 801dbae:	3258      	adds	r2, #88	@ 0x58
 801dbb0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801dbb4:	9201      	str	r2, [sp, #4]
 801dbb6:	9300      	str	r3, [sp, #0]
 801dbb8:	4623      	mov	r3, r4
 801dbba:	460a      	mov	r2, r1
 801dbbc:	eeb0 1b46 	vmov.f64	d1, d6
 801dbc0:	eeb0 0b47 	vmov.f64	d0, d7
 801dbc4:	2103      	movs	r1, #3
 801dbc6:	f000 fdfd 	bl	801e7c4 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_>

    // transform to 6D earth frame and normalize
    quatRotate(state.accQuat, state.lastAccLp, accEarth);
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	3358      	adds	r3, #88	@ 0x58
 801dbd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801dbd8:	4619      	mov	r1, r3
 801dbda:	f000 fa3f 	bl	801e05c <_ZN8BasicVQF10quatRotateEPKdS1_Pd>
    normalize(accEarth, 3);
 801dbde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dbe2:	2103      	movs	r1, #3
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	f000 fbb5 	bl	801e354 <_ZN8BasicVQF9normalizeEPdj>

    // inclination correction
    vqf_real_t accCorrQuat[4];
    vqf_real_t q_w = sqrt((accEarth[2]+1)/2);
 801dbea:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 801dbee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dbf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801dbf6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 801dbfa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801dbfe:	eeb0 0b46 	vmov.f64	d0, d6
 801dc02:	f002 ffd9 	bl	8020bb8 <sqrt>
 801dc06:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    if (q_w > 1e-6) {
 801dc0a:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 801dc0e:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 801dcc0 <_ZN8BasicVQF9updateAccEPKd+0x180>
 801dc12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc1a:	dd22      	ble.n	801dc62 <_ZN8BasicVQF9updateAccEPKd+0x122>
        accCorrQuat[0] = q_w;
 801dc1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801dc20:	e9c7 2302 	strd	r2, r3, [r7, #8]
        accCorrQuat[1] = 0.5*accEarth[1]/q_w;
 801dc24:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 801dc28:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 801dc2c:	ee27 5b06 	vmul.f64	d5, d7, d6
 801dc30:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801dc34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801dc38:	ed87 7b04 	vstr	d7, [r7, #16]
        accCorrQuat[2] = -0.5*accEarth[0]/q_w;
 801dc3c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801dc40:	eebe 6b00 	vmov.f64	d6, #224	@ 0xbf000000 -0.5
 801dc44:	ee27 5b06 	vmul.f64	d5, d7, d6
 801dc48:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801dc4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801dc50:	ed87 7b06 	vstr	d7, [r7, #24]
        accCorrQuat[3] = 0;
 801dc54:	f04f 0200 	mov.w	r2, #0
 801dc58:	f04f 0300 	mov.w	r3, #0
 801dc5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801dc60:	e016      	b.n	801dc90 <_ZN8BasicVQF9updateAccEPKd+0x150>
    } else {
        // to avoid numeric issues when acc is close to [0 0 -1], i.e. the correction step is close (<= 0.00011°) to 180°:
        accCorrQuat[0] = 0;
 801dc62:	f04f 0200 	mov.w	r2, #0
 801dc66:	f04f 0300 	mov.w	r3, #0
 801dc6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        accCorrQuat[1] = 1;
 801dc6e:	f04f 0200 	mov.w	r2, #0
 801dc72:	4b15      	ldr	r3, [pc, #84]	@ (801dcc8 <_ZN8BasicVQF9updateAccEPKd+0x188>)
 801dc74:	e9c7 2304 	strd	r2, r3, [r7, #16]
        accCorrQuat[2] = 0;
 801dc78:	f04f 0200 	mov.w	r2, #0
 801dc7c:	f04f 0300 	mov.w	r3, #0
 801dc80:	e9c7 2306 	strd	r2, r3, [r7, #24]
        accCorrQuat[3] = 0;
 801dc84:	f04f 0200 	mov.w	r2, #0
 801dc88:	f04f 0300 	mov.w	r3, #0
 801dc8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    quatMultiply(accCorrQuat, state.accQuat, state.accQuat);
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801dc9c:	f107 0308 	add.w	r3, r7, #8
 801dca0:	4618      	mov	r0, r3
 801dca2:	f000 f8cf 	bl	801de44 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
    normalize(state.accQuat, 4);
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	3330      	adds	r3, #48	@ 0x30
 801dcaa:	2104      	movs	r1, #4
 801dcac:	4618      	mov	r0, r3
 801dcae:	f000 fb51 	bl	801e354 <_ZN8BasicVQF9normalizeEPdj>
 801dcb2:	e000      	b.n	801dcb6 <_ZN8BasicVQF9updateAccEPKd+0x176>
        return;
 801dcb4:	bf00      	nop
}
 801dcb6:	374c      	adds	r7, #76	@ 0x4c
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd90      	pop	{r4, r7, pc}
 801dcbc:	f3af 8000 	nop.w
 801dcc0:	a0b5ed8d 	.word	0xa0b5ed8d
 801dcc4:	3eb0c6f7 	.word	0x3eb0c6f7
 801dcc8:	3ff00000 	.word	0x3ff00000

0801dccc <_ZN8BasicVQF6updateEPKdS1_>:
        state.delta += vqf_real_t(2*M_PI);
    }
}

void BasicVQF::update(const vqf_real_t gyr[3], const vqf_real_t acc[3])
{
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b084      	sub	sp, #16
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	60f8      	str	r0, [r7, #12]
 801dcd4:	60b9      	str	r1, [r7, #8]
 801dcd6:	607a      	str	r2, [r7, #4]
    updateGyr(gyr);
 801dcd8:	68b9      	ldr	r1, [r7, #8]
 801dcda:	68f8      	ldr	r0, [r7, #12]
 801dcdc:	f7ff feb7 	bl	801da4e <_ZN8BasicVQF9updateGyrEPKd>
    updateAcc(acc);
 801dce0:	6879      	ldr	r1, [r7, #4]
 801dce2:	68f8      	ldr	r0, [r7, #12]
 801dce4:	f7ff ff2c 	bl	801db40 <_ZN8BasicVQF9updateAccEPKd>
}
 801dce8:	bf00      	nop
 801dcea:	3710      	adds	r7, #16
 801dcec:	46bd      	mov	sp, r7
 801dcee:	bd80      	pop	{r7, pc}

0801dcf0 <_ZNK8BasicVQF9getQuat6DEPd>:
{
    std::copy(state.gyrQuat, state.gyrQuat+4, out);
}

void BasicVQF::getQuat6D(vqf_real_t out[4]) const
{
 801dcf0:	b580      	push	{r7, lr}
 801dcf2:	b082      	sub	sp, #8
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
 801dcf8:	6039      	str	r1, [r7, #0]
    quatMultiply(state.accQuat, state.gyrQuat, out);
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	3310      	adds	r3, #16
 801dd04:	683a      	ldr	r2, [r7, #0]
 801dd06:	4619      	mov	r1, r3
 801dd08:	f000 f89c 	bl	801de44 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
}
 801dd0c:	bf00      	nop
 801dd0e:	3708      	adds	r7, #8
 801dd10:	46bd      	mov	sp, r7
 801dd12:	bd80      	pop	{r7, pc}

0801dd14 <_ZN8BasicVQF9setTauAccEd>:
{
    return state.delta;
}

void BasicVQF::setTauAcc(vqf_real_t tauAcc)
{
 801dd14:	b580      	push	{r7, lr}
 801dd16:	b094      	sub	sp, #80	@ 0x50
 801dd18:	af04      	add	r7, sp, #16
 801dd1a:	60f8      	str	r0, [r7, #12]
 801dd1c:	ed87 0b00 	vstr	d0, [r7]
    if (params.tauAcc == tauAcc) {
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	ed93 7b00 	vldr	d7, [r3]
 801dd26:	ed97 6b00 	vldr	d6, [r7]
 801dd2a:	eeb4 6b47 	vcmp.f64	d6, d7
 801dd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd32:	d041      	beq.n	801ddb8 <_ZN8BasicVQF9setTauAccEd+0xa4>
        return;
    }
    params.tauAcc = tauAcc;
 801dd34:	68f9      	ldr	r1, [r7, #12]
 801dd36:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dd3a:	e9c1 2300 	strd	r2, r3, [r1]
    double newB[3];
    double newA[3];

    filterCoeffs(params.tauAcc, coeffs.accTs, newB, newA);
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	ed93 7b00 	vldr	d7, [r3]
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 801dd4a:	f107 0210 	add.w	r2, r7, #16
 801dd4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dd52:	4611      	mov	r1, r2
 801dd54:	4618      	mov	r0, r3
 801dd56:	eeb0 1b46 	vmov.f64	d1, d6
 801dd5a:	eeb0 0b47 	vmov.f64	d0, d7
 801dd5e:	f000 fb93 	bl	801e488 <_ZN8BasicVQF12filterCoeffsEddPdS0_>
    filterAdaptStateForCoeffChange(state.lastAccLp, 3, coeffs.accLpB, coeffs.accLpA, newB, newA, state.accLpState);
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	3370      	adds	r3, #112	@ 0x70
 801dd78:	9302      	str	r3, [sp, #8]
 801dd7a:	f107 0310 	add.w	r3, r7, #16
 801dd7e:	9301      	str	r3, [sp, #4]
 801dd80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dd84:	9300      	str	r3, [sp, #0]
 801dd86:	460b      	mov	r3, r1
 801dd88:	2103      	movs	r1, #3
 801dd8a:	f000 fc5f 	bl	801e64c <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_>

    std::copy(newB, newB+3, coeffs.accLpB);
 801dd8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dd92:	3318      	adds	r3, #24
 801dd94:	68fa      	ldr	r2, [r7, #12]
 801dd96:	32c0      	adds	r2, #192	@ 0xc0
 801dd98:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801dd9c:	4619      	mov	r1, r3
 801dd9e:	f000 fe55 	bl	801ea4c <_ZSt4copyIPdS0_ET0_T_S2_S1_>
    std::copy(newA, newA+2, coeffs.accLpA);
 801dda2:	f107 0310 	add.w	r3, r7, #16
 801dda6:	3310      	adds	r3, #16
 801dda8:	68fa      	ldr	r2, [r7, #12]
 801ddaa:	32d8      	adds	r2, #216	@ 0xd8
 801ddac:	f107 0010 	add.w	r0, r7, #16
 801ddb0:	4619      	mov	r1, r3
 801ddb2:	f000 fe4b 	bl	801ea4c <_ZSt4copyIPdS0_ET0_T_S2_S1_>
 801ddb6:	e000      	b.n	801ddba <_ZN8BasicVQF9setTauAccEd+0xa6>
        return;
 801ddb8:	bf00      	nop
}
 801ddba:	3740      	adds	r7, #64	@ 0x40
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	bd80      	pop	{r7, pc}

0801ddc0 <_ZN8BasicVQF10resetStateEv>:
{
    this->state = state;
}

void BasicVQF::resetState()
{
 801ddc0:	b5b0      	push	{r4, r5, r7, lr}
 801ddc2:	b086      	sub	sp, #24
 801ddc4:	af00      	add	r7, sp, #0
 801ddc6:	6078      	str	r0, [r7, #4]
    quatSetToIdentity(state.gyrQuat);
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	3310      	adds	r3, #16
 801ddcc:	4618      	mov	r0, r3
 801ddce:	f000 f917 	bl	801e000 <_ZN8BasicVQF17quatSetToIdentityEPd>
    quatSetToIdentity(state.accQuat);
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	3330      	adds	r3, #48	@ 0x30
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f000 f912 	bl	801e000 <_ZN8BasicVQF17quatSetToIdentityEPd>
    state.delta = 0.0;
 801dddc:	6879      	ldr	r1, [r7, #4]
 801ddde:	f04f 0200 	mov.w	r2, #0
 801dde2:	f04f 0300 	mov.w	r3, #0
 801dde6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

    std::fill(state.lastAccLp, state.lastAccLp+3, 0);
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	3358      	adds	r3, #88	@ 0x58
 801ddf4:	3318      	adds	r3, #24
 801ddf6:	2200      	movs	r2, #0
 801ddf8:	60fa      	str	r2, [r7, #12]
 801ddfa:	f107 020c 	add.w	r2, r7, #12
 801ddfe:	4619      	mov	r1, r3
 801de00:	f000 fe3c 	bl	801ea7c <_ZSt4fillIPdiEvT_S1_RKT0_>
    std::fill(state.accLpState, state.accLpState + 3*2, NaN);
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	3370      	adds	r3, #112	@ 0x70
 801de0e:	f103 0530 	add.w	r5, r3, #48	@ 0x30
 801de12:	f7ff fd9b 	bl	801d94c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 801de16:	eeb0 7b40 	vmov.f64	d7, d0
 801de1a:	ed87 7b04 	vstr	d7, [r7, #16]
 801de1e:	f107 0310 	add.w	r3, r7, #16
 801de22:	461a      	mov	r2, r3
 801de24:	4629      	mov	r1, r5
 801de26:	4620      	mov	r0, r4
 801de28:	f000 fe37 	bl	801ea9a <_ZSt4fillIPddEvT_S1_RKT0_>

    state.kMagInit = 1.0;
 801de2c:	6879      	ldr	r1, [r7, #4]
 801de2e:	f04f 0200 	mov.w	r2, #0
 801de32:	4b03      	ldr	r3, [pc, #12]	@ (801de40 <_ZN8BasicVQF10resetStateEv+0x80>)
 801de34:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
}
 801de38:	bf00      	nop
 801de3a:	3718      	adds	r7, #24
 801de3c:	46bd      	mov	sp, r7
 801de3e:	bdb0      	pop	{r4, r5, r7, pc}
 801de40:	3ff00000 	.word	0x3ff00000

0801de44 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>:

void BasicVQF::quatMultiply(const vqf_real_t q1[4], const vqf_real_t q2[4], vqf_real_t out[4])
{
 801de44:	b480      	push	{r7}
 801de46:	b08d      	sub	sp, #52	@ 0x34
 801de48:	af00      	add	r7, sp, #0
 801de4a:	60f8      	str	r0, [r7, #12]
 801de4c:	60b9      	str	r1, [r7, #8]
 801de4e:	607a      	str	r2, [r7, #4]
    vqf_real_t w = q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3];
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	ed93 6b00 	vldr	d6, [r3]
 801de56:	68bb      	ldr	r3, [r7, #8]
 801de58:	ed93 7b00 	vldr	d7, [r3]
 801de5c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	3308      	adds	r3, #8
 801de64:	ed93 5b00 	vldr	d5, [r3]
 801de68:	68bb      	ldr	r3, [r7, #8]
 801de6a:	3308      	adds	r3, #8
 801de6c:	ed93 7b00 	vldr	d7, [r3]
 801de70:	ee25 7b07 	vmul.f64	d7, d5, d7
 801de74:	ee36 6b47 	vsub.f64	d6, d6, d7
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	3310      	adds	r3, #16
 801de7c:	ed93 5b00 	vldr	d5, [r3]
 801de80:	68bb      	ldr	r3, [r7, #8]
 801de82:	3310      	adds	r3, #16
 801de84:	ed93 7b00 	vldr	d7, [r3]
 801de88:	ee25 7b07 	vmul.f64	d7, d5, d7
 801de8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	3318      	adds	r3, #24
 801de94:	ed93 5b00 	vldr	d5, [r3]
 801de98:	68bb      	ldr	r3, [r7, #8]
 801de9a:	3318      	adds	r3, #24
 801de9c:	ed93 7b00 	vldr	d7, [r3]
 801dea0:	ee25 7b07 	vmul.f64	d7, d5, d7
 801dea4:	ee36 7b47 	vsub.f64	d7, d6, d7
 801dea8:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vqf_real_t x = q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2];
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	ed93 6b00 	vldr	d6, [r3]
 801deb2:	68bb      	ldr	r3, [r7, #8]
 801deb4:	3308      	adds	r3, #8
 801deb6:	ed93 7b00 	vldr	d7, [r3]
 801deba:	ee26 6b07 	vmul.f64	d6, d6, d7
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	3308      	adds	r3, #8
 801dec2:	ed93 5b00 	vldr	d5, [r3]
 801dec6:	68bb      	ldr	r3, [r7, #8]
 801dec8:	ed93 7b00 	vldr	d7, [r3]
 801decc:	ee25 7b07 	vmul.f64	d7, d5, d7
 801ded0:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	3310      	adds	r3, #16
 801ded8:	ed93 5b00 	vldr	d5, [r3]
 801dedc:	68bb      	ldr	r3, [r7, #8]
 801dede:	3318      	adds	r3, #24
 801dee0:	ed93 7b00 	vldr	d7, [r3]
 801dee4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801dee8:	ee36 6b07 	vadd.f64	d6, d6, d7
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	3318      	adds	r3, #24
 801def0:	ed93 5b00 	vldr	d5, [r3]
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	3310      	adds	r3, #16
 801def8:	ed93 7b00 	vldr	d7, [r3]
 801defc:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df00:	ee36 7b47 	vsub.f64	d7, d6, d7
 801df04:	ed87 7b08 	vstr	d7, [r7, #32]
    vqf_real_t y = q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1];
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	ed93 6b00 	vldr	d6, [r3]
 801df0e:	68bb      	ldr	r3, [r7, #8]
 801df10:	3310      	adds	r3, #16
 801df12:	ed93 7b00 	vldr	d7, [r3]
 801df16:	ee26 6b07 	vmul.f64	d6, d6, d7
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	3308      	adds	r3, #8
 801df1e:	ed93 5b00 	vldr	d5, [r3]
 801df22:	68bb      	ldr	r3, [r7, #8]
 801df24:	3318      	adds	r3, #24
 801df26:	ed93 7b00 	vldr	d7, [r3]
 801df2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	3310      	adds	r3, #16
 801df36:	ed93 5b00 	vldr	d5, [r3]
 801df3a:	68bb      	ldr	r3, [r7, #8]
 801df3c:	ed93 7b00 	vldr	d7, [r3]
 801df40:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df44:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	3318      	adds	r3, #24
 801df4c:	ed93 5b00 	vldr	d5, [r3]
 801df50:	68bb      	ldr	r3, [r7, #8]
 801df52:	3308      	adds	r3, #8
 801df54:	ed93 7b00 	vldr	d7, [r3]
 801df58:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 801df60:	ed87 7b06 	vstr	d7, [r7, #24]
    vqf_real_t z = q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0];
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	ed93 6b00 	vldr	d6, [r3]
 801df6a:	68bb      	ldr	r3, [r7, #8]
 801df6c:	3318      	adds	r3, #24
 801df6e:	ed93 7b00 	vldr	d7, [r3]
 801df72:	ee26 6b07 	vmul.f64	d6, d6, d7
 801df76:	68fb      	ldr	r3, [r7, #12]
 801df78:	3308      	adds	r3, #8
 801df7a:	ed93 5b00 	vldr	d5, [r3]
 801df7e:	68bb      	ldr	r3, [r7, #8]
 801df80:	3310      	adds	r3, #16
 801df82:	ed93 7b00 	vldr	d7, [r3]
 801df86:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	3310      	adds	r3, #16
 801df92:	ed93 5b00 	vldr	d5, [r3]
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	3308      	adds	r3, #8
 801df9a:	ed93 7b00 	vldr	d7, [r3]
 801df9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 801dfa2:	ee36 6b47 	vsub.f64	d6, d6, d7
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	3318      	adds	r3, #24
 801dfaa:	ed93 5b00 	vldr	d5, [r3]
 801dfae:	68bb      	ldr	r3, [r7, #8]
 801dfb0:	ed93 7b00 	vldr	d7, [r3]
 801dfb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801dfb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 801dfbc:	ed87 7b04 	vstr	d7, [r7, #16]
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
 801dfc0:	6879      	ldr	r1, [r7, #4]
 801dfc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801dfc6:	e9c1 2300 	strd	r2, r3, [r1]
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	f103 0108 	add.w	r1, r3, #8
 801dfd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801dfd4:	e9c1 2300 	strd	r2, r3, [r1]
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	f103 0110 	add.w	r1, r3, #16
 801dfde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801dfe2:	e9c1 2300 	strd	r2, r3, [r1]
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	f103 0118 	add.w	r1, r3, #24
 801dfec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801dff0:	e9c1 2300 	strd	r2, r3, [r1]
}
 801dff4:	bf00      	nop
 801dff6:	3734      	adds	r7, #52	@ 0x34
 801dff8:	46bd      	mov	sp, r7
 801dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dffe:	4770      	bx	lr

0801e000 <_ZN8BasicVQF17quatSetToIdentityEPd>:
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
}


void BasicVQF::quatSetToIdentity(vqf_real_t out[4])
{
 801e000:	b480      	push	{r7}
 801e002:	b083      	sub	sp, #12
 801e004:	af00      	add	r7, sp, #0
 801e006:	6078      	str	r0, [r7, #4]
    out[0] = 1;
 801e008:	6879      	ldr	r1, [r7, #4]
 801e00a:	f04f 0200 	mov.w	r2, #0
 801e00e:	4b12      	ldr	r3, [pc, #72]	@ (801e058 <_ZN8BasicVQF17quatSetToIdentityEPd+0x58>)
 801e010:	e9c1 2300 	strd	r2, r3, [r1]
    out[1] = 0;
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	f103 0108 	add.w	r1, r3, #8
 801e01a:	f04f 0200 	mov.w	r2, #0
 801e01e:	f04f 0300 	mov.w	r3, #0
 801e022:	e9c1 2300 	strd	r2, r3, [r1]
    out[2] = 0;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	f103 0110 	add.w	r1, r3, #16
 801e02c:	f04f 0200 	mov.w	r2, #0
 801e030:	f04f 0300 	mov.w	r3, #0
 801e034:	e9c1 2300 	strd	r2, r3, [r1]
    out[3] = 0;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	f103 0118 	add.w	r1, r3, #24
 801e03e:	f04f 0200 	mov.w	r2, #0
 801e042:	f04f 0300 	mov.w	r3, #0
 801e046:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e04a:	bf00      	nop
 801e04c:	370c      	adds	r7, #12
 801e04e:	46bd      	mov	sp, r7
 801e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e054:	4770      	bx	lr
 801e056:	bf00      	nop
 801e058:	3ff00000 	.word	0x3ff00000

0801e05c <_ZN8BasicVQF10quatRotateEPKdS1_Pd>:
    vqf_real_t z = c * q[3] + s * q[0];
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
}

void BasicVQF::quatRotate(const vqf_real_t q[4], const vqf_real_t v[3], vqf_real_t out[3])
{
 801e05c:	b480      	push	{r7}
 801e05e:	b08b      	sub	sp, #44	@ 0x2c
 801e060:	af00      	add	r7, sp, #0
 801e062:	60f8      	str	r0, [r7, #12]
 801e064:	60b9      	str	r1, [r7, #8]
 801e066:	607a      	str	r2, [r7, #4]
    vqf_real_t x = (1 - 2*q[2]*q[2] - 2*q[3]*q[3])*v[0] + 2*v[1]*(q[2]*q[1] - q[0]*q[3]) + 2*v[2]*(q[0]*q[2] + q[3]*q[1]);
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	3310      	adds	r3, #16
 801e06c:	ed93 7b00 	vldr	d7, [r3]
 801e070:	ee37 6b07 	vadd.f64	d6, d7, d7
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	3310      	adds	r3, #16
 801e078:	ed93 7b00 	vldr	d7, [r3]
 801e07c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e080:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e084:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	3318      	adds	r3, #24
 801e08c:	ed93 7b00 	vldr	d7, [r3]
 801e090:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e094:	68fb      	ldr	r3, [r7, #12]
 801e096:	3318      	adds	r3, #24
 801e098:	ed93 7b00 	vldr	d7, [r3]
 801e09c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e0a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e0a4:	68bb      	ldr	r3, [r7, #8]
 801e0a6:	ed93 7b00 	vldr	d7, [r3]
 801e0aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e0ae:	68bb      	ldr	r3, [r7, #8]
 801e0b0:	3308      	adds	r3, #8
 801e0b2:	ed93 7b00 	vldr	d7, [r3]
 801e0b6:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	3310      	adds	r3, #16
 801e0be:	ed93 4b00 	vldr	d4, [r3]
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	3308      	adds	r3, #8
 801e0c6:	ed93 7b00 	vldr	d7, [r3]
 801e0ca:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	ed93 3b00 	vldr	d3, [r3]
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	3318      	adds	r3, #24
 801e0d8:	ed93 7b00 	vldr	d7, [r3]
 801e0dc:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e0e0:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e0e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e0e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e0ec:	68bb      	ldr	r3, [r7, #8]
 801e0ee:	3310      	adds	r3, #16
 801e0f0:	ed93 7b00 	vldr	d7, [r3]
 801e0f4:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	ed93 4b00 	vldr	d4, [r3]
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	3310      	adds	r3, #16
 801e102:	ed93 7b00 	vldr	d7, [r3]
 801e106:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	3318      	adds	r3, #24
 801e10e:	ed93 3b00 	vldr	d3, [r3]
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	3308      	adds	r3, #8
 801e116:	ed93 7b00 	vldr	d7, [r3]
 801e11a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e11e:	ee34 7b07 	vadd.f64	d7, d4, d7
 801e122:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e126:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e12a:	ed87 7b08 	vstr	d7, [r7, #32]
    vqf_real_t y = 2*v[0]*(q[0]*q[3] + q[2]*q[1]) + v[1]*(1 - 2*q[1]*q[1] - 2*q[3]*q[3]) + 2*v[2]*(q[2]*q[3] - q[1]*q[0]);
 801e12e:	68bb      	ldr	r3, [r7, #8]
 801e130:	ed93 7b00 	vldr	d7, [r3]
 801e134:	ee37 6b07 	vadd.f64	d6, d7, d7
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	ed93 5b00 	vldr	d5, [r3]
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	3318      	adds	r3, #24
 801e142:	ed93 7b00 	vldr	d7, [r3]
 801e146:	ee25 5b07 	vmul.f64	d5, d5, d7
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	3310      	adds	r3, #16
 801e14e:	ed93 4b00 	vldr	d4, [r3]
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	3308      	adds	r3, #8
 801e156:	ed93 7b00 	vldr	d7, [r3]
 801e15a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e15e:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e162:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e166:	68bb      	ldr	r3, [r7, #8]
 801e168:	3308      	adds	r3, #8
 801e16a:	ed93 5b00 	vldr	d5, [r3]
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	3308      	adds	r3, #8
 801e172:	ed93 7b00 	vldr	d7, [r3]
 801e176:	ee37 4b07 	vadd.f64	d4, d7, d7
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	3308      	adds	r3, #8
 801e17e:	ed93 7b00 	vldr	d7, [r3]
 801e182:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e186:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 801e18a:	ee34 4b47 	vsub.f64	d4, d4, d7
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	3318      	adds	r3, #24
 801e192:	ed93 7b00 	vldr	d7, [r3]
 801e196:	ee37 3b07 	vadd.f64	d3, d7, d7
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	3318      	adds	r3, #24
 801e19e:	ed93 7b00 	vldr	d7, [r3]
 801e1a2:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e1a6:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e1aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e1ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e1b2:	68bb      	ldr	r3, [r7, #8]
 801e1b4:	3310      	adds	r3, #16
 801e1b6:	ed93 7b00 	vldr	d7, [r3]
 801e1ba:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	3310      	adds	r3, #16
 801e1c2:	ed93 4b00 	vldr	d4, [r3]
 801e1c6:	68fb      	ldr	r3, [r7, #12]
 801e1c8:	3318      	adds	r3, #24
 801e1ca:	ed93 7b00 	vldr	d7, [r3]
 801e1ce:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e1d2:	68fb      	ldr	r3, [r7, #12]
 801e1d4:	3308      	adds	r3, #8
 801e1d6:	ed93 3b00 	vldr	d3, [r3]
 801e1da:	68fb      	ldr	r3, [r7, #12]
 801e1dc:	ed93 7b00 	vldr	d7, [r3]
 801e1e0:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e1e4:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e1e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e1ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e1f0:	ed87 7b06 	vstr	d7, [r7, #24]
    vqf_real_t z = 2*v[0]*(q[3]*q[1] - q[0]*q[2]) + 2*v[1]*(q[0]*q[1] + q[3]*q[2]) + v[2]*(1 - 2*q[1]*q[1] - 2*q[2]*q[2]);
 801e1f4:	68bb      	ldr	r3, [r7, #8]
 801e1f6:	ed93 7b00 	vldr	d7, [r3]
 801e1fa:	ee37 6b07 	vadd.f64	d6, d7, d7
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	3318      	adds	r3, #24
 801e202:	ed93 5b00 	vldr	d5, [r3]
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	3308      	adds	r3, #8
 801e20a:	ed93 7b00 	vldr	d7, [r3]
 801e20e:	ee25 5b07 	vmul.f64	d5, d5, d7
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	ed93 4b00 	vldr	d4, [r3]
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	3310      	adds	r3, #16
 801e21c:	ed93 7b00 	vldr	d7, [r3]
 801e220:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e224:	ee35 7b47 	vsub.f64	d7, d5, d7
 801e228:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e22c:	68bb      	ldr	r3, [r7, #8]
 801e22e:	3308      	adds	r3, #8
 801e230:	ed93 7b00 	vldr	d7, [r3]
 801e234:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	ed93 4b00 	vldr	d4, [r3]
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	3308      	adds	r3, #8
 801e242:	ed93 7b00 	vldr	d7, [r3]
 801e246:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	3318      	adds	r3, #24
 801e24e:	ed93 3b00 	vldr	d3, [r3]
 801e252:	68fb      	ldr	r3, [r7, #12]
 801e254:	3310      	adds	r3, #16
 801e256:	ed93 7b00 	vldr	d7, [r3]
 801e25a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e25e:	ee34 7b07 	vadd.f64	d7, d4, d7
 801e262:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e266:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e26a:	68bb      	ldr	r3, [r7, #8]
 801e26c:	3310      	adds	r3, #16
 801e26e:	ed93 5b00 	vldr	d5, [r3]
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	3308      	adds	r3, #8
 801e276:	ed93 7b00 	vldr	d7, [r3]
 801e27a:	ee37 4b07 	vadd.f64	d4, d7, d7
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	3308      	adds	r3, #8
 801e282:	ed93 7b00 	vldr	d7, [r3]
 801e286:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e28a:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 801e28e:	ee34 4b47 	vsub.f64	d4, d4, d7
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	3310      	adds	r3, #16
 801e296:	ed93 7b00 	vldr	d7, [r3]
 801e29a:	ee37 3b07 	vadd.f64	d3, d7, d7
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	3310      	adds	r3, #16
 801e2a2:	ed93 7b00 	vldr	d7, [r3]
 801e2a6:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e2aa:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e2ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e2b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e2b6:	ed87 7b04 	vstr	d7, [r7, #16]
    out[0] = x; out[1] = y; out[2] = z;
 801e2ba:	6879      	ldr	r1, [r7, #4]
 801e2bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e2c0:	e9c1 2300 	strd	r2, r3, [r1]
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	f103 0108 	add.w	r1, r3, #8
 801e2ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e2ce:	e9c1 2300 	strd	r2, r3, [r1]
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	f103 0110 	add.w	r1, r3, #16
 801e2d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e2dc:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e2e0:	bf00      	nop
 801e2e2:	372c      	adds	r7, #44	@ 0x2c
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2ea:	4770      	bx	lr

0801e2ec <_ZN8BasicVQF4normEPKdj>:

vqf_real_t BasicVQF::norm(const vqf_real_t vec[], size_t N)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b086      	sub	sp, #24
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	6078      	str	r0, [r7, #4]
 801e2f4:	6039      	str	r1, [r7, #0]
    vqf_real_t s = 0;
 801e2f6:	f04f 0200 	mov.w	r2, #0
 801e2fa:	f04f 0300 	mov.w	r3, #0
 801e2fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(size_t i = 0; i < N; i++) {
 801e302:	2300      	movs	r3, #0
 801e304:	60fb      	str	r3, [r7, #12]
 801e306:	e016      	b.n	801e336 <_ZN8BasicVQF4normEPKdj+0x4a>
        s += vec[i]*vec[i];
 801e308:	68fb      	ldr	r3, [r7, #12]
 801e30a:	00db      	lsls	r3, r3, #3
 801e30c:	687a      	ldr	r2, [r7, #4]
 801e30e:	4413      	add	r3, r2
 801e310:	ed93 6b00 	vldr	d6, [r3]
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	00db      	lsls	r3, r3, #3
 801e318:	687a      	ldr	r2, [r7, #4]
 801e31a:	4413      	add	r3, r2
 801e31c:	ed93 7b00 	vldr	d7, [r3]
 801e320:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e324:	ed97 6b04 	vldr	d6, [r7, #16]
 801e328:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e32c:	ed87 7b04 	vstr	d7, [r7, #16]
    for(size_t i = 0; i < N; i++) {
 801e330:	68fb      	ldr	r3, [r7, #12]
 801e332:	3301      	adds	r3, #1
 801e334:	60fb      	str	r3, [r7, #12]
 801e336:	68fa      	ldr	r2, [r7, #12]
 801e338:	683b      	ldr	r3, [r7, #0]
 801e33a:	429a      	cmp	r2, r3
 801e33c:	d3e4      	bcc.n	801e308 <_ZN8BasicVQF4normEPKdj+0x1c>
    }
    return sqrt(s);
 801e33e:	ed97 0b04 	vldr	d0, [r7, #16]
 801e342:	f002 fc39 	bl	8020bb8 <sqrt>
 801e346:	eeb0 7b40 	vmov.f64	d7, d0
}
 801e34a:	eeb0 0b47 	vmov.f64	d0, d7
 801e34e:	3718      	adds	r7, #24
 801e350:	46bd      	mov	sp, r7
 801e352:	bd80      	pop	{r7, pc}

0801e354 <_ZN8BasicVQF9normalizeEPdj>:

void BasicVQF::normalize(vqf_real_t vec[], size_t N)
{
 801e354:	b580      	push	{r7, lr}
 801e356:	b086      	sub	sp, #24
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
 801e35c:	6039      	str	r1, [r7, #0]
    vqf_real_t n = norm(vec, N);
 801e35e:	6839      	ldr	r1, [r7, #0]
 801e360:	6878      	ldr	r0, [r7, #4]
 801e362:	f7ff ffc3 	bl	801e2ec <_ZN8BasicVQF4normEPKdj>
 801e366:	ed87 0b02 	vstr	d0, [r7, #8]
    if (n < EPS) {
 801e36a:	f7ff fadf 	bl	801d92c <_ZNSt14numeric_limitsIdE7epsilonEv>
 801e36e:	eeb0 6b40 	vmov.f64	d6, d0
 801e372:	ed97 7b02 	vldr	d7, [r7, #8]
 801e376:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37e:	bf4c      	ite	mi
 801e380:	2301      	movmi	r3, #1
 801e382:	2300      	movpl	r3, #0
 801e384:	b2db      	uxtb	r3, r3
 801e386:	2b00      	cmp	r3, #0
 801e388:	d11a      	bne.n	801e3c0 <_ZN8BasicVQF9normalizeEPdj+0x6c>
        return;
    }
    for(size_t i = 0; i < N; i++) {
 801e38a:	2300      	movs	r3, #0
 801e38c:	617b      	str	r3, [r7, #20]
 801e38e:	e012      	b.n	801e3b6 <_ZN8BasicVQF9normalizeEPdj+0x62>
        vec[i] /= n;
 801e390:	697b      	ldr	r3, [r7, #20]
 801e392:	00db      	lsls	r3, r3, #3
 801e394:	687a      	ldr	r2, [r7, #4]
 801e396:	4413      	add	r3, r2
 801e398:	ed93 5b00 	vldr	d5, [r3]
 801e39c:	697b      	ldr	r3, [r7, #20]
 801e39e:	00db      	lsls	r3, r3, #3
 801e3a0:	687a      	ldr	r2, [r7, #4]
 801e3a2:	4413      	add	r3, r2
 801e3a4:	ed97 6b02 	vldr	d6, [r7, #8]
 801e3a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e3ac:	ed83 7b00 	vstr	d7, [r3]
    for(size_t i = 0; i < N; i++) {
 801e3b0:	697b      	ldr	r3, [r7, #20]
 801e3b2:	3301      	adds	r3, #1
 801e3b4:	617b      	str	r3, [r7, #20]
 801e3b6:	697a      	ldr	r2, [r7, #20]
 801e3b8:	683b      	ldr	r3, [r7, #0]
 801e3ba:	429a      	cmp	r2, r3
 801e3bc:	d3e8      	bcc.n	801e390 <_ZN8BasicVQF9normalizeEPdj+0x3c>
 801e3be:	e000      	b.n	801e3c2 <_ZN8BasicVQF9normalizeEPdj+0x6e>
        return;
 801e3c0:	bf00      	nop
    }
}
 801e3c2:	3718      	adds	r7, #24
 801e3c4:	46bd      	mov	sp, r7
 801e3c6:	bd80      	pop	{r7, pc}

0801e3c8 <_ZN8BasicVQF11gainFromTauEdd>:
        }
    }
}

vqf_real_t BasicVQF::gainFromTau(vqf_real_t tau, vqf_real_t Ts)
{
 801e3c8:	b580      	push	{r7, lr}
 801e3ca:	b084      	sub	sp, #16
 801e3cc:	af00      	add	r7, sp, #0
 801e3ce:	ed87 0b02 	vstr	d0, [r7, #8]
 801e3d2:	ed87 1b00 	vstr	d1, [r7]
    assert(Ts > 0);
 801e3d6:	ed97 7b00 	vldr	d7, [r7]
 801e3da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3e2:	dc06      	bgt.n	801e3f2 <_ZN8BasicVQF11gainFromTauEdd+0x2a>
 801e3e4:	4b1a      	ldr	r3, [pc, #104]	@ (801e450 <_ZN8BasicVQF11gainFromTauEdd+0x88>)
 801e3e6:	4a1b      	ldr	r2, [pc, #108]	@ (801e454 <_ZN8BasicVQF11gainFromTauEdd+0x8c>)
 801e3e8:	f240 1151 	movw	r1, #337	@ 0x151
 801e3ec:	481a      	ldr	r0, [pc, #104]	@ (801e458 <_ZN8BasicVQF11gainFromTauEdd+0x90>)
 801e3ee:	f003 fe13 	bl	8022018 <__assert_func>
    if (tau < vqf_real_t(0.0)) {
 801e3f2:	ed97 7b02 	vldr	d7, [r7, #8]
 801e3f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3fe:	d502      	bpl.n	801e406 <_ZN8BasicVQF11gainFromTauEdd+0x3e>
        return 0; // k=0 for negative tau (disable update)
 801e400:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 801e448 <_ZN8BasicVQF11gainFromTauEdd+0x80>
 801e404:	e01b      	b.n	801e43e <_ZN8BasicVQF11gainFromTauEdd+0x76>
    } else if (tau == vqf_real_t(0.0)) {
 801e406:	ed97 7b02 	vldr	d7, [r7, #8]
 801e40a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e412:	d102      	bne.n	801e41a <_ZN8BasicVQF11gainFromTauEdd+0x52>
        return 1; // k=1 for tau=0
 801e414:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e418:	e011      	b.n	801e43e <_ZN8BasicVQF11gainFromTauEdd+0x76>
    } else {
        return 1 - exp(-Ts/tau);  // fc = 1/(2*pi*tau)
 801e41a:	ed97 7b00 	vldr	d7, [r7]
 801e41e:	eeb1 6b47 	vneg.f64	d6, d7
 801e422:	ed97 7b02 	vldr	d7, [r7, #8]
 801e426:	ee86 5b07 	vdiv.f64	d5, d6, d7
 801e42a:	eeb0 0b45 	vmov.f64	d0, d5
 801e42e:	f002 fcc3 	bl	8020db8 <exp>
 801e432:	eeb0 7b40 	vmov.f64	d7, d0
 801e436:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e43a:	ee36 7b47 	vsub.f64	d7, d6, d7
    }
}
 801e43e:	eeb0 0b47 	vmov.f64	d0, d7
 801e442:	3710      	adds	r7, #16
 801e444:	46bd      	mov	sp, r7
 801e446:	bd80      	pop	{r7, pc}
	...
 801e450:	08024a80 	.word	0x08024a80
 801e454:	08024a88 	.word	0x08024a88
 801e458:	08024ac8 	.word	0x08024ac8

0801e45c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 801e45c:	b580      	push	{r7, lr}
 801e45e:	b082      	sub	sp, #8
 801e460:	af00      	add	r7, sp, #0
 801e462:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	ee07 3a90 	vmov	s15, r3
 801e46a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e46e:	eeb0 0b47 	vmov.f64	d0, d7
 801e472:	f002 fba1 	bl	8020bb8 <sqrt>
 801e476:	eeb0 7b40 	vmov.f64	d7, d0
 801e47a:	eeb0 0b47 	vmov.f64	d0, d7
 801e47e:	3708      	adds	r7, #8
 801e480:	46bd      	mov	sp, r7
 801e482:	bd80      	pop	{r7, pc}
 801e484:	0000      	movs	r0, r0
	...

0801e488 <_ZN8BasicVQF12filterCoeffsEddPdS0_>:

void BasicVQF::filterCoeffs(vqf_real_t tau, vqf_real_t Ts, double outB[], double outA[])
{
 801e488:	b580      	push	{r7, lr}
 801e48a:	ed2d 8b02 	vpush	{d8}
 801e48e:	b08e      	sub	sp, #56	@ 0x38
 801e490:	af00      	add	r7, sp, #0
 801e492:	ed87 0b04 	vstr	d0, [r7, #16]
 801e496:	ed87 1b02 	vstr	d1, [r7, #8]
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	6039      	str	r1, [r7, #0]
    assert(tau > 0);
 801e49e:	ed97 7b04 	vldr	d7, [r7, #16]
 801e4a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4aa:	dc06      	bgt.n	801e4ba <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x32>
 801e4ac:	4b4c      	ldr	r3, [pc, #304]	@ (801e5e0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x158>)
 801e4ae:	4a4d      	ldr	r2, [pc, #308]	@ (801e5e4 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x15c>)
 801e4b0:	f240 115d 	movw	r1, #349	@ 0x15d
 801e4b4:	484c      	ldr	r0, [pc, #304]	@ (801e5e8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x160>)
 801e4b6:	f003 fdaf 	bl	8022018 <__assert_func>
    assert(Ts > 0);
 801e4ba:	ed97 7b02 	vldr	d7, [r7, #8]
 801e4be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4c6:	dc06      	bgt.n	801e4d6 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x4e>
 801e4c8:	4b48      	ldr	r3, [pc, #288]	@ (801e5ec <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x164>)
 801e4ca:	4a46      	ldr	r2, [pc, #280]	@ (801e5e4 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x15c>)
 801e4cc:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 801e4d0:	4845      	ldr	r0, [pc, #276]	@ (801e5e8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x160>)
 801e4d2:	f003 fda1 	bl	8022018 <__assert_func>
    // second order Butterworth filter based on https://stackoverflow.com/a/52764064
    double fc = (M_SQRT2 / (2.0*M_PI))/double(tau); // time constant of dampened, non-oscillating part of step response
 801e4d6:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 801e5d0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x148>
 801e4da:	ed97 6b04 	vldr	d6, [r7, #16]
 801e4de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e4e2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    double C = tan(M_PI*fc*double(Ts));
 801e4e6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 801e4ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e5d8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x150>
 801e4ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e4f2:	ed97 7b02 	vldr	d7, [r7, #8]
 801e4f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e4fa:	eeb0 0b47 	vmov.f64	d0, d7
 801e4fe:	f002 fc1b 	bl	8020d38 <tan>
 801e502:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    double D = C*C + sqrt(2)*C + 1;
 801e506:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801e50a:	ee27 8b07 	vmul.f64	d8, d7, d7
 801e50e:	2002      	movs	r0, #2
 801e510:	f7ff ffa4 	bl	801e45c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 801e514:	eeb0 6b40 	vmov.f64	d6, d0
 801e518:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801e51c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e520:	ee38 7b07 	vadd.f64	d7, d8, d7
 801e524:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e528:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e52c:	ed87 7b08 	vstr	d7, [r7, #32]
    double b0 = C*C/D;
 801e530:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801e534:	ee27 5b07 	vmul.f64	d5, d7, d7
 801e538:	ed97 6b08 	vldr	d6, [r7, #32]
 801e53c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e540:	ed87 7b06 	vstr	d7, [r7, #24]
    outB[0] = b0;
 801e544:	6879      	ldr	r1, [r7, #4]
 801e546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e54a:	e9c1 2300 	strd	r2, r3, [r1]
    outB[1] = 2*b0;
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	3308      	adds	r3, #8
 801e552:	ed97 7b06 	vldr	d7, [r7, #24]
 801e556:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e55a:	ed83 7b00 	vstr	d7, [r3]
    outB[2] = b0;
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	f103 0110 	add.w	r1, r3, #16
 801e564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e568:	e9c1 2300 	strd	r2, r3, [r1]
    // a0 = 1.0
    outA[0] = 2*(C*C-1)/D; // a1
 801e56c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801e570:	ee27 7b07 	vmul.f64	d7, d7, d7
 801e574:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e578:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e57c:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e580:	ed97 6b08 	vldr	d6, [r7, #32]
 801e584:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e588:	683b      	ldr	r3, [r7, #0]
 801e58a:	ed83 7b00 	vstr	d7, [r3]
    outA[1] = (1-sqrt(2)*C+C*C)/D; // a2
 801e58e:	2002      	movs	r0, #2
 801e590:	f7ff ff64 	bl	801e45c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 801e594:	eeb0 6b40 	vmov.f64	d6, d0
 801e598:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801e59c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e5a0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e5a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e5a8:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801e5ac:	ee27 7b07 	vmul.f64	d7, d7, d7
 801e5b0:	ee36 5b07 	vadd.f64	d5, d6, d7
 801e5b4:	683b      	ldr	r3, [r7, #0]
 801e5b6:	3308      	adds	r3, #8
 801e5b8:	ed97 6b08 	vldr	d6, [r7, #32]
 801e5bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e5c0:	ed83 7b00 	vstr	d7, [r3]
}
 801e5c4:	bf00      	nop
 801e5c6:	3738      	adds	r7, #56	@ 0x38
 801e5c8:	46bd      	mov	sp, r7
 801e5ca:	ecbd 8b02 	vpop	{d8}
 801e5ce:	bd80      	pop	{r7, pc}
 801e5d0:	29be6622 	.word	0x29be6622
 801e5d4:	3fcccf64 	.word	0x3fcccf64
 801e5d8:	54442d18 	.word	0x54442d18
 801e5dc:	400921fb 	.word	0x400921fb
 801e5e0:	08024b48 	.word	0x08024b48
 801e5e4:	08024b50 	.word	0x08024b50
 801e5e8:	08024ac8 	.word	0x08024ac8
 801e5ec:	08024a80 	.word	0x08024a80

0801e5f0 <_ZN8BasicVQF18filterInitialStateEdPKdS1_Pd>:

void BasicVQF::filterInitialState(vqf_real_t x0, const double b[3], const double a[2], double out[])
{
 801e5f0:	b480      	push	{r7}
 801e5f2:	b087      	sub	sp, #28
 801e5f4:	af00      	add	r7, sp, #0
 801e5f6:	ed87 0b04 	vstr	d0, [r7, #16]
 801e5fa:	60f8      	str	r0, [r7, #12]
 801e5fc:	60b9      	str	r1, [r7, #8]
 801e5fe:	607a      	str	r2, [r7, #4]
    // initial state for steady state (equivalent to scipy.signal.lfilter_zi, obtained by setting y=x=x0 in the filter
    // update equation)
    out[0] = x0*(1 - b[0]);
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	ed93 7b00 	vldr	d7, [r3]
 801e606:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e60a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e60e:	ed97 7b04 	vldr	d7, [r7, #16]
 801e612:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	ed83 7b00 	vstr	d7, [r3]
    out[1] = x0*(b[2] - a[1]);
 801e61c:	68fb      	ldr	r3, [r7, #12]
 801e61e:	3310      	adds	r3, #16
 801e620:	ed93 6b00 	vldr	d6, [r3]
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	3308      	adds	r3, #8
 801e628:	ed93 7b00 	vldr	d7, [r3]
 801e62c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	3308      	adds	r3, #8
 801e634:	ed97 7b04 	vldr	d7, [r7, #16]
 801e638:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e63c:	ed83 7b00 	vstr	d7, [r3]
}
 801e640:	bf00      	nop
 801e642:	371c      	adds	r7, #28
 801e644:	46bd      	mov	sp, r7
 801e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e64a:	4770      	bx	lr

0801e64c <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_>:

void BasicVQF::filterAdaptStateForCoeffChange(vqf_real_t last_y[], size_t N, const double b_old[],
                                              const double a_old[], const double b_new[],
                                              const double a_new[], double state[])
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b086      	sub	sp, #24
 801e650:	af00      	add	r7, sp, #0
 801e652:	60f8      	str	r0, [r7, #12]
 801e654:	60b9      	str	r1, [r7, #8]
 801e656:	607a      	str	r2, [r7, #4]
 801e658:	603b      	str	r3, [r7, #0]
    if (isnan(state[0])) {
 801e65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e65c:	ed93 7b00 	vldr	d7, [r3]
 801e660:	eeb0 0b47 	vmov.f64	d0, d7
 801e664:	f7ff f982 	bl	801d96c <_ZSt5isnand>
 801e668:	4603      	mov	r3, r0
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d154      	bne.n	801e718 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xcc>
        return;
    }
    for (size_t i = 0; i < N; i++) {
 801e66e:	2300      	movs	r3, #0
 801e670:	617b      	str	r3, [r7, #20]
 801e672:	e04c      	b.n	801e70e <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xc2>
        state[0+2*i] = state[0+2*i] + (b_old[0] - b_new[0])*last_y[i];
 801e674:	697b      	ldr	r3, [r7, #20]
 801e676:	011b      	lsls	r3, r3, #4
 801e678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e67a:	4413      	add	r3, r2
 801e67c:	ed93 6b00 	vldr	d6, [r3]
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	ed93 5b00 	vldr	d5, [r3]
 801e686:	6a3b      	ldr	r3, [r7, #32]
 801e688:	ed93 7b00 	vldr	d7, [r3]
 801e68c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e690:	697b      	ldr	r3, [r7, #20]
 801e692:	00db      	lsls	r3, r3, #3
 801e694:	68fa      	ldr	r2, [r7, #12]
 801e696:	4413      	add	r3, r2
 801e698:	ed93 7b00 	vldr	d7, [r3]
 801e69c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e6a0:	697b      	ldr	r3, [r7, #20]
 801e6a2:	011b      	lsls	r3, r3, #4
 801e6a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e6a6:	4413      	add	r3, r2
 801e6a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e6ac:	ed83 7b00 	vstr	d7, [r3]
        state[1+2*i] = state[1+2*i] + (b_old[1] - b_new[1] - a_old[0] + a_new[0])*last_y[i];
 801e6b0:	697b      	ldr	r3, [r7, #20]
 801e6b2:	011b      	lsls	r3, r3, #4
 801e6b4:	3308      	adds	r3, #8
 801e6b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e6b8:	4413      	add	r3, r2
 801e6ba:	ed93 6b00 	vldr	d6, [r3]
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	3308      	adds	r3, #8
 801e6c2:	ed93 5b00 	vldr	d5, [r3]
 801e6c6:	6a3b      	ldr	r3, [r7, #32]
 801e6c8:	3308      	adds	r3, #8
 801e6ca:	ed93 7b00 	vldr	d7, [r3]
 801e6ce:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e6d2:	683b      	ldr	r3, [r7, #0]
 801e6d4:	ed93 7b00 	vldr	d7, [r3]
 801e6d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6de:	ed93 7b00 	vldr	d7, [r3]
 801e6e2:	ee35 5b07 	vadd.f64	d5, d5, d7
 801e6e6:	697b      	ldr	r3, [r7, #20]
 801e6e8:	00db      	lsls	r3, r3, #3
 801e6ea:	68fa      	ldr	r2, [r7, #12]
 801e6ec:	4413      	add	r3, r2
 801e6ee:	ed93 7b00 	vldr	d7, [r3]
 801e6f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e6f6:	697b      	ldr	r3, [r7, #20]
 801e6f8:	011b      	lsls	r3, r3, #4
 801e6fa:	3308      	adds	r3, #8
 801e6fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e6fe:	4413      	add	r3, r2
 801e700:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e704:	ed83 7b00 	vstr	d7, [r3]
    for (size_t i = 0; i < N; i++) {
 801e708:	697b      	ldr	r3, [r7, #20]
 801e70a:	3301      	adds	r3, #1
 801e70c:	617b      	str	r3, [r7, #20]
 801e70e:	697a      	ldr	r2, [r7, #20]
 801e710:	68bb      	ldr	r3, [r7, #8]
 801e712:	429a      	cmp	r2, r3
 801e714:	d3ae      	bcc.n	801e674 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0x28>
 801e716:	e000      	b.n	801e71a <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xce>
        return;
 801e718:	bf00      	nop
    }
}
 801e71a:	3718      	adds	r7, #24
 801e71c:	46bd      	mov	sp, r7
 801e71e:	bd80      	pop	{r7, pc}

0801e720 <_ZN8BasicVQF10filterStepEdPKdS1_Pd>:

vqf_real_t BasicVQF::filterStep(vqf_real_t x, const double b[3], const double a[2], double state[2])
{
 801e720:	b480      	push	{r7}
 801e722:	b089      	sub	sp, #36	@ 0x24
 801e724:	af00      	add	r7, sp, #0
 801e726:	ed87 0b04 	vstr	d0, [r7, #16]
 801e72a:	60f8      	str	r0, [r7, #12]
 801e72c:	60b9      	str	r1, [r7, #8]
 801e72e:	607a      	str	r2, [r7, #4]
    // difference equations based on scipy.signal.lfilter documentation
    // assumes that a0 == 1.0
    double y = b[0]*x + state[0];
 801e730:	68fb      	ldr	r3, [r7, #12]
 801e732:	ed93 6b00 	vldr	d6, [r3]
 801e736:	ed97 7b04 	vldr	d7, [r7, #16]
 801e73a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	ed93 7b00 	vldr	d7, [r3]
 801e744:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e748:	ed87 7b06 	vstr	d7, [r7, #24]
    state[0] = b[1]*x - a[0]*y + state[1];
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	3308      	adds	r3, #8
 801e750:	ed93 6b00 	vldr	d6, [r3]
 801e754:	ed97 7b04 	vldr	d7, [r7, #16]
 801e758:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e75c:	68bb      	ldr	r3, [r7, #8]
 801e75e:	ed93 5b00 	vldr	d5, [r3]
 801e762:	ed97 7b06 	vldr	d7, [r7, #24]
 801e766:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e76a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	3308      	adds	r3, #8
 801e772:	ed93 7b00 	vldr	d7, [r3]
 801e776:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	ed83 7b00 	vstr	d7, [r3]
    state[1] = b[2]*x - a[1]*y;
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	3310      	adds	r3, #16
 801e784:	ed93 6b00 	vldr	d6, [r3]
 801e788:	ed97 7b04 	vldr	d7, [r7, #16]
 801e78c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e790:	68bb      	ldr	r3, [r7, #8]
 801e792:	3308      	adds	r3, #8
 801e794:	ed93 5b00 	vldr	d5, [r3]
 801e798:	ed97 7b06 	vldr	d7, [r7, #24]
 801e79c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	3308      	adds	r3, #8
 801e7a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e7a8:	ed83 7b00 	vstr	d7, [r3]
    return y;
 801e7ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e7b0:	ec43 2b17 	vmov	d7, r2, r3
}
 801e7b4:	eeb0 0b47 	vmov.f64	d0, d7
 801e7b8:	3724      	adds	r7, #36	@ 0x24
 801e7ba:	46bd      	mov	sp, r7
 801e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c0:	4770      	bx	lr
	...

0801e7c4 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_>:

void BasicVQF::filterVec(const vqf_real_t x[], size_t N, vqf_real_t tau, vqf_real_t Ts, const double b[3],
                         const double a[2], double state[], vqf_real_t out[])
{
 801e7c4:	b590      	push	{r4, r7, lr}
 801e7c6:	b08d      	sub	sp, #52	@ 0x34
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	61f8      	str	r0, [r7, #28]
 801e7cc:	61b9      	str	r1, [r7, #24]
 801e7ce:	ed87 0b04 	vstr	d0, [r7, #16]
 801e7d2:	ed87 1b02 	vstr	d1, [r7, #8]
 801e7d6:	607a      	str	r2, [r7, #4]
 801e7d8:	603b      	str	r3, [r7, #0]
    assert(N>=2);
 801e7da:	69bb      	ldr	r3, [r7, #24]
 801e7dc:	2b01      	cmp	r3, #1
 801e7de:	d806      	bhi.n	801e7ee <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x2a>
 801e7e0:	4b64      	ldr	r3, [pc, #400]	@ (801e974 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b0>)
 801e7e2:	4a65      	ldr	r2, [pc, #404]	@ (801e978 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b4>)
 801e7e4:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 801e7e8:	4864      	ldr	r0, [pc, #400]	@ (801e97c <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b8>)
 801e7ea:	f003 fc15 	bl	8022018 <__assert_func>

    // to avoid depending on a single sample, average the first samples (for duration tau)
    // and then use this average to calculate the filter initial state
    if (isnan(state[0])) { // initialization phase
 801e7ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e7f0:	ed93 7b00 	vldr	d7, [r3]
 801e7f4:	eeb0 0b47 	vmov.f64	d0, d7
 801e7f8:	f7ff f8b8 	bl	801d96c <_ZSt5isnand>
 801e7fc:	4603      	mov	r3, r0
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f000 8092 	beq.w	801e928 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x164>
        if (isnan(state[1])) { // first sample
 801e804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e806:	3308      	adds	r3, #8
 801e808:	ed93 7b00 	vldr	d7, [r3]
 801e80c:	eeb0 0b47 	vmov.f64	d0, d7
 801e810:	f7ff f8ac 	bl	801d96c <_ZSt5isnand>
 801e814:	4603      	mov	r3, r0
 801e816:	2b00      	cmp	r3, #0
 801e818:	d01d      	beq.n	801e856 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x92>
            state[1] = 0; // state[1] is used to store the sample count
 801e81a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e81c:	f103 0108 	add.w	r1, r3, #8
 801e820:	f04f 0200 	mov.w	r2, #0
 801e824:	f04f 0300 	mov.w	r3, #0
 801e828:	e9c1 2300 	strd	r2, r3, [r1]
            for(size_t i = 0; i < N; i++) {
 801e82c:	2300      	movs	r3, #0
 801e82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e830:	e00d      	b.n	801e84e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x8a>
                state[2+i] = 0; // state[2+i] is used to store the sum
 801e832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e834:	3302      	adds	r3, #2
 801e836:	00db      	lsls	r3, r3, #3
 801e838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e83a:	18d1      	adds	r1, r2, r3
 801e83c:	f04f 0200 	mov.w	r2, #0
 801e840:	f04f 0300 	mov.w	r3, #0
 801e844:	e9c1 2300 	strd	r2, r3, [r1]
            for(size_t i = 0; i < N; i++) {
 801e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e84a:	3301      	adds	r3, #1
 801e84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e850:	69bb      	ldr	r3, [r7, #24]
 801e852:	429a      	cmp	r2, r3
 801e854:	d3ed      	bcc.n	801e832 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x6e>
            }
        }
        state[1]++;
 801e856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e858:	3308      	adds	r3, #8
 801e85a:	ed93 7b00 	vldr	d7, [r3]
 801e85e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e862:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e866:	ed83 7b00 	vstr	d7, [r3]
        for (size_t i = 0; i < N; i++) {
 801e86a:	2300      	movs	r3, #0
 801e86c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e86e:	e02b      	b.n	801e8c8 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x104>
            state[2+i] += x[i];
 801e870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e872:	3302      	adds	r3, #2
 801e874:	00db      	lsls	r3, r3, #3
 801e876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e878:	4413      	add	r3, r2
 801e87a:	ed93 6b00 	vldr	d6, [r3]
 801e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e880:	00db      	lsls	r3, r3, #3
 801e882:	69fa      	ldr	r2, [r7, #28]
 801e884:	4413      	add	r3, r2
 801e886:	ed93 7b00 	vldr	d7, [r3]
 801e88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e88c:	3302      	adds	r3, #2
 801e88e:	00db      	lsls	r3, r3, #3
 801e890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e892:	4413      	add	r3, r2
 801e894:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e898:	ed83 7b00 	vstr	d7, [r3]
            out[i] = state[2+i]/state[1];
 801e89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e89e:	3302      	adds	r3, #2
 801e8a0:	00db      	lsls	r3, r3, #3
 801e8a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e8a4:	4413      	add	r3, r2
 801e8a6:	ed93 5b00 	vldr	d5, [r3]
 801e8aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e8ac:	3308      	adds	r3, #8
 801e8ae:	ed93 6b00 	vldr	d6, [r3]
 801e8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8b4:	00db      	lsls	r3, r3, #3
 801e8b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e8b8:	4413      	add	r3, r2
 801e8ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e8be:	ed83 7b00 	vstr	d7, [r3]
        for (size_t i = 0; i < N; i++) {
 801e8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8c4:	3301      	adds	r3, #1
 801e8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e8c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e8ca:	69bb      	ldr	r3, [r7, #24]
 801e8cc:	429a      	cmp	r2, r3
 801e8ce:	d3cf      	bcc.n	801e870 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0xac>
        }
        if (state[1]*Ts >= tau) {
 801e8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e8d2:	3308      	adds	r3, #8
 801e8d4:	ed93 6b00 	vldr	d6, [r3]
 801e8d8:	ed97 7b02 	vldr	d7, [r7, #8]
 801e8dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e8e0:	ed97 6b04 	vldr	d6, [r7, #16]
 801e8e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8ec:	d900      	bls.n	801e8f0 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x12c>
            for(size_t i = 0; i < N; i++) {
               filterInitialState(out[i], b, a, state+2*i);
            }
        }
        return;
 801e8ee:	e03e      	b.n	801e96e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1aa>
            for(size_t i = 0; i < N; i++) {
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	627b      	str	r3, [r7, #36]	@ 0x24
 801e8f4:	e013      	b.n	801e91e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x15a>
               filterInitialState(out[i], b, a, state+2*i);
 801e8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8f8:	00db      	lsls	r3, r3, #3
 801e8fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e8fc:	4413      	add	r3, r2
 801e8fe:	ed93 7b00 	vldr	d7, [r3]
 801e902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e904:	011b      	lsls	r3, r3, #4
 801e906:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e908:	4413      	add	r3, r2
 801e90a:	461a      	mov	r2, r3
 801e90c:	6839      	ldr	r1, [r7, #0]
 801e90e:	6878      	ldr	r0, [r7, #4]
 801e910:	eeb0 0b47 	vmov.f64	d0, d7
 801e914:	f7ff fe6c 	bl	801e5f0 <_ZN8BasicVQF18filterInitialStateEdPKdS1_Pd>
            for(size_t i = 0; i < N; i++) {
 801e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e91a:	3301      	adds	r3, #1
 801e91c:	627b      	str	r3, [r7, #36]	@ 0x24
 801e91e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e920:	69bb      	ldr	r3, [r7, #24]
 801e922:	429a      	cmp	r2, r3
 801e924:	d3e7      	bcc.n	801e8f6 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x132>
        return;
 801e926:	e022      	b.n	801e96e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1aa>
    }

    for (size_t i = 0; i < N; i++) {
 801e928:	2300      	movs	r3, #0
 801e92a:	623b      	str	r3, [r7, #32]
 801e92c:	e01b      	b.n	801e966 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1a2>
        out[i] = filterStep(x[i], b, a, state+2*i);
 801e92e:	6a3b      	ldr	r3, [r7, #32]
 801e930:	00db      	lsls	r3, r3, #3
 801e932:	69fa      	ldr	r2, [r7, #28]
 801e934:	4413      	add	r3, r2
 801e936:	ed93 7b00 	vldr	d7, [r3]
 801e93a:	6a3b      	ldr	r3, [r7, #32]
 801e93c:	011b      	lsls	r3, r3, #4
 801e93e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e940:	18d1      	adds	r1, r2, r3
 801e942:	6a3b      	ldr	r3, [r7, #32]
 801e944:	00db      	lsls	r3, r3, #3
 801e946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e948:	18d4      	adds	r4, r2, r3
 801e94a:	460a      	mov	r2, r1
 801e94c:	6839      	ldr	r1, [r7, #0]
 801e94e:	6878      	ldr	r0, [r7, #4]
 801e950:	eeb0 0b47 	vmov.f64	d0, d7
 801e954:	f7ff fee4 	bl	801e720 <_ZN8BasicVQF10filterStepEdPKdS1_Pd>
 801e958:	eeb0 7b40 	vmov.f64	d7, d0
 801e95c:	ed84 7b00 	vstr	d7, [r4]
    for (size_t i = 0; i < N; i++) {
 801e960:	6a3b      	ldr	r3, [r7, #32]
 801e962:	3301      	adds	r3, #1
 801e964:	623b      	str	r3, [r7, #32]
 801e966:	6a3a      	ldr	r2, [r7, #32]
 801e968:	69bb      	ldr	r3, [r7, #24]
 801e96a:	429a      	cmp	r2, r3
 801e96c:	d3df      	bcc.n	801e92e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x16a>
    }
}
 801e96e:	3734      	adds	r7, #52	@ 0x34
 801e970:	46bd      	mov	sp, r7
 801e972:	bd90      	pop	{r4, r7, pc}
 801e974:	08024ba0 	.word	0x08024ba0
 801e978:	08024ba8 	.word	0x08024ba8
 801e97c:	08024ac8 	.word	0x08024ac8

0801e980 <_ZN8BasicVQF5setupEv>:

void BasicVQF::setup()
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
    assert(coeffs.gyrTs > 0);
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	ed93 7b2a 	vldr	d7, [r3, #168]	@ 0xa8
 801e98e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e996:	dc06      	bgt.n	801e9a6 <_ZN8BasicVQF5setupEv+0x26>
 801e998:	4b27      	ldr	r3, [pc, #156]	@ (801ea38 <_ZN8BasicVQF5setupEv+0xb8>)
 801e99a:	4a28      	ldr	r2, [pc, #160]	@ (801ea3c <_ZN8BasicVQF5setupEv+0xbc>)
 801e99c:	f240 11ad 	movw	r1, #429	@ 0x1ad
 801e9a0:	4827      	ldr	r0, [pc, #156]	@ (801ea40 <_ZN8BasicVQF5setupEv+0xc0>)
 801e9a2:	f003 fb39 	bl	8022018 <__assert_func>
    assert(coeffs.accTs > 0);
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 801e9ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9b4:	dc06      	bgt.n	801e9c4 <_ZN8BasicVQF5setupEv+0x44>
 801e9b6:	4b23      	ldr	r3, [pc, #140]	@ (801ea44 <_ZN8BasicVQF5setupEv+0xc4>)
 801e9b8:	4a20      	ldr	r2, [pc, #128]	@ (801ea3c <_ZN8BasicVQF5setupEv+0xbc>)
 801e9ba:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 801e9be:	4820      	ldr	r0, [pc, #128]	@ (801ea40 <_ZN8BasicVQF5setupEv+0xc0>)
 801e9c0:	f003 fb2a 	bl	8022018 <__assert_func>
    assert(coeffs.magTs > 0);
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	ed93 7b2e 	vldr	d7, [r3, #184]	@ 0xb8
 801e9ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9d2:	dc06      	bgt.n	801e9e2 <_ZN8BasicVQF5setupEv+0x62>
 801e9d4:	4b1c      	ldr	r3, [pc, #112]	@ (801ea48 <_ZN8BasicVQF5setupEv+0xc8>)
 801e9d6:	4a19      	ldr	r2, [pc, #100]	@ (801ea3c <_ZN8BasicVQF5setupEv+0xbc>)
 801e9d8:	f240 11af 	movw	r1, #431	@ 0x1af
 801e9dc:	4818      	ldr	r0, [pc, #96]	@ (801ea40 <_ZN8BasicVQF5setupEv+0xc0>)
 801e9de:	f003 fb1b 	bl	8022018 <__assert_func>

    filterCoeffs(params.tauAcc, coeffs.accTs, coeffs.accLpB, coeffs.accLpA);
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	ed93 7b00 	vldr	d7, [r3]
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	33d8      	adds	r3, #216	@ 0xd8
 801e9f8:	4619      	mov	r1, r3
 801e9fa:	4610      	mov	r0, r2
 801e9fc:	eeb0 1b46 	vmov.f64	d1, d6
 801ea00:	eeb0 0b47 	vmov.f64	d0, d7
 801ea04:	f7ff fd40 	bl	801e488 <_ZN8BasicVQF12filterCoeffsEddPdS0_>

    coeffs.kMag = gainFromTau(params.tauMag, coeffs.magTs);
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	ed93 7b02 	vldr	d7, [r3, #8]
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	ed93 6b2e 	vldr	d6, [r3, #184]	@ 0xb8
 801ea14:	eeb0 1b46 	vmov.f64	d1, d6
 801ea18:	eeb0 0b47 	vmov.f64	d0, d7
 801ea1c:	f7ff fcd4 	bl	801e3c8 <_ZN8BasicVQF11gainFromTauEdd>
 801ea20:	eeb0 7b40 	vmov.f64	d7, d0
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8

    resetState();
 801ea2a:	6878      	ldr	r0, [r7, #4]
 801ea2c:	f7ff f9c8 	bl	801ddc0 <_ZN8BasicVQF10resetStateEv>
}
 801ea30:	bf00      	nop
 801ea32:	3708      	adds	r7, #8
 801ea34:	46bd      	mov	sp, r7
 801ea36:	bd80      	pop	{r7, pc}
 801ea38:	08024c30 	.word	0x08024c30
 801ea3c:	08024c44 	.word	0x08024c44
 801ea40:	08024ac8 	.word	0x08024ac8
 801ea44:	08024c5c 	.word	0x08024c5c
 801ea48:	08024c70 	.word	0x08024c70

0801ea4c <_ZSt4copyIPdS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 801ea4c:	b590      	push	{r4, r7, lr}
 801ea4e:	b085      	sub	sp, #20
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	60f8      	str	r0, [r7, #12]
 801ea54:	60b9      	str	r1, [r7, #8]
 801ea56:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801ea58:	68f8      	ldr	r0, [r7, #12]
 801ea5a:	f000 f82d 	bl	801eab8 <_ZSt12__miter_baseIPdET_S1_>
 801ea5e:	4604      	mov	r4, r0
 801ea60:	68b8      	ldr	r0, [r7, #8]
 801ea62:	f000 f829 	bl	801eab8 <_ZSt12__miter_baseIPdET_S1_>
 801ea66:	4603      	mov	r3, r0
 801ea68:	687a      	ldr	r2, [r7, #4]
 801ea6a:	4619      	mov	r1, r3
 801ea6c:	4620      	mov	r0, r4
 801ea6e:	f000 f82e 	bl	801eace <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>
 801ea72:	4603      	mov	r3, r0
    }
 801ea74:	4618      	mov	r0, r3
 801ea76:	3714      	adds	r7, #20
 801ea78:	46bd      	mov	sp, r7
 801ea7a:	bd90      	pop	{r4, r7, pc}

0801ea7c <_ZSt4fillIPdiEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 801ea7c:	b580      	push	{r7, lr}
 801ea7e:	b084      	sub	sp, #16
 801ea80:	af00      	add	r7, sp, #0
 801ea82:	60f8      	str	r0, [r7, #12]
 801ea84:	60b9      	str	r1, [r7, #8]
 801ea86:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 801ea88:	687a      	ldr	r2, [r7, #4]
 801ea8a:	68b9      	ldr	r1, [r7, #8]
 801ea8c:	68f8      	ldr	r0, [r7, #12]
 801ea8e:	f000 f841 	bl	801eb14 <_ZSt8__fill_aIPdiEvT_S1_RKT0_>
    }
 801ea92:	bf00      	nop
 801ea94:	3710      	adds	r7, #16
 801ea96:	46bd      	mov	sp, r7
 801ea98:	bd80      	pop	{r7, pc}

0801ea9a <_ZSt4fillIPddEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 801ea9a:	b580      	push	{r7, lr}
 801ea9c:	b084      	sub	sp, #16
 801ea9e:	af00      	add	r7, sp, #0
 801eaa0:	60f8      	str	r0, [r7, #12]
 801eaa2:	60b9      	str	r1, [r7, #8]
 801eaa4:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 801eaa6:	687a      	ldr	r2, [r7, #4]
 801eaa8:	68b9      	ldr	r1, [r7, #8]
 801eaaa:	68f8      	ldr	r0, [r7, #12]
 801eaac:	f000 f841 	bl	801eb32 <_ZSt8__fill_aIPddEvT_S1_RKT0_>
    }
 801eab0:	bf00      	nop
 801eab2:	3710      	adds	r7, #16
 801eab4:	46bd      	mov	sp, r7
 801eab6:	bd80      	pop	{r7, pc}

0801eab8 <_ZSt12__miter_baseIPdET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801eab8:	b480      	push	{r7}
 801eaba:	b083      	sub	sp, #12
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	6078      	str	r0, [r7, #4]
    { return __it; }
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	4618      	mov	r0, r3
 801eac4:	370c      	adds	r7, #12
 801eac6:	46bd      	mov	sp, r7
 801eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eacc:	4770      	bx	lr

0801eace <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801eace:	b5b0      	push	{r4, r5, r7, lr}
 801ead0:	b084      	sub	sp, #16
 801ead2:	af00      	add	r7, sp, #0
 801ead4:	60f8      	str	r0, [r7, #12]
 801ead6:	60b9      	str	r1, [r7, #8]
 801ead8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801eada:	68f8      	ldr	r0, [r7, #12]
 801eadc:	f000 f838 	bl	801eb50 <_ZSt12__niter_baseIPdET_S1_>
 801eae0:	4604      	mov	r4, r0
 801eae2:	68b8      	ldr	r0, [r7, #8]
 801eae4:	f000 f834 	bl	801eb50 <_ZSt12__niter_baseIPdET_S1_>
 801eae8:	4605      	mov	r5, r0
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	4618      	mov	r0, r3
 801eaee:	f000 f82f 	bl	801eb50 <_ZSt12__niter_baseIPdET_S1_>
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	461a      	mov	r2, r3
 801eaf6:	4629      	mov	r1, r5
 801eaf8:	4620      	mov	r0, r4
 801eafa:	f000 f840 	bl	801eb7e <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>
 801eafe:	4602      	mov	r2, r0
 801eb00:	1d3b      	adds	r3, r7, #4
 801eb02:	4611      	mov	r1, r2
 801eb04:	4618      	mov	r0, r3
 801eb06:	f000 f82e 	bl	801eb66 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 801eb0a:	4603      	mov	r3, r0
    }
 801eb0c:	4618      	mov	r0, r3
 801eb0e:	3710      	adds	r7, #16
 801eb10:	46bd      	mov	sp, r7
 801eb12:	bdb0      	pop	{r4, r5, r7, pc}

0801eb14 <_ZSt8__fill_aIPdiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b084      	sub	sp, #16
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	60f8      	str	r0, [r7, #12]
 801eb1c:	60b9      	str	r1, [r7, #8]
 801eb1e:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 801eb20:	687a      	ldr	r2, [r7, #4]
 801eb22:	68b9      	ldr	r1, [r7, #8]
 801eb24:	68f8      	ldr	r0, [r7, #12]
 801eb26:	f000 f83a 	bl	801eb9e <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 801eb2a:	bf00      	nop
 801eb2c:	3710      	adds	r7, #16
 801eb2e:	46bd      	mov	sp, r7
 801eb30:	bd80      	pop	{r7, pc}

0801eb32 <_ZSt8__fill_aIPddEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 801eb32:	b580      	push	{r7, lr}
 801eb34:	b084      	sub	sp, #16
 801eb36:	af00      	add	r7, sp, #0
 801eb38:	60f8      	str	r0, [r7, #12]
 801eb3a:	60b9      	str	r1, [r7, #8]
 801eb3c:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 801eb3e:	687a      	ldr	r2, [r7, #4]
 801eb40:	68b9      	ldr	r1, [r7, #8]
 801eb42:	68f8      	ldr	r0, [r7, #12]
 801eb44:	f000 f84b 	bl	801ebde <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 801eb48:	bf00      	nop
 801eb4a:	3710      	adds	r7, #16
 801eb4c:	46bd      	mov	sp, r7
 801eb4e:	bd80      	pop	{r7, pc}

0801eb50 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 801eb50:	b480      	push	{r7}
 801eb52:	b083      	sub	sp, #12
 801eb54:	af00      	add	r7, sp, #0
 801eb56:	6078      	str	r0, [r7, #4]
    { return __it; }
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	370c      	adds	r7, #12
 801eb5e:	46bd      	mov	sp, r7
 801eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb64:	4770      	bx	lr

0801eb66 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801eb66:	b480      	push	{r7}
 801eb68:	b083      	sub	sp, #12
 801eb6a:	af00      	add	r7, sp, #0
 801eb6c:	6078      	str	r0, [r7, #4]
 801eb6e:	6039      	str	r1, [r7, #0]
    { return __res; }
 801eb70:	683b      	ldr	r3, [r7, #0]
 801eb72:	4618      	mov	r0, r3
 801eb74:	370c      	adds	r7, #12
 801eb76:	46bd      	mov	sp, r7
 801eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb7c:	4770      	bx	lr

0801eb7e <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801eb7e:	b580      	push	{r7, lr}
 801eb80:	b084      	sub	sp, #16
 801eb82:	af00      	add	r7, sp, #0
 801eb84:	60f8      	str	r0, [r7, #12]
 801eb86:	60b9      	str	r1, [r7, #8]
 801eb88:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801eb8a:	687a      	ldr	r2, [r7, #4]
 801eb8c:	68b9      	ldr	r1, [r7, #8]
 801eb8e:	68f8      	ldr	r0, [r7, #12]
 801eb90:	f000 f844 	bl	801ec1c <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>
 801eb94:	4603      	mov	r3, r0
 801eb96:	4618      	mov	r0, r3
 801eb98:	3710      	adds	r7, #16
 801eb9a:	46bd      	mov	sp, r7
 801eb9c:	bd80      	pop	{r7, pc}

0801eb9e <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801eb9e:	b480      	push	{r7}
 801eba0:	b087      	sub	sp, #28
 801eba2:	af00      	add	r7, sp, #0
 801eba4:	60f8      	str	r0, [r7, #12]
 801eba6:	60b9      	str	r1, [r7, #8]
 801eba8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 801ebb0:	e00a      	b.n	801ebc8 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x2a>
	*__first = __tmp;
 801ebb2:	697b      	ldr	r3, [r7, #20]
 801ebb4:	ee07 3a90 	vmov	s15, r3
 801ebb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ebbc:	68fb      	ldr	r3, [r7, #12]
 801ebbe:	ed83 7b00 	vstr	d7, [r3]
      for (; __first != __last; ++__first)
 801ebc2:	68fb      	ldr	r3, [r7, #12]
 801ebc4:	3308      	adds	r3, #8
 801ebc6:	60fb      	str	r3, [r7, #12]
 801ebc8:	68fa      	ldr	r2, [r7, #12]
 801ebca:	68bb      	ldr	r3, [r7, #8]
 801ebcc:	429a      	cmp	r2, r3
 801ebce:	d1f0      	bne.n	801ebb2 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 801ebd0:	bf00      	nop
 801ebd2:	bf00      	nop
 801ebd4:	371c      	adds	r7, #28
 801ebd6:	46bd      	mov	sp, r7
 801ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebdc:	4770      	bx	lr

0801ebde <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801ebde:	b480      	push	{r7}
 801ebe0:	b087      	sub	sp, #28
 801ebe2:	af00      	add	r7, sp, #0
 801ebe4:	60f8      	str	r0, [r7, #12]
 801ebe6:	60b9      	str	r1, [r7, #8]
 801ebe8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (; __first != __last; ++__first)
 801ebf4:	e007      	b.n	801ec06 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 801ebf6:	68f9      	ldr	r1, [r7, #12]
 801ebf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ebfc:	e9c1 2300 	strd	r2, r3, [r1]
      for (; __first != __last; ++__first)
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	3308      	adds	r3, #8
 801ec04:	60fb      	str	r3, [r7, #12]
 801ec06:	68fa      	ldr	r2, [r7, #12]
 801ec08:	68bb      	ldr	r3, [r7, #8]
 801ec0a:	429a      	cmp	r2, r3
 801ec0c:	d1f3      	bne.n	801ebf6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x18>
    }
 801ec0e:	bf00      	nop
 801ec10:	bf00      	nop
 801ec12:	371c      	adds	r7, #28
 801ec14:	46bd      	mov	sp, r7
 801ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec1a:	4770      	bx	lr

0801ec1c <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b084      	sub	sp, #16
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	60f8      	str	r0, [r7, #12]
 801ec24:	60b9      	str	r1, [r7, #8]
 801ec26:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801ec28:	687a      	ldr	r2, [r7, #4]
 801ec2a:	68b9      	ldr	r1, [r7, #8]
 801ec2c:	68f8      	ldr	r0, [r7, #12]
 801ec2e:	f000 f805 	bl	801ec3c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 801ec32:	4603      	mov	r3, r0
    }
 801ec34:	4618      	mov	r0, r3
 801ec36:	3710      	adds	r7, #16
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	bd80      	pop	{r7, pc}

0801ec3c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b086      	sub	sp, #24
 801ec40:	af00      	add	r7, sp, #0
 801ec42:	60f8      	str	r0, [r7, #12]
 801ec44:	60b9      	str	r1, [r7, #8]
 801ec46:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801ec48:	68ba      	ldr	r2, [r7, #8]
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	1ad3      	subs	r3, r2, r3
 801ec4e:	10db      	asrs	r3, r3, #3
 801ec50:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801ec52:	697b      	ldr	r3, [r7, #20]
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d006      	beq.n	801ec66 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801ec58:	697b      	ldr	r3, [r7, #20]
 801ec5a:	00db      	lsls	r3, r3, #3
 801ec5c:	461a      	mov	r2, r3
 801ec5e:	68f9      	ldr	r1, [r7, #12]
 801ec60:	6878      	ldr	r0, [r7, #4]
 801ec62:	f003 ff44 	bl	8022aee <memmove>
	  return __result + _Num;
 801ec66:	697b      	ldr	r3, [r7, #20]
 801ec68:	00db      	lsls	r3, r3, #3
 801ec6a:	687a      	ldr	r2, [r7, #4]
 801ec6c:	4413      	add	r3, r2
	}
 801ec6e:	4618      	mov	r0, r3
 801ec70:	3718      	adds	r7, #24
 801ec72:	46bd      	mov	sp, r7
 801ec74:	bd80      	pop	{r7, pc}
	...

0801ec78 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 801ec78:	b480      	push	{r7}
 801ec7a:	b083      	sub	sp, #12
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 801ec86:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801ec8e:	619a      	str	r2, [r3, #24]
	q1 = 0.0f;
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	f04f 0200 	mov.w	r2, #0
 801ec96:	61da      	str	r2, [r3, #28]
	q2 = 0.0f;
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	f04f 0200 	mov.w	r2, #0
 801ec9e:	621a      	str	r2, [r3, #32]
	q3 = 0.0f;
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	f04f 0200 	mov.w	r2, #0
 801eca6:	625a      	str	r2, [r3, #36]	@ 0x24
	invSampleFreq = 1.0f / sampleFreqDef;
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	4a06      	ldr	r2, [pc, #24]	@ (801ecc4 <_ZN8MadgwickC1Ev+0x4c>)
 801ecac:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	2200      	movs	r2, #0
 801ecb2:	751a      	strb	r2, [r3, #20]
}
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	370c      	adds	r7, #12
 801ecba:	46bd      	mov	sp, r7
 801ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecc0:	4770      	bx	lr
 801ecc2:	bf00      	nop
 801ecc4:	3c23d70a 	.word	0x3c23d70a

0801ecc8 <_ZN8Madgwick9updateIMUEffffff>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 801ecc8:	b580      	push	{r7, lr}
 801ecca:	b09e      	sub	sp, #120	@ 0x78
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	61f8      	str	r0, [r7, #28]
 801ecd0:	ed87 0a06 	vstr	s0, [r7, #24]
 801ecd4:	edc7 0a05 	vstr	s1, [r7, #20]
 801ecd8:	ed87 1a04 	vstr	s2, [r7, #16]
 801ecdc:	edc7 1a03 	vstr	s3, [r7, #12]
 801ece0:	ed87 2a02 	vstr	s4, [r7, #8]
 801ece4:	edc7 2a01 	vstr	s5, [r7, #4]
//	gx *= 0.0174533f;
//	gy *= 0.0174533f;
//	gz *= 0.0174533f;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 801ece8:	69fb      	ldr	r3, [r7, #28]
 801ecea:	edd3 7a07 	vldr	s15, [r3, #28]
 801ecee:	eeb1 7a67 	vneg.f32	s14, s15
 801ecf2:	edd7 7a06 	vldr	s15, [r7, #24]
 801ecf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ecfa:	69fb      	ldr	r3, [r7, #28]
 801ecfc:	edd3 6a08 	vldr	s13, [r3, #32]
 801ed00:	edd7 7a05 	vldr	s15, [r7, #20]
 801ed04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed08:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ed0c:	69fb      	ldr	r3, [r7, #28]
 801ed0e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801ed12:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ed22:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed26:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 801ed2a:	69fb      	ldr	r3, [r7, #28]
 801ed2c:	ed93 7a06 	vldr	s14, [r3, #24]
 801ed30:	edd7 7a06 	vldr	s15, [r7, #24]
 801ed34:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed38:	69fb      	ldr	r3, [r7, #28]
 801ed3a:	edd3 6a08 	vldr	s13, [r3, #32]
 801ed3e:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed46:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ed4a:	69fb      	ldr	r3, [r7, #28]
 801ed4c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801ed50:	edd7 7a05 	vldr	s15, [r7, #20]
 801ed54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed58:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed5c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ed60:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed64:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 801ed68:	69fb      	ldr	r3, [r7, #28]
 801ed6a:	ed93 7a06 	vldr	s14, [r3, #24]
 801ed6e:	edd7 7a05 	vldr	s15, [r7, #20]
 801ed72:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed76:	69fb      	ldr	r3, [r7, #28]
 801ed78:	edd3 6a07 	vldr	s13, [r3, #28]
 801ed7c:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed84:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ed88:	69fb      	ldr	r3, [r7, #28]
 801ed8a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801ed8e:	edd7 7a06 	vldr	s15, [r7, #24]
 801ed92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed96:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ed9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ed9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eda2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 801eda6:	69fb      	ldr	r3, [r7, #28]
 801eda8:	ed93 7a06 	vldr	s14, [r3, #24]
 801edac:	edd7 7a04 	vldr	s15, [r7, #16]
 801edb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801edb4:	69fb      	ldr	r3, [r7, #28]
 801edb6:	edd3 6a07 	vldr	s13, [r3, #28]
 801edba:	edd7 7a05 	vldr	s15, [r7, #20]
 801edbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801edc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801edc6:	69fb      	ldr	r3, [r7, #28]
 801edc8:	edd3 6a08 	vldr	s13, [r3, #32]
 801edcc:	edd7 7a06 	vldr	s15, [r7, #24]
 801edd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801edd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801edd8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801eddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ede0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 801ede4:	edd7 7a03 	vldr	s15, [r7, #12]
 801ede8:	eef5 7a40 	vcmp.f32	s15, #0.0
 801edec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edf0:	d10e      	bne.n	801ee10 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801edf2:	edd7 7a02 	vldr	s15, [r7, #8]
 801edf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 801edfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edfe:	d107      	bne.n	801ee10 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801ee00:	edd7 7a01 	vldr	s15, [r7, #4]
 801ee04:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ee08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee0c:	f000 81db 	beq.w	801f1c6 <_ZN8Madgwick9updateIMUEffffff+0x4fe>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 801ee10:	edd7 7a03 	vldr	s15, [r7, #12]
 801ee14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801ee18:	edd7 7a02 	vldr	s15, [r7, #8]
 801ee1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ee20:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee24:	edd7 7a01 	vldr	s15, [r7, #4]
 801ee28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ee2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ee30:	eeb0 0a67 	vmov.f32	s0, s15
 801ee34:	f000 fa5e 	bl	801f2f4 <_ZN8Madgwick7invSqrtEf>
 801ee38:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 801ee3c:	ed97 7a03 	vldr	s14, [r7, #12]
 801ee40:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801ee44:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee48:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 801ee4c:	ed97 7a02 	vldr	s14, [r7, #8]
 801ee50:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801ee54:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee58:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 801ee5c:	ed97 7a01 	vldr	s14, [r7, #4]
 801ee60:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801ee64:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee68:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 801ee6c:	69fb      	ldr	r3, [r7, #28]
 801ee6e:	edd3 7a06 	vldr	s15, [r3, #24]
 801ee72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee76:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 801ee7a:	69fb      	ldr	r3, [r7, #28]
 801ee7c:	edd3 7a07 	vldr	s15, [r3, #28]
 801ee80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee84:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 801ee88:	69fb      	ldr	r3, [r7, #28]
 801ee8a:	edd3 7a08 	vldr	s15, [r3, #32]
 801ee8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee92:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 801ee96:	69fb      	ldr	r3, [r7, #28]
 801ee98:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801ee9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801eea0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 801eea4:	69fb      	ldr	r3, [r7, #28]
 801eea6:	edd3 7a06 	vldr	s15, [r3, #24]
 801eeaa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801eeae:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eeb2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 801eeb6:	69fb      	ldr	r3, [r7, #28]
 801eeb8:	edd3 7a07 	vldr	s15, [r3, #28]
 801eebc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801eec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eec4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 801eec8:	69fb      	ldr	r3, [r7, #28]
 801eeca:	edd3 7a08 	vldr	s15, [r3, #32]
 801eece:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801eed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eed6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 801eeda:	69fb      	ldr	r3, [r7, #28]
 801eedc:	edd3 7a07 	vldr	s15, [r3, #28]
 801eee0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801eee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eee8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 801eeec:	69fb      	ldr	r3, [r7, #28]
 801eeee:	edd3 7a08 	vldr	s15, [r3, #32]
 801eef2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801eef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eefa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 801eefe:	69fb      	ldr	r3, [r7, #28]
 801ef00:	ed93 7a06 	vldr	s14, [r3, #24]
 801ef04:	69fb      	ldr	r3, [r7, #28]
 801ef06:	edd3 7a06 	vldr	s15, [r3, #24]
 801ef0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef0e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 801ef12:	69fb      	ldr	r3, [r7, #28]
 801ef14:	ed93 7a07 	vldr	s14, [r3, #28]
 801ef18:	69fb      	ldr	r3, [r7, #28]
 801ef1a:	edd3 7a07 	vldr	s15, [r3, #28]
 801ef1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef22:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 801ef26:	69fb      	ldr	r3, [r7, #28]
 801ef28:	ed93 7a08 	vldr	s14, [r3, #32]
 801ef2c:	69fb      	ldr	r3, [r7, #28]
 801ef2e:	edd3 7a08 	vldr	s15, [r3, #32]
 801ef32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef36:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 801ef3a:	69fb      	ldr	r3, [r7, #28]
 801ef3c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801ef40:	69fb      	ldr	r3, [r7, #28]
 801ef42:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801ef46:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef4a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 801ef4e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801ef52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801ef56:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ef5a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 801ef5e:	edd7 7a03 	vldr	s15, [r7, #12]
 801ef62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef66:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ef6a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 801ef6e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801ef72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef76:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ef7a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 801ef7e:	edd7 7a02 	vldr	s15, [r7, #8]
 801ef82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef86:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ef8a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 801ef8e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801ef92:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801ef96:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ef9a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 801ef9e:	edd7 7a03 	vldr	s15, [r7, #12]
 801efa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efaa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801efae:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801efb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801efb6:	69fb      	ldr	r3, [r7, #28]
 801efb8:	edd3 7a07 	vldr	s15, [r3, #28]
 801efbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801efc4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 801efc8:	edd7 7a02 	vldr	s15, [r7, #8]
 801efcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efd4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801efd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efdc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 801efe0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801efe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801efec:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 801eff0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801eff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801eff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801effc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 801f000:	edd7 7a01 	vldr	s15, [r7, #4]
 801f004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f00c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 801f010:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801f014:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801f018:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f01c:	69fb      	ldr	r3, [r7, #28]
 801f01e:	edd3 7a08 	vldr	s15, [r3, #32]
 801f022:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f026:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 801f02a:	edd7 7a03 	vldr	s15, [r7, #12]
 801f02e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f032:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f036:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 801f03a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801f03e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f042:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f046:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 801f04a:	edd7 7a02 	vldr	s15, [r7, #8]
 801f04e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f052:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f056:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801f05a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f05e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 801f062:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801f066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f06a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f06e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 801f072:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801f076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f07a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f07e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 801f082:	edd7 7a01 	vldr	s15, [r7, #4]
 801f086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f08a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f08e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 801f092:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801f096:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801f09a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f09e:	69fb      	ldr	r3, [r7, #28]
 801f0a0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801f0a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f0a8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 801f0ac:	edd7 7a03 	vldr	s15, [r7, #12]
 801f0b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f0b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f0b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801f0bc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801f0c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801f0c4:	69fb      	ldr	r3, [r7, #28]
 801f0c6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801f0ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f0ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f0d2:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 801f0d6:	edd7 7a02 	vldr	s15, [r7, #8]
 801f0da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f0de:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f0e2:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 801f0e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801f0ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801f0ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801f0f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f0f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f0fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801f0fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f102:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f106:	edd7 7a08 	vldr	s15, [r7, #32]
 801f10a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f10e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f112:	eeb0 0a67 	vmov.f32	s0, s15
 801f116:	f000 f8ed 	bl	801f2f4 <_ZN8Madgwick7invSqrtEf>
 801f11a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 801f11e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801f122:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f12a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 801f12e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801f132:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f136:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f13a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 801f13e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801f142:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f146:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f14a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 801f14e:	ed97 7a08 	vldr	s14, [r7, #32]
 801f152:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f156:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f15a:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 801f15e:	69fb      	ldr	r3, [r7, #28]
 801f160:	ed93 7a00 	vldr	s14, [r3]
 801f164:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801f168:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f16c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 801f170:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f174:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 801f178:	69fb      	ldr	r3, [r7, #28]
 801f17a:	ed93 7a00 	vldr	s14, [r3]
 801f17e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801f182:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f186:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 801f18a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f18e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 801f192:	69fb      	ldr	r3, [r7, #28]
 801f194:	ed93 7a00 	vldr	s14, [r3]
 801f198:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801f19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f1a0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 801f1a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f1a8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 801f1ac:	69fb      	ldr	r3, [r7, #28]
 801f1ae:	ed93 7a00 	vldr	s14, [r3]
 801f1b2:	edd7 7a08 	vldr	s15, [r7, #32]
 801f1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f1ba:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 801f1be:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f1c2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 801f1c6:	69fb      	ldr	r3, [r7, #28]
 801f1c8:	ed93 7a06 	vldr	s14, [r3, #24]
 801f1cc:	69fb      	ldr	r3, [r7, #28]
 801f1ce:	edd3 6a04 	vldr	s13, [r3, #16]
 801f1d2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801f1d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f1da:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1de:	69fb      	ldr	r3, [r7, #28]
 801f1e0:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 += qDot2 * invSampleFreq;
 801f1e4:	69fb      	ldr	r3, [r7, #28]
 801f1e6:	ed93 7a07 	vldr	s14, [r3, #28]
 801f1ea:	69fb      	ldr	r3, [r7, #28]
 801f1ec:	edd3 6a04 	vldr	s13, [r3, #16]
 801f1f0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801f1f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1fc:	69fb      	ldr	r3, [r7, #28]
 801f1fe:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 += qDot3 * invSampleFreq;
 801f202:	69fb      	ldr	r3, [r7, #28]
 801f204:	ed93 7a08 	vldr	s14, [r3, #32]
 801f208:	69fb      	ldr	r3, [r7, #28]
 801f20a:	edd3 6a04 	vldr	s13, [r3, #16]
 801f20e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801f212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f21a:	69fb      	ldr	r3, [r7, #28]
 801f21c:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 += qDot4 * invSampleFreq;
 801f220:	69fb      	ldr	r3, [r7, #28]
 801f222:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801f226:	69fb      	ldr	r3, [r7, #28]
 801f228:	edd3 6a04 	vldr	s13, [r3, #16]
 801f22c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801f230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f234:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f238:	69fb      	ldr	r3, [r7, #28]
 801f23a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 801f23e:	69fb      	ldr	r3, [r7, #28]
 801f240:	ed93 7a06 	vldr	s14, [r3, #24]
 801f244:	69fb      	ldr	r3, [r7, #28]
 801f246:	edd3 7a06 	vldr	s15, [r3, #24]
 801f24a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f24e:	69fb      	ldr	r3, [r7, #28]
 801f250:	edd3 6a07 	vldr	s13, [r3, #28]
 801f254:	69fb      	ldr	r3, [r7, #28]
 801f256:	edd3 7a07 	vldr	s15, [r3, #28]
 801f25a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f25e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f262:	69fb      	ldr	r3, [r7, #28]
 801f264:	edd3 6a08 	vldr	s13, [r3, #32]
 801f268:	69fb      	ldr	r3, [r7, #28]
 801f26a:	edd3 7a08 	vldr	s15, [r3, #32]
 801f26e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f272:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f276:	69fb      	ldr	r3, [r7, #28]
 801f278:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801f27c:	69fb      	ldr	r3, [r7, #28]
 801f27e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801f282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f286:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f28a:	eeb0 0a67 	vmov.f32	s0, s15
 801f28e:	f000 f831 	bl	801f2f4 <_ZN8Madgwick7invSqrtEf>
 801f292:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 801f296:	69fb      	ldr	r3, [r7, #28]
 801f298:	ed93 7a06 	vldr	s14, [r3, #24]
 801f29c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2a4:	69fb      	ldr	r3, [r7, #28]
 801f2a6:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 *= recipNorm;
 801f2aa:	69fb      	ldr	r3, [r7, #28]
 801f2ac:	ed93 7a07 	vldr	s14, [r3, #28]
 801f2b0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2b8:	69fb      	ldr	r3, [r7, #28]
 801f2ba:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 *= recipNorm;
 801f2be:	69fb      	ldr	r3, [r7, #28]
 801f2c0:	ed93 7a08 	vldr	s14, [r3, #32]
 801f2c4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2cc:	69fb      	ldr	r3, [r7, #28]
 801f2ce:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 *= recipNorm;
 801f2d2:	69fb      	ldr	r3, [r7, #28]
 801f2d4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801f2d8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801f2dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2e0:	69fb      	ldr	r3, [r7, #28]
 801f2e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	anglesComputed = 0;
 801f2e6:	69fb      	ldr	r3, [r7, #28]
 801f2e8:	2200      	movs	r2, #0
 801f2ea:	751a      	strb	r2, [r3, #20]
}
 801f2ec:	bf00      	nop
 801f2ee:	3778      	adds	r7, #120	@ 0x78
 801f2f0:	46bd      	mov	sp, r7
 801f2f2:	bd80      	pop	{r7, pc}

0801f2f4 <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 801f2f4:	b480      	push	{r7}
 801f2f6:	b087      	sub	sp, #28
 801f2f8:	af00      	add	r7, sp, #0
 801f2fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 801f2fe:	edd7 7a01 	vldr	s15, [r7, #4]
 801f302:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801f306:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f30a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 801f312:	f107 0310 	add.w	r3, r7, #16
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 801f31a:	68fb      	ldr	r3, [r7, #12]
 801f31c:	105a      	asrs	r2, r3, #1
 801f31e:	4b1c      	ldr	r3, [pc, #112]	@ (801f390 <_ZN8Madgwick7invSqrtEf+0x9c>)
 801f320:	1a9b      	subs	r3, r3, r2
 801f322:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 801f324:	f107 030c 	add.w	r3, r7, #12
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801f32c:	ed97 7a04 	vldr	s14, [r7, #16]
 801f330:	edd7 7a05 	vldr	s15, [r7, #20]
 801f334:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f338:	edd7 7a04 	vldr	s15, [r7, #16]
 801f33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f340:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801f344:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f348:	edd7 7a04 	vldr	s15, [r7, #16]
 801f34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f350:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801f354:	ed97 7a04 	vldr	s14, [r7, #16]
 801f358:	edd7 7a05 	vldr	s15, [r7, #20]
 801f35c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f360:	edd7 7a04 	vldr	s15, [r7, #16]
 801f364:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f368:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801f36c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f370:	edd7 7a04 	vldr	s15, [r7, #16]
 801f374:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f378:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 801f37c:	693b      	ldr	r3, [r7, #16]
 801f37e:	ee07 3a90 	vmov	s15, r3
}
 801f382:	eeb0 0a67 	vmov.f32	s0, s15
 801f386:	371c      	adds	r7, #28
 801f388:	46bd      	mov	sp, r7
 801f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f38e:	4770      	bx	lr
 801f390:	5f3759df 	.word	0x5f3759df

0801f394 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>:

#include "core_hardware_button.h"



core_hardware_Button::core_hardware_Button(GPIO_TypeDef* port, uint16_t pin) {
 801f394:	b480      	push	{r7}
 801f396:	b085      	sub	sp, #20
 801f398:	af00      	add	r7, sp, #0
 801f39a:	60f8      	str	r0, [r7, #12]
 801f39c:	60b9      	str	r1, [r7, #8]
 801f39e:	4613      	mov	r3, r2
 801f3a0:	80fb      	strh	r3, [r7, #6]
	this->port = port;
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	68ba      	ldr	r2, [r7, #8]
 801f3a6:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	88fa      	ldrh	r2, [r7, #6]
 801f3ac:	809a      	strh	r2, [r3, #4]
}
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	4618      	mov	r0, r3
 801f3b2:	3714      	adds	r7, #20
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ba:	4770      	bx	lr

0801f3bc <_ZN20core_hardware_Button5checkEv>:


uint8_t core_hardware_Button::check() {
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	b082      	sub	sp, #8
 801f3c0:	af00      	add	r7, sp, #0
 801f3c2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	681a      	ldr	r2, [r3, #0]
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	889b      	ldrh	r3, [r3, #4]
 801f3cc:	4619      	mov	r1, r3
 801f3ce:	4610      	mov	r0, r2
 801f3d0:	f7e7 fa96 	bl	8006900 <HAL_GPIO_ReadPin>
 801f3d4:	4603      	mov	r3, r0
}
 801f3d6:	4618      	mov	r0, r3
 801f3d8:	3708      	adds	r7, #8
 801f3da:	46bd      	mov	sp, r7
 801f3dc:	bd80      	pop	{r7, pc}

0801f3de <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>:
 */


#include "core_hardware_led.h"

core_hardware_LED::core_hardware_LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 801f3de:	b480      	push	{r7}
 801f3e0:	b085      	sub	sp, #20
 801f3e2:	af00      	add	r7, sp, #0
 801f3e4:	60f8      	str	r0, [r7, #12]
 801f3e6:	60b9      	str	r1, [r7, #8]
 801f3e8:	4613      	mov	r3, r2
 801f3ea:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 801f3ec:	68fb      	ldr	r3, [r7, #12]
 801f3ee:	68ba      	ldr	r2, [r7, #8]
 801f3f0:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 801f3f2:	68fb      	ldr	r3, [r7, #12]
 801f3f4:	88fa      	ldrh	r2, [r7, #6]
 801f3f6:	809a      	strh	r2, [r3, #4]
}
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	3714      	adds	r7, #20
 801f3fe:	46bd      	mov	sp, r7
 801f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f404:	4770      	bx	lr

0801f406 <_ZN17core_hardware_LED2onEv>:

void core_hardware_LED::on() {
 801f406:	b580      	push	{r7, lr}
 801f408:	b082      	sub	sp, #8
 801f40a:	af00      	add	r7, sp, #0
 801f40c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	6818      	ldr	r0, [r3, #0]
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	889b      	ldrh	r3, [r3, #4]
 801f416:	2201      	movs	r2, #1
 801f418:	4619      	mov	r1, r3
 801f41a:	f7e7 fa89 	bl	8006930 <HAL_GPIO_WritePin>
}
 801f41e:	bf00      	nop
 801f420:	3708      	adds	r7, #8
 801f422:	46bd      	mov	sp, r7
 801f424:	bd80      	pop	{r7, pc}

0801f426 <_ZN17core_hardware_LED3offEv>:


void core_hardware_LED::off() {
 801f426:	b580      	push	{r7, lr}
 801f428:	b082      	sub	sp, #8
 801f42a:	af00      	add	r7, sp, #0
 801f42c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	6818      	ldr	r0, [r3, #0]
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	889b      	ldrh	r3, [r3, #4]
 801f436:	2200      	movs	r2, #0
 801f438:	4619      	mov	r1, r3
 801f43a:	f7e7 fa79 	bl	8006930 <HAL_GPIO_WritePin>
}
 801f43e:	bf00      	nop
 801f440:	3708      	adds	r7, #8
 801f442:	46bd      	mov	sp, r7
 801f444:	bd80      	pop	{r7, pc}

0801f446 <_ZN17core_hardware_LED6toggleEv>:

void core_hardware_LED::toggle() {
 801f446:	b580      	push	{r7, lr}
 801f448:	b082      	sub	sp, #8
 801f44a:	af00      	add	r7, sp, #0
 801f44c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	681a      	ldr	r2, [r3, #0]
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	889b      	ldrh	r3, [r3, #4]
 801f456:	4619      	mov	r1, r3
 801f458:	4610      	mov	r0, r2
 801f45a:	f7e7 fa82 	bl	8006962 <HAL_GPIO_TogglePin>
}
 801f45e:	bf00      	nop
 801f460:	3708      	adds	r7, #8
 801f462:	46bd      	mov	sp, r7
 801f464:	bd80      	pop	{r7, pc}
	...

0801f468 <_Z15spi_callback_rxP19__SPI_HandleTypeDef>:
#include "core_hardware_spi.h"

core_hardware_SPI_slave *active_spi_slave = NULL;

/* ====================================================== */
void spi_callback_rx(SPI_HandleTypeDef *hspi) {
 801f468:	b580      	push	{r7, lr}
 801f46a:	b082      	sub	sp, #8
 801f46c:	af00      	add	r7, sp, #0
 801f46e:	6078      	str	r0, [r7, #4]

	if (active_spi_slave != NULL) {
 801f470:	4b06      	ldr	r3, [pc, #24]	@ (801f48c <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d004      	beq.n	801f482 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rx_cmplt_function();
 801f478:	4b04      	ldr	r3, [pc, #16]	@ (801f48c <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	4618      	mov	r0, r3
 801f47e:	f000 f8d9 	bl	801f634 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>
	}
}
 801f482:	bf00      	nop
 801f484:	3708      	adds	r7, #8
 801f486:	46bd      	mov	sp, r7
 801f488:	bd80      	pop	{r7, pc}
 801f48a:	bf00      	nop
 801f48c:	240286d8 	.word	0x240286d8

0801f490 <_Z15spi_callback_txP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_tx(SPI_HandleTypeDef *hspi) {
 801f490:	b580      	push	{r7, lr}
 801f492:	b082      	sub	sp, #8
 801f494:	af00      	add	r7, sp, #0
 801f496:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801f498:	4b06      	ldr	r3, [pc, #24]	@ (801f4b4 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d004      	beq.n	801f4aa <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->tx_cmplt_function();
 801f4a0:	4b04      	ldr	r3, [pc, #16]	@ (801f4b4 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	4618      	mov	r0, r3
 801f4a6:	f000 f8d6 	bl	801f656 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>
	}
}
 801f4aa:	bf00      	nop
 801f4ac:	3708      	adds	r7, #8
 801f4ae:	46bd      	mov	sp, r7
 801f4b0:	bd80      	pop	{r7, pc}
 801f4b2:	bf00      	nop
 801f4b4:	240286d8 	.word	0x240286d8

0801f4b8 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_rxtx(SPI_HandleTypeDef *hspi) {
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b082      	sub	sp, #8
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801f4c0:	4b06      	ldr	r3, [pc, #24]	@ (801f4dc <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d004      	beq.n	801f4d2 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rxtx_cmplt_function();
 801f4c8:	4b04      	ldr	r3, [pc, #16]	@ (801f4dc <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	f000 f8d4 	bl	801f67a <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>
	}
}
 801f4d2:	bf00      	nop
 801f4d4:	3708      	adds	r7, #8
 801f4d6:	46bd      	mov	sp, r7
 801f4d8:	bd80      	pop	{r7, pc}
 801f4da:	bf00      	nop
 801f4dc:	240286d8 	.word	0x240286d8

0801f4e0 <_ZN29core_hardware_spi_callbacks_tC1Ev>:
	SPI_HandleTypeDef *hspi;
	uint8_t *rx_buffer;
	uint8_t *tx_buffer;
} core_hardware_spi_config_t;

typedef struct core_hardware_spi_callbacks_t {
 801f4e0:	b580      	push	{r7, lr}
 801f4e2:	b082      	sub	sp, #8
 801f4e4:	af00      	add	r7, sp, #0
 801f4e6:	6078      	str	r0, [r7, #4]
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	4618      	mov	r0, r3
 801f4ec:	f7f3 fb7e 	bl	8012bec <_ZN19core_utils_CallbackIvvEC1Ev>
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	3320      	adds	r3, #32
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	f7f3 fb79 	bl	8012bec <_ZN19core_utils_CallbackIvvEC1Ev>
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	3340      	adds	r3, #64	@ 0x40
 801f4fe:	4618      	mov	r0, r3
 801f500:	f7f3 fb74 	bl	8012bec <_ZN19core_utils_CallbackIvvEC1Ev>
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	4618      	mov	r0, r3
 801f508:	3708      	adds	r7, #8
 801f50a:	46bd      	mov	sp, r7
 801f50c:	bd80      	pop	{r7, pc}

0801f50e <_ZN23core_hardware_SPI_slaveC1Ev>:

/* ====================================================== */
core_hardware_SPI_slave::core_hardware_SPI_slave() {
 801f50e:	b580      	push	{r7, lr}
 801f510:	b082      	sub	sp, #8
 801f512:	af00      	add	r7, sp, #0
 801f514:	6078      	str	r0, [r7, #4]
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	330c      	adds	r3, #12
 801f51a:	4618      	mov	r0, r3
 801f51c:	f7ff ffe0 	bl	801f4e0 <_ZN29core_hardware_spi_callbacks_tC1Ev>

}
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	4618      	mov	r0, r3
 801f524:	3708      	adds	r7, #8
 801f526:	46bd      	mov	sp, r7
 801f528:	bd80      	pop	{r7, pc}
	...

0801f52c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>:

/* ====================================================== */
void core_hardware_SPI_slave::init(core_hardware_spi_config_t config) {
 801f52c:	b590      	push	{r4, r7, lr}
 801f52e:	b085      	sub	sp, #20
 801f530:	af00      	add	r7, sp, #0
 801f532:	60f8      	str	r0, [r7, #12]
 801f534:	4638      	mov	r0, r7
 801f536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801f53a:	68fb      	ldr	r3, [r7, #12]
 801f53c:	461c      	mov	r4, r3
 801f53e:	463b      	mov	r3, r7
 801f540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	active_spi_slave = this;
 801f548:	4a13      	ldr	r2, [pc, #76]	@ (801f598 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x6c>)
 801f54a:	68fb      	ldr	r3, [r7, #12]
 801f54c:	6013      	str	r3, [r2, #0]

	this->callbacks.rx_callback.registered = 0;
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	2200      	movs	r2, #0
 801f552:	741a      	strb	r2, [r3, #16]
	this->callbacks.tx_callback.registered = 0;
 801f554:	68fb      	ldr	r3, [r7, #12]
 801f556:	2200      	movs	r2, #0
 801f558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	this->callbacks.rxtx_callback.registered = 0;
 801f55c:	68fb      	ldr	r3, [r7, #12]
 801f55e:	2200      	movs	r2, #0
 801f560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_RX_COMPLETE_CB_ID,
 801f564:	68fb      	ldr	r3, [r7, #12]
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	4a0c      	ldr	r2, [pc, #48]	@ (801f59c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x70>)
 801f56a:	2101      	movs	r1, #1
 801f56c:	4618      	mov	r0, r3
 801f56e:	f7ea fed7 	bl	800a320 <HAL_SPI_RegisterCallback>
			spi_callback_rx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_COMPLETE_CB_ID,
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	4a0a      	ldr	r2, [pc, #40]	@ (801f5a0 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x74>)
 801f578:	2100      	movs	r1, #0
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7ea fed0 	bl	800a320 <HAL_SPI_RegisterCallback>
			spi_callback_tx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_RX_COMPLETE_CB_ID,
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	4a07      	ldr	r2, [pc, #28]	@ (801f5a4 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x78>)
 801f586:	2102      	movs	r1, #2
 801f588:	4618      	mov	r0, r3
 801f58a:	f7ea fec9 	bl	800a320 <HAL_SPI_RegisterCallback>
			spi_callback_rxtx);
}
 801f58e:	bf00      	nop
 801f590:	3714      	adds	r7, #20
 801f592:	46bd      	mov	sp, r7
 801f594:	bd90      	pop	{r4, r7, pc}
 801f596:	bf00      	nop
 801f598:	240286d8 	.word	0x240286d8
 801f59c:	0801f469 	.word	0x0801f469
 801f5a0:	0801f491 	.word	0x0801f491
 801f5a4:	0801f4b9 	.word	0x0801f4b9

0801f5a8 <_ZN23core_hardware_SPI_slave5startEv>:
/* ====================================================== */
void core_hardware_SPI_slave::start() {
 801f5a8:	b480      	push	{r7}
 801f5aa:	b083      	sub	sp, #12
 801f5ac:	af00      	add	r7, sp, #0
 801f5ae:	6078      	str	r0, [r7, #4]

}
 801f5b0:	bf00      	nop
 801f5b2:	370c      	adds	r7, #12
 801f5b4:	46bd      	mov	sp, r7
 801f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ba:	4770      	bx	lr

0801f5bc <_ZN23core_hardware_SPI_slave11provideDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint16_t len) {
	HAL_SPI_Transmit_DMA(this->config.hspi, this->config.tx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint8_t *data, uint16_t len) {
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	b084      	sub	sp, #16
 801f5c0:	af00      	add	r7, sp, #0
 801f5c2:	60f8      	str	r0, [r7, #12]
 801f5c4:	60b9      	str	r1, [r7, #8]
 801f5c6:	4613      	mov	r3, r2
 801f5c8:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit_DMA(this->config.hspi, data, len);
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	88fa      	ldrh	r2, [r7, #6]
 801f5d0:	68b9      	ldr	r1, [r7, #8]
 801f5d2:	4618      	mov	r0, r3
 801f5d4:	f7eb fbb0 	bl	800ad38 <HAL_SPI_Transmit_DMA>
}
 801f5d8:	bf00      	nop
 801f5da:	3710      	adds	r7, #16
 801f5dc:	46bd      	mov	sp, r7
 801f5de:	bd80      	pop	{r7, pc}

0801f5e0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>:
	HAL_SPI_TransmitReceive_DMA(this->config.hspi, tx_buf, rx_buf, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::registerCallback(
		core_hardware_spi_callback_id_t callback_id,
		core_utils_Callback<void, void> callback) {
 801f5e0:	b580      	push	{r7, lr}
 801f5e2:	b084      	sub	sp, #16
 801f5e4:	af00      	add	r7, sp, #0
 801f5e6:	60f8      	str	r0, [r7, #12]
 801f5e8:	460b      	mov	r3, r1
 801f5ea:	607a      	str	r2, [r7, #4]
 801f5ec:	72fb      	strb	r3, [r7, #11]

	switch (callback_id) {
 801f5ee:	7afb      	ldrb	r3, [r7, #11]
 801f5f0:	2b02      	cmp	r3, #2
 801f5f2:	d014      	beq.n	801f61e <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x3e>
 801f5f4:	2b02      	cmp	r3, #2
 801f5f6:	dc19      	bgt.n	801f62c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d002      	beq.n	801f602 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x22>
 801f5fc:	2b01      	cmp	r3, #1
 801f5fe:	d007      	beq.n	801f610 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x30>
	case CORE_HARDWARE_SPI_CALLBACK_RXTX: {
		this->callbacks.rxtx_callback = callback;
		break;
	}
	}
}
 801f600:	e014      	b.n	801f62c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rx_callback = callback;
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	330c      	adds	r3, #12
 801f606:	6879      	ldr	r1, [r7, #4]
 801f608:	4618      	mov	r0, r3
 801f60a:	f7f3 fea3 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801f60e:	e00d      	b.n	801f62c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.tx_callback = callback;
 801f610:	68fb      	ldr	r3, [r7, #12]
 801f612:	332c      	adds	r3, #44	@ 0x2c
 801f614:	6879      	ldr	r1, [r7, #4]
 801f616:	4618      	mov	r0, r3
 801f618:	f7f3 fe9c 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801f61c:	e006      	b.n	801f62c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rxtx_callback = callback;
 801f61e:	68fb      	ldr	r3, [r7, #12]
 801f620:	334c      	adds	r3, #76	@ 0x4c
 801f622:	6879      	ldr	r1, [r7, #4]
 801f624:	4618      	mov	r0, r3
 801f626:	f7f3 fe95 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801f62a:	bf00      	nop
}
 801f62c:	bf00      	nop
 801f62e:	3710      	adds	r7, #16
 801f630:	46bd      	mov	sp, r7
 801f632:	bd80      	pop	{r7, pc}

0801f634 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>:

/* ====================================================== */
void core_hardware_SPI_slave::rx_cmplt_function() {
 801f634:	b580      	push	{r7, lr}
 801f636:	b082      	sub	sp, #8
 801f638:	af00      	add	r7, sp, #0
 801f63a:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rx_callback.registered) {
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	7c1b      	ldrb	r3, [r3, #16]
 801f640:	2b00      	cmp	r3, #0
 801f642:	d004      	beq.n	801f64e <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv+0x1a>
		this->callbacks.rx_callback.call();
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	330c      	adds	r3, #12
 801f648:	4618      	mov	r0, r3
 801f64a:	f7f3 f81c 	bl	8012686 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801f64e:	bf00      	nop
 801f650:	3708      	adds	r7, #8
 801f652:	46bd      	mov	sp, r7
 801f654:	bd80      	pop	{r7, pc}

0801f656 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::tx_cmplt_function() {
 801f656:	b580      	push	{r7, lr}
 801f658:	b082      	sub	sp, #8
 801f65a:	af00      	add	r7, sp, #0
 801f65c:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.tx_callback.registered) {
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f664:	2b00      	cmp	r3, #0
 801f666:	d004      	beq.n	801f672 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv+0x1c>
		this->callbacks.tx_callback.call();
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	332c      	adds	r3, #44	@ 0x2c
 801f66c:	4618      	mov	r0, r3
 801f66e:	f7f3 f80a 	bl	8012686 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801f672:	bf00      	nop
 801f674:	3708      	adds	r7, #8
 801f676:	46bd      	mov	sp, r7
 801f678:	bd80      	pop	{r7, pc}

0801f67a <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::rxtx_cmplt_function() {
 801f67a:	b580      	push	{r7, lr}
 801f67c:	b082      	sub	sp, #8
 801f67e:	af00      	add	r7, sp, #0
 801f680:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rxtx_callback.registered) {
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d004      	beq.n	801f696 <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv+0x1c>
		this->callbacks.rxtx_callback.call();
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	334c      	adds	r3, #76	@ 0x4c
 801f690:	4618      	mov	r0, r3
 801f692:	f7f2 fff8 	bl	8012686 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801f696:	bf00      	nop
 801f698:	3708      	adds	r7, #8
 801f69a:	46bd      	mov	sp, r7
 801f69c:	bd80      	pop	{r7, pc}
	...

0801f6a0 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft>:
		CORE_HARDWARE_UART_MODE_DMA, .cobs_encode_rx = 1, .cobs_encode_tx = 1,
		.queues = 1, };


/* ============================================================================= */
void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801f6a0:	b580      	push	{r7, lr}
 801f6a2:	b084      	sub	sp, #16
 801f6a4:	af00      	add	r7, sp, #0
 801f6a6:	6078      	str	r0, [r7, #4]
 801f6a8:	460b      	mov	r3, r1
 801f6aa:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < num_uarts; i++) {
 801f6ac:	2300      	movs	r3, #0
 801f6ae:	60fb      	str	r3, [r7, #12]
 801f6b0:	e02b      	b.n	801f70a <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x6a>
		if (!(uarts[i] == NULL) && (uarts[i]->get_huart() == huart)) {
 801f6b2:	4a1b      	ldr	r2, [pc, #108]	@ (801f720 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6b4:	68fb      	ldr	r3, [r7, #12]
 801f6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d012      	beq.n	801f6e4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 801f6be:	4a18      	ldr	r2, [pc, #96]	@ (801f720 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f6c6:	4916      	ldr	r1, [pc, #88]	@ (801f720 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	3304      	adds	r3, #4
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	4610      	mov	r0, r2
 801f6d6:	4798      	blx	r3
 801f6d8:	4602      	mov	r2, r0
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	4293      	cmp	r3, r2
 801f6de:	d101      	bne.n	801f6e4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 801f6e0:	2301      	movs	r3, #1
 801f6e2:	e000      	b.n	801f6e6 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x46>
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d00c      	beq.n	801f704 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x64>
			uarts[i]->rxFunction(size);
 801f6ea:	4a0d      	ldr	r2, [pc, #52]	@ (801f720 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6ec:	68fb      	ldr	r3, [r7, #12]
 801f6ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f6f2:	490b      	ldr	r1, [pc, #44]	@ (801f720 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6f4:	68fb      	ldr	r3, [r7, #12]
 801f6f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	681b      	ldr	r3, [r3, #0]
 801f6fe:	8879      	ldrh	r1, [r7, #2]
 801f700:	4610      	mov	r0, r2
 801f702:	4798      	blx	r3
	for (int i = 0; i < num_uarts; i++) {
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	3301      	adds	r3, #1
 801f708:	60fb      	str	r3, [r7, #12]
 801f70a:	4b06      	ldr	r3, [pc, #24]	@ (801f724 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801f70c:	781b      	ldrb	r3, [r3, #0]
 801f70e:	461a      	mov	r2, r3
 801f710:	68fb      	ldr	r3, [r7, #12]
 801f712:	4293      	cmp	r3, r2
 801f714:	dbcd      	blt.n	801f6b2 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x12>
		}
	}
}
 801f716:	bf00      	nop
 801f718:	bf00      	nop
 801f71a:	3710      	adds	r7, #16
 801f71c:	46bd      	mov	sp, r7
 801f71e:	bd80      	pop	{r7, pc}
 801f720:	240286dc 	.word	0x240286dc
 801f724:	240286f0 	.word	0x240286f0

0801f728 <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 801f728:	b480      	push	{r7}
 801f72a:	b083      	sub	sp, #12
 801f72c:	af00      	add	r7, sp, #0
 801f72e:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 801f732:	edd7 7a01 	vldr	s15, [r7, #4]
 801f736:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 801f758 <_Z7deg2radf+0x30>
 801f73a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f73e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801f75c <_Z7deg2radf+0x34>
 801f742:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f746:	eef0 7a66 	vmov.f32	s15, s13
}
 801f74a:	eeb0 0a67 	vmov.f32	s0, s15
 801f74e:	370c      	adds	r7, #12
 801f750:	46bd      	mov	sp, r7
 801f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f756:	4770      	bx	lr
 801f758:	40490fdb 	.word	0x40490fdb
 801f75c:	43340000 	.word	0x43340000

0801f760 <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 801f760:	b480      	push	{r7}
 801f762:	b083      	sub	sp, #12
 801f764:	af00      	add	r7, sp, #0
 801f766:	6078      	str	r0, [r7, #4]
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	f04f 0200 	mov.w	r2, #0
 801f76e:	601a      	str	r2, [r3, #0]
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	f04f 0200 	mov.w	r2, #0
 801f776:	605a      	str	r2, [r3, #4]
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	f04f 0200 	mov.w	r2, #0
 801f77e:	609a      	str	r2, [r3, #8]
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	4618      	mov	r0, r3
 801f784:	370c      	adds	r7, #12
 801f786:	46bd      	mov	sp, r7
 801f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f78c:	4770      	bx	lr

0801f78e <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 801f78e:	b480      	push	{r7}
 801f790:	b083      	sub	sp, #12
 801f792:	af00      	add	r7, sp, #0
 801f794:	6078      	str	r0, [r7, #4]
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	220b      	movs	r2, #11
 801f79a:	701a      	strb	r2, [r3, #0]
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	2220      	movs	r2, #32
 801f7a0:	705a      	strb	r2, [r3, #1]
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	2200      	movs	r2, #0
 801f7a6:	709a      	strb	r2, [r3, #2]
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	2201      	movs	r2, #1
 801f7ac:	70da      	strb	r2, [r3, #3]
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	370c      	adds	r7, #12
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ba:	4770      	bx	lr

0801f7bc <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 801f7bc:	b480      	push	{r7}
 801f7be:	b083      	sub	sp, #12
 801f7c0:	af00      	add	r7, sp, #0
 801f7c2:	6078      	str	r0, [r7, #4]
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	220a      	movs	r2, #10
 801f7c8:	701a      	strb	r2, [r3, #0]
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	2220      	movs	r2, #32
 801f7ce:	705a      	strb	r2, [r3, #1]
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	2208      	movs	r2, #8
 801f7d4:	709a      	strb	r2, [r3, #2]
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	2200      	movs	r2, #0
 801f7da:	70da      	strb	r2, [r3, #3]
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	4618      	mov	r0, r3
 801f7e0:	370c      	adds	r7, #12
 801f7e2:	46bd      	mov	sp, r7
 801f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7e8:	4770      	bx	lr

0801f7ea <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_2000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 801f7ea:	b580      	push	{r7, lr}
 801f7ec:	b082      	sub	sp, #8
 801f7ee:	af00      	add	r7, sp, #0
 801f7f0:	6078      	str	r0, [r7, #4]
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	330a      	adds	r3, #10
 801f7f6:	4618      	mov	r0, r3
 801f7f8:	f7ff ffc9 	bl	801f78e <_ZN19bmi160_gyr_config_tC1Ev>
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	330e      	adds	r3, #14
 801f800:	4618      	mov	r0, r3
 801f802:	f7ff ffdb 	bl	801f7bc <_ZN19bmi160_acc_config_tC1Ev>
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	4618      	mov	r0, r3
 801f80a:	3708      	adds	r7, #8
 801f80c:	46bd      	mov	sp, r7
 801f80e:	bd80      	pop	{r7, pc}

0801f810 <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 801f810:	b580      	push	{r7, lr}
 801f812:	b082      	sub	sp, #8
 801f814:	af00      	add	r7, sp, #0
 801f816:	6078      	str	r0, [r7, #4]
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	332c      	adds	r3, #44	@ 0x2c
 801f81c:	4618      	mov	r0, r3
 801f81e:	f7ff ff9f 	bl	801f760 <_ZN18bmi160_gyr_calib_tC1Ev>
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	3338      	adds	r3, #56	@ 0x38
 801f826:	4618      	mov	r0, r3
 801f828:	f7ff ffdf 	bl	801f7ea <_ZN15bmi160_config_tC1Ev>

}
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	4618      	mov	r0, r3
 801f830:	3708      	adds	r7, #8
 801f832:	46bd      	mov	sp, r7
 801f834:	bd80      	pop	{r7, pc}

0801f836 <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 801f836:	b580      	push	{r7, lr}
 801f838:	b082      	sub	sp, #8
 801f83a:	af00      	add	r7, sp, #0
 801f83c:	6078      	str	r0, [r7, #4]
 801f83e:	460b      	mov	r3, r1
 801f840:	70fb      	strb	r3, [r7, #3]
 801f842:	4613      	mov	r3, r2
 801f844:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f850:	2200      	movs	r2, #0
 801f852:	4619      	mov	r1, r3
 801f854:	f7e7 f86c 	bl	8006930 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f85c:	1cf9      	adds	r1, r7, #3
 801f85e:	2301      	movs	r3, #1
 801f860:	2201      	movs	r2, #1
 801f862:	f7ea fe09 	bl	800a478 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f86a:	1cb9      	adds	r1, r7, #2
 801f86c:	2301      	movs	r3, #1
 801f86e:	2201      	movs	r2, #1
 801f870:	f7ea fe02 	bl	800a478 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f87e:	2201      	movs	r2, #1
 801f880:	4619      	mov	r1, r3
 801f882:	f7e7 f855 	bl	8006930 <HAL_GPIO_WritePin>

	return CORE_OK;
 801f886:	2301      	movs	r3, #1
}
 801f888:	4618      	mov	r0, r3
 801f88a:	3708      	adds	r7, #8
 801f88c:	46bd      	mov	sp, r7
 801f88e:	bd80      	pop	{r7, pc}

0801f890 <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 801f890:	b084      	sub	sp, #16
 801f892:	b5b0      	push	{r4, r5, r7, lr}
 801f894:	b084      	sub	sp, #16
 801f896:	af00      	add	r7, sp, #0
 801f898:	6078      	str	r0, [r7, #4]
 801f89a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801f89e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	f103 0538 	add.w	r5, r3, #56	@ 0x38
 801f8a8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 801f8ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f8ae:	6028      	str	r0, [r5, #0]
 801f8b0:	6069      	str	r1, [r5, #4]
 801f8b2:	60aa      	str	r2, [r5, #8]
 801f8b4:	60eb      	str	r3, [r5, #12]
 801f8b6:	8823      	ldrh	r3, [r4, #0]
 801f8b8:	822b      	strh	r3, [r5, #16]
	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f8c4:	2201      	movs	r2, #1
 801f8c6:	4619      	mov	r1, r3
 801f8c8:	f7e7 f832 	bl	8006930 <HAL_GPIO_WritePin>
	delay(250);
 801f8cc:	20fa      	movs	r0, #250	@ 0xfa
 801f8ce:	f7f7 fcba 	bl	8017246 <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 801f8d2:	6878      	ldr	r0, [r7, #4]
 801f8d4:	f000 f8ed 	bl	801fab2 <_ZN6BMI1605checkEv>
 801f8d8:	4603      	mov	r3, r0
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	bf0c      	ite	eq
 801f8de:	2301      	moveq	r3, #1
 801f8e0:	2300      	movne	r3, #0
 801f8e2:	b2db      	uxtb	r3, r3
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d001      	beq.n	801f8ec <_ZN6BMI1604initE15bmi160_config_t+0x5c>
		return 0;
 801f8e8:	2300      	movs	r3, #0
 801f8ea:	e072      	b.n	801f9d2 <_ZN6BMI1604initE15bmi160_config_t+0x142>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 801f8ec:	6878      	ldr	r0, [r7, #4]
 801f8ee:	f000 fd34 	bl	802035a <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 801f8f2:	20fa      	movs	r0, #250	@ 0xfa
 801f8f4:	f7f7 fca7 	bl	8017246 <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 801f8f8:	217f      	movs	r1, #127	@ 0x7f
 801f8fa:	6878      	ldr	r0, [r7, #4]
 801f8fc:	f000 f870 	bl	801f9e0 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 801f900:	2100      	movs	r1, #0
 801f902:	6878      	ldr	r0, [r7, #4]
 801f904:	f000 fcf4 	bl	80202f0 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801f90e:	687b      	ldr	r3, [r7, #4]
 801f910:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 801f914:	4313      	orrs	r3, r2
 801f916:	b2d9      	uxtb	r1, r3
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801f91e:	461a      	mov	r2, r3
 801f920:	6878      	ldr	r0, [r7, #4]
 801f922:	f000 fccc 	bl	80202be <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801f932:	4313      	orrs	r3, r2
 801f934:	b2d9      	uxtb	r1, r3
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f93c:	461a      	mov	r2, r3
 801f93e:	6878      	ldr	r0, [r7, #4]
 801f940:	f000 fca4 	bl	802028c <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 801f944:	2140      	movs	r1, #64	@ 0x40
 801f946:	6878      	ldr	r0, [r7, #4]
 801f948:	f000 f84a 	bl	801f9e0 <_ZN6BMI16012readRegisterEh>
 801f94c:	4603      	mov	r3, r0
 801f94e:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 801f950:	2141      	movs	r1, #65	@ 0x41
 801f952:	6878      	ldr	r0, [r7, #4]
 801f954:	f000 f844 	bl	801f9e0 <_ZN6BMI16012readRegisterEh>
 801f958:	4603      	mov	r3, r0
 801f95a:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 801f95c:	2142      	movs	r1, #66	@ 0x42
 801f95e:	6878      	ldr	r0, [r7, #4]
 801f960:	f000 f83e 	bl	801f9e0 <_ZN6BMI16012readRegisterEh>
 801f964:	4603      	mov	r3, r0
 801f966:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 801f968:	2143      	movs	r1, #67	@ 0x43
 801f96a:	6878      	ldr	r0, [r7, #4]
 801f96c:	f000 f838 	bl	801f9e0 <_ZN6BMI16012readRegisterEh>
 801f970:	4603      	mov	r3, r0
 801f972:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 801f980:	4313      	orrs	r3, r2
 801f982:	b2db      	uxtb	r3, r3
 801f984:	7bfa      	ldrb	r2, [r7, #15]
 801f986:	429a      	cmp	r2, r3
 801f988:	d002      	beq.n	801f990 <_ZN6BMI1604initE15bmi160_config_t+0x100>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f98a:	2008      	movs	r0, #8
 801f98c:	f000 fe2d 	bl	80205ea <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801f996:	7bba      	ldrb	r2, [r7, #14]
 801f998:	429a      	cmp	r2, r3
 801f99a:	d002      	beq.n	801f9a2 <_ZN6BMI1604initE15bmi160_config_t+0x112>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f99c:	2008      	movs	r0, #8
 801f99e:	f000 fe24 	bl	80205ea <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801f9ae:	4313      	orrs	r3, r2
 801f9b0:	b2db      	uxtb	r3, r3
 801f9b2:	7b7a      	ldrb	r2, [r7, #13]
 801f9b4:	429a      	cmp	r2, r3
 801f9b6:	d002      	beq.n	801f9be <_ZN6BMI1604initE15bmi160_config_t+0x12e>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f9b8:	2008      	movs	r0, #8
 801f9ba:	f000 fe16 	bl	80205ea <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f9c4:	7b3a      	ldrb	r2, [r7, #12]
 801f9c6:	429a      	cmp	r2, r3
 801f9c8:	d002      	beq.n	801f9d0 <_ZN6BMI1604initE15bmi160_config_t+0x140>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f9ca:	2008      	movs	r0, #8
 801f9cc:	f000 fe0d 	bl	80205ea <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 801f9d0:	2301      	movs	r3, #1
}
 801f9d2:	4618      	mov	r0, r3
 801f9d4:	3710      	adds	r7, #16
 801f9d6:	46bd      	mov	sp, r7
 801f9d8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801f9dc:	b004      	add	sp, #16
 801f9de:	4770      	bx	lr

0801f9e0 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 801f9e0:	b580      	push	{r7, lr}
 801f9e2:	b084      	sub	sp, #16
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	6078      	str	r0, [r7, #4]
 801f9e8:	460b      	mov	r3, r1
 801f9ea:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 801f9ec:	2300      	movs	r3, #0
 801f9ee:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 801f9f0:	78fb      	ldrb	r3, [r7, #3]
 801f9f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801f9f6:	b2db      	uxtb	r3, r3
 801f9f8:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801fa04:	2200      	movs	r2, #0
 801fa06:	4619      	mov	r1, r3
 801fa08:	f7e6 ff92 	bl	8006930 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801fa10:	1cf9      	adds	r1, r7, #3
 801fa12:	230a      	movs	r3, #10
 801fa14:	2201      	movs	r2, #1
 801fa16:	f7ea fd2f 	bl	800a478 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 10);
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801fa1e:	f107 010f 	add.w	r1, r7, #15
 801fa22:	230a      	movs	r3, #10
 801fa24:	2201      	movs	r2, #1
 801fa26:	f7ea ff15 	bl	800a854 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801fa2a:	687b      	ldr	r3, [r7, #4]
 801fa2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801fa34:	2201      	movs	r2, #1
 801fa36:	4619      	mov	r1, r3
 801fa38:	f7e6 ff7a 	bl	8006930 <HAL_GPIO_WritePin>

	return ret;
 801fa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801fa3e:	4618      	mov	r0, r3
 801fa40:	3710      	adds	r7, #16
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd80      	pop	{r7, pc}

0801fa46 <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 801fa46:	b580      	push	{r7, lr}
 801fa48:	b084      	sub	sp, #16
 801fa4a:	af00      	add	r7, sp, #0
 801fa4c:	60f8      	str	r0, [r7, #12]
 801fa4e:	607a      	str	r2, [r7, #4]
 801fa50:	461a      	mov	r2, r3
 801fa52:	460b      	mov	r3, r1
 801fa54:	72fb      	strb	r3, [r7, #11]
 801fa56:	4613      	mov	r3, r2
 801fa58:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 801fa5a:	7afb      	ldrb	r3, [r7, #11]
 801fa5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801fa60:	b2db      	uxtb	r3, r3
 801fa62:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801fa64:	68fb      	ldr	r3, [r7, #12]
 801fa66:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801fa6e:	2200      	movs	r2, #0
 801fa70:	4619      	mov	r1, r3
 801fa72:	f7e6 ff5d 	bl	8006930 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 801fa76:	68fb      	ldr	r3, [r7, #12]
 801fa78:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801fa7a:	f107 010b 	add.w	r1, r7, #11
 801fa7e:	230a      	movs	r3, #10
 801fa80:	2201      	movs	r2, #1
 801fa82:	f7ea fcf9 	bl	800a478 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 10);
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801fa8a:	7abb      	ldrb	r3, [r7, #10]
 801fa8c:	b29a      	uxth	r2, r3
 801fa8e:	230a      	movs	r3, #10
 801fa90:	6879      	ldr	r1, [r7, #4]
 801fa92:	f7ea fedf 	bl	800a854 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801fa96:	68fb      	ldr	r3, [r7, #12]
 801fa98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801fa9a:	68fb      	ldr	r3, [r7, #12]
 801fa9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801faa0:	2201      	movs	r2, #1
 801faa2:	4619      	mov	r1, r3
 801faa4:	f7e6 ff44 	bl	8006930 <HAL_GPIO_WritePin>

	return CORE_OK;
 801faa8:	2301      	movs	r3, #1
}
 801faaa:	4618      	mov	r0, r3
 801faac:	3710      	adds	r7, #16
 801faae:	46bd      	mov	sp, r7
 801fab0:	bd80      	pop	{r7, pc}

0801fab2 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 801fab2:	b580      	push	{r7, lr}
 801fab4:	b084      	sub	sp, #16
 801fab6:	af00      	add	r7, sp, #0
 801fab8:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 801faba:	6878      	ldr	r0, [r7, #4]
 801fabc:	f000 f80c 	bl	801fad8 <_ZN6BMI1606readIDEv>
 801fac0:	4603      	mov	r3, r0
 801fac2:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 801fac4:	7bfb      	ldrb	r3, [r7, #15]
 801fac6:	2bd1      	cmp	r3, #209	@ 0xd1
 801fac8:	d001      	beq.n	801face <_ZN6BMI1605checkEv+0x1c>
		return 0;
 801faca:	2300      	movs	r3, #0
 801facc:	e000      	b.n	801fad0 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 801face:	2301      	movs	r3, #1
}
 801fad0:	4618      	mov	r0, r3
 801fad2:	3710      	adds	r7, #16
 801fad4:	46bd      	mov	sp, r7
 801fad6:	bd80      	pop	{r7, pc}

0801fad8 <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 801fad8:	b580      	push	{r7, lr}
 801fada:	b082      	sub	sp, #8
 801fadc:	af00      	add	r7, sp, #0
 801fade:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 801fae0:	2100      	movs	r1, #0
 801fae2:	6878      	ldr	r0, [r7, #4]
 801fae4:	f7ff ff7c 	bl	801f9e0 <_ZN6BMI16012readRegisterEh>
 801fae8:	4603      	mov	r3, r0
}
 801faea:	4618      	mov	r0, r3
 801faec:	3708      	adds	r7, #8
 801faee:	46bd      	mov	sp, r7
 801faf0:	bd80      	pop	{r7, pc}

0801faf2 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 801faf2:	b580      	push	{r7, lr}
 801faf4:	b082      	sub	sp, #8
 801faf6:	af00      	add	r7, sp, #0
 801faf8:	6078      	str	r0, [r7, #4]
	this->fetchData();
 801fafa:	6878      	ldr	r0, [r7, #4]
 801fafc:	f000 f807 	bl	801fb0e <_ZN6BMI1609fetchDataEv>
	this->processData();
 801fb00:	6878      	ldr	r0, [r7, #4]
 801fb02:	f000 f815 	bl	801fb30 <_ZN6BMI16011processDataEv>
}
 801fb06:	bf00      	nop
 801fb08:	3708      	adds	r7, #8
 801fb0a:	46bd      	mov	sp, r7
 801fb0c:	bd80      	pop	{r7, pc}

0801fb0e <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 801fb0e:	b580      	push	{r7, lr}
 801fb10:	b082      	sub	sp, #8
 801fb12:	af00      	add	r7, sp, #0
 801fb14:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 801fb16:	6878      	ldr	r0, [r7, #4]
 801fb18:	f000 fb56 	bl	80201c8 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 801fb1c:	6878      	ldr	r0, [r7, #4]
 801fb1e:	f000 fb84 	bl	802022a <_ZN6BMI1607readAccEv>

	return 1;
 801fb22:	2301      	movs	r3, #1
}
 801fb24:	4618      	mov	r0, r3
 801fb26:	3708      	adds	r7, #8
 801fb28:	46bd      	mov	sp, r7
 801fb2a:	bd80      	pop	{r7, pc}
 801fb2c:	0000      	movs	r0, r0
	...

0801fb30 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 801fb30:	b580      	push	{r7, lr}
 801fb32:	b082      	sub	sp, #8
 801fb34:	af00      	add	r7, sp, #0
 801fb36:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801fb3e:	2b04      	cmp	r3, #4
 801fb40:	f200 8200 	bhi.w	801ff44 <_ZN6BMI16011processDataEv+0x414>
 801fb44:	a201      	add	r2, pc, #4	@ (adr r2, 801fb4c <_ZN6BMI16011processDataEv+0x1c>)
 801fb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb4a:	bf00      	nop
 801fb4c:	0801fe89 	.word	0x0801fe89
 801fb50:	0801fd95 	.word	0x0801fd95
 801fb54:	0801fcd9 	.word	0x0801fcd9
 801fb58:	0801fc1d 	.word	0x0801fc1d
 801fb5c:	0801fb61 	.word	0x0801fb61
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fb66:	ee07 3a90 	vmov	s15, r3
 801fb6a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fb6e:	ed9f 5bc2 	vldr	d5, [pc, #776]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fb72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fb76:	ed9f 6bb6 	vldr	d6, [pc, #728]	@ 801fe50 <_ZN6BMI16011processDataEv+0x320>
 801fb7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fb7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fb82:	eeb0 0a67 	vmov.f32	s0, s15
 801fb86:	f7ff fdcf 	bl	801f728 <_Z7deg2radf>
 801fb8a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fb94:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fba4:	ee07 3a90 	vmov	s15, r3
 801fba8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fbac:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fbb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fbb4:	ed9f 6ba6 	vldr	d6, [pc, #664]	@ 801fe50 <_ZN6BMI16011processDataEv+0x320>
 801fbb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fbbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fbc0:	eeb0 0a67 	vmov.f32	s0, s15
 801fbc4:	f7ff fdb0 	bl	801f728 <_Z7deg2radf>
 801fbc8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801fbd2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801fbe2:	ee07 3a90 	vmov	s15, r3
 801fbe6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fbea:	ed9f 5ba3 	vldr	d5, [pc, #652]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fbee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fbf2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801fe50 <_ZN6BMI16011processDataEv+0x320>
 801fbf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fbfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fbfe:	eeb0 0a67 	vmov.f32	s0, s15
 801fc02:	f7ff fd91 	bl	801f728 <_Z7deg2radf>
 801fc06:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801fc10:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 801fc14:	687b      	ldr	r3, [r7, #4]
 801fc16:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801fc1a:	e193      	b.n	801ff44 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc22:	ee07 3a90 	vmov	s15, r3
 801fc26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fc2a:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fc2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fc32:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 801fe58 <_ZN6BMI16011processDataEv+0x328>
 801fc36:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fc3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fc3e:	eeb0 0a67 	vmov.f32	s0, s15
 801fc42:	f7ff fd71 	bl	801f728 <_Z7deg2radf>
 801fc46:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fc50:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fc60:	ee07 3a90 	vmov	s15, r3
 801fc64:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fc68:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fc6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fc70:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 801fe58 <_ZN6BMI16011processDataEv+0x328>
 801fc74:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fc78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fc7c:	eeb0 0a67 	vmov.f32	s0, s15
 801fc80:	f7ff fd52 	bl	801f728 <_Z7deg2radf>
 801fc84:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801fc8e:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801fc9e:	ee07 3a90 	vmov	s15, r3
 801fca2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fca6:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fcaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fcae:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 801fe58 <_ZN6BMI16011processDataEv+0x328>
 801fcb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fcb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fcba:	eeb0 0a67 	vmov.f32	s0, s15
 801fcbe:	f7ff fd33 	bl	801f728 <_Z7deg2radf>
 801fcc2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801fccc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801fcd6:	e135      	b.n	801ff44 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fcde:	ee07 3a90 	vmov	s15, r3
 801fce2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fce6:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fcea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fcee:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 801fe60 <_ZN6BMI16011processDataEv+0x330>
 801fcf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fcf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fcfa:	eeb0 0a67 	vmov.f32	s0, s15
 801fcfe:	f7ff fd13 	bl	801f728 <_Z7deg2radf>
 801fd02:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fd0c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fd1c:	ee07 3a90 	vmov	s15, r3
 801fd20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fd24:	ed9f 5b54 	vldr	d5, [pc, #336]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fd28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fd2c:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 801fe60 <_ZN6BMI16011processDataEv+0x330>
 801fd30:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fd34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fd38:	eeb0 0a67 	vmov.f32	s0, s15
 801fd3c:	f7ff fcf4 	bl	801f728 <_Z7deg2radf>
 801fd40:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801fd4a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801fd5a:	ee07 3a90 	vmov	s15, r3
 801fd5e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fd62:	ed9f 5b45 	vldr	d5, [pc, #276]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fd66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fd6a:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 801fe60 <_ZN6BMI16011processDataEv+0x330>
 801fd6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fd72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fd76:	eeb0 0a67 	vmov.f32	s0, s15
 801fd7a:	f7ff fcd5 	bl	801f728 <_Z7deg2radf>
 801fd7e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801fd88:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801fd92:	e0d7      	b.n	801ff44 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fd9a:	ee07 3a90 	vmov	s15, r3
 801fd9e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fda2:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fda6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fdaa:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 801fe68 <_ZN6BMI16011processDataEv+0x338>
 801fdae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fdb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fdb6:	eeb0 0a67 	vmov.f32	s0, s15
 801fdba:	f7ff fcb5 	bl	801f728 <_Z7deg2radf>
 801fdbe:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fdc8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fdd8:	ee07 3a90 	vmov	s15, r3
 801fddc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fde0:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fde4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fde8:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 801fe68 <_ZN6BMI16011processDataEv+0x338>
 801fdec:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fdf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fdf4:	eeb0 0a67 	vmov.f32	s0, s15
 801fdf8:	f7ff fc96 	bl	801f728 <_Z7deg2radf>
 801fdfc:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801fe06:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801fe16:	ee07 3a90 	vmov	s15, r3
 801fe1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fe1e:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fe22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fe26:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801fe68 <_ZN6BMI16011processDataEv+0x338>
 801fe2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fe2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fe32:	eeb0 0a67 	vmov.f32	s0, s15
 801fe36:	f7ff fc77 	bl	801f728 <_Z7deg2radf>
 801fe3a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801fe44:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801fe4e:	e079      	b.n	801ff44 <_ZN6BMI16011processDataEv+0x414>
 801fe50:	00000000 	.word	0x00000000
 801fe54:	405f4000 	.word	0x405f4000
 801fe58:	00000000 	.word	0x00000000
 801fe5c:	406f4000 	.word	0x406f4000
 801fe60:	00000000 	.word	0x00000000
 801fe64:	407f4000 	.word	0x407f4000
 801fe68:	00000000 	.word	0x00000000
 801fe6c:	408f4000 	.word	0x408f4000
 801fe70:	00000000 	.word	0x00000000
 801fe74:	409f4000 	.word	0x409f4000
 801fe78:	00000000 	.word	0x00000000
 801fe7c:	40e00000 	.word	0x40e00000
 801fe80:	51eb851f 	.word	0x51eb851f
 801fe84:	40239eb8 	.word	0x40239eb8
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fe8e:	ee07 3a90 	vmov	s15, r3
 801fe92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fe96:	ed1f 5b08 	vldr	d5, [pc, #-32]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fe9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fe9e:	ed1f 6b0c 	vldr	d6, [pc, #-48]	@ 801fe70 <_ZN6BMI16011processDataEv+0x340>
 801fea2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fea6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801feaa:	eeb0 0a67 	vmov.f32	s0, s15
 801feae:	f7ff fc3b 	bl	801f728 <_Z7deg2radf>
 801feb2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801febc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fecc:	ee07 3a90 	vmov	s15, r3
 801fed0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fed4:	ed1f 5b18 	vldr	d5, [pc, #-96]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801fed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fedc:	ed1f 6b1c 	vldr	d6, [pc, #-112]	@ 801fe70 <_ZN6BMI16011processDataEv+0x340>
 801fee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fee4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fee8:	eeb0 0a67 	vmov.f32	s0, s15
 801feec:	f7ff fc1c 	bl	801f728 <_Z7deg2radf>
 801fef0:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801fefa:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ff0a:	ee07 3a90 	vmov	s15, r3
 801ff0e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ff12:	ed1f 5b27 	vldr	d5, [pc, #-156]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801ff16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ff1a:	ed1f 6b2b 	vldr	d6, [pc, #-172]	@ 801fe70 <_ZN6BMI16011processDataEv+0x340>
 801ff1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ff22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ff26:	eeb0 0a67 	vmov.f32	s0, s15
 801ff2a:	f7ff fbfd 	bl	801f728 <_Z7deg2radf>
 801ff2e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801ff38:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801ff42:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801ff4a:	3b03      	subs	r3, #3
 801ff4c:	2b09      	cmp	r3, #9
 801ff4e:	f200 8135 	bhi.w	80201bc <_ZN6BMI16011processDataEv+0x68c>
 801ff52:	a201      	add	r2, pc, #4	@ (adr r2, 801ff58 <_ZN6BMI16011processDataEv+0x428>)
 801ff54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff58:	0801ff81 	.word	0x0801ff81
 801ff5c:	080201bd 	.word	0x080201bd
 801ff60:	08020007 	.word	0x08020007
 801ff64:	080201bd 	.word	0x080201bd
 801ff68:	080201bd 	.word	0x080201bd
 801ff6c:	08020099 	.word	0x08020099
 801ff70:	080201bd 	.word	0x080201bd
 801ff74:	080201bd 	.word	0x080201bd
 801ff78:	080201bd 	.word	0x080201bd
 801ff7c:	0802012b 	.word	0x0802012b
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801ff86:	ee07 3a90 	vmov	s15, r3
 801ff8a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ff8e:	ed1f 5b46 	vldr	d5, [pc, #-280]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801ff92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ff96:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ff9a:	ed1f 6b47 	vldr	d6, [pc, #-284]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 801ff9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ffa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ffb2:	ee07 3a90 	vmov	s15, r3
 801ffb6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ffba:	ed1f 5b51 	vldr	d5, [pc, #-324]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801ffbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ffc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ffc6:	ed1f 6b52 	vldr	d6, [pc, #-328]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 801ffca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ffce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ffde:	ee07 3a90 	vmov	s15, r3
 801ffe2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ffe6:	ed1f 5b5c 	vldr	d5, [pc, #-368]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 801ffea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ffee:	ee37 7b07 	vadd.f64	d7, d7, d7
 801fff2:	ed1f 6b5d 	vldr	d6, [pc, #-372]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 801fff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fffa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 8020004:	e0da      	b.n	80201bc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 8020006:	687b      	ldr	r3, [r7, #4]
 8020008:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 802000c:	ee07 3a90 	vmov	s15, r3
 8020010:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020014:	ed1f 5b68 	vldr	d5, [pc, #-416]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 8020018:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802001c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8020020:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020024:	ed1f 6b6a 	vldr	d6, [pc, #-424]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 8020028:	ee27 7b06 	vmul.f64	d7, d7, d6
 802002c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 8020036:	687b      	ldr	r3, [r7, #4]
 8020038:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 802003c:	ee07 3a90 	vmov	s15, r3
 8020040:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020044:	ed1f 5b74 	vldr	d5, [pc, #-464]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 8020048:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802004c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8020050:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020054:	ed1f 6b76 	vldr	d6, [pc, #-472]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 8020058:	ee27 7b06 	vmul.f64	d7, d7, d6
 802005c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802006c:	ee07 3a90 	vmov	s15, r3
 8020070:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020074:	ed1f 5b80 	vldr	d5, [pc, #-512]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 8020078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802007c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8020080:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020084:	ed1f 6b82 	vldr	d6, [pc, #-520]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 8020088:	ee27 7b06 	vmul.f64	d7, d7, d6
 802008c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 8020096:	e091      	b.n	80201bc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 802009e:	ee07 3a90 	vmov	s15, r3
 80200a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80200a6:	ed1f 5b8c 	vldr	d5, [pc, #-560]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 80200aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80200ae:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80200b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80200b6:	ed1f 6b8e 	vldr	d6, [pc, #-568]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 80200ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80200be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80200ce:	ee07 3a90 	vmov	s15, r3
 80200d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80200d6:	ed1f 5b98 	vldr	d5, [pc, #-608]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 80200da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80200de:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80200e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80200e6:	ed1f 6b9a 	vldr	d6, [pc, #-616]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 80200ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80200ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80200fe:	ee07 3a90 	vmov	s15, r3
 8020102:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020106:	ed1f 5ba4 	vldr	d5, [pc, #-656]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 802010a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802010e:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 8020112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020116:	ed1f 6ba6 	vldr	d6, [pc, #-664]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 802011a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802011e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 8020128:	e048      	b.n	80201bc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8020130:	ee07 3a90 	vmov	s15, r3
 8020134:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020138:	ed1f 5bb1 	vldr	d5, [pc, #-708]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 802013c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020140:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 8020144:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020148:	ed1f 6bb3 	vldr	d6, [pc, #-716]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 802014c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020150:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8020160:	ee07 3a90 	vmov	s15, r3
 8020164:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020168:	ed1f 5bbd 	vldr	d5, [pc, #-756]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 802016c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020170:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 8020174:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020178:	ed1f 6bbf 	vldr	d6, [pc, #-764]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 802017c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020180:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020190:	ee07 3a90 	vmov	s15, r3
 8020194:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020198:	ed1f 5bc9 	vldr	d5, [pc, #-804]	@ 801fe78 <_ZN6BMI16011processDataEv+0x348>
 802019c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80201a0:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 80201a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80201a8:	ed1f 6bcb 	vldr	d6, [pc, #-812]	@ 801fe80 <_ZN6BMI16011processDataEv+0x350>
 80201ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80201b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 80201ba:	bf00      	nop
	}
	}

	return 1;
 80201bc:	2301      	movs	r3, #1
}
 80201be:	4618      	mov	r0, r3
 80201c0:	3708      	adds	r7, #8
 80201c2:	46bd      	mov	sp, r7
 80201c4:	bd80      	pop	{r7, pc}
 80201c6:	bf00      	nop

080201c8 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 80201c8:	b580      	push	{r7, lr}
 80201ca:	b084      	sub	sp, #16
 80201cc:	af00      	add	r7, sp, #0
 80201ce:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 80201d0:	2300      	movs	r3, #0
 80201d2:	60bb      	str	r3, [r7, #8]
 80201d4:	2300      	movs	r3, #0
 80201d6:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 80201d8:	f107 0208 	add.w	r2, r7, #8
 80201dc:	2306      	movs	r3, #6
 80201de:	210c      	movs	r1, #12
 80201e0:	6878      	ldr	r0, [r7, #4]
 80201e2:	f7ff fc30 	bl	801fa46 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 80201e6:	f107 0308 	add.w	r3, r7, #8
 80201ea:	4618      	mov	r0, r3
 80201ec:	f000 f9af 	bl	802054e <_Z18bytearray_to_int16Ph>
 80201f0:	4603      	mov	r3, r0
 80201f2:	461a      	mov	r2, r3
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 80201f8:	f107 0308 	add.w	r3, r7, #8
 80201fc:	3302      	adds	r3, #2
 80201fe:	4618      	mov	r0, r3
 8020200:	f000 f9a5 	bl	802054e <_Z18bytearray_to_int16Ph>
 8020204:	4603      	mov	r3, r0
 8020206:	461a      	mov	r2, r3
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 802020c:	f107 0308 	add.w	r3, r7, #8
 8020210:	3304      	adds	r3, #4
 8020212:	4618      	mov	r0, r3
 8020214:	f000 f99b 	bl	802054e <_Z18bytearray_to_int16Ph>
 8020218:	4603      	mov	r3, r0
 802021a:	461a      	mov	r2, r3
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	809a      	strh	r2, [r3, #4]

	return 1;
 8020220:	2301      	movs	r3, #1
}
 8020222:	4618      	mov	r0, r3
 8020224:	3710      	adds	r7, #16
 8020226:	46bd      	mov	sp, r7
 8020228:	bd80      	pop	{r7, pc}

0802022a <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 802022a:	b580      	push	{r7, lr}
 802022c:	b084      	sub	sp, #16
 802022e:	af00      	add	r7, sp, #0
 8020230:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 8020232:	2300      	movs	r3, #0
 8020234:	60bb      	str	r3, [r7, #8]
 8020236:	2300      	movs	r3, #0
 8020238:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 802023a:	f107 0208 	add.w	r2, r7, #8
 802023e:	2306      	movs	r3, #6
 8020240:	2112      	movs	r1, #18
 8020242:	6878      	ldr	r0, [r7, #4]
 8020244:	f7ff fbff 	bl	801fa46 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 8020248:	f107 0308 	add.w	r3, r7, #8
 802024c:	4618      	mov	r0, r3
 802024e:	f000 f97e 	bl	802054e <_Z18bytearray_to_int16Ph>
 8020252:	4603      	mov	r3, r0
 8020254:	461a      	mov	r2, r3
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 802025a:	f107 0308 	add.w	r3, r7, #8
 802025e:	3302      	adds	r3, #2
 8020260:	4618      	mov	r0, r3
 8020262:	f000 f974 	bl	802054e <_Z18bytearray_to_int16Ph>
 8020266:	4603      	mov	r3, r0
 8020268:	461a      	mov	r2, r3
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 802026e:	f107 0308 	add.w	r3, r7, #8
 8020272:	3304      	adds	r3, #4
 8020274:	4618      	mov	r0, r3
 8020276:	f000 f96a 	bl	802054e <_Z18bytearray_to_int16Ph>
 802027a:	4603      	mov	r3, r0
 802027c:	461a      	mov	r2, r3
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	831a      	strh	r2, [r3, #24]

	return 1;
 8020282:	2301      	movs	r3, #1
}
 8020284:	4618      	mov	r0, r3
 8020286:	3710      	adds	r7, #16
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}

0802028c <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 802028c:	b580      	push	{r7, lr}
 802028e:	b082      	sub	sp, #8
 8020290:	af00      	add	r7, sp, #0
 8020292:	6078      	str	r0, [r7, #4]
 8020294:	460b      	mov	r3, r1
 8020296:	70fb      	strb	r3, [r7, #3]
 8020298:	4613      	mov	r3, r2
 802029a:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 802029c:	78bb      	ldrb	r3, [r7, #2]
 802029e:	461a      	mov	r2, r3
 80202a0:	2143      	movs	r1, #67	@ 0x43
 80202a2:	6878      	ldr	r0, [r7, #4]
 80202a4:	f7ff fac7 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 80202a8:	78fb      	ldrb	r3, [r7, #3]
 80202aa:	461a      	mov	r2, r3
 80202ac:	2142      	movs	r1, #66	@ 0x42
 80202ae:	6878      	ldr	r0, [r7, #4]
 80202b0:	f7ff fac1 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 80202b4:	2301      	movs	r3, #1
}
 80202b6:	4618      	mov	r0, r3
 80202b8:	3708      	adds	r7, #8
 80202ba:	46bd      	mov	sp, r7
 80202bc:	bd80      	pop	{r7, pc}

080202be <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 80202be:	b580      	push	{r7, lr}
 80202c0:	b082      	sub	sp, #8
 80202c2:	af00      	add	r7, sp, #0
 80202c4:	6078      	str	r0, [r7, #4]
 80202c6:	460b      	mov	r3, r1
 80202c8:	70fb      	strb	r3, [r7, #3]
 80202ca:	4613      	mov	r3, r2
 80202cc:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 80202ce:	78fb      	ldrb	r3, [r7, #3]
 80202d0:	461a      	mov	r2, r3
 80202d2:	2140      	movs	r1, #64	@ 0x40
 80202d4:	6878      	ldr	r0, [r7, #4]
 80202d6:	f7ff faae 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 80202da:	78bb      	ldrb	r3, [r7, #2]
 80202dc:	461a      	mov	r2, r3
 80202de:	2141      	movs	r1, #65	@ 0x41
 80202e0:	6878      	ldr	r0, [r7, #4]
 80202e2:	f7ff faa8 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 80202e6:	2301      	movs	r3, #1
}
 80202e8:	4618      	mov	r0, r3
 80202ea:	3708      	adds	r7, #8
 80202ec:	46bd      	mov	sp, r7
 80202ee:	bd80      	pop	{r7, pc}

080202f0 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 80202f0:	b580      	push	{r7, lr}
 80202f2:	b082      	sub	sp, #8
 80202f4:	af00      	add	r7, sp, #0
 80202f6:	6078      	str	r0, [r7, #4]
 80202f8:	460b      	mov	r3, r1
 80202fa:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 80202fc:	78fb      	ldrb	r3, [r7, #3]
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d113      	bne.n	802032a <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 8020302:	2064      	movs	r0, #100	@ 0x64
 8020304:	f7f6 ff9f 	bl	8017246 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 8020308:	2215      	movs	r2, #21
 802030a:	217e      	movs	r1, #126	@ 0x7e
 802030c:	6878      	ldr	r0, [r7, #4]
 802030e:	f7ff fa92 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8020312:	20fa      	movs	r0, #250	@ 0xfa
 8020314:	f7f6 ff97 	bl	8017246 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 8020318:	2211      	movs	r2, #17
 802031a:	217e      	movs	r1, #126	@ 0x7e
 802031c:	6878      	ldr	r0, [r7, #4]
 802031e:	f7ff fa8a 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8020322:	20fa      	movs	r0, #250	@ 0xfa
 8020324:	f7f6 ff8f 	bl	8017246 <_Z5delaym>
 8020328:	e012      	b.n	8020350 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 802032a:	78fb      	ldrb	r3, [r7, #3]
 802032c:	2b01      	cmp	r3, #1
 802032e:	d10f      	bne.n	8020350 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 8020330:	2210      	movs	r2, #16
 8020332:	217e      	movs	r1, #126	@ 0x7e
 8020334:	6878      	ldr	r0, [r7, #4]
 8020336:	f7ff fa7e 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 802033a:	2064      	movs	r0, #100	@ 0x64
 802033c:	f7f6 ff83 	bl	8017246 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 8020340:	2214      	movs	r2, #20
 8020342:	217e      	movs	r1, #126	@ 0x7e
 8020344:	6878      	ldr	r0, [r7, #4]
 8020346:	f7ff fa76 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 802034a:	2064      	movs	r0, #100	@ 0x64
 802034c:	f7f6 ff7b 	bl	8017246 <_Z5delaym>
	}
	return CORE_OK;
 8020350:	2301      	movs	r3, #1
}
 8020352:	4618      	mov	r0, r3
 8020354:	3708      	adds	r7, #8
 8020356:	46bd      	mov	sp, r7
 8020358:	bd80      	pop	{r7, pc}

0802035a <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 802035a:	b580      	push	{r7, lr}
 802035c:	b082      	sub	sp, #8
 802035e:	af00      	add	r7, sp, #0
 8020360:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 8020362:	22b6      	movs	r2, #182	@ 0xb6
 8020364:	217e      	movs	r1, #126	@ 0x7e
 8020366:	6878      	ldr	r0, [r7, #4]
 8020368:	f7ff fa65 	bl	801f836 <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 802036c:	200a      	movs	r0, #10
 802036e:	f7f6 ff6a 	bl	8017246 <_Z5delaym>
}
 8020372:	bf00      	nop
 8020374:	3708      	adds	r7, #8
 8020376:	46bd      	mov	sp, r7
 8020378:	bd80      	pop	{r7, pc}

0802037a <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 802037a:	b480      	push	{r7}
 802037c:	b089      	sub	sp, #36	@ 0x24
 802037e:	af00      	add	r7, sp, #0
 8020380:	60f8      	str	r0, [r7, #12]
 8020382:	460b      	mov	r3, r1
 8020384:	607a      	str	r2, [r7, #4]
 8020386:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 802038c:	69fb      	ldr	r3, [r7, #28]
 802038e:	1c5a      	adds	r2, r3, #1
 8020390:	61fa      	str	r2, [r7, #28]
 8020392:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 8020394:	2301      	movs	r3, #1
 8020396:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	613b      	str	r3, [r7, #16]
 802039c:	e027      	b.n	80203ee <_Z10cobsEncodePhhS_+0x74>
	{
		if (*byte) // Byte not zero, write it
 802039e:	693b      	ldr	r3, [r7, #16]
 80203a0:	781b      	ldrb	r3, [r3, #0]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d008      	beq.n	80203b8 <_Z10cobsEncodePhhS_+0x3e>
			*encode++ = *byte, ++code;
 80203a6:	69fb      	ldr	r3, [r7, #28]
 80203a8:	1c5a      	adds	r2, r3, #1
 80203aa:	61fa      	str	r2, [r7, #28]
 80203ac:	693a      	ldr	r2, [r7, #16]
 80203ae:	7812      	ldrb	r2, [r2, #0]
 80203b0:	701a      	strb	r2, [r3, #0]
 80203b2:	7dfb      	ldrb	r3, [r7, #23]
 80203b4:	3301      	adds	r3, #1
 80203b6:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 80203b8:	693b      	ldr	r3, [r7, #16]
 80203ba:	781b      	ldrb	r3, [r3, #0]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d002      	beq.n	80203c6 <_Z10cobsEncodePhhS_+0x4c>
 80203c0:	7dfb      	ldrb	r3, [r7, #23]
 80203c2:	2bff      	cmp	r3, #255	@ 0xff
 80203c4:	d110      	bne.n	80203e8 <_Z10cobsEncodePhhS_+0x6e>
		{
			*codep = code, code = 1, codep = encode;
 80203c6:	69bb      	ldr	r3, [r7, #24]
 80203c8:	7dfa      	ldrb	r2, [r7, #23]
 80203ca:	701a      	strb	r2, [r3, #0]
 80203cc:	2301      	movs	r3, #1
 80203ce:	75fb      	strb	r3, [r7, #23]
 80203d0:	69fb      	ldr	r3, [r7, #28]
 80203d2:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 80203d4:	693b      	ldr	r3, [r7, #16]
 80203d6:	781b      	ldrb	r3, [r3, #0]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d002      	beq.n	80203e2 <_Z10cobsEncodePhhS_+0x68>
 80203dc:	7afb      	ldrb	r3, [r7, #11]
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d002      	beq.n	80203e8 <_Z10cobsEncodePhhS_+0x6e>
				++encode;
 80203e2:	69fb      	ldr	r3, [r7, #28]
 80203e4:	3301      	adds	r3, #1
 80203e6:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 80203e8:	693b      	ldr	r3, [r7, #16]
 80203ea:	3301      	adds	r3, #1
 80203ec:	613b      	str	r3, [r7, #16]
 80203ee:	7afb      	ldrb	r3, [r7, #11]
 80203f0:	1e5a      	subs	r2, r3, #1
 80203f2:	72fa      	strb	r2, [r7, #11]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	bf14      	ite	ne
 80203f8:	2301      	movne	r3, #1
 80203fa:	2300      	moveq	r3, #0
 80203fc:	b2db      	uxtb	r3, r3
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d1cd      	bne.n	802039e <_Z10cobsEncodePhhS_+0x24>
		}
	}
	*codep = code; // Write final code value
 8020402:	69bb      	ldr	r3, [r7, #24]
 8020404:	7dfa      	ldrb	r2, [r7, #23]
 8020406:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 8020408:	69fa      	ldr	r2, [r7, #28]
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	1ad3      	subs	r3, r2, r3
 802040e:	b2db      	uxtb	r3, r3
}
 8020410:	4618      	mov	r0, r3
 8020412:	3724      	adds	r7, #36	@ 0x24
 8020414:	46bd      	mov	sp, r7
 8020416:	f85d 7b04 	ldr.w	r7, [sp], #4
 802041a:	4770      	bx	lr

0802041c <_Z10cobsDecodePhhS_>:
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
uint8_t cobsDecode(uint8_t *buffer, uint8_t length, uint8_t *data)
{
 802041c:	b480      	push	{r7}
 802041e:	b089      	sub	sp, #36	@ 0x24
 8020420:	af00      	add	r7, sp, #0
 8020422:	60f8      	str	r0, [r7, #12]
 8020424:	460b      	mov	r3, r1
 8020426:	607a      	str	r2, [r7, #4]
 8020428:	72fb      	strb	r3, [r7, #11]

	const uint8_t *byte = buffer; // Encoded input byte pointer
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	61fb      	str	r3, [r7, #28]
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	61bb      	str	r3, [r7, #24]

	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8020432:	23ff      	movs	r3, #255	@ 0xff
 8020434:	75fb      	strb	r3, [r7, #23]
 8020436:	2300      	movs	r3, #0
 8020438:	75bb      	strb	r3, [r7, #22]
 802043a:	e020      	b.n	802047e <_Z10cobsDecodePhhS_+0x62>
	{
		if (block) // Decode block byte
 802043c:	7dbb      	ldrb	r3, [r7, #22]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d008      	beq.n	8020454 <_Z10cobsDecodePhhS_+0x38>
			*decode++ = *byte++;
 8020442:	69fa      	ldr	r2, [r7, #28]
 8020444:	1c53      	adds	r3, r2, #1
 8020446:	61fb      	str	r3, [r7, #28]
 8020448:	69bb      	ldr	r3, [r7, #24]
 802044a:	1c59      	adds	r1, r3, #1
 802044c:	61b9      	str	r1, [r7, #24]
 802044e:	7812      	ldrb	r2, [r2, #0]
 8020450:	701a      	strb	r2, [r3, #0]
 8020452:	e011      	b.n	8020478 <_Z10cobsDecodePhhS_+0x5c>
		else
		{
			if (code != 0xff) // Encoded zero, write it
 8020454:	7dfb      	ldrb	r3, [r7, #23]
 8020456:	2bff      	cmp	r3, #255	@ 0xff
 8020458:	d004      	beq.n	8020464 <_Z10cobsDecodePhhS_+0x48>
				*decode++ = 0;
 802045a:	69bb      	ldr	r3, [r7, #24]
 802045c:	1c5a      	adds	r2, r3, #1
 802045e:	61ba      	str	r2, [r7, #24]
 8020460:	2200      	movs	r2, #0
 8020462:	701a      	strb	r2, [r3, #0]
			block = code = *byte++; // Next block length
 8020464:	69fb      	ldr	r3, [r7, #28]
 8020466:	1c5a      	adds	r2, r3, #1
 8020468:	61fa      	str	r2, [r7, #28]
 802046a:	781b      	ldrb	r3, [r3, #0]
 802046c:	75fb      	strb	r3, [r7, #23]
 802046e:	7dfb      	ldrb	r3, [r7, #23]
 8020470:	75bb      	strb	r3, [r7, #22]
			if (!code) // Delimiter code found
 8020472:	7dfb      	ldrb	r3, [r7, #23]
 8020474:	2b00      	cmp	r3, #0
 8020476:	d009      	beq.n	802048c <_Z10cobsDecodePhhS_+0x70>
	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8020478:	7dbb      	ldrb	r3, [r7, #22]
 802047a:	3b01      	subs	r3, #1
 802047c:	75bb      	strb	r3, [r7, #22]
 802047e:	7afb      	ldrb	r3, [r7, #11]
 8020480:	68fa      	ldr	r2, [r7, #12]
 8020482:	4413      	add	r3, r2
 8020484:	69fa      	ldr	r2, [r7, #28]
 8020486:	429a      	cmp	r2, r3
 8020488:	d3d8      	bcc.n	802043c <_Z10cobsDecodePhhS_+0x20>
 802048a:	e000      	b.n	802048e <_Z10cobsDecodePhhS_+0x72>
				break;
 802048c:	bf00      	nop
		}
	}

	return (uint8_t)(decode - (uint8_t *)data);
 802048e:	69ba      	ldr	r2, [r7, #24]
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	1ad3      	subs	r3, r2, r3
 8020494:	b2db      	uxtb	r3, r3
}
 8020496:	4618      	mov	r0, r3
 8020498:	3724      	adds	r7, #36	@ 0x24
 802049a:	46bd      	mov	sp, r7
 802049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204a0:	4770      	bx	lr
	...

080204a4 <_Z17cobsDecodeInPlacePhh>:



uint8_t cobsDecodeInPlace(uint8_t *buffer, uint8_t length)
{
 80204a4:	b580      	push	{r7, lr}
 80204a6:	b084      	sub	sp, #16
 80204a8:	af00      	add	r7, sp, #0
 80204aa:	6078      	str	r0, [r7, #4]
 80204ac:	460b      	mov	r3, r1
 80204ae:	70fb      	strb	r3, [r7, #3]
	uint8_t decode_len = cobsDecode(buffer, length, cobsDecodeBuffer);
 80204b0:	78fb      	ldrb	r3, [r7, #3]
 80204b2:	4a0f      	ldr	r2, [pc, #60]	@ (80204f0 <_Z17cobsDecodeInPlacePhh+0x4c>)
 80204b4:	4619      	mov	r1, r3
 80204b6:	6878      	ldr	r0, [r7, #4]
 80204b8:	f7ff ffb0 	bl	802041c <_Z10cobsDecodePhhS_>
 80204bc:	4603      	mov	r3, r0
 80204be:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i<decode_len; i++){
 80204c0:	2300      	movs	r3, #0
 80204c2:	60fb      	str	r3, [r7, #12]
 80204c4:	e00a      	b.n	80204dc <_Z17cobsDecodeInPlacePhh+0x38>
		buffer[i] = cobsDecodeBuffer[i];
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	687a      	ldr	r2, [r7, #4]
 80204ca:	4413      	add	r3, r2
 80204cc:	4908      	ldr	r1, [pc, #32]	@ (80204f0 <_Z17cobsDecodeInPlacePhh+0x4c>)
 80204ce:	68fa      	ldr	r2, [r7, #12]
 80204d0:	440a      	add	r2, r1
 80204d2:	7812      	ldrb	r2, [r2, #0]
 80204d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<decode_len; i++){
 80204d6:	68fb      	ldr	r3, [r7, #12]
 80204d8:	3301      	adds	r3, #1
 80204da:	60fb      	str	r3, [r7, #12]
 80204dc:	7afb      	ldrb	r3, [r7, #11]
 80204de:	68fa      	ldr	r2, [r7, #12]
 80204e0:	429a      	cmp	r2, r3
 80204e2:	dbf0      	blt.n	80204c6 <_Z17cobsDecodeInPlacePhh+0x22>
	}

	return decode_len;
 80204e4:	7afb      	ldrb	r3, [r7, #11]
}
 80204e6:	4618      	mov	r0, r3
 80204e8:	3710      	adds	r7, #16
 80204ea:	46bd      	mov	sp, r7
 80204ec:	bd80      	pop	{r7, pc}
 80204ee:	bf00      	nop
 80204f0:	240286f4 	.word	0x240286f4

080204f4 <_Z15uint8_to_uint16hh>:
	temp = ((bytearray[3] << 24) | (bytearray[2] << 16) | (bytearray[1] << 8)
			| bytearray[0]);
	return *((float*) &temp);
}

uint16_t uint8_to_uint16(uint8_t byte1, uint8_t byte2) {
 80204f4:	b480      	push	{r7}
 80204f6:	b085      	sub	sp, #20
 80204f8:	af00      	add	r7, sp, #0
 80204fa:	4603      	mov	r3, r0
 80204fc:	460a      	mov	r2, r1
 80204fe:	71fb      	strb	r3, [r7, #7]
 8020500:	4613      	mov	r3, r2
 8020502:	71bb      	strb	r3, [r7, #6]
	uint16_t out = byte1 << 8 | byte2;
 8020504:	79fb      	ldrb	r3, [r7, #7]
 8020506:	021b      	lsls	r3, r3, #8
 8020508:	b21a      	sxth	r2, r3
 802050a:	79bb      	ldrb	r3, [r7, #6]
 802050c:	b21b      	sxth	r3, r3
 802050e:	4313      	orrs	r3, r2
 8020510:	b21b      	sxth	r3, r3
 8020512:	81fb      	strh	r3, [r7, #14]
	return out;
 8020514:	89fb      	ldrh	r3, [r7, #14]
}
 8020516:	4618      	mov	r0, r3
 8020518:	3714      	adds	r7, #20
 802051a:	46bd      	mov	sp, r7
 802051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020520:	4770      	bx	lr

08020522 <_Z19bytearray_to_uint16Ph>:

uint16_t bytearray_to_uint16(uint8_t *bytearray) {
 8020522:	b480      	push	{r7}
 8020524:	b085      	sub	sp, #20
 8020526:	af00      	add	r7, sp, #0
 8020528:	6078      	str	r0, [r7, #4]
	uint16_t out = bytearray[1] << 8 | bytearray[0];
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	3301      	adds	r3, #1
 802052e:	781b      	ldrb	r3, [r3, #0]
 8020530:	021b      	lsls	r3, r3, #8
 8020532:	b21a      	sxth	r2, r3
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	781b      	ldrb	r3, [r3, #0]
 8020538:	b21b      	sxth	r3, r3
 802053a:	4313      	orrs	r3, r2
 802053c:	b21b      	sxth	r3, r3
 802053e:	81fb      	strh	r3, [r7, #14]
	return out;
 8020540:	89fb      	ldrh	r3, [r7, #14]
}
 8020542:	4618      	mov	r0, r3
 8020544:	3714      	adds	r7, #20
 8020546:	46bd      	mov	sp, r7
 8020548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802054c:	4770      	bx	lr

0802054e <_Z18bytearray_to_int16Ph>:

int16_t bytearray_to_int16(uint8_t *bytearray) {
 802054e:	b480      	push	{r7}
 8020550:	b085      	sub	sp, #20
 8020552:	af00      	add	r7, sp, #0
 8020554:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	3301      	adds	r3, #1
 802055a:	781b      	ldrb	r3, [r3, #0]
 802055c:	021b      	lsls	r3, r3, #8
 802055e:	b21a      	sxth	r2, r3
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	781b      	ldrb	r3, [r3, #0]
 8020564:	b21b      	sxth	r3, r3
 8020566:	4313      	orrs	r3, r2
 8020568:	81fb      	strh	r3, [r7, #14]
	return out;
 802056a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 802056e:	4618      	mov	r0, r3
 8020570:	3714      	adds	r7, #20
 8020572:	46bd      	mov	sp, r7
 8020574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020578:	4770      	bx	lr

0802057a <_Z18int32_to_bytearraylPh>:
    bytearray[1] = (l >> 8) & 0x00FF;
    bytearray[2] = (l >> 16) & 0x00FF;
    bytearray[3] = l >> 24;
}

void int32_to_bytearray(int32_t value, uint8_t* bytearray){
 802057a:	b480      	push	{r7}
 802057c:	b083      	sub	sp, #12
 802057e:	af00      	add	r7, sp, #0
 8020580:	6078      	str	r0, [r7, #4]
 8020582:	6039      	str	r1, [r7, #0]
    // Ensure the bytearray pointer is not null

    // Break the int32_t value into 4 bytes and store them in the bytearray (little-endian order)
    bytearray[0] = value & 0xFF;         // Least significant byte
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	b2da      	uxtb	r2, r3
 8020588:	683b      	ldr	r3, [r7, #0]
 802058a:	701a      	strb	r2, [r3, #0]
    bytearray[1] = (value >> 8) & 0xFF;
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	121a      	asrs	r2, r3, #8
 8020590:	683b      	ldr	r3, [r7, #0]
 8020592:	3301      	adds	r3, #1
 8020594:	b2d2      	uxtb	r2, r2
 8020596:	701a      	strb	r2, [r3, #0]
    bytearray[2] = (value >> 16) & 0xFF;
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	141a      	asrs	r2, r3, #16
 802059c:	683b      	ldr	r3, [r7, #0]
 802059e:	3302      	adds	r3, #2
 80205a0:	b2d2      	uxtb	r2, r2
 80205a2:	701a      	strb	r2, [r3, #0]
    bytearray[3] = (value >> 24) & 0xFF; // Most significant byte
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	0e1a      	lsrs	r2, r3, #24
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	3303      	adds	r3, #3
 80205ac:	b2d2      	uxtb	r2, r2
 80205ae:	701a      	strb	r2, [r3, #0]
}
 80205b0:	bf00      	nop
 80205b2:	370c      	adds	r7, #12
 80205b4:	46bd      	mov	sp, r7
 80205b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ba:	4770      	bx	lr

080205bc <_Z19uint16_to_bytearraytPh>:
    bytearray[1] = (value >> 8) & 0xFF;
    bytearray[2] = (value >> 16) & 0xFF;
    bytearray[3] = (value >> 24) & 0xFF; // Most significant byte
}

void uint16_to_bytearray(uint16_t value, uint8_t* bytearray){
 80205bc:	b480      	push	{r7}
 80205be:	b083      	sub	sp, #12
 80205c0:	af00      	add	r7, sp, #0
 80205c2:	4603      	mov	r3, r0
 80205c4:	6039      	str	r1, [r7, #0]
 80205c6:	80fb      	strh	r3, [r7, #6]
    bytearray[0] = value & 0xFF;         // Least significant byte
 80205c8:	88fb      	ldrh	r3, [r7, #6]
 80205ca:	b2da      	uxtb	r2, r3
 80205cc:	683b      	ldr	r3, [r7, #0]
 80205ce:	701a      	strb	r2, [r3, #0]
    bytearray[1] = (value >> 8) & 0xFF;  // Most significant byte
 80205d0:	88fb      	ldrh	r3, [r7, #6]
 80205d2:	0a1b      	lsrs	r3, r3, #8
 80205d4:	b29a      	uxth	r2, r3
 80205d6:	683b      	ldr	r3, [r7, #0]
 80205d8:	3301      	adds	r3, #1
 80205da:	b2d2      	uxtb	r2, r2
 80205dc:	701a      	strb	r2, [r3, #0]
}
 80205de:	bf00      	nop
 80205e0:	370c      	adds	r7, #12
 80205e2:	46bd      	mov	sp, r7
 80205e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e8:	4770      	bx	lr

080205ea <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 80205ea:	b480      	push	{r7}
 80205ec:	b083      	sub	sp, #12
 80205ee:	af00      	add	r7, sp, #0
 80205f0:	6078      	str	r0, [r7, #4]
	while(1);
 80205f2:	bf00      	nop
 80205f4:	e7fd      	b.n	80205f2 <_Z17core_ErrorHandleri+0x8>

080205f6 <_Z5limitfff>:

	return sum / len;
}


float limit(float data, float min_value, float max_value){
 80205f6:	b480      	push	{r7}
 80205f8:	b085      	sub	sp, #20
 80205fa:	af00      	add	r7, sp, #0
 80205fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8020600:	edc7 0a02 	vstr	s1, [r7, #8]
 8020604:	ed87 1a01 	vstr	s2, [r7, #4]
	if (data > max_value){
 8020608:	ed97 7a03 	vldr	s14, [r7, #12]
 802060c:	edd7 7a01 	vldr	s15, [r7, #4]
 8020610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020618:	dd01      	ble.n	802061e <_Z5limitfff+0x28>
		data = max_value;
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	60fb      	str	r3, [r7, #12]
	}
	if (data < min_value){
 802061e:	ed97 7a03 	vldr	s14, [r7, #12]
 8020622:	edd7 7a02 	vldr	s15, [r7, #8]
 8020626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802062e:	d501      	bpl.n	8020634 <_Z5limitfff+0x3e>
		data = min_value;
 8020630:	68bb      	ldr	r3, [r7, #8]
 8020632:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8020634:	68fb      	ldr	r3, [r7, #12]
 8020636:	ee07 3a90 	vmov	s15, r3
}
 802063a:	eeb0 0a67 	vmov.f32	s0, s15
 802063e:	3714      	adds	r7, #20
 8020640:	46bd      	mov	sp, r7
 8020642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020646:	4770      	bx	lr

08020648 <_Z5limitff>:


float limit(float data, float max_value){
 8020648:	b580      	push	{r7, lr}
 802064a:	b082      	sub	sp, #8
 802064c:	af00      	add	r7, sp, #0
 802064e:	ed87 0a01 	vstr	s0, [r7, #4]
 8020652:	edc7 0a00 	vstr	s1, [r7]
	return limit(data, -max_value, max_value);
 8020656:	edd7 7a00 	vldr	s15, [r7]
 802065a:	eef1 7a67 	vneg.f32	s15, s15
 802065e:	ed97 1a00 	vldr	s2, [r7]
 8020662:	eef0 0a67 	vmov.f32	s1, s15
 8020666:	ed97 0a01 	vldr	s0, [r7, #4]
 802066a:	f7ff ffc4 	bl	80205f6 <_Z5limitfff>
 802066e:	eef0 7a40 	vmov.f32	s15, s0
}
 8020672:	eeb0 0a67 	vmov.f32	s0, s15
 8020676:	3708      	adds	r7, #8
 8020678:	46bd      	mov	sp, r7
 802067a:	bd80      	pop	{r7, pc}

0802067c <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>:
#include "core_utils_gpio.h"

static core_utils_Callback<void, void> callbacks[16];
static void execute_gpio_callback(uint16_t gpio_pin);

core_utils_GPIO::core_utils_GPIO(GPIO_TypeDef *GPIOx, uint16_t pin) {
 802067c:	b480      	push	{r7}
 802067e:	b085      	sub	sp, #20
 8020680:	af00      	add	r7, sp, #0
 8020682:	60f8      	str	r0, [r7, #12]
 8020684:	60b9      	str	r1, [r7, #8]
 8020686:	4613      	mov	r3, r2
 8020688:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 802068a:	68fb      	ldr	r3, [r7, #12]
 802068c:	68ba      	ldr	r2, [r7, #8]
 802068e:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8020690:	68fb      	ldr	r3, [r7, #12]
 8020692:	88fa      	ldrh	r2, [r7, #6]
 8020694:	809a      	strh	r2, [r3, #4]
}
 8020696:	68fb      	ldr	r3, [r7, #12]
 8020698:	4618      	mov	r0, r3
 802069a:	3714      	adds	r7, #20
 802069c:	46bd      	mov	sp, r7
 802069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206a2:	4770      	bx	lr

080206a4 <_ZN15core_utils_GPIO6toggleEv>:
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
	}
}

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::toggle() {
 80206a4:	b580      	push	{r7, lr}
 80206a6:	b082      	sub	sp, #8
 80206a8:	af00      	add	r7, sp, #0
 80206aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, pin);
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	681a      	ldr	r2, [r3, #0]
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	889b      	ldrh	r3, [r3, #4]
 80206b4:	4619      	mov	r1, r3
 80206b6:	4610      	mov	r0, r2
 80206b8:	f7e6 f953 	bl	8006962 <HAL_GPIO_TogglePin>
}
 80206bc:	bf00      	nop
 80206be:	3708      	adds	r7, #8
 80206c0:	46bd      	mov	sp, r7
 80206c2:	bd80      	pop	{r7, pc}

080206c4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>:
	core_utils_gpio_registerExtiCallback(line,
			core_utils_Callback<void, void>(function));
}
/* -------------------------------------------------------------------------------- */
void core_utils_gpio_registerExtiCallback(uint16_t line,
		core_utils_Callback<void, void> callback) {
 80206c4:	b580      	push	{r7, lr}
 80206c6:	b082      	sub	sp, #8
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	4603      	mov	r3, r0
 80206cc:	6039      	str	r1, [r7, #0]
 80206ce:	80fb      	strh	r3, [r7, #6]
	switch (line) {
 80206d0:	88fb      	ldrh	r3, [r7, #6]
 80206d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80206d6:	f000 80db 	beq.w	8020890 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1cc>
 80206da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80206de:	f300 80dc 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 80206e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80206e6:	f000 80ce 	beq.w	8020886 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1c2>
 80206ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80206ee:	f300 80d4 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 80206f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80206f6:	f000 80c1 	beq.w	802087c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1b8>
 80206fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80206fe:	f300 80cc 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020706:	f000 80b4 	beq.w	8020872 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ae>
 802070a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802070e:	f300 80c4 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020716:	f000 80a7 	beq.w	8020868 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1a4>
 802071a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802071e:	f300 80bc 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020726:	f000 809a 	beq.w	802085e <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x19a>
 802072a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802072e:	f300 80b4 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020736:	f000 808d 	beq.w	8020854 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x190>
 802073a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802073e:	f300 80ac 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020746:	f000 8080 	beq.w	802084a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x186>
 802074a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802074e:	f300 80a4 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020752:	2b80      	cmp	r3, #128	@ 0x80
 8020754:	d074      	beq.n	8020840 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x17c>
 8020756:	2b80      	cmp	r3, #128	@ 0x80
 8020758:	f300 809f 	bgt.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 802075c:	2b20      	cmp	r3, #32
 802075e:	dc49      	bgt.n	80207f4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x130>
 8020760:	2b00      	cmp	r3, #0
 8020762:	f340 809a 	ble.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020766:	3b01      	subs	r3, #1
 8020768:	2b1f      	cmp	r3, #31
 802076a:	f200 8096 	bhi.w	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 802076e:	a201      	add	r2, pc, #4	@ (adr r2, 8020774 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0xb0>)
 8020770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020774:	080207fb 	.word	0x080207fb
 8020778:	08020805 	.word	0x08020805
 802077c:	0802089b 	.word	0x0802089b
 8020780:	0802080f 	.word	0x0802080f
 8020784:	0802089b 	.word	0x0802089b
 8020788:	0802089b 	.word	0x0802089b
 802078c:	0802089b 	.word	0x0802089b
 8020790:	08020819 	.word	0x08020819
 8020794:	0802089b 	.word	0x0802089b
 8020798:	0802089b 	.word	0x0802089b
 802079c:	0802089b 	.word	0x0802089b
 80207a0:	0802089b 	.word	0x0802089b
 80207a4:	0802089b 	.word	0x0802089b
 80207a8:	0802089b 	.word	0x0802089b
 80207ac:	0802089b 	.word	0x0802089b
 80207b0:	08020823 	.word	0x08020823
 80207b4:	0802089b 	.word	0x0802089b
 80207b8:	0802089b 	.word	0x0802089b
 80207bc:	0802089b 	.word	0x0802089b
 80207c0:	0802089b 	.word	0x0802089b
 80207c4:	0802089b 	.word	0x0802089b
 80207c8:	0802089b 	.word	0x0802089b
 80207cc:	0802089b 	.word	0x0802089b
 80207d0:	0802089b 	.word	0x0802089b
 80207d4:	0802089b 	.word	0x0802089b
 80207d8:	0802089b 	.word	0x0802089b
 80207dc:	0802089b 	.word	0x0802089b
 80207e0:	0802089b 	.word	0x0802089b
 80207e4:	0802089b 	.word	0x0802089b
 80207e8:	0802089b 	.word	0x0802089b
 80207ec:	0802089b 	.word	0x0802089b
 80207f0:	0802082d 	.word	0x0802082d
 80207f4:	2b40      	cmp	r3, #64	@ 0x40
 80207f6:	d01e      	beq.n	8020836 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x172>
	case GPIO_PIN_15: {
		callbacks[15] = callback;
		break;
	}
	}
}
 80207f8:	e04f      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[0] = callback;
 80207fa:	6839      	ldr	r1, [r7, #0]
 80207fc:	4829      	ldr	r0, [pc, #164]	@ (80208a4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e0>)
 80207fe:	f7f2 fda9 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020802:	e04a      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[1] = callback;
 8020804:	6839      	ldr	r1, [r7, #0]
 8020806:	4828      	ldr	r0, [pc, #160]	@ (80208a8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e4>)
 8020808:	f7f2 fda4 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802080c:	e045      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[2] = callback;
 802080e:	6839      	ldr	r1, [r7, #0]
 8020810:	4826      	ldr	r0, [pc, #152]	@ (80208ac <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e8>)
 8020812:	f7f2 fd9f 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020816:	e040      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[3] = callback;
 8020818:	6839      	ldr	r1, [r7, #0]
 802081a:	4825      	ldr	r0, [pc, #148]	@ (80208b0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ec>)
 802081c:	f7f2 fd9a 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020820:	e03b      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[4] = callback;
 8020822:	6839      	ldr	r1, [r7, #0]
 8020824:	4823      	ldr	r0, [pc, #140]	@ (80208b4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f0>)
 8020826:	f7f2 fd95 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802082a:	e036      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[5] = callback;
 802082c:	6839      	ldr	r1, [r7, #0]
 802082e:	4822      	ldr	r0, [pc, #136]	@ (80208b8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f4>)
 8020830:	f7f2 fd90 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020834:	e031      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[6] = callback;
 8020836:	6839      	ldr	r1, [r7, #0]
 8020838:	4820      	ldr	r0, [pc, #128]	@ (80208bc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f8>)
 802083a:	f7f2 fd8b 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802083e:	e02c      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[7] = callback;
 8020840:	6839      	ldr	r1, [r7, #0]
 8020842:	481f      	ldr	r0, [pc, #124]	@ (80208c0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1fc>)
 8020844:	f7f2 fd86 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020848:	e027      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[8] = callback;
 802084a:	6839      	ldr	r1, [r7, #0]
 802084c:	481d      	ldr	r0, [pc, #116]	@ (80208c4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x200>)
 802084e:	f7f2 fd81 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020852:	e022      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[9] = callback;
 8020854:	6839      	ldr	r1, [r7, #0]
 8020856:	481c      	ldr	r0, [pc, #112]	@ (80208c8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x204>)
 8020858:	f7f2 fd7c 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802085c:	e01d      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[10] = callback;
 802085e:	6839      	ldr	r1, [r7, #0]
 8020860:	481a      	ldr	r0, [pc, #104]	@ (80208cc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x208>)
 8020862:	f7f2 fd77 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020866:	e018      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[11] = callback;
 8020868:	6839      	ldr	r1, [r7, #0]
 802086a:	4819      	ldr	r0, [pc, #100]	@ (80208d0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x20c>)
 802086c:	f7f2 fd72 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020870:	e013      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[12] = callback;
 8020872:	6839      	ldr	r1, [r7, #0]
 8020874:	4817      	ldr	r0, [pc, #92]	@ (80208d4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x210>)
 8020876:	f7f2 fd6d 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802087a:	e00e      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[13] = callback;
 802087c:	6839      	ldr	r1, [r7, #0]
 802087e:	4816      	ldr	r0, [pc, #88]	@ (80208d8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x214>)
 8020880:	f7f2 fd68 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020884:	e009      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[14] = callback;
 8020886:	6839      	ldr	r1, [r7, #0]
 8020888:	4814      	ldr	r0, [pc, #80]	@ (80208dc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x218>)
 802088a:	f7f2 fd63 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802088e:	e004      	b.n	802089a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[15] = callback;
 8020890:	6839      	ldr	r1, [r7, #0]
 8020892:	4813      	ldr	r0, [pc, #76]	@ (80208e0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x21c>)
 8020894:	f7f2 fd5e 	bl	8013354 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020898:	bf00      	nop
}
 802089a:	bf00      	nop
 802089c:	3708      	adds	r7, #8
 802089e:	46bd      	mov	sp, r7
 80208a0:	bd80      	pop	{r7, pc}
 80208a2:	bf00      	nop
 80208a4:	240287f4 	.word	0x240287f4
 80208a8:	24028814 	.word	0x24028814
 80208ac:	24028834 	.word	0x24028834
 80208b0:	24028854 	.word	0x24028854
 80208b4:	24028874 	.word	0x24028874
 80208b8:	24028894 	.word	0x24028894
 80208bc:	240288b4 	.word	0x240288b4
 80208c0:	240288d4 	.word	0x240288d4
 80208c4:	240288f4 	.word	0x240288f4
 80208c8:	24028914 	.word	0x24028914
 80208cc:	24028934 	.word	0x24028934
 80208d0:	24028954 	.word	0x24028954
 80208d4:	24028974 	.word	0x24028974
 80208d8:	24028994 	.word	0x24028994
 80208dc:	240289b4 	.word	0x240289b4
 80208e0:	240289d4 	.word	0x240289d4

080208e4 <HAL_GPIO_EXTI_Callback>:

/* -------------------------------------------------------------------------------- */
extern "C" {
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 80208e4:	b580      	push	{r7, lr}
 80208e6:	b082      	sub	sp, #8
 80208e8:	af00      	add	r7, sp, #0
 80208ea:	4603      	mov	r3, r0
 80208ec:	80fb      	strh	r3, [r7, #6]
	execute_gpio_callback(gpio_pin);
 80208ee:	88fb      	ldrh	r3, [r7, #6]
 80208f0:	4618      	mov	r0, r3
 80208f2:	f000 f805 	bl	8020900 <_ZL21execute_gpio_callbackt>
}
 80208f6:	bf00      	nop
 80208f8:	3708      	adds	r7, #8
 80208fa:	46bd      	mov	sp, r7
 80208fc:	bd80      	pop	{r7, pc}
	...

08020900 <_ZL21execute_gpio_callbackt>:
}

static void execute_gpio_callback(uint16_t gpio_pin) {
 8020900:	b580      	push	{r7, lr}
 8020902:	b082      	sub	sp, #8
 8020904:	af00      	add	r7, sp, #0
 8020906:	4603      	mov	r3, r0
 8020908:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 802090a:	88fb      	ldrh	r3, [r7, #6]
 802090c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020910:	f000 80f6 	beq.w	8020b00 <_ZL21execute_gpio_callbackt+0x200>
 8020914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020918:	f300 80f9 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802091c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020920:	f000 80e7 	beq.w	8020af2 <_ZL21execute_gpio_callbackt+0x1f2>
 8020924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020928:	f300 80f1 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802092c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020930:	f000 80d8 	beq.w	8020ae4 <_ZL21execute_gpio_callbackt+0x1e4>
 8020934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020938:	f300 80e9 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802093c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020940:	f000 80c9 	beq.w	8020ad6 <_ZL21execute_gpio_callbackt+0x1d6>
 8020944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020948:	f300 80e1 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802094c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020950:	f000 80ba 	beq.w	8020ac8 <_ZL21execute_gpio_callbackt+0x1c8>
 8020954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020958:	f300 80d9 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802095c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020960:	f000 80ab 	beq.w	8020aba <_ZL21execute_gpio_callbackt+0x1ba>
 8020964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020968:	f300 80d1 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802096c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020970:	f000 809c 	beq.w	8020aac <_ZL21execute_gpio_callbackt+0x1ac>
 8020974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020978:	f300 80c9 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802097c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020980:	f000 808d 	beq.w	8020a9e <_ZL21execute_gpio_callbackt+0x19e>
 8020984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020988:	f300 80c1 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 802098c:	2b80      	cmp	r3, #128	@ 0x80
 802098e:	d07f      	beq.n	8020a90 <_ZL21execute_gpio_callbackt+0x190>
 8020990:	2b80      	cmp	r3, #128	@ 0x80
 8020992:	f300 80bc 	bgt.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 8020996:	2b20      	cmp	r3, #32
 8020998:	dc4a      	bgt.n	8020a30 <_ZL21execute_gpio_callbackt+0x130>
 802099a:	2b00      	cmp	r3, #0
 802099c:	f340 80b7 	ble.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 80209a0:	3b01      	subs	r3, #1
 80209a2:	2b1f      	cmp	r3, #31
 80209a4:	f200 80b3 	bhi.w	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
 80209a8:	a201      	add	r2, pc, #4	@ (adr r2, 80209b0 <_ZL21execute_gpio_callbackt+0xb0>)
 80209aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209ae:	bf00      	nop
 80209b0:	08020a37 	.word	0x08020a37
 80209b4:	08020a43 	.word	0x08020a43
 80209b8:	08020b0f 	.word	0x08020b0f
 80209bc:	08020a4f 	.word	0x08020a4f
 80209c0:	08020b0f 	.word	0x08020b0f
 80209c4:	08020b0f 	.word	0x08020b0f
 80209c8:	08020b0f 	.word	0x08020b0f
 80209cc:	08020a5b 	.word	0x08020a5b
 80209d0:	08020b0f 	.word	0x08020b0f
 80209d4:	08020b0f 	.word	0x08020b0f
 80209d8:	08020b0f 	.word	0x08020b0f
 80209dc:	08020b0f 	.word	0x08020b0f
 80209e0:	08020b0f 	.word	0x08020b0f
 80209e4:	08020b0f 	.word	0x08020b0f
 80209e8:	08020b0f 	.word	0x08020b0f
 80209ec:	08020a67 	.word	0x08020a67
 80209f0:	08020b0f 	.word	0x08020b0f
 80209f4:	08020b0f 	.word	0x08020b0f
 80209f8:	08020b0f 	.word	0x08020b0f
 80209fc:	08020b0f 	.word	0x08020b0f
 8020a00:	08020b0f 	.word	0x08020b0f
 8020a04:	08020b0f 	.word	0x08020b0f
 8020a08:	08020b0f 	.word	0x08020b0f
 8020a0c:	08020b0f 	.word	0x08020b0f
 8020a10:	08020b0f 	.word	0x08020b0f
 8020a14:	08020b0f 	.word	0x08020b0f
 8020a18:	08020b0f 	.word	0x08020b0f
 8020a1c:	08020b0f 	.word	0x08020b0f
 8020a20:	08020b0f 	.word	0x08020b0f
 8020a24:	08020b0f 	.word	0x08020b0f
 8020a28:	08020b0f 	.word	0x08020b0f
 8020a2c:	08020a75 	.word	0x08020a75
 8020a30:	2b40      	cmp	r3, #64	@ 0x40
 8020a32:	d026      	beq.n	8020a82 <_ZL21execute_gpio_callbackt+0x182>
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 8020a34:	e06b      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[0].call();
 8020a36:	4b38      	ldr	r3, [pc, #224]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a38:	681b      	ldr	r3, [r3, #0]
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	4836      	ldr	r0, [pc, #216]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a3e:	4798      	blx	r3
		break;
 8020a40:	e065      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[1].call();
 8020a42:	4b35      	ldr	r3, [pc, #212]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a44:	6a1b      	ldr	r3, [r3, #32]
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	4834      	ldr	r0, [pc, #208]	@ (8020b1c <_ZL21execute_gpio_callbackt+0x21c>)
 8020a4a:	4798      	blx	r3
		break;
 8020a4c:	e05f      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[2].call();
 8020a4e:	4b32      	ldr	r3, [pc, #200]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020a52:	681b      	ldr	r3, [r3, #0]
 8020a54:	4832      	ldr	r0, [pc, #200]	@ (8020b20 <_ZL21execute_gpio_callbackt+0x220>)
 8020a56:	4798      	blx	r3
		break;
 8020a58:	e059      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[3].call();
 8020a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	4830      	ldr	r0, [pc, #192]	@ (8020b24 <_ZL21execute_gpio_callbackt+0x224>)
 8020a62:	4798      	blx	r3
		break;
 8020a64:	e053      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[4].call();
 8020a66:	4b2c      	ldr	r3, [pc, #176]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020a6c:	681b      	ldr	r3, [r3, #0]
 8020a6e:	482e      	ldr	r0, [pc, #184]	@ (8020b28 <_ZL21execute_gpio_callbackt+0x228>)
 8020a70:	4798      	blx	r3
		break;
 8020a72:	e04c      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[5].call();
 8020a74:	4b28      	ldr	r3, [pc, #160]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	482b      	ldr	r0, [pc, #172]	@ (8020b2c <_ZL21execute_gpio_callbackt+0x22c>)
 8020a7e:	4798      	blx	r3
		break;
 8020a80:	e045      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[6].call();
 8020a82:	4b25      	ldr	r3, [pc, #148]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	4829      	ldr	r0, [pc, #164]	@ (8020b30 <_ZL21execute_gpio_callbackt+0x230>)
 8020a8c:	4798      	blx	r3
		break;
 8020a8e:	e03e      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[7].call();
 8020a90:	4b21      	ldr	r3, [pc, #132]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	4826      	ldr	r0, [pc, #152]	@ (8020b34 <_ZL21execute_gpio_callbackt+0x234>)
 8020a9a:	4798      	blx	r3
		break;
 8020a9c:	e037      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[8].call();
 8020a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020aa0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	4824      	ldr	r0, [pc, #144]	@ (8020b38 <_ZL21execute_gpio_callbackt+0x238>)
 8020aa8:	4798      	blx	r3
		break;
 8020aaa:	e030      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[9].call();
 8020aac:	4b1a      	ldr	r3, [pc, #104]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020aae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	4821      	ldr	r0, [pc, #132]	@ (8020b3c <_ZL21execute_gpio_callbackt+0x23c>)
 8020ab6:	4798      	blx	r3
		break;
 8020ab8:	e029      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[10].call();
 8020aba:	4b17      	ldr	r3, [pc, #92]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	481f      	ldr	r0, [pc, #124]	@ (8020b40 <_ZL21execute_gpio_callbackt+0x240>)
 8020ac4:	4798      	blx	r3
		break;
 8020ac6:	e022      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[11].call();
 8020ac8:	4b13      	ldr	r3, [pc, #76]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020aca:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	481c      	ldr	r0, [pc, #112]	@ (8020b44 <_ZL21execute_gpio_callbackt+0x244>)
 8020ad2:	4798      	blx	r3
		break;
 8020ad4:	e01b      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[12].call();
 8020ad6:	4b10      	ldr	r3, [pc, #64]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020ad8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	481a      	ldr	r0, [pc, #104]	@ (8020b48 <_ZL21execute_gpio_callbackt+0x248>)
 8020ae0:	4798      	blx	r3
		break;
 8020ae2:	e014      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[13].call();
 8020ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020ae6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	4817      	ldr	r0, [pc, #92]	@ (8020b4c <_ZL21execute_gpio_callbackt+0x24c>)
 8020aee:	4798      	blx	r3
		break;
 8020af0:	e00d      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[14].call();
 8020af2:	4b09      	ldr	r3, [pc, #36]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020af4:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	4815      	ldr	r0, [pc, #84]	@ (8020b50 <_ZL21execute_gpio_callbackt+0x250>)
 8020afc:	4798      	blx	r3
		break;
 8020afe:	e006      	b.n	8020b0e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[15].call();
 8020b00:	4b05      	ldr	r3, [pc, #20]	@ (8020b18 <_ZL21execute_gpio_callbackt+0x218>)
 8020b02:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	4812      	ldr	r0, [pc, #72]	@ (8020b54 <_ZL21execute_gpio_callbackt+0x254>)
 8020b0a:	4798      	blx	r3
		break;
 8020b0c:	bf00      	nop
}
 8020b0e:	bf00      	nop
 8020b10:	3708      	adds	r7, #8
 8020b12:	46bd      	mov	sp, r7
 8020b14:	bd80      	pop	{r7, pc}
 8020b16:	bf00      	nop
 8020b18:	240287f4 	.word	0x240287f4
 8020b1c:	24028814 	.word	0x24028814
 8020b20:	24028834 	.word	0x24028834
 8020b24:	24028854 	.word	0x24028854
 8020b28:	24028874 	.word	0x24028874
 8020b2c:	24028894 	.word	0x24028894
 8020b30:	240288b4 	.word	0x240288b4
 8020b34:	240288d4 	.word	0x240288d4
 8020b38:	240288f4 	.word	0x240288f4
 8020b3c:	24028914 	.word	0x24028914
 8020b40:	24028934 	.word	0x24028934
 8020b44:	24028954 	.word	0x24028954
 8020b48:	24028974 	.word	0x24028974
 8020b4c:	24028994 	.word	0x24028994
 8020b50:	240289b4 	.word	0x240289b4
 8020b54:	240289d4 	.word	0x240289d4

08020b58 <_Z41__static_initialization_and_destruction_0ii>:
 8020b58:	b5b0      	push	{r4, r5, r7, lr}
 8020b5a:	b082      	sub	sp, #8
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	6078      	str	r0, [r7, #4]
 8020b60:	6039      	str	r1, [r7, #0]
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	2b01      	cmp	r3, #1
 8020b66:	d10f      	bne.n	8020b88 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8020b68:	683b      	ldr	r3, [r7, #0]
 8020b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020b6e:	4293      	cmp	r3, r2
 8020b70:	d10a      	bne.n	8020b88 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 8020b72:	4b07      	ldr	r3, [pc, #28]	@ (8020b90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8020b74:	240f      	movs	r4, #15
 8020b76:	461d      	mov	r5, r3
 8020b78:	e004      	b.n	8020b84 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8020b7a:	4628      	mov	r0, r5
 8020b7c:	f7f2 f836 	bl	8012bec <_ZN19core_utils_CallbackIvvEC1Ev>
 8020b80:	3c01      	subs	r4, #1
 8020b82:	3520      	adds	r5, #32
 8020b84:	2c00      	cmp	r4, #0
 8020b86:	daf8      	bge.n	8020b7a <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8020b88:	bf00      	nop
 8020b8a:	3708      	adds	r7, #8
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8020b90:	240287f4 	.word	0x240287f4

08020b94 <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 8020b94:	b580      	push	{r7, lr}
 8020b96:	af00      	add	r7, sp, #0
 8020b98:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8020b9c:	2001      	movs	r0, #1
 8020b9e:	f7ff ffdb 	bl	8020b58 <_Z41__static_initialization_and_destruction_0ii>
 8020ba2:	bd80      	pop	{r7, pc}

08020ba4 <_Z6millisv>:

#include "../core_includes.h"

#include "elapsedMillis.h"

uint32_t millis() {
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	af00      	add	r7, sp, #0
#if CORE_CONFIG_USE_RTOS
	return osKernelGetTickCount();
 8020ba8:	f7ed ff44 	bl	800ea34 <osKernelGetTickCount>
 8020bac:	4603      	mov	r3, r0
#else
	return HAL_GetTick();
#endif
}
 8020bae:	4618      	mov	r0, r3
 8020bb0:	bd80      	pop	{r7, pc}
 8020bb2:	0000      	movs	r0, r0
 8020bb4:	0000      	movs	r0, r0
	...

08020bb8 <sqrt>:
 8020bb8:	b508      	push	{r3, lr}
 8020bba:	ed2d 8b04 	vpush	{d8-d9}
 8020bbe:	eeb0 8b40 	vmov.f64	d8, d0
 8020bc2:	f000 fa1d 	bl	8021000 <__ieee754_sqrt>
 8020bc6:	eeb4 8b48 	vcmp.f64	d8, d8
 8020bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bce:	d60c      	bvs.n	8020bea <sqrt+0x32>
 8020bd0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8020bf0 <sqrt+0x38>
 8020bd4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8020bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bdc:	d505      	bpl.n	8020bea <sqrt+0x32>
 8020bde:	f002 f85b 	bl	8022c98 <__errno>
 8020be2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8020be6:	2321      	movs	r3, #33	@ 0x21
 8020be8:	6003      	str	r3, [r0, #0]
 8020bea:	ecbd 8b04 	vpop	{d8-d9}
 8020bee:	bd08      	pop	{r3, pc}
	...

08020bf8 <cos>:
 8020bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020bfa:	eeb0 7b40 	vmov.f64	d7, d0
 8020bfe:	ee17 3a90 	vmov	r3, s15
 8020c02:	4a21      	ldr	r2, [pc, #132]	@ (8020c88 <cos+0x90>)
 8020c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020c08:	4293      	cmp	r3, r2
 8020c0a:	d806      	bhi.n	8020c1a <cos+0x22>
 8020c0c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8020c80 <cos+0x88>
 8020c10:	b005      	add	sp, #20
 8020c12:	f85d eb04 	ldr.w	lr, [sp], #4
 8020c16:	f000 b9f7 	b.w	8021008 <__kernel_cos>
 8020c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8020c8c <cos+0x94>)
 8020c1c:	4293      	cmp	r3, r2
 8020c1e:	d904      	bls.n	8020c2a <cos+0x32>
 8020c20:	ee30 0b40 	vsub.f64	d0, d0, d0
 8020c24:	b005      	add	sp, #20
 8020c26:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c2a:	4668      	mov	r0, sp
 8020c2c:	f000 fbc8 	bl	80213c0 <__ieee754_rem_pio2>
 8020c30:	f000 0003 	and.w	r0, r0, #3
 8020c34:	2801      	cmp	r0, #1
 8020c36:	d009      	beq.n	8020c4c <cos+0x54>
 8020c38:	2802      	cmp	r0, #2
 8020c3a:	d010      	beq.n	8020c5e <cos+0x66>
 8020c3c:	b9b0      	cbnz	r0, 8020c6c <cos+0x74>
 8020c3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c42:	ed9d 0b00 	vldr	d0, [sp]
 8020c46:	f000 f9df 	bl	8021008 <__kernel_cos>
 8020c4a:	e7eb      	b.n	8020c24 <cos+0x2c>
 8020c4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c50:	ed9d 0b00 	vldr	d0, [sp]
 8020c54:	f000 fa40 	bl	80210d8 <__kernel_sin>
 8020c58:	eeb1 0b40 	vneg.f64	d0, d0
 8020c5c:	e7e2      	b.n	8020c24 <cos+0x2c>
 8020c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c62:	ed9d 0b00 	vldr	d0, [sp]
 8020c66:	f000 f9cf 	bl	8021008 <__kernel_cos>
 8020c6a:	e7f5      	b.n	8020c58 <cos+0x60>
 8020c6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c70:	ed9d 0b00 	vldr	d0, [sp]
 8020c74:	2001      	movs	r0, #1
 8020c76:	f000 fa2f 	bl	80210d8 <__kernel_sin>
 8020c7a:	e7d3      	b.n	8020c24 <cos+0x2c>
 8020c7c:	f3af 8000 	nop.w
	...
 8020c88:	3fe921fb 	.word	0x3fe921fb
 8020c8c:	7fefffff 	.word	0x7fefffff

08020c90 <fabs>:
 8020c90:	ec51 0b10 	vmov	r0, r1, d0
 8020c94:	4602      	mov	r2, r0
 8020c96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8020c9a:	ec43 2b10 	vmov	d0, r2, r3
 8020c9e:	4770      	bx	lr

08020ca0 <sin>:
 8020ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8020ca6:	ee17 3a90 	vmov	r3, s15
 8020caa:	4a21      	ldr	r2, [pc, #132]	@ (8020d30 <sin+0x90>)
 8020cac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020cb0:	4293      	cmp	r3, r2
 8020cb2:	d807      	bhi.n	8020cc4 <sin+0x24>
 8020cb4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8020d28 <sin+0x88>
 8020cb8:	2000      	movs	r0, #0
 8020cba:	b005      	add	sp, #20
 8020cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8020cc0:	f000 ba0a 	b.w	80210d8 <__kernel_sin>
 8020cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8020d34 <sin+0x94>)
 8020cc6:	4293      	cmp	r3, r2
 8020cc8:	d904      	bls.n	8020cd4 <sin+0x34>
 8020cca:	ee30 0b40 	vsub.f64	d0, d0, d0
 8020cce:	b005      	add	sp, #20
 8020cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8020cd4:	4668      	mov	r0, sp
 8020cd6:	f000 fb73 	bl	80213c0 <__ieee754_rem_pio2>
 8020cda:	f000 0003 	and.w	r0, r0, #3
 8020cde:	2801      	cmp	r0, #1
 8020ce0:	d00a      	beq.n	8020cf8 <sin+0x58>
 8020ce2:	2802      	cmp	r0, #2
 8020ce4:	d00f      	beq.n	8020d06 <sin+0x66>
 8020ce6:	b9c0      	cbnz	r0, 8020d1a <sin+0x7a>
 8020ce8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020cec:	ed9d 0b00 	vldr	d0, [sp]
 8020cf0:	2001      	movs	r0, #1
 8020cf2:	f000 f9f1 	bl	80210d8 <__kernel_sin>
 8020cf6:	e7ea      	b.n	8020cce <sin+0x2e>
 8020cf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020cfc:	ed9d 0b00 	vldr	d0, [sp]
 8020d00:	f000 f982 	bl	8021008 <__kernel_cos>
 8020d04:	e7e3      	b.n	8020cce <sin+0x2e>
 8020d06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020d0a:	ed9d 0b00 	vldr	d0, [sp]
 8020d0e:	2001      	movs	r0, #1
 8020d10:	f000 f9e2 	bl	80210d8 <__kernel_sin>
 8020d14:	eeb1 0b40 	vneg.f64	d0, d0
 8020d18:	e7d9      	b.n	8020cce <sin+0x2e>
 8020d1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020d1e:	ed9d 0b00 	vldr	d0, [sp]
 8020d22:	f000 f971 	bl	8021008 <__kernel_cos>
 8020d26:	e7f5      	b.n	8020d14 <sin+0x74>
	...
 8020d30:	3fe921fb 	.word	0x3fe921fb
 8020d34:	7fefffff 	.word	0x7fefffff

08020d38 <tan>:
 8020d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020d3a:	eeb0 7b40 	vmov.f64	d7, d0
 8020d3e:	ee17 3a90 	vmov	r3, s15
 8020d42:	4a15      	ldr	r2, [pc, #84]	@ (8020d98 <tan+0x60>)
 8020d44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020d48:	4293      	cmp	r3, r2
 8020d4a:	d807      	bhi.n	8020d5c <tan+0x24>
 8020d4c:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 8020d90 <tan+0x58>
 8020d50:	2001      	movs	r0, #1
 8020d52:	b005      	add	sp, #20
 8020d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d58:	f000 ba16 	b.w	8021188 <__kernel_tan>
 8020d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8020d9c <tan+0x64>)
 8020d5e:	4293      	cmp	r3, r2
 8020d60:	d904      	bls.n	8020d6c <tan+0x34>
 8020d62:	ee30 0b40 	vsub.f64	d0, d0, d0
 8020d66:	b005      	add	sp, #20
 8020d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8020d6c:	4668      	mov	r0, sp
 8020d6e:	f000 fb27 	bl	80213c0 <__ieee754_rem_pio2>
 8020d72:	0040      	lsls	r0, r0, #1
 8020d74:	f000 0002 	and.w	r0, r0, #2
 8020d78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020d7c:	ed9d 0b00 	vldr	d0, [sp]
 8020d80:	f1c0 0001 	rsb	r0, r0, #1
 8020d84:	f000 fa00 	bl	8021188 <__kernel_tan>
 8020d88:	e7ed      	b.n	8020d66 <tan+0x2e>
 8020d8a:	bf00      	nop
 8020d8c:	f3af 8000 	nop.w
	...
 8020d98:	3fe921fb 	.word	0x3fe921fb
 8020d9c:	7fefffff 	.word	0x7fefffff

08020da0 <atan2f>:
 8020da0:	f000 bc52 	b.w	8021648 <__ieee754_atan2f>

08020da4 <fabsf>:
 8020da4:	ee10 3a10 	vmov	r3, s0
 8020da8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020dac:	ee00 3a10 	vmov	s0, r3
 8020db0:	4770      	bx	lr
 8020db2:	0000      	movs	r0, r0
 8020db4:	0000      	movs	r0, r0
	...

08020db8 <exp>:
 8020db8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8020dba:	ee10 3a90 	vmov	r3, s1
 8020dbe:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8020dc2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8020dc6:	18a2      	adds	r2, r4, r2
 8020dc8:	2a3e      	cmp	r2, #62	@ 0x3e
 8020dca:	ee10 1a10 	vmov	r1, s0
 8020dce:	d922      	bls.n	8020e16 <exp+0x5e>
 8020dd0:	2a00      	cmp	r2, #0
 8020dd2:	da06      	bge.n	8020de2 <exp+0x2a>
 8020dd4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8020dd8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8020ddc:	b004      	add	sp, #16
 8020dde:	bcf0      	pop	{r4, r5, r6, r7}
 8020de0:	4770      	bx	lr
 8020de2:	f5b4 6f81 	cmp.w	r4, #1032	@ 0x408
 8020de6:	f04f 0000 	mov.w	r0, #0
 8020dea:	d913      	bls.n	8020e14 <exp+0x5c>
 8020dec:	f513 1f80 	cmn.w	r3, #1048576	@ 0x100000
 8020df0:	bf08      	it	eq
 8020df2:	4281      	cmpeq	r1, r0
 8020df4:	f000 80a0 	beq.w	8020f38 <exp+0x180>
 8020df8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8020dfc:	4294      	cmp	r4, r2
 8020dfe:	d0e9      	beq.n	8020dd4 <exp+0x1c>
 8020e00:	4283      	cmp	r3, r0
 8020e02:	da03      	bge.n	8020e0c <exp+0x54>
 8020e04:	b004      	add	sp, #16
 8020e06:	bcf0      	pop	{r4, r5, r6, r7}
 8020e08:	f000 b8ca 	b.w	8020fa0 <__math_uflow>
 8020e0c:	b004      	add	sp, #16
 8020e0e:	bcf0      	pop	{r4, r5, r6, r7}
 8020e10:	f000 b8ce 	b.w	8020fb0 <__math_oflow>
 8020e14:	4604      	mov	r4, r0
 8020e16:	4950      	ldr	r1, [pc, #320]	@ (8020f58 <exp+0x1a0>)
 8020e18:	ed91 6b02 	vldr	d6, [r1, #8]
 8020e1c:	ed91 5b00 	vldr	d5, [r1]
 8020e20:	eeb0 7b46 	vmov.f64	d7, d6
 8020e24:	eea5 7b00 	vfma.f64	d7, d5, d0
 8020e28:	ee17 5a10 	vmov	r5, s14
 8020e2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8020e30:	ed91 6b04 	vldr	d6, [r1, #16]
 8020e34:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8020e38:	eea6 0b07 	vfma.f64	d0, d6, d7
 8020e3c:	ed91 6b06 	vldr	d6, [r1, #24]
 8020e40:	18d8      	adds	r0, r3, r3
 8020e42:	f100 030f 	add.w	r3, r0, #15
 8020e46:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8020e4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8020e4e:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8020e52:	ee20 7b00 	vmul.f64	d7, d0, d0
 8020e56:	ed90 6b1c 	vldr	d6, [r0, #112]	@ 0x70
 8020e5a:	ed91 4b08 	vldr	d4, [r1, #32]
 8020e5e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8020e62:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8020e66:	eea3 4b00 	vfma.f64	d4, d3, d0
 8020e6a:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8020e6e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8020e72:	ee27 7b07 	vmul.f64	d7, d7, d7
 8020e76:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8020e7a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8020e7e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8020e82:	eea3 4b00 	vfma.f64	d4, d3, d0
 8020e86:	2600      	movs	r6, #0
 8020e88:	19f2      	adds	r2, r6, r7
 8020e8a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8020e8e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8020e92:	2c00      	cmp	r4, #0
 8020e94:	d14b      	bne.n	8020f2e <exp+0x176>
 8020e96:	42b5      	cmp	r5, r6
 8020e98:	db10      	blt.n	8020ebc <exp+0x104>
 8020e9a:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8020e9e:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8020f40 <exp+0x188>
 8020ea2:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8020ea6:	4610      	mov	r0, r2
 8020ea8:	ec41 0b10 	vmov	d0, r0, r1
 8020eac:	eea6 0b00 	vfma.f64	d0, d6, d0
 8020eb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8020eb4:	b004      	add	sp, #16
 8020eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8020eb8:	f000 b88e 	b.w	8020fd8 <__math_check_oflow>
 8020ebc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8020ec0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8020ec4:	4610      	mov	r0, r2
 8020ec6:	ec41 0b17 	vmov	d7, r0, r1
 8020eca:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 8020ece:	ee26 6b07 	vmul.f64	d6, d6, d7
 8020ed2:	ee37 5b06 	vadd.f64	d5, d7, d6
 8020ed6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8020eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ede:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8020f48 <exp+0x190>
 8020ee2:	d51e      	bpl.n	8020f22 <exp+0x16a>
 8020ee4:	ee35 3b04 	vadd.f64	d3, d5, d4
 8020ee8:	ee37 7b45 	vsub.f64	d7, d7, d5
 8020eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8020ef0:	ee34 6b43 	vsub.f64	d6, d4, d3
 8020ef4:	ee36 6b05 	vadd.f64	d6, d6, d5
 8020ef8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8020efc:	ee36 6b03 	vadd.f64	d6, d6, d3
 8020f00:	ee36 5b44 	vsub.f64	d5, d6, d4
 8020f04:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8020f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f0c:	d101      	bne.n	8020f12 <exp+0x15a>
 8020f0e:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8020f50 <exp+0x198>
 8020f12:	ed8d 0b00 	vstr	d0, [sp]
 8020f16:	ed9d 7b00 	vldr	d7, [sp]
 8020f1a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8020f1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020f22:	ee25 0b00 	vmul.f64	d0, d5, d0
 8020f26:	b004      	add	sp, #16
 8020f28:	bcf0      	pop	{r4, r5, r6, r7}
 8020f2a:	f000 b849 	b.w	8020fc0 <__math_check_uflow>
 8020f2e:	ec43 2b10 	vmov	d0, r2, r3
 8020f32:	eea6 0b00 	vfma.f64	d0, d6, d0
 8020f36:	e751      	b.n	8020ddc <exp+0x24>
 8020f38:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8020f50 <exp+0x198>
 8020f3c:	e74e      	b.n	8020ddc <exp+0x24>
 8020f3e:	bf00      	nop
 8020f40:	00000000 	.word	0x00000000
 8020f44:	7f000000 	.word	0x7f000000
 8020f48:	00000000 	.word	0x00000000
 8020f4c:	00100000 	.word	0x00100000
	...
 8020f58:	08025208 	.word	0x08025208

08020f5c <with_errno>:
 8020f5c:	b510      	push	{r4, lr}
 8020f5e:	ed2d 8b02 	vpush	{d8}
 8020f62:	eeb0 8b40 	vmov.f64	d8, d0
 8020f66:	4604      	mov	r4, r0
 8020f68:	f001 fe96 	bl	8022c98 <__errno>
 8020f6c:	eeb0 0b48 	vmov.f64	d0, d8
 8020f70:	ecbd 8b02 	vpop	{d8}
 8020f74:	6004      	str	r4, [r0, #0]
 8020f76:	bd10      	pop	{r4, pc}

08020f78 <xflow>:
 8020f78:	b082      	sub	sp, #8
 8020f7a:	b158      	cbz	r0, 8020f94 <xflow+0x1c>
 8020f7c:	eeb1 7b40 	vneg.f64	d7, d0
 8020f80:	ed8d 7b00 	vstr	d7, [sp]
 8020f84:	ed9d 7b00 	vldr	d7, [sp]
 8020f88:	2022      	movs	r0, #34	@ 0x22
 8020f8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8020f8e:	b002      	add	sp, #8
 8020f90:	f7ff bfe4 	b.w	8020f5c <with_errno>
 8020f94:	eeb0 7b40 	vmov.f64	d7, d0
 8020f98:	e7f2      	b.n	8020f80 <xflow+0x8>
 8020f9a:	0000      	movs	r0, r0
 8020f9c:	0000      	movs	r0, r0
	...

08020fa0 <__math_uflow>:
 8020fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020fa8 <__math_uflow+0x8>
 8020fa4:	f7ff bfe8 	b.w	8020f78 <xflow>
 8020fa8:	00000000 	.word	0x00000000
 8020fac:	10000000 	.word	0x10000000

08020fb0 <__math_oflow>:
 8020fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020fb8 <__math_oflow+0x8>
 8020fb4:	f7ff bfe0 	b.w	8020f78 <xflow>
 8020fb8:	00000000 	.word	0x00000000
 8020fbc:	70000000 	.word	0x70000000

08020fc0 <__math_check_uflow>:
 8020fc0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8020fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fc8:	d102      	bne.n	8020fd0 <__math_check_uflow+0x10>
 8020fca:	2022      	movs	r0, #34	@ 0x22
 8020fcc:	f7ff bfc6 	b.w	8020f5c <with_errno>
 8020fd0:	4770      	bx	lr
 8020fd2:	0000      	movs	r0, r0
 8020fd4:	0000      	movs	r0, r0
	...

08020fd8 <__math_check_oflow>:
 8020fd8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8020ff8 <__math_check_oflow+0x20>
 8020fdc:	eeb0 7bc0 	vabs.f64	d7, d0
 8020fe0:	eeb4 7b46 	vcmp.f64	d7, d6
 8020fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fe8:	dd02      	ble.n	8020ff0 <__math_check_oflow+0x18>
 8020fea:	2022      	movs	r0, #34	@ 0x22
 8020fec:	f7ff bfb6 	b.w	8020f5c <with_errno>
 8020ff0:	4770      	bx	lr
 8020ff2:	bf00      	nop
 8020ff4:	f3af 8000 	nop.w
 8020ff8:	ffffffff 	.word	0xffffffff
 8020ffc:	7fefffff 	.word	0x7fefffff

08021000 <__ieee754_sqrt>:
 8021000:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8021004:	4770      	bx	lr
	...

08021008 <__kernel_cos>:
 8021008:	eeb0 5b40 	vmov.f64	d5, d0
 802100c:	ee15 1a90 	vmov	r1, s11
 8021010:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8021014:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8021018:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 802101c:	d204      	bcs.n	8021028 <__kernel_cos+0x20>
 802101e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8021022:	ee17 3a90 	vmov	r3, s15
 8021026:	b343      	cbz	r3, 802107a <__kernel_cos+0x72>
 8021028:	ee25 6b05 	vmul.f64	d6, d5, d5
 802102c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8021030:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80210a0 <__kernel_cos+0x98>
 8021034:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80210a8 <__kernel_cos+0xa0>
 8021038:	eea6 4b07 	vfma.f64	d4, d6, d7
 802103c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80210b0 <__kernel_cos+0xa8>
 8021040:	eea4 7b06 	vfma.f64	d7, d4, d6
 8021044:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80210b8 <__kernel_cos+0xb0>
 8021048:	eea7 4b06 	vfma.f64	d4, d7, d6
 802104c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80210c0 <__kernel_cos+0xb8>
 8021050:	4b1f      	ldr	r3, [pc, #124]	@ (80210d0 <__kernel_cos+0xc8>)
 8021052:	eea4 7b06 	vfma.f64	d7, d4, d6
 8021056:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80210c8 <__kernel_cos+0xc0>
 802105a:	4299      	cmp	r1, r3
 802105c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8021060:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8021064:	ee24 4b06 	vmul.f64	d4, d4, d6
 8021068:	ee26 7b07 	vmul.f64	d7, d6, d7
 802106c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8021070:	d804      	bhi.n	802107c <__kernel_cos+0x74>
 8021072:	ee37 7b41 	vsub.f64	d7, d7, d1
 8021076:	ee30 0b47 	vsub.f64	d0, d0, d7
 802107a:	4770      	bx	lr
 802107c:	4b15      	ldr	r3, [pc, #84]	@ (80210d4 <__kernel_cos+0xcc>)
 802107e:	4299      	cmp	r1, r3
 8021080:	d809      	bhi.n	8021096 <__kernel_cos+0x8e>
 8021082:	2200      	movs	r2, #0
 8021084:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8021088:	ec43 2b16 	vmov	d6, r2, r3
 802108c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8021090:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021094:	e7ed      	b.n	8021072 <__kernel_cos+0x6a>
 8021096:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 802109a:	e7f7      	b.n	802108c <__kernel_cos+0x84>
 802109c:	f3af 8000 	nop.w
 80210a0:	be8838d4 	.word	0xbe8838d4
 80210a4:	bda8fae9 	.word	0xbda8fae9
 80210a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80210ac:	3e21ee9e 	.word	0x3e21ee9e
 80210b0:	809c52ad 	.word	0x809c52ad
 80210b4:	be927e4f 	.word	0xbe927e4f
 80210b8:	19cb1590 	.word	0x19cb1590
 80210bc:	3efa01a0 	.word	0x3efa01a0
 80210c0:	16c15177 	.word	0x16c15177
 80210c4:	bf56c16c 	.word	0xbf56c16c
 80210c8:	5555554c 	.word	0x5555554c
 80210cc:	3fa55555 	.word	0x3fa55555
 80210d0:	3fd33332 	.word	0x3fd33332
 80210d4:	3fe90000 	.word	0x3fe90000

080210d8 <__kernel_sin>:
 80210d8:	ee10 3a90 	vmov	r3, s1
 80210dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80210e0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80210e4:	d204      	bcs.n	80210f0 <__kernel_sin+0x18>
 80210e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80210ea:	ee17 3a90 	vmov	r3, s15
 80210ee:	b35b      	cbz	r3, 8021148 <__kernel_sin+0x70>
 80210f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80210f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80210f8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8021150 <__kernel_sin+0x78>
 80210fc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8021158 <__kernel_sin+0x80>
 8021100:	eea6 4b07 	vfma.f64	d4, d6, d7
 8021104:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8021160 <__kernel_sin+0x88>
 8021108:	eea4 7b06 	vfma.f64	d7, d4, d6
 802110c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8021168 <__kernel_sin+0x90>
 8021110:	eea7 4b06 	vfma.f64	d4, d7, d6
 8021114:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8021170 <__kernel_sin+0x98>
 8021118:	eea4 7b06 	vfma.f64	d7, d4, d6
 802111c:	b930      	cbnz	r0, 802112c <__kernel_sin+0x54>
 802111e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8021178 <__kernel_sin+0xa0>
 8021122:	eea6 4b07 	vfma.f64	d4, d6, d7
 8021126:	eea4 0b05 	vfma.f64	d0, d4, d5
 802112a:	4770      	bx	lr
 802112c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8021130:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8021134:	eea1 7b04 	vfma.f64	d7, d1, d4
 8021138:	ee97 1b06 	vfnms.f64	d1, d7, d6
 802113c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8021180 <__kernel_sin+0xa8>
 8021140:	eea5 1b07 	vfma.f64	d1, d5, d7
 8021144:	ee30 0b41 	vsub.f64	d0, d0, d1
 8021148:	4770      	bx	lr
 802114a:	bf00      	nop
 802114c:	f3af 8000 	nop.w
 8021150:	5acfd57c 	.word	0x5acfd57c
 8021154:	3de5d93a 	.word	0x3de5d93a
 8021158:	8a2b9ceb 	.word	0x8a2b9ceb
 802115c:	be5ae5e6 	.word	0xbe5ae5e6
 8021160:	57b1fe7d 	.word	0x57b1fe7d
 8021164:	3ec71de3 	.word	0x3ec71de3
 8021168:	19c161d5 	.word	0x19c161d5
 802116c:	bf2a01a0 	.word	0xbf2a01a0
 8021170:	1110f8a6 	.word	0x1110f8a6
 8021174:	3f811111 	.word	0x3f811111
 8021178:	55555549 	.word	0x55555549
 802117c:	bfc55555 	.word	0xbfc55555
 8021180:	55555549 	.word	0x55555549
 8021184:	3fc55555 	.word	0x3fc55555

08021188 <__kernel_tan>:
 8021188:	eeb0 7b40 	vmov.f64	d7, d0
 802118c:	ee17 3a90 	vmov	r3, s15
 8021190:	4989      	ldr	r1, [pc, #548]	@ (80213b8 <__kernel_tan+0x230>)
 8021192:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8021196:	428a      	cmp	r2, r1
 8021198:	b510      	push	{r4, lr}
 802119a:	d833      	bhi.n	8021204 <__kernel_tan+0x7c>
 802119c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80211a0:	ee16 1a90 	vmov	r1, s13
 80211a4:	2900      	cmp	r1, #0
 80211a6:	d143      	bne.n	8021230 <__kernel_tan+0xa8>
 80211a8:	ee10 4a10 	vmov	r4, s0
 80211ac:	1c43      	adds	r3, r0, #1
 80211ae:	4323      	orrs	r3, r4
 80211b0:	4313      	orrs	r3, r2
 80211b2:	d108      	bne.n	80211c6 <__kernel_tan+0x3e>
 80211b4:	f7ff fd6c 	bl	8020c90 <fabs>
 80211b8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80211bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80211c0:	eeb0 0b47 	vmov.f64	d0, d7
 80211c4:	bd10      	pop	{r4, pc}
 80211c6:	2801      	cmp	r0, #1
 80211c8:	d0fa      	beq.n	80211c0 <__kernel_tan+0x38>
 80211ca:	ee30 6b01 	vadd.f64	d6, d0, d1
 80211ce:	eebf 7b00 	vmov.f64	d7, #240	@ 0xbf800000 -1.0
 80211d2:	ec53 2b16 	vmov	r2, r3, d6
 80211d6:	ee87 3b06 	vdiv.f64	d3, d7, d6
 80211da:	460a      	mov	r2, r1
 80211dc:	ec43 2b15 	vmov	d5, r2, r3
 80211e0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80211e4:	ec53 2b13 	vmov	r2, r3, d3
 80211e8:	ee35 4b40 	vsub.f64	d4, d5, d0
 80211ec:	460a      	mov	r2, r1
 80211ee:	ec43 2b17 	vmov	d7, r2, r3
 80211f2:	ee31 4b44 	vsub.f64	d4, d1, d4
 80211f6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80211fa:	eea4 6b07 	vfma.f64	d6, d4, d7
 80211fe:	eea6 7b03 	vfma.f64	d7, d6, d3
 8021202:	e7dd      	b.n	80211c0 <__kernel_tan+0x38>
 8021204:	496d      	ldr	r1, [pc, #436]	@ (80213bc <__kernel_tan+0x234>)
 8021206:	428a      	cmp	r2, r1
 8021208:	d912      	bls.n	8021230 <__kernel_tan+0xa8>
 802120a:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8021338 <__kernel_tan+0x1b0>
 802120e:	2b00      	cmp	r3, #0
 8021210:	bfb8      	it	lt
 8021212:	eeb1 7b40 	vneglt.f64	d7, d0
 8021216:	ee36 6b47 	vsub.f64	d6, d6, d7
 802121a:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8021340 <__kernel_tan+0x1b8>
 802121e:	bfb8      	it	lt
 8021220:	eeb1 1b41 	vneglt.f64	d1, d1
 8021224:	ee37 7b41 	vsub.f64	d7, d7, d1
 8021228:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 8021348 <__kernel_tan+0x1c0>
 802122c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021230:	ee27 5b07 	vmul.f64	d5, d7, d7
 8021234:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 8021350 <__kernel_tan+0x1c8>
 8021238:	ee25 6b05 	vmul.f64	d6, d5, d5
 802123c:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8021358 <__kernel_tan+0x1d0>
 8021240:	eea6 4b03 	vfma.f64	d4, d6, d3
 8021244:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 8021360 <__kernel_tan+0x1d8>
 8021248:	eea4 3b06 	vfma.f64	d3, d4, d6
 802124c:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8021368 <__kernel_tan+0x1e0>
 8021250:	eea3 4b06 	vfma.f64	d4, d3, d6
 8021254:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 8021370 <__kernel_tan+0x1e8>
 8021258:	eea4 3b06 	vfma.f64	d3, d4, d6
 802125c:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8021378 <__kernel_tan+0x1f0>
 8021260:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 8021380 <__kernel_tan+0x1f8>
 8021264:	eea3 4b06 	vfma.f64	d4, d3, d6
 8021268:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 8021388 <__kernel_tan+0x200>
 802126c:	eea6 3b02 	vfma.f64	d3, d6, d2
 8021270:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 8021390 <__kernel_tan+0x208>
 8021274:	eea3 2b06 	vfma.f64	d2, d3, d6
 8021278:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 8021398 <__kernel_tan+0x210>
 802127c:	eea2 3b06 	vfma.f64	d3, d2, d6
 8021280:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 80213a0 <__kernel_tan+0x218>
 8021284:	eea3 2b06 	vfma.f64	d2, d3, d6
 8021288:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 80213a8 <__kernel_tan+0x220>
 802128c:	494b      	ldr	r1, [pc, #300]	@ (80213bc <__kernel_tan+0x234>)
 802128e:	eea2 3b06 	vfma.f64	d3, d2, d6
 8021292:	ee27 2b05 	vmul.f64	d2, d7, d5
 8021296:	eeb0 6b44 	vmov.f64	d6, d4
 802129a:	eeb0 4b41 	vmov.f64	d4, d1
 802129e:	eea3 6b05 	vfma.f64	d6, d3, d5
 80212a2:	eea6 4b02 	vfma.f64	d4, d6, d2
 80212a6:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 80213b0 <__kernel_tan+0x228>
 80212aa:	eea4 1b05 	vfma.f64	d1, d4, d5
 80212ae:	428a      	cmp	r2, r1
 80212b0:	eea2 1b06 	vfma.f64	d1, d2, d6
 80212b4:	ee37 3b01 	vadd.f64	d3, d7, d1
 80212b8:	d91d      	bls.n	80212f6 <__kernel_tan+0x16e>
 80212ba:	ee23 2b03 	vmul.f64	d2, d3, d3
 80212be:	179b      	asrs	r3, r3, #30
 80212c0:	ee06 0a90 	vmov	s13, r0
 80212c4:	f003 0302 	and.w	r3, r3, #2
 80212c8:	f1c3 0301 	rsb	r3, r3, #1
 80212cc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80212d0:	ee06 3a90 	vmov	s13, r3
 80212d4:	ee33 3b05 	vadd.f64	d3, d3, d5
 80212d8:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 80212dc:	ee82 6b03 	vdiv.f64	d6, d2, d3
 80212e0:	eeb0 3b00 	vmov.f64	d3, #0	@ 0x40000000  2.0
 80212e4:	ee36 6b41 	vsub.f64	d6, d6, d1
 80212e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80212ec:	eea6 5b43 	vfms.f64	d5, d6, d3
 80212f0:	ee24 7b05 	vmul.f64	d7, d4, d5
 80212f4:	e764      	b.n	80211c0 <__kernel_tan+0x38>
 80212f6:	2801      	cmp	r0, #1
 80212f8:	d01a      	beq.n	8021330 <__kernel_tan+0x1a8>
 80212fa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80212fe:	ec51 0b13 	vmov	r0, r1, d3
 8021302:	2000      	movs	r0, #0
 8021304:	ec41 0b14 	vmov	d4, r0, r1
 8021308:	ee34 7b47 	vsub.f64	d7, d4, d7
 802130c:	ee31 1b47 	vsub.f64	d1, d1, d7
 8021310:	eebf 7b00 	vmov.f64	d7, #240	@ 0xbf800000 -1.0
 8021314:	ee87 5b03 	vdiv.f64	d5, d7, d3
 8021318:	ec53 2b15 	vmov	r2, r3, d5
 802131c:	4602      	mov	r2, r0
 802131e:	ec43 2b17 	vmov	d7, r2, r3
 8021322:	eea4 6b07 	vfma.f64	d6, d4, d7
 8021326:	eea1 6b07 	vfma.f64	d6, d1, d7
 802132a:	eea6 7b05 	vfma.f64	d7, d6, d5
 802132e:	e747      	b.n	80211c0 <__kernel_tan+0x38>
 8021330:	eeb0 7b43 	vmov.f64	d7, d3
 8021334:	e744      	b.n	80211c0 <__kernel_tan+0x38>
 8021336:	bf00      	nop
 8021338:	54442d18 	.word	0x54442d18
 802133c:	3fe921fb 	.word	0x3fe921fb
 8021340:	33145c07 	.word	0x33145c07
 8021344:	3c81a626 	.word	0x3c81a626
	...
 8021350:	db605373 	.word	0xdb605373
 8021354:	bef375cb 	.word	0xbef375cb
 8021358:	a03792a6 	.word	0xa03792a6
 802135c:	3f147e88 	.word	0x3f147e88
 8021360:	f2f26501 	.word	0xf2f26501
 8021364:	3f4344d8 	.word	0x3f4344d8
 8021368:	c9560328 	.word	0xc9560328
 802136c:	3f6d6d22 	.word	0x3f6d6d22
 8021370:	8406d637 	.word	0x8406d637
 8021374:	3f9664f4 	.word	0x3f9664f4
 8021378:	1110fe7a 	.word	0x1110fe7a
 802137c:	3fc11111 	.word	0x3fc11111
 8021380:	74bf7ad4 	.word	0x74bf7ad4
 8021384:	3efb2a70 	.word	0x3efb2a70
 8021388:	32f0a7e9 	.word	0x32f0a7e9
 802138c:	3f12b80f 	.word	0x3f12b80f
 8021390:	1a8d1068 	.word	0x1a8d1068
 8021394:	3f3026f7 	.word	0x3f3026f7
 8021398:	fee08315 	.word	0xfee08315
 802139c:	3f57dbc8 	.word	0x3f57dbc8
 80213a0:	e96e8493 	.word	0xe96e8493
 80213a4:	3f8226e3 	.word	0x3f8226e3
 80213a8:	1bb341fe 	.word	0x1bb341fe
 80213ac:	3faba1ba 	.word	0x3faba1ba
 80213b0:	55555563 	.word	0x55555563
 80213b4:	3fd55555 	.word	0x3fd55555
 80213b8:	3e2fffff 	.word	0x3e2fffff
 80213bc:	3fe59427 	.word	0x3fe59427

080213c0 <__ieee754_rem_pio2>:
 80213c0:	b570      	push	{r4, r5, r6, lr}
 80213c2:	eeb0 7b40 	vmov.f64	d7, d0
 80213c6:	ee17 5a90 	vmov	r5, s15
 80213ca:	4b99      	ldr	r3, [pc, #612]	@ (8021630 <__ieee754_rem_pio2+0x270>)
 80213cc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80213d0:	429e      	cmp	r6, r3
 80213d2:	b088      	sub	sp, #32
 80213d4:	4604      	mov	r4, r0
 80213d6:	d807      	bhi.n	80213e8 <__ieee754_rem_pio2+0x28>
 80213d8:	2200      	movs	r2, #0
 80213da:	2300      	movs	r3, #0
 80213dc:	ed84 0b00 	vstr	d0, [r4]
 80213e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80213e4:	2000      	movs	r0, #0
 80213e6:	e01b      	b.n	8021420 <__ieee754_rem_pio2+0x60>
 80213e8:	4b92      	ldr	r3, [pc, #584]	@ (8021634 <__ieee754_rem_pio2+0x274>)
 80213ea:	429e      	cmp	r6, r3
 80213ec:	d83b      	bhi.n	8021466 <__ieee754_rem_pio2+0xa6>
 80213ee:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 80213f2:	2d00      	cmp	r5, #0
 80213f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80215f0 <__ieee754_rem_pio2+0x230>
 80213f8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 80213fc:	dd19      	ble.n	8021432 <__ieee754_rem_pio2+0x72>
 80213fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8021402:	429e      	cmp	r6, r3
 8021404:	d00e      	beq.n	8021424 <__ieee754_rem_pio2+0x64>
 8021406:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80215f8 <__ieee754_rem_pio2+0x238>
 802140a:	ee37 6b45 	vsub.f64	d6, d7, d5
 802140e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021412:	ed84 6b00 	vstr	d6, [r4]
 8021416:	ee37 7b45 	vsub.f64	d7, d7, d5
 802141a:	ed84 7b02 	vstr	d7, [r4, #8]
 802141e:	2001      	movs	r0, #1
 8021420:	b008      	add	sp, #32
 8021422:	bd70      	pop	{r4, r5, r6, pc}
 8021424:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8021600 <__ieee754_rem_pio2+0x240>
 8021428:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8021608 <__ieee754_rem_pio2+0x248>
 802142c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021430:	e7eb      	b.n	802140a <__ieee754_rem_pio2+0x4a>
 8021432:	429e      	cmp	r6, r3
 8021434:	ee30 7b06 	vadd.f64	d7, d0, d6
 8021438:	d00e      	beq.n	8021458 <__ieee754_rem_pio2+0x98>
 802143a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80215f8 <__ieee754_rem_pio2+0x238>
 802143e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8021442:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021446:	ed84 6b00 	vstr	d6, [r4]
 802144a:	ee37 7b05 	vadd.f64	d7, d7, d5
 802144e:	f04f 30ff 	mov.w	r0, #4294967295
 8021452:	ed84 7b02 	vstr	d7, [r4, #8]
 8021456:	e7e3      	b.n	8021420 <__ieee754_rem_pio2+0x60>
 8021458:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8021600 <__ieee754_rem_pio2+0x240>
 802145c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8021608 <__ieee754_rem_pio2+0x248>
 8021460:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021464:	e7eb      	b.n	802143e <__ieee754_rem_pio2+0x7e>
 8021466:	4b74      	ldr	r3, [pc, #464]	@ (8021638 <__ieee754_rem_pio2+0x278>)
 8021468:	429e      	cmp	r6, r3
 802146a:	d870      	bhi.n	802154e <__ieee754_rem_pio2+0x18e>
 802146c:	f7ff fc10 	bl	8020c90 <fabs>
 8021470:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8021474:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8021610 <__ieee754_rem_pio2+0x250>
 8021478:	eea0 7b06 	vfma.f64	d7, d0, d6
 802147c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021480:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021484:	ee17 0a90 	vmov	r0, s15
 8021488:	eeb1 4b45 	vneg.f64	d4, d5
 802148c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80215f0 <__ieee754_rem_pio2+0x230>
 8021490:	eea5 0b47 	vfms.f64	d0, d5, d7
 8021494:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80215f8 <__ieee754_rem_pio2+0x238>
 8021498:	281f      	cmp	r0, #31
 802149a:	ee25 7b07 	vmul.f64	d7, d5, d7
 802149e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80214a2:	dc05      	bgt.n	80214b0 <__ieee754_rem_pio2+0xf0>
 80214a4:	4b65      	ldr	r3, [pc, #404]	@ (802163c <__ieee754_rem_pio2+0x27c>)
 80214a6:	1e42      	subs	r2, r0, #1
 80214a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80214ac:	42b3      	cmp	r3, r6
 80214ae:	d109      	bne.n	80214c4 <__ieee754_rem_pio2+0x104>
 80214b0:	ee16 3a90 	vmov	r3, s13
 80214b4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80214b8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80214bc:	2b10      	cmp	r3, #16
 80214be:	ea4f 5226 	mov.w	r2, r6, asr #20
 80214c2:	dc02      	bgt.n	80214ca <__ieee754_rem_pio2+0x10a>
 80214c4:	ed84 6b00 	vstr	d6, [r4]
 80214c8:	e01a      	b.n	8021500 <__ieee754_rem_pio2+0x140>
 80214ca:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8021600 <__ieee754_rem_pio2+0x240>
 80214ce:	eeb0 6b40 	vmov.f64	d6, d0
 80214d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80214d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80214da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80214de:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8021608 <__ieee754_rem_pio2+0x248>
 80214e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80214e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80214ea:	ee13 3a90 	vmov	r3, s7
 80214ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80214f2:	1ad3      	subs	r3, r2, r3
 80214f4:	2b31      	cmp	r3, #49	@ 0x31
 80214f6:	dc17      	bgt.n	8021528 <__ieee754_rem_pio2+0x168>
 80214f8:	eeb0 0b46 	vmov.f64	d0, d6
 80214fc:	ed84 3b00 	vstr	d3, [r4]
 8021500:	ed94 6b00 	vldr	d6, [r4]
 8021504:	2d00      	cmp	r5, #0
 8021506:	ee30 0b46 	vsub.f64	d0, d0, d6
 802150a:	ee30 0b47 	vsub.f64	d0, d0, d7
 802150e:	ed84 0b02 	vstr	d0, [r4, #8]
 8021512:	da85      	bge.n	8021420 <__ieee754_rem_pio2+0x60>
 8021514:	eeb1 6b46 	vneg.f64	d6, d6
 8021518:	eeb1 0b40 	vneg.f64	d0, d0
 802151c:	ed84 6b00 	vstr	d6, [r4]
 8021520:	ed84 0b02 	vstr	d0, [r4, #8]
 8021524:	4240      	negs	r0, r0
 8021526:	e77b      	b.n	8021420 <__ieee754_rem_pio2+0x60>
 8021528:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8021618 <__ieee754_rem_pio2+0x258>
 802152c:	eeb0 0b46 	vmov.f64	d0, d6
 8021530:	eea4 0b07 	vfma.f64	d0, d4, d7
 8021534:	ee36 6b40 	vsub.f64	d6, d6, d0
 8021538:	eea4 6b07 	vfma.f64	d6, d4, d7
 802153c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8021620 <__ieee754_rem_pio2+0x260>
 8021540:	eeb0 7b46 	vmov.f64	d7, d6
 8021544:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8021548:	ee30 6b47 	vsub.f64	d6, d0, d7
 802154c:	e7ba      	b.n	80214c4 <__ieee754_rem_pio2+0x104>
 802154e:	4b3c      	ldr	r3, [pc, #240]	@ (8021640 <__ieee754_rem_pio2+0x280>)
 8021550:	429e      	cmp	r6, r3
 8021552:	d906      	bls.n	8021562 <__ieee754_rem_pio2+0x1a2>
 8021554:	ee30 7b40 	vsub.f64	d7, d0, d0
 8021558:	ed80 7b02 	vstr	d7, [r0, #8]
 802155c:	ed80 7b00 	vstr	d7, [r0]
 8021560:	e740      	b.n	80213e4 <__ieee754_rem_pio2+0x24>
 8021562:	ee10 3a10 	vmov	r3, s0
 8021566:	1532      	asrs	r2, r6, #20
 8021568:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 802156c:	4618      	mov	r0, r3
 802156e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8021572:	ec41 0b17 	vmov	d7, r0, r1
 8021576:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802157a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8021628 <__ieee754_rem_pio2+0x268>
 802157e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8021582:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021586:	ed8d 6b02 	vstr	d6, [sp, #8]
 802158a:	ee27 7b05 	vmul.f64	d7, d7, d5
 802158e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8021592:	a808      	add	r0, sp, #32
 8021594:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8021598:	ee37 7b46 	vsub.f64	d7, d7, d6
 802159c:	ed8d 6b04 	vstr	d6, [sp, #16]
 80215a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80215a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80215a8:	2103      	movs	r1, #3
 80215aa:	ed30 7b02 	vldmdb	r0!, {d7}
 80215ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80215b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215b6:	460b      	mov	r3, r1
 80215b8:	f101 31ff 	add.w	r1, r1, #4294967295
 80215bc:	d0f5      	beq.n	80215aa <__ieee754_rem_pio2+0x1ea>
 80215be:	4921      	ldr	r1, [pc, #132]	@ (8021644 <__ieee754_rem_pio2+0x284>)
 80215c0:	9101      	str	r1, [sp, #4]
 80215c2:	2102      	movs	r1, #2
 80215c4:	9100      	str	r1, [sp, #0]
 80215c6:	a802      	add	r0, sp, #8
 80215c8:	4621      	mov	r1, r4
 80215ca:	f000 f9b1 	bl	8021930 <__kernel_rem_pio2>
 80215ce:	2d00      	cmp	r5, #0
 80215d0:	f6bf af26 	bge.w	8021420 <__ieee754_rem_pio2+0x60>
 80215d4:	ed94 7b00 	vldr	d7, [r4]
 80215d8:	eeb1 7b47 	vneg.f64	d7, d7
 80215dc:	ed84 7b00 	vstr	d7, [r4]
 80215e0:	ed94 7b02 	vldr	d7, [r4, #8]
 80215e4:	eeb1 7b47 	vneg.f64	d7, d7
 80215e8:	ed84 7b02 	vstr	d7, [r4, #8]
 80215ec:	e79a      	b.n	8021524 <__ieee754_rem_pio2+0x164>
 80215ee:	bf00      	nop
 80215f0:	54400000 	.word	0x54400000
 80215f4:	3ff921fb 	.word	0x3ff921fb
 80215f8:	1a626331 	.word	0x1a626331
 80215fc:	3dd0b461 	.word	0x3dd0b461
 8021600:	1a600000 	.word	0x1a600000
 8021604:	3dd0b461 	.word	0x3dd0b461
 8021608:	2e037073 	.word	0x2e037073
 802160c:	3ba3198a 	.word	0x3ba3198a
 8021610:	6dc9c883 	.word	0x6dc9c883
 8021614:	3fe45f30 	.word	0x3fe45f30
 8021618:	2e000000 	.word	0x2e000000
 802161c:	3ba3198a 	.word	0x3ba3198a
 8021620:	252049c1 	.word	0x252049c1
 8021624:	397b839a 	.word	0x397b839a
 8021628:	00000000 	.word	0x00000000
 802162c:	41700000 	.word	0x41700000
 8021630:	3fe921fb 	.word	0x3fe921fb
 8021634:	4002d97b 	.word	0x4002d97b
 8021638:	413921fb 	.word	0x413921fb
 802163c:	08025a78 	.word	0x08025a78
 8021640:	7fefffff 	.word	0x7fefffff
 8021644:	08025af8 	.word	0x08025af8

08021648 <__ieee754_atan2f>:
 8021648:	ee10 2a90 	vmov	r2, s1
 802164c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8021650:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8021654:	b510      	push	{r4, lr}
 8021656:	eef0 7a40 	vmov.f32	s15, s0
 802165a:	d806      	bhi.n	802166a <__ieee754_atan2f+0x22>
 802165c:	ee10 0a10 	vmov	r0, s0
 8021660:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8021664:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021668:	d904      	bls.n	8021674 <__ieee754_atan2f+0x2c>
 802166a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802166e:	eeb0 0a67 	vmov.f32	s0, s15
 8021672:	bd10      	pop	{r4, pc}
 8021674:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8021678:	d103      	bne.n	8021682 <__ieee754_atan2f+0x3a>
 802167a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802167e:	f000 b881 	b.w	8021784 <atanf>
 8021682:	1794      	asrs	r4, r2, #30
 8021684:	f004 0402 	and.w	r4, r4, #2
 8021688:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802168c:	b93b      	cbnz	r3, 802169e <__ieee754_atan2f+0x56>
 802168e:	2c02      	cmp	r4, #2
 8021690:	d05c      	beq.n	802174c <__ieee754_atan2f+0x104>
 8021692:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8021760 <__ieee754_atan2f+0x118>
 8021696:	2c03      	cmp	r4, #3
 8021698:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802169c:	e7e7      	b.n	802166e <__ieee754_atan2f+0x26>
 802169e:	b939      	cbnz	r1, 80216b0 <__ieee754_atan2f+0x68>
 80216a0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8021764 <__ieee754_atan2f+0x11c>
 80216a4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8021768 <__ieee754_atan2f+0x120>
 80216a8:	2800      	cmp	r0, #0
 80216aa:	fe67 7a87 	vselge.f32	s15, s15, s14
 80216ae:	e7de      	b.n	802166e <__ieee754_atan2f+0x26>
 80216b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80216b4:	d110      	bne.n	80216d8 <__ieee754_atan2f+0x90>
 80216b6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80216ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80216be:	d107      	bne.n	80216d0 <__ieee754_atan2f+0x88>
 80216c0:	2c02      	cmp	r4, #2
 80216c2:	d846      	bhi.n	8021752 <__ieee754_atan2f+0x10a>
 80216c4:	4b29      	ldr	r3, [pc, #164]	@ (802176c <__ieee754_atan2f+0x124>)
 80216c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80216ca:	edd3 7a00 	vldr	s15, [r3]
 80216ce:	e7ce      	b.n	802166e <__ieee754_atan2f+0x26>
 80216d0:	2c02      	cmp	r4, #2
 80216d2:	d841      	bhi.n	8021758 <__ieee754_atan2f+0x110>
 80216d4:	4b26      	ldr	r3, [pc, #152]	@ (8021770 <__ieee754_atan2f+0x128>)
 80216d6:	e7f6      	b.n	80216c6 <__ieee754_atan2f+0x7e>
 80216d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80216dc:	d0e0      	beq.n	80216a0 <__ieee754_atan2f+0x58>
 80216de:	1a5b      	subs	r3, r3, r1
 80216e0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80216e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80216e8:	da1a      	bge.n	8021720 <__ieee754_atan2f+0xd8>
 80216ea:	2a00      	cmp	r2, #0
 80216ec:	da01      	bge.n	80216f2 <__ieee754_atan2f+0xaa>
 80216ee:	313c      	adds	r1, #60	@ 0x3c
 80216f0:	db19      	blt.n	8021726 <__ieee754_atan2f+0xde>
 80216f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80216f6:	f7ff fb55 	bl	8020da4 <fabsf>
 80216fa:	f000 f843 	bl	8021784 <atanf>
 80216fe:	eef0 7a40 	vmov.f32	s15, s0
 8021702:	2c01      	cmp	r4, #1
 8021704:	d012      	beq.n	802172c <__ieee754_atan2f+0xe4>
 8021706:	2c02      	cmp	r4, #2
 8021708:	d017      	beq.n	802173a <__ieee754_atan2f+0xf2>
 802170a:	2c00      	cmp	r4, #0
 802170c:	d0af      	beq.n	802166e <__ieee754_atan2f+0x26>
 802170e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8021774 <__ieee754_atan2f+0x12c>
 8021712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021716:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8021778 <__ieee754_atan2f+0x130>
 802171a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802171e:	e7a6      	b.n	802166e <__ieee754_atan2f+0x26>
 8021720:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8021764 <__ieee754_atan2f+0x11c>
 8021724:	e7ed      	b.n	8021702 <__ieee754_atan2f+0xba>
 8021726:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802177c <__ieee754_atan2f+0x134>
 802172a:	e7ea      	b.n	8021702 <__ieee754_atan2f+0xba>
 802172c:	ee17 3a90 	vmov	r3, s15
 8021730:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8021734:	ee07 3a90 	vmov	s15, r3
 8021738:	e799      	b.n	802166e <__ieee754_atan2f+0x26>
 802173a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8021774 <__ieee754_atan2f+0x12c>
 802173e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021742:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8021778 <__ieee754_atan2f+0x130>
 8021746:	ee77 7a67 	vsub.f32	s15, s14, s15
 802174a:	e790      	b.n	802166e <__ieee754_atan2f+0x26>
 802174c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8021778 <__ieee754_atan2f+0x130>
 8021750:	e78d      	b.n	802166e <__ieee754_atan2f+0x26>
 8021752:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8021780 <__ieee754_atan2f+0x138>
 8021756:	e78a      	b.n	802166e <__ieee754_atan2f+0x26>
 8021758:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802177c <__ieee754_atan2f+0x134>
 802175c:	e787      	b.n	802166e <__ieee754_atan2f+0x26>
 802175e:	bf00      	nop
 8021760:	c0490fdb 	.word	0xc0490fdb
 8021764:	3fc90fdb 	.word	0x3fc90fdb
 8021768:	bfc90fdb 	.word	0xbfc90fdb
 802176c:	08025c0c 	.word	0x08025c0c
 8021770:	08025c00 	.word	0x08025c00
 8021774:	33bbbd2e 	.word	0x33bbbd2e
 8021778:	40490fdb 	.word	0x40490fdb
 802177c:	00000000 	.word	0x00000000
 8021780:	3f490fdb 	.word	0x3f490fdb

08021784 <atanf>:
 8021784:	b538      	push	{r3, r4, r5, lr}
 8021786:	ee10 5a10 	vmov	r5, s0
 802178a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802178e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8021792:	eef0 7a40 	vmov.f32	s15, s0
 8021796:	d30f      	bcc.n	80217b8 <atanf+0x34>
 8021798:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802179c:	d904      	bls.n	80217a8 <atanf+0x24>
 802179e:	ee70 7a00 	vadd.f32	s15, s0, s0
 80217a2:	eeb0 0a67 	vmov.f32	s0, s15
 80217a6:	bd38      	pop	{r3, r4, r5, pc}
 80217a8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80218e0 <atanf+0x15c>
 80217ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80218e4 <atanf+0x160>
 80217b0:	2d00      	cmp	r5, #0
 80217b2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80217b6:	e7f4      	b.n	80217a2 <atanf+0x1e>
 80217b8:	4b4b      	ldr	r3, [pc, #300]	@ (80218e8 <atanf+0x164>)
 80217ba:	429c      	cmp	r4, r3
 80217bc:	d810      	bhi.n	80217e0 <atanf+0x5c>
 80217be:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80217c2:	d20a      	bcs.n	80217da <atanf+0x56>
 80217c4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80218ec <atanf+0x168>
 80217c8:	ee30 7a07 	vadd.f32	s14, s0, s14
 80217cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80217d0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80217d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217d8:	dce3      	bgt.n	80217a2 <atanf+0x1e>
 80217da:	f04f 33ff 	mov.w	r3, #4294967295
 80217de:	e013      	b.n	8021808 <atanf+0x84>
 80217e0:	f7ff fae0 	bl	8020da4 <fabsf>
 80217e4:	4b42      	ldr	r3, [pc, #264]	@ (80218f0 <atanf+0x16c>)
 80217e6:	429c      	cmp	r4, r3
 80217e8:	d84f      	bhi.n	802188a <atanf+0x106>
 80217ea:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80217ee:	429c      	cmp	r4, r3
 80217f0:	d841      	bhi.n	8021876 <atanf+0xf2>
 80217f2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80217f6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80217fa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80217fe:	2300      	movs	r3, #0
 8021800:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021804:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021808:	1c5a      	adds	r2, r3, #1
 802180a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802180e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80218f4 <atanf+0x170>
 8021812:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80218f8 <atanf+0x174>
 8021816:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80218fc <atanf+0x178>
 802181a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802181e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8021822:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8021900 <atanf+0x17c>
 8021826:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802182a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8021904 <atanf+0x180>
 802182e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021832:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8021908 <atanf+0x184>
 8021836:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802183a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802190c <atanf+0x188>
 802183e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021842:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8021910 <atanf+0x18c>
 8021846:	eea6 5a87 	vfma.f32	s10, s13, s14
 802184a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8021914 <atanf+0x190>
 802184e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021852:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8021918 <atanf+0x194>
 8021856:	eea7 5a26 	vfma.f32	s10, s14, s13
 802185a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802191c <atanf+0x198>
 802185e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021862:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021866:	eea5 7a86 	vfma.f32	s14, s11, s12
 802186a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802186e:	d121      	bne.n	80218b4 <atanf+0x130>
 8021870:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021874:	e795      	b.n	80217a2 <atanf+0x1e>
 8021876:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802187a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802187e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021882:	2301      	movs	r3, #1
 8021884:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021888:	e7be      	b.n	8021808 <atanf+0x84>
 802188a:	4b25      	ldr	r3, [pc, #148]	@ (8021920 <atanf+0x19c>)
 802188c:	429c      	cmp	r4, r3
 802188e:	d80b      	bhi.n	80218a8 <atanf+0x124>
 8021890:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8021894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021898:	eea0 7a27 	vfma.f32	s14, s0, s15
 802189c:	2302      	movs	r3, #2
 802189e:	ee70 6a67 	vsub.f32	s13, s0, s15
 80218a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80218a6:	e7af      	b.n	8021808 <atanf+0x84>
 80218a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80218ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80218b0:	2303      	movs	r3, #3
 80218b2:	e7a9      	b.n	8021808 <atanf+0x84>
 80218b4:	4a1b      	ldr	r2, [pc, #108]	@ (8021924 <atanf+0x1a0>)
 80218b6:	491c      	ldr	r1, [pc, #112]	@ (8021928 <atanf+0x1a4>)
 80218b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80218bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80218c0:	edd3 6a00 	vldr	s13, [r3]
 80218c4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80218c8:	2d00      	cmp	r5, #0
 80218ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80218ce:	edd2 7a00 	vldr	s15, [r2]
 80218d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80218d6:	bfb8      	it	lt
 80218d8:	eef1 7a67 	vneglt.f32	s15, s15
 80218dc:	e761      	b.n	80217a2 <atanf+0x1e>
 80218de:	bf00      	nop
 80218e0:	bfc90fdb 	.word	0xbfc90fdb
 80218e4:	3fc90fdb 	.word	0x3fc90fdb
 80218e8:	3edfffff 	.word	0x3edfffff
 80218ec:	7149f2ca 	.word	0x7149f2ca
 80218f0:	3f97ffff 	.word	0x3f97ffff
 80218f4:	3c8569d7 	.word	0x3c8569d7
 80218f8:	3d4bda59 	.word	0x3d4bda59
 80218fc:	bd6ef16b 	.word	0xbd6ef16b
 8021900:	3d886b35 	.word	0x3d886b35
 8021904:	3dba2e6e 	.word	0x3dba2e6e
 8021908:	3e124925 	.word	0x3e124925
 802190c:	3eaaaaab 	.word	0x3eaaaaab
 8021910:	bd15a221 	.word	0xbd15a221
 8021914:	bd9d8795 	.word	0xbd9d8795
 8021918:	bde38e38 	.word	0xbde38e38
 802191c:	be4ccccd 	.word	0xbe4ccccd
 8021920:	401bffff 	.word	0x401bffff
 8021924:	08025c28 	.word	0x08025c28
 8021928:	08025c18 	.word	0x08025c18
 802192c:	00000000 	.word	0x00000000

08021930 <__kernel_rem_pio2>:
 8021930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021934:	ed2d 8b06 	vpush	{d8-d10}
 8021938:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 802193c:	469b      	mov	fp, r3
 802193e:	9001      	str	r0, [sp, #4]
 8021940:	4bbb      	ldr	r3, [pc, #748]	@ (8021c30 <__kernel_rem_pio2+0x300>)
 8021942:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8021944:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8021948:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 802194c:	f112 0f14 	cmn.w	r2, #20
 8021950:	bfa8      	it	ge
 8021952:	1ed3      	subge	r3, r2, #3
 8021954:	f10b 3aff 	add.w	sl, fp, #4294967295
 8021958:	bfb8      	it	lt
 802195a:	2300      	movlt	r3, #0
 802195c:	f06f 0517 	mvn.w	r5, #23
 8021960:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8021c18 <__kernel_rem_pio2+0x2e8>
 8021964:	bfa4      	itt	ge
 8021966:	2018      	movge	r0, #24
 8021968:	fb93 f3f0 	sdivge	r3, r3, r0
 802196c:	fb03 5505 	mla	r5, r3, r5, r5
 8021970:	eba3 040a 	sub.w	r4, r3, sl
 8021974:	4415      	add	r5, r2
 8021976:	460f      	mov	r7, r1
 8021978:	eb09 060a 	add.w	r6, r9, sl
 802197c:	a81a      	add	r0, sp, #104	@ 0x68
 802197e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8021982:	2200      	movs	r2, #0
 8021984:	42b2      	cmp	r2, r6
 8021986:	dd0e      	ble.n	80219a6 <__kernel_rem_pio2+0x76>
 8021988:	aa1a      	add	r2, sp, #104	@ 0x68
 802198a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 802198e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8021992:	2600      	movs	r6, #0
 8021994:	454e      	cmp	r6, r9
 8021996:	dc25      	bgt.n	80219e4 <__kernel_rem_pio2+0xb4>
 8021998:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8021c18 <__kernel_rem_pio2+0x2e8>
 802199c:	f8dd c004 	ldr.w	ip, [sp, #4]
 80219a0:	4614      	mov	r4, r2
 80219a2:	2000      	movs	r0, #0
 80219a4:	e015      	b.n	80219d2 <__kernel_rem_pio2+0xa2>
 80219a6:	42d4      	cmn	r4, r2
 80219a8:	d409      	bmi.n	80219be <__kernel_rem_pio2+0x8e>
 80219aa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80219ae:	ee07 1a90 	vmov	s15, r1
 80219b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80219b6:	eca0 7b02 	vstmia	r0!, {d7}
 80219ba:	3201      	adds	r2, #1
 80219bc:	e7e2      	b.n	8021984 <__kernel_rem_pio2+0x54>
 80219be:	eeb0 7b46 	vmov.f64	d7, d6
 80219c2:	e7f8      	b.n	80219b6 <__kernel_rem_pio2+0x86>
 80219c4:	ecbc 5b02 	vldmia	ip!, {d5}
 80219c8:	ed94 6b00 	vldr	d6, [r4]
 80219cc:	3001      	adds	r0, #1
 80219ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80219d2:	4550      	cmp	r0, sl
 80219d4:	f1a4 0408 	sub.w	r4, r4, #8
 80219d8:	ddf4      	ble.n	80219c4 <__kernel_rem_pio2+0x94>
 80219da:	ecae 7b02 	vstmia	lr!, {d7}
 80219de:	3601      	adds	r6, #1
 80219e0:	3208      	adds	r2, #8
 80219e2:	e7d7      	b.n	8021994 <__kernel_rem_pio2+0x64>
 80219e4:	aa06      	add	r2, sp, #24
 80219e6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8021c20 <__kernel_rem_pio2+0x2f0>
 80219ea:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8021c28 <__kernel_rem_pio2+0x2f8>
 80219ee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80219f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80219f6:	9203      	str	r2, [sp, #12]
 80219f8:	9302      	str	r3, [sp, #8]
 80219fa:	464c      	mov	r4, r9
 80219fc:	00e3      	lsls	r3, r4, #3
 80219fe:	9304      	str	r3, [sp, #16]
 8021a00:	ab92      	add	r3, sp, #584	@ 0x248
 8021a02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021a06:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8021a0a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8021a0c:	ab06      	add	r3, sp, #24
 8021a0e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8021a12:	461e      	mov	r6, r3
 8021a14:	4620      	mov	r0, r4
 8021a16:	2800      	cmp	r0, #0
 8021a18:	f1a2 0208 	sub.w	r2, r2, #8
 8021a1c:	dc4a      	bgt.n	8021ab4 <__kernel_rem_pio2+0x184>
 8021a1e:	4628      	mov	r0, r5
 8021a20:	9305      	str	r3, [sp, #20]
 8021a22:	f000 fa01 	bl	8021e28 <scalbn>
 8021a26:	eeb0 8b40 	vmov.f64	d8, d0
 8021a2a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8021a2e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8021a32:	f000 fa79 	bl	8021f28 <floor>
 8021a36:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8021a3a:	eea0 8b47 	vfms.f64	d8, d0, d7
 8021a3e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8021a42:	2d00      	cmp	r5, #0
 8021a44:	ee17 8a90 	vmov	r8, s15
 8021a48:	9b05      	ldr	r3, [sp, #20]
 8021a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021a4e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8021a52:	dd41      	ble.n	8021ad8 <__kernel_rem_pio2+0x1a8>
 8021a54:	1e60      	subs	r0, r4, #1
 8021a56:	aa06      	add	r2, sp, #24
 8021a58:	f1c5 0c18 	rsb	ip, r5, #24
 8021a5c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021a60:	fa46 f20c 	asr.w	r2, r6, ip
 8021a64:	4490      	add	r8, r2
 8021a66:	fa02 f20c 	lsl.w	r2, r2, ip
 8021a6a:	1ab6      	subs	r6, r6, r2
 8021a6c:	aa06      	add	r2, sp, #24
 8021a6e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8021a72:	f1c5 0217 	rsb	r2, r5, #23
 8021a76:	4116      	asrs	r6, r2
 8021a78:	2e00      	cmp	r6, #0
 8021a7a:	dd3c      	ble.n	8021af6 <__kernel_rem_pio2+0x1c6>
 8021a7c:	f04f 0c00 	mov.w	ip, #0
 8021a80:	f108 0801 	add.w	r8, r8, #1
 8021a84:	4660      	mov	r0, ip
 8021a86:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8021a8a:	4564      	cmp	r4, ip
 8021a8c:	dc66      	bgt.n	8021b5c <__kernel_rem_pio2+0x22c>
 8021a8e:	2d00      	cmp	r5, #0
 8021a90:	dd03      	ble.n	8021a9a <__kernel_rem_pio2+0x16a>
 8021a92:	2d01      	cmp	r5, #1
 8021a94:	d072      	beq.n	8021b7c <__kernel_rem_pio2+0x24c>
 8021a96:	2d02      	cmp	r5, #2
 8021a98:	d07a      	beq.n	8021b90 <__kernel_rem_pio2+0x260>
 8021a9a:	2e02      	cmp	r6, #2
 8021a9c:	d12b      	bne.n	8021af6 <__kernel_rem_pio2+0x1c6>
 8021a9e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8021aa2:	ee30 8b48 	vsub.f64	d8, d0, d8
 8021aa6:	b330      	cbz	r0, 8021af6 <__kernel_rem_pio2+0x1c6>
 8021aa8:	4628      	mov	r0, r5
 8021aaa:	f000 f9bd 	bl	8021e28 <scalbn>
 8021aae:	ee38 8b40 	vsub.f64	d8, d8, d0
 8021ab2:	e020      	b.n	8021af6 <__kernel_rem_pio2+0x1c6>
 8021ab4:	ee20 7b09 	vmul.f64	d7, d0, d9
 8021ab8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8021abc:	3801      	subs	r0, #1
 8021abe:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8021ac2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8021ac6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8021aca:	eca6 0a01 	vstmia	r6!, {s0}
 8021ace:	ed92 0b00 	vldr	d0, [r2]
 8021ad2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8021ad6:	e79e      	b.n	8021a16 <__kernel_rem_pio2+0xe6>
 8021ad8:	d105      	bne.n	8021ae6 <__kernel_rem_pio2+0x1b6>
 8021ada:	1e62      	subs	r2, r4, #1
 8021adc:	a906      	add	r1, sp, #24
 8021ade:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8021ae2:	15f6      	asrs	r6, r6, #23
 8021ae4:	e7c8      	b.n	8021a78 <__kernel_rem_pio2+0x148>
 8021ae6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8021aea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8021aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021af2:	da31      	bge.n	8021b58 <__kernel_rem_pio2+0x228>
 8021af4:	2600      	movs	r6, #0
 8021af6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021afe:	f040 809b 	bne.w	8021c38 <__kernel_rem_pio2+0x308>
 8021b02:	1e62      	subs	r2, r4, #1
 8021b04:	2000      	movs	r0, #0
 8021b06:	454a      	cmp	r2, r9
 8021b08:	da49      	bge.n	8021b9e <__kernel_rem_pio2+0x26e>
 8021b0a:	2800      	cmp	r0, #0
 8021b0c:	d062      	beq.n	8021bd4 <__kernel_rem_pio2+0x2a4>
 8021b0e:	3c01      	subs	r4, #1
 8021b10:	ab06      	add	r3, sp, #24
 8021b12:	3d18      	subs	r5, #24
 8021b14:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	d0f8      	beq.n	8021b0e <__kernel_rem_pio2+0x1de>
 8021b1c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8021b20:	4628      	mov	r0, r5
 8021b22:	f000 f981 	bl	8021e28 <scalbn>
 8021b26:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8021c20 <__kernel_rem_pio2+0x2f0>
 8021b2a:	1c62      	adds	r2, r4, #1
 8021b2c:	a96a      	add	r1, sp, #424	@ 0x1a8
 8021b2e:	00d3      	lsls	r3, r2, #3
 8021b30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8021b34:	4622      	mov	r2, r4
 8021b36:	2a00      	cmp	r2, #0
 8021b38:	f280 80a8 	bge.w	8021c8c <__kernel_rem_pio2+0x35c>
 8021b3c:	4622      	mov	r2, r4
 8021b3e:	2a00      	cmp	r2, #0
 8021b40:	f2c0 80c6 	blt.w	8021cd0 <__kernel_rem_pio2+0x3a0>
 8021b44:	a96a      	add	r1, sp, #424	@ 0x1a8
 8021b46:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8021b4a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8021c18 <__kernel_rem_pio2+0x2e8>
 8021b4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8021c34 <__kernel_rem_pio2+0x304>
 8021b52:	2000      	movs	r0, #0
 8021b54:	1aa1      	subs	r1, r4, r2
 8021b56:	e0b0      	b.n	8021cba <__kernel_rem_pio2+0x38a>
 8021b58:	2602      	movs	r6, #2
 8021b5a:	e78f      	b.n	8021a7c <__kernel_rem_pio2+0x14c>
 8021b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b60:	b948      	cbnz	r0, 8021b76 <__kernel_rem_pio2+0x246>
 8021b62:	b122      	cbz	r2, 8021b6e <__kernel_rem_pio2+0x23e>
 8021b64:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8021b68:	f843 2c04 	str.w	r2, [r3, #-4]
 8021b6c:	2201      	movs	r2, #1
 8021b6e:	f10c 0c01 	add.w	ip, ip, #1
 8021b72:	4610      	mov	r0, r2
 8021b74:	e789      	b.n	8021a8a <__kernel_rem_pio2+0x15a>
 8021b76:	ebae 0202 	sub.w	r2, lr, r2
 8021b7a:	e7f5      	b.n	8021b68 <__kernel_rem_pio2+0x238>
 8021b7c:	1e62      	subs	r2, r4, #1
 8021b7e:	ab06      	add	r3, sp, #24
 8021b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8021b88:	a906      	add	r1, sp, #24
 8021b8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8021b8e:	e784      	b.n	8021a9a <__kernel_rem_pio2+0x16a>
 8021b90:	1e62      	subs	r2, r4, #1
 8021b92:	ab06      	add	r3, sp, #24
 8021b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8021b9c:	e7f4      	b.n	8021b88 <__kernel_rem_pio2+0x258>
 8021b9e:	ab06      	add	r3, sp, #24
 8021ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021ba4:	3a01      	subs	r2, #1
 8021ba6:	4318      	orrs	r0, r3
 8021ba8:	e7ad      	b.n	8021b06 <__kernel_rem_pio2+0x1d6>
 8021baa:	3301      	adds	r3, #1
 8021bac:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8021bb0:	2800      	cmp	r0, #0
 8021bb2:	d0fa      	beq.n	8021baa <__kernel_rem_pio2+0x27a>
 8021bb4:	9a04      	ldr	r2, [sp, #16]
 8021bb6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8021bba:	446a      	add	r2, sp
 8021bbc:	eb04 000b 	add.w	r0, r4, fp
 8021bc0:	a91a      	add	r1, sp, #104	@ 0x68
 8021bc2:	1c66      	adds	r6, r4, #1
 8021bc4:	3a98      	subs	r2, #152	@ 0x98
 8021bc6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8021bca:	4423      	add	r3, r4
 8021bcc:	42b3      	cmp	r3, r6
 8021bce:	da04      	bge.n	8021bda <__kernel_rem_pio2+0x2aa>
 8021bd0:	461c      	mov	r4, r3
 8021bd2:	e713      	b.n	80219fc <__kernel_rem_pio2+0xcc>
 8021bd4:	9a03      	ldr	r2, [sp, #12]
 8021bd6:	2301      	movs	r3, #1
 8021bd8:	e7e8      	b.n	8021bac <__kernel_rem_pio2+0x27c>
 8021bda:	9902      	ldr	r1, [sp, #8]
 8021bdc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8021be0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8021be4:	9104      	str	r1, [sp, #16]
 8021be6:	ee07 1a90 	vmov	s15, r1
 8021bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021bee:	2400      	movs	r4, #0
 8021bf0:	eca0 7b02 	vstmia	r0!, {d7}
 8021bf4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8021c18 <__kernel_rem_pio2+0x2e8>
 8021bf8:	4686      	mov	lr, r0
 8021bfa:	4554      	cmp	r4, sl
 8021bfc:	dd03      	ble.n	8021c06 <__kernel_rem_pio2+0x2d6>
 8021bfe:	eca2 7b02 	vstmia	r2!, {d7}
 8021c02:	3601      	adds	r6, #1
 8021c04:	e7e2      	b.n	8021bcc <__kernel_rem_pio2+0x29c>
 8021c06:	ecbc 5b02 	vldmia	ip!, {d5}
 8021c0a:	ed3e 6b02 	vldmdb	lr!, {d6}
 8021c0e:	3401      	adds	r4, #1
 8021c10:	eea5 7b06 	vfma.f64	d7, d5, d6
 8021c14:	e7f1      	b.n	8021bfa <__kernel_rem_pio2+0x2ca>
 8021c16:	bf00      	nop
	...
 8021c24:	3e700000 	.word	0x3e700000
 8021c28:	00000000 	.word	0x00000000
 8021c2c:	41700000 	.word	0x41700000
 8021c30:	08025c78 	.word	0x08025c78
 8021c34:	08025c38 	.word	0x08025c38
 8021c38:	4268      	negs	r0, r5
 8021c3a:	eeb0 0b48 	vmov.f64	d0, d8
 8021c3e:	f000 f8f3 	bl	8021e28 <scalbn>
 8021c42:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8021e10 <__kernel_rem_pio2+0x4e0>
 8021c46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8021c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c4e:	db17      	blt.n	8021c80 <__kernel_rem_pio2+0x350>
 8021c50:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8021e18 <__kernel_rem_pio2+0x4e8>
 8021c54:	ee20 7b07 	vmul.f64	d7, d0, d7
 8021c58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8021c5c:	aa06      	add	r2, sp, #24
 8021c5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8021c62:	eea5 0b46 	vfms.f64	d0, d5, d6
 8021c66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8021c6a:	3518      	adds	r5, #24
 8021c6c:	ee10 3a10 	vmov	r3, s0
 8021c70:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8021c74:	ee17 3a10 	vmov	r3, s14
 8021c78:	3401      	adds	r4, #1
 8021c7a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8021c7e:	e74d      	b.n	8021b1c <__kernel_rem_pio2+0x1ec>
 8021c80:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8021c84:	aa06      	add	r2, sp, #24
 8021c86:	ee10 3a10 	vmov	r3, s0
 8021c8a:	e7f6      	b.n	8021c7a <__kernel_rem_pio2+0x34a>
 8021c8c:	a806      	add	r0, sp, #24
 8021c8e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8021c92:	9001      	str	r0, [sp, #4]
 8021c94:	ee07 0a90 	vmov	s15, r0
 8021c98:	3a01      	subs	r2, #1
 8021c9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021c9e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8021ca2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021ca6:	ed21 7b02 	vstmdb	r1!, {d7}
 8021caa:	e744      	b.n	8021b36 <__kernel_rem_pio2+0x206>
 8021cac:	ecbc 5b02 	vldmia	ip!, {d5}
 8021cb0:	ecb5 6b02 	vldmia	r5!, {d6}
 8021cb4:	3001      	adds	r0, #1
 8021cb6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8021cba:	4548      	cmp	r0, r9
 8021cbc:	dc01      	bgt.n	8021cc2 <__kernel_rem_pio2+0x392>
 8021cbe:	4281      	cmp	r1, r0
 8021cc0:	daf4      	bge.n	8021cac <__kernel_rem_pio2+0x37c>
 8021cc2:	a842      	add	r0, sp, #264	@ 0x108
 8021cc4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8021cc8:	ed81 7b00 	vstr	d7, [r1]
 8021ccc:	3a01      	subs	r2, #1
 8021cce:	e736      	b.n	8021b3e <__kernel_rem_pio2+0x20e>
 8021cd0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8021cd2:	2a02      	cmp	r2, #2
 8021cd4:	dc0a      	bgt.n	8021cec <__kernel_rem_pio2+0x3bc>
 8021cd6:	2a00      	cmp	r2, #0
 8021cd8:	dc2d      	bgt.n	8021d36 <__kernel_rem_pio2+0x406>
 8021cda:	d046      	beq.n	8021d6a <__kernel_rem_pio2+0x43a>
 8021cdc:	f008 0007 	and.w	r0, r8, #7
 8021ce0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8021ce4:	ecbd 8b06 	vpop	{d8-d10}
 8021ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cec:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8021cee:	2a03      	cmp	r2, #3
 8021cf0:	d1f4      	bne.n	8021cdc <__kernel_rem_pio2+0x3ac>
 8021cf2:	a942      	add	r1, sp, #264	@ 0x108
 8021cf4:	f1a3 0208 	sub.w	r2, r3, #8
 8021cf8:	440a      	add	r2, r1
 8021cfa:	4611      	mov	r1, r2
 8021cfc:	4620      	mov	r0, r4
 8021cfe:	2800      	cmp	r0, #0
 8021d00:	f1a1 0108 	sub.w	r1, r1, #8
 8021d04:	dc52      	bgt.n	8021dac <__kernel_rem_pio2+0x47c>
 8021d06:	4621      	mov	r1, r4
 8021d08:	2901      	cmp	r1, #1
 8021d0a:	f1a2 0208 	sub.w	r2, r2, #8
 8021d0e:	dc5d      	bgt.n	8021dcc <__kernel_rem_pio2+0x49c>
 8021d10:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8021e20 <__kernel_rem_pio2+0x4f0>
 8021d14:	aa42      	add	r2, sp, #264	@ 0x108
 8021d16:	4413      	add	r3, r2
 8021d18:	2c01      	cmp	r4, #1
 8021d1a:	dc67      	bgt.n	8021dec <__kernel_rem_pio2+0x4bc>
 8021d1c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8021d20:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8021d24:	2e00      	cmp	r6, #0
 8021d26:	d167      	bne.n	8021df8 <__kernel_rem_pio2+0x4c8>
 8021d28:	ed87 5b00 	vstr	d5, [r7]
 8021d2c:	ed87 6b02 	vstr	d6, [r7, #8]
 8021d30:	ed87 7b04 	vstr	d7, [r7, #16]
 8021d34:	e7d2      	b.n	8021cdc <__kernel_rem_pio2+0x3ac>
 8021d36:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8021e20 <__kernel_rem_pio2+0x4f0>
 8021d3a:	aa42      	add	r2, sp, #264	@ 0x108
 8021d3c:	4413      	add	r3, r2
 8021d3e:	4622      	mov	r2, r4
 8021d40:	2a00      	cmp	r2, #0
 8021d42:	da24      	bge.n	8021d8e <__kernel_rem_pio2+0x45e>
 8021d44:	b34e      	cbz	r6, 8021d9a <__kernel_rem_pio2+0x46a>
 8021d46:	eeb1 7b46 	vneg.f64	d7, d6
 8021d4a:	ed87 7b00 	vstr	d7, [r7]
 8021d4e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8021d52:	aa44      	add	r2, sp, #272	@ 0x110
 8021d54:	2301      	movs	r3, #1
 8021d56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021d5a:	429c      	cmp	r4, r3
 8021d5c:	da20      	bge.n	8021da0 <__kernel_rem_pio2+0x470>
 8021d5e:	b10e      	cbz	r6, 8021d64 <__kernel_rem_pio2+0x434>
 8021d60:	eeb1 7b47 	vneg.f64	d7, d7
 8021d64:	ed87 7b02 	vstr	d7, [r7, #8]
 8021d68:	e7b8      	b.n	8021cdc <__kernel_rem_pio2+0x3ac>
 8021d6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8021e20 <__kernel_rem_pio2+0x4f0>
 8021d6e:	aa42      	add	r2, sp, #264	@ 0x108
 8021d70:	4413      	add	r3, r2
 8021d72:	2c00      	cmp	r4, #0
 8021d74:	da05      	bge.n	8021d82 <__kernel_rem_pio2+0x452>
 8021d76:	b10e      	cbz	r6, 8021d7c <__kernel_rem_pio2+0x44c>
 8021d78:	eeb1 7b47 	vneg.f64	d7, d7
 8021d7c:	ed87 7b00 	vstr	d7, [r7]
 8021d80:	e7ac      	b.n	8021cdc <__kernel_rem_pio2+0x3ac>
 8021d82:	ed33 6b02 	vldmdb	r3!, {d6}
 8021d86:	3c01      	subs	r4, #1
 8021d88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021d8c:	e7f1      	b.n	8021d72 <__kernel_rem_pio2+0x442>
 8021d8e:	ed33 7b02 	vldmdb	r3!, {d7}
 8021d92:	3a01      	subs	r2, #1
 8021d94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8021d98:	e7d2      	b.n	8021d40 <__kernel_rem_pio2+0x410>
 8021d9a:	eeb0 7b46 	vmov.f64	d7, d6
 8021d9e:	e7d4      	b.n	8021d4a <__kernel_rem_pio2+0x41a>
 8021da0:	ecb2 6b02 	vldmia	r2!, {d6}
 8021da4:	3301      	adds	r3, #1
 8021da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021daa:	e7d6      	b.n	8021d5a <__kernel_rem_pio2+0x42a>
 8021dac:	ed91 7b00 	vldr	d7, [r1]
 8021db0:	ed91 5b02 	vldr	d5, [r1, #8]
 8021db4:	3801      	subs	r0, #1
 8021db6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8021dba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021dbe:	ed81 6b00 	vstr	d6, [r1]
 8021dc2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8021dc6:	ed81 7b02 	vstr	d7, [r1, #8]
 8021dca:	e798      	b.n	8021cfe <__kernel_rem_pio2+0x3ce>
 8021dcc:	ed92 7b00 	vldr	d7, [r2]
 8021dd0:	ed92 5b02 	vldr	d5, [r2, #8]
 8021dd4:	3901      	subs	r1, #1
 8021dd6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8021dda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021dde:	ed82 6b00 	vstr	d6, [r2]
 8021de2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8021de6:	ed82 7b02 	vstr	d7, [r2, #8]
 8021dea:	e78d      	b.n	8021d08 <__kernel_rem_pio2+0x3d8>
 8021dec:	ed33 6b02 	vldmdb	r3!, {d6}
 8021df0:	3c01      	subs	r4, #1
 8021df2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021df6:	e78f      	b.n	8021d18 <__kernel_rem_pio2+0x3e8>
 8021df8:	eeb1 5b45 	vneg.f64	d5, d5
 8021dfc:	eeb1 6b46 	vneg.f64	d6, d6
 8021e00:	ed87 5b00 	vstr	d5, [r7]
 8021e04:	eeb1 7b47 	vneg.f64	d7, d7
 8021e08:	ed87 6b02 	vstr	d6, [r7, #8]
 8021e0c:	e790      	b.n	8021d30 <__kernel_rem_pio2+0x400>
 8021e0e:	bf00      	nop
 8021e10:	00000000 	.word	0x00000000
 8021e14:	41700000 	.word	0x41700000
 8021e18:	00000000 	.word	0x00000000
 8021e1c:	3e700000 	.word	0x3e700000
	...

08021e28 <scalbn>:
 8021e28:	ee10 1a90 	vmov	r1, s1
 8021e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021e30:	b98b      	cbnz	r3, 8021e56 <scalbn+0x2e>
 8021e32:	ee10 3a10 	vmov	r3, s0
 8021e36:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8021e3a:	4319      	orrs	r1, r3
 8021e3c:	d00a      	beq.n	8021e54 <scalbn+0x2c>
 8021e3e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8021ef0 <scalbn+0xc8>
 8021e42:	4b37      	ldr	r3, [pc, #220]	@ (8021f20 <scalbn+0xf8>)
 8021e44:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021e48:	4298      	cmp	r0, r3
 8021e4a:	da0b      	bge.n	8021e64 <scalbn+0x3c>
 8021e4c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8021ef8 <scalbn+0xd0>
 8021e50:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021e54:	4770      	bx	lr
 8021e56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8021e5a:	4293      	cmp	r3, r2
 8021e5c:	d107      	bne.n	8021e6e <scalbn+0x46>
 8021e5e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8021e62:	4770      	bx	lr
 8021e64:	ee10 1a90 	vmov	r1, s1
 8021e68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021e6c:	3b36      	subs	r3, #54	@ 0x36
 8021e6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8021e72:	4290      	cmp	r0, r2
 8021e74:	dd0d      	ble.n	8021e92 <scalbn+0x6a>
 8021e76:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8021f00 <scalbn+0xd8>
 8021e7a:	ee10 3a90 	vmov	r3, s1
 8021e7e:	eeb0 6b47 	vmov.f64	d6, d7
 8021e82:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8021f08 <scalbn+0xe0>
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	fe27 7b05 	vselge.f64	d7, d7, d5
 8021e8c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8021e90:	4770      	bx	lr
 8021e92:	4418      	add	r0, r3
 8021e94:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8021e98:	4298      	cmp	r0, r3
 8021e9a:	dcec      	bgt.n	8021e76 <scalbn+0x4e>
 8021e9c:	2800      	cmp	r0, #0
 8021e9e:	dd0a      	ble.n	8021eb6 <scalbn+0x8e>
 8021ea0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8021ea4:	ec53 2b10 	vmov	r2, r3, d0
 8021ea8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8021eac:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8021eb0:	ec43 2b10 	vmov	d0, r2, r3
 8021eb4:	4770      	bx	lr
 8021eb6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8021eba:	da09      	bge.n	8021ed0 <scalbn+0xa8>
 8021ebc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8021ef8 <scalbn+0xd0>
 8021ec0:	ee10 3a90 	vmov	r3, s1
 8021ec4:	eeb0 6b47 	vmov.f64	d6, d7
 8021ec8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8021f10 <scalbn+0xe8>
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	e7db      	b.n	8021e88 <scalbn+0x60>
 8021ed0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8021ed4:	ec53 2b10 	vmov	r2, r3, d0
 8021ed8:	3036      	adds	r0, #54	@ 0x36
 8021eda:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8021ede:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8021ee2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8021f18 <scalbn+0xf0>
 8021ee6:	ec43 2b10 	vmov	d0, r2, r3
 8021eea:	e7b1      	b.n	8021e50 <scalbn+0x28>
 8021eec:	f3af 8000 	nop.w
 8021ef0:	00000000 	.word	0x00000000
 8021ef4:	43500000 	.word	0x43500000
 8021ef8:	c2f8f359 	.word	0xc2f8f359
 8021efc:	01a56e1f 	.word	0x01a56e1f
 8021f00:	8800759c 	.word	0x8800759c
 8021f04:	7e37e43c 	.word	0x7e37e43c
 8021f08:	8800759c 	.word	0x8800759c
 8021f0c:	fe37e43c 	.word	0xfe37e43c
 8021f10:	c2f8f359 	.word	0xc2f8f359
 8021f14:	81a56e1f 	.word	0x81a56e1f
 8021f18:	00000000 	.word	0x00000000
 8021f1c:	3c900000 	.word	0x3c900000
 8021f20:	ffff3cb0 	.word	0xffff3cb0
 8021f24:	00000000 	.word	0x00000000

08021f28 <floor>:
 8021f28:	ee10 3a90 	vmov	r3, s1
 8021f2c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8021f30:	ee10 2a10 	vmov	r2, s0
 8021f34:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8021f38:	2913      	cmp	r1, #19
 8021f3a:	b530      	push	{r4, r5, lr}
 8021f3c:	4615      	mov	r5, r2
 8021f3e:	dc33      	bgt.n	8021fa8 <floor+0x80>
 8021f40:	2900      	cmp	r1, #0
 8021f42:	da18      	bge.n	8021f76 <floor+0x4e>
 8021f44:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8022008 <floor+0xe0>
 8021f48:	ee30 0b07 	vadd.f64	d0, d0, d7
 8021f4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f54:	dd0a      	ble.n	8021f6c <floor+0x44>
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	da50      	bge.n	8021ffc <floor+0xd4>
 8021f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021f5e:	4313      	orrs	r3, r2
 8021f60:	2200      	movs	r2, #0
 8021f62:	4293      	cmp	r3, r2
 8021f64:	4b2a      	ldr	r3, [pc, #168]	@ (8022010 <floor+0xe8>)
 8021f66:	bf08      	it	eq
 8021f68:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8021f6c:	4619      	mov	r1, r3
 8021f6e:	4610      	mov	r0, r2
 8021f70:	ec41 0b10 	vmov	d0, r0, r1
 8021f74:	e01f      	b.n	8021fb6 <floor+0x8e>
 8021f76:	4827      	ldr	r0, [pc, #156]	@ (8022014 <floor+0xec>)
 8021f78:	4108      	asrs	r0, r1
 8021f7a:	ea03 0400 	and.w	r4, r3, r0
 8021f7e:	4314      	orrs	r4, r2
 8021f80:	d019      	beq.n	8021fb6 <floor+0x8e>
 8021f82:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8022008 <floor+0xe0>
 8021f86:	ee30 0b07 	vadd.f64	d0, d0, d7
 8021f8a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f92:	ddeb      	ble.n	8021f6c <floor+0x44>
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	bfbe      	ittt	lt
 8021f98:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8021f9c:	410a      	asrlt	r2, r1
 8021f9e:	189b      	addlt	r3, r3, r2
 8021fa0:	ea23 0300 	bic.w	r3, r3, r0
 8021fa4:	2200      	movs	r2, #0
 8021fa6:	e7e1      	b.n	8021f6c <floor+0x44>
 8021fa8:	2933      	cmp	r1, #51	@ 0x33
 8021faa:	dd05      	ble.n	8021fb8 <floor+0x90>
 8021fac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8021fb0:	d101      	bne.n	8021fb6 <floor+0x8e>
 8021fb2:	ee30 0b00 	vadd.f64	d0, d0, d0
 8021fb6:	bd30      	pop	{r4, r5, pc}
 8021fb8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8021fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8021fc0:	40e0      	lsrs	r0, r4
 8021fc2:	4210      	tst	r0, r2
 8021fc4:	d0f7      	beq.n	8021fb6 <floor+0x8e>
 8021fc6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8022008 <floor+0xe0>
 8021fca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8021fce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fd6:	ddc9      	ble.n	8021f6c <floor+0x44>
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	da02      	bge.n	8021fe2 <floor+0xba>
 8021fdc:	2914      	cmp	r1, #20
 8021fde:	d103      	bne.n	8021fe8 <floor+0xc0>
 8021fe0:	3301      	adds	r3, #1
 8021fe2:	ea22 0200 	bic.w	r2, r2, r0
 8021fe6:	e7c1      	b.n	8021f6c <floor+0x44>
 8021fe8:	2401      	movs	r4, #1
 8021fea:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8021fee:	fa04 f101 	lsl.w	r1, r4, r1
 8021ff2:	440a      	add	r2, r1
 8021ff4:	42aa      	cmp	r2, r5
 8021ff6:	bf38      	it	cc
 8021ff8:	191b      	addcc	r3, r3, r4
 8021ffa:	e7f2      	b.n	8021fe2 <floor+0xba>
 8021ffc:	2200      	movs	r2, #0
 8021ffe:	4613      	mov	r3, r2
 8022000:	e7b4      	b.n	8021f6c <floor+0x44>
 8022002:	bf00      	nop
 8022004:	f3af 8000 	nop.w
 8022008:	8800759c 	.word	0x8800759c
 802200c:	7e37e43c 	.word	0x7e37e43c
 8022010:	bff00000 	.word	0xbff00000
 8022014:	000fffff 	.word	0x000fffff

08022018 <__assert_func>:
 8022018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802201a:	4614      	mov	r4, r2
 802201c:	461a      	mov	r2, r3
 802201e:	4b09      	ldr	r3, [pc, #36]	@ (8022044 <__assert_func+0x2c>)
 8022020:	681b      	ldr	r3, [r3, #0]
 8022022:	4605      	mov	r5, r0
 8022024:	68d8      	ldr	r0, [r3, #12]
 8022026:	b954      	cbnz	r4, 802203e <__assert_func+0x26>
 8022028:	4b07      	ldr	r3, [pc, #28]	@ (8022048 <__assert_func+0x30>)
 802202a:	461c      	mov	r4, r3
 802202c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022030:	9100      	str	r1, [sp, #0]
 8022032:	462b      	mov	r3, r5
 8022034:	4905      	ldr	r1, [pc, #20]	@ (802204c <__assert_func+0x34>)
 8022036:	f000 fce7 	bl	8022a08 <fiprintf>
 802203a:	f000 fe68 	bl	8022d0e <abort>
 802203e:	4b04      	ldr	r3, [pc, #16]	@ (8022050 <__assert_func+0x38>)
 8022040:	e7f4      	b.n	802202c <__assert_func+0x14>
 8022042:	bf00      	nop
 8022044:	2400004c 	.word	0x2400004c
 8022048:	08025cc3 	.word	0x08025cc3
 802204c:	08025c95 	.word	0x08025c95
 8022050:	08025c88 	.word	0x08025c88

08022054 <__cvt>:
 8022054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022056:	ed2d 8b02 	vpush	{d8}
 802205a:	eeb0 8b40 	vmov.f64	d8, d0
 802205e:	b085      	sub	sp, #20
 8022060:	4617      	mov	r7, r2
 8022062:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022064:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022066:	ee18 2a90 	vmov	r2, s17
 802206a:	f025 0520 	bic.w	r5, r5, #32
 802206e:	2a00      	cmp	r2, #0
 8022070:	bfb6      	itet	lt
 8022072:	222d      	movlt	r2, #45	@ 0x2d
 8022074:	2200      	movge	r2, #0
 8022076:	eeb1 8b40 	vneglt.f64	d8, d0
 802207a:	2d46      	cmp	r5, #70	@ 0x46
 802207c:	460c      	mov	r4, r1
 802207e:	701a      	strb	r2, [r3, #0]
 8022080:	d004      	beq.n	802208c <__cvt+0x38>
 8022082:	2d45      	cmp	r5, #69	@ 0x45
 8022084:	d100      	bne.n	8022088 <__cvt+0x34>
 8022086:	3401      	adds	r4, #1
 8022088:	2102      	movs	r1, #2
 802208a:	e000      	b.n	802208e <__cvt+0x3a>
 802208c:	2103      	movs	r1, #3
 802208e:	ab03      	add	r3, sp, #12
 8022090:	9301      	str	r3, [sp, #4]
 8022092:	ab02      	add	r3, sp, #8
 8022094:	9300      	str	r3, [sp, #0]
 8022096:	4622      	mov	r2, r4
 8022098:	4633      	mov	r3, r6
 802209a:	eeb0 0b48 	vmov.f64	d0, d8
 802209e:	f000 fec7 	bl	8022e30 <_dtoa_r>
 80220a2:	2d47      	cmp	r5, #71	@ 0x47
 80220a4:	d114      	bne.n	80220d0 <__cvt+0x7c>
 80220a6:	07fb      	lsls	r3, r7, #31
 80220a8:	d50a      	bpl.n	80220c0 <__cvt+0x6c>
 80220aa:	1902      	adds	r2, r0, r4
 80220ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80220b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220b4:	bf08      	it	eq
 80220b6:	9203      	streq	r2, [sp, #12]
 80220b8:	2130      	movs	r1, #48	@ 0x30
 80220ba:	9b03      	ldr	r3, [sp, #12]
 80220bc:	4293      	cmp	r3, r2
 80220be:	d319      	bcc.n	80220f4 <__cvt+0xa0>
 80220c0:	9b03      	ldr	r3, [sp, #12]
 80220c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80220c4:	1a1b      	subs	r3, r3, r0
 80220c6:	6013      	str	r3, [r2, #0]
 80220c8:	b005      	add	sp, #20
 80220ca:	ecbd 8b02 	vpop	{d8}
 80220ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220d0:	2d46      	cmp	r5, #70	@ 0x46
 80220d2:	eb00 0204 	add.w	r2, r0, r4
 80220d6:	d1e9      	bne.n	80220ac <__cvt+0x58>
 80220d8:	7803      	ldrb	r3, [r0, #0]
 80220da:	2b30      	cmp	r3, #48	@ 0x30
 80220dc:	d107      	bne.n	80220ee <__cvt+0x9a>
 80220de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80220e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220e6:	bf1c      	itt	ne
 80220e8:	f1c4 0401 	rsbne	r4, r4, #1
 80220ec:	6034      	strne	r4, [r6, #0]
 80220ee:	6833      	ldr	r3, [r6, #0]
 80220f0:	441a      	add	r2, r3
 80220f2:	e7db      	b.n	80220ac <__cvt+0x58>
 80220f4:	1c5c      	adds	r4, r3, #1
 80220f6:	9403      	str	r4, [sp, #12]
 80220f8:	7019      	strb	r1, [r3, #0]
 80220fa:	e7de      	b.n	80220ba <__cvt+0x66>

080220fc <__exponent>:
 80220fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80220fe:	2900      	cmp	r1, #0
 8022100:	bfba      	itte	lt
 8022102:	4249      	neglt	r1, r1
 8022104:	232d      	movlt	r3, #45	@ 0x2d
 8022106:	232b      	movge	r3, #43	@ 0x2b
 8022108:	2909      	cmp	r1, #9
 802210a:	7002      	strb	r2, [r0, #0]
 802210c:	7043      	strb	r3, [r0, #1]
 802210e:	dd29      	ble.n	8022164 <__exponent+0x68>
 8022110:	f10d 0307 	add.w	r3, sp, #7
 8022114:	461d      	mov	r5, r3
 8022116:	270a      	movs	r7, #10
 8022118:	461a      	mov	r2, r3
 802211a:	fbb1 f6f7 	udiv	r6, r1, r7
 802211e:	fb07 1416 	mls	r4, r7, r6, r1
 8022122:	3430      	adds	r4, #48	@ 0x30
 8022124:	f802 4c01 	strb.w	r4, [r2, #-1]
 8022128:	460c      	mov	r4, r1
 802212a:	2c63      	cmp	r4, #99	@ 0x63
 802212c:	f103 33ff 	add.w	r3, r3, #4294967295
 8022130:	4631      	mov	r1, r6
 8022132:	dcf1      	bgt.n	8022118 <__exponent+0x1c>
 8022134:	3130      	adds	r1, #48	@ 0x30
 8022136:	1e94      	subs	r4, r2, #2
 8022138:	f803 1c01 	strb.w	r1, [r3, #-1]
 802213c:	1c41      	adds	r1, r0, #1
 802213e:	4623      	mov	r3, r4
 8022140:	42ab      	cmp	r3, r5
 8022142:	d30a      	bcc.n	802215a <__exponent+0x5e>
 8022144:	f10d 0309 	add.w	r3, sp, #9
 8022148:	1a9b      	subs	r3, r3, r2
 802214a:	42ac      	cmp	r4, r5
 802214c:	bf88      	it	hi
 802214e:	2300      	movhi	r3, #0
 8022150:	3302      	adds	r3, #2
 8022152:	4403      	add	r3, r0
 8022154:	1a18      	subs	r0, r3, r0
 8022156:	b003      	add	sp, #12
 8022158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802215a:	f813 6b01 	ldrb.w	r6, [r3], #1
 802215e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8022162:	e7ed      	b.n	8022140 <__exponent+0x44>
 8022164:	2330      	movs	r3, #48	@ 0x30
 8022166:	3130      	adds	r1, #48	@ 0x30
 8022168:	7083      	strb	r3, [r0, #2]
 802216a:	70c1      	strb	r1, [r0, #3]
 802216c:	1d03      	adds	r3, r0, #4
 802216e:	e7f1      	b.n	8022154 <__exponent+0x58>

08022170 <_printf_float>:
 8022170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022174:	b08d      	sub	sp, #52	@ 0x34
 8022176:	460c      	mov	r4, r1
 8022178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802217c:	4616      	mov	r6, r2
 802217e:	461f      	mov	r7, r3
 8022180:	4605      	mov	r5, r0
 8022182:	f000 fce9 	bl	8022b58 <_localeconv_r>
 8022186:	f8d0 b000 	ldr.w	fp, [r0]
 802218a:	4658      	mov	r0, fp
 802218c:	f7de f8f8 	bl	8000380 <strlen>
 8022190:	2300      	movs	r3, #0
 8022192:	930a      	str	r3, [sp, #40]	@ 0x28
 8022194:	f8d8 3000 	ldr.w	r3, [r8]
 8022198:	f894 9018 	ldrb.w	r9, [r4, #24]
 802219c:	6822      	ldr	r2, [r4, #0]
 802219e:	9005      	str	r0, [sp, #20]
 80221a0:	3307      	adds	r3, #7
 80221a2:	f023 0307 	bic.w	r3, r3, #7
 80221a6:	f103 0108 	add.w	r1, r3, #8
 80221aa:	f8c8 1000 	str.w	r1, [r8]
 80221ae:	ed93 0b00 	vldr	d0, [r3]
 80221b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8022410 <_printf_float+0x2a0>
 80221b6:	eeb0 7bc0 	vabs.f64	d7, d0
 80221ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80221be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80221c6:	dd24      	ble.n	8022212 <_printf_float+0xa2>
 80221c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80221cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221d0:	d502      	bpl.n	80221d8 <_printf_float+0x68>
 80221d2:	232d      	movs	r3, #45	@ 0x2d
 80221d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80221d8:	498f      	ldr	r1, [pc, #572]	@ (8022418 <_printf_float+0x2a8>)
 80221da:	4b90      	ldr	r3, [pc, #576]	@ (802241c <_printf_float+0x2ac>)
 80221dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80221e0:	bf94      	ite	ls
 80221e2:	4688      	movls	r8, r1
 80221e4:	4698      	movhi	r8, r3
 80221e6:	f022 0204 	bic.w	r2, r2, #4
 80221ea:	2303      	movs	r3, #3
 80221ec:	6123      	str	r3, [r4, #16]
 80221ee:	6022      	str	r2, [r4, #0]
 80221f0:	f04f 0a00 	mov.w	sl, #0
 80221f4:	9700      	str	r7, [sp, #0]
 80221f6:	4633      	mov	r3, r6
 80221f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80221fa:	4621      	mov	r1, r4
 80221fc:	4628      	mov	r0, r5
 80221fe:	f000 f9d1 	bl	80225a4 <_printf_common>
 8022202:	3001      	adds	r0, #1
 8022204:	f040 8089 	bne.w	802231a <_printf_float+0x1aa>
 8022208:	f04f 30ff 	mov.w	r0, #4294967295
 802220c:	b00d      	add	sp, #52	@ 0x34
 802220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022212:	eeb4 0b40 	vcmp.f64	d0, d0
 8022216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802221a:	d709      	bvc.n	8022230 <_printf_float+0xc0>
 802221c:	ee10 3a90 	vmov	r3, s1
 8022220:	2b00      	cmp	r3, #0
 8022222:	bfbc      	itt	lt
 8022224:	232d      	movlt	r3, #45	@ 0x2d
 8022226:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802222a:	497d      	ldr	r1, [pc, #500]	@ (8022420 <_printf_float+0x2b0>)
 802222c:	4b7d      	ldr	r3, [pc, #500]	@ (8022424 <_printf_float+0x2b4>)
 802222e:	e7d5      	b.n	80221dc <_printf_float+0x6c>
 8022230:	6863      	ldr	r3, [r4, #4]
 8022232:	1c59      	adds	r1, r3, #1
 8022234:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8022238:	d139      	bne.n	80222ae <_printf_float+0x13e>
 802223a:	2306      	movs	r3, #6
 802223c:	6063      	str	r3, [r4, #4]
 802223e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8022242:	2300      	movs	r3, #0
 8022244:	6022      	str	r2, [r4, #0]
 8022246:	9303      	str	r3, [sp, #12]
 8022248:	ab0a      	add	r3, sp, #40	@ 0x28
 802224a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802224e:	ab09      	add	r3, sp, #36	@ 0x24
 8022250:	9300      	str	r3, [sp, #0]
 8022252:	6861      	ldr	r1, [r4, #4]
 8022254:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8022258:	4628      	mov	r0, r5
 802225a:	f7ff fefb 	bl	8022054 <__cvt>
 802225e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8022262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022264:	4680      	mov	r8, r0
 8022266:	d129      	bne.n	80222bc <_printf_float+0x14c>
 8022268:	1cc8      	adds	r0, r1, #3
 802226a:	db02      	blt.n	8022272 <_printf_float+0x102>
 802226c:	6863      	ldr	r3, [r4, #4]
 802226e:	4299      	cmp	r1, r3
 8022270:	dd41      	ble.n	80222f6 <_printf_float+0x186>
 8022272:	f1a9 0902 	sub.w	r9, r9, #2
 8022276:	fa5f f989 	uxtb.w	r9, r9
 802227a:	3901      	subs	r1, #1
 802227c:	464a      	mov	r2, r9
 802227e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8022282:	9109      	str	r1, [sp, #36]	@ 0x24
 8022284:	f7ff ff3a 	bl	80220fc <__exponent>
 8022288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802228a:	1813      	adds	r3, r2, r0
 802228c:	2a01      	cmp	r2, #1
 802228e:	4682      	mov	sl, r0
 8022290:	6123      	str	r3, [r4, #16]
 8022292:	dc02      	bgt.n	802229a <_printf_float+0x12a>
 8022294:	6822      	ldr	r2, [r4, #0]
 8022296:	07d2      	lsls	r2, r2, #31
 8022298:	d501      	bpl.n	802229e <_printf_float+0x12e>
 802229a:	3301      	adds	r3, #1
 802229c:	6123      	str	r3, [r4, #16]
 802229e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d0a6      	beq.n	80221f4 <_printf_float+0x84>
 80222a6:	232d      	movs	r3, #45	@ 0x2d
 80222a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80222ac:	e7a2      	b.n	80221f4 <_printf_float+0x84>
 80222ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80222b2:	d1c4      	bne.n	802223e <_printf_float+0xce>
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	d1c2      	bne.n	802223e <_printf_float+0xce>
 80222b8:	2301      	movs	r3, #1
 80222ba:	e7bf      	b.n	802223c <_printf_float+0xcc>
 80222bc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80222c0:	d9db      	bls.n	802227a <_printf_float+0x10a>
 80222c2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80222c6:	d118      	bne.n	80222fa <_printf_float+0x18a>
 80222c8:	2900      	cmp	r1, #0
 80222ca:	6863      	ldr	r3, [r4, #4]
 80222cc:	dd0b      	ble.n	80222e6 <_printf_float+0x176>
 80222ce:	6121      	str	r1, [r4, #16]
 80222d0:	b913      	cbnz	r3, 80222d8 <_printf_float+0x168>
 80222d2:	6822      	ldr	r2, [r4, #0]
 80222d4:	07d0      	lsls	r0, r2, #31
 80222d6:	d502      	bpl.n	80222de <_printf_float+0x16e>
 80222d8:	3301      	adds	r3, #1
 80222da:	440b      	add	r3, r1
 80222dc:	6123      	str	r3, [r4, #16]
 80222de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80222e0:	f04f 0a00 	mov.w	sl, #0
 80222e4:	e7db      	b.n	802229e <_printf_float+0x12e>
 80222e6:	b913      	cbnz	r3, 80222ee <_printf_float+0x17e>
 80222e8:	6822      	ldr	r2, [r4, #0]
 80222ea:	07d2      	lsls	r2, r2, #31
 80222ec:	d501      	bpl.n	80222f2 <_printf_float+0x182>
 80222ee:	3302      	adds	r3, #2
 80222f0:	e7f4      	b.n	80222dc <_printf_float+0x16c>
 80222f2:	2301      	movs	r3, #1
 80222f4:	e7f2      	b.n	80222dc <_printf_float+0x16c>
 80222f6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80222fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80222fc:	4299      	cmp	r1, r3
 80222fe:	db05      	blt.n	802230c <_printf_float+0x19c>
 8022300:	6823      	ldr	r3, [r4, #0]
 8022302:	6121      	str	r1, [r4, #16]
 8022304:	07d8      	lsls	r0, r3, #31
 8022306:	d5ea      	bpl.n	80222de <_printf_float+0x16e>
 8022308:	1c4b      	adds	r3, r1, #1
 802230a:	e7e7      	b.n	80222dc <_printf_float+0x16c>
 802230c:	2900      	cmp	r1, #0
 802230e:	bfd4      	ite	le
 8022310:	f1c1 0202 	rsble	r2, r1, #2
 8022314:	2201      	movgt	r2, #1
 8022316:	4413      	add	r3, r2
 8022318:	e7e0      	b.n	80222dc <_printf_float+0x16c>
 802231a:	6823      	ldr	r3, [r4, #0]
 802231c:	055a      	lsls	r2, r3, #21
 802231e:	d407      	bmi.n	8022330 <_printf_float+0x1c0>
 8022320:	6923      	ldr	r3, [r4, #16]
 8022322:	4642      	mov	r2, r8
 8022324:	4631      	mov	r1, r6
 8022326:	4628      	mov	r0, r5
 8022328:	47b8      	blx	r7
 802232a:	3001      	adds	r0, #1
 802232c:	d12a      	bne.n	8022384 <_printf_float+0x214>
 802232e:	e76b      	b.n	8022208 <_printf_float+0x98>
 8022330:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8022334:	f240 80e0 	bls.w	80224f8 <_printf_float+0x388>
 8022338:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802233c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022344:	d133      	bne.n	80223ae <_printf_float+0x23e>
 8022346:	4a38      	ldr	r2, [pc, #224]	@ (8022428 <_printf_float+0x2b8>)
 8022348:	2301      	movs	r3, #1
 802234a:	4631      	mov	r1, r6
 802234c:	4628      	mov	r0, r5
 802234e:	47b8      	blx	r7
 8022350:	3001      	adds	r0, #1
 8022352:	f43f af59 	beq.w	8022208 <_printf_float+0x98>
 8022356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802235a:	4543      	cmp	r3, r8
 802235c:	db02      	blt.n	8022364 <_printf_float+0x1f4>
 802235e:	6823      	ldr	r3, [r4, #0]
 8022360:	07d8      	lsls	r0, r3, #31
 8022362:	d50f      	bpl.n	8022384 <_printf_float+0x214>
 8022364:	9b05      	ldr	r3, [sp, #20]
 8022366:	465a      	mov	r2, fp
 8022368:	4631      	mov	r1, r6
 802236a:	4628      	mov	r0, r5
 802236c:	47b8      	blx	r7
 802236e:	3001      	adds	r0, #1
 8022370:	f43f af4a 	beq.w	8022208 <_printf_float+0x98>
 8022374:	f04f 0900 	mov.w	r9, #0
 8022378:	f108 38ff 	add.w	r8, r8, #4294967295
 802237c:	f104 0a1a 	add.w	sl, r4, #26
 8022380:	45c8      	cmp	r8, r9
 8022382:	dc09      	bgt.n	8022398 <_printf_float+0x228>
 8022384:	6823      	ldr	r3, [r4, #0]
 8022386:	079b      	lsls	r3, r3, #30
 8022388:	f100 8107 	bmi.w	802259a <_printf_float+0x42a>
 802238c:	68e0      	ldr	r0, [r4, #12]
 802238e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022390:	4298      	cmp	r0, r3
 8022392:	bfb8      	it	lt
 8022394:	4618      	movlt	r0, r3
 8022396:	e739      	b.n	802220c <_printf_float+0x9c>
 8022398:	2301      	movs	r3, #1
 802239a:	4652      	mov	r2, sl
 802239c:	4631      	mov	r1, r6
 802239e:	4628      	mov	r0, r5
 80223a0:	47b8      	blx	r7
 80223a2:	3001      	adds	r0, #1
 80223a4:	f43f af30 	beq.w	8022208 <_printf_float+0x98>
 80223a8:	f109 0901 	add.w	r9, r9, #1
 80223ac:	e7e8      	b.n	8022380 <_printf_float+0x210>
 80223ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	dc3b      	bgt.n	802242c <_printf_float+0x2bc>
 80223b4:	4a1c      	ldr	r2, [pc, #112]	@ (8022428 <_printf_float+0x2b8>)
 80223b6:	2301      	movs	r3, #1
 80223b8:	4631      	mov	r1, r6
 80223ba:	4628      	mov	r0, r5
 80223bc:	47b8      	blx	r7
 80223be:	3001      	adds	r0, #1
 80223c0:	f43f af22 	beq.w	8022208 <_printf_float+0x98>
 80223c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80223c8:	ea59 0303 	orrs.w	r3, r9, r3
 80223cc:	d102      	bne.n	80223d4 <_printf_float+0x264>
 80223ce:	6823      	ldr	r3, [r4, #0]
 80223d0:	07d9      	lsls	r1, r3, #31
 80223d2:	d5d7      	bpl.n	8022384 <_printf_float+0x214>
 80223d4:	9b05      	ldr	r3, [sp, #20]
 80223d6:	465a      	mov	r2, fp
 80223d8:	4631      	mov	r1, r6
 80223da:	4628      	mov	r0, r5
 80223dc:	47b8      	blx	r7
 80223de:	3001      	adds	r0, #1
 80223e0:	f43f af12 	beq.w	8022208 <_printf_float+0x98>
 80223e4:	f04f 0a00 	mov.w	sl, #0
 80223e8:	f104 0b1a 	add.w	fp, r4, #26
 80223ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80223ee:	425b      	negs	r3, r3
 80223f0:	4553      	cmp	r3, sl
 80223f2:	dc01      	bgt.n	80223f8 <_printf_float+0x288>
 80223f4:	464b      	mov	r3, r9
 80223f6:	e794      	b.n	8022322 <_printf_float+0x1b2>
 80223f8:	2301      	movs	r3, #1
 80223fa:	465a      	mov	r2, fp
 80223fc:	4631      	mov	r1, r6
 80223fe:	4628      	mov	r0, r5
 8022400:	47b8      	blx	r7
 8022402:	3001      	adds	r0, #1
 8022404:	f43f af00 	beq.w	8022208 <_printf_float+0x98>
 8022408:	f10a 0a01 	add.w	sl, sl, #1
 802240c:	e7ee      	b.n	80223ec <_printf_float+0x27c>
 802240e:	bf00      	nop
 8022410:	ffffffff 	.word	0xffffffff
 8022414:	7fefffff 	.word	0x7fefffff
 8022418:	08025cc4 	.word	0x08025cc4
 802241c:	08025cc8 	.word	0x08025cc8
 8022420:	08025ccc 	.word	0x08025ccc
 8022424:	08025cd0 	.word	0x08025cd0
 8022428:	08025cd4 	.word	0x08025cd4
 802242c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802242e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8022432:	4553      	cmp	r3, sl
 8022434:	bfa8      	it	ge
 8022436:	4653      	movge	r3, sl
 8022438:	2b00      	cmp	r3, #0
 802243a:	4699      	mov	r9, r3
 802243c:	dc37      	bgt.n	80224ae <_printf_float+0x33e>
 802243e:	2300      	movs	r3, #0
 8022440:	9307      	str	r3, [sp, #28]
 8022442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022446:	f104 021a 	add.w	r2, r4, #26
 802244a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802244c:	9907      	ldr	r1, [sp, #28]
 802244e:	9306      	str	r3, [sp, #24]
 8022450:	eba3 0309 	sub.w	r3, r3, r9
 8022454:	428b      	cmp	r3, r1
 8022456:	dc31      	bgt.n	80224bc <_printf_float+0x34c>
 8022458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802245a:	459a      	cmp	sl, r3
 802245c:	dc3b      	bgt.n	80224d6 <_printf_float+0x366>
 802245e:	6823      	ldr	r3, [r4, #0]
 8022460:	07da      	lsls	r2, r3, #31
 8022462:	d438      	bmi.n	80224d6 <_printf_float+0x366>
 8022464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022466:	ebaa 0903 	sub.w	r9, sl, r3
 802246a:	9b06      	ldr	r3, [sp, #24]
 802246c:	ebaa 0303 	sub.w	r3, sl, r3
 8022470:	4599      	cmp	r9, r3
 8022472:	bfa8      	it	ge
 8022474:	4699      	movge	r9, r3
 8022476:	f1b9 0f00 	cmp.w	r9, #0
 802247a:	dc34      	bgt.n	80224e6 <_printf_float+0x376>
 802247c:	f04f 0800 	mov.w	r8, #0
 8022480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022484:	f104 0b1a 	add.w	fp, r4, #26
 8022488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802248a:	ebaa 0303 	sub.w	r3, sl, r3
 802248e:	eba3 0309 	sub.w	r3, r3, r9
 8022492:	4543      	cmp	r3, r8
 8022494:	f77f af76 	ble.w	8022384 <_printf_float+0x214>
 8022498:	2301      	movs	r3, #1
 802249a:	465a      	mov	r2, fp
 802249c:	4631      	mov	r1, r6
 802249e:	4628      	mov	r0, r5
 80224a0:	47b8      	blx	r7
 80224a2:	3001      	adds	r0, #1
 80224a4:	f43f aeb0 	beq.w	8022208 <_printf_float+0x98>
 80224a8:	f108 0801 	add.w	r8, r8, #1
 80224ac:	e7ec      	b.n	8022488 <_printf_float+0x318>
 80224ae:	4642      	mov	r2, r8
 80224b0:	4631      	mov	r1, r6
 80224b2:	4628      	mov	r0, r5
 80224b4:	47b8      	blx	r7
 80224b6:	3001      	adds	r0, #1
 80224b8:	d1c1      	bne.n	802243e <_printf_float+0x2ce>
 80224ba:	e6a5      	b.n	8022208 <_printf_float+0x98>
 80224bc:	2301      	movs	r3, #1
 80224be:	4631      	mov	r1, r6
 80224c0:	4628      	mov	r0, r5
 80224c2:	9206      	str	r2, [sp, #24]
 80224c4:	47b8      	blx	r7
 80224c6:	3001      	adds	r0, #1
 80224c8:	f43f ae9e 	beq.w	8022208 <_printf_float+0x98>
 80224cc:	9b07      	ldr	r3, [sp, #28]
 80224ce:	9a06      	ldr	r2, [sp, #24]
 80224d0:	3301      	adds	r3, #1
 80224d2:	9307      	str	r3, [sp, #28]
 80224d4:	e7b9      	b.n	802244a <_printf_float+0x2da>
 80224d6:	9b05      	ldr	r3, [sp, #20]
 80224d8:	465a      	mov	r2, fp
 80224da:	4631      	mov	r1, r6
 80224dc:	4628      	mov	r0, r5
 80224de:	47b8      	blx	r7
 80224e0:	3001      	adds	r0, #1
 80224e2:	d1bf      	bne.n	8022464 <_printf_float+0x2f4>
 80224e4:	e690      	b.n	8022208 <_printf_float+0x98>
 80224e6:	9a06      	ldr	r2, [sp, #24]
 80224e8:	464b      	mov	r3, r9
 80224ea:	4442      	add	r2, r8
 80224ec:	4631      	mov	r1, r6
 80224ee:	4628      	mov	r0, r5
 80224f0:	47b8      	blx	r7
 80224f2:	3001      	adds	r0, #1
 80224f4:	d1c2      	bne.n	802247c <_printf_float+0x30c>
 80224f6:	e687      	b.n	8022208 <_printf_float+0x98>
 80224f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80224fc:	f1b9 0f01 	cmp.w	r9, #1
 8022500:	dc01      	bgt.n	8022506 <_printf_float+0x396>
 8022502:	07db      	lsls	r3, r3, #31
 8022504:	d536      	bpl.n	8022574 <_printf_float+0x404>
 8022506:	2301      	movs	r3, #1
 8022508:	4642      	mov	r2, r8
 802250a:	4631      	mov	r1, r6
 802250c:	4628      	mov	r0, r5
 802250e:	47b8      	blx	r7
 8022510:	3001      	adds	r0, #1
 8022512:	f43f ae79 	beq.w	8022208 <_printf_float+0x98>
 8022516:	9b05      	ldr	r3, [sp, #20]
 8022518:	465a      	mov	r2, fp
 802251a:	4631      	mov	r1, r6
 802251c:	4628      	mov	r0, r5
 802251e:	47b8      	blx	r7
 8022520:	3001      	adds	r0, #1
 8022522:	f43f ae71 	beq.w	8022208 <_printf_float+0x98>
 8022526:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802252a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022532:	f109 39ff 	add.w	r9, r9, #4294967295
 8022536:	d018      	beq.n	802256a <_printf_float+0x3fa>
 8022538:	464b      	mov	r3, r9
 802253a:	f108 0201 	add.w	r2, r8, #1
 802253e:	4631      	mov	r1, r6
 8022540:	4628      	mov	r0, r5
 8022542:	47b8      	blx	r7
 8022544:	3001      	adds	r0, #1
 8022546:	d10c      	bne.n	8022562 <_printf_float+0x3f2>
 8022548:	e65e      	b.n	8022208 <_printf_float+0x98>
 802254a:	2301      	movs	r3, #1
 802254c:	465a      	mov	r2, fp
 802254e:	4631      	mov	r1, r6
 8022550:	4628      	mov	r0, r5
 8022552:	47b8      	blx	r7
 8022554:	3001      	adds	r0, #1
 8022556:	f43f ae57 	beq.w	8022208 <_printf_float+0x98>
 802255a:	f108 0801 	add.w	r8, r8, #1
 802255e:	45c8      	cmp	r8, r9
 8022560:	dbf3      	blt.n	802254a <_printf_float+0x3da>
 8022562:	4653      	mov	r3, sl
 8022564:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8022568:	e6dc      	b.n	8022324 <_printf_float+0x1b4>
 802256a:	f04f 0800 	mov.w	r8, #0
 802256e:	f104 0b1a 	add.w	fp, r4, #26
 8022572:	e7f4      	b.n	802255e <_printf_float+0x3ee>
 8022574:	2301      	movs	r3, #1
 8022576:	4642      	mov	r2, r8
 8022578:	e7e1      	b.n	802253e <_printf_float+0x3ce>
 802257a:	2301      	movs	r3, #1
 802257c:	464a      	mov	r2, r9
 802257e:	4631      	mov	r1, r6
 8022580:	4628      	mov	r0, r5
 8022582:	47b8      	blx	r7
 8022584:	3001      	adds	r0, #1
 8022586:	f43f ae3f 	beq.w	8022208 <_printf_float+0x98>
 802258a:	f108 0801 	add.w	r8, r8, #1
 802258e:	68e3      	ldr	r3, [r4, #12]
 8022590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022592:	1a5b      	subs	r3, r3, r1
 8022594:	4543      	cmp	r3, r8
 8022596:	dcf0      	bgt.n	802257a <_printf_float+0x40a>
 8022598:	e6f8      	b.n	802238c <_printf_float+0x21c>
 802259a:	f04f 0800 	mov.w	r8, #0
 802259e:	f104 0919 	add.w	r9, r4, #25
 80225a2:	e7f4      	b.n	802258e <_printf_float+0x41e>

080225a4 <_printf_common>:
 80225a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225a8:	4616      	mov	r6, r2
 80225aa:	4698      	mov	r8, r3
 80225ac:	688a      	ldr	r2, [r1, #8]
 80225ae:	690b      	ldr	r3, [r1, #16]
 80225b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80225b4:	4293      	cmp	r3, r2
 80225b6:	bfb8      	it	lt
 80225b8:	4613      	movlt	r3, r2
 80225ba:	6033      	str	r3, [r6, #0]
 80225bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80225c0:	4607      	mov	r7, r0
 80225c2:	460c      	mov	r4, r1
 80225c4:	b10a      	cbz	r2, 80225ca <_printf_common+0x26>
 80225c6:	3301      	adds	r3, #1
 80225c8:	6033      	str	r3, [r6, #0]
 80225ca:	6823      	ldr	r3, [r4, #0]
 80225cc:	0699      	lsls	r1, r3, #26
 80225ce:	bf42      	ittt	mi
 80225d0:	6833      	ldrmi	r3, [r6, #0]
 80225d2:	3302      	addmi	r3, #2
 80225d4:	6033      	strmi	r3, [r6, #0]
 80225d6:	6825      	ldr	r5, [r4, #0]
 80225d8:	f015 0506 	ands.w	r5, r5, #6
 80225dc:	d106      	bne.n	80225ec <_printf_common+0x48>
 80225de:	f104 0a19 	add.w	sl, r4, #25
 80225e2:	68e3      	ldr	r3, [r4, #12]
 80225e4:	6832      	ldr	r2, [r6, #0]
 80225e6:	1a9b      	subs	r3, r3, r2
 80225e8:	42ab      	cmp	r3, r5
 80225ea:	dc26      	bgt.n	802263a <_printf_common+0x96>
 80225ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80225f0:	6822      	ldr	r2, [r4, #0]
 80225f2:	3b00      	subs	r3, #0
 80225f4:	bf18      	it	ne
 80225f6:	2301      	movne	r3, #1
 80225f8:	0692      	lsls	r2, r2, #26
 80225fa:	d42b      	bmi.n	8022654 <_printf_common+0xb0>
 80225fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022600:	4641      	mov	r1, r8
 8022602:	4638      	mov	r0, r7
 8022604:	47c8      	blx	r9
 8022606:	3001      	adds	r0, #1
 8022608:	d01e      	beq.n	8022648 <_printf_common+0xa4>
 802260a:	6823      	ldr	r3, [r4, #0]
 802260c:	6922      	ldr	r2, [r4, #16]
 802260e:	f003 0306 	and.w	r3, r3, #6
 8022612:	2b04      	cmp	r3, #4
 8022614:	bf02      	ittt	eq
 8022616:	68e5      	ldreq	r5, [r4, #12]
 8022618:	6833      	ldreq	r3, [r6, #0]
 802261a:	1aed      	subeq	r5, r5, r3
 802261c:	68a3      	ldr	r3, [r4, #8]
 802261e:	bf0c      	ite	eq
 8022620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022624:	2500      	movne	r5, #0
 8022626:	4293      	cmp	r3, r2
 8022628:	bfc4      	itt	gt
 802262a:	1a9b      	subgt	r3, r3, r2
 802262c:	18ed      	addgt	r5, r5, r3
 802262e:	2600      	movs	r6, #0
 8022630:	341a      	adds	r4, #26
 8022632:	42b5      	cmp	r5, r6
 8022634:	d11a      	bne.n	802266c <_printf_common+0xc8>
 8022636:	2000      	movs	r0, #0
 8022638:	e008      	b.n	802264c <_printf_common+0xa8>
 802263a:	2301      	movs	r3, #1
 802263c:	4652      	mov	r2, sl
 802263e:	4641      	mov	r1, r8
 8022640:	4638      	mov	r0, r7
 8022642:	47c8      	blx	r9
 8022644:	3001      	adds	r0, #1
 8022646:	d103      	bne.n	8022650 <_printf_common+0xac>
 8022648:	f04f 30ff 	mov.w	r0, #4294967295
 802264c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022650:	3501      	adds	r5, #1
 8022652:	e7c6      	b.n	80225e2 <_printf_common+0x3e>
 8022654:	18e1      	adds	r1, r4, r3
 8022656:	1c5a      	adds	r2, r3, #1
 8022658:	2030      	movs	r0, #48	@ 0x30
 802265a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802265e:	4422      	add	r2, r4
 8022660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022668:	3302      	adds	r3, #2
 802266a:	e7c7      	b.n	80225fc <_printf_common+0x58>
 802266c:	2301      	movs	r3, #1
 802266e:	4622      	mov	r2, r4
 8022670:	4641      	mov	r1, r8
 8022672:	4638      	mov	r0, r7
 8022674:	47c8      	blx	r9
 8022676:	3001      	adds	r0, #1
 8022678:	d0e6      	beq.n	8022648 <_printf_common+0xa4>
 802267a:	3601      	adds	r6, #1
 802267c:	e7d9      	b.n	8022632 <_printf_common+0x8e>
	...

08022680 <_printf_i>:
 8022680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022684:	7e0f      	ldrb	r7, [r1, #24]
 8022686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022688:	2f78      	cmp	r7, #120	@ 0x78
 802268a:	4691      	mov	r9, r2
 802268c:	4680      	mov	r8, r0
 802268e:	460c      	mov	r4, r1
 8022690:	469a      	mov	sl, r3
 8022692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022696:	d807      	bhi.n	80226a8 <_printf_i+0x28>
 8022698:	2f62      	cmp	r7, #98	@ 0x62
 802269a:	d80a      	bhi.n	80226b2 <_printf_i+0x32>
 802269c:	2f00      	cmp	r7, #0
 802269e:	f000 80d2 	beq.w	8022846 <_printf_i+0x1c6>
 80226a2:	2f58      	cmp	r7, #88	@ 0x58
 80226a4:	f000 80b9 	beq.w	802281a <_printf_i+0x19a>
 80226a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80226ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80226b0:	e03a      	b.n	8022728 <_printf_i+0xa8>
 80226b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80226b6:	2b15      	cmp	r3, #21
 80226b8:	d8f6      	bhi.n	80226a8 <_printf_i+0x28>
 80226ba:	a101      	add	r1, pc, #4	@ (adr r1, 80226c0 <_printf_i+0x40>)
 80226bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80226c0:	08022719 	.word	0x08022719
 80226c4:	0802272d 	.word	0x0802272d
 80226c8:	080226a9 	.word	0x080226a9
 80226cc:	080226a9 	.word	0x080226a9
 80226d0:	080226a9 	.word	0x080226a9
 80226d4:	080226a9 	.word	0x080226a9
 80226d8:	0802272d 	.word	0x0802272d
 80226dc:	080226a9 	.word	0x080226a9
 80226e0:	080226a9 	.word	0x080226a9
 80226e4:	080226a9 	.word	0x080226a9
 80226e8:	080226a9 	.word	0x080226a9
 80226ec:	0802282d 	.word	0x0802282d
 80226f0:	08022757 	.word	0x08022757
 80226f4:	080227e7 	.word	0x080227e7
 80226f8:	080226a9 	.word	0x080226a9
 80226fc:	080226a9 	.word	0x080226a9
 8022700:	0802284f 	.word	0x0802284f
 8022704:	080226a9 	.word	0x080226a9
 8022708:	08022757 	.word	0x08022757
 802270c:	080226a9 	.word	0x080226a9
 8022710:	080226a9 	.word	0x080226a9
 8022714:	080227ef 	.word	0x080227ef
 8022718:	6833      	ldr	r3, [r6, #0]
 802271a:	1d1a      	adds	r2, r3, #4
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	6032      	str	r2, [r6, #0]
 8022720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022728:	2301      	movs	r3, #1
 802272a:	e09d      	b.n	8022868 <_printf_i+0x1e8>
 802272c:	6833      	ldr	r3, [r6, #0]
 802272e:	6820      	ldr	r0, [r4, #0]
 8022730:	1d19      	adds	r1, r3, #4
 8022732:	6031      	str	r1, [r6, #0]
 8022734:	0606      	lsls	r6, r0, #24
 8022736:	d501      	bpl.n	802273c <_printf_i+0xbc>
 8022738:	681d      	ldr	r5, [r3, #0]
 802273a:	e003      	b.n	8022744 <_printf_i+0xc4>
 802273c:	0645      	lsls	r5, r0, #25
 802273e:	d5fb      	bpl.n	8022738 <_printf_i+0xb8>
 8022740:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022744:	2d00      	cmp	r5, #0
 8022746:	da03      	bge.n	8022750 <_printf_i+0xd0>
 8022748:	232d      	movs	r3, #45	@ 0x2d
 802274a:	426d      	negs	r5, r5
 802274c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022750:	4859      	ldr	r0, [pc, #356]	@ (80228b8 <_printf_i+0x238>)
 8022752:	230a      	movs	r3, #10
 8022754:	e011      	b.n	802277a <_printf_i+0xfa>
 8022756:	6821      	ldr	r1, [r4, #0]
 8022758:	6833      	ldr	r3, [r6, #0]
 802275a:	0608      	lsls	r0, r1, #24
 802275c:	f853 5b04 	ldr.w	r5, [r3], #4
 8022760:	d402      	bmi.n	8022768 <_printf_i+0xe8>
 8022762:	0649      	lsls	r1, r1, #25
 8022764:	bf48      	it	mi
 8022766:	b2ad      	uxthmi	r5, r5
 8022768:	2f6f      	cmp	r7, #111	@ 0x6f
 802276a:	4853      	ldr	r0, [pc, #332]	@ (80228b8 <_printf_i+0x238>)
 802276c:	6033      	str	r3, [r6, #0]
 802276e:	bf14      	ite	ne
 8022770:	230a      	movne	r3, #10
 8022772:	2308      	moveq	r3, #8
 8022774:	2100      	movs	r1, #0
 8022776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802277a:	6866      	ldr	r6, [r4, #4]
 802277c:	60a6      	str	r6, [r4, #8]
 802277e:	2e00      	cmp	r6, #0
 8022780:	bfa2      	ittt	ge
 8022782:	6821      	ldrge	r1, [r4, #0]
 8022784:	f021 0104 	bicge.w	r1, r1, #4
 8022788:	6021      	strge	r1, [r4, #0]
 802278a:	b90d      	cbnz	r5, 8022790 <_printf_i+0x110>
 802278c:	2e00      	cmp	r6, #0
 802278e:	d04b      	beq.n	8022828 <_printf_i+0x1a8>
 8022790:	4616      	mov	r6, r2
 8022792:	fbb5 f1f3 	udiv	r1, r5, r3
 8022796:	fb03 5711 	mls	r7, r3, r1, r5
 802279a:	5dc7      	ldrb	r7, [r0, r7]
 802279c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80227a0:	462f      	mov	r7, r5
 80227a2:	42bb      	cmp	r3, r7
 80227a4:	460d      	mov	r5, r1
 80227a6:	d9f4      	bls.n	8022792 <_printf_i+0x112>
 80227a8:	2b08      	cmp	r3, #8
 80227aa:	d10b      	bne.n	80227c4 <_printf_i+0x144>
 80227ac:	6823      	ldr	r3, [r4, #0]
 80227ae:	07df      	lsls	r7, r3, #31
 80227b0:	d508      	bpl.n	80227c4 <_printf_i+0x144>
 80227b2:	6923      	ldr	r3, [r4, #16]
 80227b4:	6861      	ldr	r1, [r4, #4]
 80227b6:	4299      	cmp	r1, r3
 80227b8:	bfde      	ittt	le
 80227ba:	2330      	movle	r3, #48	@ 0x30
 80227bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80227c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80227c4:	1b92      	subs	r2, r2, r6
 80227c6:	6122      	str	r2, [r4, #16]
 80227c8:	f8cd a000 	str.w	sl, [sp]
 80227cc:	464b      	mov	r3, r9
 80227ce:	aa03      	add	r2, sp, #12
 80227d0:	4621      	mov	r1, r4
 80227d2:	4640      	mov	r0, r8
 80227d4:	f7ff fee6 	bl	80225a4 <_printf_common>
 80227d8:	3001      	adds	r0, #1
 80227da:	d14a      	bne.n	8022872 <_printf_i+0x1f2>
 80227dc:	f04f 30ff 	mov.w	r0, #4294967295
 80227e0:	b004      	add	sp, #16
 80227e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227e6:	6823      	ldr	r3, [r4, #0]
 80227e8:	f043 0320 	orr.w	r3, r3, #32
 80227ec:	6023      	str	r3, [r4, #0]
 80227ee:	4833      	ldr	r0, [pc, #204]	@ (80228bc <_printf_i+0x23c>)
 80227f0:	2778      	movs	r7, #120	@ 0x78
 80227f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80227f6:	6823      	ldr	r3, [r4, #0]
 80227f8:	6831      	ldr	r1, [r6, #0]
 80227fa:	061f      	lsls	r7, r3, #24
 80227fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8022800:	d402      	bmi.n	8022808 <_printf_i+0x188>
 8022802:	065f      	lsls	r7, r3, #25
 8022804:	bf48      	it	mi
 8022806:	b2ad      	uxthmi	r5, r5
 8022808:	6031      	str	r1, [r6, #0]
 802280a:	07d9      	lsls	r1, r3, #31
 802280c:	bf44      	itt	mi
 802280e:	f043 0320 	orrmi.w	r3, r3, #32
 8022812:	6023      	strmi	r3, [r4, #0]
 8022814:	b11d      	cbz	r5, 802281e <_printf_i+0x19e>
 8022816:	2310      	movs	r3, #16
 8022818:	e7ac      	b.n	8022774 <_printf_i+0xf4>
 802281a:	4827      	ldr	r0, [pc, #156]	@ (80228b8 <_printf_i+0x238>)
 802281c:	e7e9      	b.n	80227f2 <_printf_i+0x172>
 802281e:	6823      	ldr	r3, [r4, #0]
 8022820:	f023 0320 	bic.w	r3, r3, #32
 8022824:	6023      	str	r3, [r4, #0]
 8022826:	e7f6      	b.n	8022816 <_printf_i+0x196>
 8022828:	4616      	mov	r6, r2
 802282a:	e7bd      	b.n	80227a8 <_printf_i+0x128>
 802282c:	6833      	ldr	r3, [r6, #0]
 802282e:	6825      	ldr	r5, [r4, #0]
 8022830:	6961      	ldr	r1, [r4, #20]
 8022832:	1d18      	adds	r0, r3, #4
 8022834:	6030      	str	r0, [r6, #0]
 8022836:	062e      	lsls	r6, r5, #24
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	d501      	bpl.n	8022840 <_printf_i+0x1c0>
 802283c:	6019      	str	r1, [r3, #0]
 802283e:	e002      	b.n	8022846 <_printf_i+0x1c6>
 8022840:	0668      	lsls	r0, r5, #25
 8022842:	d5fb      	bpl.n	802283c <_printf_i+0x1bc>
 8022844:	8019      	strh	r1, [r3, #0]
 8022846:	2300      	movs	r3, #0
 8022848:	6123      	str	r3, [r4, #16]
 802284a:	4616      	mov	r6, r2
 802284c:	e7bc      	b.n	80227c8 <_printf_i+0x148>
 802284e:	6833      	ldr	r3, [r6, #0]
 8022850:	1d1a      	adds	r2, r3, #4
 8022852:	6032      	str	r2, [r6, #0]
 8022854:	681e      	ldr	r6, [r3, #0]
 8022856:	6862      	ldr	r2, [r4, #4]
 8022858:	2100      	movs	r1, #0
 802285a:	4630      	mov	r0, r6
 802285c:	f7dd fd40 	bl	80002e0 <memchr>
 8022860:	b108      	cbz	r0, 8022866 <_printf_i+0x1e6>
 8022862:	1b80      	subs	r0, r0, r6
 8022864:	6060      	str	r0, [r4, #4]
 8022866:	6863      	ldr	r3, [r4, #4]
 8022868:	6123      	str	r3, [r4, #16]
 802286a:	2300      	movs	r3, #0
 802286c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022870:	e7aa      	b.n	80227c8 <_printf_i+0x148>
 8022872:	6923      	ldr	r3, [r4, #16]
 8022874:	4632      	mov	r2, r6
 8022876:	4649      	mov	r1, r9
 8022878:	4640      	mov	r0, r8
 802287a:	47d0      	blx	sl
 802287c:	3001      	adds	r0, #1
 802287e:	d0ad      	beq.n	80227dc <_printf_i+0x15c>
 8022880:	6823      	ldr	r3, [r4, #0]
 8022882:	079b      	lsls	r3, r3, #30
 8022884:	d413      	bmi.n	80228ae <_printf_i+0x22e>
 8022886:	68e0      	ldr	r0, [r4, #12]
 8022888:	9b03      	ldr	r3, [sp, #12]
 802288a:	4298      	cmp	r0, r3
 802288c:	bfb8      	it	lt
 802288e:	4618      	movlt	r0, r3
 8022890:	e7a6      	b.n	80227e0 <_printf_i+0x160>
 8022892:	2301      	movs	r3, #1
 8022894:	4632      	mov	r2, r6
 8022896:	4649      	mov	r1, r9
 8022898:	4640      	mov	r0, r8
 802289a:	47d0      	blx	sl
 802289c:	3001      	adds	r0, #1
 802289e:	d09d      	beq.n	80227dc <_printf_i+0x15c>
 80228a0:	3501      	adds	r5, #1
 80228a2:	68e3      	ldr	r3, [r4, #12]
 80228a4:	9903      	ldr	r1, [sp, #12]
 80228a6:	1a5b      	subs	r3, r3, r1
 80228a8:	42ab      	cmp	r3, r5
 80228aa:	dcf2      	bgt.n	8022892 <_printf_i+0x212>
 80228ac:	e7eb      	b.n	8022886 <_printf_i+0x206>
 80228ae:	2500      	movs	r5, #0
 80228b0:	f104 0619 	add.w	r6, r4, #25
 80228b4:	e7f5      	b.n	80228a2 <_printf_i+0x222>
 80228b6:	bf00      	nop
 80228b8:	08025cd6 	.word	0x08025cd6
 80228bc:	08025ce7 	.word	0x08025ce7

080228c0 <std>:
 80228c0:	2300      	movs	r3, #0
 80228c2:	b510      	push	{r4, lr}
 80228c4:	4604      	mov	r4, r0
 80228c6:	e9c0 3300 	strd	r3, r3, [r0]
 80228ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80228ce:	6083      	str	r3, [r0, #8]
 80228d0:	8181      	strh	r1, [r0, #12]
 80228d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80228d4:	81c2      	strh	r2, [r0, #14]
 80228d6:	6183      	str	r3, [r0, #24]
 80228d8:	4619      	mov	r1, r3
 80228da:	2208      	movs	r2, #8
 80228dc:	305c      	adds	r0, #92	@ 0x5c
 80228de:	f000 f920 	bl	8022b22 <memset>
 80228e2:	4b0d      	ldr	r3, [pc, #52]	@ (8022918 <std+0x58>)
 80228e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80228e6:	4b0d      	ldr	r3, [pc, #52]	@ (802291c <std+0x5c>)
 80228e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80228ea:	4b0d      	ldr	r3, [pc, #52]	@ (8022920 <std+0x60>)
 80228ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80228ee:	4b0d      	ldr	r3, [pc, #52]	@ (8022924 <std+0x64>)
 80228f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80228f2:	4b0d      	ldr	r3, [pc, #52]	@ (8022928 <std+0x68>)
 80228f4:	6224      	str	r4, [r4, #32]
 80228f6:	429c      	cmp	r4, r3
 80228f8:	d006      	beq.n	8022908 <std+0x48>
 80228fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80228fe:	4294      	cmp	r4, r2
 8022900:	d002      	beq.n	8022908 <std+0x48>
 8022902:	33d0      	adds	r3, #208	@ 0xd0
 8022904:	429c      	cmp	r4, r3
 8022906:	d105      	bne.n	8022914 <std+0x54>
 8022908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022910:	f000 b9ec 	b.w	8022cec <__retarget_lock_init_recursive>
 8022914:	bd10      	pop	{r4, pc}
 8022916:	bf00      	nop
 8022918:	08022a69 	.word	0x08022a69
 802291c:	08022a8b 	.word	0x08022a8b
 8022920:	08022ac3 	.word	0x08022ac3
 8022924:	08022ae7 	.word	0x08022ae7
 8022928:	240289f4 	.word	0x240289f4

0802292c <stdio_exit_handler>:
 802292c:	4a02      	ldr	r2, [pc, #8]	@ (8022938 <stdio_exit_handler+0xc>)
 802292e:	4903      	ldr	r1, [pc, #12]	@ (802293c <stdio_exit_handler+0x10>)
 8022930:	4803      	ldr	r0, [pc, #12]	@ (8022940 <stdio_exit_handler+0x14>)
 8022932:	f000 b87b 	b.w	8022a2c <_fwalk_sglue>
 8022936:	bf00      	nop
 8022938:	24000040 	.word	0x24000040
 802293c:	0802456d 	.word	0x0802456d
 8022940:	24000050 	.word	0x24000050

08022944 <cleanup_stdio>:
 8022944:	6841      	ldr	r1, [r0, #4]
 8022946:	4b0c      	ldr	r3, [pc, #48]	@ (8022978 <cleanup_stdio+0x34>)
 8022948:	4299      	cmp	r1, r3
 802294a:	b510      	push	{r4, lr}
 802294c:	4604      	mov	r4, r0
 802294e:	d001      	beq.n	8022954 <cleanup_stdio+0x10>
 8022950:	f001 fe0c 	bl	802456c <_fflush_r>
 8022954:	68a1      	ldr	r1, [r4, #8]
 8022956:	4b09      	ldr	r3, [pc, #36]	@ (802297c <cleanup_stdio+0x38>)
 8022958:	4299      	cmp	r1, r3
 802295a:	d002      	beq.n	8022962 <cleanup_stdio+0x1e>
 802295c:	4620      	mov	r0, r4
 802295e:	f001 fe05 	bl	802456c <_fflush_r>
 8022962:	68e1      	ldr	r1, [r4, #12]
 8022964:	4b06      	ldr	r3, [pc, #24]	@ (8022980 <cleanup_stdio+0x3c>)
 8022966:	4299      	cmp	r1, r3
 8022968:	d004      	beq.n	8022974 <cleanup_stdio+0x30>
 802296a:	4620      	mov	r0, r4
 802296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022970:	f001 bdfc 	b.w	802456c <_fflush_r>
 8022974:	bd10      	pop	{r4, pc}
 8022976:	bf00      	nop
 8022978:	240289f4 	.word	0x240289f4
 802297c:	24028a5c 	.word	0x24028a5c
 8022980:	24028ac4 	.word	0x24028ac4

08022984 <global_stdio_init.part.0>:
 8022984:	b510      	push	{r4, lr}
 8022986:	4b0b      	ldr	r3, [pc, #44]	@ (80229b4 <global_stdio_init.part.0+0x30>)
 8022988:	4c0b      	ldr	r4, [pc, #44]	@ (80229b8 <global_stdio_init.part.0+0x34>)
 802298a:	4a0c      	ldr	r2, [pc, #48]	@ (80229bc <global_stdio_init.part.0+0x38>)
 802298c:	601a      	str	r2, [r3, #0]
 802298e:	4620      	mov	r0, r4
 8022990:	2200      	movs	r2, #0
 8022992:	2104      	movs	r1, #4
 8022994:	f7ff ff94 	bl	80228c0 <std>
 8022998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802299c:	2201      	movs	r2, #1
 802299e:	2109      	movs	r1, #9
 80229a0:	f7ff ff8e 	bl	80228c0 <std>
 80229a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80229a8:	2202      	movs	r2, #2
 80229aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229ae:	2112      	movs	r1, #18
 80229b0:	f7ff bf86 	b.w	80228c0 <std>
 80229b4:	24028b2c 	.word	0x24028b2c
 80229b8:	240289f4 	.word	0x240289f4
 80229bc:	0802292d 	.word	0x0802292d

080229c0 <__sfp_lock_acquire>:
 80229c0:	4801      	ldr	r0, [pc, #4]	@ (80229c8 <__sfp_lock_acquire+0x8>)
 80229c2:	f000 b994 	b.w	8022cee <__retarget_lock_acquire_recursive>
 80229c6:	bf00      	nop
 80229c8:	24028b35 	.word	0x24028b35

080229cc <__sfp_lock_release>:
 80229cc:	4801      	ldr	r0, [pc, #4]	@ (80229d4 <__sfp_lock_release+0x8>)
 80229ce:	f000 b98f 	b.w	8022cf0 <__retarget_lock_release_recursive>
 80229d2:	bf00      	nop
 80229d4:	24028b35 	.word	0x24028b35

080229d8 <__sinit>:
 80229d8:	b510      	push	{r4, lr}
 80229da:	4604      	mov	r4, r0
 80229dc:	f7ff fff0 	bl	80229c0 <__sfp_lock_acquire>
 80229e0:	6a23      	ldr	r3, [r4, #32]
 80229e2:	b11b      	cbz	r3, 80229ec <__sinit+0x14>
 80229e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229e8:	f7ff bff0 	b.w	80229cc <__sfp_lock_release>
 80229ec:	4b04      	ldr	r3, [pc, #16]	@ (8022a00 <__sinit+0x28>)
 80229ee:	6223      	str	r3, [r4, #32]
 80229f0:	4b04      	ldr	r3, [pc, #16]	@ (8022a04 <__sinit+0x2c>)
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d1f5      	bne.n	80229e4 <__sinit+0xc>
 80229f8:	f7ff ffc4 	bl	8022984 <global_stdio_init.part.0>
 80229fc:	e7f2      	b.n	80229e4 <__sinit+0xc>
 80229fe:	bf00      	nop
 8022a00:	08022945 	.word	0x08022945
 8022a04:	24028b2c 	.word	0x24028b2c

08022a08 <fiprintf>:
 8022a08:	b40e      	push	{r1, r2, r3}
 8022a0a:	b503      	push	{r0, r1, lr}
 8022a0c:	4601      	mov	r1, r0
 8022a0e:	ab03      	add	r3, sp, #12
 8022a10:	4805      	ldr	r0, [pc, #20]	@ (8022a28 <fiprintf+0x20>)
 8022a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a16:	6800      	ldr	r0, [r0, #0]
 8022a18:	9301      	str	r3, [sp, #4]
 8022a1a:	f001 fc0b 	bl	8024234 <_vfiprintf_r>
 8022a1e:	b002      	add	sp, #8
 8022a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a24:	b003      	add	sp, #12
 8022a26:	4770      	bx	lr
 8022a28:	2400004c 	.word	0x2400004c

08022a2c <_fwalk_sglue>:
 8022a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a30:	4607      	mov	r7, r0
 8022a32:	4688      	mov	r8, r1
 8022a34:	4614      	mov	r4, r2
 8022a36:	2600      	movs	r6, #0
 8022a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8022a40:	d505      	bpl.n	8022a4e <_fwalk_sglue+0x22>
 8022a42:	6824      	ldr	r4, [r4, #0]
 8022a44:	2c00      	cmp	r4, #0
 8022a46:	d1f7      	bne.n	8022a38 <_fwalk_sglue+0xc>
 8022a48:	4630      	mov	r0, r6
 8022a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a4e:	89ab      	ldrh	r3, [r5, #12]
 8022a50:	2b01      	cmp	r3, #1
 8022a52:	d907      	bls.n	8022a64 <_fwalk_sglue+0x38>
 8022a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022a58:	3301      	adds	r3, #1
 8022a5a:	d003      	beq.n	8022a64 <_fwalk_sglue+0x38>
 8022a5c:	4629      	mov	r1, r5
 8022a5e:	4638      	mov	r0, r7
 8022a60:	47c0      	blx	r8
 8022a62:	4306      	orrs	r6, r0
 8022a64:	3568      	adds	r5, #104	@ 0x68
 8022a66:	e7e9      	b.n	8022a3c <_fwalk_sglue+0x10>

08022a68 <__sread>:
 8022a68:	b510      	push	{r4, lr}
 8022a6a:	460c      	mov	r4, r1
 8022a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a70:	f000 f8ee 	bl	8022c50 <_read_r>
 8022a74:	2800      	cmp	r0, #0
 8022a76:	bfab      	itete	ge
 8022a78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8022a7c:	181b      	addge	r3, r3, r0
 8022a7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022a82:	bfac      	ite	ge
 8022a84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022a86:	81a3      	strhlt	r3, [r4, #12]
 8022a88:	bd10      	pop	{r4, pc}

08022a8a <__swrite>:
 8022a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a8e:	461f      	mov	r7, r3
 8022a90:	898b      	ldrh	r3, [r1, #12]
 8022a92:	05db      	lsls	r3, r3, #23
 8022a94:	4605      	mov	r5, r0
 8022a96:	460c      	mov	r4, r1
 8022a98:	4616      	mov	r6, r2
 8022a9a:	d505      	bpl.n	8022aa8 <__swrite+0x1e>
 8022a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022aa0:	2302      	movs	r3, #2
 8022aa2:	2200      	movs	r2, #0
 8022aa4:	f000 f8c2 	bl	8022c2c <_lseek_r>
 8022aa8:	89a3      	ldrh	r3, [r4, #12]
 8022aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022ab2:	81a3      	strh	r3, [r4, #12]
 8022ab4:	4632      	mov	r2, r6
 8022ab6:	463b      	mov	r3, r7
 8022ab8:	4628      	mov	r0, r5
 8022aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022abe:	f000 b8d9 	b.w	8022c74 <_write_r>

08022ac2 <__sseek>:
 8022ac2:	b510      	push	{r4, lr}
 8022ac4:	460c      	mov	r4, r1
 8022ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022aca:	f000 f8af 	bl	8022c2c <_lseek_r>
 8022ace:	1c43      	adds	r3, r0, #1
 8022ad0:	89a3      	ldrh	r3, [r4, #12]
 8022ad2:	bf15      	itete	ne
 8022ad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022ad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022ada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022ade:	81a3      	strheq	r3, [r4, #12]
 8022ae0:	bf18      	it	ne
 8022ae2:	81a3      	strhne	r3, [r4, #12]
 8022ae4:	bd10      	pop	{r4, pc}

08022ae6 <__sclose>:
 8022ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022aea:	f000 b839 	b.w	8022b60 <_close_r>

08022aee <memmove>:
 8022aee:	4288      	cmp	r0, r1
 8022af0:	b510      	push	{r4, lr}
 8022af2:	eb01 0402 	add.w	r4, r1, r2
 8022af6:	d902      	bls.n	8022afe <memmove+0x10>
 8022af8:	4284      	cmp	r4, r0
 8022afa:	4623      	mov	r3, r4
 8022afc:	d807      	bhi.n	8022b0e <memmove+0x20>
 8022afe:	1e43      	subs	r3, r0, #1
 8022b00:	42a1      	cmp	r1, r4
 8022b02:	d008      	beq.n	8022b16 <memmove+0x28>
 8022b04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022b08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022b0c:	e7f8      	b.n	8022b00 <memmove+0x12>
 8022b0e:	4402      	add	r2, r0
 8022b10:	4601      	mov	r1, r0
 8022b12:	428a      	cmp	r2, r1
 8022b14:	d100      	bne.n	8022b18 <memmove+0x2a>
 8022b16:	bd10      	pop	{r4, pc}
 8022b18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022b1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022b20:	e7f7      	b.n	8022b12 <memmove+0x24>

08022b22 <memset>:
 8022b22:	4402      	add	r2, r0
 8022b24:	4603      	mov	r3, r0
 8022b26:	4293      	cmp	r3, r2
 8022b28:	d100      	bne.n	8022b2c <memset+0xa>
 8022b2a:	4770      	bx	lr
 8022b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8022b30:	e7f9      	b.n	8022b26 <memset+0x4>

08022b32 <strncpy>:
 8022b32:	b510      	push	{r4, lr}
 8022b34:	3901      	subs	r1, #1
 8022b36:	4603      	mov	r3, r0
 8022b38:	b132      	cbz	r2, 8022b48 <strncpy+0x16>
 8022b3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022b3e:	f803 4b01 	strb.w	r4, [r3], #1
 8022b42:	3a01      	subs	r2, #1
 8022b44:	2c00      	cmp	r4, #0
 8022b46:	d1f7      	bne.n	8022b38 <strncpy+0x6>
 8022b48:	441a      	add	r2, r3
 8022b4a:	2100      	movs	r1, #0
 8022b4c:	4293      	cmp	r3, r2
 8022b4e:	d100      	bne.n	8022b52 <strncpy+0x20>
 8022b50:	bd10      	pop	{r4, pc}
 8022b52:	f803 1b01 	strb.w	r1, [r3], #1
 8022b56:	e7f9      	b.n	8022b4c <strncpy+0x1a>

08022b58 <_localeconv_r>:
 8022b58:	4800      	ldr	r0, [pc, #0]	@ (8022b5c <_localeconv_r+0x4>)
 8022b5a:	4770      	bx	lr
 8022b5c:	2400018c 	.word	0x2400018c

08022b60 <_close_r>:
 8022b60:	b538      	push	{r3, r4, r5, lr}
 8022b62:	4d06      	ldr	r5, [pc, #24]	@ (8022b7c <_close_r+0x1c>)
 8022b64:	2300      	movs	r3, #0
 8022b66:	4604      	mov	r4, r0
 8022b68:	4608      	mov	r0, r1
 8022b6a:	602b      	str	r3, [r5, #0]
 8022b6c:	f7df fa3e 	bl	8001fec <_close>
 8022b70:	1c43      	adds	r3, r0, #1
 8022b72:	d102      	bne.n	8022b7a <_close_r+0x1a>
 8022b74:	682b      	ldr	r3, [r5, #0]
 8022b76:	b103      	cbz	r3, 8022b7a <_close_r+0x1a>
 8022b78:	6023      	str	r3, [r4, #0]
 8022b7a:	bd38      	pop	{r3, r4, r5, pc}
 8022b7c:	24028b30 	.word	0x24028b30

08022b80 <_reclaim_reent>:
 8022b80:	4b29      	ldr	r3, [pc, #164]	@ (8022c28 <_reclaim_reent+0xa8>)
 8022b82:	681b      	ldr	r3, [r3, #0]
 8022b84:	4283      	cmp	r3, r0
 8022b86:	b570      	push	{r4, r5, r6, lr}
 8022b88:	4604      	mov	r4, r0
 8022b8a:	d04b      	beq.n	8022c24 <_reclaim_reent+0xa4>
 8022b8c:	69c3      	ldr	r3, [r0, #28]
 8022b8e:	b1ab      	cbz	r3, 8022bbc <_reclaim_reent+0x3c>
 8022b90:	68db      	ldr	r3, [r3, #12]
 8022b92:	b16b      	cbz	r3, 8022bb0 <_reclaim_reent+0x30>
 8022b94:	2500      	movs	r5, #0
 8022b96:	69e3      	ldr	r3, [r4, #28]
 8022b98:	68db      	ldr	r3, [r3, #12]
 8022b9a:	5959      	ldr	r1, [r3, r5]
 8022b9c:	2900      	cmp	r1, #0
 8022b9e:	d13b      	bne.n	8022c18 <_reclaim_reent+0x98>
 8022ba0:	3504      	adds	r5, #4
 8022ba2:	2d80      	cmp	r5, #128	@ 0x80
 8022ba4:	d1f7      	bne.n	8022b96 <_reclaim_reent+0x16>
 8022ba6:	69e3      	ldr	r3, [r4, #28]
 8022ba8:	4620      	mov	r0, r4
 8022baa:	68d9      	ldr	r1, [r3, #12]
 8022bac:	f000 fe96 	bl	80238dc <_free_r>
 8022bb0:	69e3      	ldr	r3, [r4, #28]
 8022bb2:	6819      	ldr	r1, [r3, #0]
 8022bb4:	b111      	cbz	r1, 8022bbc <_reclaim_reent+0x3c>
 8022bb6:	4620      	mov	r0, r4
 8022bb8:	f000 fe90 	bl	80238dc <_free_r>
 8022bbc:	6961      	ldr	r1, [r4, #20]
 8022bbe:	b111      	cbz	r1, 8022bc6 <_reclaim_reent+0x46>
 8022bc0:	4620      	mov	r0, r4
 8022bc2:	f000 fe8b 	bl	80238dc <_free_r>
 8022bc6:	69e1      	ldr	r1, [r4, #28]
 8022bc8:	b111      	cbz	r1, 8022bd0 <_reclaim_reent+0x50>
 8022bca:	4620      	mov	r0, r4
 8022bcc:	f000 fe86 	bl	80238dc <_free_r>
 8022bd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022bd2:	b111      	cbz	r1, 8022bda <_reclaim_reent+0x5a>
 8022bd4:	4620      	mov	r0, r4
 8022bd6:	f000 fe81 	bl	80238dc <_free_r>
 8022bda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022bdc:	b111      	cbz	r1, 8022be4 <_reclaim_reent+0x64>
 8022bde:	4620      	mov	r0, r4
 8022be0:	f000 fe7c 	bl	80238dc <_free_r>
 8022be4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8022be6:	b111      	cbz	r1, 8022bee <_reclaim_reent+0x6e>
 8022be8:	4620      	mov	r0, r4
 8022bea:	f000 fe77 	bl	80238dc <_free_r>
 8022bee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8022bf0:	b111      	cbz	r1, 8022bf8 <_reclaim_reent+0x78>
 8022bf2:	4620      	mov	r0, r4
 8022bf4:	f000 fe72 	bl	80238dc <_free_r>
 8022bf8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8022bfa:	b111      	cbz	r1, 8022c02 <_reclaim_reent+0x82>
 8022bfc:	4620      	mov	r0, r4
 8022bfe:	f000 fe6d 	bl	80238dc <_free_r>
 8022c02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022c04:	b111      	cbz	r1, 8022c0c <_reclaim_reent+0x8c>
 8022c06:	4620      	mov	r0, r4
 8022c08:	f000 fe68 	bl	80238dc <_free_r>
 8022c0c:	6a23      	ldr	r3, [r4, #32]
 8022c0e:	b14b      	cbz	r3, 8022c24 <_reclaim_reent+0xa4>
 8022c10:	4620      	mov	r0, r4
 8022c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022c16:	4718      	bx	r3
 8022c18:	680e      	ldr	r6, [r1, #0]
 8022c1a:	4620      	mov	r0, r4
 8022c1c:	f000 fe5e 	bl	80238dc <_free_r>
 8022c20:	4631      	mov	r1, r6
 8022c22:	e7bb      	b.n	8022b9c <_reclaim_reent+0x1c>
 8022c24:	bd70      	pop	{r4, r5, r6, pc}
 8022c26:	bf00      	nop
 8022c28:	2400004c 	.word	0x2400004c

08022c2c <_lseek_r>:
 8022c2c:	b538      	push	{r3, r4, r5, lr}
 8022c2e:	4d07      	ldr	r5, [pc, #28]	@ (8022c4c <_lseek_r+0x20>)
 8022c30:	4604      	mov	r4, r0
 8022c32:	4608      	mov	r0, r1
 8022c34:	4611      	mov	r1, r2
 8022c36:	2200      	movs	r2, #0
 8022c38:	602a      	str	r2, [r5, #0]
 8022c3a:	461a      	mov	r2, r3
 8022c3c:	f7df f9fd 	bl	800203a <_lseek>
 8022c40:	1c43      	adds	r3, r0, #1
 8022c42:	d102      	bne.n	8022c4a <_lseek_r+0x1e>
 8022c44:	682b      	ldr	r3, [r5, #0]
 8022c46:	b103      	cbz	r3, 8022c4a <_lseek_r+0x1e>
 8022c48:	6023      	str	r3, [r4, #0]
 8022c4a:	bd38      	pop	{r3, r4, r5, pc}
 8022c4c:	24028b30 	.word	0x24028b30

08022c50 <_read_r>:
 8022c50:	b538      	push	{r3, r4, r5, lr}
 8022c52:	4d07      	ldr	r5, [pc, #28]	@ (8022c70 <_read_r+0x20>)
 8022c54:	4604      	mov	r4, r0
 8022c56:	4608      	mov	r0, r1
 8022c58:	4611      	mov	r1, r2
 8022c5a:	2200      	movs	r2, #0
 8022c5c:	602a      	str	r2, [r5, #0]
 8022c5e:	461a      	mov	r2, r3
 8022c60:	f7df f98b 	bl	8001f7a <_read>
 8022c64:	1c43      	adds	r3, r0, #1
 8022c66:	d102      	bne.n	8022c6e <_read_r+0x1e>
 8022c68:	682b      	ldr	r3, [r5, #0]
 8022c6a:	b103      	cbz	r3, 8022c6e <_read_r+0x1e>
 8022c6c:	6023      	str	r3, [r4, #0]
 8022c6e:	bd38      	pop	{r3, r4, r5, pc}
 8022c70:	24028b30 	.word	0x24028b30

08022c74 <_write_r>:
 8022c74:	b538      	push	{r3, r4, r5, lr}
 8022c76:	4d07      	ldr	r5, [pc, #28]	@ (8022c94 <_write_r+0x20>)
 8022c78:	4604      	mov	r4, r0
 8022c7a:	4608      	mov	r0, r1
 8022c7c:	4611      	mov	r1, r2
 8022c7e:	2200      	movs	r2, #0
 8022c80:	602a      	str	r2, [r5, #0]
 8022c82:	461a      	mov	r2, r3
 8022c84:	f7df f996 	bl	8001fb4 <_write>
 8022c88:	1c43      	adds	r3, r0, #1
 8022c8a:	d102      	bne.n	8022c92 <_write_r+0x1e>
 8022c8c:	682b      	ldr	r3, [r5, #0]
 8022c8e:	b103      	cbz	r3, 8022c92 <_write_r+0x1e>
 8022c90:	6023      	str	r3, [r4, #0]
 8022c92:	bd38      	pop	{r3, r4, r5, pc}
 8022c94:	24028b30 	.word	0x24028b30

08022c98 <__errno>:
 8022c98:	4b01      	ldr	r3, [pc, #4]	@ (8022ca0 <__errno+0x8>)
 8022c9a:	6818      	ldr	r0, [r3, #0]
 8022c9c:	4770      	bx	lr
 8022c9e:	bf00      	nop
 8022ca0:	2400004c 	.word	0x2400004c

08022ca4 <__libc_init_array>:
 8022ca4:	b570      	push	{r4, r5, r6, lr}
 8022ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8022cdc <__libc_init_array+0x38>)
 8022ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8022ce0 <__libc_init_array+0x3c>)
 8022caa:	1b64      	subs	r4, r4, r5
 8022cac:	10a4      	asrs	r4, r4, #2
 8022cae:	2600      	movs	r6, #0
 8022cb0:	42a6      	cmp	r6, r4
 8022cb2:	d109      	bne.n	8022cc8 <__libc_init_array+0x24>
 8022cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8022ce4 <__libc_init_array+0x40>)
 8022cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8022ce8 <__libc_init_array+0x44>)
 8022cb8:	f001 fe20 	bl	80248fc <_init>
 8022cbc:	1b64      	subs	r4, r4, r5
 8022cbe:	10a4      	asrs	r4, r4, #2
 8022cc0:	2600      	movs	r6, #0
 8022cc2:	42a6      	cmp	r6, r4
 8022cc4:	d105      	bne.n	8022cd2 <__libc_init_array+0x2e>
 8022cc6:	bd70      	pop	{r4, r5, r6, pc}
 8022cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8022ccc:	4798      	blx	r3
 8022cce:	3601      	adds	r6, #1
 8022cd0:	e7ee      	b.n	8022cb0 <__libc_init_array+0xc>
 8022cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8022cd6:	4798      	blx	r3
 8022cd8:	3601      	adds	r6, #1
 8022cda:	e7f2      	b.n	8022cc2 <__libc_init_array+0x1e>
 8022cdc:	08026004 	.word	0x08026004
 8022ce0:	08026004 	.word	0x08026004
 8022ce4:	08026004 	.word	0x08026004
 8022ce8:	08026028 	.word	0x08026028

08022cec <__retarget_lock_init_recursive>:
 8022cec:	4770      	bx	lr

08022cee <__retarget_lock_acquire_recursive>:
 8022cee:	4770      	bx	lr

08022cf0 <__retarget_lock_release_recursive>:
 8022cf0:	4770      	bx	lr

08022cf2 <memcpy>:
 8022cf2:	440a      	add	r2, r1
 8022cf4:	4291      	cmp	r1, r2
 8022cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8022cfa:	d100      	bne.n	8022cfe <memcpy+0xc>
 8022cfc:	4770      	bx	lr
 8022cfe:	b510      	push	{r4, lr}
 8022d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022d08:	4291      	cmp	r1, r2
 8022d0a:	d1f9      	bne.n	8022d00 <memcpy+0xe>
 8022d0c:	bd10      	pop	{r4, pc}

08022d0e <abort>:
 8022d0e:	b508      	push	{r3, lr}
 8022d10:	2006      	movs	r0, #6
 8022d12:	f001 fd0f 	bl	8024734 <raise>
 8022d16:	2001      	movs	r0, #1
 8022d18:	f7df f924 	bl	8001f64 <_exit>

08022d1c <quorem>:
 8022d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d20:	6903      	ldr	r3, [r0, #16]
 8022d22:	690c      	ldr	r4, [r1, #16]
 8022d24:	42a3      	cmp	r3, r4
 8022d26:	4607      	mov	r7, r0
 8022d28:	db7e      	blt.n	8022e28 <quorem+0x10c>
 8022d2a:	3c01      	subs	r4, #1
 8022d2c:	f101 0814 	add.w	r8, r1, #20
 8022d30:	00a3      	lsls	r3, r4, #2
 8022d32:	f100 0514 	add.w	r5, r0, #20
 8022d36:	9300      	str	r3, [sp, #0]
 8022d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022d3c:	9301      	str	r3, [sp, #4]
 8022d3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022d42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022d46:	3301      	adds	r3, #1
 8022d48:	429a      	cmp	r2, r3
 8022d4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022d4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8022d52:	d32e      	bcc.n	8022db2 <quorem+0x96>
 8022d54:	f04f 0a00 	mov.w	sl, #0
 8022d58:	46c4      	mov	ip, r8
 8022d5a:	46ae      	mov	lr, r5
 8022d5c:	46d3      	mov	fp, sl
 8022d5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8022d62:	b298      	uxth	r0, r3
 8022d64:	fb06 a000 	mla	r0, r6, r0, sl
 8022d68:	0c02      	lsrs	r2, r0, #16
 8022d6a:	0c1b      	lsrs	r3, r3, #16
 8022d6c:	fb06 2303 	mla	r3, r6, r3, r2
 8022d70:	f8de 2000 	ldr.w	r2, [lr]
 8022d74:	b280      	uxth	r0, r0
 8022d76:	b292      	uxth	r2, r2
 8022d78:	1a12      	subs	r2, r2, r0
 8022d7a:	445a      	add	r2, fp
 8022d7c:	f8de 0000 	ldr.w	r0, [lr]
 8022d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022d84:	b29b      	uxth	r3, r3
 8022d86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8022d8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8022d8e:	b292      	uxth	r2, r2
 8022d90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8022d94:	45e1      	cmp	r9, ip
 8022d96:	f84e 2b04 	str.w	r2, [lr], #4
 8022d9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8022d9e:	d2de      	bcs.n	8022d5e <quorem+0x42>
 8022da0:	9b00      	ldr	r3, [sp, #0]
 8022da2:	58eb      	ldr	r3, [r5, r3]
 8022da4:	b92b      	cbnz	r3, 8022db2 <quorem+0x96>
 8022da6:	9b01      	ldr	r3, [sp, #4]
 8022da8:	3b04      	subs	r3, #4
 8022daa:	429d      	cmp	r5, r3
 8022dac:	461a      	mov	r2, r3
 8022dae:	d32f      	bcc.n	8022e10 <quorem+0xf4>
 8022db0:	613c      	str	r4, [r7, #16]
 8022db2:	4638      	mov	r0, r7
 8022db4:	f001 f90c 	bl	8023fd0 <__mcmp>
 8022db8:	2800      	cmp	r0, #0
 8022dba:	db25      	blt.n	8022e08 <quorem+0xec>
 8022dbc:	4629      	mov	r1, r5
 8022dbe:	2000      	movs	r0, #0
 8022dc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8022dc4:	f8d1 c000 	ldr.w	ip, [r1]
 8022dc8:	fa1f fe82 	uxth.w	lr, r2
 8022dcc:	fa1f f38c 	uxth.w	r3, ip
 8022dd0:	eba3 030e 	sub.w	r3, r3, lr
 8022dd4:	4403      	add	r3, r0
 8022dd6:	0c12      	lsrs	r2, r2, #16
 8022dd8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8022ddc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8022de0:	b29b      	uxth	r3, r3
 8022de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022de6:	45c1      	cmp	r9, r8
 8022de8:	f841 3b04 	str.w	r3, [r1], #4
 8022dec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8022df0:	d2e6      	bcs.n	8022dc0 <quorem+0xa4>
 8022df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022dfa:	b922      	cbnz	r2, 8022e06 <quorem+0xea>
 8022dfc:	3b04      	subs	r3, #4
 8022dfe:	429d      	cmp	r5, r3
 8022e00:	461a      	mov	r2, r3
 8022e02:	d30b      	bcc.n	8022e1c <quorem+0x100>
 8022e04:	613c      	str	r4, [r7, #16]
 8022e06:	3601      	adds	r6, #1
 8022e08:	4630      	mov	r0, r6
 8022e0a:	b003      	add	sp, #12
 8022e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e10:	6812      	ldr	r2, [r2, #0]
 8022e12:	3b04      	subs	r3, #4
 8022e14:	2a00      	cmp	r2, #0
 8022e16:	d1cb      	bne.n	8022db0 <quorem+0x94>
 8022e18:	3c01      	subs	r4, #1
 8022e1a:	e7c6      	b.n	8022daa <quorem+0x8e>
 8022e1c:	6812      	ldr	r2, [r2, #0]
 8022e1e:	3b04      	subs	r3, #4
 8022e20:	2a00      	cmp	r2, #0
 8022e22:	d1ef      	bne.n	8022e04 <quorem+0xe8>
 8022e24:	3c01      	subs	r4, #1
 8022e26:	e7ea      	b.n	8022dfe <quorem+0xe2>
 8022e28:	2000      	movs	r0, #0
 8022e2a:	e7ee      	b.n	8022e0a <quorem+0xee>
 8022e2c:	0000      	movs	r0, r0
	...

08022e30 <_dtoa_r>:
 8022e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e34:	ed2d 8b02 	vpush	{d8}
 8022e38:	69c7      	ldr	r7, [r0, #28]
 8022e3a:	b091      	sub	sp, #68	@ 0x44
 8022e3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022e40:	ec55 4b10 	vmov	r4, r5, d0
 8022e44:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8022e46:	9107      	str	r1, [sp, #28]
 8022e48:	4681      	mov	r9, r0
 8022e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8022e4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8022e4e:	b97f      	cbnz	r7, 8022e70 <_dtoa_r+0x40>
 8022e50:	2010      	movs	r0, #16
 8022e52:	f000 fd8d 	bl	8023970 <malloc>
 8022e56:	4602      	mov	r2, r0
 8022e58:	f8c9 001c 	str.w	r0, [r9, #28]
 8022e5c:	b920      	cbnz	r0, 8022e68 <_dtoa_r+0x38>
 8022e5e:	4ba0      	ldr	r3, [pc, #640]	@ (80230e0 <_dtoa_r+0x2b0>)
 8022e60:	21ef      	movs	r1, #239	@ 0xef
 8022e62:	48a0      	ldr	r0, [pc, #640]	@ (80230e4 <_dtoa_r+0x2b4>)
 8022e64:	f7ff f8d8 	bl	8022018 <__assert_func>
 8022e68:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8022e6c:	6007      	str	r7, [r0, #0]
 8022e6e:	60c7      	str	r7, [r0, #12]
 8022e70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022e74:	6819      	ldr	r1, [r3, #0]
 8022e76:	b159      	cbz	r1, 8022e90 <_dtoa_r+0x60>
 8022e78:	685a      	ldr	r2, [r3, #4]
 8022e7a:	604a      	str	r2, [r1, #4]
 8022e7c:	2301      	movs	r3, #1
 8022e7e:	4093      	lsls	r3, r2
 8022e80:	608b      	str	r3, [r1, #8]
 8022e82:	4648      	mov	r0, r9
 8022e84:	f000 fe6a 	bl	8023b5c <_Bfree>
 8022e88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022e8c:	2200      	movs	r2, #0
 8022e8e:	601a      	str	r2, [r3, #0]
 8022e90:	1e2b      	subs	r3, r5, #0
 8022e92:	bfbb      	ittet	lt
 8022e94:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8022e98:	9303      	strlt	r3, [sp, #12]
 8022e9a:	2300      	movge	r3, #0
 8022e9c:	2201      	movlt	r2, #1
 8022e9e:	bfac      	ite	ge
 8022ea0:	6033      	strge	r3, [r6, #0]
 8022ea2:	6032      	strlt	r2, [r6, #0]
 8022ea4:	4b90      	ldr	r3, [pc, #576]	@ (80230e8 <_dtoa_r+0x2b8>)
 8022ea6:	9e03      	ldr	r6, [sp, #12]
 8022ea8:	43b3      	bics	r3, r6
 8022eaa:	d110      	bne.n	8022ece <_dtoa_r+0x9e>
 8022eac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022eae:	f242 730f 	movw	r3, #9999	@ 0x270f
 8022eb2:	6013      	str	r3, [r2, #0]
 8022eb4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8022eb8:	4323      	orrs	r3, r4
 8022eba:	f000 84de 	beq.w	802387a <_dtoa_r+0xa4a>
 8022ebe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022ec0:	4f8a      	ldr	r7, [pc, #552]	@ (80230ec <_dtoa_r+0x2bc>)
 8022ec2:	2b00      	cmp	r3, #0
 8022ec4:	f000 84e0 	beq.w	8023888 <_dtoa_r+0xa58>
 8022ec8:	1cfb      	adds	r3, r7, #3
 8022eca:	f000 bcdb 	b.w	8023884 <_dtoa_r+0xa54>
 8022ece:	ed9d 8b02 	vldr	d8, [sp, #8]
 8022ed2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022eda:	d10a      	bne.n	8022ef2 <_dtoa_r+0xc2>
 8022edc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022ede:	2301      	movs	r3, #1
 8022ee0:	6013      	str	r3, [r2, #0]
 8022ee2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022ee4:	b113      	cbz	r3, 8022eec <_dtoa_r+0xbc>
 8022ee6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022ee8:	4b81      	ldr	r3, [pc, #516]	@ (80230f0 <_dtoa_r+0x2c0>)
 8022eea:	6013      	str	r3, [r2, #0]
 8022eec:	4f81      	ldr	r7, [pc, #516]	@ (80230f4 <_dtoa_r+0x2c4>)
 8022eee:	f000 bccb 	b.w	8023888 <_dtoa_r+0xa58>
 8022ef2:	aa0e      	add	r2, sp, #56	@ 0x38
 8022ef4:	a90f      	add	r1, sp, #60	@ 0x3c
 8022ef6:	4648      	mov	r0, r9
 8022ef8:	eeb0 0b48 	vmov.f64	d0, d8
 8022efc:	f001 f918 	bl	8024130 <__d2b>
 8022f00:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8022f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f06:	9001      	str	r0, [sp, #4]
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	d045      	beq.n	8022f98 <_dtoa_r+0x168>
 8022f0c:	eeb0 7b48 	vmov.f64	d7, d8
 8022f10:	ee18 1a90 	vmov	r1, s17
 8022f14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8022f18:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8022f1c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8022f20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8022f24:	2500      	movs	r5, #0
 8022f26:	ee07 1a90 	vmov	s15, r1
 8022f2a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8022f2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80230c8 <_dtoa_r+0x298>
 8022f32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022f36:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80230d0 <_dtoa_r+0x2a0>
 8022f3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022f3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80230d8 <_dtoa_r+0x2a8>
 8022f42:	ee07 3a90 	vmov	s15, r3
 8022f46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8022f4a:	eeb0 7b46 	vmov.f64	d7, d6
 8022f4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8022f52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8022f56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f5e:	ee16 8a90 	vmov	r8, s13
 8022f62:	d508      	bpl.n	8022f76 <_dtoa_r+0x146>
 8022f64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8022f68:	eeb4 6b47 	vcmp.f64	d6, d7
 8022f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f70:	bf18      	it	ne
 8022f72:	f108 38ff 	addne.w	r8, r8, #4294967295
 8022f76:	f1b8 0f16 	cmp.w	r8, #22
 8022f7a:	d82b      	bhi.n	8022fd4 <_dtoa_r+0x1a4>
 8022f7c:	495e      	ldr	r1, [pc, #376]	@ (80230f8 <_dtoa_r+0x2c8>)
 8022f7e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8022f82:	ed91 7b00 	vldr	d7, [r1]
 8022f86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8022f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f8e:	d501      	bpl.n	8022f94 <_dtoa_r+0x164>
 8022f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8022f94:	2100      	movs	r1, #0
 8022f96:	e01e      	b.n	8022fd6 <_dtoa_r+0x1a6>
 8022f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022f9a:	4413      	add	r3, r2
 8022f9c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8022fa0:	2920      	cmp	r1, #32
 8022fa2:	bfc1      	itttt	gt
 8022fa4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8022fa8:	408e      	lslgt	r6, r1
 8022faa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8022fae:	fa24 f101 	lsrgt.w	r1, r4, r1
 8022fb2:	bfd6      	itet	le
 8022fb4:	f1c1 0120 	rsble	r1, r1, #32
 8022fb8:	4331      	orrgt	r1, r6
 8022fba:	fa04 f101 	lslle.w	r1, r4, r1
 8022fbe:	ee07 1a90 	vmov	s15, r1
 8022fc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022fc6:	3b01      	subs	r3, #1
 8022fc8:	ee17 1a90 	vmov	r1, s15
 8022fcc:	2501      	movs	r5, #1
 8022fce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8022fd2:	e7a8      	b.n	8022f26 <_dtoa_r+0xf6>
 8022fd4:	2101      	movs	r1, #1
 8022fd6:	1ad2      	subs	r2, r2, r3
 8022fd8:	1e53      	subs	r3, r2, #1
 8022fda:	9306      	str	r3, [sp, #24]
 8022fdc:	bf45      	ittet	mi
 8022fde:	f1c2 0301 	rsbmi	r3, r2, #1
 8022fe2:	9305      	strmi	r3, [sp, #20]
 8022fe4:	2300      	movpl	r3, #0
 8022fe6:	2300      	movmi	r3, #0
 8022fe8:	bf4c      	ite	mi
 8022fea:	9306      	strmi	r3, [sp, #24]
 8022fec:	9305      	strpl	r3, [sp, #20]
 8022fee:	f1b8 0f00 	cmp.w	r8, #0
 8022ff2:	910c      	str	r1, [sp, #48]	@ 0x30
 8022ff4:	db18      	blt.n	8023028 <_dtoa_r+0x1f8>
 8022ff6:	9b06      	ldr	r3, [sp, #24]
 8022ff8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8022ffc:	4443      	add	r3, r8
 8022ffe:	9306      	str	r3, [sp, #24]
 8023000:	2300      	movs	r3, #0
 8023002:	9a07      	ldr	r2, [sp, #28]
 8023004:	2a09      	cmp	r2, #9
 8023006:	d849      	bhi.n	802309c <_dtoa_r+0x26c>
 8023008:	2a05      	cmp	r2, #5
 802300a:	bfc4      	itt	gt
 802300c:	3a04      	subgt	r2, #4
 802300e:	9207      	strgt	r2, [sp, #28]
 8023010:	9a07      	ldr	r2, [sp, #28]
 8023012:	f1a2 0202 	sub.w	r2, r2, #2
 8023016:	bfcc      	ite	gt
 8023018:	2400      	movgt	r4, #0
 802301a:	2401      	movle	r4, #1
 802301c:	2a03      	cmp	r2, #3
 802301e:	d848      	bhi.n	80230b2 <_dtoa_r+0x282>
 8023020:	e8df f002 	tbb	[pc, r2]
 8023024:	3a2c2e0b 	.word	0x3a2c2e0b
 8023028:	9b05      	ldr	r3, [sp, #20]
 802302a:	2200      	movs	r2, #0
 802302c:	eba3 0308 	sub.w	r3, r3, r8
 8023030:	9305      	str	r3, [sp, #20]
 8023032:	920a      	str	r2, [sp, #40]	@ 0x28
 8023034:	f1c8 0300 	rsb	r3, r8, #0
 8023038:	e7e3      	b.n	8023002 <_dtoa_r+0x1d2>
 802303a:	2200      	movs	r2, #0
 802303c:	9208      	str	r2, [sp, #32]
 802303e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023040:	2a00      	cmp	r2, #0
 8023042:	dc39      	bgt.n	80230b8 <_dtoa_r+0x288>
 8023044:	f04f 0b01 	mov.w	fp, #1
 8023048:	46da      	mov	sl, fp
 802304a:	465a      	mov	r2, fp
 802304c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8023050:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8023054:	2100      	movs	r1, #0
 8023056:	2004      	movs	r0, #4
 8023058:	f100 0614 	add.w	r6, r0, #20
 802305c:	4296      	cmp	r6, r2
 802305e:	d930      	bls.n	80230c2 <_dtoa_r+0x292>
 8023060:	6079      	str	r1, [r7, #4]
 8023062:	4648      	mov	r0, r9
 8023064:	9304      	str	r3, [sp, #16]
 8023066:	f000 fd39 	bl	8023adc <_Balloc>
 802306a:	9b04      	ldr	r3, [sp, #16]
 802306c:	4607      	mov	r7, r0
 802306e:	2800      	cmp	r0, #0
 8023070:	d146      	bne.n	8023100 <_dtoa_r+0x2d0>
 8023072:	4b22      	ldr	r3, [pc, #136]	@ (80230fc <_dtoa_r+0x2cc>)
 8023074:	4602      	mov	r2, r0
 8023076:	f240 11af 	movw	r1, #431	@ 0x1af
 802307a:	e6f2      	b.n	8022e62 <_dtoa_r+0x32>
 802307c:	2201      	movs	r2, #1
 802307e:	e7dd      	b.n	802303c <_dtoa_r+0x20c>
 8023080:	2200      	movs	r2, #0
 8023082:	9208      	str	r2, [sp, #32]
 8023084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023086:	eb08 0b02 	add.w	fp, r8, r2
 802308a:	f10b 0a01 	add.w	sl, fp, #1
 802308e:	4652      	mov	r2, sl
 8023090:	2a01      	cmp	r2, #1
 8023092:	bfb8      	it	lt
 8023094:	2201      	movlt	r2, #1
 8023096:	e7db      	b.n	8023050 <_dtoa_r+0x220>
 8023098:	2201      	movs	r2, #1
 802309a:	e7f2      	b.n	8023082 <_dtoa_r+0x252>
 802309c:	2401      	movs	r4, #1
 802309e:	2200      	movs	r2, #0
 80230a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80230a4:	f04f 3bff 	mov.w	fp, #4294967295
 80230a8:	2100      	movs	r1, #0
 80230aa:	46da      	mov	sl, fp
 80230ac:	2212      	movs	r2, #18
 80230ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80230b0:	e7ce      	b.n	8023050 <_dtoa_r+0x220>
 80230b2:	2201      	movs	r2, #1
 80230b4:	9208      	str	r2, [sp, #32]
 80230b6:	e7f5      	b.n	80230a4 <_dtoa_r+0x274>
 80230b8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80230bc:	46da      	mov	sl, fp
 80230be:	465a      	mov	r2, fp
 80230c0:	e7c6      	b.n	8023050 <_dtoa_r+0x220>
 80230c2:	3101      	adds	r1, #1
 80230c4:	0040      	lsls	r0, r0, #1
 80230c6:	e7c7      	b.n	8023058 <_dtoa_r+0x228>
 80230c8:	636f4361 	.word	0x636f4361
 80230cc:	3fd287a7 	.word	0x3fd287a7
 80230d0:	8b60c8b3 	.word	0x8b60c8b3
 80230d4:	3fc68a28 	.word	0x3fc68a28
 80230d8:	509f79fb 	.word	0x509f79fb
 80230dc:	3fd34413 	.word	0x3fd34413
 80230e0:	08025d05 	.word	0x08025d05
 80230e4:	08025d1c 	.word	0x08025d1c
 80230e8:	7ff00000 	.word	0x7ff00000
 80230ec:	08025d01 	.word	0x08025d01
 80230f0:	08025cd5 	.word	0x08025cd5
 80230f4:	08025cd4 	.word	0x08025cd4
 80230f8:	08025e18 	.word	0x08025e18
 80230fc:	08025d74 	.word	0x08025d74
 8023100:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8023104:	f1ba 0f0e 	cmp.w	sl, #14
 8023108:	6010      	str	r0, [r2, #0]
 802310a:	d86f      	bhi.n	80231ec <_dtoa_r+0x3bc>
 802310c:	2c00      	cmp	r4, #0
 802310e:	d06d      	beq.n	80231ec <_dtoa_r+0x3bc>
 8023110:	f1b8 0f00 	cmp.w	r8, #0
 8023114:	f340 80c2 	ble.w	802329c <_dtoa_r+0x46c>
 8023118:	4aca      	ldr	r2, [pc, #808]	@ (8023444 <_dtoa_r+0x614>)
 802311a:	f008 010f 	and.w	r1, r8, #15
 802311e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8023122:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8023126:	ed92 7b00 	vldr	d7, [r2]
 802312a:	ea4f 1128 	mov.w	r1, r8, asr #4
 802312e:	f000 80a9 	beq.w	8023284 <_dtoa_r+0x454>
 8023132:	4ac5      	ldr	r2, [pc, #788]	@ (8023448 <_dtoa_r+0x618>)
 8023134:	ed92 6b08 	vldr	d6, [r2, #32]
 8023138:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802313c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023140:	f001 010f 	and.w	r1, r1, #15
 8023144:	2203      	movs	r2, #3
 8023146:	48c0      	ldr	r0, [pc, #768]	@ (8023448 <_dtoa_r+0x618>)
 8023148:	2900      	cmp	r1, #0
 802314a:	f040 809d 	bne.w	8023288 <_dtoa_r+0x458>
 802314e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023152:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023156:	ed8d 7b02 	vstr	d7, [sp, #8]
 802315a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802315c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023160:	2900      	cmp	r1, #0
 8023162:	f000 80c1 	beq.w	80232e8 <_dtoa_r+0x4b8>
 8023166:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 802316a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023172:	f140 80b9 	bpl.w	80232e8 <_dtoa_r+0x4b8>
 8023176:	f1ba 0f00 	cmp.w	sl, #0
 802317a:	f000 80b5 	beq.w	80232e8 <_dtoa_r+0x4b8>
 802317e:	f1bb 0f00 	cmp.w	fp, #0
 8023182:	dd31      	ble.n	80231e8 <_dtoa_r+0x3b8>
 8023184:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8023188:	ee27 7b06 	vmul.f64	d7, d7, d6
 802318c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023190:	f108 31ff 	add.w	r1, r8, #4294967295
 8023194:	9104      	str	r1, [sp, #16]
 8023196:	3201      	adds	r2, #1
 8023198:	465c      	mov	r4, fp
 802319a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802319e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80231a2:	ee07 2a90 	vmov	s15, r2
 80231a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80231aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80231ae:	ee15 2a90 	vmov	r2, s11
 80231b2:	ec51 0b15 	vmov	r0, r1, d5
 80231b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80231ba:	2c00      	cmp	r4, #0
 80231bc:	f040 8098 	bne.w	80232f0 <_dtoa_r+0x4c0>
 80231c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80231c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80231c8:	ec41 0b17 	vmov	d7, r0, r1
 80231cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80231d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231d4:	f300 8261 	bgt.w	802369a <_dtoa_r+0x86a>
 80231d8:	eeb1 7b47 	vneg.f64	d7, d7
 80231dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80231e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231e4:	f100 80f5 	bmi.w	80233d2 <_dtoa_r+0x5a2>
 80231e8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80231ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80231ee:	2a00      	cmp	r2, #0
 80231f0:	f2c0 812c 	blt.w	802344c <_dtoa_r+0x61c>
 80231f4:	f1b8 0f0e 	cmp.w	r8, #14
 80231f8:	f300 8128 	bgt.w	802344c <_dtoa_r+0x61c>
 80231fc:	4b91      	ldr	r3, [pc, #580]	@ (8023444 <_dtoa_r+0x614>)
 80231fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023202:	ed93 6b00 	vldr	d6, [r3]
 8023206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023208:	2b00      	cmp	r3, #0
 802320a:	da03      	bge.n	8023214 <_dtoa_r+0x3e4>
 802320c:	f1ba 0f00 	cmp.w	sl, #0
 8023210:	f340 80d2 	ble.w	80233b8 <_dtoa_r+0x588>
 8023214:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8023218:	ed9d 7b02 	vldr	d7, [sp, #8]
 802321c:	463e      	mov	r6, r7
 802321e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8023222:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8023226:	ee15 3a10 	vmov	r3, s10
 802322a:	3330      	adds	r3, #48	@ 0x30
 802322c:	f806 3b01 	strb.w	r3, [r6], #1
 8023230:	1bf3      	subs	r3, r6, r7
 8023232:	459a      	cmp	sl, r3
 8023234:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8023238:	eea3 7b46 	vfms.f64	d7, d3, d6
 802323c:	f040 80f8 	bne.w	8023430 <_dtoa_r+0x600>
 8023240:	ee37 7b07 	vadd.f64	d7, d7, d7
 8023244:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802324c:	f300 80dd 	bgt.w	802340a <_dtoa_r+0x5da>
 8023250:	eeb4 7b46 	vcmp.f64	d7, d6
 8023254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023258:	d104      	bne.n	8023264 <_dtoa_r+0x434>
 802325a:	ee15 3a10 	vmov	r3, s10
 802325e:	07db      	lsls	r3, r3, #31
 8023260:	f100 80d3 	bmi.w	802340a <_dtoa_r+0x5da>
 8023264:	9901      	ldr	r1, [sp, #4]
 8023266:	4648      	mov	r0, r9
 8023268:	f000 fc78 	bl	8023b5c <_Bfree>
 802326c:	2300      	movs	r3, #0
 802326e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023270:	7033      	strb	r3, [r6, #0]
 8023272:	f108 0301 	add.w	r3, r8, #1
 8023276:	6013      	str	r3, [r2, #0]
 8023278:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802327a:	2b00      	cmp	r3, #0
 802327c:	f000 8304 	beq.w	8023888 <_dtoa_r+0xa58>
 8023280:	601e      	str	r6, [r3, #0]
 8023282:	e301      	b.n	8023888 <_dtoa_r+0xa58>
 8023284:	2202      	movs	r2, #2
 8023286:	e75e      	b.n	8023146 <_dtoa_r+0x316>
 8023288:	07cc      	lsls	r4, r1, #31
 802328a:	d504      	bpl.n	8023296 <_dtoa_r+0x466>
 802328c:	ed90 6b00 	vldr	d6, [r0]
 8023290:	3201      	adds	r2, #1
 8023292:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023296:	1049      	asrs	r1, r1, #1
 8023298:	3008      	adds	r0, #8
 802329a:	e755      	b.n	8023148 <_dtoa_r+0x318>
 802329c:	d022      	beq.n	80232e4 <_dtoa_r+0x4b4>
 802329e:	f1c8 0100 	rsb	r1, r8, #0
 80232a2:	4a68      	ldr	r2, [pc, #416]	@ (8023444 <_dtoa_r+0x614>)
 80232a4:	f001 000f 	and.w	r0, r1, #15
 80232a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80232ac:	ed92 7b00 	vldr	d7, [r2]
 80232b0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80232b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80232b8:	4863      	ldr	r0, [pc, #396]	@ (8023448 <_dtoa_r+0x618>)
 80232ba:	1109      	asrs	r1, r1, #4
 80232bc:	2400      	movs	r4, #0
 80232be:	2202      	movs	r2, #2
 80232c0:	b929      	cbnz	r1, 80232ce <_dtoa_r+0x49e>
 80232c2:	2c00      	cmp	r4, #0
 80232c4:	f43f af49 	beq.w	802315a <_dtoa_r+0x32a>
 80232c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80232cc:	e745      	b.n	802315a <_dtoa_r+0x32a>
 80232ce:	07ce      	lsls	r6, r1, #31
 80232d0:	d505      	bpl.n	80232de <_dtoa_r+0x4ae>
 80232d2:	ed90 6b00 	vldr	d6, [r0]
 80232d6:	3201      	adds	r2, #1
 80232d8:	2401      	movs	r4, #1
 80232da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80232de:	1049      	asrs	r1, r1, #1
 80232e0:	3008      	adds	r0, #8
 80232e2:	e7ed      	b.n	80232c0 <_dtoa_r+0x490>
 80232e4:	2202      	movs	r2, #2
 80232e6:	e738      	b.n	802315a <_dtoa_r+0x32a>
 80232e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80232ec:	4654      	mov	r4, sl
 80232ee:	e754      	b.n	802319a <_dtoa_r+0x36a>
 80232f0:	4a54      	ldr	r2, [pc, #336]	@ (8023444 <_dtoa_r+0x614>)
 80232f2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80232f6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80232fa:	9a08      	ldr	r2, [sp, #32]
 80232fc:	ec41 0b17 	vmov	d7, r0, r1
 8023300:	443c      	add	r4, r7
 8023302:	b34a      	cbz	r2, 8023358 <_dtoa_r+0x528>
 8023304:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8023308:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 802330c:	463e      	mov	r6, r7
 802330e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8023312:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8023316:	ee35 7b47 	vsub.f64	d7, d5, d7
 802331a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802331e:	ee14 2a90 	vmov	r2, s9
 8023322:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023326:	3230      	adds	r2, #48	@ 0x30
 8023328:	ee36 6b45 	vsub.f64	d6, d6, d5
 802332c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023334:	f806 2b01 	strb.w	r2, [r6], #1
 8023338:	d438      	bmi.n	80233ac <_dtoa_r+0x57c>
 802333a:	ee32 5b46 	vsub.f64	d5, d2, d6
 802333e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8023342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023346:	d462      	bmi.n	802340e <_dtoa_r+0x5de>
 8023348:	42a6      	cmp	r6, r4
 802334a:	f43f af4d 	beq.w	80231e8 <_dtoa_r+0x3b8>
 802334e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8023352:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023356:	e7e0      	b.n	802331a <_dtoa_r+0x4ea>
 8023358:	4621      	mov	r1, r4
 802335a:	463e      	mov	r6, r7
 802335c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023360:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8023364:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023368:	ee14 2a90 	vmov	r2, s9
 802336c:	3230      	adds	r2, #48	@ 0x30
 802336e:	f806 2b01 	strb.w	r2, [r6], #1
 8023372:	42a6      	cmp	r6, r4
 8023374:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023378:	ee36 6b45 	vsub.f64	d6, d6, d5
 802337c:	d119      	bne.n	80233b2 <_dtoa_r+0x582>
 802337e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8023382:	ee37 4b05 	vadd.f64	d4, d7, d5
 8023386:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802338e:	dc3e      	bgt.n	802340e <_dtoa_r+0x5de>
 8023390:	ee35 5b47 	vsub.f64	d5, d5, d7
 8023394:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8023398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802339c:	f57f af24 	bpl.w	80231e8 <_dtoa_r+0x3b8>
 80233a0:	460e      	mov	r6, r1
 80233a2:	3901      	subs	r1, #1
 80233a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80233a8:	2b30      	cmp	r3, #48	@ 0x30
 80233aa:	d0f9      	beq.n	80233a0 <_dtoa_r+0x570>
 80233ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80233b0:	e758      	b.n	8023264 <_dtoa_r+0x434>
 80233b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80233b6:	e7d5      	b.n	8023364 <_dtoa_r+0x534>
 80233b8:	d10b      	bne.n	80233d2 <_dtoa_r+0x5a2>
 80233ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80233be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80233c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80233c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80233ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80233ce:	f2c0 8161 	blt.w	8023694 <_dtoa_r+0x864>
 80233d2:	2400      	movs	r4, #0
 80233d4:	4625      	mov	r5, r4
 80233d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233d8:	43db      	mvns	r3, r3
 80233da:	9304      	str	r3, [sp, #16]
 80233dc:	463e      	mov	r6, r7
 80233de:	f04f 0800 	mov.w	r8, #0
 80233e2:	4621      	mov	r1, r4
 80233e4:	4648      	mov	r0, r9
 80233e6:	f000 fbb9 	bl	8023b5c <_Bfree>
 80233ea:	2d00      	cmp	r5, #0
 80233ec:	d0de      	beq.n	80233ac <_dtoa_r+0x57c>
 80233ee:	f1b8 0f00 	cmp.w	r8, #0
 80233f2:	d005      	beq.n	8023400 <_dtoa_r+0x5d0>
 80233f4:	45a8      	cmp	r8, r5
 80233f6:	d003      	beq.n	8023400 <_dtoa_r+0x5d0>
 80233f8:	4641      	mov	r1, r8
 80233fa:	4648      	mov	r0, r9
 80233fc:	f000 fbae 	bl	8023b5c <_Bfree>
 8023400:	4629      	mov	r1, r5
 8023402:	4648      	mov	r0, r9
 8023404:	f000 fbaa 	bl	8023b5c <_Bfree>
 8023408:	e7d0      	b.n	80233ac <_dtoa_r+0x57c>
 802340a:	f8cd 8010 	str.w	r8, [sp, #16]
 802340e:	4633      	mov	r3, r6
 8023410:	461e      	mov	r6, r3
 8023412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023416:	2a39      	cmp	r2, #57	@ 0x39
 8023418:	d106      	bne.n	8023428 <_dtoa_r+0x5f8>
 802341a:	429f      	cmp	r7, r3
 802341c:	d1f8      	bne.n	8023410 <_dtoa_r+0x5e0>
 802341e:	9a04      	ldr	r2, [sp, #16]
 8023420:	3201      	adds	r2, #1
 8023422:	9204      	str	r2, [sp, #16]
 8023424:	2230      	movs	r2, #48	@ 0x30
 8023426:	703a      	strb	r2, [r7, #0]
 8023428:	781a      	ldrb	r2, [r3, #0]
 802342a:	3201      	adds	r2, #1
 802342c:	701a      	strb	r2, [r3, #0]
 802342e:	e7bd      	b.n	80233ac <_dtoa_r+0x57c>
 8023430:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023434:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802343c:	f47f aeef 	bne.w	802321e <_dtoa_r+0x3ee>
 8023440:	e710      	b.n	8023264 <_dtoa_r+0x434>
 8023442:	bf00      	nop
 8023444:	08025e18 	.word	0x08025e18
 8023448:	08025df0 	.word	0x08025df0
 802344c:	9908      	ldr	r1, [sp, #32]
 802344e:	2900      	cmp	r1, #0
 8023450:	f000 80e3 	beq.w	802361a <_dtoa_r+0x7ea>
 8023454:	9907      	ldr	r1, [sp, #28]
 8023456:	2901      	cmp	r1, #1
 8023458:	f300 80c8 	bgt.w	80235ec <_dtoa_r+0x7bc>
 802345c:	2d00      	cmp	r5, #0
 802345e:	f000 80c1 	beq.w	80235e4 <_dtoa_r+0x7b4>
 8023462:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8023466:	9e05      	ldr	r6, [sp, #20]
 8023468:	461c      	mov	r4, r3
 802346a:	9304      	str	r3, [sp, #16]
 802346c:	9b05      	ldr	r3, [sp, #20]
 802346e:	4413      	add	r3, r2
 8023470:	9305      	str	r3, [sp, #20]
 8023472:	9b06      	ldr	r3, [sp, #24]
 8023474:	2101      	movs	r1, #1
 8023476:	4413      	add	r3, r2
 8023478:	4648      	mov	r0, r9
 802347a:	9306      	str	r3, [sp, #24]
 802347c:	f000 fc22 	bl	8023cc4 <__i2b>
 8023480:	9b04      	ldr	r3, [sp, #16]
 8023482:	4605      	mov	r5, r0
 8023484:	b166      	cbz	r6, 80234a0 <_dtoa_r+0x670>
 8023486:	9a06      	ldr	r2, [sp, #24]
 8023488:	2a00      	cmp	r2, #0
 802348a:	dd09      	ble.n	80234a0 <_dtoa_r+0x670>
 802348c:	42b2      	cmp	r2, r6
 802348e:	9905      	ldr	r1, [sp, #20]
 8023490:	bfa8      	it	ge
 8023492:	4632      	movge	r2, r6
 8023494:	1a89      	subs	r1, r1, r2
 8023496:	9105      	str	r1, [sp, #20]
 8023498:	9906      	ldr	r1, [sp, #24]
 802349a:	1ab6      	subs	r6, r6, r2
 802349c:	1a8a      	subs	r2, r1, r2
 802349e:	9206      	str	r2, [sp, #24]
 80234a0:	b1fb      	cbz	r3, 80234e2 <_dtoa_r+0x6b2>
 80234a2:	9a08      	ldr	r2, [sp, #32]
 80234a4:	2a00      	cmp	r2, #0
 80234a6:	f000 80bc 	beq.w	8023622 <_dtoa_r+0x7f2>
 80234aa:	b19c      	cbz	r4, 80234d4 <_dtoa_r+0x6a4>
 80234ac:	4629      	mov	r1, r5
 80234ae:	4622      	mov	r2, r4
 80234b0:	4648      	mov	r0, r9
 80234b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80234b4:	f000 fcc6 	bl	8023e44 <__pow5mult>
 80234b8:	9a01      	ldr	r2, [sp, #4]
 80234ba:	4601      	mov	r1, r0
 80234bc:	4605      	mov	r5, r0
 80234be:	4648      	mov	r0, r9
 80234c0:	f000 fc16 	bl	8023cf0 <__multiply>
 80234c4:	9901      	ldr	r1, [sp, #4]
 80234c6:	9004      	str	r0, [sp, #16]
 80234c8:	4648      	mov	r0, r9
 80234ca:	f000 fb47 	bl	8023b5c <_Bfree>
 80234ce:	9a04      	ldr	r2, [sp, #16]
 80234d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80234d2:	9201      	str	r2, [sp, #4]
 80234d4:	1b1a      	subs	r2, r3, r4
 80234d6:	d004      	beq.n	80234e2 <_dtoa_r+0x6b2>
 80234d8:	9901      	ldr	r1, [sp, #4]
 80234da:	4648      	mov	r0, r9
 80234dc:	f000 fcb2 	bl	8023e44 <__pow5mult>
 80234e0:	9001      	str	r0, [sp, #4]
 80234e2:	2101      	movs	r1, #1
 80234e4:	4648      	mov	r0, r9
 80234e6:	f000 fbed 	bl	8023cc4 <__i2b>
 80234ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80234ec:	4604      	mov	r4, r0
 80234ee:	2b00      	cmp	r3, #0
 80234f0:	f000 81d0 	beq.w	8023894 <_dtoa_r+0xa64>
 80234f4:	461a      	mov	r2, r3
 80234f6:	4601      	mov	r1, r0
 80234f8:	4648      	mov	r0, r9
 80234fa:	f000 fca3 	bl	8023e44 <__pow5mult>
 80234fe:	9b07      	ldr	r3, [sp, #28]
 8023500:	2b01      	cmp	r3, #1
 8023502:	4604      	mov	r4, r0
 8023504:	f300 8095 	bgt.w	8023632 <_dtoa_r+0x802>
 8023508:	9b02      	ldr	r3, [sp, #8]
 802350a:	2b00      	cmp	r3, #0
 802350c:	f040 808b 	bne.w	8023626 <_dtoa_r+0x7f6>
 8023510:	9b03      	ldr	r3, [sp, #12]
 8023512:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8023516:	2a00      	cmp	r2, #0
 8023518:	f040 8087 	bne.w	802362a <_dtoa_r+0x7fa>
 802351c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8023520:	0d12      	lsrs	r2, r2, #20
 8023522:	0512      	lsls	r2, r2, #20
 8023524:	2a00      	cmp	r2, #0
 8023526:	f000 8082 	beq.w	802362e <_dtoa_r+0x7fe>
 802352a:	9b05      	ldr	r3, [sp, #20]
 802352c:	3301      	adds	r3, #1
 802352e:	9305      	str	r3, [sp, #20]
 8023530:	9b06      	ldr	r3, [sp, #24]
 8023532:	3301      	adds	r3, #1
 8023534:	9306      	str	r3, [sp, #24]
 8023536:	2301      	movs	r3, #1
 8023538:	930b      	str	r3, [sp, #44]	@ 0x2c
 802353a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802353c:	2b00      	cmp	r3, #0
 802353e:	f000 81af 	beq.w	80238a0 <_dtoa_r+0xa70>
 8023542:	6922      	ldr	r2, [r4, #16]
 8023544:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023548:	6910      	ldr	r0, [r2, #16]
 802354a:	f000 fb6f 	bl	8023c2c <__hi0bits>
 802354e:	f1c0 0020 	rsb	r0, r0, #32
 8023552:	9b06      	ldr	r3, [sp, #24]
 8023554:	4418      	add	r0, r3
 8023556:	f010 001f 	ands.w	r0, r0, #31
 802355a:	d076      	beq.n	802364a <_dtoa_r+0x81a>
 802355c:	f1c0 0220 	rsb	r2, r0, #32
 8023560:	2a04      	cmp	r2, #4
 8023562:	dd69      	ble.n	8023638 <_dtoa_r+0x808>
 8023564:	9b05      	ldr	r3, [sp, #20]
 8023566:	f1c0 001c 	rsb	r0, r0, #28
 802356a:	4403      	add	r3, r0
 802356c:	9305      	str	r3, [sp, #20]
 802356e:	9b06      	ldr	r3, [sp, #24]
 8023570:	4406      	add	r6, r0
 8023572:	4403      	add	r3, r0
 8023574:	9306      	str	r3, [sp, #24]
 8023576:	9b05      	ldr	r3, [sp, #20]
 8023578:	2b00      	cmp	r3, #0
 802357a:	dd05      	ble.n	8023588 <_dtoa_r+0x758>
 802357c:	9901      	ldr	r1, [sp, #4]
 802357e:	461a      	mov	r2, r3
 8023580:	4648      	mov	r0, r9
 8023582:	f000 fcb9 	bl	8023ef8 <__lshift>
 8023586:	9001      	str	r0, [sp, #4]
 8023588:	9b06      	ldr	r3, [sp, #24]
 802358a:	2b00      	cmp	r3, #0
 802358c:	dd05      	ble.n	802359a <_dtoa_r+0x76a>
 802358e:	4621      	mov	r1, r4
 8023590:	461a      	mov	r2, r3
 8023592:	4648      	mov	r0, r9
 8023594:	f000 fcb0 	bl	8023ef8 <__lshift>
 8023598:	4604      	mov	r4, r0
 802359a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802359c:	2b00      	cmp	r3, #0
 802359e:	d056      	beq.n	802364e <_dtoa_r+0x81e>
 80235a0:	9801      	ldr	r0, [sp, #4]
 80235a2:	4621      	mov	r1, r4
 80235a4:	f000 fd14 	bl	8023fd0 <__mcmp>
 80235a8:	2800      	cmp	r0, #0
 80235aa:	da50      	bge.n	802364e <_dtoa_r+0x81e>
 80235ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80235b0:	9304      	str	r3, [sp, #16]
 80235b2:	9901      	ldr	r1, [sp, #4]
 80235b4:	2300      	movs	r3, #0
 80235b6:	220a      	movs	r2, #10
 80235b8:	4648      	mov	r0, r9
 80235ba:	f000 faf1 	bl	8023ba0 <__multadd>
 80235be:	9b08      	ldr	r3, [sp, #32]
 80235c0:	9001      	str	r0, [sp, #4]
 80235c2:	2b00      	cmp	r3, #0
 80235c4:	f000 816e 	beq.w	80238a4 <_dtoa_r+0xa74>
 80235c8:	4629      	mov	r1, r5
 80235ca:	2300      	movs	r3, #0
 80235cc:	220a      	movs	r2, #10
 80235ce:	4648      	mov	r0, r9
 80235d0:	f000 fae6 	bl	8023ba0 <__multadd>
 80235d4:	f1bb 0f00 	cmp.w	fp, #0
 80235d8:	4605      	mov	r5, r0
 80235da:	dc64      	bgt.n	80236a6 <_dtoa_r+0x876>
 80235dc:	9b07      	ldr	r3, [sp, #28]
 80235de:	2b02      	cmp	r3, #2
 80235e0:	dc3e      	bgt.n	8023660 <_dtoa_r+0x830>
 80235e2:	e060      	b.n	80236a6 <_dtoa_r+0x876>
 80235e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80235e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80235ea:	e73c      	b.n	8023466 <_dtoa_r+0x636>
 80235ec:	f10a 34ff 	add.w	r4, sl, #4294967295
 80235f0:	42a3      	cmp	r3, r4
 80235f2:	bfbf      	itttt	lt
 80235f4:	1ae2      	sublt	r2, r4, r3
 80235f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80235f8:	189b      	addlt	r3, r3, r2
 80235fa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80235fc:	bfae      	itee	ge
 80235fe:	1b1c      	subge	r4, r3, r4
 8023600:	4623      	movlt	r3, r4
 8023602:	2400      	movlt	r4, #0
 8023604:	f1ba 0f00 	cmp.w	sl, #0
 8023608:	bfb5      	itete	lt
 802360a:	9a05      	ldrlt	r2, [sp, #20]
 802360c:	9e05      	ldrge	r6, [sp, #20]
 802360e:	eba2 060a 	sublt.w	r6, r2, sl
 8023612:	4652      	movge	r2, sl
 8023614:	bfb8      	it	lt
 8023616:	2200      	movlt	r2, #0
 8023618:	e727      	b.n	802346a <_dtoa_r+0x63a>
 802361a:	9e05      	ldr	r6, [sp, #20]
 802361c:	9d08      	ldr	r5, [sp, #32]
 802361e:	461c      	mov	r4, r3
 8023620:	e730      	b.n	8023484 <_dtoa_r+0x654>
 8023622:	461a      	mov	r2, r3
 8023624:	e758      	b.n	80234d8 <_dtoa_r+0x6a8>
 8023626:	2300      	movs	r3, #0
 8023628:	e786      	b.n	8023538 <_dtoa_r+0x708>
 802362a:	9b02      	ldr	r3, [sp, #8]
 802362c:	e784      	b.n	8023538 <_dtoa_r+0x708>
 802362e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023630:	e783      	b.n	802353a <_dtoa_r+0x70a>
 8023632:	2300      	movs	r3, #0
 8023634:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023636:	e784      	b.n	8023542 <_dtoa_r+0x712>
 8023638:	d09d      	beq.n	8023576 <_dtoa_r+0x746>
 802363a:	9b05      	ldr	r3, [sp, #20]
 802363c:	321c      	adds	r2, #28
 802363e:	4413      	add	r3, r2
 8023640:	9305      	str	r3, [sp, #20]
 8023642:	9b06      	ldr	r3, [sp, #24]
 8023644:	4416      	add	r6, r2
 8023646:	4413      	add	r3, r2
 8023648:	e794      	b.n	8023574 <_dtoa_r+0x744>
 802364a:	4602      	mov	r2, r0
 802364c:	e7f5      	b.n	802363a <_dtoa_r+0x80a>
 802364e:	f1ba 0f00 	cmp.w	sl, #0
 8023652:	f8cd 8010 	str.w	r8, [sp, #16]
 8023656:	46d3      	mov	fp, sl
 8023658:	dc21      	bgt.n	802369e <_dtoa_r+0x86e>
 802365a:	9b07      	ldr	r3, [sp, #28]
 802365c:	2b02      	cmp	r3, #2
 802365e:	dd1e      	ble.n	802369e <_dtoa_r+0x86e>
 8023660:	f1bb 0f00 	cmp.w	fp, #0
 8023664:	f47f aeb7 	bne.w	80233d6 <_dtoa_r+0x5a6>
 8023668:	4621      	mov	r1, r4
 802366a:	465b      	mov	r3, fp
 802366c:	2205      	movs	r2, #5
 802366e:	4648      	mov	r0, r9
 8023670:	f000 fa96 	bl	8023ba0 <__multadd>
 8023674:	4601      	mov	r1, r0
 8023676:	4604      	mov	r4, r0
 8023678:	9801      	ldr	r0, [sp, #4]
 802367a:	f000 fca9 	bl	8023fd0 <__mcmp>
 802367e:	2800      	cmp	r0, #0
 8023680:	f77f aea9 	ble.w	80233d6 <_dtoa_r+0x5a6>
 8023684:	463e      	mov	r6, r7
 8023686:	2331      	movs	r3, #49	@ 0x31
 8023688:	f806 3b01 	strb.w	r3, [r6], #1
 802368c:	9b04      	ldr	r3, [sp, #16]
 802368e:	3301      	adds	r3, #1
 8023690:	9304      	str	r3, [sp, #16]
 8023692:	e6a4      	b.n	80233de <_dtoa_r+0x5ae>
 8023694:	f8cd 8010 	str.w	r8, [sp, #16]
 8023698:	4654      	mov	r4, sl
 802369a:	4625      	mov	r5, r4
 802369c:	e7f2      	b.n	8023684 <_dtoa_r+0x854>
 802369e:	9b08      	ldr	r3, [sp, #32]
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	f000 8103 	beq.w	80238ac <_dtoa_r+0xa7c>
 80236a6:	2e00      	cmp	r6, #0
 80236a8:	dd05      	ble.n	80236b6 <_dtoa_r+0x886>
 80236aa:	4629      	mov	r1, r5
 80236ac:	4632      	mov	r2, r6
 80236ae:	4648      	mov	r0, r9
 80236b0:	f000 fc22 	bl	8023ef8 <__lshift>
 80236b4:	4605      	mov	r5, r0
 80236b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	d058      	beq.n	802376e <_dtoa_r+0x93e>
 80236bc:	6869      	ldr	r1, [r5, #4]
 80236be:	4648      	mov	r0, r9
 80236c0:	f000 fa0c 	bl	8023adc <_Balloc>
 80236c4:	4606      	mov	r6, r0
 80236c6:	b928      	cbnz	r0, 80236d4 <_dtoa_r+0x8a4>
 80236c8:	4b82      	ldr	r3, [pc, #520]	@ (80238d4 <_dtoa_r+0xaa4>)
 80236ca:	4602      	mov	r2, r0
 80236cc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80236d0:	f7ff bbc7 	b.w	8022e62 <_dtoa_r+0x32>
 80236d4:	692a      	ldr	r2, [r5, #16]
 80236d6:	3202      	adds	r2, #2
 80236d8:	0092      	lsls	r2, r2, #2
 80236da:	f105 010c 	add.w	r1, r5, #12
 80236de:	300c      	adds	r0, #12
 80236e0:	f7ff fb07 	bl	8022cf2 <memcpy>
 80236e4:	2201      	movs	r2, #1
 80236e6:	4631      	mov	r1, r6
 80236e8:	4648      	mov	r0, r9
 80236ea:	f000 fc05 	bl	8023ef8 <__lshift>
 80236ee:	1c7b      	adds	r3, r7, #1
 80236f0:	9305      	str	r3, [sp, #20]
 80236f2:	eb07 030b 	add.w	r3, r7, fp
 80236f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80236f8:	9b02      	ldr	r3, [sp, #8]
 80236fa:	f003 0301 	and.w	r3, r3, #1
 80236fe:	46a8      	mov	r8, r5
 8023700:	9308      	str	r3, [sp, #32]
 8023702:	4605      	mov	r5, r0
 8023704:	9b05      	ldr	r3, [sp, #20]
 8023706:	9801      	ldr	r0, [sp, #4]
 8023708:	4621      	mov	r1, r4
 802370a:	f103 3bff 	add.w	fp, r3, #4294967295
 802370e:	f7ff fb05 	bl	8022d1c <quorem>
 8023712:	4641      	mov	r1, r8
 8023714:	9002      	str	r0, [sp, #8]
 8023716:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802371a:	9801      	ldr	r0, [sp, #4]
 802371c:	f000 fc58 	bl	8023fd0 <__mcmp>
 8023720:	462a      	mov	r2, r5
 8023722:	9006      	str	r0, [sp, #24]
 8023724:	4621      	mov	r1, r4
 8023726:	4648      	mov	r0, r9
 8023728:	f000 fc6e 	bl	8024008 <__mdiff>
 802372c:	68c2      	ldr	r2, [r0, #12]
 802372e:	4606      	mov	r6, r0
 8023730:	b9fa      	cbnz	r2, 8023772 <_dtoa_r+0x942>
 8023732:	4601      	mov	r1, r0
 8023734:	9801      	ldr	r0, [sp, #4]
 8023736:	f000 fc4b 	bl	8023fd0 <__mcmp>
 802373a:	4602      	mov	r2, r0
 802373c:	4631      	mov	r1, r6
 802373e:	4648      	mov	r0, r9
 8023740:	920a      	str	r2, [sp, #40]	@ 0x28
 8023742:	f000 fa0b 	bl	8023b5c <_Bfree>
 8023746:	9b07      	ldr	r3, [sp, #28]
 8023748:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802374a:	9e05      	ldr	r6, [sp, #20]
 802374c:	ea43 0102 	orr.w	r1, r3, r2
 8023750:	9b08      	ldr	r3, [sp, #32]
 8023752:	4319      	orrs	r1, r3
 8023754:	d10f      	bne.n	8023776 <_dtoa_r+0x946>
 8023756:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802375a:	d028      	beq.n	80237ae <_dtoa_r+0x97e>
 802375c:	9b06      	ldr	r3, [sp, #24]
 802375e:	2b00      	cmp	r3, #0
 8023760:	dd02      	ble.n	8023768 <_dtoa_r+0x938>
 8023762:	9b02      	ldr	r3, [sp, #8]
 8023764:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8023768:	f88b a000 	strb.w	sl, [fp]
 802376c:	e639      	b.n	80233e2 <_dtoa_r+0x5b2>
 802376e:	4628      	mov	r0, r5
 8023770:	e7bd      	b.n	80236ee <_dtoa_r+0x8be>
 8023772:	2201      	movs	r2, #1
 8023774:	e7e2      	b.n	802373c <_dtoa_r+0x90c>
 8023776:	9b06      	ldr	r3, [sp, #24]
 8023778:	2b00      	cmp	r3, #0
 802377a:	db04      	blt.n	8023786 <_dtoa_r+0x956>
 802377c:	9907      	ldr	r1, [sp, #28]
 802377e:	430b      	orrs	r3, r1
 8023780:	9908      	ldr	r1, [sp, #32]
 8023782:	430b      	orrs	r3, r1
 8023784:	d120      	bne.n	80237c8 <_dtoa_r+0x998>
 8023786:	2a00      	cmp	r2, #0
 8023788:	ddee      	ble.n	8023768 <_dtoa_r+0x938>
 802378a:	9901      	ldr	r1, [sp, #4]
 802378c:	2201      	movs	r2, #1
 802378e:	4648      	mov	r0, r9
 8023790:	f000 fbb2 	bl	8023ef8 <__lshift>
 8023794:	4621      	mov	r1, r4
 8023796:	9001      	str	r0, [sp, #4]
 8023798:	f000 fc1a 	bl	8023fd0 <__mcmp>
 802379c:	2800      	cmp	r0, #0
 802379e:	dc03      	bgt.n	80237a8 <_dtoa_r+0x978>
 80237a0:	d1e2      	bne.n	8023768 <_dtoa_r+0x938>
 80237a2:	f01a 0f01 	tst.w	sl, #1
 80237a6:	d0df      	beq.n	8023768 <_dtoa_r+0x938>
 80237a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80237ac:	d1d9      	bne.n	8023762 <_dtoa_r+0x932>
 80237ae:	2339      	movs	r3, #57	@ 0x39
 80237b0:	f88b 3000 	strb.w	r3, [fp]
 80237b4:	4633      	mov	r3, r6
 80237b6:	461e      	mov	r6, r3
 80237b8:	3b01      	subs	r3, #1
 80237ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80237be:	2a39      	cmp	r2, #57	@ 0x39
 80237c0:	d053      	beq.n	802386a <_dtoa_r+0xa3a>
 80237c2:	3201      	adds	r2, #1
 80237c4:	701a      	strb	r2, [r3, #0]
 80237c6:	e60c      	b.n	80233e2 <_dtoa_r+0x5b2>
 80237c8:	2a00      	cmp	r2, #0
 80237ca:	dd07      	ble.n	80237dc <_dtoa_r+0x9ac>
 80237cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80237d0:	d0ed      	beq.n	80237ae <_dtoa_r+0x97e>
 80237d2:	f10a 0301 	add.w	r3, sl, #1
 80237d6:	f88b 3000 	strb.w	r3, [fp]
 80237da:	e602      	b.n	80233e2 <_dtoa_r+0x5b2>
 80237dc:	9b05      	ldr	r3, [sp, #20]
 80237de:	9a05      	ldr	r2, [sp, #20]
 80237e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80237e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237e6:	4293      	cmp	r3, r2
 80237e8:	d029      	beq.n	802383e <_dtoa_r+0xa0e>
 80237ea:	9901      	ldr	r1, [sp, #4]
 80237ec:	2300      	movs	r3, #0
 80237ee:	220a      	movs	r2, #10
 80237f0:	4648      	mov	r0, r9
 80237f2:	f000 f9d5 	bl	8023ba0 <__multadd>
 80237f6:	45a8      	cmp	r8, r5
 80237f8:	9001      	str	r0, [sp, #4]
 80237fa:	f04f 0300 	mov.w	r3, #0
 80237fe:	f04f 020a 	mov.w	r2, #10
 8023802:	4641      	mov	r1, r8
 8023804:	4648      	mov	r0, r9
 8023806:	d107      	bne.n	8023818 <_dtoa_r+0x9e8>
 8023808:	f000 f9ca 	bl	8023ba0 <__multadd>
 802380c:	4680      	mov	r8, r0
 802380e:	4605      	mov	r5, r0
 8023810:	9b05      	ldr	r3, [sp, #20]
 8023812:	3301      	adds	r3, #1
 8023814:	9305      	str	r3, [sp, #20]
 8023816:	e775      	b.n	8023704 <_dtoa_r+0x8d4>
 8023818:	f000 f9c2 	bl	8023ba0 <__multadd>
 802381c:	4629      	mov	r1, r5
 802381e:	4680      	mov	r8, r0
 8023820:	2300      	movs	r3, #0
 8023822:	220a      	movs	r2, #10
 8023824:	4648      	mov	r0, r9
 8023826:	f000 f9bb 	bl	8023ba0 <__multadd>
 802382a:	4605      	mov	r5, r0
 802382c:	e7f0      	b.n	8023810 <_dtoa_r+0x9e0>
 802382e:	f1bb 0f00 	cmp.w	fp, #0
 8023832:	bfcc      	ite	gt
 8023834:	465e      	movgt	r6, fp
 8023836:	2601      	movle	r6, #1
 8023838:	443e      	add	r6, r7
 802383a:	f04f 0800 	mov.w	r8, #0
 802383e:	9901      	ldr	r1, [sp, #4]
 8023840:	2201      	movs	r2, #1
 8023842:	4648      	mov	r0, r9
 8023844:	f000 fb58 	bl	8023ef8 <__lshift>
 8023848:	4621      	mov	r1, r4
 802384a:	9001      	str	r0, [sp, #4]
 802384c:	f000 fbc0 	bl	8023fd0 <__mcmp>
 8023850:	2800      	cmp	r0, #0
 8023852:	dcaf      	bgt.n	80237b4 <_dtoa_r+0x984>
 8023854:	d102      	bne.n	802385c <_dtoa_r+0xa2c>
 8023856:	f01a 0f01 	tst.w	sl, #1
 802385a:	d1ab      	bne.n	80237b4 <_dtoa_r+0x984>
 802385c:	4633      	mov	r3, r6
 802385e:	461e      	mov	r6, r3
 8023860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023864:	2a30      	cmp	r2, #48	@ 0x30
 8023866:	d0fa      	beq.n	802385e <_dtoa_r+0xa2e>
 8023868:	e5bb      	b.n	80233e2 <_dtoa_r+0x5b2>
 802386a:	429f      	cmp	r7, r3
 802386c:	d1a3      	bne.n	80237b6 <_dtoa_r+0x986>
 802386e:	9b04      	ldr	r3, [sp, #16]
 8023870:	3301      	adds	r3, #1
 8023872:	9304      	str	r3, [sp, #16]
 8023874:	2331      	movs	r3, #49	@ 0x31
 8023876:	703b      	strb	r3, [r7, #0]
 8023878:	e5b3      	b.n	80233e2 <_dtoa_r+0x5b2>
 802387a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802387c:	4f16      	ldr	r7, [pc, #88]	@ (80238d8 <_dtoa_r+0xaa8>)
 802387e:	b11b      	cbz	r3, 8023888 <_dtoa_r+0xa58>
 8023880:	f107 0308 	add.w	r3, r7, #8
 8023884:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023886:	6013      	str	r3, [r2, #0]
 8023888:	4638      	mov	r0, r7
 802388a:	b011      	add	sp, #68	@ 0x44
 802388c:	ecbd 8b02 	vpop	{d8}
 8023890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023894:	9b07      	ldr	r3, [sp, #28]
 8023896:	2b01      	cmp	r3, #1
 8023898:	f77f ae36 	ble.w	8023508 <_dtoa_r+0x6d8>
 802389c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802389e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80238a0:	2001      	movs	r0, #1
 80238a2:	e656      	b.n	8023552 <_dtoa_r+0x722>
 80238a4:	f1bb 0f00 	cmp.w	fp, #0
 80238a8:	f77f aed7 	ble.w	802365a <_dtoa_r+0x82a>
 80238ac:	463e      	mov	r6, r7
 80238ae:	9801      	ldr	r0, [sp, #4]
 80238b0:	4621      	mov	r1, r4
 80238b2:	f7ff fa33 	bl	8022d1c <quorem>
 80238b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80238ba:	f806 ab01 	strb.w	sl, [r6], #1
 80238be:	1bf2      	subs	r2, r6, r7
 80238c0:	4593      	cmp	fp, r2
 80238c2:	ddb4      	ble.n	802382e <_dtoa_r+0x9fe>
 80238c4:	9901      	ldr	r1, [sp, #4]
 80238c6:	2300      	movs	r3, #0
 80238c8:	220a      	movs	r2, #10
 80238ca:	4648      	mov	r0, r9
 80238cc:	f000 f968 	bl	8023ba0 <__multadd>
 80238d0:	9001      	str	r0, [sp, #4]
 80238d2:	e7ec      	b.n	80238ae <_dtoa_r+0xa7e>
 80238d4:	08025d74 	.word	0x08025d74
 80238d8:	08025cf8 	.word	0x08025cf8

080238dc <_free_r>:
 80238dc:	b538      	push	{r3, r4, r5, lr}
 80238de:	4605      	mov	r5, r0
 80238e0:	2900      	cmp	r1, #0
 80238e2:	d041      	beq.n	8023968 <_free_r+0x8c>
 80238e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80238e8:	1f0c      	subs	r4, r1, #4
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	bfb8      	it	lt
 80238ee:	18e4      	addlt	r4, r4, r3
 80238f0:	f000 f8e8 	bl	8023ac4 <__malloc_lock>
 80238f4:	4a1d      	ldr	r2, [pc, #116]	@ (802396c <_free_r+0x90>)
 80238f6:	6813      	ldr	r3, [r2, #0]
 80238f8:	b933      	cbnz	r3, 8023908 <_free_r+0x2c>
 80238fa:	6063      	str	r3, [r4, #4]
 80238fc:	6014      	str	r4, [r2, #0]
 80238fe:	4628      	mov	r0, r5
 8023900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023904:	f000 b8e4 	b.w	8023ad0 <__malloc_unlock>
 8023908:	42a3      	cmp	r3, r4
 802390a:	d908      	bls.n	802391e <_free_r+0x42>
 802390c:	6820      	ldr	r0, [r4, #0]
 802390e:	1821      	adds	r1, r4, r0
 8023910:	428b      	cmp	r3, r1
 8023912:	bf01      	itttt	eq
 8023914:	6819      	ldreq	r1, [r3, #0]
 8023916:	685b      	ldreq	r3, [r3, #4]
 8023918:	1809      	addeq	r1, r1, r0
 802391a:	6021      	streq	r1, [r4, #0]
 802391c:	e7ed      	b.n	80238fa <_free_r+0x1e>
 802391e:	461a      	mov	r2, r3
 8023920:	685b      	ldr	r3, [r3, #4]
 8023922:	b10b      	cbz	r3, 8023928 <_free_r+0x4c>
 8023924:	42a3      	cmp	r3, r4
 8023926:	d9fa      	bls.n	802391e <_free_r+0x42>
 8023928:	6811      	ldr	r1, [r2, #0]
 802392a:	1850      	adds	r0, r2, r1
 802392c:	42a0      	cmp	r0, r4
 802392e:	d10b      	bne.n	8023948 <_free_r+0x6c>
 8023930:	6820      	ldr	r0, [r4, #0]
 8023932:	4401      	add	r1, r0
 8023934:	1850      	adds	r0, r2, r1
 8023936:	4283      	cmp	r3, r0
 8023938:	6011      	str	r1, [r2, #0]
 802393a:	d1e0      	bne.n	80238fe <_free_r+0x22>
 802393c:	6818      	ldr	r0, [r3, #0]
 802393e:	685b      	ldr	r3, [r3, #4]
 8023940:	6053      	str	r3, [r2, #4]
 8023942:	4408      	add	r0, r1
 8023944:	6010      	str	r0, [r2, #0]
 8023946:	e7da      	b.n	80238fe <_free_r+0x22>
 8023948:	d902      	bls.n	8023950 <_free_r+0x74>
 802394a:	230c      	movs	r3, #12
 802394c:	602b      	str	r3, [r5, #0]
 802394e:	e7d6      	b.n	80238fe <_free_r+0x22>
 8023950:	6820      	ldr	r0, [r4, #0]
 8023952:	1821      	adds	r1, r4, r0
 8023954:	428b      	cmp	r3, r1
 8023956:	bf04      	itt	eq
 8023958:	6819      	ldreq	r1, [r3, #0]
 802395a:	685b      	ldreq	r3, [r3, #4]
 802395c:	6063      	str	r3, [r4, #4]
 802395e:	bf04      	itt	eq
 8023960:	1809      	addeq	r1, r1, r0
 8023962:	6021      	streq	r1, [r4, #0]
 8023964:	6054      	str	r4, [r2, #4]
 8023966:	e7ca      	b.n	80238fe <_free_r+0x22>
 8023968:	bd38      	pop	{r3, r4, r5, pc}
 802396a:	bf00      	nop
 802396c:	24028b3c 	.word	0x24028b3c

08023970 <malloc>:
 8023970:	4b02      	ldr	r3, [pc, #8]	@ (802397c <malloc+0xc>)
 8023972:	4601      	mov	r1, r0
 8023974:	6818      	ldr	r0, [r3, #0]
 8023976:	f000 b825 	b.w	80239c4 <_malloc_r>
 802397a:	bf00      	nop
 802397c:	2400004c 	.word	0x2400004c

08023980 <sbrk_aligned>:
 8023980:	b570      	push	{r4, r5, r6, lr}
 8023982:	4e0f      	ldr	r6, [pc, #60]	@ (80239c0 <sbrk_aligned+0x40>)
 8023984:	460c      	mov	r4, r1
 8023986:	6831      	ldr	r1, [r6, #0]
 8023988:	4605      	mov	r5, r0
 802398a:	b911      	cbnz	r1, 8023992 <sbrk_aligned+0x12>
 802398c:	f000 feee 	bl	802476c <_sbrk_r>
 8023990:	6030      	str	r0, [r6, #0]
 8023992:	4621      	mov	r1, r4
 8023994:	4628      	mov	r0, r5
 8023996:	f000 fee9 	bl	802476c <_sbrk_r>
 802399a:	1c43      	adds	r3, r0, #1
 802399c:	d103      	bne.n	80239a6 <sbrk_aligned+0x26>
 802399e:	f04f 34ff 	mov.w	r4, #4294967295
 80239a2:	4620      	mov	r0, r4
 80239a4:	bd70      	pop	{r4, r5, r6, pc}
 80239a6:	1cc4      	adds	r4, r0, #3
 80239a8:	f024 0403 	bic.w	r4, r4, #3
 80239ac:	42a0      	cmp	r0, r4
 80239ae:	d0f8      	beq.n	80239a2 <sbrk_aligned+0x22>
 80239b0:	1a21      	subs	r1, r4, r0
 80239b2:	4628      	mov	r0, r5
 80239b4:	f000 feda 	bl	802476c <_sbrk_r>
 80239b8:	3001      	adds	r0, #1
 80239ba:	d1f2      	bne.n	80239a2 <sbrk_aligned+0x22>
 80239bc:	e7ef      	b.n	802399e <sbrk_aligned+0x1e>
 80239be:	bf00      	nop
 80239c0:	24028b38 	.word	0x24028b38

080239c4 <_malloc_r>:
 80239c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239c8:	1ccd      	adds	r5, r1, #3
 80239ca:	f025 0503 	bic.w	r5, r5, #3
 80239ce:	3508      	adds	r5, #8
 80239d0:	2d0c      	cmp	r5, #12
 80239d2:	bf38      	it	cc
 80239d4:	250c      	movcc	r5, #12
 80239d6:	2d00      	cmp	r5, #0
 80239d8:	4606      	mov	r6, r0
 80239da:	db01      	blt.n	80239e0 <_malloc_r+0x1c>
 80239dc:	42a9      	cmp	r1, r5
 80239de:	d904      	bls.n	80239ea <_malloc_r+0x26>
 80239e0:	230c      	movs	r3, #12
 80239e2:	6033      	str	r3, [r6, #0]
 80239e4:	2000      	movs	r0, #0
 80239e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023ac0 <_malloc_r+0xfc>
 80239ee:	f000 f869 	bl	8023ac4 <__malloc_lock>
 80239f2:	f8d8 3000 	ldr.w	r3, [r8]
 80239f6:	461c      	mov	r4, r3
 80239f8:	bb44      	cbnz	r4, 8023a4c <_malloc_r+0x88>
 80239fa:	4629      	mov	r1, r5
 80239fc:	4630      	mov	r0, r6
 80239fe:	f7ff ffbf 	bl	8023980 <sbrk_aligned>
 8023a02:	1c43      	adds	r3, r0, #1
 8023a04:	4604      	mov	r4, r0
 8023a06:	d158      	bne.n	8023aba <_malloc_r+0xf6>
 8023a08:	f8d8 4000 	ldr.w	r4, [r8]
 8023a0c:	4627      	mov	r7, r4
 8023a0e:	2f00      	cmp	r7, #0
 8023a10:	d143      	bne.n	8023a9a <_malloc_r+0xd6>
 8023a12:	2c00      	cmp	r4, #0
 8023a14:	d04b      	beq.n	8023aae <_malloc_r+0xea>
 8023a16:	6823      	ldr	r3, [r4, #0]
 8023a18:	4639      	mov	r1, r7
 8023a1a:	4630      	mov	r0, r6
 8023a1c:	eb04 0903 	add.w	r9, r4, r3
 8023a20:	f000 fea4 	bl	802476c <_sbrk_r>
 8023a24:	4581      	cmp	r9, r0
 8023a26:	d142      	bne.n	8023aae <_malloc_r+0xea>
 8023a28:	6821      	ldr	r1, [r4, #0]
 8023a2a:	1a6d      	subs	r5, r5, r1
 8023a2c:	4629      	mov	r1, r5
 8023a2e:	4630      	mov	r0, r6
 8023a30:	f7ff ffa6 	bl	8023980 <sbrk_aligned>
 8023a34:	3001      	adds	r0, #1
 8023a36:	d03a      	beq.n	8023aae <_malloc_r+0xea>
 8023a38:	6823      	ldr	r3, [r4, #0]
 8023a3a:	442b      	add	r3, r5
 8023a3c:	6023      	str	r3, [r4, #0]
 8023a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8023a42:	685a      	ldr	r2, [r3, #4]
 8023a44:	bb62      	cbnz	r2, 8023aa0 <_malloc_r+0xdc>
 8023a46:	f8c8 7000 	str.w	r7, [r8]
 8023a4a:	e00f      	b.n	8023a6c <_malloc_r+0xa8>
 8023a4c:	6822      	ldr	r2, [r4, #0]
 8023a4e:	1b52      	subs	r2, r2, r5
 8023a50:	d420      	bmi.n	8023a94 <_malloc_r+0xd0>
 8023a52:	2a0b      	cmp	r2, #11
 8023a54:	d917      	bls.n	8023a86 <_malloc_r+0xc2>
 8023a56:	1961      	adds	r1, r4, r5
 8023a58:	42a3      	cmp	r3, r4
 8023a5a:	6025      	str	r5, [r4, #0]
 8023a5c:	bf18      	it	ne
 8023a5e:	6059      	strne	r1, [r3, #4]
 8023a60:	6863      	ldr	r3, [r4, #4]
 8023a62:	bf08      	it	eq
 8023a64:	f8c8 1000 	streq.w	r1, [r8]
 8023a68:	5162      	str	r2, [r4, r5]
 8023a6a:	604b      	str	r3, [r1, #4]
 8023a6c:	4630      	mov	r0, r6
 8023a6e:	f000 f82f 	bl	8023ad0 <__malloc_unlock>
 8023a72:	f104 000b 	add.w	r0, r4, #11
 8023a76:	1d23      	adds	r3, r4, #4
 8023a78:	f020 0007 	bic.w	r0, r0, #7
 8023a7c:	1ac2      	subs	r2, r0, r3
 8023a7e:	bf1c      	itt	ne
 8023a80:	1a1b      	subne	r3, r3, r0
 8023a82:	50a3      	strne	r3, [r4, r2]
 8023a84:	e7af      	b.n	80239e6 <_malloc_r+0x22>
 8023a86:	6862      	ldr	r2, [r4, #4]
 8023a88:	42a3      	cmp	r3, r4
 8023a8a:	bf0c      	ite	eq
 8023a8c:	f8c8 2000 	streq.w	r2, [r8]
 8023a90:	605a      	strne	r2, [r3, #4]
 8023a92:	e7eb      	b.n	8023a6c <_malloc_r+0xa8>
 8023a94:	4623      	mov	r3, r4
 8023a96:	6864      	ldr	r4, [r4, #4]
 8023a98:	e7ae      	b.n	80239f8 <_malloc_r+0x34>
 8023a9a:	463c      	mov	r4, r7
 8023a9c:	687f      	ldr	r7, [r7, #4]
 8023a9e:	e7b6      	b.n	8023a0e <_malloc_r+0x4a>
 8023aa0:	461a      	mov	r2, r3
 8023aa2:	685b      	ldr	r3, [r3, #4]
 8023aa4:	42a3      	cmp	r3, r4
 8023aa6:	d1fb      	bne.n	8023aa0 <_malloc_r+0xdc>
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	6053      	str	r3, [r2, #4]
 8023aac:	e7de      	b.n	8023a6c <_malloc_r+0xa8>
 8023aae:	230c      	movs	r3, #12
 8023ab0:	6033      	str	r3, [r6, #0]
 8023ab2:	4630      	mov	r0, r6
 8023ab4:	f000 f80c 	bl	8023ad0 <__malloc_unlock>
 8023ab8:	e794      	b.n	80239e4 <_malloc_r+0x20>
 8023aba:	6005      	str	r5, [r0, #0]
 8023abc:	e7d6      	b.n	8023a6c <_malloc_r+0xa8>
 8023abe:	bf00      	nop
 8023ac0:	24028b3c 	.word	0x24028b3c

08023ac4 <__malloc_lock>:
 8023ac4:	4801      	ldr	r0, [pc, #4]	@ (8023acc <__malloc_lock+0x8>)
 8023ac6:	f7ff b912 	b.w	8022cee <__retarget_lock_acquire_recursive>
 8023aca:	bf00      	nop
 8023acc:	24028b34 	.word	0x24028b34

08023ad0 <__malloc_unlock>:
 8023ad0:	4801      	ldr	r0, [pc, #4]	@ (8023ad8 <__malloc_unlock+0x8>)
 8023ad2:	f7ff b90d 	b.w	8022cf0 <__retarget_lock_release_recursive>
 8023ad6:	bf00      	nop
 8023ad8:	24028b34 	.word	0x24028b34

08023adc <_Balloc>:
 8023adc:	b570      	push	{r4, r5, r6, lr}
 8023ade:	69c6      	ldr	r6, [r0, #28]
 8023ae0:	4604      	mov	r4, r0
 8023ae2:	460d      	mov	r5, r1
 8023ae4:	b976      	cbnz	r6, 8023b04 <_Balloc+0x28>
 8023ae6:	2010      	movs	r0, #16
 8023ae8:	f7ff ff42 	bl	8023970 <malloc>
 8023aec:	4602      	mov	r2, r0
 8023aee:	61e0      	str	r0, [r4, #28]
 8023af0:	b920      	cbnz	r0, 8023afc <_Balloc+0x20>
 8023af2:	4b18      	ldr	r3, [pc, #96]	@ (8023b54 <_Balloc+0x78>)
 8023af4:	4818      	ldr	r0, [pc, #96]	@ (8023b58 <_Balloc+0x7c>)
 8023af6:	216b      	movs	r1, #107	@ 0x6b
 8023af8:	f7fe fa8e 	bl	8022018 <__assert_func>
 8023afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023b00:	6006      	str	r6, [r0, #0]
 8023b02:	60c6      	str	r6, [r0, #12]
 8023b04:	69e6      	ldr	r6, [r4, #28]
 8023b06:	68f3      	ldr	r3, [r6, #12]
 8023b08:	b183      	cbz	r3, 8023b2c <_Balloc+0x50>
 8023b0a:	69e3      	ldr	r3, [r4, #28]
 8023b0c:	68db      	ldr	r3, [r3, #12]
 8023b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023b12:	b9b8      	cbnz	r0, 8023b44 <_Balloc+0x68>
 8023b14:	2101      	movs	r1, #1
 8023b16:	fa01 f605 	lsl.w	r6, r1, r5
 8023b1a:	1d72      	adds	r2, r6, #5
 8023b1c:	0092      	lsls	r2, r2, #2
 8023b1e:	4620      	mov	r0, r4
 8023b20:	f000 fe34 	bl	802478c <_calloc_r>
 8023b24:	b160      	cbz	r0, 8023b40 <_Balloc+0x64>
 8023b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023b2a:	e00e      	b.n	8023b4a <_Balloc+0x6e>
 8023b2c:	2221      	movs	r2, #33	@ 0x21
 8023b2e:	2104      	movs	r1, #4
 8023b30:	4620      	mov	r0, r4
 8023b32:	f000 fe2b 	bl	802478c <_calloc_r>
 8023b36:	69e3      	ldr	r3, [r4, #28]
 8023b38:	60f0      	str	r0, [r6, #12]
 8023b3a:	68db      	ldr	r3, [r3, #12]
 8023b3c:	2b00      	cmp	r3, #0
 8023b3e:	d1e4      	bne.n	8023b0a <_Balloc+0x2e>
 8023b40:	2000      	movs	r0, #0
 8023b42:	bd70      	pop	{r4, r5, r6, pc}
 8023b44:	6802      	ldr	r2, [r0, #0]
 8023b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023b4a:	2300      	movs	r3, #0
 8023b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023b50:	e7f7      	b.n	8023b42 <_Balloc+0x66>
 8023b52:	bf00      	nop
 8023b54:	08025d05 	.word	0x08025d05
 8023b58:	08025d85 	.word	0x08025d85

08023b5c <_Bfree>:
 8023b5c:	b570      	push	{r4, r5, r6, lr}
 8023b5e:	69c6      	ldr	r6, [r0, #28]
 8023b60:	4605      	mov	r5, r0
 8023b62:	460c      	mov	r4, r1
 8023b64:	b976      	cbnz	r6, 8023b84 <_Bfree+0x28>
 8023b66:	2010      	movs	r0, #16
 8023b68:	f7ff ff02 	bl	8023970 <malloc>
 8023b6c:	4602      	mov	r2, r0
 8023b6e:	61e8      	str	r0, [r5, #28]
 8023b70:	b920      	cbnz	r0, 8023b7c <_Bfree+0x20>
 8023b72:	4b09      	ldr	r3, [pc, #36]	@ (8023b98 <_Bfree+0x3c>)
 8023b74:	4809      	ldr	r0, [pc, #36]	@ (8023b9c <_Bfree+0x40>)
 8023b76:	218f      	movs	r1, #143	@ 0x8f
 8023b78:	f7fe fa4e 	bl	8022018 <__assert_func>
 8023b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023b80:	6006      	str	r6, [r0, #0]
 8023b82:	60c6      	str	r6, [r0, #12]
 8023b84:	b13c      	cbz	r4, 8023b96 <_Bfree+0x3a>
 8023b86:	69eb      	ldr	r3, [r5, #28]
 8023b88:	6862      	ldr	r2, [r4, #4]
 8023b8a:	68db      	ldr	r3, [r3, #12]
 8023b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023b90:	6021      	str	r1, [r4, #0]
 8023b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023b96:	bd70      	pop	{r4, r5, r6, pc}
 8023b98:	08025d05 	.word	0x08025d05
 8023b9c:	08025d85 	.word	0x08025d85

08023ba0 <__multadd>:
 8023ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ba4:	690d      	ldr	r5, [r1, #16]
 8023ba6:	4607      	mov	r7, r0
 8023ba8:	460c      	mov	r4, r1
 8023baa:	461e      	mov	r6, r3
 8023bac:	f101 0c14 	add.w	ip, r1, #20
 8023bb0:	2000      	movs	r0, #0
 8023bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8023bb6:	b299      	uxth	r1, r3
 8023bb8:	fb02 6101 	mla	r1, r2, r1, r6
 8023bbc:	0c1e      	lsrs	r6, r3, #16
 8023bbe:	0c0b      	lsrs	r3, r1, #16
 8023bc0:	fb02 3306 	mla	r3, r2, r6, r3
 8023bc4:	b289      	uxth	r1, r1
 8023bc6:	3001      	adds	r0, #1
 8023bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023bcc:	4285      	cmp	r5, r0
 8023bce:	f84c 1b04 	str.w	r1, [ip], #4
 8023bd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8023bd6:	dcec      	bgt.n	8023bb2 <__multadd+0x12>
 8023bd8:	b30e      	cbz	r6, 8023c1e <__multadd+0x7e>
 8023bda:	68a3      	ldr	r3, [r4, #8]
 8023bdc:	42ab      	cmp	r3, r5
 8023bde:	dc19      	bgt.n	8023c14 <__multadd+0x74>
 8023be0:	6861      	ldr	r1, [r4, #4]
 8023be2:	4638      	mov	r0, r7
 8023be4:	3101      	adds	r1, #1
 8023be6:	f7ff ff79 	bl	8023adc <_Balloc>
 8023bea:	4680      	mov	r8, r0
 8023bec:	b928      	cbnz	r0, 8023bfa <__multadd+0x5a>
 8023bee:	4602      	mov	r2, r0
 8023bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8023c24 <__multadd+0x84>)
 8023bf2:	480d      	ldr	r0, [pc, #52]	@ (8023c28 <__multadd+0x88>)
 8023bf4:	21ba      	movs	r1, #186	@ 0xba
 8023bf6:	f7fe fa0f 	bl	8022018 <__assert_func>
 8023bfa:	6922      	ldr	r2, [r4, #16]
 8023bfc:	3202      	adds	r2, #2
 8023bfe:	f104 010c 	add.w	r1, r4, #12
 8023c02:	0092      	lsls	r2, r2, #2
 8023c04:	300c      	adds	r0, #12
 8023c06:	f7ff f874 	bl	8022cf2 <memcpy>
 8023c0a:	4621      	mov	r1, r4
 8023c0c:	4638      	mov	r0, r7
 8023c0e:	f7ff ffa5 	bl	8023b5c <_Bfree>
 8023c12:	4644      	mov	r4, r8
 8023c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023c18:	3501      	adds	r5, #1
 8023c1a:	615e      	str	r6, [r3, #20]
 8023c1c:	6125      	str	r5, [r4, #16]
 8023c1e:	4620      	mov	r0, r4
 8023c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c24:	08025d74 	.word	0x08025d74
 8023c28:	08025d85 	.word	0x08025d85

08023c2c <__hi0bits>:
 8023c2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8023c30:	4603      	mov	r3, r0
 8023c32:	bf36      	itet	cc
 8023c34:	0403      	lslcc	r3, r0, #16
 8023c36:	2000      	movcs	r0, #0
 8023c38:	2010      	movcc	r0, #16
 8023c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8023c3e:	bf3c      	itt	cc
 8023c40:	021b      	lslcc	r3, r3, #8
 8023c42:	3008      	addcc	r0, #8
 8023c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023c48:	bf3c      	itt	cc
 8023c4a:	011b      	lslcc	r3, r3, #4
 8023c4c:	3004      	addcc	r0, #4
 8023c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023c52:	bf3c      	itt	cc
 8023c54:	009b      	lslcc	r3, r3, #2
 8023c56:	3002      	addcc	r0, #2
 8023c58:	2b00      	cmp	r3, #0
 8023c5a:	db05      	blt.n	8023c68 <__hi0bits+0x3c>
 8023c5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8023c60:	f100 0001 	add.w	r0, r0, #1
 8023c64:	bf08      	it	eq
 8023c66:	2020      	moveq	r0, #32
 8023c68:	4770      	bx	lr

08023c6a <__lo0bits>:
 8023c6a:	6803      	ldr	r3, [r0, #0]
 8023c6c:	4602      	mov	r2, r0
 8023c6e:	f013 0007 	ands.w	r0, r3, #7
 8023c72:	d00b      	beq.n	8023c8c <__lo0bits+0x22>
 8023c74:	07d9      	lsls	r1, r3, #31
 8023c76:	d421      	bmi.n	8023cbc <__lo0bits+0x52>
 8023c78:	0798      	lsls	r0, r3, #30
 8023c7a:	bf49      	itett	mi
 8023c7c:	085b      	lsrmi	r3, r3, #1
 8023c7e:	089b      	lsrpl	r3, r3, #2
 8023c80:	2001      	movmi	r0, #1
 8023c82:	6013      	strmi	r3, [r2, #0]
 8023c84:	bf5c      	itt	pl
 8023c86:	6013      	strpl	r3, [r2, #0]
 8023c88:	2002      	movpl	r0, #2
 8023c8a:	4770      	bx	lr
 8023c8c:	b299      	uxth	r1, r3
 8023c8e:	b909      	cbnz	r1, 8023c94 <__lo0bits+0x2a>
 8023c90:	0c1b      	lsrs	r3, r3, #16
 8023c92:	2010      	movs	r0, #16
 8023c94:	b2d9      	uxtb	r1, r3
 8023c96:	b909      	cbnz	r1, 8023c9c <__lo0bits+0x32>
 8023c98:	3008      	adds	r0, #8
 8023c9a:	0a1b      	lsrs	r3, r3, #8
 8023c9c:	0719      	lsls	r1, r3, #28
 8023c9e:	bf04      	itt	eq
 8023ca0:	091b      	lsreq	r3, r3, #4
 8023ca2:	3004      	addeq	r0, #4
 8023ca4:	0799      	lsls	r1, r3, #30
 8023ca6:	bf04      	itt	eq
 8023ca8:	089b      	lsreq	r3, r3, #2
 8023caa:	3002      	addeq	r0, #2
 8023cac:	07d9      	lsls	r1, r3, #31
 8023cae:	d403      	bmi.n	8023cb8 <__lo0bits+0x4e>
 8023cb0:	085b      	lsrs	r3, r3, #1
 8023cb2:	f100 0001 	add.w	r0, r0, #1
 8023cb6:	d003      	beq.n	8023cc0 <__lo0bits+0x56>
 8023cb8:	6013      	str	r3, [r2, #0]
 8023cba:	4770      	bx	lr
 8023cbc:	2000      	movs	r0, #0
 8023cbe:	4770      	bx	lr
 8023cc0:	2020      	movs	r0, #32
 8023cc2:	4770      	bx	lr

08023cc4 <__i2b>:
 8023cc4:	b510      	push	{r4, lr}
 8023cc6:	460c      	mov	r4, r1
 8023cc8:	2101      	movs	r1, #1
 8023cca:	f7ff ff07 	bl	8023adc <_Balloc>
 8023cce:	4602      	mov	r2, r0
 8023cd0:	b928      	cbnz	r0, 8023cde <__i2b+0x1a>
 8023cd2:	4b05      	ldr	r3, [pc, #20]	@ (8023ce8 <__i2b+0x24>)
 8023cd4:	4805      	ldr	r0, [pc, #20]	@ (8023cec <__i2b+0x28>)
 8023cd6:	f240 1145 	movw	r1, #325	@ 0x145
 8023cda:	f7fe f99d 	bl	8022018 <__assert_func>
 8023cde:	2301      	movs	r3, #1
 8023ce0:	6144      	str	r4, [r0, #20]
 8023ce2:	6103      	str	r3, [r0, #16]
 8023ce4:	bd10      	pop	{r4, pc}
 8023ce6:	bf00      	nop
 8023ce8:	08025d74 	.word	0x08025d74
 8023cec:	08025d85 	.word	0x08025d85

08023cf0 <__multiply>:
 8023cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cf4:	4614      	mov	r4, r2
 8023cf6:	690a      	ldr	r2, [r1, #16]
 8023cf8:	6923      	ldr	r3, [r4, #16]
 8023cfa:	429a      	cmp	r2, r3
 8023cfc:	bfa8      	it	ge
 8023cfe:	4623      	movge	r3, r4
 8023d00:	460f      	mov	r7, r1
 8023d02:	bfa4      	itt	ge
 8023d04:	460c      	movge	r4, r1
 8023d06:	461f      	movge	r7, r3
 8023d08:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023d0c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8023d10:	68a3      	ldr	r3, [r4, #8]
 8023d12:	6861      	ldr	r1, [r4, #4]
 8023d14:	eb0a 0609 	add.w	r6, sl, r9
 8023d18:	42b3      	cmp	r3, r6
 8023d1a:	b085      	sub	sp, #20
 8023d1c:	bfb8      	it	lt
 8023d1e:	3101      	addlt	r1, #1
 8023d20:	f7ff fedc 	bl	8023adc <_Balloc>
 8023d24:	b930      	cbnz	r0, 8023d34 <__multiply+0x44>
 8023d26:	4602      	mov	r2, r0
 8023d28:	4b44      	ldr	r3, [pc, #272]	@ (8023e3c <__multiply+0x14c>)
 8023d2a:	4845      	ldr	r0, [pc, #276]	@ (8023e40 <__multiply+0x150>)
 8023d2c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8023d30:	f7fe f972 	bl	8022018 <__assert_func>
 8023d34:	f100 0514 	add.w	r5, r0, #20
 8023d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8023d3c:	462b      	mov	r3, r5
 8023d3e:	2200      	movs	r2, #0
 8023d40:	4543      	cmp	r3, r8
 8023d42:	d321      	bcc.n	8023d88 <__multiply+0x98>
 8023d44:	f107 0114 	add.w	r1, r7, #20
 8023d48:	f104 0214 	add.w	r2, r4, #20
 8023d4c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8023d50:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8023d54:	9302      	str	r3, [sp, #8]
 8023d56:	1b13      	subs	r3, r2, r4
 8023d58:	3b15      	subs	r3, #21
 8023d5a:	f023 0303 	bic.w	r3, r3, #3
 8023d5e:	3304      	adds	r3, #4
 8023d60:	f104 0715 	add.w	r7, r4, #21
 8023d64:	42ba      	cmp	r2, r7
 8023d66:	bf38      	it	cc
 8023d68:	2304      	movcc	r3, #4
 8023d6a:	9301      	str	r3, [sp, #4]
 8023d6c:	9b02      	ldr	r3, [sp, #8]
 8023d6e:	9103      	str	r1, [sp, #12]
 8023d70:	428b      	cmp	r3, r1
 8023d72:	d80c      	bhi.n	8023d8e <__multiply+0x9e>
 8023d74:	2e00      	cmp	r6, #0
 8023d76:	dd03      	ble.n	8023d80 <__multiply+0x90>
 8023d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	d05b      	beq.n	8023e38 <__multiply+0x148>
 8023d80:	6106      	str	r6, [r0, #16]
 8023d82:	b005      	add	sp, #20
 8023d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d88:	f843 2b04 	str.w	r2, [r3], #4
 8023d8c:	e7d8      	b.n	8023d40 <__multiply+0x50>
 8023d8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8023d92:	f1ba 0f00 	cmp.w	sl, #0
 8023d96:	d024      	beq.n	8023de2 <__multiply+0xf2>
 8023d98:	f104 0e14 	add.w	lr, r4, #20
 8023d9c:	46a9      	mov	r9, r5
 8023d9e:	f04f 0c00 	mov.w	ip, #0
 8023da2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023da6:	f8d9 3000 	ldr.w	r3, [r9]
 8023daa:	fa1f fb87 	uxth.w	fp, r7
 8023dae:	b29b      	uxth	r3, r3
 8023db0:	fb0a 330b 	mla	r3, sl, fp, r3
 8023db4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8023db8:	f8d9 7000 	ldr.w	r7, [r9]
 8023dbc:	4463      	add	r3, ip
 8023dbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8023dc2:	fb0a c70b 	mla	r7, sl, fp, ip
 8023dc6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8023dca:	b29b      	uxth	r3, r3
 8023dcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8023dd0:	4572      	cmp	r2, lr
 8023dd2:	f849 3b04 	str.w	r3, [r9], #4
 8023dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8023dda:	d8e2      	bhi.n	8023da2 <__multiply+0xb2>
 8023ddc:	9b01      	ldr	r3, [sp, #4]
 8023dde:	f845 c003 	str.w	ip, [r5, r3]
 8023de2:	9b03      	ldr	r3, [sp, #12]
 8023de4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8023de8:	3104      	adds	r1, #4
 8023dea:	f1b9 0f00 	cmp.w	r9, #0
 8023dee:	d021      	beq.n	8023e34 <__multiply+0x144>
 8023df0:	682b      	ldr	r3, [r5, #0]
 8023df2:	f104 0c14 	add.w	ip, r4, #20
 8023df6:	46ae      	mov	lr, r5
 8023df8:	f04f 0a00 	mov.w	sl, #0
 8023dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8023e00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8023e04:	fb09 770b 	mla	r7, r9, fp, r7
 8023e08:	4457      	add	r7, sl
 8023e0a:	b29b      	uxth	r3, r3
 8023e0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8023e10:	f84e 3b04 	str.w	r3, [lr], #4
 8023e14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8023e18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023e1c:	f8be 3000 	ldrh.w	r3, [lr]
 8023e20:	fb09 330a 	mla	r3, r9, sl, r3
 8023e24:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8023e28:	4562      	cmp	r2, ip
 8023e2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023e2e:	d8e5      	bhi.n	8023dfc <__multiply+0x10c>
 8023e30:	9f01      	ldr	r7, [sp, #4]
 8023e32:	51eb      	str	r3, [r5, r7]
 8023e34:	3504      	adds	r5, #4
 8023e36:	e799      	b.n	8023d6c <__multiply+0x7c>
 8023e38:	3e01      	subs	r6, #1
 8023e3a:	e79b      	b.n	8023d74 <__multiply+0x84>
 8023e3c:	08025d74 	.word	0x08025d74
 8023e40:	08025d85 	.word	0x08025d85

08023e44 <__pow5mult>:
 8023e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e48:	4615      	mov	r5, r2
 8023e4a:	f012 0203 	ands.w	r2, r2, #3
 8023e4e:	4607      	mov	r7, r0
 8023e50:	460e      	mov	r6, r1
 8023e52:	d007      	beq.n	8023e64 <__pow5mult+0x20>
 8023e54:	4c25      	ldr	r4, [pc, #148]	@ (8023eec <__pow5mult+0xa8>)
 8023e56:	3a01      	subs	r2, #1
 8023e58:	2300      	movs	r3, #0
 8023e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023e5e:	f7ff fe9f 	bl	8023ba0 <__multadd>
 8023e62:	4606      	mov	r6, r0
 8023e64:	10ad      	asrs	r5, r5, #2
 8023e66:	d03d      	beq.n	8023ee4 <__pow5mult+0xa0>
 8023e68:	69fc      	ldr	r4, [r7, #28]
 8023e6a:	b97c      	cbnz	r4, 8023e8c <__pow5mult+0x48>
 8023e6c:	2010      	movs	r0, #16
 8023e6e:	f7ff fd7f 	bl	8023970 <malloc>
 8023e72:	4602      	mov	r2, r0
 8023e74:	61f8      	str	r0, [r7, #28]
 8023e76:	b928      	cbnz	r0, 8023e84 <__pow5mult+0x40>
 8023e78:	4b1d      	ldr	r3, [pc, #116]	@ (8023ef0 <__pow5mult+0xac>)
 8023e7a:	481e      	ldr	r0, [pc, #120]	@ (8023ef4 <__pow5mult+0xb0>)
 8023e7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8023e80:	f7fe f8ca 	bl	8022018 <__assert_func>
 8023e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023e88:	6004      	str	r4, [r0, #0]
 8023e8a:	60c4      	str	r4, [r0, #12]
 8023e8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8023e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023e94:	b94c      	cbnz	r4, 8023eaa <__pow5mult+0x66>
 8023e96:	f240 2171 	movw	r1, #625	@ 0x271
 8023e9a:	4638      	mov	r0, r7
 8023e9c:	f7ff ff12 	bl	8023cc4 <__i2b>
 8023ea0:	2300      	movs	r3, #0
 8023ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8023ea6:	4604      	mov	r4, r0
 8023ea8:	6003      	str	r3, [r0, #0]
 8023eaa:	f04f 0900 	mov.w	r9, #0
 8023eae:	07eb      	lsls	r3, r5, #31
 8023eb0:	d50a      	bpl.n	8023ec8 <__pow5mult+0x84>
 8023eb2:	4631      	mov	r1, r6
 8023eb4:	4622      	mov	r2, r4
 8023eb6:	4638      	mov	r0, r7
 8023eb8:	f7ff ff1a 	bl	8023cf0 <__multiply>
 8023ebc:	4631      	mov	r1, r6
 8023ebe:	4680      	mov	r8, r0
 8023ec0:	4638      	mov	r0, r7
 8023ec2:	f7ff fe4b 	bl	8023b5c <_Bfree>
 8023ec6:	4646      	mov	r6, r8
 8023ec8:	106d      	asrs	r5, r5, #1
 8023eca:	d00b      	beq.n	8023ee4 <__pow5mult+0xa0>
 8023ecc:	6820      	ldr	r0, [r4, #0]
 8023ece:	b938      	cbnz	r0, 8023ee0 <__pow5mult+0x9c>
 8023ed0:	4622      	mov	r2, r4
 8023ed2:	4621      	mov	r1, r4
 8023ed4:	4638      	mov	r0, r7
 8023ed6:	f7ff ff0b 	bl	8023cf0 <__multiply>
 8023eda:	6020      	str	r0, [r4, #0]
 8023edc:	f8c0 9000 	str.w	r9, [r0]
 8023ee0:	4604      	mov	r4, r0
 8023ee2:	e7e4      	b.n	8023eae <__pow5mult+0x6a>
 8023ee4:	4630      	mov	r0, r6
 8023ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023eea:	bf00      	nop
 8023eec:	08025de0 	.word	0x08025de0
 8023ef0:	08025d05 	.word	0x08025d05
 8023ef4:	08025d85 	.word	0x08025d85

08023ef8 <__lshift>:
 8023ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023efc:	460c      	mov	r4, r1
 8023efe:	6849      	ldr	r1, [r1, #4]
 8023f00:	6923      	ldr	r3, [r4, #16]
 8023f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023f06:	68a3      	ldr	r3, [r4, #8]
 8023f08:	4607      	mov	r7, r0
 8023f0a:	4691      	mov	r9, r2
 8023f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023f10:	f108 0601 	add.w	r6, r8, #1
 8023f14:	42b3      	cmp	r3, r6
 8023f16:	db0b      	blt.n	8023f30 <__lshift+0x38>
 8023f18:	4638      	mov	r0, r7
 8023f1a:	f7ff fddf 	bl	8023adc <_Balloc>
 8023f1e:	4605      	mov	r5, r0
 8023f20:	b948      	cbnz	r0, 8023f36 <__lshift+0x3e>
 8023f22:	4602      	mov	r2, r0
 8023f24:	4b28      	ldr	r3, [pc, #160]	@ (8023fc8 <__lshift+0xd0>)
 8023f26:	4829      	ldr	r0, [pc, #164]	@ (8023fcc <__lshift+0xd4>)
 8023f28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8023f2c:	f7fe f874 	bl	8022018 <__assert_func>
 8023f30:	3101      	adds	r1, #1
 8023f32:	005b      	lsls	r3, r3, #1
 8023f34:	e7ee      	b.n	8023f14 <__lshift+0x1c>
 8023f36:	2300      	movs	r3, #0
 8023f38:	f100 0114 	add.w	r1, r0, #20
 8023f3c:	f100 0210 	add.w	r2, r0, #16
 8023f40:	4618      	mov	r0, r3
 8023f42:	4553      	cmp	r3, sl
 8023f44:	db33      	blt.n	8023fae <__lshift+0xb6>
 8023f46:	6920      	ldr	r0, [r4, #16]
 8023f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023f4c:	f104 0314 	add.w	r3, r4, #20
 8023f50:	f019 091f 	ands.w	r9, r9, #31
 8023f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023f58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023f5c:	d02b      	beq.n	8023fb6 <__lshift+0xbe>
 8023f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8023f62:	468a      	mov	sl, r1
 8023f64:	2200      	movs	r2, #0
 8023f66:	6818      	ldr	r0, [r3, #0]
 8023f68:	fa00 f009 	lsl.w	r0, r0, r9
 8023f6c:	4310      	orrs	r0, r2
 8023f6e:	f84a 0b04 	str.w	r0, [sl], #4
 8023f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f76:	459c      	cmp	ip, r3
 8023f78:	fa22 f20e 	lsr.w	r2, r2, lr
 8023f7c:	d8f3      	bhi.n	8023f66 <__lshift+0x6e>
 8023f7e:	ebac 0304 	sub.w	r3, ip, r4
 8023f82:	3b15      	subs	r3, #21
 8023f84:	f023 0303 	bic.w	r3, r3, #3
 8023f88:	3304      	adds	r3, #4
 8023f8a:	f104 0015 	add.w	r0, r4, #21
 8023f8e:	4584      	cmp	ip, r0
 8023f90:	bf38      	it	cc
 8023f92:	2304      	movcc	r3, #4
 8023f94:	50ca      	str	r2, [r1, r3]
 8023f96:	b10a      	cbz	r2, 8023f9c <__lshift+0xa4>
 8023f98:	f108 0602 	add.w	r6, r8, #2
 8023f9c:	3e01      	subs	r6, #1
 8023f9e:	4638      	mov	r0, r7
 8023fa0:	612e      	str	r6, [r5, #16]
 8023fa2:	4621      	mov	r1, r4
 8023fa4:	f7ff fdda 	bl	8023b5c <_Bfree>
 8023fa8:	4628      	mov	r0, r5
 8023faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8023fb2:	3301      	adds	r3, #1
 8023fb4:	e7c5      	b.n	8023f42 <__lshift+0x4a>
 8023fb6:	3904      	subs	r1, #4
 8023fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8023fbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8023fc0:	459c      	cmp	ip, r3
 8023fc2:	d8f9      	bhi.n	8023fb8 <__lshift+0xc0>
 8023fc4:	e7ea      	b.n	8023f9c <__lshift+0xa4>
 8023fc6:	bf00      	nop
 8023fc8:	08025d74 	.word	0x08025d74
 8023fcc:	08025d85 	.word	0x08025d85

08023fd0 <__mcmp>:
 8023fd0:	690a      	ldr	r2, [r1, #16]
 8023fd2:	4603      	mov	r3, r0
 8023fd4:	6900      	ldr	r0, [r0, #16]
 8023fd6:	1a80      	subs	r0, r0, r2
 8023fd8:	b530      	push	{r4, r5, lr}
 8023fda:	d10e      	bne.n	8023ffa <__mcmp+0x2a>
 8023fdc:	3314      	adds	r3, #20
 8023fde:	3114      	adds	r1, #20
 8023fe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8023fe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023fe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023fec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023ff0:	4295      	cmp	r5, r2
 8023ff2:	d003      	beq.n	8023ffc <__mcmp+0x2c>
 8023ff4:	d205      	bcs.n	8024002 <__mcmp+0x32>
 8023ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8023ffa:	bd30      	pop	{r4, r5, pc}
 8023ffc:	42a3      	cmp	r3, r4
 8023ffe:	d3f3      	bcc.n	8023fe8 <__mcmp+0x18>
 8024000:	e7fb      	b.n	8023ffa <__mcmp+0x2a>
 8024002:	2001      	movs	r0, #1
 8024004:	e7f9      	b.n	8023ffa <__mcmp+0x2a>
	...

08024008 <__mdiff>:
 8024008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802400c:	4689      	mov	r9, r1
 802400e:	4606      	mov	r6, r0
 8024010:	4611      	mov	r1, r2
 8024012:	4648      	mov	r0, r9
 8024014:	4614      	mov	r4, r2
 8024016:	f7ff ffdb 	bl	8023fd0 <__mcmp>
 802401a:	1e05      	subs	r5, r0, #0
 802401c:	d112      	bne.n	8024044 <__mdiff+0x3c>
 802401e:	4629      	mov	r1, r5
 8024020:	4630      	mov	r0, r6
 8024022:	f7ff fd5b 	bl	8023adc <_Balloc>
 8024026:	4602      	mov	r2, r0
 8024028:	b928      	cbnz	r0, 8024036 <__mdiff+0x2e>
 802402a:	4b3f      	ldr	r3, [pc, #252]	@ (8024128 <__mdiff+0x120>)
 802402c:	f240 2137 	movw	r1, #567	@ 0x237
 8024030:	483e      	ldr	r0, [pc, #248]	@ (802412c <__mdiff+0x124>)
 8024032:	f7fd fff1 	bl	8022018 <__assert_func>
 8024036:	2301      	movs	r3, #1
 8024038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802403c:	4610      	mov	r0, r2
 802403e:	b003      	add	sp, #12
 8024040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024044:	bfbc      	itt	lt
 8024046:	464b      	movlt	r3, r9
 8024048:	46a1      	movlt	r9, r4
 802404a:	4630      	mov	r0, r6
 802404c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8024050:	bfba      	itte	lt
 8024052:	461c      	movlt	r4, r3
 8024054:	2501      	movlt	r5, #1
 8024056:	2500      	movge	r5, #0
 8024058:	f7ff fd40 	bl	8023adc <_Balloc>
 802405c:	4602      	mov	r2, r0
 802405e:	b918      	cbnz	r0, 8024068 <__mdiff+0x60>
 8024060:	4b31      	ldr	r3, [pc, #196]	@ (8024128 <__mdiff+0x120>)
 8024062:	f240 2145 	movw	r1, #581	@ 0x245
 8024066:	e7e3      	b.n	8024030 <__mdiff+0x28>
 8024068:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802406c:	6926      	ldr	r6, [r4, #16]
 802406e:	60c5      	str	r5, [r0, #12]
 8024070:	f109 0310 	add.w	r3, r9, #16
 8024074:	f109 0514 	add.w	r5, r9, #20
 8024078:	f104 0e14 	add.w	lr, r4, #20
 802407c:	f100 0b14 	add.w	fp, r0, #20
 8024080:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8024084:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8024088:	9301      	str	r3, [sp, #4]
 802408a:	46d9      	mov	r9, fp
 802408c:	f04f 0c00 	mov.w	ip, #0
 8024090:	9b01      	ldr	r3, [sp, #4]
 8024092:	f85e 0b04 	ldr.w	r0, [lr], #4
 8024096:	f853 af04 	ldr.w	sl, [r3, #4]!
 802409a:	9301      	str	r3, [sp, #4]
 802409c:	fa1f f38a 	uxth.w	r3, sl
 80240a0:	4619      	mov	r1, r3
 80240a2:	b283      	uxth	r3, r0
 80240a4:	1acb      	subs	r3, r1, r3
 80240a6:	0c00      	lsrs	r0, r0, #16
 80240a8:	4463      	add	r3, ip
 80240aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80240ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80240b2:	b29b      	uxth	r3, r3
 80240b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80240b8:	4576      	cmp	r6, lr
 80240ba:	f849 3b04 	str.w	r3, [r9], #4
 80240be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80240c2:	d8e5      	bhi.n	8024090 <__mdiff+0x88>
 80240c4:	1b33      	subs	r3, r6, r4
 80240c6:	3b15      	subs	r3, #21
 80240c8:	f023 0303 	bic.w	r3, r3, #3
 80240cc:	3415      	adds	r4, #21
 80240ce:	3304      	adds	r3, #4
 80240d0:	42a6      	cmp	r6, r4
 80240d2:	bf38      	it	cc
 80240d4:	2304      	movcc	r3, #4
 80240d6:	441d      	add	r5, r3
 80240d8:	445b      	add	r3, fp
 80240da:	461e      	mov	r6, r3
 80240dc:	462c      	mov	r4, r5
 80240de:	4544      	cmp	r4, r8
 80240e0:	d30e      	bcc.n	8024100 <__mdiff+0xf8>
 80240e2:	f108 0103 	add.w	r1, r8, #3
 80240e6:	1b49      	subs	r1, r1, r5
 80240e8:	f021 0103 	bic.w	r1, r1, #3
 80240ec:	3d03      	subs	r5, #3
 80240ee:	45a8      	cmp	r8, r5
 80240f0:	bf38      	it	cc
 80240f2:	2100      	movcc	r1, #0
 80240f4:	440b      	add	r3, r1
 80240f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80240fa:	b191      	cbz	r1, 8024122 <__mdiff+0x11a>
 80240fc:	6117      	str	r7, [r2, #16]
 80240fe:	e79d      	b.n	802403c <__mdiff+0x34>
 8024100:	f854 1b04 	ldr.w	r1, [r4], #4
 8024104:	46e6      	mov	lr, ip
 8024106:	0c08      	lsrs	r0, r1, #16
 8024108:	fa1c fc81 	uxtah	ip, ip, r1
 802410c:	4471      	add	r1, lr
 802410e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8024112:	b289      	uxth	r1, r1
 8024114:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8024118:	f846 1b04 	str.w	r1, [r6], #4
 802411c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024120:	e7dd      	b.n	80240de <__mdiff+0xd6>
 8024122:	3f01      	subs	r7, #1
 8024124:	e7e7      	b.n	80240f6 <__mdiff+0xee>
 8024126:	bf00      	nop
 8024128:	08025d74 	.word	0x08025d74
 802412c:	08025d85 	.word	0x08025d85

08024130 <__d2b>:
 8024130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024134:	460f      	mov	r7, r1
 8024136:	2101      	movs	r1, #1
 8024138:	ec59 8b10 	vmov	r8, r9, d0
 802413c:	4616      	mov	r6, r2
 802413e:	f7ff fccd 	bl	8023adc <_Balloc>
 8024142:	4604      	mov	r4, r0
 8024144:	b930      	cbnz	r0, 8024154 <__d2b+0x24>
 8024146:	4602      	mov	r2, r0
 8024148:	4b23      	ldr	r3, [pc, #140]	@ (80241d8 <__d2b+0xa8>)
 802414a:	4824      	ldr	r0, [pc, #144]	@ (80241dc <__d2b+0xac>)
 802414c:	f240 310f 	movw	r1, #783	@ 0x30f
 8024150:	f7fd ff62 	bl	8022018 <__assert_func>
 8024154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802415c:	b10d      	cbz	r5, 8024162 <__d2b+0x32>
 802415e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024162:	9301      	str	r3, [sp, #4]
 8024164:	f1b8 0300 	subs.w	r3, r8, #0
 8024168:	d023      	beq.n	80241b2 <__d2b+0x82>
 802416a:	4668      	mov	r0, sp
 802416c:	9300      	str	r3, [sp, #0]
 802416e:	f7ff fd7c 	bl	8023c6a <__lo0bits>
 8024172:	e9dd 1200 	ldrd	r1, r2, [sp]
 8024176:	b1d0      	cbz	r0, 80241ae <__d2b+0x7e>
 8024178:	f1c0 0320 	rsb	r3, r0, #32
 802417c:	fa02 f303 	lsl.w	r3, r2, r3
 8024180:	430b      	orrs	r3, r1
 8024182:	40c2      	lsrs	r2, r0
 8024184:	6163      	str	r3, [r4, #20]
 8024186:	9201      	str	r2, [sp, #4]
 8024188:	9b01      	ldr	r3, [sp, #4]
 802418a:	61a3      	str	r3, [r4, #24]
 802418c:	2b00      	cmp	r3, #0
 802418e:	bf0c      	ite	eq
 8024190:	2201      	moveq	r2, #1
 8024192:	2202      	movne	r2, #2
 8024194:	6122      	str	r2, [r4, #16]
 8024196:	b1a5      	cbz	r5, 80241c2 <__d2b+0x92>
 8024198:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802419c:	4405      	add	r5, r0
 802419e:	603d      	str	r5, [r7, #0]
 80241a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80241a4:	6030      	str	r0, [r6, #0]
 80241a6:	4620      	mov	r0, r4
 80241a8:	b003      	add	sp, #12
 80241aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80241ae:	6161      	str	r1, [r4, #20]
 80241b0:	e7ea      	b.n	8024188 <__d2b+0x58>
 80241b2:	a801      	add	r0, sp, #4
 80241b4:	f7ff fd59 	bl	8023c6a <__lo0bits>
 80241b8:	9b01      	ldr	r3, [sp, #4]
 80241ba:	6163      	str	r3, [r4, #20]
 80241bc:	3020      	adds	r0, #32
 80241be:	2201      	movs	r2, #1
 80241c0:	e7e8      	b.n	8024194 <__d2b+0x64>
 80241c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80241c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80241ca:	6038      	str	r0, [r7, #0]
 80241cc:	6918      	ldr	r0, [r3, #16]
 80241ce:	f7ff fd2d 	bl	8023c2c <__hi0bits>
 80241d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80241d6:	e7e5      	b.n	80241a4 <__d2b+0x74>
 80241d8:	08025d74 	.word	0x08025d74
 80241dc:	08025d85 	.word	0x08025d85

080241e0 <__sfputc_r>:
 80241e0:	6893      	ldr	r3, [r2, #8]
 80241e2:	3b01      	subs	r3, #1
 80241e4:	2b00      	cmp	r3, #0
 80241e6:	b410      	push	{r4}
 80241e8:	6093      	str	r3, [r2, #8]
 80241ea:	da08      	bge.n	80241fe <__sfputc_r+0x1e>
 80241ec:	6994      	ldr	r4, [r2, #24]
 80241ee:	42a3      	cmp	r3, r4
 80241f0:	db01      	blt.n	80241f6 <__sfputc_r+0x16>
 80241f2:	290a      	cmp	r1, #10
 80241f4:	d103      	bne.n	80241fe <__sfputc_r+0x1e>
 80241f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80241fa:	f000 b9df 	b.w	80245bc <__swbuf_r>
 80241fe:	6813      	ldr	r3, [r2, #0]
 8024200:	1c58      	adds	r0, r3, #1
 8024202:	6010      	str	r0, [r2, #0]
 8024204:	7019      	strb	r1, [r3, #0]
 8024206:	4608      	mov	r0, r1
 8024208:	f85d 4b04 	ldr.w	r4, [sp], #4
 802420c:	4770      	bx	lr

0802420e <__sfputs_r>:
 802420e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024210:	4606      	mov	r6, r0
 8024212:	460f      	mov	r7, r1
 8024214:	4614      	mov	r4, r2
 8024216:	18d5      	adds	r5, r2, r3
 8024218:	42ac      	cmp	r4, r5
 802421a:	d101      	bne.n	8024220 <__sfputs_r+0x12>
 802421c:	2000      	movs	r0, #0
 802421e:	e007      	b.n	8024230 <__sfputs_r+0x22>
 8024220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024224:	463a      	mov	r2, r7
 8024226:	4630      	mov	r0, r6
 8024228:	f7ff ffda 	bl	80241e0 <__sfputc_r>
 802422c:	1c43      	adds	r3, r0, #1
 802422e:	d1f3      	bne.n	8024218 <__sfputs_r+0xa>
 8024230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024234 <_vfiprintf_r>:
 8024234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024238:	460d      	mov	r5, r1
 802423a:	b09d      	sub	sp, #116	@ 0x74
 802423c:	4614      	mov	r4, r2
 802423e:	4698      	mov	r8, r3
 8024240:	4606      	mov	r6, r0
 8024242:	b118      	cbz	r0, 802424c <_vfiprintf_r+0x18>
 8024244:	6a03      	ldr	r3, [r0, #32]
 8024246:	b90b      	cbnz	r3, 802424c <_vfiprintf_r+0x18>
 8024248:	f7fe fbc6 	bl	80229d8 <__sinit>
 802424c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802424e:	07d9      	lsls	r1, r3, #31
 8024250:	d405      	bmi.n	802425e <_vfiprintf_r+0x2a>
 8024252:	89ab      	ldrh	r3, [r5, #12]
 8024254:	059a      	lsls	r2, r3, #22
 8024256:	d402      	bmi.n	802425e <_vfiprintf_r+0x2a>
 8024258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802425a:	f7fe fd48 	bl	8022cee <__retarget_lock_acquire_recursive>
 802425e:	89ab      	ldrh	r3, [r5, #12]
 8024260:	071b      	lsls	r3, r3, #28
 8024262:	d501      	bpl.n	8024268 <_vfiprintf_r+0x34>
 8024264:	692b      	ldr	r3, [r5, #16]
 8024266:	b99b      	cbnz	r3, 8024290 <_vfiprintf_r+0x5c>
 8024268:	4629      	mov	r1, r5
 802426a:	4630      	mov	r0, r6
 802426c:	f000 f9e4 	bl	8024638 <__swsetup_r>
 8024270:	b170      	cbz	r0, 8024290 <_vfiprintf_r+0x5c>
 8024272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024274:	07dc      	lsls	r4, r3, #31
 8024276:	d504      	bpl.n	8024282 <_vfiprintf_r+0x4e>
 8024278:	f04f 30ff 	mov.w	r0, #4294967295
 802427c:	b01d      	add	sp, #116	@ 0x74
 802427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024282:	89ab      	ldrh	r3, [r5, #12]
 8024284:	0598      	lsls	r0, r3, #22
 8024286:	d4f7      	bmi.n	8024278 <_vfiprintf_r+0x44>
 8024288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802428a:	f7fe fd31 	bl	8022cf0 <__retarget_lock_release_recursive>
 802428e:	e7f3      	b.n	8024278 <_vfiprintf_r+0x44>
 8024290:	2300      	movs	r3, #0
 8024292:	9309      	str	r3, [sp, #36]	@ 0x24
 8024294:	2320      	movs	r3, #32
 8024296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802429a:	f8cd 800c 	str.w	r8, [sp, #12]
 802429e:	2330      	movs	r3, #48	@ 0x30
 80242a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024450 <_vfiprintf_r+0x21c>
 80242a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80242a8:	f04f 0901 	mov.w	r9, #1
 80242ac:	4623      	mov	r3, r4
 80242ae:	469a      	mov	sl, r3
 80242b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80242b4:	b10a      	cbz	r2, 80242ba <_vfiprintf_r+0x86>
 80242b6:	2a25      	cmp	r2, #37	@ 0x25
 80242b8:	d1f9      	bne.n	80242ae <_vfiprintf_r+0x7a>
 80242ba:	ebba 0b04 	subs.w	fp, sl, r4
 80242be:	d00b      	beq.n	80242d8 <_vfiprintf_r+0xa4>
 80242c0:	465b      	mov	r3, fp
 80242c2:	4622      	mov	r2, r4
 80242c4:	4629      	mov	r1, r5
 80242c6:	4630      	mov	r0, r6
 80242c8:	f7ff ffa1 	bl	802420e <__sfputs_r>
 80242cc:	3001      	adds	r0, #1
 80242ce:	f000 80a7 	beq.w	8024420 <_vfiprintf_r+0x1ec>
 80242d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80242d4:	445a      	add	r2, fp
 80242d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80242d8:	f89a 3000 	ldrb.w	r3, [sl]
 80242dc:	2b00      	cmp	r3, #0
 80242de:	f000 809f 	beq.w	8024420 <_vfiprintf_r+0x1ec>
 80242e2:	2300      	movs	r3, #0
 80242e4:	f04f 32ff 	mov.w	r2, #4294967295
 80242e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80242ec:	f10a 0a01 	add.w	sl, sl, #1
 80242f0:	9304      	str	r3, [sp, #16]
 80242f2:	9307      	str	r3, [sp, #28]
 80242f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80242f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80242fa:	4654      	mov	r4, sl
 80242fc:	2205      	movs	r2, #5
 80242fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024302:	4853      	ldr	r0, [pc, #332]	@ (8024450 <_vfiprintf_r+0x21c>)
 8024304:	f7db ffec 	bl	80002e0 <memchr>
 8024308:	9a04      	ldr	r2, [sp, #16]
 802430a:	b9d8      	cbnz	r0, 8024344 <_vfiprintf_r+0x110>
 802430c:	06d1      	lsls	r1, r2, #27
 802430e:	bf44      	itt	mi
 8024310:	2320      	movmi	r3, #32
 8024312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024316:	0713      	lsls	r3, r2, #28
 8024318:	bf44      	itt	mi
 802431a:	232b      	movmi	r3, #43	@ 0x2b
 802431c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024320:	f89a 3000 	ldrb.w	r3, [sl]
 8024324:	2b2a      	cmp	r3, #42	@ 0x2a
 8024326:	d015      	beq.n	8024354 <_vfiprintf_r+0x120>
 8024328:	9a07      	ldr	r2, [sp, #28]
 802432a:	4654      	mov	r4, sl
 802432c:	2000      	movs	r0, #0
 802432e:	f04f 0c0a 	mov.w	ip, #10
 8024332:	4621      	mov	r1, r4
 8024334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024338:	3b30      	subs	r3, #48	@ 0x30
 802433a:	2b09      	cmp	r3, #9
 802433c:	d94b      	bls.n	80243d6 <_vfiprintf_r+0x1a2>
 802433e:	b1b0      	cbz	r0, 802436e <_vfiprintf_r+0x13a>
 8024340:	9207      	str	r2, [sp, #28]
 8024342:	e014      	b.n	802436e <_vfiprintf_r+0x13a>
 8024344:	eba0 0308 	sub.w	r3, r0, r8
 8024348:	fa09 f303 	lsl.w	r3, r9, r3
 802434c:	4313      	orrs	r3, r2
 802434e:	9304      	str	r3, [sp, #16]
 8024350:	46a2      	mov	sl, r4
 8024352:	e7d2      	b.n	80242fa <_vfiprintf_r+0xc6>
 8024354:	9b03      	ldr	r3, [sp, #12]
 8024356:	1d19      	adds	r1, r3, #4
 8024358:	681b      	ldr	r3, [r3, #0]
 802435a:	9103      	str	r1, [sp, #12]
 802435c:	2b00      	cmp	r3, #0
 802435e:	bfbb      	ittet	lt
 8024360:	425b      	neglt	r3, r3
 8024362:	f042 0202 	orrlt.w	r2, r2, #2
 8024366:	9307      	strge	r3, [sp, #28]
 8024368:	9307      	strlt	r3, [sp, #28]
 802436a:	bfb8      	it	lt
 802436c:	9204      	strlt	r2, [sp, #16]
 802436e:	7823      	ldrb	r3, [r4, #0]
 8024370:	2b2e      	cmp	r3, #46	@ 0x2e
 8024372:	d10a      	bne.n	802438a <_vfiprintf_r+0x156>
 8024374:	7863      	ldrb	r3, [r4, #1]
 8024376:	2b2a      	cmp	r3, #42	@ 0x2a
 8024378:	d132      	bne.n	80243e0 <_vfiprintf_r+0x1ac>
 802437a:	9b03      	ldr	r3, [sp, #12]
 802437c:	1d1a      	adds	r2, r3, #4
 802437e:	681b      	ldr	r3, [r3, #0]
 8024380:	9203      	str	r2, [sp, #12]
 8024382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024386:	3402      	adds	r4, #2
 8024388:	9305      	str	r3, [sp, #20]
 802438a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024460 <_vfiprintf_r+0x22c>
 802438e:	7821      	ldrb	r1, [r4, #0]
 8024390:	2203      	movs	r2, #3
 8024392:	4650      	mov	r0, sl
 8024394:	f7db ffa4 	bl	80002e0 <memchr>
 8024398:	b138      	cbz	r0, 80243aa <_vfiprintf_r+0x176>
 802439a:	9b04      	ldr	r3, [sp, #16]
 802439c:	eba0 000a 	sub.w	r0, r0, sl
 80243a0:	2240      	movs	r2, #64	@ 0x40
 80243a2:	4082      	lsls	r2, r0
 80243a4:	4313      	orrs	r3, r2
 80243a6:	3401      	adds	r4, #1
 80243a8:	9304      	str	r3, [sp, #16]
 80243aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80243ae:	4829      	ldr	r0, [pc, #164]	@ (8024454 <_vfiprintf_r+0x220>)
 80243b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80243b4:	2206      	movs	r2, #6
 80243b6:	f7db ff93 	bl	80002e0 <memchr>
 80243ba:	2800      	cmp	r0, #0
 80243bc:	d03f      	beq.n	802443e <_vfiprintf_r+0x20a>
 80243be:	4b26      	ldr	r3, [pc, #152]	@ (8024458 <_vfiprintf_r+0x224>)
 80243c0:	bb1b      	cbnz	r3, 802440a <_vfiprintf_r+0x1d6>
 80243c2:	9b03      	ldr	r3, [sp, #12]
 80243c4:	3307      	adds	r3, #7
 80243c6:	f023 0307 	bic.w	r3, r3, #7
 80243ca:	3308      	adds	r3, #8
 80243cc:	9303      	str	r3, [sp, #12]
 80243ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243d0:	443b      	add	r3, r7
 80243d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80243d4:	e76a      	b.n	80242ac <_vfiprintf_r+0x78>
 80243d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80243da:	460c      	mov	r4, r1
 80243dc:	2001      	movs	r0, #1
 80243de:	e7a8      	b.n	8024332 <_vfiprintf_r+0xfe>
 80243e0:	2300      	movs	r3, #0
 80243e2:	3401      	adds	r4, #1
 80243e4:	9305      	str	r3, [sp, #20]
 80243e6:	4619      	mov	r1, r3
 80243e8:	f04f 0c0a 	mov.w	ip, #10
 80243ec:	4620      	mov	r0, r4
 80243ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80243f2:	3a30      	subs	r2, #48	@ 0x30
 80243f4:	2a09      	cmp	r2, #9
 80243f6:	d903      	bls.n	8024400 <_vfiprintf_r+0x1cc>
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d0c6      	beq.n	802438a <_vfiprintf_r+0x156>
 80243fc:	9105      	str	r1, [sp, #20]
 80243fe:	e7c4      	b.n	802438a <_vfiprintf_r+0x156>
 8024400:	fb0c 2101 	mla	r1, ip, r1, r2
 8024404:	4604      	mov	r4, r0
 8024406:	2301      	movs	r3, #1
 8024408:	e7f0      	b.n	80243ec <_vfiprintf_r+0x1b8>
 802440a:	ab03      	add	r3, sp, #12
 802440c:	9300      	str	r3, [sp, #0]
 802440e:	462a      	mov	r2, r5
 8024410:	4b12      	ldr	r3, [pc, #72]	@ (802445c <_vfiprintf_r+0x228>)
 8024412:	a904      	add	r1, sp, #16
 8024414:	4630      	mov	r0, r6
 8024416:	f7fd feab 	bl	8022170 <_printf_float>
 802441a:	4607      	mov	r7, r0
 802441c:	1c78      	adds	r0, r7, #1
 802441e:	d1d6      	bne.n	80243ce <_vfiprintf_r+0x19a>
 8024420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024422:	07d9      	lsls	r1, r3, #31
 8024424:	d405      	bmi.n	8024432 <_vfiprintf_r+0x1fe>
 8024426:	89ab      	ldrh	r3, [r5, #12]
 8024428:	059a      	lsls	r2, r3, #22
 802442a:	d402      	bmi.n	8024432 <_vfiprintf_r+0x1fe>
 802442c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802442e:	f7fe fc5f 	bl	8022cf0 <__retarget_lock_release_recursive>
 8024432:	89ab      	ldrh	r3, [r5, #12]
 8024434:	065b      	lsls	r3, r3, #25
 8024436:	f53f af1f 	bmi.w	8024278 <_vfiprintf_r+0x44>
 802443a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802443c:	e71e      	b.n	802427c <_vfiprintf_r+0x48>
 802443e:	ab03      	add	r3, sp, #12
 8024440:	9300      	str	r3, [sp, #0]
 8024442:	462a      	mov	r2, r5
 8024444:	4b05      	ldr	r3, [pc, #20]	@ (802445c <_vfiprintf_r+0x228>)
 8024446:	a904      	add	r1, sp, #16
 8024448:	4630      	mov	r0, r6
 802444a:	f7fe f919 	bl	8022680 <_printf_i>
 802444e:	e7e4      	b.n	802441a <_vfiprintf_r+0x1e6>
 8024450:	08025ee0 	.word	0x08025ee0
 8024454:	08025eea 	.word	0x08025eea
 8024458:	08022171 	.word	0x08022171
 802445c:	0802420f 	.word	0x0802420f
 8024460:	08025ee6 	.word	0x08025ee6

08024464 <__sflush_r>:
 8024464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802446c:	0716      	lsls	r6, r2, #28
 802446e:	4605      	mov	r5, r0
 8024470:	460c      	mov	r4, r1
 8024472:	d454      	bmi.n	802451e <__sflush_r+0xba>
 8024474:	684b      	ldr	r3, [r1, #4]
 8024476:	2b00      	cmp	r3, #0
 8024478:	dc02      	bgt.n	8024480 <__sflush_r+0x1c>
 802447a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802447c:	2b00      	cmp	r3, #0
 802447e:	dd48      	ble.n	8024512 <__sflush_r+0xae>
 8024480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024482:	2e00      	cmp	r6, #0
 8024484:	d045      	beq.n	8024512 <__sflush_r+0xae>
 8024486:	2300      	movs	r3, #0
 8024488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802448c:	682f      	ldr	r7, [r5, #0]
 802448e:	6a21      	ldr	r1, [r4, #32]
 8024490:	602b      	str	r3, [r5, #0]
 8024492:	d030      	beq.n	80244f6 <__sflush_r+0x92>
 8024494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024496:	89a3      	ldrh	r3, [r4, #12]
 8024498:	0759      	lsls	r1, r3, #29
 802449a:	d505      	bpl.n	80244a8 <__sflush_r+0x44>
 802449c:	6863      	ldr	r3, [r4, #4]
 802449e:	1ad2      	subs	r2, r2, r3
 80244a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80244a2:	b10b      	cbz	r3, 80244a8 <__sflush_r+0x44>
 80244a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80244a6:	1ad2      	subs	r2, r2, r3
 80244a8:	2300      	movs	r3, #0
 80244aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80244ac:	6a21      	ldr	r1, [r4, #32]
 80244ae:	4628      	mov	r0, r5
 80244b0:	47b0      	blx	r6
 80244b2:	1c43      	adds	r3, r0, #1
 80244b4:	89a3      	ldrh	r3, [r4, #12]
 80244b6:	d106      	bne.n	80244c6 <__sflush_r+0x62>
 80244b8:	6829      	ldr	r1, [r5, #0]
 80244ba:	291d      	cmp	r1, #29
 80244bc:	d82b      	bhi.n	8024516 <__sflush_r+0xb2>
 80244be:	4a2a      	ldr	r2, [pc, #168]	@ (8024568 <__sflush_r+0x104>)
 80244c0:	410a      	asrs	r2, r1
 80244c2:	07d6      	lsls	r6, r2, #31
 80244c4:	d427      	bmi.n	8024516 <__sflush_r+0xb2>
 80244c6:	2200      	movs	r2, #0
 80244c8:	6062      	str	r2, [r4, #4]
 80244ca:	04d9      	lsls	r1, r3, #19
 80244cc:	6922      	ldr	r2, [r4, #16]
 80244ce:	6022      	str	r2, [r4, #0]
 80244d0:	d504      	bpl.n	80244dc <__sflush_r+0x78>
 80244d2:	1c42      	adds	r2, r0, #1
 80244d4:	d101      	bne.n	80244da <__sflush_r+0x76>
 80244d6:	682b      	ldr	r3, [r5, #0]
 80244d8:	b903      	cbnz	r3, 80244dc <__sflush_r+0x78>
 80244da:	6560      	str	r0, [r4, #84]	@ 0x54
 80244dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80244de:	602f      	str	r7, [r5, #0]
 80244e0:	b1b9      	cbz	r1, 8024512 <__sflush_r+0xae>
 80244e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80244e6:	4299      	cmp	r1, r3
 80244e8:	d002      	beq.n	80244f0 <__sflush_r+0x8c>
 80244ea:	4628      	mov	r0, r5
 80244ec:	f7ff f9f6 	bl	80238dc <_free_r>
 80244f0:	2300      	movs	r3, #0
 80244f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80244f4:	e00d      	b.n	8024512 <__sflush_r+0xae>
 80244f6:	2301      	movs	r3, #1
 80244f8:	4628      	mov	r0, r5
 80244fa:	47b0      	blx	r6
 80244fc:	4602      	mov	r2, r0
 80244fe:	1c50      	adds	r0, r2, #1
 8024500:	d1c9      	bne.n	8024496 <__sflush_r+0x32>
 8024502:	682b      	ldr	r3, [r5, #0]
 8024504:	2b00      	cmp	r3, #0
 8024506:	d0c6      	beq.n	8024496 <__sflush_r+0x32>
 8024508:	2b1d      	cmp	r3, #29
 802450a:	d001      	beq.n	8024510 <__sflush_r+0xac>
 802450c:	2b16      	cmp	r3, #22
 802450e:	d11e      	bne.n	802454e <__sflush_r+0xea>
 8024510:	602f      	str	r7, [r5, #0]
 8024512:	2000      	movs	r0, #0
 8024514:	e022      	b.n	802455c <__sflush_r+0xf8>
 8024516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802451a:	b21b      	sxth	r3, r3
 802451c:	e01b      	b.n	8024556 <__sflush_r+0xf2>
 802451e:	690f      	ldr	r7, [r1, #16]
 8024520:	2f00      	cmp	r7, #0
 8024522:	d0f6      	beq.n	8024512 <__sflush_r+0xae>
 8024524:	0793      	lsls	r3, r2, #30
 8024526:	680e      	ldr	r6, [r1, #0]
 8024528:	bf08      	it	eq
 802452a:	694b      	ldreq	r3, [r1, #20]
 802452c:	600f      	str	r7, [r1, #0]
 802452e:	bf18      	it	ne
 8024530:	2300      	movne	r3, #0
 8024532:	eba6 0807 	sub.w	r8, r6, r7
 8024536:	608b      	str	r3, [r1, #8]
 8024538:	f1b8 0f00 	cmp.w	r8, #0
 802453c:	dde9      	ble.n	8024512 <__sflush_r+0xae>
 802453e:	6a21      	ldr	r1, [r4, #32]
 8024540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024542:	4643      	mov	r3, r8
 8024544:	463a      	mov	r2, r7
 8024546:	4628      	mov	r0, r5
 8024548:	47b0      	blx	r6
 802454a:	2800      	cmp	r0, #0
 802454c:	dc08      	bgt.n	8024560 <__sflush_r+0xfc>
 802454e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024556:	81a3      	strh	r3, [r4, #12]
 8024558:	f04f 30ff 	mov.w	r0, #4294967295
 802455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024560:	4407      	add	r7, r0
 8024562:	eba8 0800 	sub.w	r8, r8, r0
 8024566:	e7e7      	b.n	8024538 <__sflush_r+0xd4>
 8024568:	dfbffffe 	.word	0xdfbffffe

0802456c <_fflush_r>:
 802456c:	b538      	push	{r3, r4, r5, lr}
 802456e:	690b      	ldr	r3, [r1, #16]
 8024570:	4605      	mov	r5, r0
 8024572:	460c      	mov	r4, r1
 8024574:	b913      	cbnz	r3, 802457c <_fflush_r+0x10>
 8024576:	2500      	movs	r5, #0
 8024578:	4628      	mov	r0, r5
 802457a:	bd38      	pop	{r3, r4, r5, pc}
 802457c:	b118      	cbz	r0, 8024586 <_fflush_r+0x1a>
 802457e:	6a03      	ldr	r3, [r0, #32]
 8024580:	b90b      	cbnz	r3, 8024586 <_fflush_r+0x1a>
 8024582:	f7fe fa29 	bl	80229d8 <__sinit>
 8024586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802458a:	2b00      	cmp	r3, #0
 802458c:	d0f3      	beq.n	8024576 <_fflush_r+0xa>
 802458e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024590:	07d0      	lsls	r0, r2, #31
 8024592:	d404      	bmi.n	802459e <_fflush_r+0x32>
 8024594:	0599      	lsls	r1, r3, #22
 8024596:	d402      	bmi.n	802459e <_fflush_r+0x32>
 8024598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802459a:	f7fe fba8 	bl	8022cee <__retarget_lock_acquire_recursive>
 802459e:	4628      	mov	r0, r5
 80245a0:	4621      	mov	r1, r4
 80245a2:	f7ff ff5f 	bl	8024464 <__sflush_r>
 80245a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80245a8:	07da      	lsls	r2, r3, #31
 80245aa:	4605      	mov	r5, r0
 80245ac:	d4e4      	bmi.n	8024578 <_fflush_r+0xc>
 80245ae:	89a3      	ldrh	r3, [r4, #12]
 80245b0:	059b      	lsls	r3, r3, #22
 80245b2:	d4e1      	bmi.n	8024578 <_fflush_r+0xc>
 80245b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80245b6:	f7fe fb9b 	bl	8022cf0 <__retarget_lock_release_recursive>
 80245ba:	e7dd      	b.n	8024578 <_fflush_r+0xc>

080245bc <__swbuf_r>:
 80245bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245be:	460e      	mov	r6, r1
 80245c0:	4614      	mov	r4, r2
 80245c2:	4605      	mov	r5, r0
 80245c4:	b118      	cbz	r0, 80245ce <__swbuf_r+0x12>
 80245c6:	6a03      	ldr	r3, [r0, #32]
 80245c8:	b90b      	cbnz	r3, 80245ce <__swbuf_r+0x12>
 80245ca:	f7fe fa05 	bl	80229d8 <__sinit>
 80245ce:	69a3      	ldr	r3, [r4, #24]
 80245d0:	60a3      	str	r3, [r4, #8]
 80245d2:	89a3      	ldrh	r3, [r4, #12]
 80245d4:	071a      	lsls	r2, r3, #28
 80245d6:	d501      	bpl.n	80245dc <__swbuf_r+0x20>
 80245d8:	6923      	ldr	r3, [r4, #16]
 80245da:	b943      	cbnz	r3, 80245ee <__swbuf_r+0x32>
 80245dc:	4621      	mov	r1, r4
 80245de:	4628      	mov	r0, r5
 80245e0:	f000 f82a 	bl	8024638 <__swsetup_r>
 80245e4:	b118      	cbz	r0, 80245ee <__swbuf_r+0x32>
 80245e6:	f04f 37ff 	mov.w	r7, #4294967295
 80245ea:	4638      	mov	r0, r7
 80245ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80245ee:	6823      	ldr	r3, [r4, #0]
 80245f0:	6922      	ldr	r2, [r4, #16]
 80245f2:	1a98      	subs	r0, r3, r2
 80245f4:	6963      	ldr	r3, [r4, #20]
 80245f6:	b2f6      	uxtb	r6, r6
 80245f8:	4283      	cmp	r3, r0
 80245fa:	4637      	mov	r7, r6
 80245fc:	dc05      	bgt.n	802460a <__swbuf_r+0x4e>
 80245fe:	4621      	mov	r1, r4
 8024600:	4628      	mov	r0, r5
 8024602:	f7ff ffb3 	bl	802456c <_fflush_r>
 8024606:	2800      	cmp	r0, #0
 8024608:	d1ed      	bne.n	80245e6 <__swbuf_r+0x2a>
 802460a:	68a3      	ldr	r3, [r4, #8]
 802460c:	3b01      	subs	r3, #1
 802460e:	60a3      	str	r3, [r4, #8]
 8024610:	6823      	ldr	r3, [r4, #0]
 8024612:	1c5a      	adds	r2, r3, #1
 8024614:	6022      	str	r2, [r4, #0]
 8024616:	701e      	strb	r6, [r3, #0]
 8024618:	6962      	ldr	r2, [r4, #20]
 802461a:	1c43      	adds	r3, r0, #1
 802461c:	429a      	cmp	r2, r3
 802461e:	d004      	beq.n	802462a <__swbuf_r+0x6e>
 8024620:	89a3      	ldrh	r3, [r4, #12]
 8024622:	07db      	lsls	r3, r3, #31
 8024624:	d5e1      	bpl.n	80245ea <__swbuf_r+0x2e>
 8024626:	2e0a      	cmp	r6, #10
 8024628:	d1df      	bne.n	80245ea <__swbuf_r+0x2e>
 802462a:	4621      	mov	r1, r4
 802462c:	4628      	mov	r0, r5
 802462e:	f7ff ff9d 	bl	802456c <_fflush_r>
 8024632:	2800      	cmp	r0, #0
 8024634:	d0d9      	beq.n	80245ea <__swbuf_r+0x2e>
 8024636:	e7d6      	b.n	80245e6 <__swbuf_r+0x2a>

08024638 <__swsetup_r>:
 8024638:	b538      	push	{r3, r4, r5, lr}
 802463a:	4b29      	ldr	r3, [pc, #164]	@ (80246e0 <__swsetup_r+0xa8>)
 802463c:	4605      	mov	r5, r0
 802463e:	6818      	ldr	r0, [r3, #0]
 8024640:	460c      	mov	r4, r1
 8024642:	b118      	cbz	r0, 802464c <__swsetup_r+0x14>
 8024644:	6a03      	ldr	r3, [r0, #32]
 8024646:	b90b      	cbnz	r3, 802464c <__swsetup_r+0x14>
 8024648:	f7fe f9c6 	bl	80229d8 <__sinit>
 802464c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024650:	0719      	lsls	r1, r3, #28
 8024652:	d422      	bmi.n	802469a <__swsetup_r+0x62>
 8024654:	06da      	lsls	r2, r3, #27
 8024656:	d407      	bmi.n	8024668 <__swsetup_r+0x30>
 8024658:	2209      	movs	r2, #9
 802465a:	602a      	str	r2, [r5, #0]
 802465c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024660:	81a3      	strh	r3, [r4, #12]
 8024662:	f04f 30ff 	mov.w	r0, #4294967295
 8024666:	e033      	b.n	80246d0 <__swsetup_r+0x98>
 8024668:	0758      	lsls	r0, r3, #29
 802466a:	d512      	bpl.n	8024692 <__swsetup_r+0x5a>
 802466c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802466e:	b141      	cbz	r1, 8024682 <__swsetup_r+0x4a>
 8024670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024674:	4299      	cmp	r1, r3
 8024676:	d002      	beq.n	802467e <__swsetup_r+0x46>
 8024678:	4628      	mov	r0, r5
 802467a:	f7ff f92f 	bl	80238dc <_free_r>
 802467e:	2300      	movs	r3, #0
 8024680:	6363      	str	r3, [r4, #52]	@ 0x34
 8024682:	89a3      	ldrh	r3, [r4, #12]
 8024684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024688:	81a3      	strh	r3, [r4, #12]
 802468a:	2300      	movs	r3, #0
 802468c:	6063      	str	r3, [r4, #4]
 802468e:	6923      	ldr	r3, [r4, #16]
 8024690:	6023      	str	r3, [r4, #0]
 8024692:	89a3      	ldrh	r3, [r4, #12]
 8024694:	f043 0308 	orr.w	r3, r3, #8
 8024698:	81a3      	strh	r3, [r4, #12]
 802469a:	6923      	ldr	r3, [r4, #16]
 802469c:	b94b      	cbnz	r3, 80246b2 <__swsetup_r+0x7a>
 802469e:	89a3      	ldrh	r3, [r4, #12]
 80246a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80246a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80246a8:	d003      	beq.n	80246b2 <__swsetup_r+0x7a>
 80246aa:	4621      	mov	r1, r4
 80246ac:	4628      	mov	r0, r5
 80246ae:	f000 f8c6 	bl	802483e <__smakebuf_r>
 80246b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246b6:	f013 0201 	ands.w	r2, r3, #1
 80246ba:	d00a      	beq.n	80246d2 <__swsetup_r+0x9a>
 80246bc:	2200      	movs	r2, #0
 80246be:	60a2      	str	r2, [r4, #8]
 80246c0:	6962      	ldr	r2, [r4, #20]
 80246c2:	4252      	negs	r2, r2
 80246c4:	61a2      	str	r2, [r4, #24]
 80246c6:	6922      	ldr	r2, [r4, #16]
 80246c8:	b942      	cbnz	r2, 80246dc <__swsetup_r+0xa4>
 80246ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80246ce:	d1c5      	bne.n	802465c <__swsetup_r+0x24>
 80246d0:	bd38      	pop	{r3, r4, r5, pc}
 80246d2:	0799      	lsls	r1, r3, #30
 80246d4:	bf58      	it	pl
 80246d6:	6962      	ldrpl	r2, [r4, #20]
 80246d8:	60a2      	str	r2, [r4, #8]
 80246da:	e7f4      	b.n	80246c6 <__swsetup_r+0x8e>
 80246dc:	2000      	movs	r0, #0
 80246de:	e7f7      	b.n	80246d0 <__swsetup_r+0x98>
 80246e0:	2400004c 	.word	0x2400004c

080246e4 <_raise_r>:
 80246e4:	291f      	cmp	r1, #31
 80246e6:	b538      	push	{r3, r4, r5, lr}
 80246e8:	4605      	mov	r5, r0
 80246ea:	460c      	mov	r4, r1
 80246ec:	d904      	bls.n	80246f8 <_raise_r+0x14>
 80246ee:	2316      	movs	r3, #22
 80246f0:	6003      	str	r3, [r0, #0]
 80246f2:	f04f 30ff 	mov.w	r0, #4294967295
 80246f6:	bd38      	pop	{r3, r4, r5, pc}
 80246f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80246fa:	b112      	cbz	r2, 8024702 <_raise_r+0x1e>
 80246fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024700:	b94b      	cbnz	r3, 8024716 <_raise_r+0x32>
 8024702:	4628      	mov	r0, r5
 8024704:	f000 f830 	bl	8024768 <_getpid_r>
 8024708:	4622      	mov	r2, r4
 802470a:	4601      	mov	r1, r0
 802470c:	4628      	mov	r0, r5
 802470e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024712:	f000 b817 	b.w	8024744 <_kill_r>
 8024716:	2b01      	cmp	r3, #1
 8024718:	d00a      	beq.n	8024730 <_raise_r+0x4c>
 802471a:	1c59      	adds	r1, r3, #1
 802471c:	d103      	bne.n	8024726 <_raise_r+0x42>
 802471e:	2316      	movs	r3, #22
 8024720:	6003      	str	r3, [r0, #0]
 8024722:	2001      	movs	r0, #1
 8024724:	e7e7      	b.n	80246f6 <_raise_r+0x12>
 8024726:	2100      	movs	r1, #0
 8024728:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802472c:	4620      	mov	r0, r4
 802472e:	4798      	blx	r3
 8024730:	2000      	movs	r0, #0
 8024732:	e7e0      	b.n	80246f6 <_raise_r+0x12>

08024734 <raise>:
 8024734:	4b02      	ldr	r3, [pc, #8]	@ (8024740 <raise+0xc>)
 8024736:	4601      	mov	r1, r0
 8024738:	6818      	ldr	r0, [r3, #0]
 802473a:	f7ff bfd3 	b.w	80246e4 <_raise_r>
 802473e:	bf00      	nop
 8024740:	2400004c 	.word	0x2400004c

08024744 <_kill_r>:
 8024744:	b538      	push	{r3, r4, r5, lr}
 8024746:	4d07      	ldr	r5, [pc, #28]	@ (8024764 <_kill_r+0x20>)
 8024748:	2300      	movs	r3, #0
 802474a:	4604      	mov	r4, r0
 802474c:	4608      	mov	r0, r1
 802474e:	4611      	mov	r1, r2
 8024750:	602b      	str	r3, [r5, #0]
 8024752:	f7dd fbf7 	bl	8001f44 <_kill>
 8024756:	1c43      	adds	r3, r0, #1
 8024758:	d102      	bne.n	8024760 <_kill_r+0x1c>
 802475a:	682b      	ldr	r3, [r5, #0]
 802475c:	b103      	cbz	r3, 8024760 <_kill_r+0x1c>
 802475e:	6023      	str	r3, [r4, #0]
 8024760:	bd38      	pop	{r3, r4, r5, pc}
 8024762:	bf00      	nop
 8024764:	24028b30 	.word	0x24028b30

08024768 <_getpid_r>:
 8024768:	f7dd bbe4 	b.w	8001f34 <_getpid>

0802476c <_sbrk_r>:
 802476c:	b538      	push	{r3, r4, r5, lr}
 802476e:	4d06      	ldr	r5, [pc, #24]	@ (8024788 <_sbrk_r+0x1c>)
 8024770:	2300      	movs	r3, #0
 8024772:	4604      	mov	r4, r0
 8024774:	4608      	mov	r0, r1
 8024776:	602b      	str	r3, [r5, #0]
 8024778:	f7dd fc6c 	bl	8002054 <_sbrk>
 802477c:	1c43      	adds	r3, r0, #1
 802477e:	d102      	bne.n	8024786 <_sbrk_r+0x1a>
 8024780:	682b      	ldr	r3, [r5, #0]
 8024782:	b103      	cbz	r3, 8024786 <_sbrk_r+0x1a>
 8024784:	6023      	str	r3, [r4, #0]
 8024786:	bd38      	pop	{r3, r4, r5, pc}
 8024788:	24028b30 	.word	0x24028b30

0802478c <_calloc_r>:
 802478c:	b570      	push	{r4, r5, r6, lr}
 802478e:	fba1 5402 	umull	r5, r4, r1, r2
 8024792:	b93c      	cbnz	r4, 80247a4 <_calloc_r+0x18>
 8024794:	4629      	mov	r1, r5
 8024796:	f7ff f915 	bl	80239c4 <_malloc_r>
 802479a:	4606      	mov	r6, r0
 802479c:	b928      	cbnz	r0, 80247aa <_calloc_r+0x1e>
 802479e:	2600      	movs	r6, #0
 80247a0:	4630      	mov	r0, r6
 80247a2:	bd70      	pop	{r4, r5, r6, pc}
 80247a4:	220c      	movs	r2, #12
 80247a6:	6002      	str	r2, [r0, #0]
 80247a8:	e7f9      	b.n	802479e <_calloc_r+0x12>
 80247aa:	462a      	mov	r2, r5
 80247ac:	4621      	mov	r1, r4
 80247ae:	f7fe f9b8 	bl	8022b22 <memset>
 80247b2:	e7f5      	b.n	80247a0 <_calloc_r+0x14>

080247b4 <__ascii_mbtowc>:
 80247b4:	b082      	sub	sp, #8
 80247b6:	b901      	cbnz	r1, 80247ba <__ascii_mbtowc+0x6>
 80247b8:	a901      	add	r1, sp, #4
 80247ba:	b142      	cbz	r2, 80247ce <__ascii_mbtowc+0x1a>
 80247bc:	b14b      	cbz	r3, 80247d2 <__ascii_mbtowc+0x1e>
 80247be:	7813      	ldrb	r3, [r2, #0]
 80247c0:	600b      	str	r3, [r1, #0]
 80247c2:	7812      	ldrb	r2, [r2, #0]
 80247c4:	1e10      	subs	r0, r2, #0
 80247c6:	bf18      	it	ne
 80247c8:	2001      	movne	r0, #1
 80247ca:	b002      	add	sp, #8
 80247cc:	4770      	bx	lr
 80247ce:	4610      	mov	r0, r2
 80247d0:	e7fb      	b.n	80247ca <__ascii_mbtowc+0x16>
 80247d2:	f06f 0001 	mvn.w	r0, #1
 80247d6:	e7f8      	b.n	80247ca <__ascii_mbtowc+0x16>

080247d8 <__ascii_wctomb>:
 80247d8:	4603      	mov	r3, r0
 80247da:	4608      	mov	r0, r1
 80247dc:	b141      	cbz	r1, 80247f0 <__ascii_wctomb+0x18>
 80247de:	2aff      	cmp	r2, #255	@ 0xff
 80247e0:	d904      	bls.n	80247ec <__ascii_wctomb+0x14>
 80247e2:	228a      	movs	r2, #138	@ 0x8a
 80247e4:	601a      	str	r2, [r3, #0]
 80247e6:	f04f 30ff 	mov.w	r0, #4294967295
 80247ea:	4770      	bx	lr
 80247ec:	700a      	strb	r2, [r1, #0]
 80247ee:	2001      	movs	r0, #1
 80247f0:	4770      	bx	lr

080247f2 <__swhatbuf_r>:
 80247f2:	b570      	push	{r4, r5, r6, lr}
 80247f4:	460c      	mov	r4, r1
 80247f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247fa:	2900      	cmp	r1, #0
 80247fc:	b096      	sub	sp, #88	@ 0x58
 80247fe:	4615      	mov	r5, r2
 8024800:	461e      	mov	r6, r3
 8024802:	da0d      	bge.n	8024820 <__swhatbuf_r+0x2e>
 8024804:	89a3      	ldrh	r3, [r4, #12]
 8024806:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802480a:	f04f 0100 	mov.w	r1, #0
 802480e:	bf14      	ite	ne
 8024810:	2340      	movne	r3, #64	@ 0x40
 8024812:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024816:	2000      	movs	r0, #0
 8024818:	6031      	str	r1, [r6, #0]
 802481a:	602b      	str	r3, [r5, #0]
 802481c:	b016      	add	sp, #88	@ 0x58
 802481e:	bd70      	pop	{r4, r5, r6, pc}
 8024820:	466a      	mov	r2, sp
 8024822:	f000 f849 	bl	80248b8 <_fstat_r>
 8024826:	2800      	cmp	r0, #0
 8024828:	dbec      	blt.n	8024804 <__swhatbuf_r+0x12>
 802482a:	9901      	ldr	r1, [sp, #4]
 802482c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024830:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024834:	4259      	negs	r1, r3
 8024836:	4159      	adcs	r1, r3
 8024838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802483c:	e7eb      	b.n	8024816 <__swhatbuf_r+0x24>

0802483e <__smakebuf_r>:
 802483e:	898b      	ldrh	r3, [r1, #12]
 8024840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024842:	079d      	lsls	r5, r3, #30
 8024844:	4606      	mov	r6, r0
 8024846:	460c      	mov	r4, r1
 8024848:	d507      	bpl.n	802485a <__smakebuf_r+0x1c>
 802484a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802484e:	6023      	str	r3, [r4, #0]
 8024850:	6123      	str	r3, [r4, #16]
 8024852:	2301      	movs	r3, #1
 8024854:	6163      	str	r3, [r4, #20]
 8024856:	b003      	add	sp, #12
 8024858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802485a:	ab01      	add	r3, sp, #4
 802485c:	466a      	mov	r2, sp
 802485e:	f7ff ffc8 	bl	80247f2 <__swhatbuf_r>
 8024862:	9f00      	ldr	r7, [sp, #0]
 8024864:	4605      	mov	r5, r0
 8024866:	4639      	mov	r1, r7
 8024868:	4630      	mov	r0, r6
 802486a:	f7ff f8ab 	bl	80239c4 <_malloc_r>
 802486e:	b948      	cbnz	r0, 8024884 <__smakebuf_r+0x46>
 8024870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024874:	059a      	lsls	r2, r3, #22
 8024876:	d4ee      	bmi.n	8024856 <__smakebuf_r+0x18>
 8024878:	f023 0303 	bic.w	r3, r3, #3
 802487c:	f043 0302 	orr.w	r3, r3, #2
 8024880:	81a3      	strh	r3, [r4, #12]
 8024882:	e7e2      	b.n	802484a <__smakebuf_r+0xc>
 8024884:	89a3      	ldrh	r3, [r4, #12]
 8024886:	6020      	str	r0, [r4, #0]
 8024888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802488c:	81a3      	strh	r3, [r4, #12]
 802488e:	9b01      	ldr	r3, [sp, #4]
 8024890:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024894:	b15b      	cbz	r3, 80248ae <__smakebuf_r+0x70>
 8024896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802489a:	4630      	mov	r0, r6
 802489c:	f000 f81e 	bl	80248dc <_isatty_r>
 80248a0:	b128      	cbz	r0, 80248ae <__smakebuf_r+0x70>
 80248a2:	89a3      	ldrh	r3, [r4, #12]
 80248a4:	f023 0303 	bic.w	r3, r3, #3
 80248a8:	f043 0301 	orr.w	r3, r3, #1
 80248ac:	81a3      	strh	r3, [r4, #12]
 80248ae:	89a3      	ldrh	r3, [r4, #12]
 80248b0:	431d      	orrs	r5, r3
 80248b2:	81a5      	strh	r5, [r4, #12]
 80248b4:	e7cf      	b.n	8024856 <__smakebuf_r+0x18>
	...

080248b8 <_fstat_r>:
 80248b8:	b538      	push	{r3, r4, r5, lr}
 80248ba:	4d07      	ldr	r5, [pc, #28]	@ (80248d8 <_fstat_r+0x20>)
 80248bc:	2300      	movs	r3, #0
 80248be:	4604      	mov	r4, r0
 80248c0:	4608      	mov	r0, r1
 80248c2:	4611      	mov	r1, r2
 80248c4:	602b      	str	r3, [r5, #0]
 80248c6:	f7dd fb9d 	bl	8002004 <_fstat>
 80248ca:	1c43      	adds	r3, r0, #1
 80248cc:	d102      	bne.n	80248d4 <_fstat_r+0x1c>
 80248ce:	682b      	ldr	r3, [r5, #0]
 80248d0:	b103      	cbz	r3, 80248d4 <_fstat_r+0x1c>
 80248d2:	6023      	str	r3, [r4, #0]
 80248d4:	bd38      	pop	{r3, r4, r5, pc}
 80248d6:	bf00      	nop
 80248d8:	24028b30 	.word	0x24028b30

080248dc <_isatty_r>:
 80248dc:	b538      	push	{r3, r4, r5, lr}
 80248de:	4d06      	ldr	r5, [pc, #24]	@ (80248f8 <_isatty_r+0x1c>)
 80248e0:	2300      	movs	r3, #0
 80248e2:	4604      	mov	r4, r0
 80248e4:	4608      	mov	r0, r1
 80248e6:	602b      	str	r3, [r5, #0]
 80248e8:	f7dd fb9c 	bl	8002024 <_isatty>
 80248ec:	1c43      	adds	r3, r0, #1
 80248ee:	d102      	bne.n	80248f6 <_isatty_r+0x1a>
 80248f0:	682b      	ldr	r3, [r5, #0]
 80248f2:	b103      	cbz	r3, 80248f6 <_isatty_r+0x1a>
 80248f4:	6023      	str	r3, [r4, #0]
 80248f6:	bd38      	pop	{r3, r4, r5, pc}
 80248f8:	24028b30 	.word	0x24028b30

080248fc <_init>:
 80248fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248fe:	bf00      	nop
 8024900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024902:	bc08      	pop	{r3}
 8024904:	469e      	mov	lr, r3
 8024906:	4770      	bx	lr

08024908 <_fini>:
 8024908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802490a:	bf00      	nop
 802490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802490e:	bc08      	pop	{r3}
 8024910:	469e      	mov	lr, r3
 8024912:	4770      	bx	lr
