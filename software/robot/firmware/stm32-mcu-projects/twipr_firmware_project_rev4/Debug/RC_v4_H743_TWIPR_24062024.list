
RC_v4_H743_TWIPR_24062024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025a80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017dc  08025d20  08025d20  00026d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080274fc  080274fc  000284fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000028  08027504  08027504  00028504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0802752c  0802752c  0002852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  08027534  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00022f4c  24000208  0802773c  00029208  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24023154  0802773c  0002a154  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004d280  2**0
                  CONTENTS, READONLY
 10 .ramd2block   00023280  30000000  30000000  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .debug_info   000b166b  00000000  00000000  0004d2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000f5b0  00000000  00000000  000fe919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000044f0  00000000  00000000  0010ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000348a  00000000  00000000  001123c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015f95  00000000  00000000  0011584a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00070c17  00000000  00000000  0012b7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a65cc  00000000  00000000  0019c3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  003429c2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00013d3c  00000000  00000000  00342a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000b4  00000000  00000000  00356744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025d08 	.word	0x08025d08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	08025d08 	.word	0x08025d08

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 fc72 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f83a 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fbd8 	bl	8000e40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fb30 	bl	8000cf4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000694:	f000 fa94 	bl	8000bc0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000698:	f000 f9a0 	bl	80009dc <MX_SPI2_Init>
  MX_UART8_Init();
 800069c:	f000 fa42 	bl	8000b24 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 fada 	bl	8000c58 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006a4:	f000 f9f0 	bl	8000a88 <MX_TIM2_Init>
  MX_SPI1_Init();
 80006a8:	f000 f948 	bl	800093c <MX_SPI1_Init>
  MX_I2C3_Init();
 80006ac:	f000 f906 	bl	80008bc <MX_I2C3_Init>
  MX_FDCAN1_Init();
 80006b0:	f000 f8a0 	bl	80007f4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b4:	f00e f8e2 	bl	800e87c <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer02 */
  myTimer02Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer02_attributes);
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <main+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	480b      	ldr	r0, [pc, #44]	@ (80006ec <main+0x6c>)
 80006c0:	f00e fa4c 	bl	800eb5c <osTimerNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <main+0x70>)
 80006c8:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  firmware();
 80006ca:	f017 fbf3 	bl	8017eb4 <firmware>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ce:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <main+0x74>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <main+0x78>)
 80006d4:	f00e f953 	bl	800e97e <osThreadNew>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <main+0x7c>)
 80006dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006de:	f00e f913 	bl	800e908 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006e2:	bf00      	nop
 80006e4:	e7fd      	b.n	80006e2 <main+0x62>
 80006e6:	bf00      	nop
 80006e8:	080260c0 	.word	0x080260c0
 80006ec:	08001067 	.word	0x08001067
 80006f0:	24000b6c 	.word	0x24000b6c
 80006f4:	0802609c 	.word	0x0802609c
 80006f8:	08001055 	.word	0x08001055
 80006fc:	24000b68 	.word	0x24000b68

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	@ 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	224c      	movs	r2, #76	@ 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f023 fbdb 	bl	8023eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f023 fbd5 	bl	8023eca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000720:	2002      	movs	r0, #2
 8000722:	f006 fcad 	bl	8007080 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <SystemClock_Config+0xec>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	4a2f      	ldr	r2, [pc, #188]	@ (80007ec <SystemClock_Config+0xec>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <SystemClock_Config+0xec>)
 8000738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <SystemClock_Config+0xf0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <SystemClock_Config+0xf0>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <SystemClock_Config+0xf0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000758:	bf00      	nop
 800075a:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <SystemClock_Config+0xf0>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000766:	d1f8      	bne.n	800075a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	2302      	movs	r3, #2
 8000778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000786:	2308      	movs	r3, #8
 8000788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800078e:	230c      	movs	r3, #12
 8000790:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000792:	2300      	movs	r3, #0
 8000794:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fca8 	bl	80070f4 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007aa:	f000 fc79 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	233f      	movs	r3, #63	@ 0x3f
 80007b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2303      	movs	r3, #3
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ba:	2308      	movs	r3, #8
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007be:	2340      	movs	r3, #64	@ 0x40
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c2:	2340      	movs	r3, #64	@ 0x40
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2102      	movs	r1, #2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f007 f8e7 	bl	80079a8 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007e0:	f000 fc5e 	bl	80010a0 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3770      	adds	r7, #112	@ 0x70
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58000400 	.word	0x58000400
 80007f0:	58024800 	.word	0x58024800

080007f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007f8:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 80007fa:	4a2f      	ldr	r2, [pc, #188]	@ (80008b8 <MX_FDCAN1_Init+0xc4>)
 80007fc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000804:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000810:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000818:	2200      	movs	r2, #0
 800081a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800081e:	220a      	movs	r2, #10
 8000820:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000824:	2201      	movs	r2, #1
 8000826:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800082a:	2207      	movs	r2, #7
 800082c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000830:	2202      	movs	r2, #2
 8000832:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000836:	2201      	movs	r2, #1
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800083c:	2201      	movs	r2, #1
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000842:	2201      	movs	r2, #1
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000848:	2201      	movs	r2, #1
 800084a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800085a:	2200      	movs	r2, #0
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000860:	2204      	movs	r2, #4
 8000862:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000866:	2204      	movs	r2, #4
 8000868:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800086c:	2204      	movs	r2, #4
 800086e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000872:	2204      	movs	r2, #4
 8000874:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800087e:	2204      	movs	r2, #4
 8000880:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 4;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000890:	2204      	movs	r2, #4
 8000892:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 800089c:	2204      	movs	r2, #4
 800089e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_FDCAN1_Init+0xc0>)
 80008a2:	f004 fb71 	bl	8004f88 <HAL_FDCAN_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008ac:	f000 fbf8 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000224 	.word	0x24000224
 80008b8:	4000a000 	.word	0x4000a000

080008bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_I2C3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <MX_I2C3_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008f8:	f005 ff0c 	bl	8006714 <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 fbcd 	bl	80010a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <MX_I2C3_Init+0x74>)
 800090a:	f006 fb21 	bl	8006f50 <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 fbc4 	bl	80010a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_I2C3_Init+0x74>)
 800091c:	f006 fb63 	bl	8006fe6 <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fbbb 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	240002c4 	.word	0x240002c4
 8000934:	40005c00 	.word	0x40005c00
 8000938:	10c0ecff 	.word	0x10c0ecff

0800093c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000940:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000942:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <MX_SPI1_Init+0x9c>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094c:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_SPI1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000954:	2207      	movs	r2, #7
 8000956:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000958:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_SPI1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_SPI1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_SPI1_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI1_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_SPI1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI1_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_SPI1_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI1_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_SPI1_Init+0x98>)
 80009c0:	f009 f9ec 	bl	8009d9c <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 80009ca:	f000 fb69 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	24000318 	.word	0x24000318
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 80009e2:	4a28      	ldr	r2, [pc, #160]	@ (8000a84 <MX_SPI2_Init+0xa8>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 80009e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a10:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_SPI2_Init+0xa4>)
 8000a6e:	f009 f995 	bl	8009d9c <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a78:	f000 fb12 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	240003cc 	.word	0x240003cc
 8000a84:	40003800 	.word	0x40003800

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ace:	4814      	ldr	r0, [pc, #80]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000ad0:	f00a ff7b 	bl	800b9ca <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ada:	f000 fae1 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000aec:	f00b f944 	bl	800bd78 <HAL_TIM_ConfigClockSource>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000af6:	f000 fad3 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <MX_TIM2_Init+0x98>)
 8000b08:	f00b fb94 	bl	800c234 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b12:	f000 fac5 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	24000570 	.word	0x24000570

08000b24 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b2a:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <MX_UART8_Init+0x98>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 57600;
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b30:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000b34:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b3c:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b70:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b72:	f00b fc0b 	bl	800c38c <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_UART8_Init+0x5c>
  {
    Error_Handler();
 8000b7c:	f000 fa90 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b84:	f00d fd18 	bl	800e5b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_UART8_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 fa87 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000b96:	f00d fd4d 	bl	800e634 <HAL_UARTEx_SetRxFifoThreshold>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_UART8_Init+0x80>
  {
    Error_Handler();
 8000ba0:	f000 fa7e 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_UART8_Init+0x94>)
 8000ba6:	f00d fcce 	bl	800e546 <HAL_UARTEx_DisableFifoMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_UART8_Init+0x90>
  {
    Error_Handler();
 8000bb0:	f000 fa76 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	240005bc 	.word	0x240005bc
 8000bbc:	40007c00 	.word	0x40007c00

08000bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <MX_USART1_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c0a:	f00b fbbf 	bl	800c38c <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 fa44 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c1c:	f00d fccc 	bl	800e5b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 fa3b 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c2e:	f00d fd01 	bl	800e634 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 fa32 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c3e:	f00d fc82 	bl	800e546 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 fa2a 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000688 	.word	0x24000688
 8000c54:	40011000 	.word	0x40011000

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c5e:	4a23      	ldr	r2, [pc, #140]	@ (8000cec <MX_USART2_UART_Init+0x94>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c64:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <MX_USART2_UART_Init+0x98>)
 8000c66:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c80:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000ca0:	f00b fb74 	bl	800c38c <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000caa:	f000 f9f9 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000cb2:	f00d fc81 	bl	800e5b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000cbc:	f000 f9f0 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000cc4:	f00d fcb6 	bl	800e634 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000cce:	f000 f9e7 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000cd4:	f00d fc37 	bl	800e546 <HAL_UARTEx_DisableFifoMode>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000cde:	f000 f9df 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000754 	.word	0x24000754
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	000f4240 	.word	0x000f4240

08000cf4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8000e34 <MX_DMA_Init+0x140>)
 8000cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d00:	4a4c      	ldr	r2, [pc, #304]	@ (8000e34 <MX_DMA_Init+0x140>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e34 <MX_DMA_Init+0x140>)
 8000d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d18:	4b46      	ldr	r3, [pc, #280]	@ (8000e34 <MX_DMA_Init+0x140>)
 8000d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d1e:	4a45      	ldr	r2, [pc, #276]	@ (8000e34 <MX_DMA_Init+0x140>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d28:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <MX_DMA_Init+0x140>)
 8000d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000d36:	4b40      	ldr	r3, [pc, #256]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d38:	4a40      	ldr	r2, [pc, #256]	@ (8000e3c <MX_DMA_Init+0x148>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d42:	4b3d      	ldr	r3, [pc, #244]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d44:	2280      	movs	r2, #128	@ 0x80
 8000d46:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000d48:	4b3b      	ldr	r3, [pc, #236]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d4e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d56:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b37      	ldr	r3, [pc, #220]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000d64:	4b34      	ldr	r3, [pc, #208]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d70:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d74:	2204      	movs	r2, #4
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000d8a:	482b      	ldr	r0, [pc, #172]	@ (8000e38 <MX_DMA_Init+0x144>)
 8000d8c:	f001 fa5a 	bl	8002244 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8000d96:	f000 f983 	bl	80010a0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	200b      	movs	r0, #11
 8000da0:	f001 fa28 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000da4:	200b      	movs	r0, #11
 8000da6:	f001 fa3f 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	200c      	movs	r0, #12
 8000db0:	f001 fa20 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000db4:	200c      	movs	r0, #12
 8000db6:	f001 fa37 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	200d      	movs	r0, #13
 8000dc0:	f001 fa18 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dc4:	200d      	movs	r0, #13
 8000dc6:	f001 fa2f 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	200e      	movs	r0, #14
 8000dd0:	f001 fa10 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dd4:	200e      	movs	r0, #14
 8000dd6:	f001 fa27 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	200f      	movs	r0, #15
 8000de0:	f001 fa08 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000de4:	200f      	movs	r0, #15
 8000de6:	f001 fa1f 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	2010      	movs	r0, #16
 8000df0:	f001 fa00 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df4:	2010      	movs	r0, #16
 8000df6:	f001 fa17 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2011      	movs	r0, #17
 8000e00:	f001 f9f8 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e04:	2011      	movs	r0, #17
 8000e06:	f001 fa0f 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	202f      	movs	r0, #47	@ 0x2f
 8000e10:	f001 f9f0 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e14:	202f      	movs	r0, #47	@ 0x2f
 8000e16:	f001 fa07 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2038      	movs	r0, #56	@ 0x38
 8000e20:	f001 f9e8 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e24:	2038      	movs	r0, #56	@ 0x38
 8000e26:	f001 f9ff 	bl	8002228 <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	58024400 	.word	0x58024400
 8000e38:	24000af0 	.word	0x24000af0
 8000e3c:	40020410 	.word	0x40020410

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	@ 0x30
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b79      	ldr	r3, [pc, #484]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	4a77      	ldr	r2, [pc, #476]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e66:	4b75      	ldr	r3, [pc, #468]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e74:	4b71      	ldr	r3, [pc, #452]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	4a70      	ldr	r2, [pc, #448]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e84:	4b6d      	ldr	r3, [pc, #436]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b6a      	ldr	r3, [pc, #424]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	4a68      	ldr	r2, [pc, #416]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea2:	4b66      	ldr	r3, [pc, #408]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b62      	ldr	r3, [pc, #392]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	4a61      	ldr	r2, [pc, #388]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	4a59      	ldr	r2, [pc, #356]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ede:	4b57      	ldr	r3, [pc, #348]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b53      	ldr	r3, [pc, #332]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a52      	ldr	r2, [pc, #328]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <MX_GPIO_Init+0x1fc>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|NEW_SAMPLES_INDICATOR_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f248 2108 	movw	r1, #33288	@ 0x8208
 8000f10:	484b      	ldr	r0, [pc, #300]	@ (8001040 <MX_GPIO_Init+0x200>)
 8000f12:	f005 fbb1 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	210c      	movs	r1, #12
 8000f1a:	484a      	ldr	r0, [pc, #296]	@ (8001044 <MX_GPIO_Init+0x204>)
 8000f1c:	f005 fbac 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTTON_LED_1_Pin|BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2103      	movs	r1, #3
 8000f24:	4848      	ldr	r0, [pc, #288]	@ (8001048 <MX_GPIO_Init+0x208>)
 8000f26:	f005 fba7 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f30:	4846      	ldr	r0, [pc, #280]	@ (800104c <MX_GPIO_Init+0x20c>)
 8000f32:	f005 fba1 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f3c:	4844      	ldr	r0, [pc, #272]	@ (8001050 <MX_GPIO_Init+0x210>)
 8000f3e:	f005 fb9b 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000f42:	f248 0308 	movw	r3, #32776	@ 0x8008
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4839      	ldr	r0, [pc, #228]	@ (8001040 <MX_GPIO_Init+0x200>)
 8000f5c:	f005 f9c4 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_BUTTON_2_Pin SIDE_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = SIDE_BUTTON_2_Pin|SIDE_BUTTON_1_Pin;
 8000f60:	2303      	movs	r3, #3
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4834      	ldr	r0, [pc, #208]	@ (8001044 <MX_GPIO_Init+0x204>)
 8000f74:	f005 f9b8 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482d      	ldr	r0, [pc, #180]	@ (8001044 <MX_GPIO_Init+0x204>)
 8000f90:	f005 f9aa 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LED_1_Pin BUTTON_LED_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_1_Pin|BUTTON_LED_2_Pin;
 8000f94:	2303      	movs	r3, #3
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4827      	ldr	r0, [pc, #156]	@ (8001048 <MX_GPIO_Init+0x208>)
 8000fac:	f005 f99c 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_RESET_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = UART_RESET_INTERRUPT_Pin;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fb4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART_RESET_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4821      	ldr	r0, [pc, #132]	@ (800104c <MX_GPIO_Init+0x20c>)
 8000fc6:	f005 f98f 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEW_SAMPLES_INDICATOR_Pin */
  GPIO_InitStruct.Pin = NEW_SAMPLES_INDICATOR_Pin;
 8000fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NEW_SAMPLES_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4817      	ldr	r0, [pc, #92]	@ (8001040 <MX_GPIO_Init+0x200>)
 8000fe4:	f005 f980 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4812      	ldr	r0, [pc, #72]	@ (800104c <MX_GPIO_Init+0x20c>)
 8001002:	f005 f971 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 8001006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	480c      	ldr	r0, [pc, #48]	@ (8001050 <MX_GPIO_Init+0x210>)
 8001020:	f005 f962 	bl	80062e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(UART_RESET_INTERRUPT_EXTI_IRQn, 5, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2105      	movs	r1, #5
 8001028:	2008      	movs	r0, #8
 800102a:	f001 f8e3 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART_RESET_INTERRUPT_EXTI_IRQn);
 800102e:	2008      	movs	r0, #8
 8001030:	f001 f8fa 	bl	8002228 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001034:	bf00      	nop
 8001036:	3730      	adds	r7, #48	@ 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024400 	.word	0x58024400
 8001040:	58021000 	.word	0x58021000
 8001044:	58020800 	.word	0x58020800
 8001048:	58020000 	.word	0x58020000
 800104c:	58020400 	.word	0x58020400
 8001050:	58020c00 	.word	0x58020c00

08001054 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//	  firmware_loop();
		osDelay(1000);
 800105c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001060:	f00d fd1f 	bl	800eaa2 <osDelay>
 8001064:	e7fa      	b.n	800105c <StartDefaultTask+0x8>

08001066 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108e:	f000 ffa9 	bl	8001fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40001000 	.word	0x40001000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_MspInit+0x38>)
 80010b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_MspInit+0x38>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <HAL_MspInit+0x38>)
 80010c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	f06f 0001 	mvn.w	r0, #1
 80010d8:	f001 f88c 	bl	80021f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400

080010e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0ba      	sub	sp, #232	@ 0xe8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	22c0      	movs	r2, #192	@ 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f022 fede 	bl	8023eca <memset>
  if(hfdcan->Instance==FDCAN1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2f      	ldr	r2, [pc, #188]	@ (80011d0 <HAL_FDCAN_MspInit+0xe8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d156      	bne.n	80011c6 <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001118:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001124:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4618      	mov	r0, r3
 8001132:	f007 f807 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800113c:	f7ff ffb0 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <HAL_FDCAN_MspInit+0xec>)
 8001142:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <HAL_FDCAN_MspInit+0xec>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <HAL_FDCAN_MspInit+0xec>)
 8001152:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_FDCAN_MspInit+0xec>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <HAL_FDCAN_MspInit+0xec>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_FDCAN_MspInit+0xec>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001194:	2309      	movs	r3, #9
 8001196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <HAL_FDCAN_MspInit+0xf0>)
 80011a2:	f005 f8a1 	bl	80062e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2105      	movs	r1, #5
 80011aa:	2013      	movs	r0, #19
 80011ac:	f001 f822 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011b0:	2013      	movs	r0, #19
 80011b2:	f001 f839 	bl	8002228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2015      	movs	r0, #21
 80011bc:	f001 f81a 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80011c0:	2015      	movs	r0, #21
 80011c2:	f001 f831 	bl	8002228 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	37e8      	adds	r7, #232	@ 0xe8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	4000a000 	.word	0x4000a000
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020c00 	.word	0x58020c00

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0bc      	sub	sp, #240	@ 0xf0
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	22c0      	movs	r2, #192	@ 0xc0
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f022 fe64 	bl	8023eca <memset>
  if(hi2c->Instance==I2C3)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a39      	ldr	r2, [pc, #228]	@ (80012ec <HAL_I2C_MspInit+0x110>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d16b      	bne.n	80012e4 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800120c:	f04f 0208 	mov.w	r2, #8
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	4618      	mov	r0, r3
 8001224:	f006 ff8e 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800122e:	f7ff ff37 	bl	80010a0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	4a2d      	ldr	r2, [pc, #180]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	4a26      	ldr	r2, [pc, #152]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800126e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001288:	2304      	movs	r3, #4
 800128a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001292:	4619      	mov	r1, r3
 8001294:	4817      	ldr	r0, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x118>)
 8001296:	f005 f827 	bl	80062e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800129a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a2:	2312      	movs	r3, #18
 80012a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012be:	4619      	mov	r1, r3
 80012c0:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <HAL_I2C_MspInit+0x11c>)
 80012c2:	f005 f811 	bl	80062e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 80012c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012cc:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 80012ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_I2C_MspInit+0x114>)
 80012d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80012e4:	bf00      	nop
 80012e6:	37f0      	adds	r7, #240	@ 0xf0
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005c00 	.word	0x40005c00
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020800 	.word	0x58020800
 80012f8:	58020000 	.word	0x58020000

080012fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0bc      	sub	sp, #240	@ 0xf0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	22c0      	movs	r2, #192	@ 0xc0
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f022 fdd4 	bl	8023eca <memset>
  if(hspi->Instance==SPI1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7d      	ldr	r2, [pc, #500]	@ (800151c <HAL_SPI_MspInit+0x220>)
 8001328:	4293      	cmp	r3, r2
 800132a:	f040 80a8 	bne.w	800147e <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800132e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800133a:	2300      	movs	r3, #0
 800133c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	4618      	mov	r0, r3
 8001344:	f006 fefe 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800134e:	f7ff fea7 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	4b73      	ldr	r3, [pc, #460]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001358:	4a71      	ldr	r2, [pc, #452]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 800135a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800135e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001362:	4b6f      	ldr	r3, [pc, #444]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 8001364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b6b      	ldr	r3, [pc, #428]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	4a6a      	ldr	r2, [pc, #424]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001380:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23f0      	movs	r3, #240	@ 0xf0
 8001390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a6:	2305      	movs	r3, #5
 80013a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b0:	4619      	mov	r1, r3
 80013b2:	485c      	ldr	r0, [pc, #368]	@ (8001524 <HAL_SPI_MspInit+0x228>)
 80013b4:	f004 ff98 	bl	80062e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 80013b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013ba:	4a5c      	ldr	r2, [pc, #368]	@ (800152c <HAL_SPI_MspInit+0x230>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80013be:	4b5a      	ldr	r3, [pc, #360]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013c0:	2225      	movs	r2, #37	@ 0x25
 80013c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c4:	4b58      	ldr	r3, [pc, #352]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b55      	ldr	r3, [pc, #340]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d8:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013de:	4b52      	ldr	r3, [pc, #328]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013e4:	4b50      	ldr	r3, [pc, #320]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013f6:	484c      	ldr	r0, [pc, #304]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 80013f8:	f000 ff24 	bl	8002244 <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001402:	f7ff fe4d 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a47      	ldr	r2, [pc, #284]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 800140a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800140c:	4a46      	ldr	r2, [pc, #280]	@ (8001528 <HAL_SPI_MspInit+0x22c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 8001412:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001414:	4a47      	ldr	r2, [pc, #284]	@ (8001534 <HAL_SPI_MspInit+0x238>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001418:	4b45      	ldr	r3, [pc, #276]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 800141a:	2226      	movs	r2, #38	@ 0x26
 800141c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b44      	ldr	r3, [pc, #272]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001420:	2240      	movs	r2, #64	@ 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 800142c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001444:	4b3a      	ldr	r3, [pc, #232]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001450:	4837      	ldr	r0, [pc, #220]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001452:	f000 fef7 	bl	8002244 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 800145c:	f7ff fe20 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a33      	ldr	r2, [pc, #204]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001464:	679a      	str	r2, [r3, #120]	@ 0x78
 8001466:	4a32      	ldr	r2, [pc, #200]	@ (8001530 <HAL_SPI_MspInit+0x234>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	2023      	movs	r0, #35	@ 0x23
 8001472:	f000 febf 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001476:	2023      	movs	r0, #35	@ 0x23
 8001478:	f000 fed6 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800147c:	e04a      	b.n	8001514 <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2d      	ldr	r2, [pc, #180]	@ (8001538 <HAL_SPI_MspInit+0x23c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d145      	bne.n	8001514 <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001488:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001494:	2300      	movs	r3, #0
 8001496:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f006 fe51 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_SPI_MspInit+0x1b0>
      Error_Handler();
 80014a8:	f7ff fdfa 	bl	80010a0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 80014ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 80014be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d0:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_SPI_MspInit+0x224>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014e8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001502:	2305      	movs	r3, #5
 8001504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800150c:	4619      	mov	r1, r3
 800150e:	480b      	ldr	r0, [pc, #44]	@ (800153c <HAL_SPI_MspInit+0x240>)
 8001510:	f004 feea 	bl	80062e8 <HAL_GPIO_Init>
}
 8001514:	bf00      	nop
 8001516:	37f0      	adds	r7, #240	@ 0xf0
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40013000 	.word	0x40013000
 8001520:	58024400 	.word	0x58024400
 8001524:	58020000 	.word	0x58020000
 8001528:	24000480 	.word	0x24000480
 800152c:	400200a0 	.word	0x400200a0
 8001530:	240004f8 	.word	0x240004f8
 8001534:	400200b8 	.word	0x400200b8
 8001538:	40003800 	.word	0x40003800
 800153c:	58020400 	.word	0x58020400

08001540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001550:	d10e      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_TIM_Base_MspInit+0x3c>)
 8001554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_TIM_Base_MspInit+0x3c>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_TIM_Base_MspInit+0x3c>)
 8001564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58024400 	.word	0x58024400

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0be      	sub	sp, #248	@ 0xf8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	22c0      	movs	r2, #192	@ 0xc0
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f022 fc92 	bl	8023eca <memset>
  if(huart->Instance==UART8)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4aaf      	ldr	r2, [pc, #700]	@ (8001868 <HAL_UART_MspInit+0x2e8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	f040 80aa 	bne.w	8001706 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80015b2:	f04f 0202 	mov.w	r2, #2
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 fdbb 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80015d4:	f7ff fd64 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80015d8:	4ba4      	ldr	r3, [pc, #656]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 80015da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015de:	4aa3      	ldr	r2, [pc, #652]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 80015e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015e8:	4ba0      	ldr	r3, [pc, #640]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 80015ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f6:	4b9d      	ldr	r3, [pc, #628]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	4a9b      	ldr	r2, [pc, #620]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001606:	4b99      	ldr	r3, [pc, #612]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69bb      	ldr	r3, [r7, #24]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001614:	2303      	movs	r3, #3
 8001616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800162c:	2308      	movs	r3, #8
 800162e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001632:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001636:	4619      	mov	r1, r3
 8001638:	488d      	ldr	r0, [pc, #564]	@ (8001870 <HAL_UART_MspInit+0x2f0>)
 800163a:	f004 fe55 	bl	80062e8 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream2;
 800163e:	4b8d      	ldr	r3, [pc, #564]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001640:	4a8d      	ldr	r2, [pc, #564]	@ (8001878 <HAL_UART_MspInit+0x2f8>)
 8001642:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001644:	4b8b      	ldr	r3, [pc, #556]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001646:	2251      	movs	r2, #81	@ 0x51
 8001648:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164a:	4b8a      	ldr	r3, [pc, #552]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001650:	4b88      	ldr	r3, [pc, #544]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001656:	4b87      	ldr	r3, [pc, #540]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001658:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800165c:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b85      	ldr	r3, [pc, #532]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b83      	ldr	r3, [pc, #524]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 800166a:	4b82      	ldr	r3, [pc, #520]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b80      	ldr	r3, [pc, #512]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001676:	4b7f      	ldr	r3, [pc, #508]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800167c:	487d      	ldr	r0, [pc, #500]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 800167e:	f000 fde1 	bl	8002244 <HAL_DMA_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001688:	f7ff fd0a 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a79      	ldr	r2, [pc, #484]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001694:	4a77      	ldr	r2, [pc, #476]	@ (8001874 <HAL_UART_MspInit+0x2f4>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream3;
 800169a:	4b78      	ldr	r3, [pc, #480]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 800169c:	4a78      	ldr	r2, [pc, #480]	@ (8001880 <HAL_UART_MspInit+0x300>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80016a0:	4b76      	ldr	r3, [pc, #472]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016a2:	2252      	movs	r2, #82	@ 0x52
 80016a4:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a6:	4b75      	ldr	r3, [pc, #468]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016a8:	2240      	movs	r2, #64	@ 0x40
 80016aa:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ac:	4b73      	ldr	r3, [pc, #460]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b2:	4b72      	ldr	r3, [pc, #456]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b8:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ba:	4b70      	ldr	r3, [pc, #448]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c0:	4b6e      	ldr	r3, [pc, #440]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80016c6:	4b6d      	ldr	r3, [pc, #436]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016cc:	4b6b      	ldr	r3, [pc, #428]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d2:	4b6a      	ldr	r3, [pc, #424]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80016d8:	4868      	ldr	r0, [pc, #416]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016da:	f000 fdb3 	bl	8002244 <HAL_DMA_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80016e4:	f7ff fcdc 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a64      	ldr	r2, [pc, #400]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016ec:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016ee:	4a63      	ldr	r2, [pc, #396]	@ (800187c <HAL_UART_MspInit+0x2fc>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2105      	movs	r1, #5
 80016f8:	2053      	movs	r0, #83	@ 0x53
 80016fa:	f000 fd7b 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80016fe:	2053      	movs	r0, #83	@ 0x53
 8001700:	f000 fd92 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001704:	e179      	b.n	80019fa <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5e      	ldr	r2, [pc, #376]	@ (8001884 <HAL_UART_MspInit+0x304>)
 800170c:	4293      	cmp	r3, r2
 800170e:	f040 80c5 	bne.w	800189c <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001712:	f04f 0201 	mov.w	r2, #1
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001724:	f107 0320 	add.w	r3, r7, #32
 8001728:	4618      	mov	r0, r3
 800172a:	f006 fd0b 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001734:	f7ff fcb4 	bl	80010a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	4b4c      	ldr	r3, [pc, #304]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 800173a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800173e:	4a4b      	ldr	r2, [pc, #300]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001748:	4b48      	ldr	r3, [pc, #288]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 800174a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b45      	ldr	r3, [pc, #276]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	4a43      	ldr	r2, [pc, #268]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_UART_MspInit+0x2ec>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001774:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001778:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178e:	2307      	movs	r3, #7
 8001790:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001798:	4619      	mov	r1, r3
 800179a:	483b      	ldr	r0, [pc, #236]	@ (8001888 <HAL_UART_MspInit+0x308>)
 800179c:	f004 fda4 	bl	80062e8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80017a0:	4b3a      	ldr	r3, [pc, #232]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001890 <HAL_UART_MspInit+0x310>)
 80017a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017a6:	4b39      	ldr	r3, [pc, #228]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017a8:	2229      	movs	r2, #41	@ 0x29
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ac:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b36      	ldr	r3, [pc, #216]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c0:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017de:	482b      	ldr	r0, [pc, #172]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017e0:	f000 fd30 	bl	8002244 <HAL_DMA_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_UART_MspInit+0x26e>
      Error_Handler();
 80017ea:	f7ff fc59 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a26      	ldr	r2, [pc, #152]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017f6:	4a25      	ldr	r2, [pc, #148]	@ (800188c <HAL_UART_MspInit+0x30c>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80017fc:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <HAL_UART_MspInit+0x314>)
 80017fe:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <HAL_UART_MspInit+0x318>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001802:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001804:	222a      	movs	r2, #42	@ 0x2a
 8001806:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_UART_MspInit+0x314>)
 800180a:	2240      	movs	r2, #64	@ 0x40
 800180c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800181a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_UART_MspInit+0x314>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_UART_MspInit+0x314>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800183a:	4816      	ldr	r0, [pc, #88]	@ (8001894 <HAL_UART_MspInit+0x314>)
 800183c:	f000 fd02 	bl	8002244 <HAL_DMA_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001846:	f7ff fc2b 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <HAL_UART_MspInit+0x314>)
 800184e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001850:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <HAL_UART_MspInit+0x314>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2105      	movs	r1, #5
 800185a:	2025      	movs	r0, #37	@ 0x25
 800185c:	f000 fcca 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001860:	2025      	movs	r0, #37	@ 0x25
 8001862:	f000 fce1 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 8001866:	e0c8      	b.n	80019fa <HAL_UART_MspInit+0x47a>
 8001868:	40007c00 	.word	0x40007c00
 800186c:	58024400 	.word	0x58024400
 8001870:	58021000 	.word	0x58021000
 8001874:	24000820 	.word	0x24000820
 8001878:	40020040 	.word	0x40020040
 800187c:	24000898 	.word	0x24000898
 8001880:	40020058 	.word	0x40020058
 8001884:	40011000 	.word	0x40011000
 8001888:	58020000 	.word	0x58020000
 800188c:	24000910 	.word	0x24000910
 8001890:	40020010 	.word	0x40020010
 8001894:	24000988 	.word	0x24000988
 8001898:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a58      	ldr	r2, [pc, #352]	@ (8001a04 <HAL_UART_MspInit+0x484>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f040 80a9 	bne.w	80019fa <HAL_UART_MspInit+0x47a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018a8:	f04f 0202 	mov.w	r2, #2
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 fc40 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0x34e>
      Error_Handler();
 80018ca:	f7ff fbe9 	bl	80010a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001a08 <HAL_UART_MspInit+0x488>)
 80018d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001a08 <HAL_UART_MspInit+0x488>)
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <HAL_UART_MspInit+0x488>)
 80018e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b46      	ldr	r3, [pc, #280]	@ (8001a08 <HAL_UART_MspInit+0x488>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f2:	4a45      	ldr	r2, [pc, #276]	@ (8001a08 <HAL_UART_MspInit+0x488>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018fc:	4b42      	ldr	r3, [pc, #264]	@ (8001a08 <HAL_UART_MspInit+0x488>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800190a:	230c      	movs	r3, #12
 800190c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001922:	2307      	movs	r3, #7
 8001924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800192c:	4619      	mov	r1, r3
 800192e:	4837      	ldr	r0, [pc, #220]	@ (8001a0c <HAL_UART_MspInit+0x48c>)
 8001930:	f004 fcda 	bl	80062e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8001934:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001936:	4a37      	ldr	r2, [pc, #220]	@ (8001a14 <HAL_UART_MspInit+0x494>)
 8001938:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800193a:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 800193c:	222b      	movs	r2, #43	@ 0x2b
 800193e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001940:	4b33      	ldr	r3, [pc, #204]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001946:	4b32      	ldr	r3, [pc, #200]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194c:	4b30      	ldr	r3, [pc, #192]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 800194e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001952:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001960:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001972:	4827      	ldr	r0, [pc, #156]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001974:	f000 fc66 	bl	8002244 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_UART_MspInit+0x402>
      Error_Handler();
 800197e:	f7ff fb8f 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 8001986:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800198a:	4a21      	ldr	r2, [pc, #132]	@ (8001a10 <HAL_UART_MspInit+0x490>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 8001992:	4a22      	ldr	r2, [pc, #136]	@ (8001a1c <HAL_UART_MspInit+0x49c>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 8001998:	222c      	movs	r2, #44	@ 0x2c
 800199a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019ce:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019d0:	f000 fc38 	bl	8002244 <HAL_DMA_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_UART_MspInit+0x45e>
      Error_Handler();
 80019da:	f7ff fb61 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <HAL_UART_MspInit+0x498>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	2026      	movs	r0, #38	@ 0x26
 80019f0:	f000 fc00 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f4:	2026      	movs	r0, #38	@ 0x26
 80019f6:	f000 fc17 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	37f8      	adds	r7, #248	@ 0xf8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004400 	.word	0x40004400
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	58020000 	.word	0x58020000
 8001a10:	24000a00 	.word	0x24000a00
 8001a14:	40020070 	.word	0x40020070
 8001a18:	24000a78 	.word	0x24000a78
 8001a1c:	40020088 	.word	0x40020088

08001a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b090      	sub	sp, #64	@ 0x40
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d827      	bhi.n	8001a7e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	2036      	movs	r0, #54	@ 0x36
 8001a34:	f000 fbde 	bl	80021f4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a38:	2036      	movs	r0, #54	@ 0x36
 8001a3a:	f000 fbf5 	bl	8002228 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001a3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ae4 <HAL_InitTick+0xc4>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <HAL_InitTick+0xc8>)
 8001a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a4a:	4a27      	ldr	r2, [pc, #156]	@ (8001ae8 <HAL_InitTick+0xc8>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <HAL_InitTick+0xc8>)
 8001a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a62:	f107 0210 	add.w	r2, r7, #16
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 fb27 	bl	80080c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <HAL_InitTick+0x6a>
 8001a7c:	e001      	b.n	8001a82 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e02b      	b.n	8001ada <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a82:	f006 faf1 	bl	8008068 <HAL_RCC_GetPCLK1Freq>
 8001a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001a88:	e004      	b.n	8001a94 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a8a:	f006 faed 	bl	8008068 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a96:	4a15      	ldr	r2, [pc, #84]	@ (8001aec <HAL_InitTick+0xcc>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001aa4:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <HAL_InitTick+0xd4>)
 8001aa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001aaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ac2:	480b      	ldr	r0, [pc, #44]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001ac4:	f009 ff81 	bl	800b9ca <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ace:	4808      	ldr	r0, [pc, #32]	@ (8001af0 <HAL_InitTick+0xd0>)
 8001ad0:	f009 ffd2 	bl	800ba78 <HAL_TIM_Base_Start_IT>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	e000      	b.n	8001ada <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3740      	adds	r7, #64	@ 0x40
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	24000008 	.word	0x24000008
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	24000b70 	.word	0x24000b70
 8001af4:	40001000 	.word	0x40001000

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <NMI_Handler+0x4>

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <MemManage_Handler+0x4>

08001b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UART_RESET_INTERRUPT_Pin);
 8001b32:	2004      	movs	r0, #4
 8001b34:	f004 fdd3 	bl	80066de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <DMA1_Stream0_IRQHandler+0x10>)
 8001b42:	f001 fea9 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24000910 	.word	0x24000910

08001b50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <DMA1_Stream1_IRQHandler+0x10>)
 8001b56:	f001 fe9f 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	24000988 	.word	0x24000988

08001b64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <DMA1_Stream2_IRQHandler+0x10>)
 8001b6a:	f001 fe95 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	24000820 	.word	0x24000820

08001b78 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <DMA1_Stream3_IRQHandler+0x10>)
 8001b7e:	f001 fe8b 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	24000898 	.word	0x24000898

08001b8c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <DMA1_Stream4_IRQHandler+0x10>)
 8001b92:	f001 fe81 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000a00 	.word	0x24000a00

08001ba0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ba6:	f001 fe77 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	24000a78 	.word	0x24000a78

08001bb4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <DMA1_Stream6_IRQHandler+0x10>)
 8001bba:	f001 fe6d 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24000480 	.word	0x24000480

08001bc8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001bce:	f003 fe9b 	bl	8005908 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24000224 	.word	0x24000224

08001bdc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <FDCAN1_IT1_IRQHandler+0x10>)
 8001be2:	f003 fe91 	bl	8005908 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24000224 	.word	0x24000224

08001bf0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <SPI1_IRQHandler+0x10>)
 8001bf6:	f009 fabb 	bl	800b170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	24000318 	.word	0x24000318

08001c04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <USART1_IRQHandler+0x10>)
 8001c0a:	f00a fddd 	bl	800c7c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	24000688 	.word	0x24000688

08001c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <USART2_IRQHandler+0x10>)
 8001c1e:	f00a fdd3 	bl	800c7c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	24000754 	.word	0x24000754

08001c2c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA1_Stream7_IRQHandler+0x10>)
 8001c32:	f001 fe31 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	240004f8 	.word	0x240004f8

08001c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <TIM6_DAC_IRQHandler+0x10>)
 8001c46:	f009 ff8f 	bl	800bb68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	24000b70 	.word	0x24000b70

08001c54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <DMA2_Stream0_IRQHandler+0x10>)
 8001c5a:	f001 fe1d 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	24000af0 	.word	0x24000af0

08001c68 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <UART8_IRQHandler+0x10>)
 8001c6e:	f00a fdab 	bl	800c7c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	240005bc 	.word	0x240005bc

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c96:	f022 f97b 	bl	8023f90 <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cbe:	bf00      	nop
 8001cc0:	e7fd      	b.n	8001cbe <_exit+0x12>

08001cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e00a      	b.n	8001cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	4601      	mov	r1, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	b2ca      	uxtb	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dbf0      	blt.n	8001cd4 <_read+0x12>
  }

  return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e009      	b.n	8001d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	60ba      	str	r2, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbf1      	blt.n	8001d0e <_write+0x12>
  }
  return len;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_close>:

int _close(int file)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_isatty>:

int _isatty(int file)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f022 f8e0 	bl	8023f90 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	24080000 	.word	0x24080000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	24000bbc 	.word	0x24000bbc
 8001e04:	24023158 	.word	0x24023158

08001e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <SystemInit+0xe4>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e12:	4a36      	ldr	r2, [pc, #216]	@ (8001eec <SystemInit+0xe4>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <SystemInit+0xe8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	2b06      	cmp	r3, #6
 8001e26:	d807      	bhi.n	8001e38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <SystemInit+0xe8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 030f 	bic.w	r3, r3, #15
 8001e30:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <SystemInit+0xe8>)
 8001e32:	f043 0307 	orr.w	r3, r3, #7
 8001e36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <SystemInit+0xec>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <SystemInit+0xec>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <SystemInit+0xec>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <SystemInit+0xec>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4929      	ldr	r1, [pc, #164]	@ (8001ef4 <SystemInit+0xec>)
 8001e50:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <SystemInit+0xf0>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <SystemInit+0xe8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e62:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <SystemInit+0xe8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 030f 	bic.w	r3, r3, #15
 8001e6a:	4a21      	ldr	r2, [pc, #132]	@ (8001ef0 <SystemInit+0xe8>)
 8001e6c:	f043 0307 	orr.w	r3, r3, #7
 8001e70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <SystemInit+0xec>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <SystemInit+0xec>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <SystemInit+0xec>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <SystemInit+0xec>)
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <SystemInit+0xf4>)
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <SystemInit+0xec>)
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <SystemInit+0xf8>)
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <SystemInit+0xec>)
 8001e92:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <SystemInit+0xfc>)
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <SystemInit+0xec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <SystemInit+0xec>)
 8001e9e:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <SystemInit+0xfc>)
 8001ea0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ea2:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <SystemInit+0xec>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <SystemInit+0xec>)
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <SystemInit+0xfc>)
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <SystemInit+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <SystemInit+0xec>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <SystemInit+0xec>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <SystemInit+0xec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <SystemInit+0x100>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <SystemInit+0x104>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ed2:	d202      	bcs.n	8001eda <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <SystemInit+0x108>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <SystemInit+0x10c>)
 8001edc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ee0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00
 8001ef0:	52002000 	.word	0x52002000
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001efc:	02020200 	.word	0x02020200
 8001f00:	01ff0000 	.word	0x01ff0000
 8001f04:	01010280 	.word	0x01010280
 8001f08:	5c001000 	.word	0x5c001000
 8001f0c:	ffff0000 	.word	0xffff0000
 8001f10:	51008108 	.word	0x51008108
 8001f14:	52004000 	.word	0x52004000

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f1c:	f7ff ff74 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f22:	490d      	ldr	r1, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f38:	4c0a      	ldr	r4, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f022 f829 	bl	8023f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7fe fb99 	bl	8000680 <main>
  bx  lr
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f58:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 8001f5c:	08027534 	.word	0x08027534
  ldr r2, =_sbss
 8001f60:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 8001f64:	24023154 	.word	0x24023154

08001f68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC3_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f000 f933 	bl	80021de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f78:	f005 fecc 	bl	8007d14 <HAL_RCC_GetSysClockFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_Init+0x68>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	4913      	ldr	r1, [pc, #76]	@ (8001fd8 <HAL_Init+0x6c>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_Init+0x68>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd8 <HAL_Init+0x6c>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_Init+0x70>)
 8001fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_Init+0x74>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f7ff fd32 	bl	8001a20 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e002      	b.n	8001fcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc6:	f7ff f871 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	080260d0 	.word	0x080260d0
 8001fdc:	24000004 	.word	0x24000004
 8001fe0:	24000000 	.word	0x24000000

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2400000c 	.word	0x2400000c
 8002008:	24000bc0 	.word	0x24000bc0

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	24000bc0 	.word	0x24000bc0

08002024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_Delay+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2400000c 	.word	0x2400000c

0800206c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_GetREVID+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0c1b      	lsrs	r3, r3, #16
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	5c001000 	.word	0x5c001000

08002084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00
 80020c8:	05fa0000 	.word	0x05fa0000

080020cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0b      	blt.n	8002112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4907      	ldr	r1, [pc, #28]	@ (8002120 <__NVIC_EnableIRQ+0x38>)
 8002102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100

08002124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	@ (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	@ (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff4c 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002202:	f7ff ff63 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002206:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6978      	ldr	r0, [r7, #20]
 800220e:	f7ff ffb3 	bl	8002178 <NVIC_EncodePriority>
 8002212:	4602      	mov	r2, r0
 8002214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff82 	bl	8002124 <__NVIC_SetPriority>
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff56 	bl	80020e8 <__NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff fede 	bl	800200c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e316      	b.n	800288a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a66      	ldr	r2, [pc, #408]	@ (80023fc <HAL_DMA_Init+0x1b8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d04a      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a65      	ldr	r2, [pc, #404]	@ (8002400 <HAL_DMA_Init+0x1bc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d045      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a63      	ldr	r2, [pc, #396]	@ (8002404 <HAL_DMA_Init+0x1c0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d040      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a62      	ldr	r2, [pc, #392]	@ (8002408 <HAL_DMA_Init+0x1c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d03b      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a60      	ldr	r2, [pc, #384]	@ (800240c <HAL_DMA_Init+0x1c8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d036      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5f      	ldr	r2, [pc, #380]	@ (8002410 <HAL_DMA_Init+0x1cc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d031      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5d      	ldr	r2, [pc, #372]	@ (8002414 <HAL_DMA_Init+0x1d0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02c      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002418 <HAL_DMA_Init+0x1d4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d027      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5a      	ldr	r2, [pc, #360]	@ (800241c <HAL_DMA_Init+0x1d8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d022      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a59      	ldr	r2, [pc, #356]	@ (8002420 <HAL_DMA_Init+0x1dc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d01d      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a57      	ldr	r2, [pc, #348]	@ (8002424 <HAL_DMA_Init+0x1e0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d018      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a56      	ldr	r2, [pc, #344]	@ (8002428 <HAL_DMA_Init+0x1e4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a54      	ldr	r2, [pc, #336]	@ (800242c <HAL_DMA_Init+0x1e8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a53      	ldr	r2, [pc, #332]	@ (8002430 <HAL_DMA_Init+0x1ec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a51      	ldr	r2, [pc, #324]	@ (8002434 <HAL_DMA_Init+0x1f0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_Init+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a50      	ldr	r2, [pc, #320]	@ (8002438 <HAL_DMA_Init+0x1f4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_DMA_Init+0xbc>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_DMA_Init+0xbe>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 813b 	beq.w	800257e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a37      	ldr	r2, [pc, #220]	@ (80023fc <HAL_DMA_Init+0x1b8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04a      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a36      	ldr	r2, [pc, #216]	@ (8002400 <HAL_DMA_Init+0x1bc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d045      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a34      	ldr	r2, [pc, #208]	@ (8002404 <HAL_DMA_Init+0x1c0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d040      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a33      	ldr	r2, [pc, #204]	@ (8002408 <HAL_DMA_Init+0x1c4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d03b      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a31      	ldr	r2, [pc, #196]	@ (800240c <HAL_DMA_Init+0x1c8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d036      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a30      	ldr	r2, [pc, #192]	@ (8002410 <HAL_DMA_Init+0x1cc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <HAL_DMA_Init+0x1d0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02c      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2d      	ldr	r2, [pc, #180]	@ (8002418 <HAL_DMA_Init+0x1d4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d027      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2b      	ldr	r2, [pc, #172]	@ (800241c <HAL_DMA_Init+0x1d8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2a      	ldr	r2, [pc, #168]	@ (8002420 <HAL_DMA_Init+0x1dc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01d      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a28      	ldr	r2, [pc, #160]	@ (8002424 <HAL_DMA_Init+0x1e0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d018      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a27      	ldr	r2, [pc, #156]	@ (8002428 <HAL_DMA_Init+0x1e4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a25      	ldr	r2, [pc, #148]	@ (800242c <HAL_DMA_Init+0x1e8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a24      	ldr	r2, [pc, #144]	@ (8002430 <HAL_DMA_Init+0x1ec>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a22      	ldr	r2, [pc, #136]	@ (8002434 <HAL_DMA_Init+0x1f0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_Init+0x174>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <HAL_DMA_Init+0x1f4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d108      	bne.n	80023ca <HAL_DMA_Init+0x186>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e007      	b.n	80023da <HAL_DMA_Init+0x196>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023da:	e02f      	b.n	800243c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023dc:	f7ff fe16 	bl	800200c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d928      	bls.n	800243c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e246      	b.n	800288a <HAL_DMA_Init+0x646>
 80023fc:	40020010 	.word	0x40020010
 8002400:	40020028 	.word	0x40020028
 8002404:	40020040 	.word	0x40020040
 8002408:	40020058 	.word	0x40020058
 800240c:	40020070 	.word	0x40020070
 8002410:	40020088 	.word	0x40020088
 8002414:	400200a0 	.word	0x400200a0
 8002418:	400200b8 	.word	0x400200b8
 800241c:	40020410 	.word	0x40020410
 8002420:	40020428 	.word	0x40020428
 8002424:	40020440 	.word	0x40020440
 8002428:	40020458 	.word	0x40020458
 800242c:	40020470 	.word	0x40020470
 8002430:	40020488 	.word	0x40020488
 8002434:	400204a0 	.word	0x400204a0
 8002438:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1c8      	bne.n	80023dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4b83      	ldr	r3, [pc, #524]	@ (8002664 <HAL_DMA_Init+0x420>)
 8002456:	4013      	ands	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002462:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	4313      	orrs	r3, r2
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80024a0:	4b71      	ldr	r3, [pc, #452]	@ (8002668 <HAL_DMA_Init+0x424>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b71      	ldr	r3, [pc, #452]	@ (800266c <HAL_DMA_Init+0x428>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ac:	d328      	bcc.n	8002500 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b28      	cmp	r3, #40	@ 0x28
 80024b4:	d903      	bls.n	80024be <HAL_DMA_Init+0x27a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80024bc:	d917      	bls.n	80024ee <HAL_DMA_Init+0x2aa>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80024c4:	d903      	bls.n	80024ce <HAL_DMA_Init+0x28a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b42      	cmp	r3, #66	@ 0x42
 80024cc:	d90f      	bls.n	80024ee <HAL_DMA_Init+0x2aa>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b46      	cmp	r3, #70	@ 0x46
 80024d4:	d903      	bls.n	80024de <HAL_DMA_Init+0x29a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b48      	cmp	r3, #72	@ 0x48
 80024dc:	d907      	bls.n	80024ee <HAL_DMA_Init+0x2aa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b4e      	cmp	r3, #78	@ 0x4e
 80024e4:	d905      	bls.n	80024f2 <HAL_DMA_Init+0x2ae>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b52      	cmp	r3, #82	@ 0x52
 80024ec:	d801      	bhi.n	80024f2 <HAL_DMA_Init+0x2ae>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_DMA_Init+0x2b0>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024fe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0307 	bic.w	r3, r3, #7
 8002516:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	2b04      	cmp	r3, #4
 8002528:	d117      	bne.n	800255a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00e      	beq.n	800255a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f002 fb99 	bl	8004c74 <DMA_CheckFifoParam>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2240      	movs	r2, #64	@ 0x40
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e197      	b.n	800288a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f002 fad4 	bl	8004b10 <DMA_CalcBaseAndBitshift>
 8002568:	4603      	mov	r3, r0
 800256a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	223f      	movs	r2, #63	@ 0x3f
 8002576:	409a      	lsls	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e0cd      	b.n	800271a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3b      	ldr	r2, [pc, #236]	@ (8002670 <HAL_DMA_Init+0x42c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a39      	ldr	r2, [pc, #228]	@ (8002674 <HAL_DMA_Init+0x430>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01d      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a38      	ldr	r2, [pc, #224]	@ (8002678 <HAL_DMA_Init+0x434>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d018      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a36      	ldr	r2, [pc, #216]	@ (800267c <HAL_DMA_Init+0x438>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a35      	ldr	r2, [pc, #212]	@ (8002680 <HAL_DMA_Init+0x43c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a33      	ldr	r2, [pc, #204]	@ (8002684 <HAL_DMA_Init+0x440>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a32      	ldr	r2, [pc, #200]	@ (8002688 <HAL_DMA_Init+0x444>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_Init+0x38a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a30      	ldr	r2, [pc, #192]	@ (800268c <HAL_DMA_Init+0x448>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Init+0x38e>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_DMA_Init+0x390>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8097 	beq.w	8002708 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <HAL_DMA_Init+0x42c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d021      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <HAL_DMA_Init+0x430>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01c      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <HAL_DMA_Init+0x434>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d017      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <HAL_DMA_Init+0x438>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d012      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1e      	ldr	r2, [pc, #120]	@ (8002680 <HAL_DMA_Init+0x43c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00d      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <HAL_DMA_Init+0x440>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d008      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1b      	ldr	r2, [pc, #108]	@ (8002688 <HAL_DMA_Init+0x444>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_DMA_Init+0x3e4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_DMA_Init+0x448>)
 8002626:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_DMA_Init+0x44c>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d021      	beq.n	8002694 <HAL_DMA_Init+0x450>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b80      	cmp	r3, #128	@ 0x80
 8002656:	d102      	bne.n	800265e <HAL_DMA_Init+0x41a>
 8002658:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800265c:	e01b      	b.n	8002696 <HAL_DMA_Init+0x452>
 800265e:	2300      	movs	r3, #0
 8002660:	e019      	b.n	8002696 <HAL_DMA_Init+0x452>
 8002662:	bf00      	nop
 8002664:	fe10803f 	.word	0xfe10803f
 8002668:	5c001000 	.word	0x5c001000
 800266c:	ffff0000 	.word	0xffff0000
 8002670:	58025408 	.word	0x58025408
 8002674:	5802541c 	.word	0x5802541c
 8002678:	58025430 	.word	0x58025430
 800267c:	58025444 	.word	0x58025444
 8002680:	58025458 	.word	0x58025458
 8002684:	5802546c 	.word	0x5802546c
 8002688:	58025480 	.word	0x58025480
 800268c:	58025494 	.word	0x58025494
 8002690:	fffe000f 	.word	0xfffe000f
 8002694:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800269c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b6e      	ldr	r3, [pc, #440]	@ (8002894 <HAL_DMA_Init+0x650>)
 80026dc:	4413      	add	r3, r2
 80026de:	4a6e      	ldr	r2, [pc, #440]	@ (8002898 <HAL_DMA_Init+0x654>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	009a      	lsls	r2, r3, #2
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f002 fa0f 	bl	8004b10 <DMA_CalcBaseAndBitshift>
 80026f2:	4603      	mov	r3, r0
 80026f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2201      	movs	r2, #1
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e008      	b.n	800271a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2240      	movs	r2, #64	@ 0x40
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0b7      	b.n	800288a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5f      	ldr	r2, [pc, #380]	@ (800289c <HAL_DMA_Init+0x658>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d072      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5d      	ldr	r2, [pc, #372]	@ (80028a0 <HAL_DMA_Init+0x65c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d06d      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_DMA_Init+0x660>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d068      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_DMA_Init+0x664>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d063      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a59      	ldr	r2, [pc, #356]	@ (80028ac <HAL_DMA_Init+0x668>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d05e      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a57      	ldr	r2, [pc, #348]	@ (80028b0 <HAL_DMA_Init+0x66c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d059      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a56      	ldr	r2, [pc, #344]	@ (80028b4 <HAL_DMA_Init+0x670>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d054      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a54      	ldr	r2, [pc, #336]	@ (80028b8 <HAL_DMA_Init+0x674>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04f      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a53      	ldr	r2, [pc, #332]	@ (80028bc <HAL_DMA_Init+0x678>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a51      	ldr	r2, [pc, #324]	@ (80028c0 <HAL_DMA_Init+0x67c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_DMA_Init+0x680>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a4e      	ldr	r2, [pc, #312]	@ (80028c8 <HAL_DMA_Init+0x684>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4d      	ldr	r2, [pc, #308]	@ (80028cc <HAL_DMA_Init+0x688>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	@ (80028d0 <HAL_DMA_Init+0x68c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4a      	ldr	r2, [pc, #296]	@ (80028d4 <HAL_DMA_Init+0x690>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a48      	ldr	r2, [pc, #288]	@ (80028d8 <HAL_DMA_Init+0x694>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a47      	ldr	r2, [pc, #284]	@ (80028dc <HAL_DMA_Init+0x698>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a45      	ldr	r2, [pc, #276]	@ (80028e0 <HAL_DMA_Init+0x69c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a44      	ldr	r2, [pc, #272]	@ (80028e4 <HAL_DMA_Init+0x6a0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a42      	ldr	r2, [pc, #264]	@ (80028e8 <HAL_DMA_Init+0x6a4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a41      	ldr	r2, [pc, #260]	@ (80028ec <HAL_DMA_Init+0x6a8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3f      	ldr	r2, [pc, #252]	@ (80028f0 <HAL_DMA_Init+0x6ac>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3e      	ldr	r2, [pc, #248]	@ (80028f4 <HAL_DMA_Init+0x6b0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Init+0x5c6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3c      	ldr	r2, [pc, #240]	@ (80028f8 <HAL_DMA_Init+0x6b4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_DMA_Init+0x5ca>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_DMA_Init+0x5cc>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d032      	beq.n	800287a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f002 faa9 	bl	8004d6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b80      	cmp	r3, #128	@ 0x80
 8002820:	d102      	bne.n	8002828 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800283c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_DMA_Init+0x624>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d80c      	bhi.n	8002868 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f002 fb26 	bl	8004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	e008      	b.n	800287a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	a7fdabf8 	.word	0xa7fdabf8
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	40020010 	.word	0x40020010
 80028a0:	40020028 	.word	0x40020028
 80028a4:	40020040 	.word	0x40020040
 80028a8:	40020058 	.word	0x40020058
 80028ac:	40020070 	.word	0x40020070
 80028b0:	40020088 	.word	0x40020088
 80028b4:	400200a0 	.word	0x400200a0
 80028b8:	400200b8 	.word	0x400200b8
 80028bc:	40020410 	.word	0x40020410
 80028c0:	40020428 	.word	0x40020428
 80028c4:	40020440 	.word	0x40020440
 80028c8:	40020458 	.word	0x40020458
 80028cc:	40020470 	.word	0x40020470
 80028d0:	40020488 	.word	0x40020488
 80028d4:	400204a0 	.word	0x400204a0
 80028d8:	400204b8 	.word	0x400204b8
 80028dc:	58025408 	.word	0x58025408
 80028e0:	5802541c 	.word	0x5802541c
 80028e4:	58025430 	.word	0x58025430
 80028e8:	58025444 	.word	0x58025444
 80028ec:	58025458 	.word	0x58025458
 80028f0:	5802546c 	.word	0x5802546c
 80028f4:	58025480 	.word	0x58025480
 80028f8:	58025494 	.word	0x58025494

080028fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e226      	b.n	8002d66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_DMA_Start_IT+0x2a>
 8002922:	2302      	movs	r3, #2
 8002924:	e21f      	b.n	8002d66 <HAL_DMA_Start_IT+0x46a>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	f040 820a 	bne.w	8002d50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a68      	ldr	r2, [pc, #416]	@ (8002af0 <HAL_DMA_Start_IT+0x1f4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04a      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a66      	ldr	r2, [pc, #408]	@ (8002af4 <HAL_DMA_Start_IT+0x1f8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d045      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a65      	ldr	r2, [pc, #404]	@ (8002af8 <HAL_DMA_Start_IT+0x1fc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d040      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a63      	ldr	r2, [pc, #396]	@ (8002afc <HAL_DMA_Start_IT+0x200>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d03b      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a62      	ldr	r2, [pc, #392]	@ (8002b00 <HAL_DMA_Start_IT+0x204>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d036      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a60      	ldr	r2, [pc, #384]	@ (8002b04 <HAL_DMA_Start_IT+0x208>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d031      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a5f      	ldr	r2, [pc, #380]	@ (8002b08 <HAL_DMA_Start_IT+0x20c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d02c      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5d      	ldr	r2, [pc, #372]	@ (8002b0c <HAL_DMA_Start_IT+0x210>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d027      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b10 <HAL_DMA_Start_IT+0x214>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b14 <HAL_DMA_Start_IT+0x218>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a59      	ldr	r2, [pc, #356]	@ (8002b18 <HAL_DMA_Start_IT+0x21c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a57      	ldr	r2, [pc, #348]	@ (8002b1c <HAL_DMA_Start_IT+0x220>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a56      	ldr	r2, [pc, #344]	@ (8002b20 <HAL_DMA_Start_IT+0x224>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a54      	ldr	r2, [pc, #336]	@ (8002b24 <HAL_DMA_Start_IT+0x228>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a53      	ldr	r2, [pc, #332]	@ (8002b28 <HAL_DMA_Start_IT+0x22c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Start_IT+0xee>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a51      	ldr	r2, [pc, #324]	@ (8002b2c <HAL_DMA_Start_IT+0x230>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <HAL_DMA_Start_IT+0x100>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e007      	b.n	8002a0c <HAL_DMA_Start_IT+0x110>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f001 fed0 	bl	80047b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a34      	ldr	r2, [pc, #208]	@ (8002af0 <HAL_DMA_Start_IT+0x1f4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04a      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a33      	ldr	r2, [pc, #204]	@ (8002af4 <HAL_DMA_Start_IT+0x1f8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d045      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a31      	ldr	r2, [pc, #196]	@ (8002af8 <HAL_DMA_Start_IT+0x1fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d040      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a30      	ldr	r2, [pc, #192]	@ (8002afc <HAL_DMA_Start_IT+0x200>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d03b      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2e      	ldr	r2, [pc, #184]	@ (8002b00 <HAL_DMA_Start_IT+0x204>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d036      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b04 <HAL_DMA_Start_IT+0x208>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d031      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <HAL_DMA_Start_IT+0x20c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02c      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <HAL_DMA_Start_IT+0x210>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d027      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	@ (8002b10 <HAL_DMA_Start_IT+0x214>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a27      	ldr	r2, [pc, #156]	@ (8002b14 <HAL_DMA_Start_IT+0x218>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d01d      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a25      	ldr	r2, [pc, #148]	@ (8002b18 <HAL_DMA_Start_IT+0x21c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d018      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a24      	ldr	r2, [pc, #144]	@ (8002b1c <HAL_DMA_Start_IT+0x220>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a22      	ldr	r2, [pc, #136]	@ (8002b20 <HAL_DMA_Start_IT+0x224>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00e      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	@ (8002b24 <HAL_DMA_Start_IT+0x228>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <HAL_DMA_Start_IT+0x22c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x1bc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b2c <HAL_DMA_Start_IT+0x230>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_DMA_Start_IT+0x1c0>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_DMA_Start_IT+0x1c2>
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 021e 	bic.w	r2, r3, #30
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0216 	orr.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d03e      	beq.n	8002b5c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0208 	orr.w	r2, r2, #8
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e035      	b.n	8002b5c <HAL_DMA_Start_IT+0x260>
 8002af0:	40020010 	.word	0x40020010
 8002af4:	40020028 	.word	0x40020028
 8002af8:	40020040 	.word	0x40020040
 8002afc:	40020058 	.word	0x40020058
 8002b00:	40020070 	.word	0x40020070
 8002b04:	40020088 	.word	0x40020088
 8002b08:	400200a0 	.word	0x400200a0
 8002b0c:	400200b8 	.word	0x400200b8
 8002b10:	40020410 	.word	0x40020410
 8002b14:	40020428 	.word	0x40020428
 8002b18:	40020440 	.word	0x40020440
 8002b1c:	40020458 	.word	0x40020458
 8002b20:	40020470 	.word	0x40020470
 8002b24:	40020488 	.word	0x40020488
 8002b28:	400204a0 	.word	0x400204a0
 8002b2c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 020e 	bic.w	r2, r3, #14
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 020a 	orr.w	r2, r2, #10
 8002b42:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0204 	orr.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a83      	ldr	r2, [pc, #524]	@ (8002d70 <HAL_DMA_Start_IT+0x474>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d072      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a82      	ldr	r2, [pc, #520]	@ (8002d74 <HAL_DMA_Start_IT+0x478>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d06d      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a80      	ldr	r2, [pc, #512]	@ (8002d78 <HAL_DMA_Start_IT+0x47c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d068      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d7c <HAL_DMA_Start_IT+0x480>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d063      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a7d      	ldr	r2, [pc, #500]	@ (8002d80 <HAL_DMA_Start_IT+0x484>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d05e      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7c      	ldr	r2, [pc, #496]	@ (8002d84 <HAL_DMA_Start_IT+0x488>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d059      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7a      	ldr	r2, [pc, #488]	@ (8002d88 <HAL_DMA_Start_IT+0x48c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d054      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a79      	ldr	r2, [pc, #484]	@ (8002d8c <HAL_DMA_Start_IT+0x490>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d04f      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a77      	ldr	r2, [pc, #476]	@ (8002d90 <HAL_DMA_Start_IT+0x494>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d04a      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a76      	ldr	r2, [pc, #472]	@ (8002d94 <HAL_DMA_Start_IT+0x498>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d045      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a74      	ldr	r2, [pc, #464]	@ (8002d98 <HAL_DMA_Start_IT+0x49c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d040      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a73      	ldr	r2, [pc, #460]	@ (8002d9c <HAL_DMA_Start_IT+0x4a0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d03b      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a71      	ldr	r2, [pc, #452]	@ (8002da0 <HAL_DMA_Start_IT+0x4a4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d036      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a70      	ldr	r2, [pc, #448]	@ (8002da4 <HAL_DMA_Start_IT+0x4a8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d031      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	@ (8002da8 <HAL_DMA_Start_IT+0x4ac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02c      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8002dac <HAL_DMA_Start_IT+0x4b0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d027      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6b      	ldr	r2, [pc, #428]	@ (8002db0 <HAL_DMA_Start_IT+0x4b4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8002db4 <HAL_DMA_Start_IT+0x4b8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01d      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a68      	ldr	r2, [pc, #416]	@ (8002db8 <HAL_DMA_Start_IT+0x4bc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a67      	ldr	r2, [pc, #412]	@ (8002dbc <HAL_DMA_Start_IT+0x4c0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a65      	ldr	r2, [pc, #404]	@ (8002dc0 <HAL_DMA_Start_IT+0x4c4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a64      	ldr	r2, [pc, #400]	@ (8002dc4 <HAL_DMA_Start_IT+0x4c8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a62      	ldr	r2, [pc, #392]	@ (8002dc8 <HAL_DMA_Start_IT+0x4cc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_DMA_Start_IT+0x350>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a61      	ldr	r2, [pc, #388]	@ (8002dcc <HAL_DMA_Start_IT+0x4d0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Start_IT+0x354>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_Start_IT+0x356>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c72:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c8a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a37      	ldr	r2, [pc, #220]	@ (8002d70 <HAL_DMA_Start_IT+0x474>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d04a      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a36      	ldr	r2, [pc, #216]	@ (8002d74 <HAL_DMA_Start_IT+0x478>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d045      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a34      	ldr	r2, [pc, #208]	@ (8002d78 <HAL_DMA_Start_IT+0x47c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d040      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a33      	ldr	r2, [pc, #204]	@ (8002d7c <HAL_DMA_Start_IT+0x480>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d03b      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a31      	ldr	r2, [pc, #196]	@ (8002d80 <HAL_DMA_Start_IT+0x484>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d036      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a30      	ldr	r2, [pc, #192]	@ (8002d84 <HAL_DMA_Start_IT+0x488>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d031      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d88 <HAL_DMA_Start_IT+0x48c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d02c      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <HAL_DMA_Start_IT+0x490>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d027      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d90 <HAL_DMA_Start_IT+0x494>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d022      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2a      	ldr	r2, [pc, #168]	@ (8002d94 <HAL_DMA_Start_IT+0x498>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d01d      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a28      	ldr	r2, [pc, #160]	@ (8002d98 <HAL_DMA_Start_IT+0x49c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d018      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a27      	ldr	r2, [pc, #156]	@ (8002d9c <HAL_DMA_Start_IT+0x4a0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a25      	ldr	r2, [pc, #148]	@ (8002da0 <HAL_DMA_Start_IT+0x4a4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a24      	ldr	r2, [pc, #144]	@ (8002da4 <HAL_DMA_Start_IT+0x4a8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_DMA_Start_IT+0x4ac>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_DMA_Start_IT+0x430>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	@ (8002dac <HAL_DMA_Start_IT+0x4b0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d108      	bne.n	8002d3e <HAL_DMA_Start_IT+0x442>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e012      	b.n	8002d64 <HAL_DMA_Start_IT+0x468>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e009      	b.n	8002d64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	58025408 	.word	0x58025408
 8002db4:	5802541c 	.word	0x5802541c
 8002db8:	58025430 	.word	0x58025430
 8002dbc:	58025444 	.word	0x58025444
 8002dc0:	58025458 	.word	0x58025458
 8002dc4:	5802546c 	.word	0x5802546c
 8002dc8:	58025480 	.word	0x58025480
 8002dcc:	58025494 	.word	0x58025494

08002dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff f918 	bl	800200c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e2dc      	b.n	80033a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d008      	beq.n	8002e06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e2cd      	b.n	80033a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a76      	ldr	r2, [pc, #472]	@ (8002fe4 <HAL_DMA_Abort+0x214>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04a      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a74      	ldr	r2, [pc, #464]	@ (8002fe8 <HAL_DMA_Abort+0x218>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d045      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a73      	ldr	r2, [pc, #460]	@ (8002fec <HAL_DMA_Abort+0x21c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d040      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a71      	ldr	r2, [pc, #452]	@ (8002ff0 <HAL_DMA_Abort+0x220>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d03b      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a70      	ldr	r2, [pc, #448]	@ (8002ff4 <HAL_DMA_Abort+0x224>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d036      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff8 <HAL_DMA_Abort+0x228>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d031      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6d      	ldr	r2, [pc, #436]	@ (8002ffc <HAL_DMA_Abort+0x22c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d02c      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a6b      	ldr	r2, [pc, #428]	@ (8003000 <HAL_DMA_Abort+0x230>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d027      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6a      	ldr	r2, [pc, #424]	@ (8003004 <HAL_DMA_Abort+0x234>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a68      	ldr	r2, [pc, #416]	@ (8003008 <HAL_DMA_Abort+0x238>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01d      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a67      	ldr	r2, [pc, #412]	@ (800300c <HAL_DMA_Abort+0x23c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d018      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a65      	ldr	r2, [pc, #404]	@ (8003010 <HAL_DMA_Abort+0x240>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a64      	ldr	r2, [pc, #400]	@ (8003014 <HAL_DMA_Abort+0x244>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a62      	ldr	r2, [pc, #392]	@ (8003018 <HAL_DMA_Abort+0x248>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a61      	ldr	r2, [pc, #388]	@ (800301c <HAL_DMA_Abort+0x24c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_DMA_Abort+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a5f      	ldr	r2, [pc, #380]	@ (8003020 <HAL_DMA_Abort+0x250>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Abort+0xda>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_Abort+0xdc>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 021e 	bic.w	r2, r2, #30
 8002ebe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ece:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e00a      	b.n	8002eee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 020e 	bic.w	r2, r2, #14
 8002ee6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe4 <HAL_DMA_Abort+0x214>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d072      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe8 <HAL_DMA_Abort+0x218>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d06d      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a39      	ldr	r2, [pc, #228]	@ (8002fec <HAL_DMA_Abort+0x21c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d068      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a37      	ldr	r2, [pc, #220]	@ (8002ff0 <HAL_DMA_Abort+0x220>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d063      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a36      	ldr	r2, [pc, #216]	@ (8002ff4 <HAL_DMA_Abort+0x224>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d05e      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a34      	ldr	r2, [pc, #208]	@ (8002ff8 <HAL_DMA_Abort+0x228>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d059      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a33      	ldr	r2, [pc, #204]	@ (8002ffc <HAL_DMA_Abort+0x22c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d054      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a31      	ldr	r2, [pc, #196]	@ (8003000 <HAL_DMA_Abort+0x230>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d04f      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a30      	ldr	r2, [pc, #192]	@ (8003004 <HAL_DMA_Abort+0x234>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003008 <HAL_DMA_Abort+0x238>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2d      	ldr	r2, [pc, #180]	@ (800300c <HAL_DMA_Abort+0x23c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <HAL_DMA_Abort+0x240>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003014 <HAL_DMA_Abort+0x244>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a28      	ldr	r2, [pc, #160]	@ (8003018 <HAL_DMA_Abort+0x248>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a27      	ldr	r2, [pc, #156]	@ (800301c <HAL_DMA_Abort+0x24c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a25      	ldr	r2, [pc, #148]	@ (8003020 <HAL_DMA_Abort+0x250>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a24      	ldr	r2, [pc, #144]	@ (8003024 <HAL_DMA_Abort+0x254>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a22      	ldr	r2, [pc, #136]	@ (8003028 <HAL_DMA_Abort+0x258>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a21      	ldr	r2, [pc, #132]	@ (800302c <HAL_DMA_Abort+0x25c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003030 <HAL_DMA_Abort+0x260>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1e      	ldr	r2, [pc, #120]	@ (8003034 <HAL_DMA_Abort+0x264>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003038 <HAL_DMA_Abort+0x268>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1b      	ldr	r2, [pc, #108]	@ (800303c <HAL_DMA_Abort+0x26c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	@ (8003040 <HAL_DMA_Abort+0x270>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d132      	bne.n	8003044 <HAL_DMA_Abort+0x274>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e031      	b.n	8003046 <HAL_DMA_Abort+0x276>
 8002fe2:	bf00      	nop
 8002fe4:	40020010 	.word	0x40020010
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	40020040 	.word	0x40020040
 8002ff0:	40020058 	.word	0x40020058
 8002ff4:	40020070 	.word	0x40020070
 8002ff8:	40020088 	.word	0x40020088
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	400200b8 	.word	0x400200b8
 8003004:	40020410 	.word	0x40020410
 8003008:	40020428 	.word	0x40020428
 800300c:	40020440 	.word	0x40020440
 8003010:	40020458 	.word	0x40020458
 8003014:	40020470 	.word	0x40020470
 8003018:	40020488 	.word	0x40020488
 800301c:	400204a0 	.word	0x400204a0
 8003020:	400204b8 	.word	0x400204b8
 8003024:	58025408 	.word	0x58025408
 8003028:	5802541c 	.word	0x5802541c
 800302c:	58025430 	.word	0x58025430
 8003030:	58025444 	.word	0x58025444
 8003034:	58025458 	.word	0x58025458
 8003038:	5802546c 	.word	0x5802546c
 800303c:	58025480 	.word	0x58025480
 8003040:	58025494 	.word	0x58025494
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003058:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6d      	ldr	r2, [pc, #436]	@ (8003214 <HAL_DMA_Abort+0x444>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d04a      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6b      	ldr	r2, [pc, #428]	@ (8003218 <HAL_DMA_Abort+0x448>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d045      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6a      	ldr	r2, [pc, #424]	@ (800321c <HAL_DMA_Abort+0x44c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d040      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a68      	ldr	r2, [pc, #416]	@ (8003220 <HAL_DMA_Abort+0x450>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d03b      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a67      	ldr	r2, [pc, #412]	@ (8003224 <HAL_DMA_Abort+0x454>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d036      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a65      	ldr	r2, [pc, #404]	@ (8003228 <HAL_DMA_Abort+0x458>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a64      	ldr	r2, [pc, #400]	@ (800322c <HAL_DMA_Abort+0x45c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d02c      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a62      	ldr	r2, [pc, #392]	@ (8003230 <HAL_DMA_Abort+0x460>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d027      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a61      	ldr	r2, [pc, #388]	@ (8003234 <HAL_DMA_Abort+0x464>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003238 <HAL_DMA_Abort+0x468>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01d      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5e      	ldr	r2, [pc, #376]	@ (800323c <HAL_DMA_Abort+0x46c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d018      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003240 <HAL_DMA_Abort+0x470>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003244 <HAL_DMA_Abort+0x474>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00e      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a59      	ldr	r2, [pc, #356]	@ (8003248 <HAL_DMA_Abort+0x478>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a58      	ldr	r2, [pc, #352]	@ (800324c <HAL_DMA_Abort+0x47c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_DMA_Abort+0x32a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a56      	ldr	r2, [pc, #344]	@ (8003250 <HAL_DMA_Abort+0x480>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d108      	bne.n	800310c <HAL_DMA_Abort+0x33c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e007      	b.n	800311c <HAL_DMA_Abort+0x34c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800311c:	e013      	b.n	8003146 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311e:	f7fe ff75 	bl	800200c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b05      	cmp	r3, #5
 800312a:	d90c      	bls.n	8003146 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2203      	movs	r2, #3
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e12d      	b.n	80033a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e5      	bne.n	800311e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2f      	ldr	r2, [pc, #188]	@ (8003214 <HAL_DMA_Abort+0x444>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d04a      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2d      	ldr	r2, [pc, #180]	@ (8003218 <HAL_DMA_Abort+0x448>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d045      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2c      	ldr	r2, [pc, #176]	@ (800321c <HAL_DMA_Abort+0x44c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d040      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <HAL_DMA_Abort+0x450>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d03b      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a29      	ldr	r2, [pc, #164]	@ (8003224 <HAL_DMA_Abort+0x454>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d036      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a27      	ldr	r2, [pc, #156]	@ (8003228 <HAL_DMA_Abort+0x458>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d031      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a26      	ldr	r2, [pc, #152]	@ (800322c <HAL_DMA_Abort+0x45c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d02c      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a24      	ldr	r2, [pc, #144]	@ (8003230 <HAL_DMA_Abort+0x460>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d027      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <HAL_DMA_Abort+0x464>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a21      	ldr	r2, [pc, #132]	@ (8003238 <HAL_DMA_Abort+0x468>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a20      	ldr	r2, [pc, #128]	@ (800323c <HAL_DMA_Abort+0x46c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <HAL_DMA_Abort+0x470>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_DMA_Abort+0x474>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <HAL_DMA_Abort+0x478>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1a      	ldr	r2, [pc, #104]	@ (800324c <HAL_DMA_Abort+0x47c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_DMA_Abort+0x422>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <HAL_DMA_Abort+0x480>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_DMA_Abort+0x426>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_DMA_Abort+0x428>
 80031f6:	2300      	movs	r3, #0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02b      	beq.n	8003254 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003200:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	223f      	movs	r2, #63	@ 0x3f
 800320c:	409a      	lsls	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	e02a      	b.n	800326a <HAL_DMA_Abort+0x49a>
 8003214:	40020010 	.word	0x40020010
 8003218:	40020028 	.word	0x40020028
 800321c:	40020040 	.word	0x40020040
 8003220:	40020058 	.word	0x40020058
 8003224:	40020070 	.word	0x40020070
 8003228:	40020088 	.word	0x40020088
 800322c:	400200a0 	.word	0x400200a0
 8003230:	400200b8 	.word	0x400200b8
 8003234:	40020410 	.word	0x40020410
 8003238:	40020428 	.word	0x40020428
 800323c:	40020440 	.word	0x40020440
 8003240:	40020458 	.word	0x40020458
 8003244:	40020470 	.word	0x40020470
 8003248:	40020488 	.word	0x40020488
 800324c:	400204a0 	.word	0x400204a0
 8003250:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2201      	movs	r2, #1
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4f      	ldr	r2, [pc, #316]	@ (80033ac <HAL_DMA_Abort+0x5dc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d072      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4d      	ldr	r2, [pc, #308]	@ (80033b0 <HAL_DMA_Abort+0x5e0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d06d      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4c      	ldr	r2, [pc, #304]	@ (80033b4 <HAL_DMA_Abort+0x5e4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d068      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4a      	ldr	r2, [pc, #296]	@ (80033b8 <HAL_DMA_Abort+0x5e8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d063      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a49      	ldr	r2, [pc, #292]	@ (80033bc <HAL_DMA_Abort+0x5ec>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d05e      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a47      	ldr	r2, [pc, #284]	@ (80033c0 <HAL_DMA_Abort+0x5f0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d059      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a46      	ldr	r2, [pc, #280]	@ (80033c4 <HAL_DMA_Abort+0x5f4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d054      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a44      	ldr	r2, [pc, #272]	@ (80033c8 <HAL_DMA_Abort+0x5f8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d04f      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <HAL_DMA_Abort+0x5fc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a41      	ldr	r2, [pc, #260]	@ (80033d0 <HAL_DMA_Abort+0x600>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a40      	ldr	r2, [pc, #256]	@ (80033d4 <HAL_DMA_Abort+0x604>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3e      	ldr	r2, [pc, #248]	@ (80033d8 <HAL_DMA_Abort+0x608>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3d      	ldr	r2, [pc, #244]	@ (80033dc <HAL_DMA_Abort+0x60c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a3b      	ldr	r2, [pc, #236]	@ (80033e0 <HAL_DMA_Abort+0x610>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	@ (80033e4 <HAL_DMA_Abort+0x614>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a38      	ldr	r2, [pc, #224]	@ (80033e8 <HAL_DMA_Abort+0x618>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a37      	ldr	r2, [pc, #220]	@ (80033ec <HAL_DMA_Abort+0x61c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a35      	ldr	r2, [pc, #212]	@ (80033f0 <HAL_DMA_Abort+0x620>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a34      	ldr	r2, [pc, #208]	@ (80033f4 <HAL_DMA_Abort+0x624>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a32      	ldr	r2, [pc, #200]	@ (80033f8 <HAL_DMA_Abort+0x628>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a31      	ldr	r2, [pc, #196]	@ (80033fc <HAL_DMA_Abort+0x62c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2f      	ldr	r2, [pc, #188]	@ (8003400 <HAL_DMA_Abort+0x630>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2e      	ldr	r2, [pc, #184]	@ (8003404 <HAL_DMA_Abort+0x634>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2c      	ldr	r2, [pc, #176]	@ (8003408 <HAL_DMA_Abort+0x638>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_DMA_Abort+0x58e>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_DMA_Abort+0x590>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d015      	beq.n	8003390 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800336c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003384:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800338e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40020010 	.word	0x40020010
 80033b0:	40020028 	.word	0x40020028
 80033b4:	40020040 	.word	0x40020040
 80033b8:	40020058 	.word	0x40020058
 80033bc:	40020070 	.word	0x40020070
 80033c0:	40020088 	.word	0x40020088
 80033c4:	400200a0 	.word	0x400200a0
 80033c8:	400200b8 	.word	0x400200b8
 80033cc:	40020410 	.word	0x40020410
 80033d0:	40020428 	.word	0x40020428
 80033d4:	40020440 	.word	0x40020440
 80033d8:	40020458 	.word	0x40020458
 80033dc:	40020470 	.word	0x40020470
 80033e0:	40020488 	.word	0x40020488
 80033e4:	400204a0 	.word	0x400204a0
 80033e8:	400204b8 	.word	0x400204b8
 80033ec:	58025408 	.word	0x58025408
 80033f0:	5802541c 	.word	0x5802541c
 80033f4:	58025430 	.word	0x58025430
 80033f8:	58025444 	.word	0x58025444
 80033fc:	58025458 	.word	0x58025458
 8003400:	5802546c 	.word	0x5802546c
 8003404:	58025480 	.word	0x58025480
 8003408:	58025494 	.word	0x58025494

0800340c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e237      	b.n	800388e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d004      	beq.n	8003434 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2280      	movs	r2, #128	@ 0x80
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e22c      	b.n	800388e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a5c      	ldr	r2, [pc, #368]	@ (80035ac <HAL_DMA_Abort_IT+0x1a0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5b      	ldr	r2, [pc, #364]	@ (80035b0 <HAL_DMA_Abort_IT+0x1a4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a59      	ldr	r2, [pc, #356]	@ (80035b4 <HAL_DMA_Abort_IT+0x1a8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a58      	ldr	r2, [pc, #352]	@ (80035b8 <HAL_DMA_Abort_IT+0x1ac>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a56      	ldr	r2, [pc, #344]	@ (80035bc <HAL_DMA_Abort_IT+0x1b0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a55      	ldr	r2, [pc, #340]	@ (80035c0 <HAL_DMA_Abort_IT+0x1b4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a53      	ldr	r2, [pc, #332]	@ (80035c4 <HAL_DMA_Abort_IT+0x1b8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a52      	ldr	r2, [pc, #328]	@ (80035c8 <HAL_DMA_Abort_IT+0x1bc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a50      	ldr	r2, [pc, #320]	@ (80035cc <HAL_DMA_Abort_IT+0x1c0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4f      	ldr	r2, [pc, #316]	@ (80035d0 <HAL_DMA_Abort_IT+0x1c4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a4d      	ldr	r2, [pc, #308]	@ (80035d4 <HAL_DMA_Abort_IT+0x1c8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4c      	ldr	r2, [pc, #304]	@ (80035d8 <HAL_DMA_Abort_IT+0x1cc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a4a      	ldr	r2, [pc, #296]	@ (80035dc <HAL_DMA_Abort_IT+0x1d0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a49      	ldr	r2, [pc, #292]	@ (80035e0 <HAL_DMA_Abort_IT+0x1d4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a47      	ldr	r2, [pc, #284]	@ (80035e4 <HAL_DMA_Abort_IT+0x1d8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_Abort_IT+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a46      	ldr	r2, [pc, #280]	@ (80035e8 <HAL_DMA_Abort_IT+0x1dc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_DMA_Abort_IT+0xcc>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_DMA_Abort_IT+0xce>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8086 	beq.w	80035ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2f      	ldr	r2, [pc, #188]	@ (80035ac <HAL_DMA_Abort_IT+0x1a0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04a      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2e      	ldr	r2, [pc, #184]	@ (80035b0 <HAL_DMA_Abort_IT+0x1a4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d045      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2c      	ldr	r2, [pc, #176]	@ (80035b4 <HAL_DMA_Abort_IT+0x1a8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d040      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2b      	ldr	r2, [pc, #172]	@ (80035b8 <HAL_DMA_Abort_IT+0x1ac>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d03b      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <HAL_DMA_Abort_IT+0x1b0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d036      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a28      	ldr	r2, [pc, #160]	@ (80035c0 <HAL_DMA_Abort_IT+0x1b4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d031      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	@ (80035c4 <HAL_DMA_Abort_IT+0x1b8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02c      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <HAL_DMA_Abort_IT+0x1bc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d027      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a23      	ldr	r2, [pc, #140]	@ (80035cc <HAL_DMA_Abort_IT+0x1c0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d022      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <HAL_DMA_Abort_IT+0x1c4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d01d      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <HAL_DMA_Abort_IT+0x1c8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1f      	ldr	r2, [pc, #124]	@ (80035d8 <HAL_DMA_Abort_IT+0x1cc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <HAL_DMA_Abort_IT+0x1d0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <HAL_DMA_Abort_IT+0x1d4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1a      	ldr	r2, [pc, #104]	@ (80035e4 <HAL_DMA_Abort_IT+0x1d8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_DMA_Abort_IT+0x17c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <HAL_DMA_Abort_IT+0x18e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e178      	b.n	800388c <HAL_DMA_Abort_IT+0x480>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e16f      	b.n	800388c <HAL_DMA_Abort_IT+0x480>
 80035ac:	40020010 	.word	0x40020010
 80035b0:	40020028 	.word	0x40020028
 80035b4:	40020040 	.word	0x40020040
 80035b8:	40020058 	.word	0x40020058
 80035bc:	40020070 	.word	0x40020070
 80035c0:	40020088 	.word	0x40020088
 80035c4:	400200a0 	.word	0x400200a0
 80035c8:	400200b8 	.word	0x400200b8
 80035cc:	40020410 	.word	0x40020410
 80035d0:	40020428 	.word	0x40020428
 80035d4:	40020440 	.word	0x40020440
 80035d8:	40020458 	.word	0x40020458
 80035dc:	40020470 	.word	0x40020470
 80035e0:	40020488 	.word	0x40020488
 80035e4:	400204a0 	.word	0x400204a0
 80035e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 020e 	bic.w	r2, r2, #14
 80035fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6c      	ldr	r2, [pc, #432]	@ (80037b4 <HAL_DMA_Abort_IT+0x3a8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d04a      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6b      	ldr	r2, [pc, #428]	@ (80037b8 <HAL_DMA_Abort_IT+0x3ac>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d045      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a69      	ldr	r2, [pc, #420]	@ (80037bc <HAL_DMA_Abort_IT+0x3b0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d040      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_DMA_Abort_IT+0x3b4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d03b      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a66      	ldr	r2, [pc, #408]	@ (80037c4 <HAL_DMA_Abort_IT+0x3b8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d036      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a65      	ldr	r2, [pc, #404]	@ (80037c8 <HAL_DMA_Abort_IT+0x3bc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d031      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a63      	ldr	r2, [pc, #396]	@ (80037cc <HAL_DMA_Abort_IT+0x3c0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02c      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a62      	ldr	r2, [pc, #392]	@ (80037d0 <HAL_DMA_Abort_IT+0x3c4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d027      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a60      	ldr	r2, [pc, #384]	@ (80037d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5f      	ldr	r2, [pc, #380]	@ (80037d8 <HAL_DMA_Abort_IT+0x3cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01d      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <HAL_DMA_Abort_IT+0x3d0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5c      	ldr	r2, [pc, #368]	@ (80037e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5a      	ldr	r2, [pc, #360]	@ (80037e4 <HAL_DMA_Abort_IT+0x3d8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a59      	ldr	r2, [pc, #356]	@ (80037e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a57      	ldr	r2, [pc, #348]	@ (80037ec <HAL_DMA_Abort_IT+0x3e0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_DMA_Abort_IT+0x290>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a56      	ldr	r2, [pc, #344]	@ (80037f0 <HAL_DMA_Abort_IT+0x3e4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <HAL_DMA_Abort_IT+0x2a2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e007      	b.n	80036be <HAL_DMA_Abort_IT+0x2b2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3c      	ldr	r2, [pc, #240]	@ (80037b4 <HAL_DMA_Abort_IT+0x3a8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d072      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3a      	ldr	r2, [pc, #232]	@ (80037b8 <HAL_DMA_Abort_IT+0x3ac>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d06d      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a39      	ldr	r2, [pc, #228]	@ (80037bc <HAL_DMA_Abort_IT+0x3b0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d068      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a37      	ldr	r2, [pc, #220]	@ (80037c0 <HAL_DMA_Abort_IT+0x3b4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d063      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a36      	ldr	r2, [pc, #216]	@ (80037c4 <HAL_DMA_Abort_IT+0x3b8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d05e      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a34      	ldr	r2, [pc, #208]	@ (80037c8 <HAL_DMA_Abort_IT+0x3bc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d059      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a33      	ldr	r2, [pc, #204]	@ (80037cc <HAL_DMA_Abort_IT+0x3c0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d054      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a31      	ldr	r2, [pc, #196]	@ (80037d0 <HAL_DMA_Abort_IT+0x3c4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d04f      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a30      	ldr	r2, [pc, #192]	@ (80037d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d04a      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2e      	ldr	r2, [pc, #184]	@ (80037d8 <HAL_DMA_Abort_IT+0x3cc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d045      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <HAL_DMA_Abort_IT+0x3d0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d040      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2b      	ldr	r2, [pc, #172]	@ (80037e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d03b      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2a      	ldr	r2, [pc, #168]	@ (80037e4 <HAL_DMA_Abort_IT+0x3d8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d036      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a28      	ldr	r2, [pc, #160]	@ (80037e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a27      	ldr	r2, [pc, #156]	@ (80037ec <HAL_DMA_Abort_IT+0x3e0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d02c      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a25      	ldr	r2, [pc, #148]	@ (80037f0 <HAL_DMA_Abort_IT+0x3e4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d027      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a24      	ldr	r2, [pc, #144]	@ (80037f4 <HAL_DMA_Abort_IT+0x3e8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d022      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_DMA_Abort_IT+0x3ec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01d      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <HAL_DMA_Abort_IT+0x3f0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d018      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1f      	ldr	r2, [pc, #124]	@ (8003800 <HAL_DMA_Abort_IT+0x3f4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <HAL_DMA_Abort_IT+0x3f8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00e      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_DMA_Abort_IT+0x3fc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d009      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <HAL_DMA_Abort_IT+0x400>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_DMA_Abort_IT+0x3a2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a19      	ldr	r2, [pc, #100]	@ (8003810 <HAL_DMA_Abort_IT+0x404>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d132      	bne.n	8003814 <HAL_DMA_Abort_IT+0x408>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e031      	b.n	8003816 <HAL_DMA_Abort_IT+0x40a>
 80037b2:	bf00      	nop
 80037b4:	40020010 	.word	0x40020010
 80037b8:	40020028 	.word	0x40020028
 80037bc:	40020040 	.word	0x40020040
 80037c0:	40020058 	.word	0x40020058
 80037c4:	40020070 	.word	0x40020070
 80037c8:	40020088 	.word	0x40020088
 80037cc:	400200a0 	.word	0x400200a0
 80037d0:	400200b8 	.word	0x400200b8
 80037d4:	40020410 	.word	0x40020410
 80037d8:	40020428 	.word	0x40020428
 80037dc:	40020440 	.word	0x40020440
 80037e0:	40020458 	.word	0x40020458
 80037e4:	40020470 	.word	0x40020470
 80037e8:	40020488 	.word	0x40020488
 80037ec:	400204a0 	.word	0x400204a0
 80037f0:	400204b8 	.word	0x400204b8
 80037f4:	58025408 	.word	0x58025408
 80037f8:	5802541c 	.word	0x5802541c
 80037fc:	58025430 	.word	0x58025430
 8003800:	58025444 	.word	0x58025444
 8003804:	58025458 	.word	0x58025458
 8003808:	5802546c 	.word	0x5802546c
 800380c:	58025480 	.word	0x58025480
 8003810:	58025494 	.word	0x58025494
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d028      	beq.n	800386c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003828:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003848:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003860:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800386a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop

08003898 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a4:	4b67      	ldr	r3, [pc, #412]	@ (8003a44 <HAL_DMA_IRQHandler+0x1ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a67      	ldr	r2, [pc, #412]	@ (8003a48 <HAL_DMA_IRQHandler+0x1b0>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <HAL_DMA_IRQHandler+0x1b4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a50 <HAL_DMA_IRQHandler+0x1b8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a54 <HAL_DMA_IRQHandler+0x1bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003a58 <HAL_DMA_IRQHandler+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a59      	ldr	r2, [pc, #356]	@ (8003a5c <HAL_DMA_IRQHandler+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a57      	ldr	r2, [pc, #348]	@ (8003a60 <HAL_DMA_IRQHandler+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a56      	ldr	r2, [pc, #344]	@ (8003a64 <HAL_DMA_IRQHandler+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a54      	ldr	r2, [pc, #336]	@ (8003a68 <HAL_DMA_IRQHandler+0x1d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a53      	ldr	r2, [pc, #332]	@ (8003a6c <HAL_DMA_IRQHandler+0x1d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a51      	ldr	r2, [pc, #324]	@ (8003a70 <HAL_DMA_IRQHandler+0x1d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a50      	ldr	r2, [pc, #320]	@ (8003a74 <HAL_DMA_IRQHandler+0x1dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a78 <HAL_DMA_IRQHandler+0x1e0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4d      	ldr	r2, [pc, #308]	@ (8003a7c <HAL_DMA_IRQHandler+0x1e4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4b      	ldr	r2, [pc, #300]	@ (8003a80 <HAL_DMA_IRQHandler+0x1e8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a84 <HAL_DMA_IRQHandler+0x1ec>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a48      	ldr	r2, [pc, #288]	@ (8003a88 <HAL_DMA_IRQHandler+0x1f0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_DMA_IRQHandler+0xd6>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_DMA_IRQHandler+0xd8>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 842b 	beq.w	80041cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2208      	movs	r2, #8
 8003980:	409a      	lsls	r2, r3
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a2 	beq.w	8003ad0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2e      	ldr	r2, [pc, #184]	@ (8003a4c <HAL_DMA_IRQHandler+0x1b4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_DMA_IRQHandler+0x1b8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a54 <HAL_DMA_IRQHandler+0x1bc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d040      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003a58 <HAL_DMA_IRQHandler+0x1c0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d03b      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a28      	ldr	r2, [pc, #160]	@ (8003a5c <HAL_DMA_IRQHandler+0x1c4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d036      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a27      	ldr	r2, [pc, #156]	@ (8003a60 <HAL_DMA_IRQHandler+0x1c8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a25      	ldr	r2, [pc, #148]	@ (8003a64 <HAL_DMA_IRQHandler+0x1cc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02c      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a24      	ldr	r2, [pc, #144]	@ (8003a68 <HAL_DMA_IRQHandler+0x1d0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a22      	ldr	r2, [pc, #136]	@ (8003a6c <HAL_DMA_IRQHandler+0x1d4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <HAL_DMA_IRQHandler+0x1d8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <HAL_DMA_IRQHandler+0x1dc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_DMA_IRQHandler+0x1e0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_DMA_IRQHandler+0x1e4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1b      	ldr	r2, [pc, #108]	@ (8003a80 <HAL_DMA_IRQHandler+0x1e8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_DMA_IRQHandler+0x1ec>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <HAL_DMA_IRQHandler+0x1f0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d12f      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x1f4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	e02e      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x208>
 8003a42:	bf00      	nop
 8003a44:	24000000 	.word	0x24000000
 8003a48:	1b4e81b5 	.word	0x1b4e81b5
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2208      	movs	r2, #8
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06e      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a69      	ldr	r2, [pc, #420]	@ (8003c90 <HAL_DMA_IRQHandler+0x3f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04a      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a67      	ldr	r2, [pc, #412]	@ (8003c94 <HAL_DMA_IRQHandler+0x3fc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d045      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a66      	ldr	r2, [pc, #408]	@ (8003c98 <HAL_DMA_IRQHandler+0x400>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d040      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a64      	ldr	r2, [pc, #400]	@ (8003c9c <HAL_DMA_IRQHandler+0x404>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d03b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a63      	ldr	r2, [pc, #396]	@ (8003ca0 <HAL_DMA_IRQHandler+0x408>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d036      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a61      	ldr	r2, [pc, #388]	@ (8003ca4 <HAL_DMA_IRQHandler+0x40c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d031      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a60      	ldr	r2, [pc, #384]	@ (8003ca8 <HAL_DMA_IRQHandler+0x410>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02c      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5e      	ldr	r2, [pc, #376]	@ (8003cac <HAL_DMA_IRQHandler+0x414>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_DMA_IRQHandler+0x418>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb4 <HAL_DMA_IRQHandler+0x41c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb8 <HAL_DMA_IRQHandler+0x420>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a58      	ldr	r2, [pc, #352]	@ (8003cbc <HAL_DMA_IRQHandler+0x424>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_DMA_IRQHandler+0x428>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a55      	ldr	r2, [pc, #340]	@ (8003cc4 <HAL_DMA_IRQHandler+0x42c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a54      	ldr	r2, [pc, #336]	@ (8003cc8 <HAL_DMA_IRQHandler+0x430>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a52      	ldr	r2, [pc, #328]	@ (8003ccc <HAL_DMA_IRQHandler+0x434>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10a      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x304>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e003      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbc:	f043 0202 	orr.w	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2204      	movs	r2, #4
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 808f 	beq.w	8003cf8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	@ (8003c90 <HAL_DMA_IRQHandler+0x3f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c94 <HAL_DMA_IRQHandler+0x3fc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a29      	ldr	r2, [pc, #164]	@ (8003c98 <HAL_DMA_IRQHandler+0x400>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a27      	ldr	r2, [pc, #156]	@ (8003c9c <HAL_DMA_IRQHandler+0x404>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <HAL_DMA_IRQHandler+0x408>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a24      	ldr	r2, [pc, #144]	@ (8003ca4 <HAL_DMA_IRQHandler+0x40c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <HAL_DMA_IRQHandler+0x410>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <HAL_DMA_IRQHandler+0x414>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_DMA_IRQHandler+0x418>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_DMA_IRQHandler+0x41c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_DMA_IRQHandler+0x420>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_DMA_IRQHandler+0x424>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc0 <HAL_DMA_IRQHandler+0x428>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_DMA_IRQHandler+0x42c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <HAL_DMA_IRQHandler+0x430>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a15      	ldr	r2, [pc, #84]	@ (8003ccc <HAL_DMA_IRQHandler+0x434>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d12a      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x438>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e023      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x440>
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2210      	movs	r2, #16
 8003d02:	409a      	lsls	r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80a6 	beq.w	8003e5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a85      	ldr	r2, [pc, #532]	@ (8003f28 <HAL_DMA_IRQHandler+0x690>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a83      	ldr	r2, [pc, #524]	@ (8003f2c <HAL_DMA_IRQHandler+0x694>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a82      	ldr	r2, [pc, #520]	@ (8003f30 <HAL_DMA_IRQHandler+0x698>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a80      	ldr	r2, [pc, #512]	@ (8003f34 <HAL_DMA_IRQHandler+0x69c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003f38 <HAL_DMA_IRQHandler+0x6a0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7d      	ldr	r2, [pc, #500]	@ (8003f3c <HAL_DMA_IRQHandler+0x6a4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f40 <HAL_DMA_IRQHandler+0x6a8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a7a      	ldr	r2, [pc, #488]	@ (8003f44 <HAL_DMA_IRQHandler+0x6ac>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a79      	ldr	r2, [pc, #484]	@ (8003f48 <HAL_DMA_IRQHandler+0x6b0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a77      	ldr	r2, [pc, #476]	@ (8003f4c <HAL_DMA_IRQHandler+0x6b4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a76      	ldr	r2, [pc, #472]	@ (8003f50 <HAL_DMA_IRQHandler+0x6b8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a74      	ldr	r2, [pc, #464]	@ (8003f54 <HAL_DMA_IRQHandler+0x6bc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a73      	ldr	r2, [pc, #460]	@ (8003f58 <HAL_DMA_IRQHandler+0x6c0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a71      	ldr	r2, [pc, #452]	@ (8003f5c <HAL_DMA_IRQHandler+0x6c4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a70      	ldr	r2, [pc, #448]	@ (8003f60 <HAL_DMA_IRQHandler+0x6c8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f64 <HAL_DMA_IRQHandler+0x6cc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10a      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x52c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e009      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x540>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d03e      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2210      	movs	r2, #16
 8003de6:	409a      	lsls	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d024      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
 8003e18:	e01f      	b.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e016      	b.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d107      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0208 	bic.w	r2, r2, #8
 8003e48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2220      	movs	r2, #32
 8003e64:	409a      	lsls	r2, r3
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8110 	beq.w	8004090 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	@ (8003f28 <HAL_DMA_IRQHandler+0x690>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <HAL_DMA_IRQHandler+0x694>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a29      	ldr	r2, [pc, #164]	@ (8003f30 <HAL_DMA_IRQHandler+0x698>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a28      	ldr	r2, [pc, #160]	@ (8003f34 <HAL_DMA_IRQHandler+0x69c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	@ (8003f38 <HAL_DMA_IRQHandler+0x6a0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_DMA_IRQHandler+0x6a4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	@ (8003f40 <HAL_DMA_IRQHandler+0x6a8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <HAL_DMA_IRQHandler+0x6ac>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <HAL_DMA_IRQHandler+0x6b0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	@ (8003f4c <HAL_DMA_IRQHandler+0x6b4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f50 <HAL_DMA_IRQHandler+0x6b8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f54 <HAL_DMA_IRQHandler+0x6bc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_DMA_IRQHandler+0x6c0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a19      	ldr	r2, [pc, #100]	@ (8003f5c <HAL_DMA_IRQHandler+0x6c4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <HAL_DMA_IRQHandler+0x6c8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <HAL_DMA_IRQHandler+0x6cc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d12b      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x6d0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e02a      	b.n	8003f7c <HAL_DMA_IRQHandler+0x6e4>
 8003f26:	bf00      	nop
 8003f28:	40020010 	.word	0x40020010
 8003f2c:	40020028 	.word	0x40020028
 8003f30:	40020040 	.word	0x40020040
 8003f34:	40020058 	.word	0x40020058
 8003f38:	40020070 	.word	0x40020070
 8003f3c:	40020088 	.word	0x40020088
 8003f40:	400200a0 	.word	0x400200a0
 8003f44:	400200b8 	.word	0x400200b8
 8003f48:	40020410 	.word	0x40020410
 8003f4c:	40020428 	.word	0x40020428
 8003f50:	40020440 	.word	0x40020440
 8003f54:	40020458 	.word	0x40020458
 8003f58:	40020470 	.word	0x40020470
 8003f5c:	40020488 	.word	0x40020488
 8003f60:	400204a0 	.word	0x400204a0
 8003f64:	400204b8 	.word	0x400204b8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8087 	beq.w	8004090 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d139      	bne.n	8004012 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0216 	bic.w	r2, r2, #22
 8003fac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_DMA_IRQHandler+0x736>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0208 	bic.w	r2, r2, #8
 8003fdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	223f      	movs	r2, #63	@ 0x3f
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 834a 	beq.w	800469c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
          }
          return;
 8004010:	e344      	b.n	800469c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02c      	beq.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
 800403e:	e027      	b.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e01e      	b.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0210 	bic.w	r2, r2, #16
 800406e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8306 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8088 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7a      	ldr	r2, [pc, #488]	@ (80042a0 <HAL_DMA_IRQHandler+0xa08>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a79      	ldr	r2, [pc, #484]	@ (80042a4 <HAL_DMA_IRQHandler+0xa0c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a77      	ldr	r2, [pc, #476]	@ (80042a8 <HAL_DMA_IRQHandler+0xa10>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a76      	ldr	r2, [pc, #472]	@ (80042ac <HAL_DMA_IRQHandler+0xa14>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a74      	ldr	r2, [pc, #464]	@ (80042b0 <HAL_DMA_IRQHandler+0xa18>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a73      	ldr	r2, [pc, #460]	@ (80042b4 <HAL_DMA_IRQHandler+0xa1c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a71      	ldr	r2, [pc, #452]	@ (80042b8 <HAL_DMA_IRQHandler+0xa20>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a70      	ldr	r2, [pc, #448]	@ (80042bc <HAL_DMA_IRQHandler+0xa24>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	@ (80042c0 <HAL_DMA_IRQHandler+0xa28>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6d      	ldr	r2, [pc, #436]	@ (80042c4 <HAL_DMA_IRQHandler+0xa2c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6b      	ldr	r2, [pc, #428]	@ (80042c8 <HAL_DMA_IRQHandler+0xa30>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6a      	ldr	r2, [pc, #424]	@ (80042cc <HAL_DMA_IRQHandler+0xa34>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a68      	ldr	r2, [pc, #416]	@ (80042d0 <HAL_DMA_IRQHandler+0xa38>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a67      	ldr	r2, [pc, #412]	@ (80042d4 <HAL_DMA_IRQHandler+0xa3c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a65      	ldr	r2, [pc, #404]	@ (80042d8 <HAL_DMA_IRQHandler+0xa40>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a64      	ldr	r2, [pc, #400]	@ (80042dc <HAL_DMA_IRQHandler+0xa44>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <HAL_DMA_IRQHandler+0x8ca>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e007      	b.n	8004172 <HAL_DMA_IRQHandler+0x8da>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417a:	429a      	cmp	r2, r3
 800417c:	d307      	bcc.n	800418e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f2      	bne.n	8004172 <HAL_DMA_IRQHandler+0x8da>
 800418c:	e000      	b.n	8004190 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800418e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80041a6:	e003      	b.n	80041b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8272 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
 80041ca:	e26c      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a43      	ldr	r2, [pc, #268]	@ (80042e0 <HAL_DMA_IRQHandler+0xa48>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a42      	ldr	r2, [pc, #264]	@ (80042e4 <HAL_DMA_IRQHandler+0xa4c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a40      	ldr	r2, [pc, #256]	@ (80042e8 <HAL_DMA_IRQHandler+0xa50>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3f      	ldr	r2, [pc, #252]	@ (80042ec <HAL_DMA_IRQHandler+0xa54>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3d      	ldr	r2, [pc, #244]	@ (80042f0 <HAL_DMA_IRQHandler+0xa58>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3c      	ldr	r2, [pc, #240]	@ (80042f4 <HAL_DMA_IRQHandler+0xa5c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3a      	ldr	r2, [pc, #232]	@ (80042f8 <HAL_DMA_IRQHandler+0xa60>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a39      	ldr	r2, [pc, #228]	@ (80042fc <HAL_DMA_IRQHandler+0xa64>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_DMA_IRQHandler+0x988>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_DMA_IRQHandler+0x98a>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 823f 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2204      	movs	r2, #4
 800423a:	409a      	lsls	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80cd 	beq.w	80043e0 <HAL_DMA_IRQHandler+0xb48>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80c7 	beq.w	80043e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2204      	movs	r2, #4
 800425c:	409a      	lsls	r2, r3
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d049      	beq.n	8004300 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8210 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004288:	e20a      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8206 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800429c:	e200      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe08>
 800429e:	bf00      	nop
 80042a0:	40020010 	.word	0x40020010
 80042a4:	40020028 	.word	0x40020028
 80042a8:	40020040 	.word	0x40020040
 80042ac:	40020058 	.word	0x40020058
 80042b0:	40020070 	.word	0x40020070
 80042b4:	40020088 	.word	0x40020088
 80042b8:	400200a0 	.word	0x400200a0
 80042bc:	400200b8 	.word	0x400200b8
 80042c0:	40020410 	.word	0x40020410
 80042c4:	40020428 	.word	0x40020428
 80042c8:	40020440 	.word	0x40020440
 80042cc:	40020458 	.word	0x40020458
 80042d0:	40020470 	.word	0x40020470
 80042d4:	40020488 	.word	0x40020488
 80042d8:	400204a0 	.word	0x400204a0
 80042dc:	400204b8 	.word	0x400204b8
 80042e0:	58025408 	.word	0x58025408
 80042e4:	5802541c 	.word	0x5802541c
 80042e8:	58025430 	.word	0x58025430
 80042ec:	58025444 	.word	0x58025444
 80042f0:	58025458 	.word	0x58025458
 80042f4:	5802546c 	.word	0x5802546c
 80042f8:	58025480 	.word	0x58025480
 80042fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d160      	bne.n	80043cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7f      	ldr	r2, [pc, #508]	@ (800450c <HAL_DMA_IRQHandler+0xc74>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d04a      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7d      	ldr	r2, [pc, #500]	@ (8004510 <HAL_DMA_IRQHandler+0xc78>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d045      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7c      	ldr	r2, [pc, #496]	@ (8004514 <HAL_DMA_IRQHandler+0xc7c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d040      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a7a      	ldr	r2, [pc, #488]	@ (8004518 <HAL_DMA_IRQHandler+0xc80>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d03b      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a79      	ldr	r2, [pc, #484]	@ (800451c <HAL_DMA_IRQHandler+0xc84>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d036      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a77      	ldr	r2, [pc, #476]	@ (8004520 <HAL_DMA_IRQHandler+0xc88>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d031      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a76      	ldr	r2, [pc, #472]	@ (8004524 <HAL_DMA_IRQHandler+0xc8c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d02c      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a74      	ldr	r2, [pc, #464]	@ (8004528 <HAL_DMA_IRQHandler+0xc90>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d027      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a73      	ldr	r2, [pc, #460]	@ (800452c <HAL_DMA_IRQHandler+0xc94>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a71      	ldr	r2, [pc, #452]	@ (8004530 <HAL_DMA_IRQHandler+0xc98>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01d      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a70      	ldr	r2, [pc, #448]	@ (8004534 <HAL_DMA_IRQHandler+0xc9c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6e      	ldr	r2, [pc, #440]	@ (8004538 <HAL_DMA_IRQHandler+0xca0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6d      	ldr	r2, [pc, #436]	@ (800453c <HAL_DMA_IRQHandler+0xca4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6b      	ldr	r2, [pc, #428]	@ (8004540 <HAL_DMA_IRQHandler+0xca8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6a      	ldr	r2, [pc, #424]	@ (8004544 <HAL_DMA_IRQHandler+0xcac>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a68      	ldr	r2, [pc, #416]	@ (8004548 <HAL_DMA_IRQHandler+0xcb0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <HAL_DMA_IRQHandler+0xb24>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0208 	bic.w	r2, r2, #8
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e007      	b.n	80043cc <HAL_DMA_IRQHandler+0xb34>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8165 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043de:	e15f      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2202      	movs	r2, #2
 80043ea:	409a      	lsls	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80c5 	beq.w	8004580 <HAL_DMA_IRQHandler+0xce8>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80bf 	beq.w	8004580 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2202      	movs	r2, #2
 800440c:	409a      	lsls	r2, r3
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d018      	beq.n	800444e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 813a 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004438:	e134      	b.n	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8130 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444c:	e12a      	b.n	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8089 	bne.w	800456c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <HAL_DMA_IRQHandler+0xc74>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d04a      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a29      	ldr	r2, [pc, #164]	@ (8004510 <HAL_DMA_IRQHandler+0xc78>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d045      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a28      	ldr	r2, [pc, #160]	@ (8004514 <HAL_DMA_IRQHandler+0xc7c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d040      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a26      	ldr	r2, [pc, #152]	@ (8004518 <HAL_DMA_IRQHandler+0xc80>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d03b      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a25      	ldr	r2, [pc, #148]	@ (800451c <HAL_DMA_IRQHandler+0xc84>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d036      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a23      	ldr	r2, [pc, #140]	@ (8004520 <HAL_DMA_IRQHandler+0xc88>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d031      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a22      	ldr	r2, [pc, #136]	@ (8004524 <HAL_DMA_IRQHandler+0xc8c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d02c      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a20      	ldr	r2, [pc, #128]	@ (8004528 <HAL_DMA_IRQHandler+0xc90>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d027      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1f      	ldr	r2, [pc, #124]	@ (800452c <HAL_DMA_IRQHandler+0xc94>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d022      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004530 <HAL_DMA_IRQHandler+0xc98>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01d      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004534 <HAL_DMA_IRQHandler+0xc9c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d018      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004538 <HAL_DMA_IRQHandler+0xca0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a19      	ldr	r2, [pc, #100]	@ (800453c <HAL_DMA_IRQHandler+0xca4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00e      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <HAL_DMA_IRQHandler+0xca8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <HAL_DMA_IRQHandler+0xcac>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_DMA_IRQHandler+0xc62>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a14      	ldr	r2, [pc, #80]	@ (8004548 <HAL_DMA_IRQHandler+0xcb0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d128      	bne.n	800454c <HAL_DMA_IRQHandler+0xcb4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0214 	bic.w	r2, r2, #20
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e027      	b.n	800455c <HAL_DMA_IRQHandler+0xcc4>
 800450c:	40020010 	.word	0x40020010
 8004510:	40020028 	.word	0x40020028
 8004514:	40020040 	.word	0x40020040
 8004518:	40020058 	.word	0x40020058
 800451c:	40020070 	.word	0x40020070
 8004520:	40020088 	.word	0x40020088
 8004524:	400200a0 	.word	0x400200a0
 8004528:	400200b8 	.word	0x400200b8
 800452c:	40020410 	.word	0x40020410
 8004530:	40020428 	.word	0x40020428
 8004534:	40020440 	.word	0x40020440
 8004538:	40020458 	.word	0x40020458
 800453c:	40020470 	.word	0x40020470
 8004540:	40020488 	.word	0x40020488
 8004544:	400204a0 	.word	0x400204a0
 8004548:	400204b8 	.word	0x400204b8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 020a 	bic.w	r2, r2, #10
 800455a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8097 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457e:	e091      	b.n	80046a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2208      	movs	r2, #8
 800458a:	409a      	lsls	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8088 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8082 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a41      	ldr	r2, [pc, #260]	@ (80046ac <HAL_DMA_IRQHandler+0xe14>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04a      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a3f      	ldr	r2, [pc, #252]	@ (80046b0 <HAL_DMA_IRQHandler+0xe18>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d045      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3e      	ldr	r2, [pc, #248]	@ (80046b4 <HAL_DMA_IRQHandler+0xe1c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d040      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3c      	ldr	r2, [pc, #240]	@ (80046b8 <HAL_DMA_IRQHandler+0xe20>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3b      	ldr	r2, [pc, #236]	@ (80046bc <HAL_DMA_IRQHandler+0xe24>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d036      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a39      	ldr	r2, [pc, #228]	@ (80046c0 <HAL_DMA_IRQHandler+0xe28>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a38      	ldr	r2, [pc, #224]	@ (80046c4 <HAL_DMA_IRQHandler+0xe2c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d02c      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a36      	ldr	r2, [pc, #216]	@ (80046c8 <HAL_DMA_IRQHandler+0xe30>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d027      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a35      	ldr	r2, [pc, #212]	@ (80046cc <HAL_DMA_IRQHandler+0xe34>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <HAL_DMA_IRQHandler+0xe38>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a32      	ldr	r2, [pc, #200]	@ (80046d4 <HAL_DMA_IRQHandler+0xe3c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <HAL_DMA_IRQHandler+0xe40>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2f      	ldr	r2, [pc, #188]	@ (80046dc <HAL_DMA_IRQHandler+0xe44>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	@ (80046e0 <HAL_DMA_IRQHandler+0xe48>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2c      	ldr	r2, [pc, #176]	@ (80046e4 <HAL_DMA_IRQHandler+0xe4c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <HAL_DMA_IRQHandler+0xe50>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d108      	bne.n	8004654 <HAL_DMA_IRQHandler+0xdbc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 021c 	bic.w	r2, r2, #28
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e007      	b.n	8004664 <HAL_DMA_IRQHandler+0xdcc>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020e 	bic.w	r2, r2, #14
 8004662:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
 800469a:	e004      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046a6:	3728      	adds	r7, #40	@ 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40020010 	.word	0x40020010
 80046b0:	40020028 	.word	0x40020028
 80046b4:	40020040 	.word	0x40020040
 80046b8:	40020058 	.word	0x40020058
 80046bc:	40020070 	.word	0x40020070
 80046c0:	40020088 	.word	0x40020088
 80046c4:	400200a0 	.word	0x400200a0
 80046c8:	400200b8 	.word	0x400200b8
 80046cc:	40020410 	.word	0x40020410
 80046d0:	40020428 	.word	0x40020428
 80046d4:	40020440 	.word	0x40020440
 80046d8:	40020458 	.word	0x40020458
 80046dc:	40020470 	.word	0x40020470
 80046e0:	40020488 	.word	0x40020488
 80046e4:	400204a0 	.word	0x400204a0
 80046e8:	400204b8 	.word	0x400204b8

080046ec <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	460b      	mov	r3, r1
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e045      	b.n	8004794 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_DMA_RegisterCallback+0x2a>
 8004712:	2302      	movs	r3, #2
 8004714:	e03e      	b.n	8004794 <HAL_DMA_RegisterCallback+0xa8>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d12d      	bne.n	8004786 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	2b05      	cmp	r3, #5
 800472e:	d827      	bhi.n	8004780 <HAL_DMA_RegisterCallback+0x94>
 8004730:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <HAL_DMA_RegisterCallback+0x4c>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004751 	.word	0x08004751
 800473c:	08004759 	.word	0x08004759
 8004740:	08004761 	.word	0x08004761
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8004756:	e018      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800475e:	e014      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8004766:	e010      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800476e:	e00c      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8004776:	e008      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800477e:	e004      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]
      break;
 8004784:	e001      	b.n	800478a <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7f      	ldr	r2, [pc, #508]	@ (80049d4 <DMA_SetConfig+0x21c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d072      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a7d      	ldr	r2, [pc, #500]	@ (80049d8 <DMA_SetConfig+0x220>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d06d      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7c      	ldr	r2, [pc, #496]	@ (80049dc <DMA_SetConfig+0x224>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d068      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7a      	ldr	r2, [pc, #488]	@ (80049e0 <DMA_SetConfig+0x228>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d063      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a79      	ldr	r2, [pc, #484]	@ (80049e4 <DMA_SetConfig+0x22c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d05e      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a77      	ldr	r2, [pc, #476]	@ (80049e8 <DMA_SetConfig+0x230>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d059      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a76      	ldr	r2, [pc, #472]	@ (80049ec <DMA_SetConfig+0x234>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d054      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a74      	ldr	r2, [pc, #464]	@ (80049f0 <DMA_SetConfig+0x238>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04f      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a73      	ldr	r2, [pc, #460]	@ (80049f4 <DMA_SetConfig+0x23c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d04a      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a71      	ldr	r2, [pc, #452]	@ (80049f8 <DMA_SetConfig+0x240>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d045      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a70      	ldr	r2, [pc, #448]	@ (80049fc <DMA_SetConfig+0x244>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d040      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a6e      	ldr	r2, [pc, #440]	@ (8004a00 <DMA_SetConfig+0x248>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d03b      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6d      	ldr	r2, [pc, #436]	@ (8004a04 <DMA_SetConfig+0x24c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d036      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a6b      	ldr	r2, [pc, #428]	@ (8004a08 <DMA_SetConfig+0x250>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6a      	ldr	r2, [pc, #424]	@ (8004a0c <DMA_SetConfig+0x254>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d02c      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a68      	ldr	r2, [pc, #416]	@ (8004a10 <DMA_SetConfig+0x258>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d027      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a67      	ldr	r2, [pc, #412]	@ (8004a14 <DMA_SetConfig+0x25c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d022      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a65      	ldr	r2, [pc, #404]	@ (8004a18 <DMA_SetConfig+0x260>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01d      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a64      	ldr	r2, [pc, #400]	@ (8004a1c <DMA_SetConfig+0x264>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a62      	ldr	r2, [pc, #392]	@ (8004a20 <DMA_SetConfig+0x268>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a61      	ldr	r2, [pc, #388]	@ (8004a24 <DMA_SetConfig+0x26c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004a28 <DMA_SetConfig+0x270>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a2c <DMA_SetConfig+0x274>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <DMA_SetConfig+0x10a>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004a30 <DMA_SetConfig+0x278>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <DMA_SetConfig+0x10e>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <DMA_SetConfig+0x110>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a39      	ldr	r2, [pc, #228]	@ (80049d4 <DMA_SetConfig+0x21c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d04a      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a38      	ldr	r2, [pc, #224]	@ (80049d8 <DMA_SetConfig+0x220>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d045      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a36      	ldr	r2, [pc, #216]	@ (80049dc <DMA_SetConfig+0x224>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d040      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a35      	ldr	r2, [pc, #212]	@ (80049e0 <DMA_SetConfig+0x228>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d03b      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a33      	ldr	r2, [pc, #204]	@ (80049e4 <DMA_SetConfig+0x22c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d036      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <DMA_SetConfig+0x230>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d031      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a30      	ldr	r2, [pc, #192]	@ (80049ec <DMA_SetConfig+0x234>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d02c      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2f      	ldr	r2, [pc, #188]	@ (80049f0 <DMA_SetConfig+0x238>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d027      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2d      	ldr	r2, [pc, #180]	@ (80049f4 <DMA_SetConfig+0x23c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d022      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2c      	ldr	r2, [pc, #176]	@ (80049f8 <DMA_SetConfig+0x240>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d01d      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2a      	ldr	r2, [pc, #168]	@ (80049fc <DMA_SetConfig+0x244>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d018      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a29      	ldr	r2, [pc, #164]	@ (8004a00 <DMA_SetConfig+0x248>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a27      	ldr	r2, [pc, #156]	@ (8004a04 <DMA_SetConfig+0x24c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00e      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <DMA_SetConfig+0x250>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a24      	ldr	r2, [pc, #144]	@ (8004a0c <DMA_SetConfig+0x254>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <DMA_SetConfig+0x1d0>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a23      	ldr	r2, [pc, #140]	@ (8004a10 <DMA_SetConfig+0x258>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <DMA_SetConfig+0x1d4>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <DMA_SetConfig+0x1d6>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d059      	beq.n	8004a46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	223f      	movs	r2, #63	@ 0x3f
 800499c:	409a      	lsls	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d138      	bne.n	8004a34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049d2:	e086      	b.n	8004ae2 <DMA_SetConfig+0x32a>
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	58025408 	.word	0x58025408
 8004a18:	5802541c 	.word	0x5802541c
 8004a1c:	58025430 	.word	0x58025430
 8004a20:	58025444 	.word	0x58025444
 8004a24:	58025458 	.word	0x58025458
 8004a28:	5802546c 	.word	0x5802546c
 8004a2c:	58025480 	.word	0x58025480
 8004a30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]
}
 8004a44:	e04d      	b.n	8004ae2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a29      	ldr	r2, [pc, #164]	@ (8004af0 <DMA_SetConfig+0x338>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a27      	ldr	r2, [pc, #156]	@ (8004af4 <DMA_SetConfig+0x33c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01d      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a26      	ldr	r2, [pc, #152]	@ (8004af8 <DMA_SetConfig+0x340>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a24      	ldr	r2, [pc, #144]	@ (8004afc <DMA_SetConfig+0x344>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a23      	ldr	r2, [pc, #140]	@ (8004b00 <DMA_SetConfig+0x348>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a21      	ldr	r2, [pc, #132]	@ (8004b04 <DMA_SetConfig+0x34c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a20      	ldr	r2, [pc, #128]	@ (8004b08 <DMA_SetConfig+0x350>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <DMA_SetConfig+0x2de>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1e      	ldr	r2, [pc, #120]	@ (8004b0c <DMA_SetConfig+0x354>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <DMA_SetConfig+0x2e2>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <DMA_SetConfig+0x2e4>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d020      	beq.n	8004ae2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	d108      	bne.n	8004ad2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	60da      	str	r2, [r3, #12]
}
 8004ad0:	e007      	b.n	8004ae2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	60da      	str	r2, [r3, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	58025408 	.word	0x58025408
 8004af4:	5802541c 	.word	0x5802541c
 8004af8:	58025430 	.word	0x58025430
 8004afc:	58025444 	.word	0x58025444
 8004b00:	58025458 	.word	0x58025458
 8004b04:	5802546c 	.word	0x5802546c
 8004b08:	58025480 	.word	0x58025480
 8004b0c:	58025494 	.word	0x58025494

08004b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <DMA_CalcBaseAndBitshift+0x118>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d04a      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a41      	ldr	r2, [pc, #260]	@ (8004c2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d045      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a3f      	ldr	r2, [pc, #252]	@ (8004c30 <DMA_CalcBaseAndBitshift+0x120>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d040      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c34 <DMA_CalcBaseAndBitshift+0x124>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d03b      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a3c      	ldr	r2, [pc, #240]	@ (8004c38 <DMA_CalcBaseAndBitshift+0x128>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d036      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d031      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a39      	ldr	r2, [pc, #228]	@ (8004c40 <DMA_CalcBaseAndBitshift+0x130>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02c      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a38      	ldr	r2, [pc, #224]	@ (8004c44 <DMA_CalcBaseAndBitshift+0x134>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d027      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a36      	ldr	r2, [pc, #216]	@ (8004c48 <DMA_CalcBaseAndBitshift+0x138>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d022      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a35      	ldr	r2, [pc, #212]	@ (8004c4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d01d      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a33      	ldr	r2, [pc, #204]	@ (8004c50 <DMA_CalcBaseAndBitshift+0x140>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d018      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a32      	ldr	r2, [pc, #200]	@ (8004c54 <DMA_CalcBaseAndBitshift+0x144>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a30      	ldr	r2, [pc, #192]	@ (8004c58 <DMA_CalcBaseAndBitshift+0x148>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c5c <DMA_CalcBaseAndBitshift+0x14c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c60 <DMA_CalcBaseAndBitshift+0x150>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c64 <DMA_CalcBaseAndBitshift+0x154>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <DMA_CalcBaseAndBitshift+0xac>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <DMA_CalcBaseAndBitshift+0xae>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d024      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3b10      	subs	r3, #16
 8004bca:	4a27      	ldr	r2, [pc, #156]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x158>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x15c>)
 8004bdc:	5cd3      	ldrb	r3, [r2, r3]
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d908      	bls.n	8004bfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x160>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bfa:	e00d      	b.n	8004c18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b1b      	ldr	r3, [pc, #108]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x160>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c0a:	e005      	b.n	8004c18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40020010 	.word	0x40020010
 8004c2c:	40020028 	.word	0x40020028
 8004c30:	40020040 	.word	0x40020040
 8004c34:	40020058 	.word	0x40020058
 8004c38:	40020070 	.word	0x40020070
 8004c3c:	40020088 	.word	0x40020088
 8004c40:	400200a0 	.word	0x400200a0
 8004c44:	400200b8 	.word	0x400200b8
 8004c48:	40020410 	.word	0x40020410
 8004c4c:	40020428 	.word	0x40020428
 8004c50:	40020440 	.word	0x40020440
 8004c54:	40020458 	.word	0x40020458
 8004c58:	40020470 	.word	0x40020470
 8004c5c:	40020488 	.word	0x40020488
 8004c60:	400204a0 	.word	0x400204a0
 8004c64:	400204b8 	.word	0x400204b8
 8004c68:	aaaaaaab 	.word	0xaaaaaaab
 8004c6c:	080260e0 	.word	0x080260e0
 8004c70:	fffffc00 	.word	0xfffffc00

08004c74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d120      	bne.n	8004cca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d858      	bhi.n	8004d42 <DMA_CheckFifoParam+0xce>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <DMA_CheckFifoParam+0x24>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004cbb 	.word	0x08004cbb
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	08004d43 	.word	0x08004d43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d048      	beq.n	8004d46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cb8:	e045      	b.n	8004d46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cc2:	d142      	bne.n	8004d4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cc8:	e03f      	b.n	8004d4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd2:	d123      	bne.n	8004d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d838      	bhi.n	8004d4e <DMA_CheckFifoParam+0xda>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <DMA_CheckFifoParam+0x70>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004cfb 	.word	0x08004cfb
 8004cec:	08004cf5 	.word	0x08004cf5
 8004cf0:	08004d0d 	.word	0x08004d0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf8:	e030      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d025      	beq.n	8004d52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d0a:	e022      	b.n	8004d52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d14:	d11f      	bne.n	8004d56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d1a:	e01c      	b.n	8004d56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d902      	bls.n	8004d2a <DMA_CheckFifoParam+0xb6>
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d003      	beq.n	8004d30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d28:	e018      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d2e:	e015      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004d40:	e00b      	b.n	8004d5a <DMA_CheckFifoParam+0xe6>
        break;
 8004d42:	bf00      	nop
 8004d44:	e00a      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        break;
 8004d46:	bf00      	nop
 8004d48:	e008      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e006      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e004      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        break;
 8004d52:	bf00      	nop
 8004d54:	e002      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
        break;
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <DMA_CheckFifoParam+0xe8>
    break;
 8004d5a:	bf00      	nop
    }
  }

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop

08004d6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a38      	ldr	r2, [pc, #224]	@ (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d022      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a36      	ldr	r2, [pc, #216]	@ (8004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01d      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a35      	ldr	r2, [pc, #212]	@ (8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d018      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a33      	ldr	r2, [pc, #204]	@ (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a32      	ldr	r2, [pc, #200]	@ (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00e      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2f      	ldr	r2, [pc, #188]	@ (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d101      	bne.n	8004dce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01a      	beq.n	8004e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	3b08      	subs	r3, #8
 8004ddc:	4a28      	ldr	r2, [pc, #160]	@ (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	091b      	lsrs	r3, r3, #4
 8004de4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a24      	ldr	r2, [pc, #144]	@ (8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004df8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2201      	movs	r2, #1
 8004e02:	409a      	lsls	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e08:	e024      	b.n	8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	3b10      	subs	r3, #16
 8004e12:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d806      	bhi.n	8004e32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d902      	bls.n	8004e32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4b18      	ldr	r3, [pc, #96]	@ (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	58025408 	.word	0x58025408
 8004e64:	5802541c 	.word	0x5802541c
 8004e68:	58025430 	.word	0x58025430
 8004e6c:	58025444 	.word	0x58025444
 8004e70:	58025458 	.word	0x58025458
 8004e74:	5802546c 	.word	0x5802546c
 8004e78:	58025480 	.word	0x58025480
 8004e7c:	58025494 	.word	0x58025494
 8004e80:	cccccccd 	.word	0xcccccccd
 8004e84:	16009600 	.word	0x16009600
 8004e88:	58025880 	.word	0x58025880
 8004e8c:	aaaaaaab 	.word	0xaaaaaaab
 8004e90:	400204b8 	.word	0x400204b8
 8004e94:	4002040f 	.word	0x4002040f
 8004e98:	10008200 	.word	0x10008200
 8004e9c:	40020880 	.word	0x40020880

08004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d04a      	beq.n	8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d847      	bhi.n	8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a25      	ldr	r2, [pc, #148]	@ (8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a24      	ldr	r2, [pc, #144]	@ (8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01d      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	@ (8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	@ (8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4b17      	ldr	r3, [pc, #92]	@ (8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f28:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f2a:	e009      	b.n	8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	461a      	mov	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a11      	ldr	r2, [pc, #68]	@ (8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	2201      	movs	r2, #1
 8004f46:	409a      	lsls	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	58025408 	.word	0x58025408
 8004f5c:	5802541c 	.word	0x5802541c
 8004f60:	58025430 	.word	0x58025430
 8004f64:	58025444 	.word	0x58025444
 8004f68:	58025458 	.word	0x58025458
 8004f6c:	5802546c 	.word	0x5802546c
 8004f70:	58025480 	.word	0x58025480
 8004f74:	58025494 	.word	0x58025494
 8004f78:	1600963f 	.word	0x1600963f
 8004f7c:	58025940 	.word	0x58025940
 8004f80:	1000823f 	.word	0x1000823f
 8004f84:	40020940 	.word	0x40020940

08004f88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b098      	sub	sp, #96	@ 0x60
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004f90:	4a84      	ldr	r2, [pc, #528]	@ (80051a4 <HAL_FDCAN_Init+0x21c>)
 8004f92:	f107 030c 	add.w	r3, r7, #12
 8004f96:	4611      	mov	r1, r2
 8004f98:	224c      	movs	r2, #76	@ 0x4c
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f01f f825 	bl	8023fea <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1c6      	b.n	8005338 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a7e      	ldr	r2, [pc, #504]	@ (80051a8 <HAL_FDCAN_Init+0x220>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d106      	bne.n	8004fc2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc f886 	bl	80010e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0210 	bic.w	r2, r2, #16
 8004fea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fec:	f7fd f80e 	bl	800200c <HAL_GetTick>
 8004ff0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ff2:	e014      	b.n	800501e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ff4:	f7fd f80a 	bl	800200c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b0a      	cmp	r3, #10
 8005000:	d90d      	bls.n	800501e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2203      	movs	r2, #3
 8005016:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e18c      	b.n	8005338 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d0e3      	beq.n	8004ff4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800503c:	f7fc ffe6 	bl	800200c <HAL_GetTick>
 8005040:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005042:	e014      	b.n	800506e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005044:	f7fc ffe2 	bl	800200c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b0a      	cmp	r3, #10
 8005050:	d90d      	bls.n	800506e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005058:	f043 0201 	orr.w	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2203      	movs	r2, #3
 8005066:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e164      	b.n	8005338 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0e3      	beq.n	8005044 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0202 	orr.w	r2, r2, #2
 800508a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7c1b      	ldrb	r3, [r3, #16]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d108      	bne.n	80050a6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a2:	619a      	str	r2, [r3, #24]
 80050a4:	e007      	b.n	80050b6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	7c5b      	ldrb	r3, [r3, #17]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d108      	bne.n	80050d0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050cc:	619a      	str	r2, [r3, #24]
 80050ce:	e007      	b.n	80050e0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050de:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7c9b      	ldrb	r3, [r3, #18]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d108      	bne.n	80050fa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050f6:	619a      	str	r2, [r3, #24]
 80050f8:	e007      	b.n	800510a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005108:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800512e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0210 	bic.w	r2, r2, #16
 800513e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0204 	orr.w	r2, r2, #4
 8005156:	619a      	str	r2, [r3, #24]
 8005158:	e030      	b.n	80051bc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02c      	beq.n	80051bc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d020      	beq.n	80051ac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005178:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0210 	orr.w	r2, r2, #16
 8005188:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d114      	bne.n	80051bc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0220 	orr.w	r2, r2, #32
 80051a0:	619a      	str	r2, [r3, #24]
 80051a2:	e00b      	b.n	80051bc <HAL_FDCAN_Init+0x234>
 80051a4:	08025d38 	.word	0x08025d38
 80051a8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0220 	orr.w	r2, r2, #32
 80051ba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051cc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051d4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	3b01      	subs	r3, #1
 80051de:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051e4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051e6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f0:	d115      	bne.n	800521e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	3b01      	subs	r3, #1
 80051fe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005200:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	3b01      	subs	r3, #1
 8005208:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800520a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	3b01      	subs	r3, #1
 8005214:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800521a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800521c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005244:	4413      	add	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d011      	beq.n	800526e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005252:	f023 0107 	bic.w	r1, r3, #7
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	3360      	adds	r3, #96	@ 0x60
 800525e:	443b      	add	r3, r7
 8005260:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800527e:	f023 0107 	bic.w	r1, r3, #7
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	3360      	adds	r3, #96	@ 0x60
 800528a:	443b      	add	r3, r7
 800528c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d012      	beq.n	80052c8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052aa:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	3360      	adds	r3, #96	@ 0x60
 80052b6:	443b      	add	r3, r7
 80052b8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80052bc:	011a      	lsls	r2, r3, #4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d012      	beq.n	80052f6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052d8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	3360      	adds	r3, #96	@ 0x60
 80052e4:	443b      	add	r3, r7
 80052e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a11      	ldr	r2, [pc, #68]	@ (8005340 <HAL_FDCAN_Init+0x3b8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d107      	bne.n	8005310 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f022 0203 	bic.w	r2, r2, #3
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fdd9 	bl	8005ee0 <FDCAN_CalcultateRamBlockAddresses>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005334:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005338:	4618      	mov	r0, r3
 800533a:	3760      	adds	r7, #96	@ 0x60
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	4000a000 	.word	0x4000a000

08005344 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005354:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d002      	beq.n	8005362 <HAL_FDCAN_ConfigFilter+0x1e>
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d157      	bne.n	8005412 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d12b      	bne.n	80053c2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b07      	cmp	r3, #7
 8005370:	d10d      	bne.n	800538e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800537e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005384:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005386:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e00e      	b.n	80053ac <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800539a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80053a2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e025      	b.n	800540e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	075a      	lsls	r2, r3, #29
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b07      	cmp	r3, #7
 80053d6:	d103      	bne.n	80053e0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	e006      	b.n	80053ee <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	079a      	lsls	r2, r3, #30
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	3304      	adds	r3, #4
 8005406:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e008      	b.n	8005424 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005418:	f043 0202 	orr.w	r2, r3, #2
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d111      	bne.n	8005468 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	e008      	b.n	800547a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800546e:	f043 0204 	orr.w	r2, r3, #4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d141      	bne.n	8005522 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80054a6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e038      	b.n	8005534 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80054ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e026      	b.n	8005534 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fe75 	bl	80061ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2101      	movs	r1, #1
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	fa01 f202 	lsl.w	r2, r1, r2
 800550e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005512:	2201      	movs	r2, #1
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e008      	b.n	8005534 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005528:	f043 0208 	orr.w	r2, r3, #8
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800553c:	b480      	push	{r7}
 800553e:	b08b      	sub	sp, #44	@ 0x2c
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005554:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005556:	7efb      	ldrb	r3, [r7, #27]
 8005558:	2b02      	cmp	r3, #2
 800555a:	f040 8149 	bne.w	80057f0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b40      	cmp	r3, #64	@ 0x40
 8005562:	d14c      	bne.n	80055fe <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800556c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800557a:	f043 0220 	orr.w	r2, r3, #32
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e13c      	b.n	8005802 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e12a      	b.n	8005802 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055b4:	0e1b      	lsrs	r3, r3, #24
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10a      	bne.n	80055d4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055c6:	0fdb      	lsrs	r3, r3, #31
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fc:	e068      	b.n	80056d0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b41      	cmp	r3, #65	@ 0x41
 8005602:	d14c      	bne.n	800569e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800560c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0ec      	b.n	8005802 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800563e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e0da      	b.n	8005802 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005654:	0e1b      	lsrs	r3, r3, #24
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10a      	bne.n	8005674 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005666:	0fdb      	lsrs	r3, r3, #31
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005670:	2301      	movs	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
 800569c:	e018      	b.n	80056d0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d309      	bcc.n	80056bc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0a2      	b.n	8005802 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d107      	bne.n	80056f4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0c9b      	lsrs	r3, r3, #18
 80056ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e005      	b.n	8005700 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	3304      	adds	r3, #4
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	b29a      	uxth	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	0e1b      	lsrs	r3, r3, #24
 8005754:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	0fda      	lsrs	r2, r3, #31
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	3304      	adds	r3, #4
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005770:	2300      	movs	r3, #0
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	e00a      	b.n	800578c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	441a      	add	r2, r3
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	440b      	add	r3, r1
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	3301      	adds	r3, #1
 800578a:	623b      	str	r3, [r7, #32]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a1f      	ldr	r2, [pc, #124]	@ (8005810 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	461a      	mov	r2, r3
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	4293      	cmp	r3, r2
 800579a:	d3ec      	bcc.n	8005776 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b40      	cmp	r3, #64	@ 0x40
 80057a0:	d105      	bne.n	80057ae <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80057ac:	e01e      	b.n	80057ec <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b41      	cmp	r3, #65	@ 0x41
 80057b2:	d105      	bne.n	80057c0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80057be:	e015      	b.n	80057ec <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b1f      	cmp	r3, #31
 80057c4:	d808      	bhi.n	80057d8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	fa01 f202 	lsl.w	r2, r1, r2
 80057d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80057d6:	e009      	b.n	80057ec <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 021f 	and.w	r2, r3, #31
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2101      	movs	r1, #1
 80057e4:	fa01 f202 	lsl.w	r2, r1, r2
 80057e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e008      	b.n	8005802 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057f6:	f043 0208 	orr.w	r2, r3, #8
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	372c      	adds	r7, #44	@ 0x2c
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	080260e8 	.word	0x080260e8

08005814 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005826:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d002      	beq.n	8005834 <HAL_FDCAN_ActivateNotification+0x20>
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d155      	bne.n	80058e0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005852:	e014      	b.n	800587e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d108      	bne.n	8005876 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0202 	orr.w	r2, r2, #2
 8005872:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005874:	e003      	b.n	800587e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2203      	movs	r2, #3
 800587c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	430a      	orrs	r2, r1
 8005898:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <HAL_FDCAN_ActivateNotification+0xec>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80058ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005904 <HAL_FDCAN_ActivateNotification+0xf0>)
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	0f9b      	lsrs	r3, r3, #30
 80058d6:	490b      	ldr	r1, [pc, #44]	@ (8005904 <HAL_FDCAN_ActivateNotification+0xf0>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e008      	b.n	80058f2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058e6:	f043 0202 	orr.w	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	3fcfffff 	.word	0x3fcfffff
 8005904:	4000a800 	.word	0x4000a800

08005908 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b096      	sub	sp, #88	@ 0x58
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005910:	4b95      	ldr	r3, [pc, #596]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	079b      	lsls	r3, r3, #30
 8005916:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005918:	4b93      	ldr	r3, [pc, #588]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	079b      	lsls	r3, r3, #30
 800591e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005920:	4013      	ands	r3, r2
 8005922:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800592e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005936:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005938:	4013      	ands	r3, r2
 800593a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005950:	4013      	ands	r3, r2
 8005952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800595e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005968:	4013      	ands	r3, r2
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005972:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005976:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005980:	4013      	ands	r3, r2
 8005982:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800598e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005996:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005998:	4013      	ands	r3, r2
 800599a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00f      	beq.n	80059d6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80059ca:	4b67      	ldr	r3, [pc, #412]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fa39 	bl	8005e48 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80059d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01c      	beq.n	8005a1a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80059e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d017      	beq.n	8005a1a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059fe:	4013      	ands	r3, r2
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a0c:	4b56      	ldr	r3, [pc, #344]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005a12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f9ee 	bl	8005df6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a26:	4b51      	ldr	r3, [pc, #324]	@ (8005b6c <HAL_FDCAN_IRQHandler+0x264>)
 8005a28:	400b      	ands	r3, r1
 8005a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a30:	0f9b      	lsrs	r3, r3, #30
 8005a32:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9b2 	bl	8005da0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a48:	4b48      	ldr	r3, [pc, #288]	@ (8005b6c <HAL_FDCAN_IRQHandler+0x264>)
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a4e:	4a46      	ldr	r2, [pc, #280]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a52:	0f9b      	lsrs	r3, r3, #30
 8005a54:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005a56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9ac 	bl	8005db6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005a6a:	4b40      	ldr	r3, [pc, #256]	@ (8005b6c <HAL_FDCAN_IRQHandler+0x264>)
 8005a6c:	400b      	ands	r3, r1
 8005a6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a70:	4a3d      	ldr	r2, [pc, #244]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a74:	0f9b      	lsrs	r3, r3, #30
 8005a76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005a78:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f018 fce8 	bl	801e450 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00d      	beq.n	8005aa2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a8c:	4b37      	ldr	r3, [pc, #220]	@ (8005b6c <HAL_FDCAN_IRQHandler+0x264>)
 8005a8e:	400b      	ands	r3, r1
 8005a90:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a92:	4a35      	ldr	r2, [pc, #212]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a96:	0f9b      	lsrs	r3, r3, #30
 8005a98:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005a9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f018 fcfb 	bl	801e498 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005abe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ac0:	4b29      	ldr	r3, [pc, #164]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f980 	bl	8005dcc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01c      	beq.n	8005b10 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d017      	beq.n	8005b10 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af4:	4013      	ands	r3, r2
 8005af6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b00:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b02:	4b19      	ldr	r3, [pc, #100]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005b08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f968 	bl	8005de0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00f      	beq.n	8005b3a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005b2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f969 	bl	8005e0c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d015      	beq.n	8005b70 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b56:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b58:	4b03      	ldr	r3, [pc, #12]	@ (8005b68 <HAL_FDCAN_IRQHandler+0x260>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f95e 	bl	8005e20 <HAL_FDCAN_TimestampWraparoundCallback>
 8005b64:	e004      	b.n	8005b70 <HAL_FDCAN_IRQHandler+0x268>
 8005b66:	bf00      	nop
 8005b68:	4000a800 	.word	0x4000a800
 8005b6c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00f      	beq.n	8005b9a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b8e:	4b81      	ldr	r3, [pc, #516]	@ (8005d94 <HAL_FDCAN_IRQHandler+0x48c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f94d 	bl	8005e34 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d014      	beq.n	8005bce <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00f      	beq.n	8005bce <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bb8:	4b76      	ldr	r3, [pc, #472]	@ (8005d94 <HAL_FDCAN_IRQHandler+0x48c>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bda:	4b6f      	ldr	r3, [pc, #444]	@ (8005d98 <HAL_FDCAN_IRQHandler+0x490>)
 8005bdc:	400b      	ands	r3, r1
 8005bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8005be0:	4a6c      	ldr	r2, [pc, #432]	@ (8005d94 <HAL_FDCAN_IRQHandler+0x48c>)
 8005be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be4:	0f9b      	lsrs	r3, r3, #30
 8005be6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f940 	bl	8005e70 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bfc:	4b66      	ldr	r3, [pc, #408]	@ (8005d98 <HAL_FDCAN_IRQHandler+0x490>)
 8005bfe:	400b      	ands	r3, r1
 8005c00:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c02:	4a64      	ldr	r2, [pc, #400]	@ (8005d94 <HAL_FDCAN_IRQHandler+0x48c>)
 8005c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c06:	0f9b      	lsrs	r3, r3, #30
 8005c08:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8005d9c <HAL_FDCAN_IRQHandler+0x494>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	f040 80aa 	bne.w	8005d7a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80a2 	beq.w	8005d7a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c58:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c62:	4013      	ands	r3, r2
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005c88:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	4013      	ands	r3, r2
 8005c94:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005ca0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005ccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8d9 	bl	8005e86 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ce0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8d9 	bl	8005e9c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d019      	beq.n	8005d28 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d014      	beq.n	8005d28 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d14:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2240      	movs	r2, #64	@ 0x40
 8005d1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	6939      	ldr	r1, [r7, #16]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8c5 	bl	8005eb2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005d36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8c6 	bl	8005eca <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f869 	bl	8005e5c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	3758      	adds	r7, #88	@ 0x58
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	4000a800 	.word	0x4000a800
 8005d98:	3fcfffff 	.word	0x3fcfffff
 8005d9c:	4000a000 	.word	0x4000a000

08005da0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005ef6:	4ba7      	ldr	r3, [pc, #668]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	0091      	lsls	r1, r2, #2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	430b      	orrs	r3, r1
 8005f04:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f10:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	041a      	lsls	r2, r3, #16
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f36:	4b97      	ldr	r3, [pc, #604]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0091      	lsls	r1, r2, #2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	430b      	orrs	r3, r1
 8005f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f50:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f58:	041a      	lsls	r2, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005f78:	4b86      	ldr	r3, [pc, #536]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	0091      	lsls	r1, r2, #2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	430b      	orrs	r3, r1
 8005f86:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f92:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	041a      	lsls	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005fc0:	4b74      	ldr	r3, [pc, #464]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	0091      	lsls	r1, r2, #2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fda:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe2:	041a      	lsls	r2, r3, #16
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006008:	4b62      	ldr	r3, [pc, #392]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800600a:	4013      	ands	r3, r2
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	0091      	lsls	r1, r2, #2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	430b      	orrs	r3, r1
 8006016:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	4413      	add	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006034:	4b57      	ldr	r3, [pc, #348]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006036:	4013      	ands	r3, r2
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0091      	lsls	r1, r2, #2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	430b      	orrs	r3, r1
 8006042:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800604e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	041a      	lsls	r2, r3, #16
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	4413      	add	r3, r2
 800606c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006076:	4b47      	ldr	r3, [pc, #284]	@ (8006194 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006078:	4013      	ands	r3, r2
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0091      	lsls	r1, r2, #2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	430b      	orrs	r3, r1
 8006084:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006090:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006098:	041a      	lsls	r2, r3, #16
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80060ac:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b4:	061a      	lsls	r2, r3, #24
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060c4:	4b34      	ldr	r3, [pc, #208]	@ (8006198 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80060c6:	4413      	add	r3, r2
 80060c8:	009a      	lsls	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	441a      	add	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006100:	441a      	add	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	441a      	add	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800617c:	441a      	add	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618a:	4a04      	ldr	r2, [pc, #16]	@ (800619c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d915      	bls.n	80061bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006190:	e006      	b.n	80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006192:	bf00      	nop
 8006194:	ffff0003 	.word	0xffff0003
 8006198:	10002b00 	.word	0x10002b00
 800619c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e010      	b.n	80061de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e005      	b.n	80061d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3304      	adds	r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d3f3      	bcc.n	80061c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop

080061ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b089      	sub	sp, #36	@ 0x24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800620a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006212:	4313      	orrs	r3, r2
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e00a      	b.n	800622e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006220:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006226:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800622c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006238:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800623e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006244:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	3304      	adds	r3, #4
 8006270:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	3304      	adds	r3, #4
 800627c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e020      	b.n	80062c6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3303      	adds	r3, #3
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	3302      	adds	r3, #2
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	440b      	add	r3, r1
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800629c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	3301      	adds	r3, #1
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	440b      	add	r3, r1
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80062aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	440a      	add	r2, r1
 80062b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80062b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	3304      	adds	r3, #4
 80062be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3304      	adds	r3, #4
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	4a06      	ldr	r2, [pc, #24]	@ (80062e4 <FDCAN_CopyMessageToRAM+0xf8>)
 80062cc:	5cd3      	ldrb	r3, [r2, r3]
 80062ce:	461a      	mov	r2, r3
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d3d6      	bcc.n	8006284 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	3724      	adds	r7, #36	@ 0x24
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	080260e8 	.word	0x080260e8

080062e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b089      	sub	sp, #36	@ 0x24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062f6:	4b89      	ldr	r3, [pc, #548]	@ (800651c <HAL_GPIO_Init+0x234>)
 80062f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062fa:	e194      	b.n	8006626 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	4013      	ands	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8186 	beq.w	8006620 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d005      	beq.n	800632c <HAL_GPIO_Init+0x44>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d130      	bne.n	800638e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	2203      	movs	r2, #3
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4313      	orrs	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006362:	2201      	movs	r2, #1
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43db      	mvns	r3, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4013      	ands	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 0201 	and.w	r2, r3, #1
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d017      	beq.n	80063ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	2203      	movs	r2, #3
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4013      	ands	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d123      	bne.n	800641e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	08da      	lsrs	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3208      	adds	r2, #8
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	220f      	movs	r2, #15
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4313      	orrs	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3208      	adds	r2, #8
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	2203      	movs	r2, #3
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f003 0203 	and.w	r2, r3, #3
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80e0 	beq.w	8006620 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006460:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <HAL_GPIO_Init+0x238>)
 8006462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006466:	4a2e      	ldr	r2, [pc, #184]	@ (8006520 <HAL_GPIO_Init+0x238>)
 8006468:	f043 0302 	orr.w	r3, r3, #2
 800646c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006470:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <HAL_GPIO_Init+0x238>)
 8006472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800647e:	4a29      	ldr	r2, [pc, #164]	@ (8006524 <HAL_GPIO_Init+0x23c>)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3302      	adds	r3, #2
 8006486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	220f      	movs	r2, #15
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a20      	ldr	r2, [pc, #128]	@ (8006528 <HAL_GPIO_Init+0x240>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d052      	beq.n	8006550 <HAL_GPIO_Init+0x268>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <HAL_GPIO_Init+0x244>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_GPIO_Init+0x22e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <HAL_GPIO_Init+0x248>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d02b      	beq.n	8006512 <HAL_GPIO_Init+0x22a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <HAL_GPIO_Init+0x24c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d025      	beq.n	800650e <HAL_GPIO_Init+0x226>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006538 <HAL_GPIO_Init+0x250>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01f      	beq.n	800650a <HAL_GPIO_Init+0x222>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1b      	ldr	r2, [pc, #108]	@ (800653c <HAL_GPIO_Init+0x254>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d019      	beq.n	8006506 <HAL_GPIO_Init+0x21e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006540 <HAL_GPIO_Init+0x258>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_GPIO_Init+0x21a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <HAL_GPIO_Init+0x25c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00d      	beq.n	80064fe <HAL_GPIO_Init+0x216>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a18      	ldr	r2, [pc, #96]	@ (8006548 <HAL_GPIO_Init+0x260>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <HAL_GPIO_Init+0x212>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a17      	ldr	r2, [pc, #92]	@ (800654c <HAL_GPIO_Init+0x264>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <HAL_GPIO_Init+0x20e>
 80064f2:	2309      	movs	r3, #9
 80064f4:	e02d      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 80064f6:	230a      	movs	r3, #10
 80064f8:	e02b      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 80064fa:	2308      	movs	r3, #8
 80064fc:	e029      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 80064fe:	2307      	movs	r3, #7
 8006500:	e027      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006502:	2306      	movs	r3, #6
 8006504:	e025      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006506:	2305      	movs	r3, #5
 8006508:	e023      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 800650a:	2304      	movs	r3, #4
 800650c:	e021      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 800650e:	2303      	movs	r3, #3
 8006510:	e01f      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006512:	2302      	movs	r3, #2
 8006514:	e01d      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006516:	2301      	movs	r3, #1
 8006518:	e01b      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 800651a:	bf00      	nop
 800651c:	58000080 	.word	0x58000080
 8006520:	58024400 	.word	0x58024400
 8006524:	58000400 	.word	0x58000400
 8006528:	58020000 	.word	0x58020000
 800652c:	58020400 	.word	0x58020400
 8006530:	58020800 	.word	0x58020800
 8006534:	58020c00 	.word	0x58020c00
 8006538:	58021000 	.word	0x58021000
 800653c:	58021400 	.word	0x58021400
 8006540:	58021800 	.word	0x58021800
 8006544:	58021c00 	.word	0x58021c00
 8006548:	58022000 	.word	0x58022000
 800654c:	58022400 	.word	0x58022400
 8006550:	2300      	movs	r3, #0
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	f002 0203 	and.w	r2, r2, #3
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	4093      	lsls	r3, r2
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006562:	4938      	ldr	r1, [pc, #224]	@ (8006644 <HAL_GPIO_Init+0x35c>)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	089b      	lsrs	r3, r3, #2
 8006568:	3302      	adds	r3, #2
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	43db      	mvns	r3, r3
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	4013      	ands	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006596:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	43db      	mvns	r3, r3
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4013      	ands	r3, r2
 80065da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f ae63 	bne.w	80062fc <HAL_GPIO_Init+0x14>
  }
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	3724      	adds	r7, #36	@ 0x24
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58000400 	.word	0x58000400

08006648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	e001      	b.n	800666a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006694:	e003      	b.n	800669e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	041a      	lsls	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066bc:	887a      	ldrh	r2, [r7, #2]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	041a      	lsls	r2, r3, #16
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	43d9      	mvns	r1, r3
 80066c8:	887b      	ldrh	r3, [r7, #2]
 80066ca:	400b      	ands	r3, r1
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	619a      	str	r2, [r3, #24]
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	4603      	mov	r3, r0
 80066e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80066e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	4618      	mov	r0, r3
 8006706:	f01b faf5 	bl	8021cf4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e08b      	b.n	800683e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fa fd4e 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2224      	movs	r2, #36	@ 0x24
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800678a:	609a      	str	r2, [r3, #8]
 800678c:	e006      	b.n	800679c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800679a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d108      	bne.n	80067b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	e007      	b.n	80067c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6859      	ldr	r1, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006848 <HAL_I2C_Init+0x134>)
 80067d2:	430b      	orrs	r3, r1
 80067d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69d9      	ldr	r1, [r3, #28]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1a      	ldr	r2, [r3, #32]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	02008000 	.word	0x02008000

0800684c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	461a      	mov	r2, r3
 800685a:	4603      	mov	r3, r0
 800685c:	817b      	strh	r3, [r7, #10]
 800685e:	460b      	mov	r3, r1
 8006860:	813b      	strh	r3, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b20      	cmp	r3, #32
 8006870:	f040 80f9 	bne.w	8006a66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_I2C_Mem_Write+0x34>
 800687a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d105      	bne.n	800688c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0ed      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <HAL_I2C_Mem_Write+0x4e>
 8006896:	2302      	movs	r3, #2
 8006898:	e0e6      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068a2:	f7fb fbb3 	bl	800200c <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	2319      	movs	r3, #25
 80068ae:	2201      	movs	r2, #1
 80068b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f955 	bl	8006b64 <I2C_WaitOnFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0d1      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2221      	movs	r2, #33	@ 0x21
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2240      	movs	r2, #64	@ 0x40
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a3a      	ldr	r2, [r7, #32]
 80068de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ec:	88f8      	ldrh	r0, [r7, #6]
 80068ee:	893a      	ldrh	r2, [r7, #8]
 80068f0:	8979      	ldrh	r1, [r7, #10]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	4603      	mov	r3, r0
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f8b9 	bl	8006a74 <I2C_RequestMemoryWrite>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e0a9      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	2bff      	cmp	r3, #255	@ 0xff
 800691c:	d90e      	bls.n	800693c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	22ff      	movs	r2, #255	@ 0xff
 8006922:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006928:	b2da      	uxtb	r2, r3
 800692a:	8979      	ldrh	r1, [r7, #10]
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fad9 	bl	8006eec <I2C_TransferConfig>
 800693a:	e00f      	b.n	800695c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694a:	b2da      	uxtb	r2, r3
 800694c:	8979      	ldrh	r1, [r7, #10]
 800694e:	2300      	movs	r3, #0
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fac8 	bl	8006eec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f958 	bl	8006c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e07b      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d034      	beq.n	8006a14 <HAL_I2C_Mem_Write+0x1c8>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d130      	bne.n	8006a14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	2200      	movs	r2, #0
 80069ba:	2180      	movs	r1, #128	@ 0x80
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f8d1 	bl	8006b64 <I2C_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e04d      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2bff      	cmp	r3, #255	@ 0xff
 80069d4:	d90e      	bls.n	80069f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	22ff      	movs	r2, #255	@ 0xff
 80069da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	8979      	ldrh	r1, [r7, #10]
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fa7d 	bl	8006eec <I2C_TransferConfig>
 80069f2:	e00f      	b.n	8006a14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	8979      	ldrh	r1, [r7, #10]
 8006a06:	2300      	movs	r3, #0
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fa6c 	bl	8006eec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d19e      	bne.n	800695c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f93e 	bl	8006ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e01a      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2220      	movs	r2, #32
 8006a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6859      	ldr	r1, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <HAL_I2C_Mem_Write+0x224>)
 8006a46:	400b      	ands	r3, r1
 8006a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e000      	b.n	8006a68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a66:	2302      	movs	r3, #2
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	fe00e800 	.word	0xfe00e800

08006a74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	817b      	strh	r3, [r7, #10]
 8006a86:	460b      	mov	r3, r1
 8006a88:	813b      	strh	r3, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	8979      	ldrh	r1, [r7, #10]
 8006a94:	4b20      	ldr	r3, [pc, #128]	@ (8006b18 <I2C_RequestMemoryWrite+0xa4>)
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fa25 	bl	8006eec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	69b9      	ldr	r1, [r7, #24]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f8b5 	bl	8006c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e02c      	b.n	8006b10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d105      	bne.n	8006ac8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006abc:	893b      	ldrh	r3, [r7, #8]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ac6:	e015      	b.n	8006af4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ac8:	893b      	ldrh	r3, [r7, #8]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	69b9      	ldr	r1, [r7, #24]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f89b 	bl	8006c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e012      	b.n	8006b10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aea:	893b      	ldrh	r3, [r7, #8]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2200      	movs	r2, #0
 8006afc:	2180      	movs	r1, #128	@ 0x80
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f830 	bl	8006b64 <I2C_WaitOnFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	80002000 	.word	0x80002000

08006b1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d103      	bne.n	8006b3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d007      	beq.n	8006b58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	619a      	str	r2, [r3, #24]
  }
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	4613      	mov	r3, r2
 8006b72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b74:	e03b      	b.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f8d6 	bl	8006d2c <I2C_IsErrorOccurred>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e041      	b.n	8006c0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b90:	d02d      	beq.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b92:	f7fb fa3b 	bl	800200c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d122      	bne.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2301      	moveq	r3, #1
 8006bba:	2300      	movne	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d113      	bne.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bca:	f043 0220 	orr.w	r2, r3, #32
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e00f      	b.n	8006c0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d0b4      	beq.n	8006b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c22:	e033      	b.n	8006c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f87f 	bl	8006d2c <I2C_IsErrorOccurred>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e031      	b.n	8006c9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c3e:	d025      	beq.n	8006c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c40:	f7fb f9e4 	bl	800200c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d302      	bcc.n	8006c56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d11a      	bne.n	8006c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d013      	beq.n	8006c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e007      	b.n	8006c9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d1c4      	bne.n	8006c24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cb0:	e02f      	b.n	8006d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f838 	bl	8006d2c <I2C_IsErrorOccurred>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e02d      	b.n	8006d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc6:	f7fb f9a1 	bl	800200c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d302      	bcc.n	8006cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11a      	bne.n	8006d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d013      	beq.n	8006d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e007      	b.n	8006d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d1c8      	bne.n	8006cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	@ 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d068      	beq.n	8006e2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d60:	e049      	b.n	8006df6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d68:	d045      	beq.n	8006df6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d6a:	f7fb f94f 	bl	800200c <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <I2C_IsErrorOccurred+0x54>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d13a      	bne.n	8006df6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da2:	d121      	bne.n	8006de8 <I2C_IsErrorOccurred+0xbc>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006daa:	d01d      	beq.n	8006de8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d01a      	beq.n	8006de8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006dc2:	f7fb f923 	bl	800200c <HAL_GetTick>
 8006dc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc8:	e00e      	b.n	8006de8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006dca:	f7fb f91f 	bl	800200c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b19      	cmp	r3, #25
 8006dd6:	d907      	bls.n	8006de8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	f043 0320 	orr.w	r3, r3, #32
 8006dde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006de6:	e006      	b.n	8006df6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d1e9      	bne.n	8006dca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d003      	beq.n	8006e0c <I2C_IsErrorOccurred+0xe0>
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0aa      	beq.n	8006d62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	f043 0302 	orr.w	r3, r3, #2
 8006e86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01c      	beq.n	8006eda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7ff fe3b 	bl	8006b1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6859      	ldr	r1, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <I2C_IsErrorOccurred+0x1bc>)
 8006eb2:	400b      	ands	r3, r1
 8006eb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3728      	adds	r7, #40	@ 0x28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	fe00e800 	.word	0xfe00e800

08006eec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	817b      	strh	r3, [r7, #10]
 8006efa:	4613      	mov	r3, r2
 8006efc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006efe:	897b      	ldrh	r3, [r7, #10]
 8006f00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f04:	7a7b      	ldrb	r3, [r7, #9]
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f0c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f1a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	0d5b      	lsrs	r3, r3, #21
 8006f26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006f2a:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <I2C_TransferConfig+0x60>)
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	ea02 0103 	and.w	r1, r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	03ff63ff 	.word	0x03ff63ff

08006f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d138      	bne.n	8006fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e032      	b.n	8006fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	@ 0x24
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6819      	ldr	r1, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d139      	bne.n	8007070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007006:	2302      	movs	r3, #2
 8007008:	e033      	b.n	8007072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2224      	movs	r2, #36	@ 0x24
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	e000      	b.n	8007072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007088:	4b19      	ldr	r3, [pc, #100]	@ (80070f0 <HAL_PWREx_ConfigSupply+0x70>)
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b04      	cmp	r3, #4
 8007092:	d00a      	beq.n	80070aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007094:	4b16      	ldr	r3, [pc, #88]	@ (80070f0 <HAL_PWREx_ConfigSupply+0x70>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d001      	beq.n	80070a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e01f      	b.n	80070e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e01d      	b.n	80070e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80070aa:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <HAL_PWREx_ConfigSupply+0x70>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f023 0207 	bic.w	r2, r3, #7
 80070b2:	490f      	ldr	r1, [pc, #60]	@ (80070f0 <HAL_PWREx_ConfigSupply+0x70>)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070ba:	f7fa ffa7 	bl	800200c <HAL_GetTick>
 80070be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070c0:	e009      	b.n	80070d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070c2:	f7fa ffa3 	bl	800200c <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070d0:	d901      	bls.n	80070d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e007      	b.n	80070e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070d6:	4b06      	ldr	r3, [pc, #24]	@ (80070f0 <HAL_PWREx_ConfigSupply+0x70>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e2:	d1ee      	bne.n	80070c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	58024800 	.word	0x58024800

080070f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08c      	sub	sp, #48	@ 0x30
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f000 bc48 	b.w	8007998 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8088 	beq.w	8007226 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007116:	4b99      	ldr	r3, [pc, #612]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800711e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007120:	4b96      	ldr	r3, [pc, #600]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007128:	2b10      	cmp	r3, #16
 800712a:	d007      	beq.n	800713c <HAL_RCC_OscConfig+0x48>
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	2b18      	cmp	r3, #24
 8007130:	d111      	bne.n	8007156 <HAL_RCC_OscConfig+0x62>
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d10c      	bne.n	8007156 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800713c:	4b8f      	ldr	r3, [pc, #572]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d06d      	beq.n	8007224 <HAL_RCC_OscConfig+0x130>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d169      	bne.n	8007224 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f000 bc21 	b.w	8007998 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800715e:	d106      	bne.n	800716e <HAL_RCC_OscConfig+0x7a>
 8007160:	4b86      	ldr	r3, [pc, #536]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a85      	ldr	r2, [pc, #532]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	e02e      	b.n	80071cc <HAL_RCC_OscConfig+0xd8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10c      	bne.n	8007190 <HAL_RCC_OscConfig+0x9c>
 8007176:	4b81      	ldr	r3, [pc, #516]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a80      	ldr	r2, [pc, #512]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 800717c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	4b7e      	ldr	r3, [pc, #504]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a7d      	ldr	r2, [pc, #500]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007188:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	e01d      	b.n	80071cc <HAL_RCC_OscConfig+0xd8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007198:	d10c      	bne.n	80071b4 <HAL_RCC_OscConfig+0xc0>
 800719a:	4b78      	ldr	r3, [pc, #480]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a77      	ldr	r2, [pc, #476]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	4b75      	ldr	r3, [pc, #468]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a74      	ldr	r2, [pc, #464]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e00b      	b.n	80071cc <HAL_RCC_OscConfig+0xd8>
 80071b4:	4b71      	ldr	r3, [pc, #452]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a70      	ldr	r2, [pc, #448]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	4b6e      	ldr	r3, [pc, #440]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a6d      	ldr	r2, [pc, #436]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d013      	beq.n	80071fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d4:	f7fa ff1a 	bl	800200c <HAL_GetTick>
 80071d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071dc:	f7fa ff16 	bl	800200c <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b64      	cmp	r3, #100	@ 0x64
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e3d4      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071ee:	4b63      	ldr	r3, [pc, #396]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0f0      	beq.n	80071dc <HAL_RCC_OscConfig+0xe8>
 80071fa:	e014      	b.n	8007226 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fa ff06 	bl	800200c <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007204:	f7fa ff02 	bl	800200c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b64      	cmp	r3, #100	@ 0x64
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e3c0      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007216:	4b59      	ldr	r3, [pc, #356]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x110>
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80ca 	beq.w	80073c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007234:	4b51      	ldr	r3, [pc, #324]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800723c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800723e:	4b4f      	ldr	r3, [pc, #316]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <HAL_RCC_OscConfig+0x166>
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	2b18      	cmp	r3, #24
 800724e:	d156      	bne.n	80072fe <HAL_RCC_OscConfig+0x20a>
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d151      	bne.n	80072fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800725a:	4b48      	ldr	r3, [pc, #288]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_RCC_OscConfig+0x17e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e392      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007272:	4b42      	ldr	r3, [pc, #264]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 0219 	bic.w	r2, r3, #25
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	493f      	ldr	r1, [pc, #252]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007280:	4313      	orrs	r3, r2
 8007282:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fa fec2 	bl	800200c <HAL_GetTick>
 8007288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800728c:	f7fa febe 	bl	800200c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e37c      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800729e:	4b37      	ldr	r3, [pc, #220]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072aa:	f7fa fedf 	bl	800206c <HAL_GetREVID>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d817      	bhi.n	80072e8 <HAL_RCC_OscConfig+0x1f4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b40      	cmp	r3, #64	@ 0x40
 80072be:	d108      	bne.n	80072d2 <HAL_RCC_OscConfig+0x1de>
 80072c0:	4b2e      	ldr	r3, [pc, #184]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80072c8:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072d0:	e07a      	b.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d2:	4b2a      	ldr	r3, [pc, #168]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	031b      	lsls	r3, r3, #12
 80072e0:	4926      	ldr	r1, [pc, #152]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e6:	e06f      	b.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e8:	4b24      	ldr	r3, [pc, #144]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	061b      	lsls	r3, r3, #24
 80072f6:	4921      	ldr	r1, [pc, #132]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072fc:	e064      	b.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d047      	beq.n	8007396 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007306:	4b1d      	ldr	r3, [pc, #116]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 0219 	bic.w	r2, r3, #25
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	491a      	ldr	r1, [pc, #104]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007314:	4313      	orrs	r3, r2
 8007316:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fa fe78 	bl	800200c <HAL_GetTick>
 800731c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007320:	f7fa fe74 	bl	800200c <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e332      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007332:	4b12      	ldr	r3, [pc, #72]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733e:	f7fa fe95 	bl	800206c <HAL_GetREVID>
 8007342:	4603      	mov	r3, r0
 8007344:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007348:	4293      	cmp	r3, r2
 800734a:	d819      	bhi.n	8007380 <HAL_RCC_OscConfig+0x28c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b40      	cmp	r3, #64	@ 0x40
 8007352:	d108      	bne.n	8007366 <HAL_RCC_OscConfig+0x272>
 8007354:	4b09      	ldr	r3, [pc, #36]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800735c:	4a07      	ldr	r2, [pc, #28]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 800735e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007362:	6053      	str	r3, [r2, #4]
 8007364:	e030      	b.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
 8007366:	4b05      	ldr	r3, [pc, #20]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	031b      	lsls	r3, r3, #12
 8007374:	4901      	ldr	r1, [pc, #4]	@ (800737c <HAL_RCC_OscConfig+0x288>)
 8007376:	4313      	orrs	r3, r2
 8007378:	604b      	str	r3, [r1, #4]
 800737a:	e025      	b.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
 800737c:	58024400 	.word	0x58024400
 8007380:	4b9a      	ldr	r3, [pc, #616]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	061b      	lsls	r3, r3, #24
 800738e:	4997      	ldr	r1, [pc, #604]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007390:	4313      	orrs	r3, r2
 8007392:	604b      	str	r3, [r1, #4]
 8007394:	e018      	b.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007396:	4b95      	ldr	r3, [pc, #596]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a94      	ldr	r2, [pc, #592]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 800739c:	f023 0301 	bic.w	r3, r3, #1
 80073a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a2:	f7fa fe33 	bl	800200c <HAL_GetTick>
 80073a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073aa:	f7fa fe2f 	bl	800200c <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e2ed      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073bc:	4b8b      	ldr	r3, [pc, #556]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f0      	bne.n	80073aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80a9 	beq.w	8007528 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073d6:	4b85      	ldr	r3, [pc, #532]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073e0:	4b82      	ldr	r3, [pc, #520]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d007      	beq.n	80073fc <HAL_RCC_OscConfig+0x308>
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b18      	cmp	r3, #24
 80073f0:	d13a      	bne.n	8007468 <HAL_RCC_OscConfig+0x374>
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d135      	bne.n	8007468 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073fc:	4b7b      	ldr	r3, [pc, #492]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_RCC_OscConfig+0x320>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	2b80      	cmp	r3, #128	@ 0x80
 800740e:	d001      	beq.n	8007414 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e2c1      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007414:	f7fa fe2a 	bl	800206c <HAL_GetREVID>
 8007418:	4603      	mov	r3, r0
 800741a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800741e:	4293      	cmp	r3, r2
 8007420:	d817      	bhi.n	8007452 <HAL_RCC_OscConfig+0x35e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	2b20      	cmp	r3, #32
 8007428:	d108      	bne.n	800743c <HAL_RCC_OscConfig+0x348>
 800742a:	4b70      	ldr	r3, [pc, #448]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007432:	4a6e      	ldr	r2, [pc, #440]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007438:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800743a:	e075      	b.n	8007528 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800743c:	4b6b      	ldr	r3, [pc, #428]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	069b      	lsls	r3, r3, #26
 800744a:	4968      	ldr	r1, [pc, #416]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 800744c:	4313      	orrs	r3, r2
 800744e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007450:	e06a      	b.n	8007528 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007452:	4b66      	ldr	r3, [pc, #408]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	4962      	ldr	r1, [pc, #392]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007462:	4313      	orrs	r3, r2
 8007464:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007466:	e05f      	b.n	8007528 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d042      	beq.n	80074f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007470:	4b5e      	ldr	r3, [pc, #376]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a5d      	ldr	r2, [pc, #372]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747c:	f7fa fdc6 	bl	800200c <HAL_GetTick>
 8007480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007484:	f7fa fdc2 	bl	800200c <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e280      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007496:	4b55      	ldr	r3, [pc, #340]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074a2:	f7fa fde3 	bl	800206c <HAL_GetREVID>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d817      	bhi.n	80074e0 <HAL_RCC_OscConfig+0x3ec>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d108      	bne.n	80074ca <HAL_RCC_OscConfig+0x3d6>
 80074b8:	4b4c      	ldr	r3, [pc, #304]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80074c0:	4a4a      	ldr	r2, [pc, #296]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074c6:	6053      	str	r3, [r2, #4]
 80074c8:	e02e      	b.n	8007528 <HAL_RCC_OscConfig+0x434>
 80074ca:	4b48      	ldr	r3, [pc, #288]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	069b      	lsls	r3, r3, #26
 80074d8:	4944      	ldr	r1, [pc, #272]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	604b      	str	r3, [r1, #4]
 80074de:	e023      	b.n	8007528 <HAL_RCC_OscConfig+0x434>
 80074e0:	4b42      	ldr	r3, [pc, #264]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	061b      	lsls	r3, r3, #24
 80074ee:	493f      	ldr	r1, [pc, #252]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60cb      	str	r3, [r1, #12]
 80074f4:	e018      	b.n	8007528 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80074f6:	4b3d      	ldr	r3, [pc, #244]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3c      	ldr	r2, [pc, #240]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80074fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007502:	f7fa fd83 	bl	800200c <HAL_GetTick>
 8007506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800750a:	f7fa fd7f 	bl	800200c <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e23d      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800751c:	4b33      	ldr	r3, [pc, #204]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d036      	beq.n	80075a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d019      	beq.n	8007570 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800753c:	4b2b      	ldr	r3, [pc, #172]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 800753e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007540:	4a2a      	ldr	r2, [pc, #168]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007548:	f7fa fd60 	bl	800200c <HAL_GetTick>
 800754c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007550:	f7fa fd5c 	bl	800200c <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e21a      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007562:	4b22      	ldr	r3, [pc, #136]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0x45c>
 800756e:	e018      	b.n	80075a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007570:	4b1e      	ldr	r3, [pc, #120]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007574:	4a1d      	ldr	r2, [pc, #116]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757c:	f7fa fd46 	bl	800200c <HAL_GetTick>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007584:	f7fa fd42 	bl	800200c <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e200      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007596:	4b15      	ldr	r3, [pc, #84]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 8007598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f0      	bne.n	8007584 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d039      	beq.n	8007622 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d01c      	beq.n	80075f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075b6:	4b0d      	ldr	r3, [pc, #52]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a0c      	ldr	r2, [pc, #48]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80075bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075c2:	f7fa fd23 	bl	800200c <HAL_GetTick>
 80075c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ca:	f7fa fd1f 	bl	800200c <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e1dd      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80075dc:	4b03      	ldr	r3, [pc, #12]	@ (80075ec <HAL_RCC_OscConfig+0x4f8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <HAL_RCC_OscConfig+0x4d6>
 80075e8:	e01b      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075f0:	4b9b      	ldr	r3, [pc, #620]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a9a      	ldr	r2, [pc, #616]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80075f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075fc:	f7fa fd06 	bl	800200c <HAL_GetTick>
 8007600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007604:	f7fa fd02 	bl	800200c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e1c0      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007616:	4b92      	ldr	r3, [pc, #584]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f0      	bne.n	8007604 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8081 	beq.w	8007732 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007630:	4b8c      	ldr	r3, [pc, #560]	@ (8007864 <HAL_RCC_OscConfig+0x770>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a8b      	ldr	r2, [pc, #556]	@ (8007864 <HAL_RCC_OscConfig+0x770>)
 8007636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800763a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800763c:	f7fa fce6 	bl	800200c <HAL_GetTick>
 8007640:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007644:	f7fa fce2 	bl	800200c <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b64      	cmp	r3, #100	@ 0x64
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e1a0      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007656:	4b83      	ldr	r3, [pc, #524]	@ (8007864 <HAL_RCC_OscConfig+0x770>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d106      	bne.n	8007678 <HAL_RCC_OscConfig+0x584>
 800766a:	4b7d      	ldr	r3, [pc, #500]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766e:	4a7c      	ldr	r2, [pc, #496]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	6713      	str	r3, [r2, #112]	@ 0x70
 8007676:	e02d      	b.n	80076d4 <HAL_RCC_OscConfig+0x5e0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10c      	bne.n	800769a <HAL_RCC_OscConfig+0x5a6>
 8007680:	4b77      	ldr	r3, [pc, #476]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007684:	4a76      	ldr	r2, [pc, #472]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	6713      	str	r3, [r2, #112]	@ 0x70
 800768c:	4b74      	ldr	r3, [pc, #464]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800768e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007690:	4a73      	ldr	r2, [pc, #460]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007692:	f023 0304 	bic.w	r3, r3, #4
 8007696:	6713      	str	r3, [r2, #112]	@ 0x70
 8007698:	e01c      	b.n	80076d4 <HAL_RCC_OscConfig+0x5e0>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2b05      	cmp	r3, #5
 80076a0:	d10c      	bne.n	80076bc <HAL_RCC_OscConfig+0x5c8>
 80076a2:	4b6f      	ldr	r3, [pc, #444]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076a8:	f043 0304 	orr.w	r3, r3, #4
 80076ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ba:	e00b      	b.n	80076d4 <HAL_RCC_OscConfig+0x5e0>
 80076bc:	4b68      	ldr	r3, [pc, #416]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c0:	4a67      	ldr	r2, [pc, #412]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076c8:	4b65      	ldr	r3, [pc, #404]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076cc:	4a64      	ldr	r2, [pc, #400]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076ce:	f023 0304 	bic.w	r3, r3, #4
 80076d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d015      	beq.n	8007708 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076dc:	f7fa fc96 	bl	800200c <HAL_GetTick>
 80076e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076e2:	e00a      	b.n	80076fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e4:	f7fa fc92 	bl	800200c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e14e      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076fa:	4b59      	ldr	r3, [pc, #356]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80076fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0ee      	beq.n	80076e4 <HAL_RCC_OscConfig+0x5f0>
 8007706:	e014      	b.n	8007732 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007708:	f7fa fc80 	bl	800200c <HAL_GetTick>
 800770c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800770e:	e00a      	b.n	8007726 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007710:	f7fa fc7c 	bl	800200c <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771e:	4293      	cmp	r3, r2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e138      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007726:	4b4e      	ldr	r3, [pc, #312]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1ee      	bne.n	8007710 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 812d 	beq.w	8007996 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800773c:	4b48      	ldr	r3, [pc, #288]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007744:	2b18      	cmp	r3, #24
 8007746:	f000 80bd 	beq.w	80078c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774e:	2b02      	cmp	r3, #2
 8007750:	f040 809e 	bne.w	8007890 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007754:	4b42      	ldr	r3, [pc, #264]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a41      	ldr	r2, [pc, #260]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800775a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800775e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fa fc54 	bl	800200c <HAL_GetTick>
 8007764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007768:	f7fa fc50 	bl	800200c <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e10e      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800777a:	4b39      	ldr	r3, [pc, #228]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f0      	bne.n	8007768 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007786:	4b36      	ldr	r3, [pc, #216]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800778a:	4b37      	ldr	r3, [pc, #220]	@ (8007868 <HAL_RCC_OscConfig+0x774>)
 800778c:	4013      	ands	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007796:	0112      	lsls	r2, r2, #4
 8007798:	430a      	orrs	r2, r1
 800779a:	4931      	ldr	r1, [pc, #196]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800779c:	4313      	orrs	r3, r2
 800779e:	628b      	str	r3, [r1, #40]	@ 0x28
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a4:	3b01      	subs	r3, #1
 80077a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ae:	3b01      	subs	r3, #1
 80077b0:	025b      	lsls	r3, r3, #9
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ba:	3b01      	subs	r3, #1
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c8:	3b01      	subs	r3, #1
 80077ca:	061b      	lsls	r3, r3, #24
 80077cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077d0:	4923      	ldr	r1, [pc, #140]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80077d6:	4b22      	ldr	r3, [pc, #136]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	4a21      	ldr	r2, [pc, #132]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80077e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077e6:	4b21      	ldr	r3, [pc, #132]	@ (800786c <HAL_RCC_OscConfig+0x778>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077ee:	00d2      	lsls	r2, r2, #3
 80077f0:	491b      	ldr	r1, [pc, #108]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80077f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fa:	f023 020c 	bic.w	r2, r3, #12
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007802:	4917      	ldr	r1, [pc, #92]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007804:	4313      	orrs	r3, r2
 8007806:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007808:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800780a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780c:	f023 0202 	bic.w	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007814:	4912      	ldr	r1, [pc, #72]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007816:	4313      	orrs	r3, r2
 8007818:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800781a:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	4a10      	ldr	r2, [pc, #64]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007826:	4b0e      	ldr	r3, [pc, #56]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a0d      	ldr	r2, [pc, #52]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800782c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007832:	4b0b      	ldr	r3, [pc, #44]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	4a0a      	ldr	r2, [pc, #40]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800783c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800783e:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	4a07      	ldr	r2, [pc, #28]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800784a:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a04      	ldr	r2, [pc, #16]	@ (8007860 <HAL_RCC_OscConfig+0x76c>)
 8007850:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007856:	f7fa fbd9 	bl	800200c <HAL_GetTick>
 800785a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800785c:	e011      	b.n	8007882 <HAL_RCC_OscConfig+0x78e>
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
 8007864:	58024800 	.word	0x58024800
 8007868:	fffffc0c 	.word	0xfffffc0c
 800786c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007870:	f7fa fbcc 	bl	800200c <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e08a      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007882:	4b47      	ldr	r3, [pc, #284]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x77c>
 800788e:	e082      	b.n	8007996 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007890:	4b43      	ldr	r3, [pc, #268]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a42      	ldr	r2, [pc, #264]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800789a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fa fbb6 	bl	800200c <HAL_GetTick>
 80078a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a4:	f7fa fbb2 	bl	800200c <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e070      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078b6:	4b3a      	ldr	r3, [pc, #232]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <HAL_RCC_OscConfig+0x7b0>
 80078c2:	e068      	b.n	8007996 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80078c4:	4b36      	ldr	r3, [pc, #216]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80078ca:	4b35      	ldr	r3, [pc, #212]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 80078cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d031      	beq.n	800793c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f003 0203 	and.w	r2, r3, #3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d12a      	bne.n	800793c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d122      	bne.n	800793c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007900:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007902:	429a      	cmp	r2, r3
 8007904:	d11a      	bne.n	800793c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	0a5b      	lsrs	r3, r3, #9
 800790a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007912:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007914:	429a      	cmp	r2, r3
 8007916:	d111      	bne.n	800793c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007924:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007926:	429a      	cmp	r2, r3
 8007928:	d108      	bne.n	800793c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	0e1b      	lsrs	r3, r3, #24
 800792e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007936:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007938:	429a      	cmp	r2, r3
 800793a:	d001      	beq.n	8007940 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e02b      	b.n	8007998 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007940:	4b17      	ldr	r3, [pc, #92]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007944:	08db      	lsrs	r3, r3, #3
 8007946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800794a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	429a      	cmp	r2, r3
 8007954:	d01f      	beq.n	8007996 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007956:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	4a11      	ldr	r2, [pc, #68]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007962:	f7fa fb53 	bl	800200c <HAL_GetTick>
 8007966:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007968:	bf00      	nop
 800796a:	f7fa fb4f 	bl	800200c <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	4293      	cmp	r3, r2
 8007974:	d0f9      	beq.n	800796a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007976:	4b0a      	ldr	r3, [pc, #40]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800797a:	4b0a      	ldr	r3, [pc, #40]	@ (80079a4 <HAL_RCC_OscConfig+0x8b0>)
 800797c:	4013      	ands	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007982:	00d2      	lsls	r2, r2, #3
 8007984:	4906      	ldr	r1, [pc, #24]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007986:	4313      	orrs	r3, r2
 8007988:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800798a:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	4a04      	ldr	r2, [pc, #16]	@ (80079a0 <HAL_RCC_OscConfig+0x8ac>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	@ 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	58024400 	.word	0x58024400
 80079a4:	ffff0007 	.word	0xffff0007

080079a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e19c      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079bc:	4b8a      	ldr	r3, [pc, #552]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d910      	bls.n	80079ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ca:	4b87      	ldr	r3, [pc, #540]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f023 020f 	bic.w	r2, r3, #15
 80079d2:	4985      	ldr	r1, [pc, #532]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079da:	4b83      	ldr	r3, [pc, #524]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d001      	beq.n	80079ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e184      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d010      	beq.n	8007a1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	4b7b      	ldr	r3, [pc, #492]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d908      	bls.n	8007a1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a08:	4b78      	ldr	r3, [pc, #480]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	4975      	ldr	r1, [pc, #468]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d010      	beq.n	8007a48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695a      	ldr	r2, [r3, #20]
 8007a2a:	4b70      	ldr	r3, [pc, #448]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d908      	bls.n	8007a48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a36:	4b6d      	ldr	r3, [pc, #436]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	496a      	ldr	r1, [pc, #424]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d010      	beq.n	8007a76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	4b64      	ldr	r3, [pc, #400]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d908      	bls.n	8007a76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a64:	4b61      	ldr	r3, [pc, #388]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	495e      	ldr	r1, [pc, #376]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d010      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69da      	ldr	r2, [r3, #28]
 8007a86:	4b59      	ldr	r3, [pc, #356]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d908      	bls.n	8007aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a92:	4b56      	ldr	r3, [pc, #344]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	4953      	ldr	r1, [pc, #332]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d908      	bls.n	8007ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f023 020f 	bic.w	r2, r3, #15
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	4947      	ldr	r1, [pc, #284]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d055      	beq.n	8007b8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ade:	4b43      	ldr	r3, [pc, #268]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	4940      	ldr	r1, [pc, #256]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d107      	bne.n	8007b08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007af8:	4b3c      	ldr	r3, [pc, #240]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d121      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e0f6      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d107      	bne.n	8007b20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b10:	4b36      	ldr	r3, [pc, #216]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d115      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0ea      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d107      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b28:	4b30      	ldr	r3, [pc, #192]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0de      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b38:	4b2c      	ldr	r3, [pc, #176]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e0d6      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b48:	4b28      	ldr	r3, [pc, #160]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f023 0207 	bic.w	r2, r3, #7
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4925      	ldr	r1, [pc, #148]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5a:	f7fa fa57 	bl	800200c <HAL_GetTick>
 8007b5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b60:	e00a      	b.n	8007b78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b62:	f7fa fa53 	bl	800200c <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e0be      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b78:	4b1c      	ldr	r3, [pc, #112]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d1eb      	bne.n	8007b62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d010      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	4b14      	ldr	r3, [pc, #80]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d208      	bcs.n	8007bb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba6:	4b11      	ldr	r3, [pc, #68]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f023 020f 	bic.w	r2, r3, #15
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	490e      	ldr	r1, [pc, #56]	@ (8007bec <HAL_RCC_ClockConfig+0x244>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d214      	bcs.n	8007bf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc6:	4b08      	ldr	r3, [pc, #32]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f023 020f 	bic.w	r2, r3, #15
 8007bce:	4906      	ldr	r1, [pc, #24]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd6:	4b04      	ldr	r3, [pc, #16]	@ (8007be8 <HAL_RCC_ClockConfig+0x240>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d005      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e086      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x34e>
 8007be8:	52002000 	.word	0x52002000
 8007bec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d010      	beq.n	8007c1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	4b3f      	ldr	r3, [pc, #252]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d208      	bcs.n	8007c1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	4939      	ldr	r1, [pc, #228]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0308 	and.w	r3, r3, #8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d010      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695a      	ldr	r2, [r3, #20]
 8007c2e:	4b34      	ldr	r3, [pc, #208]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d208      	bcs.n	8007c4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c3a:	4b31      	ldr	r3, [pc, #196]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	492e      	ldr	r1, [pc, #184]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d010      	beq.n	8007c7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	699a      	ldr	r2, [r3, #24]
 8007c5c:	4b28      	ldr	r3, [pc, #160]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d208      	bcs.n	8007c7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c68:	4b25      	ldr	r3, [pc, #148]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	4922      	ldr	r1, [pc, #136]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d010      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d208      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c96:	4b1a      	ldr	r3, [pc, #104]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4917      	ldr	r1, [pc, #92]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ca8:	f000 f834 	bl	8007d14 <HAL_RCC_GetSysClockFreq>
 8007cac:	4602      	mov	r2, r0
 8007cae:	4b14      	ldr	r3, [pc, #80]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	4912      	ldr	r1, [pc, #72]	@ (8007d04 <HAL_RCC_ClockConfig+0x35c>)
 8007cba:	5ccb      	ldrb	r3, [r1, r3]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d00 <HAL_RCC_ClockConfig+0x358>)
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	4a0d      	ldr	r2, [pc, #52]	@ (8007d04 <HAL_RCC_ClockConfig+0x35c>)
 8007cd0:	5cd3      	ldrb	r3, [r2, r3]
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8007d08 <HAL_RCC_ClockConfig+0x360>)
 8007cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8007d0c <HAL_RCC_ClockConfig+0x364>)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <HAL_RCC_ClockConfig+0x368>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7f9 fe98 	bl	8001a20 <HAL_InitTick>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	58024400 	.word	0x58024400
 8007d04:	080260d0 	.word	0x080260d0
 8007d08:	24000004 	.word	0x24000004
 8007d0c:	24000000 	.word	0x24000000
 8007d10:	24000008 	.word	0x24000008

08007d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b089      	sub	sp, #36	@ 0x24
 8007d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d1a:	4bb3      	ldr	r3, [pc, #716]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d22:	2b18      	cmp	r3, #24
 8007d24:	f200 8155 	bhi.w	8007fd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d95 	.word	0x08007d95
 8007d34:	08007fd3 	.word	0x08007fd3
 8007d38:	08007fd3 	.word	0x08007fd3
 8007d3c:	08007fd3 	.word	0x08007fd3
 8007d40:	08007fd3 	.word	0x08007fd3
 8007d44:	08007fd3 	.word	0x08007fd3
 8007d48:	08007fd3 	.word	0x08007fd3
 8007d4c:	08007fd3 	.word	0x08007fd3
 8007d50:	08007dbb 	.word	0x08007dbb
 8007d54:	08007fd3 	.word	0x08007fd3
 8007d58:	08007fd3 	.word	0x08007fd3
 8007d5c:	08007fd3 	.word	0x08007fd3
 8007d60:	08007fd3 	.word	0x08007fd3
 8007d64:	08007fd3 	.word	0x08007fd3
 8007d68:	08007fd3 	.word	0x08007fd3
 8007d6c:	08007fd3 	.word	0x08007fd3
 8007d70:	08007dc1 	.word	0x08007dc1
 8007d74:	08007fd3 	.word	0x08007fd3
 8007d78:	08007fd3 	.word	0x08007fd3
 8007d7c:	08007fd3 	.word	0x08007fd3
 8007d80:	08007fd3 	.word	0x08007fd3
 8007d84:	08007fd3 	.word	0x08007fd3
 8007d88:	08007fd3 	.word	0x08007fd3
 8007d8c:	08007fd3 	.word	0x08007fd3
 8007d90:	08007dc7 	.word	0x08007dc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d94:	4b94      	ldr	r3, [pc, #592]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007da0:	4b91      	ldr	r3, [pc, #580]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	08db      	lsrs	r3, r3, #3
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	4a90      	ldr	r2, [pc, #576]	@ (8007fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
 8007db0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007db2:	e111      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007db4:	4b8d      	ldr	r3, [pc, #564]	@ (8007fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007db6:	61bb      	str	r3, [r7, #24]
      break;
 8007db8:	e10e      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007dba:	4b8d      	ldr	r3, [pc, #564]	@ (8007ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007dbc:	61bb      	str	r3, [r7, #24]
      break;
 8007dbe:	e10b      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8007ff4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007dc2:	61bb      	str	r3, [r7, #24]
      break;
 8007dc4:	e108      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dc6:	4b88      	ldr	r3, [pc, #544]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007dd0:	4b85      	ldr	r3, [pc, #532]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd4:	091b      	lsrs	r3, r3, #4
 8007dd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ddc:	4b82      	ldr	r3, [pc, #520]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007de6:	4b80      	ldr	r3, [pc, #512]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dea:	08db      	lsrs	r3, r3, #3
 8007dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 80e1 	beq.w	8007fcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	f000 8083 	beq.w	8007f18 <HAL_RCC_GetSysClockFreq+0x204>
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	f200 80a1 	bhi.w	8007f5c <HAL_RCC_GetSysClockFreq+0x248>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_RCC_GetSysClockFreq+0x114>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d056      	beq.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e26:	e099      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e28:	4b6f      	ldr	r3, [pc, #444]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d02d      	beq.n	8007e90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e34:	4b6c      	ldr	r3, [pc, #432]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	08db      	lsrs	r3, r3, #3
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	4a6b      	ldr	r2, [pc, #428]	@ (8007fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e40:	fa22 f303 	lsr.w	r3, r2, r3
 8007e44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5e:	4b62      	ldr	r3, [pc, #392]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007e8e:	e087      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ffc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b51      	ldr	r3, [pc, #324]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ed2:	e065      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	4b40      	ldr	r3, [pc, #256]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007efa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f16:	e043      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008004 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f3e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f5a:	e021      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f82:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007fa0:	4b11      	ldr	r3, [pc, #68]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	0a5b      	lsrs	r3, r3, #9
 8007fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007faa:	3301      	adds	r3, #1
 8007fac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	ee07 3a90 	vmov	s15, r3
 8007fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc4:	ee17 3a90 	vmov	r3, s15
 8007fc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007fca:	e005      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
      break;
 8007fd0:	e002      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007fd2:	4b07      	ldr	r3, [pc, #28]	@ (8007ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007fd4:	61bb      	str	r3, [r7, #24]
      break;
 8007fd6:	bf00      	nop
  }

  return sysclockfreq;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3724      	adds	r7, #36	@ 0x24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	03d09000 	.word	0x03d09000
 8007ff0:	003d0900 	.word	0x003d0900
 8007ff4:	017d7840 	.word	0x017d7840
 8007ff8:	46000000 	.word	0x46000000
 8007ffc:	4c742400 	.word	0x4c742400
 8008000:	4a742400 	.word	0x4a742400
 8008004:	4bbebc20 	.word	0x4bbebc20

08008008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800800e:	f7ff fe81 	bl	8007d14 <HAL_RCC_GetSysClockFreq>
 8008012:	4602      	mov	r2, r0
 8008014:	4b10      	ldr	r3, [pc, #64]	@ (8008058 <HAL_RCC_GetHCLKFreq+0x50>)
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	490f      	ldr	r1, [pc, #60]	@ (800805c <HAL_RCC_GetHCLKFreq+0x54>)
 8008020:	5ccb      	ldrb	r3, [r1, r3]
 8008022:	f003 031f 	and.w	r3, r3, #31
 8008026:	fa22 f303 	lsr.w	r3, r2, r3
 800802a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800802c:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <HAL_RCC_GetHCLKFreq+0x50>)
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	4a09      	ldr	r2, [pc, #36]	@ (800805c <HAL_RCC_GetHCLKFreq+0x54>)
 8008036:	5cd3      	ldrb	r3, [r2, r3]
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	fa22 f303 	lsr.w	r3, r2, r3
 8008042:	4a07      	ldr	r2, [pc, #28]	@ (8008060 <HAL_RCC_GetHCLKFreq+0x58>)
 8008044:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008046:	4a07      	ldr	r2, [pc, #28]	@ (8008064 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800804c:	4b04      	ldr	r3, [pc, #16]	@ (8008060 <HAL_RCC_GetHCLKFreq+0x58>)
 800804e:	681b      	ldr	r3, [r3, #0]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	58024400 	.word	0x58024400
 800805c:	080260d0 	.word	0x080260d0
 8008060:	24000004 	.word	0x24000004
 8008064:	24000000 	.word	0x24000000

08008068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800806c:	f7ff ffcc 	bl	8008008 <HAL_RCC_GetHCLKFreq>
 8008070:	4602      	mov	r2, r0
 8008072:	4b06      	ldr	r3, [pc, #24]	@ (800808c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	4904      	ldr	r1, [pc, #16]	@ (8008090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800807e:	5ccb      	ldrb	r3, [r1, r3]
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	58024400 	.word	0x58024400
 8008090:	080260d0 	.word	0x080260d0

08008094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008098:	f7ff ffb6 	bl	8008008 <HAL_RCC_GetHCLKFreq>
 800809c:	4602      	mov	r2, r0
 800809e:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	4904      	ldr	r1, [pc, #16]	@ (80080bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80080aa:	5ccb      	ldrb	r3, [r1, r3]
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	58024400 	.word	0x58024400
 80080bc:	080260d0 	.word	0x080260d0

080080c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	223f      	movs	r2, #63	@ 0x3f
 80080ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080d0:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0207 	and.w	r2, r3, #7
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80080dc:	4b17      	ldr	r3, [pc, #92]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80080e8:	4b14      	ldr	r3, [pc, #80]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f003 020f 	and.w	r2, r3, #15
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80080f4:	4b11      	ldr	r3, [pc, #68]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008100:	4b0e      	ldr	r3, [pc, #56]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800810c:	4b0b      	ldr	r3, [pc, #44]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008118:	4b08      	ldr	r3, [pc, #32]	@ (800813c <HAL_RCC_GetClockConfig+0x7c>)
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008124:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <HAL_RCC_GetClockConfig+0x80>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 020f 	and.w	r2, r3, #15
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	601a      	str	r2, [r3, #0]
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	58024400 	.word	0x58024400
 8008140:	52002000 	.word	0x52002000

08008144 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008148:	b0ca      	sub	sp, #296	@ 0x128
 800814a:	af00      	add	r7, sp, #0
 800814c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008150:	2300      	movs	r3, #0
 8008152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008156:	2300      	movs	r3, #0
 8008158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008168:	2500      	movs	r5, #0
 800816a:	ea54 0305 	orrs.w	r3, r4, r5
 800816e:	d049      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008176:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800817a:	d02f      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800817c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008180:	d828      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008186:	d01a      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008188:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800818c:	d822      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008196:	d007      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008198:	e01c      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819a:	4bb8      	ldr	r3, [pc, #736]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4ab7      	ldr	r2, [pc, #732]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081a6:	e01a      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ac:	3308      	adds	r3, #8
 80081ae:	2102      	movs	r1, #2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 fc8f 	bl	8009ad4 <RCCEx_PLL2_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081bc:	e00f      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c2:	3328      	adds	r3, #40	@ 0x28
 80081c4:	2102      	movs	r1, #2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 fd36 	bl	8009c38 <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081d2:	e004      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081da:	e000      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081e6:	4ba5      	ldr	r3, [pc, #660]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081f4:	4aa1      	ldr	r2, [pc, #644]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081f6:	430b      	orrs	r3, r1
 80081f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80081fa:	e003      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008210:	f04f 0900 	mov.w	r9, #0
 8008214:	ea58 0309 	orrs.w	r3, r8, r9
 8008218:	d047      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008220:	2b04      	cmp	r3, #4
 8008222:	d82a      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008224:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	08008241 	.word	0x08008241
 8008230:	0800824f 	.word	0x0800824f
 8008234:	08008265 	.word	0x08008265
 8008238:	08008283 	.word	0x08008283
 800823c:	08008283 	.word	0x08008283
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008240:	4b8e      	ldr	r3, [pc, #568]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	4a8d      	ldr	r2, [pc, #564]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800824a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800824c:	e01a      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008252:	3308      	adds	r3, #8
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f001 fc3c 	bl	8009ad4 <RCCEx_PLL2_Config>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008262:	e00f      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008268:	3328      	adds	r3, #40	@ 0x28
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fce3 	bl	8009c38 <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008278:	e004      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008280:	e000      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800828c:	4b7b      	ldr	r3, [pc, #492]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800828e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008290:	f023 0107 	bic.w	r1, r3, #7
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829a:	4a78      	ldr	r2, [pc, #480]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800829c:	430b      	orrs	r3, r1
 800829e:	6513      	str	r3, [r2, #80]	@ 0x50
 80082a0:	e003      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80082b6:	f04f 0b00 	mov.w	fp, #0
 80082ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80082be:	d04c      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ca:	d030      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d0:	d829      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80082d4:	d02d      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082d8:	d825      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082da:	2b80      	cmp	r3, #128	@ 0x80
 80082dc:	d018      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082de:	2b80      	cmp	r3, #128	@ 0x80
 80082e0:	d821      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80082e6:	2b40      	cmp	r3, #64	@ 0x40
 80082e8:	d007      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80082ea:	e01c      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ec:	4b63      	ldr	r3, [pc, #396]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	4a62      	ldr	r2, [pc, #392]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082f8:	e01c      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	3308      	adds	r3, #8
 8008300:	2100      	movs	r1, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f001 fbe6 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800830e:	e011      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008314:	3328      	adds	r3, #40	@ 0x28
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f001 fc8d 	bl	8009c38 <RCCEx_PLL3_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008324:	e006      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800832c:	e002      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800833c:	4b4f      	ldr	r3, [pc, #316]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800833e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008340:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800834a:	4a4c      	ldr	r2, [pc, #304]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800834c:	430b      	orrs	r3, r1
 800834e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008350:	e003      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008366:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800836a:	2300      	movs	r3, #0
 800836c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008370:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008374:	460b      	mov	r3, r1
 8008376:	4313      	orrs	r3, r2
 8008378:	d053      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008386:	d035      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800838c:	d82e      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800838e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008392:	d031      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008394:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008398:	d828      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800839a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800839e:	d01a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80083a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083a4:	d822      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80083aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083ae:	d007      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80083b0:	e01c      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b2:	4b32      	ldr	r3, [pc, #200]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	4a31      	ldr	r2, [pc, #196]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083be:	e01c      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c4:	3308      	adds	r3, #8
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fb83 	bl	8009ad4 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083d4:	e011      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	3328      	adds	r3, #40	@ 0x28
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fc2a 	bl	8009c38 <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083ea:	e006      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083f2:	e002      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083f4:	bf00      	nop
 80083f6:	e000      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10b      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008402:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008406:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800840a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008412:	4a1a      	ldr	r2, [pc, #104]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008414:	430b      	orrs	r3, r1
 8008416:	6593      	str	r3, [r2, #88]	@ 0x58
 8008418:	e003      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800841e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800842e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008432:	2300      	movs	r3, #0
 8008434:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008438:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d056      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800844a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800844e:	d038      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008454:	d831      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008456:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800845a:	d034      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800845c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008460:	d82b      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008466:	d01d      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800846c:	d825      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d006      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008476:	d00a      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008478:	e01f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800847a:	bf00      	nop
 800847c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008480:	4ba2      	ldr	r3, [pc, #648]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	4aa1      	ldr	r2, [pc, #644]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800848a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800848c:	e01c      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	3308      	adds	r3, #8
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fb1c 	bl	8009ad4 <RCCEx_PLL2_Config>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084a2:	e011      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a8:	3328      	adds	r3, #40	@ 0x28
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fbc3 	bl	8009c38 <RCCEx_PLL3_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084b8:	e006      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084d0:	4b8e      	ldr	r3, [pc, #568]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084e0:	4a8a      	ldr	r2, [pc, #552]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80084fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008506:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d03a      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008516:	2b30      	cmp	r3, #48	@ 0x30
 8008518:	d01f      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800851a:	2b30      	cmp	r3, #48	@ 0x30
 800851c:	d819      	bhi.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800851e:	2b20      	cmp	r3, #32
 8008520:	d00c      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008522:	2b20      	cmp	r3, #32
 8008524:	d815      	bhi.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d019      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800852a:	2b10      	cmp	r3, #16
 800852c:	d111      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800852e:	4b77      	ldr	r3, [pc, #476]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008532:	4a76      	ldr	r2, [pc, #472]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800853a:	e011      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008540:	3308      	adds	r3, #8
 8008542:	2102      	movs	r1, #2
 8008544:	4618      	mov	r0, r3
 8008546:	f001 fac5 	bl	8009ad4 <RCCEx_PLL2_Config>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008550:	e006      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008558:	e002      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800855a:	bf00      	nop
 800855c:	e000      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800855e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008568:	4b68      	ldr	r3, [pc, #416]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800856a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008576:	4a65      	ldr	r2, [pc, #404]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008578:	430b      	orrs	r3, r1
 800857a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800857c:	e003      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008592:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008596:	2300      	movs	r3, #0
 8008598:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800859c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d051      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085b0:	d035      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085b6:	d82e      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085bc:	d031      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085c2:	d828      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c8:	d01a      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ce:	d822      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085d8:	d007      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085da:	e01c      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085dc:	4b4b      	ldr	r3, [pc, #300]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e0:	4a4a      	ldr	r2, [pc, #296]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085e8:	e01c      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ee:	3308      	adds	r3, #8
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fa6e 	bl	8009ad4 <RCCEx_PLL2_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085fe:	e011      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008604:	3328      	adds	r3, #40	@ 0x28
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fb15 	bl	8009c38 <RCCEx_PLL3_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008614:	e006      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800861c:	e002      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800862c:	4b37      	ldr	r3, [pc, #220]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800862e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008630:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800863a:	4a34      	ldr	r2, [pc, #208]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800863c:	430b      	orrs	r3, r1
 800863e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008640:	e003      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800865a:	2300      	movs	r3, #0
 800865c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008660:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008664:	460b      	mov	r3, r1
 8008666:	4313      	orrs	r3, r2
 8008668:	d056      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008674:	d033      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008676:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800867a:	d82c      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800867c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008680:	d02f      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008682:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008686:	d826      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008688:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800868c:	d02b      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800868e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008692:	d820      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008698:	d012      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800869a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800869e:	d81a      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d022      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80086a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086a8:	d115      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ae:	3308      	adds	r3, #8
 80086b0:	2101      	movs	r1, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 fa0e 	bl	8009ad4 <RCCEx_PLL2_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086be:	e015      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c4:	3328      	adds	r3, #40	@ 0x28
 80086c6:	2101      	movs	r1, #1
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fab5 	bl	8009c38 <RCCEx_PLL3_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086d4:	e00a      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086dc:	e006      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086de:	bf00      	nop
 80086e0:	e004      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086e2:	bf00      	nop
 80086e4:	e002      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086e6:	bf00      	nop
 80086e8:	e000      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10d      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008702:	4a02      	ldr	r2, [pc, #8]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008704:	430b      	orrs	r3, r1
 8008706:	6513      	str	r3, [r2, #80]	@ 0x50
 8008708:	e006      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800872e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008732:	460b      	mov	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	d055      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008744:	d033      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800874a:	d82c      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008750:	d02f      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008756:	d826      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800875c:	d02b      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800875e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008762:	d820      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008768:	d012      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800876a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800876e:	d81a      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d022      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008778:	d115      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877e:	3308      	adds	r3, #8
 8008780:	2101      	movs	r1, #1
 8008782:	4618      	mov	r0, r3
 8008784:	f001 f9a6 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800878e:	e015      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008794:	3328      	adds	r3, #40	@ 0x28
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fa4d 	bl	8009c38 <RCCEx_PLL3_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087a4:	e00a      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087ac:	e006      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ae:	bf00      	nop
 80087b0:	e004      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087b2:	bf00      	nop
 80087b4:	e002      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087b6:	bf00      	nop
 80087b8:	e000      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087c4:	4ba3      	ldr	r3, [pc, #652]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087d4:	4a9f      	ldr	r2, [pc, #636]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d6:	430b      	orrs	r3, r1
 80087d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087fe:	460b      	mov	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	d037      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800880a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800880e:	d00e      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008814:	d816      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d018      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800881a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800881e:	d111      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008820:	4b8c      	ldr	r3, [pc, #560]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008824:	4a8b      	ldr	r2, [pc, #556]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800882a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800882c:	e00f      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008832:	3308      	adds	r3, #8
 8008834:	2101      	movs	r1, #1
 8008836:	4618      	mov	r0, r3
 8008838:	f001 f94c 	bl	8009ad4 <RCCEx_PLL2_Config>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008842:	e004      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800884a:	e000      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800884c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800884e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008856:	4b7f      	ldr	r3, [pc, #508]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800885a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008864:	4a7b      	ldr	r2, [pc, #492]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008866:	430b      	orrs	r3, r1
 8008868:	6513      	str	r3, [r2, #80]	@ 0x50
 800886a:	e003      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008884:	2300      	movs	r3, #0
 8008886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800888a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800888e:	460b      	mov	r3, r1
 8008890:	4313      	orrs	r3, r2
 8008892:	d039      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800889a:	2b03      	cmp	r3, #3
 800889c:	d81c      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800889e:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088e1 	.word	0x080088e1
 80088a8:	080088b5 	.word	0x080088b5
 80088ac:	080088c3 	.word	0x080088c3
 80088b0:	080088e1 	.word	0x080088e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b4:	4b67      	ldr	r3, [pc, #412]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	4a66      	ldr	r2, [pc, #408]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088c0:	e00f      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	3308      	adds	r3, #8
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f902 	bl	8009ad4 <RCCEx_PLL2_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088ea:	4b5a      	ldr	r3, [pc, #360]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ee:	f023 0103 	bic.w	r1, r3, #3
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f8:	4a56      	ldr	r2, [pc, #344]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088fa:	430b      	orrs	r3, r1
 80088fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008914:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008918:	2300      	movs	r3, #0
 800891a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800891e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008922:	460b      	mov	r3, r1
 8008924:	4313      	orrs	r3, r2
 8008926:	f000 809f 	beq.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800892a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a4a      	ldr	r2, [pc, #296]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008936:	f7f9 fb69 	bl	800200c <HAL_GetTick>
 800893a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893e:	e00b      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008940:	f7f9 fb64 	bl	800200c <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b64      	cmp	r3, #100	@ 0x64
 800894e:	d903      	bls.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008956:	e005      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008958:	4b3f      	ldr	r3, [pc, #252]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ed      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008968:	2b00      	cmp	r3, #0
 800896a:	d179      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800896c:	4b39      	ldr	r3, [pc, #228]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800896e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008978:	4053      	eors	r3, r2
 800897a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d015      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008982:	4b34      	ldr	r3, [pc, #208]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800898a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800898e:	4b31      	ldr	r3, [pc, #196]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008992:	4a30      	ldr	r2, [pc, #192]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008998:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800899a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899e:	4a2d      	ldr	r2, [pc, #180]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089a6:	4a2b      	ldr	r2, [pc, #172]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80089ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ba:	d118      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089bc:	f7f9 fb26 	bl	800200c <HAL_GetTick>
 80089c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c4:	e00d      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c6:	f7f9 fb21 	bl	800200c <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d903      	bls.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80089e0:	e005      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0eb      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80089ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d129      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a06:	d10e      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008a08:	4b12      	ldr	r3, [pc, #72]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a18:	091a      	lsrs	r2, r3, #4
 8008a1a:	4b10      	ldr	r3, [pc, #64]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a20:	430b      	orrs	r3, r1
 8008a22:	6113      	str	r3, [r2, #16]
 8008a24:	e005      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a26:	4b0b      	ldr	r3, [pc, #44]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a30:	6113      	str	r3, [r2, #16]
 8008a32:	4b08      	ldr	r3, [pc, #32]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a42:	4a04      	ldr	r2, [pc, #16]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a48:	e00e      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008a52:	e009      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a54:	58024400 	.word	0x58024400
 8008a58:	58024800 	.word	0x58024800
 8008a5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f002 0301 	and.w	r3, r2, #1
 8008a74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4313      	orrs	r3, r2
 8008a86:	f000 8089 	beq.w	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a90:	2b28      	cmp	r3, #40	@ 0x28
 8008a92:	d86b      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008a94:	a201      	add	r2, pc, #4	@ (adr r2, 8008a9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008b75 	.word	0x08008b75
 8008aa0:	08008b6d 	.word	0x08008b6d
 8008aa4:	08008b6d 	.word	0x08008b6d
 8008aa8:	08008b6d 	.word	0x08008b6d
 8008aac:	08008b6d 	.word	0x08008b6d
 8008ab0:	08008b6d 	.word	0x08008b6d
 8008ab4:	08008b6d 	.word	0x08008b6d
 8008ab8:	08008b6d 	.word	0x08008b6d
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b6d 	.word	0x08008b6d
 8008ac4:	08008b6d 	.word	0x08008b6d
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008b6d 	.word	0x08008b6d
 8008ad0:	08008b6d 	.word	0x08008b6d
 8008ad4:	08008b6d 	.word	0x08008b6d
 8008ad8:	08008b6d 	.word	0x08008b6d
 8008adc:	08008b57 	.word	0x08008b57
 8008ae0:	08008b6d 	.word	0x08008b6d
 8008ae4:	08008b6d 	.word	0x08008b6d
 8008ae8:	08008b6d 	.word	0x08008b6d
 8008aec:	08008b6d 	.word	0x08008b6d
 8008af0:	08008b6d 	.word	0x08008b6d
 8008af4:	08008b6d 	.word	0x08008b6d
 8008af8:	08008b6d 	.word	0x08008b6d
 8008afc:	08008b75 	.word	0x08008b75
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008b6d 	.word	0x08008b6d
 8008b0c:	08008b6d 	.word	0x08008b6d
 8008b10:	08008b6d 	.word	0x08008b6d
 8008b14:	08008b6d 	.word	0x08008b6d
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b6d 	.word	0x08008b6d
 8008b24:	08008b6d 	.word	0x08008b6d
 8008b28:	08008b6d 	.word	0x08008b6d
 8008b2c:	08008b6d 	.word	0x08008b6d
 8008b30:	08008b6d 	.word	0x08008b6d
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b6d 	.word	0x08008b6d
 8008b3c:	08008b75 	.word	0x08008b75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b44:	3308      	adds	r3, #8
 8008b46:	2101      	movs	r1, #1
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 ffc3 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b54:	e00f      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b5a:	3328      	adds	r3, #40	@ 0x28
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 f86a 	bl	8009c38 <RCCEx_PLL3_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b6a:	e004      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b72:	e000      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b7e:	4bbf      	ldr	r3, [pc, #764]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b8c:	4abb      	ldr	r2, [pc, #748]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b92:	e003      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f002 0302 	and.w	r3, r2, #2
 8008ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bac:	2300      	movs	r3, #0
 8008bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008bb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	d041      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d824      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008c19 	.word	0x08008c19
 8008bd0:	08008be5 	.word	0x08008be5
 8008bd4:	08008bfb 	.word	0x08008bfb
 8008bd8:	08008c19 	.word	0x08008c19
 8008bdc:	08008c19 	.word	0x08008c19
 8008be0:	08008c19 	.word	0x08008c19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be8:	3308      	adds	r3, #8
 8008bea:	2101      	movs	r1, #1
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 ff71 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bf8:	e00f      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfe:	3328      	adds	r3, #40	@ 0x28
 8008c00:	2101      	movs	r1, #1
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 f818 	bl	8009c38 <RCCEx_PLL3_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c0e:	e004      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c16:	e000      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c22:	4b96      	ldr	r3, [pc, #600]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c26:	f023 0107 	bic.w	r1, r3, #7
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c30:	4a92      	ldr	r2, [pc, #584]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c32:	430b      	orrs	r3, r1
 8008c34:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c36:	e003      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f002 0304 	and.w	r3, r2, #4
 8008c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c50:	2300      	movs	r3, #0
 8008c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	d044      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c68:	2b05      	cmp	r3, #5
 8008c6a:	d825      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008cc1 	.word	0x08008cc1
 8008c78:	08008c8d 	.word	0x08008c8d
 8008c7c:	08008ca3 	.word	0x08008ca3
 8008c80:	08008cc1 	.word	0x08008cc1
 8008c84:	08008cc1 	.word	0x08008cc1
 8008c88:	08008cc1 	.word	0x08008cc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c90:	3308      	adds	r3, #8
 8008c92:	2101      	movs	r1, #1
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 ff1d 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ca0:	e00f      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca6:	3328      	adds	r3, #40	@ 0x28
 8008ca8:	2101      	movs	r1, #1
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 ffc4 	bl	8009c38 <RCCEx_PLL3_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cb6:	e004      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cbe:	e000      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cca:	4b6c      	ldr	r3, [pc, #432]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	f023 0107 	bic.w	r1, r3, #7
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cda:	4a68      	ldr	r2, [pc, #416]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f002 0320 	and.w	r3, r2, #32
 8008cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d04:	460b      	mov	r3, r1
 8008d06:	4313      	orrs	r3, r2
 8008d08:	d055      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d16:	d033      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d1c:	d82c      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d22:	d02f      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d28:	d826      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d2e:	d02b      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d34:	d820      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d3a:	d012      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d40:	d81a      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d022      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d4a:	d115      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	3308      	adds	r3, #8
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 febd 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d60:	e015      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d66:	3328      	adds	r3, #40	@ 0x28
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 ff64 	bl	8009c38 <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d76:	e00a      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d7e:	e006      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d80:	bf00      	nop
 8008d82:	e004      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10b      	bne.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d96:	4b39      	ldr	r3, [pc, #228]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da6:	4a35      	ldr	r2, [pc, #212]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dac:	e003      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008dcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	d058      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008de2:	d033      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008de4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008de8:	d82c      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dee:	d02f      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df4:	d826      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008df6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dfa:	d02b      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008dfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e00:	d820      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e06:	d012      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0c:	d81a      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d022      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e16:	d115      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fe57 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008e26:	4603      	mov	r3, r0
 8008e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e2c:	e015      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e32:	3328      	adds	r3, #40	@ 0x28
 8008e34:	2102      	movs	r1, #2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fefe 	bl	8009c38 <RCCEx_PLL3_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e42:	e00a      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e4a:	e006      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e4c:	bf00      	nop
 8008e4e:	e004      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e50:	bf00      	nop
 8008e52:	e002      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e54:	bf00      	nop
 8008e56:	e000      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10e      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e62:	4b06      	ldr	r3, [pc, #24]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e72:	4a02      	ldr	r2, [pc, #8]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e74:	430b      	orrs	r3, r1
 8008e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e78:	e006      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	d055      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008eb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008eb4:	d033      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008eb6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008eba:	d82c      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec0:	d02f      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec6:	d826      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ec8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ecc:	d02b      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ece:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ed2:	d820      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ed8:	d012      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ede:	d81a      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d022      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ee8:	d115      	bne.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eee:	3308      	adds	r3, #8
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fdee 	bl	8009ad4 <RCCEx_PLL2_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008efe:	e015      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f04:	3328      	adds	r3, #40	@ 0x28
 8008f06:	2102      	movs	r1, #2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fe95 	bl	8009c38 <RCCEx_PLL3_Config>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f14:	e00a      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f1c:	e006      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f1e:	bf00      	nop
 8008f20:	e004      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f22:	bf00      	nop
 8008f24:	e002      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f26:	bf00      	nop
 8008f28:	e000      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f34:	4ba1      	ldr	r3, [pc, #644]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f44:	4a9d      	ldr	r2, [pc, #628]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f4a:	e003      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f002 0308 	and.w	r3, r2, #8
 8008f60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f64:	2300      	movs	r3, #0
 8008f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4313      	orrs	r3, r2
 8008f72:	d01e      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f80:	d10c      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f86:	3328      	adds	r3, #40	@ 0x28
 8008f88:	2102      	movs	r1, #2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fe54 	bl	8009c38 <RCCEx_PLL3_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f9c:	4b87      	ldr	r3, [pc, #540]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fac:	4a83      	ldr	r2, [pc, #524]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f002 0310 	and.w	r3, r2, #16
 8008fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	d01e      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fde:	d10c      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe4:	3328      	adds	r3, #40	@ 0x28
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fe25 	bl	8009c38 <RCCEx_PLL3_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ffa:	4b70      	ldr	r3, [pc, #448]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800900a:	4a6c      	ldr	r2, [pc, #432]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800900c:	430b      	orrs	r3, r1
 800900e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800901c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009020:	2300      	movs	r3, #0
 8009022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009026:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	d03e      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800903c:	d022      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800903e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009042:	d81b      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800904c:	d00b      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800904e:	e015      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009054:	3308      	adds	r3, #8
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fd3b 	bl	8009ad4 <RCCEx_PLL2_Config>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009064:	e00f      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906a:	3328      	adds	r3, #40	@ 0x28
 800906c:	2102      	movs	r1, #2
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fde2 	bl	8009c38 <RCCEx_PLL3_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800907a:	e004      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009082:	e000      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10b      	bne.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800908e:	4b4b      	ldr	r3, [pc, #300]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009092:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800909e:	4a47      	ldr	r2, [pc, #284]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090a0:	430b      	orrs	r3, r1
 80090a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80090a4:	e003      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80090ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090bc:	2300      	movs	r3, #0
 80090be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d03b      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090d6:	d01f      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090dc:	d818      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090e2:	d003      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80090e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090e8:	d007      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80090ea:	e011      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4b33      	ldr	r3, [pc, #204]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	4a32      	ldr	r2, [pc, #200]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090f8:	e00f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fe:	3328      	adds	r3, #40	@ 0x28
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fd98 	bl	8009c38 <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800910e:	e004      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009116:	e000      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10b      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009122:	4b26      	ldr	r3, [pc, #152]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009126:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800912a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009132:	4a22      	ldr	r2, [pc, #136]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009134:	430b      	orrs	r3, r1
 8009136:	6553      	str	r3, [r2, #84]	@ 0x54
 8009138:	e003      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800914e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009150:	2300      	movs	r3, #0
 8009152:	677b      	str	r3, [r7, #116]	@ 0x74
 8009154:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009158:	460b      	mov	r3, r1
 800915a:	4313      	orrs	r3, r2
 800915c:	d034      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800916c:	d007      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800916e:	e011      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009170:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	4a11      	ldr	r2, [pc, #68]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800917a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800917c:	e00e      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009182:	3308      	adds	r3, #8
 8009184:	2102      	movs	r1, #2
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fca4 	bl	8009ad4 <RCCEx_PLL2_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009192:	e003      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800919a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10d      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b2:	4a02      	ldr	r2, [pc, #8]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091b4:	430b      	orrs	r3, r1
 80091b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091b8:	e006      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80091ba:	bf00      	nop
 80091bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091d6:	2300      	movs	r3, #0
 80091d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d00c      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e8:	3328      	adds	r3, #40	@ 0x28
 80091ea:	2102      	movs	r1, #2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fd23 	bl	8009c38 <RCCEx_PLL3_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800920a:	663b      	str	r3, [r7, #96]	@ 0x60
 800920c:	2300      	movs	r3, #0
 800920e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009210:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009214:	460b      	mov	r3, r1
 8009216:	4313      	orrs	r3, r2
 8009218:	d038      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009226:	d018      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009228:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800922c:	d811      	bhi.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800922e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009232:	d014      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009238:	d80b      	bhi.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800923e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009242:	d106      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009244:	4bc3      	ldr	r3, [pc, #780]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009248:	4ac2      	ldr	r2, [pc, #776]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800924a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800924e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009250:	e008      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009258:	e004      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800925a:	bf00      	nop
 800925c:	e002      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800925e:	bf00      	nop
 8009260:	e000      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800926c:	4bb9      	ldr	r3, [pc, #740]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800926e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009270:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800927c:	4ab5      	ldr	r2, [pc, #724]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800927e:	430b      	orrs	r3, r1
 8009280:	6553      	str	r3, [r2, #84]	@ 0x54
 8009282:	e003      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800928c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800929a:	2300      	movs	r3, #0
 800929c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800929e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80092a2:	460b      	mov	r3, r1
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d009      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092a8:	4baa      	ldr	r3, [pc, #680]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b6:	4aa7      	ldr	r2, [pc, #668]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092b8:	430b      	orrs	r3, r1
 80092ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80092c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80092ca:	2300      	movs	r3, #0
 80092cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80092ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092d2:	460b      	mov	r3, r1
 80092d4:	4313      	orrs	r3, r2
 80092d6:	d00a      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092d8:	4b9e      	ldr	r3, [pc, #632]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80092e8:	4a9a      	ldr	r2, [pc, #616]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ea:	430b      	orrs	r3, r1
 80092ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80092fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092fc:	2300      	movs	r3, #0
 80092fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009300:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009304:	460b      	mov	r3, r1
 8009306:	4313      	orrs	r3, r2
 8009308:	d009      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800930a:	4b92      	ldr	r3, [pc, #584]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800930c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800930e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009318:	4a8e      	ldr	r2, [pc, #568]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800931a:	430b      	orrs	r3, r1
 800931c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800932a:	643b      	str	r3, [r7, #64]	@ 0x40
 800932c:	2300      	movs	r3, #0
 800932e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009330:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009334:	460b      	mov	r3, r1
 8009336:	4313      	orrs	r3, r2
 8009338:	d00e      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800933a:	4b86      	ldr	r3, [pc, #536]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	4a85      	ldr	r2, [pc, #532]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009340:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009344:	6113      	str	r3, [r2, #16]
 8009346:	4b83      	ldr	r3, [pc, #524]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009348:	6919      	ldr	r1, [r3, #16]
 800934a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800934e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009352:	4a80      	ldr	r2, [pc, #512]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009354:	430b      	orrs	r3, r1
 8009356:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009364:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009366:	2300      	movs	r3, #0
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800936a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800936e:	460b      	mov	r3, r1
 8009370:	4313      	orrs	r3, r2
 8009372:	d009      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009374:	4b77      	ldr	r3, [pc, #476]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009378:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009382:	4a74      	ldr	r2, [pc, #464]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009384:	430b      	orrs	r3, r1
 8009386:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009394:	633b      	str	r3, [r7, #48]	@ 0x30
 8009396:	2300      	movs	r3, #0
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
 800939a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800939e:	460b      	mov	r3, r1
 80093a0:	4313      	orrs	r3, r2
 80093a2:	d00a      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a4:	4b6b      	ldr	r3, [pc, #428]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093b4:	4a67      	ldr	r2, [pc, #412]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093b6:	430b      	orrs	r3, r1
 80093b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	2100      	movs	r1, #0
 80093c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	d011      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	3308      	adds	r3, #8
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fb78 	bl	8009ad4 <RCCEx_PLL2_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	2100      	movs	r1, #0
 8009404:	6239      	str	r1, [r7, #32]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	627b      	str	r3, [r7, #36]	@ 0x24
 800940c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009410:	460b      	mov	r3, r1
 8009412:	4313      	orrs	r3, r2
 8009414:	d011      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941a:	3308      	adds	r3, #8
 800941c:	2101      	movs	r1, #1
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fb58 	bl	8009ad4 <RCCEx_PLL2_Config>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800942a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800943a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	2100      	movs	r1, #0
 8009444:	61b9      	str	r1, [r7, #24]
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009450:	460b      	mov	r3, r1
 8009452:	4313      	orrs	r3, r2
 8009454:	d011      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945a:	3308      	adds	r3, #8
 800945c:	2102      	movs	r1, #2
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fb38 	bl	8009ad4 <RCCEx_PLL2_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800946a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	2100      	movs	r1, #0
 8009484:	6139      	str	r1, [r7, #16]
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009490:	460b      	mov	r3, r1
 8009492:	4313      	orrs	r3, r2
 8009494:	d011      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949a:	3328      	adds	r3, #40	@ 0x28
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fbca 	bl	8009c38 <RCCEx_PLL3_Config>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80094aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	2100      	movs	r1, #0
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094d0:	460b      	mov	r3, r1
 80094d2:	4313      	orrs	r3, r2
 80094d4:	d011      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094da:	3328      	adds	r3, #40	@ 0x28
 80094dc:	2101      	movs	r1, #1
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fbaa 	bl	8009c38 <RCCEx_PLL3_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80094ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	2100      	movs	r1, #0
 8009504:	6039      	str	r1, [r7, #0]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	607b      	str	r3, [r7, #4]
 800950c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009510:	460b      	mov	r3, r1
 8009512:	4313      	orrs	r3, r2
 8009514:	d011      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951a:	3328      	adds	r3, #40	@ 0x28
 800951c:	2102      	movs	r1, #2
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fb8a 	bl	8009c38 <RCCEx_PLL3_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800952a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800953a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
}
 8009548:	4618      	mov	r0, r3
 800954a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800954e:	46bd      	mov	sp, r7
 8009550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009554:	58024400 	.word	0x58024400

08009558 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800955c:	f7fe fd54 	bl	8008008 <HAL_RCC_GetHCLKFreq>
 8009560:	4602      	mov	r2, r0
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	091b      	lsrs	r3, r3, #4
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	4904      	ldr	r1, [pc, #16]	@ (8009580 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800956e:	5ccb      	ldrb	r3, [r1, r3]
 8009570:	f003 031f 	and.w	r3, r3, #31
 8009574:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009578:	4618      	mov	r0, r3
 800957a:	bd80      	pop	{r7, pc}
 800957c:	58024400 	.word	0x58024400
 8009580:	080260d0 	.word	0x080260d0

08009584 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009584:	b480      	push	{r7}
 8009586:	b089      	sub	sp, #36	@ 0x24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800958c:	4ba1      	ldr	r3, [pc, #644]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009596:	4b9f      	ldr	r3, [pc, #636]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	0b1b      	lsrs	r3, r3, #12
 800959c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a6:	091b      	lsrs	r3, r3, #4
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80095ae:	4b99      	ldr	r3, [pc, #612]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b2:	08db      	lsrs	r3, r3, #3
 80095b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8111 	beq.w	80097f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	f000 8083 	beq.w	80096e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	f200 80a1 	bhi.w	8009724 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d056      	beq.n	800969c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80095ee:	e099      	b.n	8009724 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f0:	4b88      	ldr	r3, [pc, #544]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d02d      	beq.n	8009658 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fc:	4b85      	ldr	r3, [pc, #532]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	08db      	lsrs	r3, r3, #3
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	4a84      	ldr	r2, [pc, #528]	@ (8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
 800960c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b7b      	ldr	r3, [pc, #492]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a03 	vldr	s12, [r7, #12]
 800963a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800981c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009656:	e087      	b.n	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009820 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966a:	4b6a      	ldr	r3, [pc, #424]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800966c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967a:	ed97 6a03 	vldr	s12, [r7, #12]
 800967e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800981c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969a:	e065      	b.n	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ae:	4b59      	ldr	r3, [pc, #356]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096be:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800981c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096de:	e043      	b.n	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80096ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f2:	4b48      	ldr	r3, [pc, #288]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009702:	ed97 6a03 	vldr	s12, [r7, #12]
 8009706:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800981c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800970a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009722:	e021      	b.n	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009736:	4b37      	ldr	r3, [pc, #220]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009746:	ed97 6a03 	vldr	s12, [r7, #12]
 800974a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800981c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800974e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009766:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009768:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	0a5b      	lsrs	r3, r3, #9
 800976e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800977e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009782:	edd7 6a07 	vldr	s13, [r7, #28]
 8009786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978e:	ee17 2a90 	vmov	r2, s15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009796:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097bc:	ee17 2a90 	vmov	r2, s15
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80097c4:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c8:	0e1b      	lsrs	r3, r3, #24
 80097ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097de:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ea:	ee17 2a90 	vmov	r2, s15
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80097f2:	e008      	b.n	8009806 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	609a      	str	r2, [r3, #8]
}
 8009806:	bf00      	nop
 8009808:	3724      	adds	r7, #36	@ 0x24
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	58024400 	.word	0x58024400
 8009818:	03d09000 	.word	0x03d09000
 800981c:	46000000 	.word	0x46000000
 8009820:	4c742400 	.word	0x4c742400
 8009824:	4a742400 	.word	0x4a742400
 8009828:	4bbebc20 	.word	0x4bbebc20

0800982c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800982c:	b480      	push	{r7}
 800982e:	b089      	sub	sp, #36	@ 0x24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009834:	4ba1      	ldr	r3, [pc, #644]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800983e:	4b9f      	ldr	r3, [pc, #636]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	0d1b      	lsrs	r3, r3, #20
 8009844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009848:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800984a:	4b9c      	ldr	r3, [pc, #624]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800984c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009856:	4b99      	ldr	r3, [pc, #612]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800985a:	08db      	lsrs	r3, r3, #3
 800985c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 8111 	beq.w	8009a9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b02      	cmp	r3, #2
 800987e:	f000 8083 	beq.w	8009988 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b02      	cmp	r3, #2
 8009886:	f200 80a1 	bhi.w	80099cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d056      	beq.n	8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009896:	e099      	b.n	80099cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009898:	4b88      	ldr	r3, [pc, #544]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0320 	and.w	r3, r3, #32
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d02d      	beq.n	8009900 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098a4:	4b85      	ldr	r3, [pc, #532]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	08db      	lsrs	r3, r3, #3
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	4a84      	ldr	r2, [pc, #528]	@ (8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098b0:	fa22 f303 	lsr.w	r3, r2, r3
 80098b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	ee07 3a90 	vmov	s15, r3
 80098bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ce:	4b7b      	ldr	r3, [pc, #492]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098de:	ed97 6a03 	vldr	s12, [r7, #12]
 80098e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098fe:	e087      	b.n	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800990e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009912:	4b6a      	ldr	r3, [pc, #424]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009922:	ed97 6a03 	vldr	s12, [r7, #12]
 8009926:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800992a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009942:	e065      	b.n	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009956:	4b59      	ldr	r3, [pc, #356]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009966:	ed97 6a03 	vldr	s12, [r7, #12]
 800996a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800996e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800997a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009986:	e043      	b.n	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009992:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800999a:	4b48      	ldr	r3, [pc, #288]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ca:	e021      	b.n	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099de:	4b37      	ldr	r3, [pc, #220]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80099f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a10:	4b2a      	ldr	r3, [pc, #168]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a14:	0a5b      	lsrs	r3, r3, #9
 8009a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a36:	ee17 2a90 	vmov	r2, s15
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a48:	ee07 3a90 	vmov	s15, r3
 8009a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a64:	ee17 2a90 	vmov	r2, s15
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009a6c:	4b13      	ldr	r3, [pc, #76]	@ (8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a70:	0e1b      	lsrs	r3, r3, #24
 8009a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a92:	ee17 2a90 	vmov	r2, s15
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a9a:	e008      	b.n	8009aae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	609a      	str	r2, [r3, #8]
}
 8009aae:	bf00      	nop
 8009ab0:	3724      	adds	r7, #36	@ 0x24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	58024400 	.word	0x58024400
 8009ac0:	03d09000 	.word	0x03d09000
 8009ac4:	46000000 	.word	0x46000000
 8009ac8:	4c742400 	.word	0x4c742400
 8009acc:	4a742400 	.word	0x4a742400
 8009ad0:	4bbebc20 	.word	0x4bbebc20

08009ad4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ae2:	4b53      	ldr	r3, [pc, #332]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d101      	bne.n	8009af2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e099      	b.n	8009c26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009af2:	4b4f      	ldr	r3, [pc, #316]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009afe:	f7f8 fa85 	bl	800200c <HAL_GetTick>
 8009b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b04:	e008      	b.n	8009b18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b06:	f7f8 fa81 	bl	800200c <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d901      	bls.n	8009b18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e086      	b.n	8009c26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b18:	4b45      	ldr	r3, [pc, #276]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1f0      	bne.n	8009b06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b24:	4b42      	ldr	r3, [pc, #264]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	031b      	lsls	r3, r3, #12
 8009b32:	493f      	ldr	r1, [pc, #252]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	025b      	lsls	r3, r3, #9
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	041b      	lsls	r3, r3, #16
 8009b56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	061b      	lsls	r3, r3, #24
 8009b64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b68:	4931      	ldr	r1, [pc, #196]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b6e:	4b30      	ldr	r3, [pc, #192]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	492d      	ldr	r1, [pc, #180]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b80:	4b2b      	ldr	r3, [pc, #172]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b84:	f023 0220 	bic.w	r2, r3, #32
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	4928      	ldr	r1, [pc, #160]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b92:	4b27      	ldr	r3, [pc, #156]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b96:	4a26      	ldr	r2, [pc, #152]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	f023 0310 	bic.w	r3, r3, #16
 8009b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b9e:	4b24      	ldr	r3, [pc, #144]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ba2:	4b24      	ldr	r3, [pc, #144]	@ (8009c34 <RCCEx_PLL2_Config+0x160>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	69d2      	ldr	r2, [r2, #28]
 8009baa:	00d2      	lsls	r2, r2, #3
 8009bac:	4920      	ldr	r1, [pc, #128]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bb8:	f043 0310 	orr.w	r3, r3, #16
 8009bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d106      	bne.n	8009bd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc8:	4a19      	ldr	r2, [pc, #100]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bd0:	e00f      	b.n	8009bf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d106      	bne.n	8009be6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009bd8:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bdc:	4a14      	ldr	r2, [pc, #80]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009be2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009be4:	e005      	b.n	8009bf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009be6:	4b12      	ldr	r3, [pc, #72]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bea:	4a11      	ldr	r2, [pc, #68]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009bf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bfe:	f7f8 fa05 	bl	800200c <HAL_GetTick>
 8009c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c04:	e008      	b.n	8009c18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c06:	f7f8 fa01 	bl	800200c <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d901      	bls.n	8009c18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e006      	b.n	8009c26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c18:	4b05      	ldr	r3, [pc, #20]	@ (8009c30 <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0f0      	beq.n	8009c06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	58024400 	.word	0x58024400
 8009c34:	ffff0007 	.word	0xffff0007

08009c38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c46:	4b53      	ldr	r3, [pc, #332]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d101      	bne.n	8009c56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e099      	b.n	8009d8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c56:	4b4f      	ldr	r3, [pc, #316]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c62:	f7f8 f9d3 	bl	800200c <HAL_GetTick>
 8009c66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c68:	e008      	b.n	8009c7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c6a:	f7f8 f9cf 	bl	800200c <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e086      	b.n	8009d8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c7c:	4b45      	ldr	r3, [pc, #276]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1f0      	bne.n	8009c6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c88:	4b42      	ldr	r3, [pc, #264]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	051b      	lsls	r3, r3, #20
 8009c96:	493f      	ldr	r1, [pc, #252]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	025b      	lsls	r3, r3, #9
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	061b      	lsls	r3, r3, #24
 8009cc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ccc:	4931      	ldr	r1, [pc, #196]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009cd2:	4b30      	ldr	r3, [pc, #192]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	492d      	ldr	r1, [pc, #180]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	4928      	ldr	r1, [pc, #160]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009cf6:	4b27      	ldr	r3, [pc, #156]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfa:	4a26      	ldr	r2, [pc, #152]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d02:	4b24      	ldr	r3, [pc, #144]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d06:	4b24      	ldr	r3, [pc, #144]	@ (8009d98 <RCCEx_PLL3_Config+0x160>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	69d2      	ldr	r2, [r2, #28]
 8009d0e:	00d2      	lsls	r2, r2, #3
 8009d10:	4920      	ldr	r1, [pc, #128]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d16:	4b1f      	ldr	r3, [pc, #124]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d106      	bne.n	8009d36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d28:	4b1a      	ldr	r3, [pc, #104]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	4a19      	ldr	r2, [pc, #100]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d34:	e00f      	b.n	8009d56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d106      	bne.n	8009d4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d3c:	4b15      	ldr	r3, [pc, #84]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d40:	4a14      	ldr	r2, [pc, #80]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d48:	e005      	b.n	8009d56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d4a:	4b12      	ldr	r3, [pc, #72]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4e:	4a11      	ldr	r2, [pc, #68]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d56:	4b0f      	ldr	r3, [pc, #60]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d62:	f7f8 f953 	bl	800200c <HAL_GetTick>
 8009d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d68:	e008      	b.n	8009d7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d6a:	f7f8 f94f 	bl	800200c <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d901      	bls.n	8009d7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e006      	b.n	8009d8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d7c:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0f0      	beq.n	8009d6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	58024400 	.word	0x58024400
 8009d98:	ffff0007 	.word	0xffff0007

08009d9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e158      	b.n	800a060 <HAL_SPI_Init+0x2c4>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a5f      	ldr	r2, [pc, #380]	@ (8009f38 <HAL_SPI_Init+0x19c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d00f      	beq.n	8009dde <HAL_SPI_Init+0x42>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8009f3c <HAL_SPI_Init+0x1a0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d00a      	beq.n	8009dde <HAL_SPI_Init+0x42>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8009f40 <HAL_SPI_Init+0x1a4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d005      	beq.n	8009dde <HAL_SPI_Init+0x42>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b0f      	cmp	r3, #15
 8009dd8:	d901      	bls.n	8009dde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e140      	b.n	800a060 <HAL_SPI_Init+0x2c4>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fdd8 	bl	800b994 <SPI_GetPacketSize>
 8009de4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a53      	ldr	r2, [pc, #332]	@ (8009f38 <HAL_SPI_Init+0x19c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00c      	beq.n	8009e0a <HAL_SPI_Init+0x6e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a51      	ldr	r2, [pc, #324]	@ (8009f3c <HAL_SPI_Init+0x1a0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d007      	beq.n	8009e0a <HAL_SPI_Init+0x6e>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a50      	ldr	r2, [pc, #320]	@ (8009f40 <HAL_SPI_Init+0x1a4>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d002      	beq.n	8009e0a <HAL_SPI_Init+0x6e>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b08      	cmp	r3, #8
 8009e08:	d811      	bhi.n	8009e2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8009f38 <HAL_SPI_Init+0x19c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d009      	beq.n	8009e28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a48      	ldr	r2, [pc, #288]	@ (8009f3c <HAL_SPI_Init+0x1a0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d004      	beq.n	8009e28 <HAL_SPI_Init+0x8c>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a47      	ldr	r2, [pc, #284]	@ (8009f40 <HAL_SPI_Init+0x1a4>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d104      	bne.n	8009e32 <HAL_SPI_Init+0x96>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d901      	bls.n	8009e32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e116      	b.n	800a060 <HAL_SPI_Init+0x2c4>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d135      	bne.n	8009eaa <HAL_SPI_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a3e      	ldr	r2, [pc, #248]	@ (8009f44 <HAL_SPI_Init+0x1a8>)
 8009e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a3d      	ldr	r2, [pc, #244]	@ (8009f48 <HAL_SPI_Init+0x1ac>)
 8009e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a3c      	ldr	r2, [pc, #240]	@ (8009f4c <HAL_SPI_Init+0x1b0>)
 8009e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a3b      	ldr	r2, [pc, #236]	@ (8009f50 <HAL_SPI_Init+0x1b4>)
 8009e62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a3a      	ldr	r2, [pc, #232]	@ (8009f54 <HAL_SPI_Init+0x1b8>)
 8009e6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a39      	ldr	r2, [pc, #228]	@ (8009f58 <HAL_SPI_Init+0x1bc>)
 8009e72:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a38      	ldr	r2, [pc, #224]	@ (8009f5c <HAL_SPI_Init+0x1c0>)
 8009e7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a37      	ldr	r2, [pc, #220]	@ (8009f60 <HAL_SPI_Init+0x1c4>)
 8009e82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a36      	ldr	r2, [pc, #216]	@ (8009f64 <HAL_SPI_Init+0x1c8>)
 8009e8a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    if (hspi->MspInitCallback == NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <HAL_SPI_Init+0x104>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a33      	ldr	r2, [pc, #204]	@ (8009f68 <HAL_SPI_Init+0x1cc>)
 8009e9c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2202      	movs	r2, #2
 8009eae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 0201 	bic.w	r2, r2, #1
 8009ec0:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009ecc:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ed6:	d119      	bne.n	8009f0c <HAL_SPI_Init+0x170>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ee0:	d103      	bne.n	8009eea <HAL_SPI_Init+0x14e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <HAL_SPI_Init+0x160>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10c      	bne.n	8009f0c <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009efa:	d107      	bne.n	8009f0c <HAL_SPI_Init+0x170>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f0a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d029      	beq.n	8009f6c <HAL_SPI_Init+0x1d0>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b06      	cmp	r3, #6
 8009f1e:	d925      	bls.n	8009f6c <HAL_SPI_Init+0x1d0>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e021      	b.n	8009f7c <HAL_SPI_Init+0x1e0>
 8009f38:	40013000 	.word	0x40013000
 8009f3c:	40003800 	.word	0x40003800
 8009f40:	40003c00 	.word	0x40003c00
 8009f44:	0800b525 	.word	0x0800b525
 8009f48:	0800b539 	.word	0x0800b539
 8009f4c:	0800b54d 	.word	0x0800b54d
 8009f50:	0800b561 	.word	0x0800b561
 8009f54:	0800b575 	.word	0x0800b575
 8009f58:	0800b589 	.word	0x0800b589
 8009f5c:	0800b59d 	.word	0x0800b59d
 8009f60:	0800b5b1 	.word	0x0800b5b1
 8009f64:	0800b5c5 	.word	0x0800b5c5
 8009f68:	080012fd 	.word	0x080012fd
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f7a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	69da      	ldr	r2, [r3, #28]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f84:	431a      	orrs	r2, r3
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f8e:	ea42 0103 	orr.w	r1, r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fdc:	ea42 0103 	orr.w	r1, r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d113      	bne.n	800a01c <HAL_SPI_Init+0x280>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a006:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a01a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0201 	bic.w	r2, r2, #1
 800a02a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <HAL_SPI_Init+0x2b2>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_SPI_RegisterCallback>:
  *         to register callbacks for HAL_SPI_MSPINIT_CB_ID and HAL_SPI_MSPDEINIT_CB_ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	460b      	mov	r3, r1
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d109      	bne.n	800a094 <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a086:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e08f      	b.n	800a1b4 <HAL_SPI_RegisterCallback+0x14c>
  }

  if (HAL_SPI_STATE_READY == hspi->State)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d15d      	bne.n	800a15c <HAL_SPI_RegisterCallback+0xf4>
  {
    switch (CallbackID)
 800a0a0:	7afb      	ldrb	r3, [r7, #11]
 800a0a2:	2b0a      	cmp	r3, #10
 800a0a4:	d84f      	bhi.n	800a146 <HAL_SPI_RegisterCallback+0xde>
 800a0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <HAL_SPI_RegisterCallback+0x44>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a0d9 	.word	0x0800a0d9
 800a0b0:	0800a0e3 	.word	0x0800a0e3
 800a0b4:	0800a0ed 	.word	0x0800a0ed
 800a0b8:	0800a0f7 	.word	0x0800a0f7
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a10b 	.word	0x0800a10b
 800a0c4:	0800a115 	.word	0x0800a115
 800a0c8:	0800a11f 	.word	0x0800a11f
 800a0cc:	0800a129 	.word	0x0800a129
 800a0d0:	0800a133 	.word	0x0800a133
 800a0d4:	0800a13d 	.word	0x0800a13d
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a0e0:	e067      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a0ea:	e062      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a0f4:	e05d      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a0fe:	e058      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a108:	e053      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a112:	e04e      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a11c:	e049      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a126:	e044      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_SUSPEND_CB_ID :
        hspi->SuspendCallback = pCallback;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a130:	e03f      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a13a:	e03a      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a144:	e035      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a14c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Return error status */
        status =  HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	75fb      	strb	r3, [r7, #23]
        break;
 800a15a:	e02a      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11a      	bne.n	800a19e <HAL_SPI_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	2b09      	cmp	r3, #9
 800a16c:	d002      	beq.n	800a174 <HAL_SPI_RegisterCallback+0x10c>
 800a16e:	2b0a      	cmp	r3, #10
 800a170:	d005      	beq.n	800a17e <HAL_SPI_RegisterCallback+0x116>
 800a172:	e009      	b.n	800a188 <HAL_SPI_RegisterCallback+0x120>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a17c:	e019      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a186:	e014      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a18e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Return error status */
        status =  HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
        break;
 800a19c:	e009      	b.n	800a1b2 <HAL_SPI_RegisterCallback+0x14a>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return error status */
    status =  HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3320      	adds	r3, #32
 800a1d6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1d8:	f7f7 ff18 	bl	800200c <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d001      	beq.n	800a1ee <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e1d1      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <HAL_SPI_Transmit+0x3a>
 800a1f4:	88fb      	ldrh	r3, [r7, #6]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e1c9      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_SPI_Transmit+0x4c>
 800a208:	2302      	movs	r3, #2
 800a20a:	e1c2      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2203      	movs	r2, #3
 800a218:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	88fa      	ldrh	r2, [r7, #6]
 800a22e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	88fa      	ldrh	r2, [r7, #6]
 800a236:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a264:	d108      	bne.n	800a278 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	e009      	b.n	800a28c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a28a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	4b96      	ldr	r3, [pc, #600]	@ (800a4ec <HAL_SPI_Transmit+0x32c>)
 800a294:	4013      	ands	r3, r2
 800a296:	88f9      	ldrh	r1, [r7, #6]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	6812      	ldr	r2, [r2, #0]
 800a29c:	430b      	orrs	r3, r1
 800a29e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0201 	orr.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2b8:	d107      	bne.n	800a2ca <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b0f      	cmp	r3, #15
 800a2d0:	d947      	bls.n	800a362 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a2d2:	e03f      	b.n	800a354 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d114      	bne.n	800a30c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6812      	ldr	r2, [r2, #0]
 800a2ec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2f2:	1d1a      	adds	r2, r3, #4
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	3b01      	subs	r3, #1
 800a302:	b29a      	uxth	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a30a:	e023      	b.n	800a354 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a30c:	f7f7 fe7e 	bl	800200c <HAL_GetTick>
 800a310:	4602      	mov	r2, r0
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d803      	bhi.n	800a324 <HAL_SPI_Transmit+0x164>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a322:	d102      	bne.n	800a32a <HAL_SPI_Transmit+0x16a>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d114      	bne.n	800a354 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 fa64 	bl	800b7f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a336:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e11e      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1b9      	bne.n	800a2d4 <HAL_SPI_Transmit+0x114>
 800a360:	e0f1      	b.n	800a546 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	2b07      	cmp	r3, #7
 800a368:	f240 80e6 	bls.w	800a538 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a36c:	e05d      	b.n	800a42a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	f003 0302 	and.w	r3, r3, #2
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d132      	bne.n	800a3e2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d918      	bls.n	800a3ba <HAL_SPI_Transmit+0x1fa>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d014      	beq.n	800a3ba <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6812      	ldr	r2, [r2, #0]
 800a39a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3a0:	1d1a      	adds	r2, r3, #4
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3b02      	subs	r3, #2
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3b8:	e037      	b.n	800a42a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3be:	881a      	ldrh	r2, [r3, #0]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3c8:	1c9a      	adds	r2, r3, #2
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3e0:	e023      	b.n	800a42a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3e2:	f7f7 fe13 	bl	800200c <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d803      	bhi.n	800a3fa <HAL_SPI_Transmit+0x23a>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3f8:	d102      	bne.n	800a400 <HAL_SPI_Transmit+0x240>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d114      	bne.n	800a42a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f001 f9f9 	bl	800b7f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a40c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e0b3      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a430:	b29b      	uxth	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d19b      	bne.n	800a36e <HAL_SPI_Transmit+0x1ae>
 800a436:	e086      	b.n	800a546 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b02      	cmp	r3, #2
 800a444:	d154      	bne.n	800a4f0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d918      	bls.n	800a484 <HAL_SPI_Transmit+0x2c4>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a456:	2b40      	cmp	r3, #64	@ 0x40
 800a458:	d914      	bls.n	800a484 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a46a:	1d1a      	adds	r2, r3, #4
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a476:	b29b      	uxth	r3, r3
 800a478:	3b04      	subs	r3, #4
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a482:	e059      	b.n	800a538 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d917      	bls.n	800a4c0 <HAL_SPI_Transmit+0x300>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a494:	2b00      	cmp	r3, #0
 800a496:	d013      	beq.n	800a4c0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4a6:	1c9a      	adds	r2, r3, #2
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3b02      	subs	r3, #2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a4be:	e03b      	b.n	800a538 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3320      	adds	r3, #32
 800a4ca:	7812      	ldrb	r2, [r2, #0]
 800a4cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a4ea:	e025      	b.n	800a538 <HAL_SPI_Transmit+0x378>
 800a4ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4f0:	f7f7 fd8c 	bl	800200c <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d803      	bhi.n	800a508 <HAL_SPI_Transmit+0x348>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a506:	d102      	bne.n	800a50e <HAL_SPI_Transmit+0x34e>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d114      	bne.n	800a538 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f001 f972 	bl	800b7f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a51a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e02c      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	f47f af79 	bne.w	800a438 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2200      	movs	r2, #0
 800a54e:	2108      	movs	r1, #8
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f001 f9f1 	bl	800b938 <SPI_WaitOnFlagUntilTimeout>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d007      	beq.n	800a56c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a562:	f043 0220 	orr.w	r2, r3, #32
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f001 f943 	bl	800b7f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e000      	b.n	800a592 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a590:	2300      	movs	r3, #0
  }
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop

0800a59c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	603b      	str	r3, [r7, #0]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3330      	adds	r3, #48	@ 0x30
 800a5be:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5c0:	f7f7 fd24 	bl	800200c <HAL_GetTick>
 800a5c4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d001      	beq.n	800a5d6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e250      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <HAL_SPI_Receive+0x46>
 800a5dc:	88fb      	ldrh	r3, [r7, #6]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e248      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_SPI_Receive+0x58>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e241      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2204      	movs	r2, #4
 800a600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	88fa      	ldrh	r2, [r7, #6]
 800a616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a64c:	d108      	bne.n	800a660 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	e009      	b.n	800a674 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a672:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	4b95      	ldr	r3, [pc, #596]	@ (800a8d0 <HAL_SPI_Receive+0x334>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	88f9      	ldrh	r1, [r7, #6]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	430b      	orrs	r3, r1
 800a686:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f042 0201 	orr.w	r2, r2, #1
 800a696:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6a0:	d107      	bne.n	800a6b2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b0f      	cmp	r3, #15
 800a6b8:	d96c      	bls.n	800a794 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a6ba:	e064      	b.n	800a786 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d114      	bne.n	800a6fc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a6dc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6e2:	1d1a      	adds	r2, r3, #4
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a6fa:	e044      	b.n	800a786 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a702:	b29b      	uxth	r3, r3
 800a704:	8bfa      	ldrh	r2, [r7, #30]
 800a706:	429a      	cmp	r2, r3
 800a708:	d919      	bls.n	800a73e <HAL_SPI_Receive+0x1a2>
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d014      	beq.n	800a73e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a71c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a71e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a730:	b29b      	uxth	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	b29a      	uxth	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a73c:	e023      	b.n	800a786 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a73e:	f7f7 fc65 	bl	800200c <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d803      	bhi.n	800a756 <HAL_SPI_Receive+0x1ba>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a754:	d102      	bne.n	800a75c <HAL_SPI_Receive+0x1c0>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d114      	bne.n	800a786 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f001 f84b 	bl	800b7f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e178      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d194      	bne.n	800a6bc <HAL_SPI_Receive+0x120>
 800a792:	e15e      	b.n	800aa52 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b07      	cmp	r3, #7
 800a79a:	f240 8153 	bls.w	800aa44 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a79e:	e08f      	b.n	800a8c0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d114      	bne.n	800a7e0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	8812      	ldrh	r2, [r2, #0]
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c6:	1c9a      	adds	r2, r3, #2
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a7de:	e06f      	b.n	800a8c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	8bfa      	ldrh	r2, [r7, #30]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d924      	bls.n	800a838 <HAL_SPI_Receive+0x29c>
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01f      	beq.n	800a838 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7fc:	69ba      	ldr	r2, [r7, #24]
 800a7fe:	8812      	ldrh	r2, [r2, #0]
 800a800:	b292      	uxth	r2, r2
 800a802:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a808:	1c9a      	adds	r2, r3, #2
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	8812      	ldrh	r2, [r2, #0]
 800a816:	b292      	uxth	r2, r2
 800a818:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a81e:	1c9a      	adds	r2, r3, #2
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	3b02      	subs	r3, #2
 800a82e:	b29a      	uxth	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a836:	e043      	b.n	800a8c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2b01      	cmp	r3, #1
 800a842:	d119      	bne.n	800a878 <HAL_SPI_Receive+0x2dc>
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d014      	beq.n	800a878 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	8812      	ldrh	r2, [r2, #0]
 800a856:	b292      	uxth	r2, r2
 800a858:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a85e:	1c9a      	adds	r2, r3, #2
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	3b01      	subs	r3, #1
 800a86e:	b29a      	uxth	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a876:	e023      	b.n	800a8c0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a878:	f7f7 fbc8 	bl	800200c <HAL_GetTick>
 800a87c:	4602      	mov	r2, r0
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d803      	bhi.n	800a890 <HAL_SPI_Receive+0x2f4>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a88e:	d102      	bne.n	800a896 <HAL_SPI_Receive+0x2fa>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d114      	bne.n	800a8c0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 ffae 	bl	800b7f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e0db      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f47f af69 	bne.w	800a7a0 <HAL_SPI_Receive+0x204>
 800a8ce:	e0c0      	b.n	800aa52 <HAL_SPI_Receive+0x4b6>
 800a8d0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d117      	bne.n	800a91a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8f6:	7812      	ldrb	r2, [r2, #0]
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	3b01      	subs	r3, #1
 800a910:	b29a      	uxth	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a918:	e094      	b.n	800aa44 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a920:	b29b      	uxth	r3, r3
 800a922:	8bfa      	ldrh	r2, [r7, #30]
 800a924:	429a      	cmp	r2, r3
 800a926:	d946      	bls.n	800a9b6 <HAL_SPI_Receive+0x41a>
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d041      	beq.n	800a9b6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a93e:	7812      	ldrb	r2, [r2, #0]
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a95a:	7812      	ldrb	r2, [r2, #0]
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a976:	7812      	ldrb	r2, [r2, #0]
 800a978:	b2d2      	uxtb	r2, r2
 800a97a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a992:	7812      	ldrb	r2, [r2, #0]
 800a994:	b2d2      	uxtb	r2, r2
 800a996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	3b04      	subs	r3, #4
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a9b4:	e046      	b.n	800aa44 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d81c      	bhi.n	800a9fc <HAL_SPI_Receive+0x460>
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d017      	beq.n	800a9fc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9d8:	7812      	ldrb	r2, [r2, #0]
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a9fa:	e023      	b.n	800aa44 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9fc:	f7f7 fb06 	bl	800200c <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d803      	bhi.n	800aa14 <HAL_SPI_Receive+0x478>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa12:	d102      	bne.n	800aa1a <HAL_SPI_Receive+0x47e>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d114      	bne.n	800aa44 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 feec 	bl	800b7f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e019      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f47f af41 	bne.w	800a8d4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 fed0 	bl	800b7f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e000      	b.n	800aa78 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800aa76:	2300      	movs	r3, #0
  }
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3720      	adds	r7, #32
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d001      	beq.n	800aa9e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	e126      	b.n	800acec <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <HAL_SPI_Transmit_DMA+0x2a>
 800aaa4:	88fb      	ldrh	r3, [r7, #6]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e11e      	b.n	800acec <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d101      	bne.n	800aabc <HAL_SPI_Transmit_DMA+0x3c>
 800aab8:	2302      	movs	r3, #2
 800aaba:	e117      	b.n	800acec <HAL_SPI_Transmit_DMA+0x26c>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2203      	movs	r2, #3
 800aac8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	88fa      	ldrh	r2, [r7, #6]
 800aade:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	88fa      	ldrh	r2, [r7, #6]
 800aae6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ab14:	d108      	bne.n	800ab28 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	e009      	b.n	800ab3c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ab3a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	2b0f      	cmp	r3, #15
 800ab42:	d905      	bls.n	800ab50 <HAL_SPI_Transmit_DMA+0xd0>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab4e:	d10f      	bne.n	800ab70 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ab54:	2b07      	cmp	r3, #7
 800ab56:	d911      	bls.n	800ab7c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab62:	d00b      	beq.n	800ab7c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab68:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ab6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab6e:	d005      	beq.n	800ab7c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e0b7      	b.n	800acec <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	2b07      	cmp	r3, #7
 800ab82:	d820      	bhi.n	800abc6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab8e:	d109      	bne.n	800aba4 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	3301      	adds	r3, #1
 800ab9a:	105b      	asrs	r3, r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abae:	d11e      	bne.n	800abee <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3303      	adds	r3, #3
 800abba:	109b      	asrs	r3, r3, #2
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800abc4:	e013      	b.n	800abee <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	2b0f      	cmp	r3, #15
 800abcc:	d80f      	bhi.n	800abee <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abd8:	d109      	bne.n	800abee <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	3301      	adds	r3, #1
 800abe4:	105b      	asrs	r3, r3, #1
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abf2:	4a40      	ldr	r2, [pc, #256]	@ (800acf4 <HAL_SPI_Transmit_DMA+0x274>)
 800abf4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abfa:	4a3f      	ldr	r2, [pc, #252]	@ (800acf8 <HAL_SPI_Transmit_DMA+0x278>)
 800abfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac02:	4a3e      	ldr	r2, [pc, #248]	@ (800acfc <HAL_SPI_Transmit_DMA+0x27c>)
 800ac04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac1c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac26:	4619      	mov	r1, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3320      	adds	r3, #32
 800ac2e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ac38:	f7f7 fe60 	bl	80028fc <HAL_DMA_Start_IT>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d011      	beq.n	800ac66 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac48:	f043 0210 	orr.w	r2, r3, #16
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e042      	b.n	800acec <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac70:	d108      	bne.n	800ac84 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6859      	ldr	r1, [r3, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	4b20      	ldr	r3, [pc, #128]	@ (800ad00 <HAL_SPI_Transmit_DMA+0x280>)
 800ac7e:	400b      	ands	r3, r1
 800ac80:	6053      	str	r3, [r2, #4]
 800ac82:	e009      	b.n	800ac98 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ad00 <HAL_SPI_Transmit_DMA+0x280>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	88f9      	ldrh	r1, [r7, #6]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	6812      	ldr	r2, [r2, #0]
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aca6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	691a      	ldr	r2, [r3, #16]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800acb6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f042 0201 	orr.w	r2, r2, #1
 800acc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acd0:	d107      	bne.n	800ace2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ace0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	0800b66d 	.word	0x0800b66d
 800acf8:	0800b5d9 	.word	0x0800b5d9
 800acfc:	0800b6ad 	.word	0x0800b6ad
 800ad00:	ffff0000 	.word	0xffff0000

0800ad04 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d005      	beq.n	800ad2a <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 800ad26:	2302      	movs	r3, #2
 800ad28:	e127      	b.n	800af7a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <HAL_SPI_Receive_DMA+0x32>
 800ad30:	88fb      	ldrh	r3, [r7, #6]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d105      	bne.n	800ad42 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e11b      	b.n	800af7a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_SPI_Receive_DMA+0x4c>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e114      	b.n	800af7a <HAL_SPI_Receive_DMA+0x276>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2204      	movs	r2, #4
 800ad5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	88fa      	ldrh	r2, [r7, #6]
 800ad72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	88fa      	ldrh	r2, [r7, #6]
 800ad7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ada2:	d108      	bne.n	800adb6 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	e009      	b.n	800adca <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800adc8:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2b0f      	cmp	r3, #15
 800add0:	d905      	bls.n	800adde <HAL_SPI_Receive_DMA+0xda>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800addc:	d10f      	bne.n	800adfe <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ade2:	2b07      	cmp	r3, #7
 800ade4:	d911      	bls.n	800ae0a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf0:	d00b      	beq.n	800ae0a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adf6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800adf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adfc:	d005      	beq.n	800ae0a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e0b7      	b.n	800af7a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ae18:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	2b07      	cmp	r3, #7
 800ae20:	d820      	bhi.n	800ae64 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae2c:	d109      	bne.n	800ae42 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	3301      	adds	r3, #1
 800ae38:	105b      	asrs	r3, r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae4c:	d11e      	bne.n	800ae8c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	3303      	adds	r3, #3
 800ae58:	109b      	asrs	r3, r3, #2
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae62:	e013      	b.n	800ae8c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	2b0f      	cmp	r3, #15
 800ae6a:	d80f      	bhi.n	800ae8c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae76:	d109      	bne.n	800ae8c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	3301      	adds	r3, #1
 800ae82:	105b      	asrs	r3, r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae90:	4a3c      	ldr	r2, [pc, #240]	@ (800af84 <HAL_SPI_Receive_DMA+0x280>)
 800ae92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae98:	4a3b      	ldr	r2, [pc, #236]	@ (800af88 <HAL_SPI_Receive_DMA+0x284>)
 800ae9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aea0:	4a3a      	ldr	r2, [pc, #232]	@ (800af8c <HAL_SPI_Receive_DMA+0x288>)
 800aea2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aea8:	2200      	movs	r2, #0
 800aeaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3330      	adds	r3, #48	@ 0x30
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aebc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aec4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aec6:	f7f7 fd19 	bl	80028fc <HAL_DMA_Start_IT>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d011      	beq.n	800aef4 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aed6:	f043 0210 	orr.w	r2, r3, #16
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e042      	b.n	800af7a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aefe:	d108      	bne.n	800af12 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6859      	ldr	r1, [r3, #4]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	4b21      	ldr	r3, [pc, #132]	@ (800af90 <HAL_SPI_Receive_DMA+0x28c>)
 800af0c:	400b      	ands	r3, r1
 800af0e:	6053      	str	r3, [r2, #4]
 800af10:	e009      	b.n	800af26 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	4b1d      	ldr	r3, [pc, #116]	@ (800af90 <HAL_SPI_Receive_DMA+0x28c>)
 800af1a:	4013      	ands	r3, r2
 800af1c:	88f9      	ldrh	r1, [r7, #6]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	430b      	orrs	r3, r1
 800af24:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af34:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	691a      	ldr	r2, [r3, #16]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800af44:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f042 0201 	orr.w	r2, r2, #1
 800af54:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af5e:	d107      	bne.n	800af70 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af6e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	0800b68d 	.word	0x0800b68d
 800af88:	0800b623 	.word	0x0800b623
 800af8c:	0800b6ad 	.word	0x0800b6ad
 800af90:	ffff0000 	.word	0xffff0000

0800af94 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d101      	bne.n	800afaa <HAL_SPI_Abort+0x16>
 800afa6:	2302      	movs	r3, #2
 800afa8:	e0d9      	b.n	800b15e <HAL_SPI_Abort+0x1ca>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2207      	movs	r2, #7
 800afb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800afbe:	4b6a      	ldr	r3, [pc, #424]	@ (800b168 <HAL_SPI_Abort+0x1d4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a6a      	ldr	r2, [pc, #424]	@ (800b16c <HAL_SPI_Abort+0x1d8>)
 800afc4:	fba2 2303 	umull	r2, r3, r2, r3
 800afc8:	0a5b      	lsrs	r3, r3, #9
 800afca:	2264      	movs	r2, #100	@ 0x64
 800afcc:	fb02 f303 	mul.w	r3, r2, r3
 800afd0:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afe0:	d15b      	bne.n	800b09a <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	691a      	ldr	r2, [r3, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0208 	bic.w	r2, r2, #8
 800aff0:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d108      	bne.n	800b010 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b004:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b00e:	e006      	b.n	800b01e <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b08      	cmp	r3, #8
 800b01c:	d0e9      	beq.n	800aff2 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b02c:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	3b01      	subs	r3, #1
 800b032:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d108      	bne.n	800b04c <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b040:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b04a:	e007      	b.n	800b05c <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b05a:	d0e8      	beq.n	800b02e <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	699a      	ldr	r2, [r3, #24]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b06a:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	3b01      	subs	r3, #1
 800b070:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d108      	bne.n	800b08a <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b07e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b088:	e007      	b.n	800b09a <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b098:	d0e8      	beq.n	800b06c <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0a8:	d11b      	bne.n	800b0e2 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d017      	beq.n	800b0e2 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f7 fe86 	bl	8002dd0 <HAL_DMA_Abort>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00b      	beq.n	800b0e2 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f9 fb66 	bl	80047a0 <HAL_DMA_GetError>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b20      	cmp	r3, #32
 800b0d8:	d103      	bne.n	800b0e2 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2240      	movs	r2, #64	@ 0x40
 800b0de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0f0:	d11b      	bne.n	800b12a <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d017      	beq.n	800b12a <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0fe:	2200      	movs	r2, #0
 800b100:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b106:	4618      	mov	r0, r3
 800b108:	f7f7 fe62 	bl	8002dd0 <HAL_DMA_Abort>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00b      	beq.n	800b12a <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b116:	4618      	mov	r0, r3
 800b118:	f7f9 fb42 	bl	80047a0 <HAL_DMA_GetError>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d103      	bne.n	800b12a <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2240      	movs	r2, #64	@ 0x40
 800b126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fb00 	bl	800b730 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13a:	2b40      	cmp	r3, #64	@ 0x40
 800b13c:	d102      	bne.n	800b144 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	73fb      	strb	r3, [r7, #15]
 800b142:	e003      	b.n	800b14c <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	24000000 	.word	0x24000000
 800b16c:	057619f1 	.word	0x057619f1

0800b170 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08a      	sub	sp, #40	@ 0x28
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b188:	6a3a      	ldr	r2, [r7, #32]
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	4013      	ands	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b198:	2300      	movs	r3, #0
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1a2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3330      	adds	r3, #48	@ 0x30
 800b1aa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d012      	beq.n	800b1dc <HAL_SPI_IRQHandler+0x6c>
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	f003 0308 	and.w	r3, r3, #8
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00d      	beq.n	800b1dc <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	699a      	ldr	r2, [r3, #24]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1ce:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b1da:	e19c      	b.n	800b516 <HAL_SPI_IRQHandler+0x3a6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d113      	bne.n	800b20e <HAL_SPI_IRQHandler+0x9e>
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	f003 0320 	and.w	r3, r3, #32
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10e      	bne.n	800b20e <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	4798      	blx	r3
    handled = 1UL;
 800b20a:	2301      	movs	r3, #1
 800b20c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10f      	bne.n	800b238 <HAL_SPI_IRQHandler+0xc8>
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00a      	beq.n	800b238 <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d105      	bne.n	800b238 <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	4798      	blx	r3
    handled = 1UL;
 800b234:	2301      	movs	r3, #1
 800b236:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10f      	bne.n	800b262 <HAL_SPI_IRQHandler+0xf2>
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00a      	beq.n	800b262 <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b252:	2b00      	cmp	r3, #0
 800b254:	d105      	bne.n	800b262 <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
    handled = 1UL;
 800b25e:	2301      	movs	r3, #1
 800b260:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	f040 8151 	bne.w	800b50c <HAL_SPI_IRQHandler+0x39c>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	f003 0308 	and.w	r3, r3, #8
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 8093 	beq.w	800b39c <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	699a      	ldr	r2, [r3, #24]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f042 0208 	orr.w	r2, r2, #8
 800b284:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	699a      	ldr	r2, [r3, #24]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0210 	orr.w	r2, r2, #16
 800b294:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	699a      	ldr	r2, [r3, #24]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0208 	bic.w	r2, r2, #8
 800b2b4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d13d      	bne.n	800b340 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b2c4:	e036      	b.n	800b334 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	2b0f      	cmp	r3, #15
 800b2cc:	d90b      	bls.n	800b2e6 <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b2d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2de:	1d1a      	adds	r2, r3, #4
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	665a      	str	r2, [r3, #100]	@ 0x64
 800b2e4:	e01d      	b.n	800b322 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	2b07      	cmp	r3, #7
 800b2ec:	d90b      	bls.n	800b306 <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	8812      	ldrh	r2, [r2, #0]
 800b2f6:	b292      	uxth	r2, r2
 800b2f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2fe:	1c9a      	adds	r2, r3, #2
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	665a      	str	r2, [r3, #100]	@ 0x64
 800b304:	e00d      	b.n	800b322 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1c2      	bne.n	800b2c6 <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fa59 	bl	800b7f8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b362:	e0d8      	b.n	800b516 <HAL_SPI_IRQHandler+0x3a6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b364:	7cfb      	ldrb	r3, [r7, #19]
 800b366:	2b05      	cmp	r3, #5
 800b368:	d105      	bne.n	800b376 <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b374:	e0cc      	b.n	800b510 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b376:	7cfb      	ldrb	r3, [r7, #19]
 800b378:	2b04      	cmp	r3, #4
 800b37a:	d105      	bne.n	800b388 <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
    return;
 800b386:	e0c3      	b.n	800b510 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b388:	7cfb      	ldrb	r3, [r7, #19]
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	f040 80c0 	bne.w	800b510 <HAL_SPI_IRQHandler+0x3a0>
      hspi->TxCpltCallback(hspi);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
    return;
 800b39a:	e0b9      	b.n	800b510 <HAL_SPI_IRQHandler+0x3a0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 80b7 	beq.w	800b516 <HAL_SPI_IRQHandler+0x3a6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00f      	beq.n	800b3d2 <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3b8:	f043 0204 	orr.w	r2, r3, #4
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	699a      	ldr	r2, [r3, #24]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00f      	beq.n	800b3fc <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3e2:	f043 0201 	orr.w	r2, r3, #1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3fa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00f      	beq.n	800b426 <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b40c:	f043 0208 	orr.w	r2, r3, #8
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	699a      	ldr	r2, [r3, #24]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b424:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00f      	beq.n	800b450 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b436:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0220 	orr.w	r2, r2, #32
 800b44e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b456:	2b00      	cmp	r3, #0
 800b458:	d05c      	beq.n	800b514 <HAL_SPI_IRQHandler+0x3a4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f022 0201 	bic.w	r2, r2, #1
 800b468:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6919      	ldr	r1, [r3, #16]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	4b29      	ldr	r3, [pc, #164]	@ (800b51c <HAL_SPI_IRQHandler+0x3ac>)
 800b476:	400b      	ands	r3, r1
 800b478:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b480:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b484:	d138      	bne.n	800b4f8 <HAL_SPI_IRQHandler+0x388>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b494:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d013      	beq.n	800b4c6 <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b520 <HAL_SPI_IRQHandler+0x3b0>)
 800b4a4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f7 ffae 	bl	800340c <HAL_DMA_Abort_IT>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d022      	beq.n	800b514 <HAL_SPI_IRQHandler+0x3a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4d2:	4a13      	ldr	r2, [pc, #76]	@ (800b520 <HAL_SPI_IRQHandler+0x3b0>)
 800b4d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f7 ff96 	bl	800340c <HAL_DMA_Abort_IT>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d016      	beq.n	800b514 <HAL_SPI_IRQHandler+0x3a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b4f6:	e00d      	b.n	800b514 <HAL_SPI_IRQHandler+0x3a4>
        hspi->State = HAL_SPI_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        hspi->ErrorCallback(hspi);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	4798      	blx	r3
    return;
 800b50a:	e003      	b.n	800b514 <HAL_SPI_IRQHandler+0x3a4>
    return;
 800b50c:	bf00      	nop
 800b50e:	e002      	b.n	800b516 <HAL_SPI_IRQHandler+0x3a6>
    return;
 800b510:	bf00      	nop
 800b512:	e000      	b.n	800b516 <HAL_SPI_IRQHandler+0x3a6>
    return;
 800b514:	bf00      	nop
  }
}
 800b516:	3728      	adds	r7, #40	@ 0x28
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	fffffc94 	.word	0xfffffc94
 800b520:	0800b6f7 	.word	0x0800b6f7

0800b524 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b07      	cmp	r3, #7
 800b5f0:	d013      	beq.n	800b61a <SPI_DMATransmitCplt+0x42>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5fc:	d105      	bne.n	800b60a <SPI_DMATransmitCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b608:	e007      	b.n	800b61a <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	691a      	ldr	r2, [r3, #16]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f042 0208 	orr.w	r2, r2, #8
 800b618:	611a      	str	r2, [r3, #16]
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b62e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b07      	cmp	r3, #7
 800b63a:	d013      	beq.n	800b664 <SPI_DMAReceiveCplt+0x42>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b646:	d105      	bne.n	800b654 <SPI_DMAReceiveCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b652:	e007      	b.n	800b664 <SPI_DMAReceiveCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691a      	ldr	r2, [r3, #16]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f042 0208 	orr.w	r2, r2, #8
 800b662:	611a      	str	r2, [r3, #16]
}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b678:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b684:	bf00      	nop
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b698:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6a4:	bf00      	nop
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7f9 f870 	bl	80047a0 <HAL_DMA_GetError>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d013      	beq.n	800b6ee <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 f896 	bl	800b7f8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6d2:	f043 0210 	orr.w	r2, r3, #16
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b702:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b726:	bf00      	nop
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0201 	bic.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6919      	ldr	r1, [r3, #16]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	4b28      	ldr	r3, [pc, #160]	@ (800b7f4 <SPI_AbortTransfer+0xc4>)
 800b754:	400b      	ands	r3, r1
 800b756:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699a      	ldr	r2, [r3, #24]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f042 0208 	orr.w	r2, r2, #8
 800b766:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	699a      	ldr	r2, [r3, #24]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0210 	orr.w	r2, r2, #16
 800b776:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689a      	ldr	r2, [r3, #8]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b786:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b796:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699a      	ldr	r2, [r3, #24]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0220 	orr.w	r2, r2, #32
 800b7a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	699a      	ldr	r2, [r3, #24]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699a      	ldr	r2, [r3, #24]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	699a      	ldr	r2, [r3, #24]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7d6:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	fffffc90 	.word	0xfffffc90

0800b7f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	699a      	ldr	r2, [r3, #24]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f042 0208 	orr.w	r2, r2, #8
 800b816:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f042 0210 	orr.w	r2, r2, #16
 800b826:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0201 	bic.w	r2, r2, #1
 800b836:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6919      	ldr	r1, [r3, #16]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b3c      	ldr	r3, [pc, #240]	@ (800b934 <SPI_CloseTransfer+0x13c>)
 800b844:	400b      	ands	r3, r1
 800b846:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b856:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	2b04      	cmp	r3, #4
 800b862:	d014      	beq.n	800b88e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f003 0320 	and.w	r3, r3, #32
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00f      	beq.n	800b88e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b874:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	699a      	ldr	r2, [r3, #24]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f042 0220 	orr.w	r2, r2, #32
 800b88c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b03      	cmp	r3, #3
 800b898:	d014      	beq.n	800b8c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00f      	beq.n	800b8c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8aa:	f043 0204 	orr.w	r2, r3, #4
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699a      	ldr	r2, [r3, #24]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00f      	beq.n	800b8ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8d4:	f043 0201 	orr.w	r2, r3, #1
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	699a      	ldr	r2, [r3, #24]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00f      	beq.n	800b918 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8fe:	f043 0208 	orr.w	r2, r3, #8
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	699a      	ldr	r2, [r3, #24]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b916:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b928:	bf00      	nop
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	fffffc90 	.word	0xfffffc90

0800b938 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	4613      	mov	r3, r2
 800b946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b948:	e010      	b.n	800b96c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b94a:	f7f6 fb5f 	bl	800200c <HAL_GetTick>
 800b94e:	4602      	mov	r2, r0
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d803      	bhi.n	800b962 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b960:	d102      	bne.n	800b968 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e00f      	b.n	800b98c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	695a      	ldr	r2, [r3, #20]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4013      	ands	r3, r2
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	429a      	cmp	r2, r3
 800b97a:	bf0c      	ite	eq
 800b97c:	2301      	moveq	r3, #1
 800b97e:	2300      	movne	r3, #0
 800b980:	b2db      	uxtb	r3, r3
 800b982:	461a      	mov	r2, r3
 800b984:	79fb      	ldrb	r3, [r7, #7]
 800b986:	429a      	cmp	r2, r3
 800b988:	d0df      	beq.n	800b94a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9a0:	095b      	lsrs	r3, r3, #5
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	08db      	lsrs	r3, r3, #3
 800b9b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e049      	b.n	800ba70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d106      	bne.n	800b9f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7f5 fda5 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f000 fad5 	bl	800bfb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2201      	movs	r2, #1
 800ba62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d001      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e054      	b.n	800bb3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68da      	ldr	r2, [r3, #12]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0201 	orr.w	r2, r2, #1
 800baa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a26      	ldr	r2, [pc, #152]	@ (800bb48 <HAL_TIM_Base_Start_IT+0xd0>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d022      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baba:	d01d      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a22      	ldr	r2, [pc, #136]	@ (800bb4c <HAL_TIM_Base_Start_IT+0xd4>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d018      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a21      	ldr	r2, [pc, #132]	@ (800bb50 <HAL_TIM_Base_Start_IT+0xd8>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d013      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a1f      	ldr	r2, [pc, #124]	@ (800bb54 <HAL_TIM_Base_Start_IT+0xdc>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d00e      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a1e      	ldr	r2, [pc, #120]	@ (800bb58 <HAL_TIM_Base_Start_IT+0xe0>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d009      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a1c      	ldr	r2, [pc, #112]	@ (800bb5c <HAL_TIM_Base_Start_IT+0xe4>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d004      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0x80>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a1b      	ldr	r2, [pc, #108]	@ (800bb60 <HAL_TIM_Base_Start_IT+0xe8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d115      	bne.n	800bb24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689a      	ldr	r2, [r3, #8]
 800bafe:	4b19      	ldr	r3, [pc, #100]	@ (800bb64 <HAL_TIM_Base_Start_IT+0xec>)
 800bb00:	4013      	ands	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b06      	cmp	r3, #6
 800bb08:	d015      	beq.n	800bb36 <HAL_TIM_Base_Start_IT+0xbe>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb10:	d011      	beq.n	800bb36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f042 0201 	orr.w	r2, r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb22:	e008      	b.n	800bb36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f042 0201 	orr.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	e000      	b.n	800bb38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40000400 	.word	0x40000400
 800bb50:	40000800 	.word	0x40000800
 800bb54:	40000c00 	.word	0x40000c00
 800bb58:	40010400 	.word	0x40010400
 800bb5c:	40001800 	.word	0x40001800
 800bb60:	40014000 	.word	0x40014000
 800bb64:	00010007 	.word	0x00010007

0800bb68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	f003 0302 	and.w	r3, r3, #2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d020      	beq.n	800bbcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01b      	beq.n	800bbcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f06f 0202 	mvn.w	r2, #2
 800bb9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9e2 	bl	800bf7c <HAL_TIM_IC_CaptureCallback>
 800bbb8:	e005      	b.n	800bbc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f9d4 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f9e5 	bl	800bf90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d020      	beq.n	800bc18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d01b      	beq.n	800bc18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f06f 0204 	mvn.w	r2, #4
 800bbe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2202      	movs	r2, #2
 800bbee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f9bc 	bl	800bf7c <HAL_TIM_IC_CaptureCallback>
 800bc04:	e005      	b.n	800bc12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f9ae 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f9bf 	bl	800bf90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f003 0308 	and.w	r3, r3, #8
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d020      	beq.n	800bc64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f003 0308 	and.w	r3, r3, #8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01b      	beq.n	800bc64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f06f 0208 	mvn.w	r2, #8
 800bc34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	f003 0303 	and.w	r3, r3, #3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f996 	bl	800bf7c <HAL_TIM_IC_CaptureCallback>
 800bc50:	e005      	b.n	800bc5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f988 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f999 	bl	800bf90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f003 0310 	and.w	r3, r3, #16
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d020      	beq.n	800bcb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f003 0310 	and.w	r3, r3, #16
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01b      	beq.n	800bcb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f06f 0210 	mvn.w	r2, #16
 800bc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2208      	movs	r2, #8
 800bc86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f970 	bl	800bf7c <HAL_TIM_IC_CaptureCallback>
 800bc9c:	e005      	b.n	800bcaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f962 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f973 	bl	800bf90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00c      	beq.n	800bcd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f003 0301 	and.w	r3, r3, #1
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d007      	beq.n	800bcd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f06f 0201 	mvn.w	r2, #1
 800bccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7f5 f9d4 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d104      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00c      	beq.n	800bd02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d007      	beq.n	800bd02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bcfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fb31 	bl	800c364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00c      	beq.n	800bd26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d007      	beq.n	800bd26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bd1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fb29 	bl	800c378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00c      	beq.n	800bd4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d007      	beq.n	800bd4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f92d 	bl	800bfa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f003 0320 	and.w	r3, r3, #32
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00c      	beq.n	800bd6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d007      	beq.n	800bd6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f06f 0220 	mvn.w	r2, #32
 800bd66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 faf1 	bl	800c350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
	...

0800bd78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d101      	bne.n	800bd94 <HAL_TIM_ConfigClockSource+0x1c>
 800bd90:	2302      	movs	r3, #2
 800bd92:	e0dc      	b.n	800bf4e <HAL_TIM_ConfigClockSource+0x1d6>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	4b6a      	ldr	r3, [pc, #424]	@ (800bf58 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a64      	ldr	r2, [pc, #400]	@ (800bf5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	f000 80a9 	beq.w	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdd0:	4a62      	ldr	r2, [pc, #392]	@ (800bf5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	f200 80ae 	bhi.w	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdd8:	4a61      	ldr	r2, [pc, #388]	@ (800bf60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	f000 80a1 	beq.w	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800bde0:	4a5f      	ldr	r2, [pc, #380]	@ (800bf60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	f200 80a6 	bhi.w	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800bde8:	4a5e      	ldr	r2, [pc, #376]	@ (800bf64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	f000 8099 	beq.w	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdf0:	4a5c      	ldr	r2, [pc, #368]	@ (800bf64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	f200 809e 	bhi.w	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdf8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bdfc:	f000 8091 	beq.w	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800be00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be04:	f200 8096 	bhi.w	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be0c:	f000 8089 	beq.w	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800be10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be14:	f200 808e 	bhi.w	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be1c:	d03e      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x124>
 800be1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be22:	f200 8087 	bhi.w	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2a:	f000 8086 	beq.w	800bf3a <HAL_TIM_ConfigClockSource+0x1c2>
 800be2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be32:	d87f      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be34:	2b70      	cmp	r3, #112	@ 0x70
 800be36:	d01a      	beq.n	800be6e <HAL_TIM_ConfigClockSource+0xf6>
 800be38:	2b70      	cmp	r3, #112	@ 0x70
 800be3a:	d87b      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be3c:	2b60      	cmp	r3, #96	@ 0x60
 800be3e:	d050      	beq.n	800bee2 <HAL_TIM_ConfigClockSource+0x16a>
 800be40:	2b60      	cmp	r3, #96	@ 0x60
 800be42:	d877      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be44:	2b50      	cmp	r3, #80	@ 0x50
 800be46:	d03c      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0x14a>
 800be48:	2b50      	cmp	r3, #80	@ 0x50
 800be4a:	d873      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be4c:	2b40      	cmp	r3, #64	@ 0x40
 800be4e:	d058      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0x18a>
 800be50:	2b40      	cmp	r3, #64	@ 0x40
 800be52:	d86f      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be54:	2b30      	cmp	r3, #48	@ 0x30
 800be56:	d064      	beq.n	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800be58:	2b30      	cmp	r3, #48	@ 0x30
 800be5a:	d86b      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be5c:	2b20      	cmp	r3, #32
 800be5e:	d060      	beq.n	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800be60:	2b20      	cmp	r3, #32
 800be62:	d867      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
 800be64:	2b00      	cmp	r3, #0
 800be66:	d05c      	beq.n	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800be68:	2b10      	cmp	r3, #16
 800be6a:	d05a      	beq.n	800bf22 <HAL_TIM_ConfigClockSource+0x1aa>
 800be6c:	e062      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be7e:	f000 f9b9 	bl	800c1f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	609a      	str	r2, [r3, #8]
      break;
 800be9a:	e04f      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800beac:	f000 f9a2 	bl	800c1f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689a      	ldr	r2, [r3, #8]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bebe:	609a      	str	r2, [r3, #8]
      break;
 800bec0:	e03c      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bece:	461a      	mov	r2, r3
 800bed0:	f000 f912 	bl	800c0f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2150      	movs	r1, #80	@ 0x50
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 f96c 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bee0:	e02c      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800beee:	461a      	mov	r2, r3
 800bef0:	f000 f931 	bl	800c156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2160      	movs	r1, #96	@ 0x60
 800befa:	4618      	mov	r0, r3
 800befc:	f000 f95c 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bf00:	e01c      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f000 f8f2 	bl	800c0f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2140      	movs	r1, #64	@ 0x40
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f94c 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bf20:	e00c      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	f000 f943 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bf32:	e003      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	73fb      	strb	r3, [r7, #15]
      break;
 800bf38:	e000      	b.n	800bf3c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bf3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	ffceff88 	.word	0xffceff88
 800bf5c:	00100040 	.word	0x00100040
 800bf60:	00100030 	.word	0x00100030
 800bf64:	00100020 	.word	0x00100020

0800bf68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a43      	ldr	r2, [pc, #268]	@ (800c0d8 <TIM_Base_SetConfig+0x120>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d013      	beq.n	800bff8 <TIM_Base_SetConfig+0x40>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfd6:	d00f      	beq.n	800bff8 <TIM_Base_SetConfig+0x40>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a40      	ldr	r2, [pc, #256]	@ (800c0dc <TIM_Base_SetConfig+0x124>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d00b      	beq.n	800bff8 <TIM_Base_SetConfig+0x40>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a3f      	ldr	r2, [pc, #252]	@ (800c0e0 <TIM_Base_SetConfig+0x128>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d007      	beq.n	800bff8 <TIM_Base_SetConfig+0x40>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a3e      	ldr	r2, [pc, #248]	@ (800c0e4 <TIM_Base_SetConfig+0x12c>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d003      	beq.n	800bff8 <TIM_Base_SetConfig+0x40>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4a3d      	ldr	r2, [pc, #244]	@ (800c0e8 <TIM_Base_SetConfig+0x130>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d108      	bne.n	800c00a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4313      	orrs	r3, r2
 800c008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a32      	ldr	r2, [pc, #200]	@ (800c0d8 <TIM_Base_SetConfig+0x120>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d01f      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c018:	d01b      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a2f      	ldr	r2, [pc, #188]	@ (800c0dc <TIM_Base_SetConfig+0x124>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d017      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a2e      	ldr	r2, [pc, #184]	@ (800c0e0 <TIM_Base_SetConfig+0x128>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d013      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a2d      	ldr	r2, [pc, #180]	@ (800c0e4 <TIM_Base_SetConfig+0x12c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d00f      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a2c      	ldr	r2, [pc, #176]	@ (800c0e8 <TIM_Base_SetConfig+0x130>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00b      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a2b      	ldr	r2, [pc, #172]	@ (800c0ec <TIM_Base_SetConfig+0x134>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d007      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a2a      	ldr	r2, [pc, #168]	@ (800c0f0 <TIM_Base_SetConfig+0x138>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d003      	beq.n	800c052 <TIM_Base_SetConfig+0x9a>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a29      	ldr	r2, [pc, #164]	@ (800c0f4 <TIM_Base_SetConfig+0x13c>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d108      	bne.n	800c064 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	689a      	ldr	r2, [r3, #8]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a14      	ldr	r2, [pc, #80]	@ (800c0d8 <TIM_Base_SetConfig+0x120>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d00f      	beq.n	800c0aa <TIM_Base_SetConfig+0xf2>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a16      	ldr	r2, [pc, #88]	@ (800c0e8 <TIM_Base_SetConfig+0x130>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d00b      	beq.n	800c0aa <TIM_Base_SetConfig+0xf2>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a15      	ldr	r2, [pc, #84]	@ (800c0ec <TIM_Base_SetConfig+0x134>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d007      	beq.n	800c0aa <TIM_Base_SetConfig+0xf2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a14      	ldr	r2, [pc, #80]	@ (800c0f0 <TIM_Base_SetConfig+0x138>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d003      	beq.n	800c0aa <TIM_Base_SetConfig+0xf2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a13      	ldr	r2, [pc, #76]	@ (800c0f4 <TIM_Base_SetConfig+0x13c>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d103      	bne.n	800c0b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f043 0204 	orr.w	r2, r3, #4
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	40010000 	.word	0x40010000
 800c0dc:	40000400 	.word	0x40000400
 800c0e0:	40000800 	.word	0x40000800
 800c0e4:	40000c00 	.word	0x40000c00
 800c0e8:	40010400 	.word	0x40010400
 800c0ec:	40014000 	.word	0x40014000
 800c0f0:	40014400 	.word	0x40014400
 800c0f4:	40014800 	.word	0x40014800

0800c0f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	f023 0201 	bic.w	r2, r3, #1
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f023 030a 	bic.w	r3, r3, #10
 800c134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	621a      	str	r2, [r3, #32]
}
 800c14a:	bf00      	nop
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c156:	b480      	push	{r7}
 800c158:	b087      	sub	sp, #28
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	f023 0210 	bic.w	r2, r3, #16
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	031b      	lsls	r3, r3, #12
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	4313      	orrs	r3, r2
 800c18a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	621a      	str	r2, [r3, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
	...

0800c1b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	4b09      	ldr	r3, [pc, #36]	@ (800c1f0 <TIM_ITRx_SetConfig+0x38>)
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	f043 0307 	orr.w	r3, r3, #7
 800c1da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	609a      	str	r2, [r3, #8]
}
 800c1e2:	bf00      	nop
 800c1e4:	3714      	adds	r7, #20
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	ffcfff8f 	.word	0xffcfff8f

0800c1f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c20e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	021a      	lsls	r2, r3, #8
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	431a      	orrs	r2, r3
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	4313      	orrs	r3, r2
 800c220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	609a      	str	r2, [r3, #8]
}
 800c228:	bf00      	nop
 800c22a:	371c      	adds	r7, #28
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c244:	2b01      	cmp	r3, #1
 800c246:	d101      	bne.n	800c24c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c248:	2302      	movs	r3, #2
 800c24a:	e06d      	b.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a30      	ldr	r2, [pc, #192]	@ (800c334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d004      	beq.n	800c280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a2f      	ldr	r2, [pc, #188]	@ (800c338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d108      	bne.n	800c292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a20      	ldr	r2, [pc, #128]	@ (800c334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d022      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2be:	d01d      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c33c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d018      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a1c      	ldr	r2, [pc, #112]	@ (800c340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d013      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a1a      	ldr	r2, [pc, #104]	@ (800c344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d00e      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a15      	ldr	r2, [pc, #84]	@ (800c338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d009      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a16      	ldr	r2, [pc, #88]	@ (800c348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d004      	beq.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a15      	ldr	r2, [pc, #84]	@ (800c34c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d10c      	bne.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	40010000 	.word	0x40010000
 800c338:	40010400 	.word	0x40010400
 800c33c:	40000400 	.word	0x40000400
 800c340:	40000800 	.word	0x40000800
 800c344:	40000c00 	.word	0x40000c00
 800c348:	40001800 	.word	0x40001800
 800c34c:	40014000 	.word	0x40014000

0800c350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e050      	b.n	800c440 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d114      	bne.n	800c3d2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fe4d 	bl	800d050 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d103      	bne.n	800c3c8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a21      	ldr	r2, [pc, #132]	@ (800c448 <HAL_UART_Init+0xbc>)
 800c3c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2224      	movs	r2, #36	@ 0x24
 800c3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f022 0201 	bic.w	r2, r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 fbe6 	bl	800dbc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fe7b 	bl	800d0f4 <UART_SetConfig>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b01      	cmp	r3, #1
 800c402:	d101      	bne.n	800c408 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e01b      	b.n	800c440 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f042 0201 	orr.w	r2, r2, #1
 800c436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f001 fc65 	bl	800dd08 <UART_CheckIdleState>
 800c43e:	4603      	mov	r3, r0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	08001581 	.word	0x08001581

0800c44c <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d109      	bne.n	800c474 <HAL_UART_RegisterRxEventCallback+0x28>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c466:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e014      	b.n	800c49e <HAL_UART_RegisterRxEventCallback+0x52>
  }

  if (huart->RxState == HAL_UART_STATE_READY)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c47a:	2b20      	cmp	r3, #32
 800c47c:	d104      	bne.n	800c488 <HAL_UART_RegisterRxEventCallback+0x3c>
  {
    huart->RxEventCallback = pCallback;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800c486:	e009      	b.n	800c49c <HAL_UART_RegisterRxEventCallback+0x50>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c48e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3714      	adds	r7, #20
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
	...

0800c4ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08a      	sub	sp, #40	@ 0x28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4c0:	2b20      	cmp	r3, #32
 800c4c2:	d167      	bne.n	800c594 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <HAL_UART_Transmit_DMA+0x24>
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e060      	b.n	800c596 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	88fa      	ldrh	r2, [r7, #6]
 800c4de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	88fa      	ldrh	r2, [r7, #6]
 800c4e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2221      	movs	r2, #33	@ 0x21
 800c4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d028      	beq.n	800c554 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c506:	4a26      	ldr	r2, [pc, #152]	@ (800c5a0 <HAL_UART_Transmit_DMA+0xf4>)
 800c508:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c50e:	4a25      	ldr	r2, [pc, #148]	@ (800c5a4 <HAL_UART_Transmit_DMA+0xf8>)
 800c510:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c516:	4a24      	ldr	r2, [pc, #144]	@ (800c5a8 <HAL_UART_Transmit_DMA+0xfc>)
 800c518:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c51e:	2200      	movs	r2, #0
 800c520:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c52a:	4619      	mov	r1, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3328      	adds	r3, #40	@ 0x28
 800c532:	461a      	mov	r2, r3
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	f7f6 f9e1 	bl	80028fc <HAL_DMA_Start_IT>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d009      	beq.n	800c554 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2210      	movs	r2, #16
 800c544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c550:	2301      	movs	r3, #1
 800c552:	e020      	b.n	800c596 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2240      	movs	r2, #64	@ 0x40
 800c55a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3308      	adds	r3, #8
 800c562:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	e853 3f00 	ldrex	r3, [r3]
 800c56a:	613b      	str	r3, [r7, #16]
   return(result);
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c572:	627b      	str	r3, [r7, #36]	@ 0x24
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3308      	adds	r3, #8
 800c57a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c57c:	623a      	str	r2, [r7, #32]
 800c57e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c580:	69f9      	ldr	r1, [r7, #28]
 800c582:	6a3a      	ldr	r2, [r7, #32]
 800c584:	e841 2300 	strex	r3, r2, [r1]
 800c588:	61bb      	str	r3, [r7, #24]
   return(result);
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1e5      	bne.n	800c55c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	e000      	b.n	800c596 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c594:	2302      	movs	r3, #2
  }
}
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	@ 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	0800e1d5 	.word	0x0800e1d5
 800c5a4:	0800e26f 	.word	0x0800e26f
 800c5a8:	0800e405 	.word	0x0800e405

0800c5ac <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b0a0      	sub	sp, #128	@ 0x80
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5bc:	e853 3f00 	ldrex	r3, [r3]
 800c5c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c5c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5c4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c5c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c5d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5d4:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c5d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c5e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e6      	bne.n	800c5b4 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5f8:	4b72      	ldr	r3, [pc, #456]	@ (800c7c4 <HAL_UART_Abort+0x218>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3308      	adds	r3, #8
 800c604:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c606:	657a      	str	r2, [r7, #84]	@ 0x54
 800c608:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c60c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c60e:	e841 2300 	strex	r3, r2, [r1]
 800c612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e5      	bne.n	800c5e6 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d118      	bne.n	800c654 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c632:	f023 0310 	bic.w	r3, r3, #16
 800c636:	677b      	str	r3, [r7, #116]	@ 0x74
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c640:	643b      	str	r3, [r7, #64]	@ 0x40
 800c642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e6      	bne.n	800c622 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c65e:	2b80      	cmp	r3, #128	@ 0x80
 800c660:	d137      	bne.n	800c6d2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3308      	adds	r3, #8
 800c668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	e853 3f00 	ldrex	r3, [r3]
 800c670:	61fb      	str	r3, [r7, #28]
   return(result);
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c678:	673b      	str	r3, [r7, #112]	@ 0x70
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3308      	adds	r3, #8
 800c680:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c68a:	e841 2300 	strex	r3, r2, [r1]
 800c68e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1e5      	bne.n	800c662 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d019      	beq.n	800c6d2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f6 fb90 	bl	8002dd0 <HAL_DMA_Abort>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00d      	beq.n	800c6d2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7f8 f870 	bl	80047a0 <HAL_DMA_GetError>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b20      	cmp	r3, #32
 800c6c4:	d105      	bne.n	800c6d2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2210      	movs	r2, #16
 800c6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e073      	b.n	800c7ba <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6dc:	2b40      	cmp	r3, #64	@ 0x40
 800c6de:	d13b      	bne.n	800c758 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3308      	adds	r3, #8
 800c6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c700:	61ba      	str	r2, [r7, #24]
 800c702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6979      	ldr	r1, [r7, #20]
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	613b      	str	r3, [r7, #16]
   return(result);
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e5      	bne.n	800c6e0 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d01c      	beq.n	800c758 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c724:	2200      	movs	r2, #0
 800c726:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c72e:	4618      	mov	r0, r3
 800c730:	f7f6 fb4e 	bl	8002dd0 <HAL_DMA_Abort>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00e      	beq.n	800c758 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c740:	4618      	mov	r0, r3
 800c742:	f7f8 f82d 	bl	80047a0 <HAL_DMA_GetError>
 800c746:	4603      	mov	r3, r0
 800c748:	2b20      	cmp	r3, #32
 800c74a:	d105      	bne.n	800c758 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2210      	movs	r2, #16
 800c750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e030      	b.n	800c7ba <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	220f      	movs	r2, #15
 800c76e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c778:	d107      	bne.n	800c78a <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	699a      	ldr	r2, [r3, #24]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f042 0210 	orr.w	r2, r2, #16
 800c788:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	699a      	ldr	r2, [r3, #24]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f042 0208 	orr.w	r2, r2, #8
 800c798:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3780      	adds	r7, #128	@ 0x80
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	ef7ffffe 	.word	0xef7ffffe

0800c7c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b0ba      	sub	sp, #232	@ 0xe8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c7ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c7f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c7fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c800:	2b00      	cmp	r3, #0
 800c802:	d11b      	bne.n	800c83c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c808:	f003 0320 	and.w	r3, r3, #32
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d015      	beq.n	800c83c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c814:	f003 0320 	and.w	r3, r3, #32
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d105      	bne.n	800c828 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c81c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d009      	beq.n	800c83c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 83a5 	beq.w	800cf7c <HAL_UART_IRQHandler+0x7b4>
      {
        huart->RxISR(huart);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
      }
      return;
 800c83a:	e39f      	b.n	800cf7c <HAL_UART_IRQHandler+0x7b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c83c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 8129 	beq.w	800ca98 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c846:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c84a:	4b90      	ldr	r3, [pc, #576]	@ (800ca8c <HAL_UART_IRQHandler+0x2c4>)
 800c84c:	4013      	ands	r3, r2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c852:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c856:	4b8e      	ldr	r3, [pc, #568]	@ (800ca90 <HAL_UART_IRQHandler+0x2c8>)
 800c858:	4013      	ands	r3, r2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 811c 	beq.w	800ca98 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d011      	beq.n	800c890 <HAL_UART_IRQHandler+0xc8>
 800c86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00b      	beq.n	800c890 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2201      	movs	r2, #1
 800c87e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c886:	f043 0201 	orr.w	r2, r3, #1
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c894:	f003 0302 	and.w	r3, r3, #2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d011      	beq.n	800c8c0 <HAL_UART_IRQHandler+0xf8>
 800c89c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00b      	beq.n	800c8c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8b6:	f043 0204 	orr.w	r2, r3, #4
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8c4:	f003 0304 	and.w	r3, r3, #4
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d011      	beq.n	800c8f0 <HAL_UART_IRQHandler+0x128>
 800c8cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2204      	movs	r2, #4
 800c8de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8e6:	f043 0202 	orr.w	r2, r3, #2
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d017      	beq.n	800c92c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c900:	f003 0320 	and.w	r3, r3, #32
 800c904:	2b00      	cmp	r3, #0
 800c906:	d105      	bne.n	800c914 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c908:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c90c:	4b5f      	ldr	r3, [pc, #380]	@ (800ca8c <HAL_UART_IRQHandler+0x2c4>)
 800c90e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00b      	beq.n	800c92c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2208      	movs	r2, #8
 800c91a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c922:	f043 0208 	orr.w	r2, r3, #8
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c934:	2b00      	cmp	r3, #0
 800c936:	d012      	beq.n	800c95e <HAL_UART_IRQHandler+0x196>
 800c938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c93c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00c      	beq.n	800c95e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c94c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c954:	f043 0220 	orr.w	r2, r3, #32
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 830b 	beq.w	800cf80 <HAL_UART_IRQHandler+0x7b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c96e:	f003 0320 	and.w	r3, r3, #32
 800c972:	2b00      	cmp	r3, #0
 800c974:	d013      	beq.n	800c99e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c97a:	f003 0320 	and.w	r3, r3, #32
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d007      	beq.n	800c99e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c992:	2b00      	cmp	r3, #0
 800c994:	d003      	beq.n	800c99e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b2:	2b40      	cmp	r3, #64	@ 0x40
 800c9b4:	d005      	beq.n	800c9c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c9b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c9ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d058      	beq.n	800ca74 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f001 fba0 	bl	800e108 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9d2:	2b40      	cmp	r3, #64	@ 0x40
 800c9d4:	d148      	bne.n	800ca68 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3308      	adds	r3, #8
 800c9dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c9ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ca02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ca06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ca0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ca1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1d9      	bne.n	800c9d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d017      	beq.n	800ca5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca32:	4a18      	ldr	r2, [pc, #96]	@ (800ca94 <HAL_UART_IRQHandler+0x2cc>)
 800ca34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f6 fce5 	bl	800340c <HAL_DMA_Abort_IT>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d01f      	beq.n	800ca88 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ca56:	4610      	mov	r0, r2
 800ca58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca5a:	e015      	b.n	800ca88 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca66:	e00f      	b.n	800ca88 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca72:	e009      	b.n	800ca88 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ca86:	e27b      	b.n	800cf80 <HAL_UART_IRQHandler+0x7b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca88:	bf00      	nop
    return;
 800ca8a:	e279      	b.n	800cf80 <HAL_UART_IRQHandler+0x7b8>
 800ca8c:	10000001 	.word	0x10000001
 800ca90:	04000120 	.word	0x04000120
 800ca94:	0800e489 	.word	0x0800e489

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	f040 8209 	bne.w	800ceb4 <HAL_UART_IRQHandler+0x6ec>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800caa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caa6:	f003 0310 	and.w	r3, r3, #16
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f000 8202 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x6ec>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cab4:	f003 0310 	and.w	r3, r3, #16
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 81fb 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x6ec>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2210      	movs	r2, #16
 800cac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad0:	2b40      	cmp	r3, #64	@ 0x40
 800cad2:	f040 8171 	bne.w	800cdb8 <HAL_UART_IRQHandler+0x5f0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4aa6      	ldr	r2, [pc, #664]	@ (800cd78 <HAL_UART_IRQHandler+0x5b0>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d068      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4aa3      	ldr	r2, [pc, #652]	@ (800cd7c <HAL_UART_IRQHandler+0x5b4>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d061      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4aa1      	ldr	r2, [pc, #644]	@ (800cd80 <HAL_UART_IRQHandler+0x5b8>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d05a      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a9e      	ldr	r2, [pc, #632]	@ (800cd84 <HAL_UART_IRQHandler+0x5bc>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d053      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a9c      	ldr	r2, [pc, #624]	@ (800cd88 <HAL_UART_IRQHandler+0x5c0>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d04c      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a99      	ldr	r2, [pc, #612]	@ (800cd8c <HAL_UART_IRQHandler+0x5c4>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d045      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a97      	ldr	r2, [pc, #604]	@ (800cd90 <HAL_UART_IRQHandler+0x5c8>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d03e      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a94      	ldr	r2, [pc, #592]	@ (800cd94 <HAL_UART_IRQHandler+0x5cc>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d037      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a92      	ldr	r2, [pc, #584]	@ (800cd98 <HAL_UART_IRQHandler+0x5d0>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d030      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a8f      	ldr	r2, [pc, #572]	@ (800cd9c <HAL_UART_IRQHandler+0x5d4>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d029      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a8d      	ldr	r2, [pc, #564]	@ (800cda0 <HAL_UART_IRQHandler+0x5d8>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d022      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a8a      	ldr	r2, [pc, #552]	@ (800cda4 <HAL_UART_IRQHandler+0x5dc>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d01b      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a88      	ldr	r2, [pc, #544]	@ (800cda8 <HAL_UART_IRQHandler+0x5e0>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d014      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a85      	ldr	r2, [pc, #532]	@ (800cdac <HAL_UART_IRQHandler+0x5e4>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00d      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a83      	ldr	r2, [pc, #524]	@ (800cdb0 <HAL_UART_IRQHandler+0x5e8>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d006      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ee>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a80      	ldr	r2, [pc, #512]	@ (800cdb4 <HAL_UART_IRQHandler+0x5ec>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d106      	bne.n	800cbc4 <HAL_UART_IRQHandler+0x3fc>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	e005      	b.n	800cbd0 <HAL_UART_IRQHandler+0x408>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 80af 	beq.w	800cd3c <HAL_UART_IRQHandler+0x574>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	f080 80a7 	bcs.w	800cd3c <HAL_UART_IRQHandler+0x574>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc04:	f000 8087 	beq.w	800cd16 <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cc14:	e853 3f00 	ldrex	r3, [r3]
 800cc18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cc1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cc3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cc4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1da      	bne.n	800cc08 <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3308      	adds	r3, #8
 800cc58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc5c:	e853 3f00 	ldrex	r3, [r3]
 800cc60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cc62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc64:	f023 0301 	bic.w	r3, r3, #1
 800cc68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3308      	adds	r3, #8
 800cc72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cc7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc82:	e841 2300 	strex	r3, r2, [r1]
 800cc86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1e1      	bne.n	800cc52 <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3308      	adds	r3, #8
 800cc94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc98:	e853 3f00 	ldrex	r3, [r3]
 800cc9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3308      	adds	r3, #8
 800ccae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ccb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ccb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ccb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ccba:	e841 2300 	strex	r3, r2, [r1]
 800ccbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ccc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1e3      	bne.n	800cc8e <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2220      	movs	r2, #32
 800ccca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccdc:	e853 3f00 	ldrex	r3, [r3]
 800cce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cce4:	f023 0310 	bic.w	r3, r3, #16
 800cce8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccf8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ccfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccfe:	e841 2300 	strex	r3, r2, [r1]
 800cd02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1e4      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7f6 f85d 	bl	8002dd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2202      	movs	r2, #2
 800cd1a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800cd2e:	b292      	uxth	r2, r2
 800cd30:	1a8a      	subs	r2, r1, r2
 800cd32:	b292      	uxth	r2, r2
 800cd34:	4611      	mov	r1, r2
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cd3a:	e123      	b.n	800cf84 <HAL_UART_IRQHandler+0x7bc>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd46:	429a      	cmp	r2, r3
 800cd48:	f040 811c 	bne.w	800cf84 <HAL_UART_IRQHandler+0x7bc>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd52:	69db      	ldr	r3, [r3, #28]
 800cd54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd58:	f040 8114 	bne.w	800cf84 <HAL_UART_IRQHandler+0x7bc>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cd6e:	4611      	mov	r1, r2
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	4798      	blx	r3
      return;
 800cd74:	e106      	b.n	800cf84 <HAL_UART_IRQHandler+0x7bc>
 800cd76:	bf00      	nop
 800cd78:	40020010 	.word	0x40020010
 800cd7c:	40020028 	.word	0x40020028
 800cd80:	40020040 	.word	0x40020040
 800cd84:	40020058 	.word	0x40020058
 800cd88:	40020070 	.word	0x40020070
 800cd8c:	40020088 	.word	0x40020088
 800cd90:	400200a0 	.word	0x400200a0
 800cd94:	400200b8 	.word	0x400200b8
 800cd98:	40020410 	.word	0x40020410
 800cd9c:	40020428 	.word	0x40020428
 800cda0:	40020440 	.word	0x40020440
 800cda4:	40020458 	.word	0x40020458
 800cda8:	40020470 	.word	0x40020470
 800cdac:	40020488 	.word	0x40020488
 800cdb0:	400204a0 	.word	0x400204a0
 800cdb4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 80d7 	beq.w	800cf88 <HAL_UART_IRQHandler+0x7c0>
          && (nb_rx_data > 0U))
 800cdda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 80d2 	beq.w	800cf88 <HAL_UART_IRQHandler+0x7c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdec:	e853 3f00 	ldrex	r3, [r3]
 800cdf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	461a      	mov	r2, r3
 800ce02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ce06:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce0e:	e841 2300 	strex	r3, r2, [r1]
 800ce12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1e4      	bne.n	800cde4 <HAL_UART_IRQHandler+0x61c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	3308      	adds	r3, #8
 800ce20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce24:	e853 3f00 	ldrex	r3, [r3]
 800ce28:	623b      	str	r3, [r7, #32]
   return(result);
 800ce2a:	6a3a      	ldr	r2, [r7, #32]
 800ce2c:	4b59      	ldr	r3, [pc, #356]	@ (800cf94 <HAL_UART_IRQHandler+0x7cc>)
 800ce2e:	4013      	ands	r3, r2
 800ce30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3308      	adds	r3, #8
 800ce3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ce3e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce46:	e841 2300 	strex	r3, r2, [r1]
 800ce4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1e3      	bne.n	800ce1a <HAL_UART_IRQHandler+0x652>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2220      	movs	r2, #32
 800ce56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f023 0310 	bic.w	r3, r3, #16
 800ce7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ce88:	61fb      	str	r3, [r7, #28]
 800ce8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8c:	69b9      	ldr	r1, [r7, #24]
 800ce8e:	69fa      	ldr	r2, [r7, #28]
 800ce90:	e841 2300 	strex	r3, r2, [r1]
 800ce94:	617b      	str	r3, [r7, #20]
   return(result);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1e4      	bne.n	800ce66 <HAL_UART_IRQHandler+0x69e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2202      	movs	r2, #2
 800cea0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cea8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ceac:	4611      	mov	r1, r2
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ceb2:	e069      	b.n	800cf88 <HAL_UART_IRQHandler+0x7c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ceb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d010      	beq.n	800cee2 <HAL_UART_IRQHandler+0x71a>
 800cec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00a      	beq.n	800cee2 <HAL_UART_IRQHandler+0x71a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ced4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cee0:	e055      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d014      	beq.n	800cf18 <HAL_UART_IRQHandler+0x750>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ceee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d105      	bne.n	800cf06 <HAL_UART_IRQHandler+0x73e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cefa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cefe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d008      	beq.n	800cf18 <HAL_UART_IRQHandler+0x750>
  {
    if (huart->TxISR != NULL)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d03e      	beq.n	800cf8c <HAL_UART_IRQHandler+0x7c4>
    {
      huart->TxISR(huart);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	4798      	blx	r3
    }
    return;
 800cf16:	e039      	b.n	800cf8c <HAL_UART_IRQHandler+0x7c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d009      	beq.n	800cf38 <HAL_UART_IRQHandler+0x770>
 800cf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d003      	beq.n	800cf38 <HAL_UART_IRQHandler+0x770>
  {
    UART_EndTransmit_IT(huart);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 fabd 	bl	800e4b0 <UART_EndTransmit_IT>
    return;
 800cf36:	e02a      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00b      	beq.n	800cf5c <HAL_UART_IRQHandler+0x794>
 800cf44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d005      	beq.n	800cf5c <HAL_UART_IRQHandler+0x794>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf5a:	e018      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d012      	beq.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
 800cf68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	da0e      	bge.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf7a:	e008      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
      return;
 800cf7c:	bf00      	nop
 800cf7e:	e006      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
    return;
 800cf80:	bf00      	nop
 800cf82:	e004      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
      return;
 800cf84:	bf00      	nop
 800cf86:	e002      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
      return;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <HAL_UART_IRQHandler+0x7c6>
    return;
 800cf8c:	bf00      	nop
  }
}
 800cf8e:	37e8      	adds	r7, #232	@ 0xe8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	effffffe 	.word	0xeffffffe

0800cf98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a1a      	ldr	r2, [pc, #104]	@ (800d0c4 <UART_InitCallbacksToDefault+0x74>)
 800d05c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a19      	ldr	r2, [pc, #100]	@ (800d0c8 <UART_InitCallbacksToDefault+0x78>)
 800d064:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a18      	ldr	r2, [pc, #96]	@ (800d0cc <UART_InitCallbacksToDefault+0x7c>)
 800d06c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a17      	ldr	r2, [pc, #92]	@ (800d0d0 <UART_InitCallbacksToDefault+0x80>)
 800d074:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a16      	ldr	r2, [pc, #88]	@ (800d0d4 <UART_InitCallbacksToDefault+0x84>)
 800d07c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a15      	ldr	r2, [pc, #84]	@ (800d0d8 <UART_InitCallbacksToDefault+0x88>)
 800d084:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a14      	ldr	r2, [pc, #80]	@ (800d0dc <UART_InitCallbacksToDefault+0x8c>)
 800d08c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a13      	ldr	r2, [pc, #76]	@ (800d0e0 <UART_InitCallbacksToDefault+0x90>)
 800d094:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a12      	ldr	r2, [pc, #72]	@ (800d0e4 <UART_InitCallbacksToDefault+0x94>)
 800d09c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a11      	ldr	r2, [pc, #68]	@ (800d0e8 <UART_InitCallbacksToDefault+0x98>)
 800d0a4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a10      	ldr	r2, [pc, #64]	@ (800d0ec <UART_InitCallbacksToDefault+0x9c>)
 800d0ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f0 <UART_InitCallbacksToDefault+0xa0>)
 800d0b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr
 800d0c4:	0800cfad 	.word	0x0800cfad
 800d0c8:	0800cf99 	.word	0x0800cf99
 800d0cc:	0800cfd5 	.word	0x0800cfd5
 800d0d0:	0800cfc1 	.word	0x0800cfc1
 800d0d4:	0800cfe9 	.word	0x0800cfe9
 800d0d8:	0800cffd 	.word	0x0800cffd
 800d0dc:	0800d011 	.word	0x0800d011
 800d0e0:	0800d025 	.word	0x0800d025
 800d0e4:	0800e50b 	.word	0x0800e50b
 800d0e8:	0800e51f 	.word	0x0800e51f
 800d0ec:	0800e533 	.word	0x0800e533
 800d0f0:	0800d039 	.word	0x0800d039

0800d0f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0f8:	b092      	sub	sp, #72	@ 0x48
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	431a      	orrs	r2, r3
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	431a      	orrs	r2, r3
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	4313      	orrs	r3, r2
 800d11a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	4bbe      	ldr	r3, [pc, #760]	@ (800d41c <UART_SetConfig+0x328>)
 800d124:	4013      	ands	r3, r2
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	6812      	ldr	r2, [r2, #0]
 800d12a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d12c:	430b      	orrs	r3, r1
 800d12e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	68da      	ldr	r2, [r3, #12]
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4ab3      	ldr	r2, [pc, #716]	@ (800d420 <UART_SetConfig+0x32c>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d004      	beq.n	800d160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d15c:	4313      	orrs	r3, r2
 800d15e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	689a      	ldr	r2, [r3, #8]
 800d166:	4baf      	ldr	r3, [pc, #700]	@ (800d424 <UART_SetConfig+0x330>)
 800d168:	4013      	ands	r3, r2
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	6812      	ldr	r2, [r2, #0]
 800d16e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d170:	430b      	orrs	r3, r1
 800d172:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d17a:	f023 010f 	bic.w	r1, r3, #15
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	430a      	orrs	r2, r1
 800d188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4aa6      	ldr	r2, [pc, #664]	@ (800d428 <UART_SetConfig+0x334>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d177      	bne.n	800d284 <UART_SetConfig+0x190>
 800d194:	4ba5      	ldr	r3, [pc, #660]	@ (800d42c <UART_SetConfig+0x338>)
 800d196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d19c:	2b28      	cmp	r3, #40	@ 0x28
 800d19e:	d86d      	bhi.n	800d27c <UART_SetConfig+0x188>
 800d1a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a8 <UART_SetConfig+0xb4>)
 800d1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a6:	bf00      	nop
 800d1a8:	0800d24d 	.word	0x0800d24d
 800d1ac:	0800d27d 	.word	0x0800d27d
 800d1b0:	0800d27d 	.word	0x0800d27d
 800d1b4:	0800d27d 	.word	0x0800d27d
 800d1b8:	0800d27d 	.word	0x0800d27d
 800d1bc:	0800d27d 	.word	0x0800d27d
 800d1c0:	0800d27d 	.word	0x0800d27d
 800d1c4:	0800d27d 	.word	0x0800d27d
 800d1c8:	0800d255 	.word	0x0800d255
 800d1cc:	0800d27d 	.word	0x0800d27d
 800d1d0:	0800d27d 	.word	0x0800d27d
 800d1d4:	0800d27d 	.word	0x0800d27d
 800d1d8:	0800d27d 	.word	0x0800d27d
 800d1dc:	0800d27d 	.word	0x0800d27d
 800d1e0:	0800d27d 	.word	0x0800d27d
 800d1e4:	0800d27d 	.word	0x0800d27d
 800d1e8:	0800d25d 	.word	0x0800d25d
 800d1ec:	0800d27d 	.word	0x0800d27d
 800d1f0:	0800d27d 	.word	0x0800d27d
 800d1f4:	0800d27d 	.word	0x0800d27d
 800d1f8:	0800d27d 	.word	0x0800d27d
 800d1fc:	0800d27d 	.word	0x0800d27d
 800d200:	0800d27d 	.word	0x0800d27d
 800d204:	0800d27d 	.word	0x0800d27d
 800d208:	0800d265 	.word	0x0800d265
 800d20c:	0800d27d 	.word	0x0800d27d
 800d210:	0800d27d 	.word	0x0800d27d
 800d214:	0800d27d 	.word	0x0800d27d
 800d218:	0800d27d 	.word	0x0800d27d
 800d21c:	0800d27d 	.word	0x0800d27d
 800d220:	0800d27d 	.word	0x0800d27d
 800d224:	0800d27d 	.word	0x0800d27d
 800d228:	0800d26d 	.word	0x0800d26d
 800d22c:	0800d27d 	.word	0x0800d27d
 800d230:	0800d27d 	.word	0x0800d27d
 800d234:	0800d27d 	.word	0x0800d27d
 800d238:	0800d27d 	.word	0x0800d27d
 800d23c:	0800d27d 	.word	0x0800d27d
 800d240:	0800d27d 	.word	0x0800d27d
 800d244:	0800d27d 	.word	0x0800d27d
 800d248:	0800d275 	.word	0x0800d275
 800d24c:	2301      	movs	r3, #1
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d252:	e222      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d254:	2304      	movs	r3, #4
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25a:	e21e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d25c:	2308      	movs	r3, #8
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e21a      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d264:	2310      	movs	r3, #16
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e216      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d26c:	2320      	movs	r3, #32
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e212      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d274:	2340      	movs	r3, #64	@ 0x40
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e20e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d27c:	2380      	movs	r3, #128	@ 0x80
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d282:	e20a      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a69      	ldr	r2, [pc, #420]	@ (800d430 <UART_SetConfig+0x33c>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d130      	bne.n	800d2f0 <UART_SetConfig+0x1fc>
 800d28e:	4b67      	ldr	r3, [pc, #412]	@ (800d42c <UART_SetConfig+0x338>)
 800d290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	2b05      	cmp	r3, #5
 800d298:	d826      	bhi.n	800d2e8 <UART_SetConfig+0x1f4>
 800d29a:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a0 <UART_SetConfig+0x1ac>)
 800d29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a0:	0800d2b9 	.word	0x0800d2b9
 800d2a4:	0800d2c1 	.word	0x0800d2c1
 800d2a8:	0800d2c9 	.word	0x0800d2c9
 800d2ac:	0800d2d1 	.word	0x0800d2d1
 800d2b0:	0800d2d9 	.word	0x0800d2d9
 800d2b4:	0800d2e1 	.word	0x0800d2e1
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2be:	e1ec      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2c0:	2304      	movs	r3, #4
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c6:	e1e8      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2c8:	2308      	movs	r3, #8
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ce:	e1e4      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2d0:	2310      	movs	r3, #16
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d6:	e1e0      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2d8:	2320      	movs	r3, #32
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2de:	e1dc      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2e0:	2340      	movs	r3, #64	@ 0x40
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e6:	e1d8      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2e8:	2380      	movs	r3, #128	@ 0x80
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ee:	e1d4      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a4f      	ldr	r2, [pc, #316]	@ (800d434 <UART_SetConfig+0x340>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d130      	bne.n	800d35c <UART_SetConfig+0x268>
 800d2fa:	4b4c      	ldr	r3, [pc, #304]	@ (800d42c <UART_SetConfig+0x338>)
 800d2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2fe:	f003 0307 	and.w	r3, r3, #7
 800d302:	2b05      	cmp	r3, #5
 800d304:	d826      	bhi.n	800d354 <UART_SetConfig+0x260>
 800d306:	a201      	add	r2, pc, #4	@ (adr r2, 800d30c <UART_SetConfig+0x218>)
 800d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30c:	0800d325 	.word	0x0800d325
 800d310:	0800d32d 	.word	0x0800d32d
 800d314:	0800d335 	.word	0x0800d335
 800d318:	0800d33d 	.word	0x0800d33d
 800d31c:	0800d345 	.word	0x0800d345
 800d320:	0800d34d 	.word	0x0800d34d
 800d324:	2300      	movs	r3, #0
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32a:	e1b6      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d32c:	2304      	movs	r3, #4
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d332:	e1b2      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d334:	2308      	movs	r3, #8
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e1ae      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d33c:	2310      	movs	r3, #16
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e1aa      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d344:	2320      	movs	r3, #32
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e1a6      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d34c:	2340      	movs	r3, #64	@ 0x40
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e1a2      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d354:	2380      	movs	r3, #128	@ 0x80
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e19e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a35      	ldr	r2, [pc, #212]	@ (800d438 <UART_SetConfig+0x344>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d130      	bne.n	800d3c8 <UART_SetConfig+0x2d4>
 800d366:	4b31      	ldr	r3, [pc, #196]	@ (800d42c <UART_SetConfig+0x338>)
 800d368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d36a:	f003 0307 	and.w	r3, r3, #7
 800d36e:	2b05      	cmp	r3, #5
 800d370:	d826      	bhi.n	800d3c0 <UART_SetConfig+0x2cc>
 800d372:	a201      	add	r2, pc, #4	@ (adr r2, 800d378 <UART_SetConfig+0x284>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d391 	.word	0x0800d391
 800d37c:	0800d399 	.word	0x0800d399
 800d380:	0800d3a1 	.word	0x0800d3a1
 800d384:	0800d3a9 	.word	0x0800d3a9
 800d388:	0800d3b1 	.word	0x0800d3b1
 800d38c:	0800d3b9 	.word	0x0800d3b9
 800d390:	2300      	movs	r3, #0
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d396:	e180      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d398:	2304      	movs	r3, #4
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39e:	e17c      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d3a0:	2308      	movs	r3, #8
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e178      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d3a8:	2310      	movs	r3, #16
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e174      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d3b0:	2320      	movs	r3, #32
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e170      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d3b8:	2340      	movs	r3, #64	@ 0x40
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e16c      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d3c0:	2380      	movs	r3, #128	@ 0x80
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e168      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d43c <UART_SetConfig+0x348>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d142      	bne.n	800d458 <UART_SetConfig+0x364>
 800d3d2:	4b16      	ldr	r3, [pc, #88]	@ (800d42c <UART_SetConfig+0x338>)
 800d3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	2b05      	cmp	r3, #5
 800d3dc:	d838      	bhi.n	800d450 <UART_SetConfig+0x35c>
 800d3de:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e4 <UART_SetConfig+0x2f0>)
 800d3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e4:	0800d3fd 	.word	0x0800d3fd
 800d3e8:	0800d405 	.word	0x0800d405
 800d3ec:	0800d40d 	.word	0x0800d40d
 800d3f0:	0800d415 	.word	0x0800d415
 800d3f4:	0800d441 	.word	0x0800d441
 800d3f8:	0800d449 	.word	0x0800d449
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d402:	e14a      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d404:	2304      	movs	r3, #4
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40a:	e146      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d40c:	2308      	movs	r3, #8
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d412:	e142      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d414:	2310      	movs	r3, #16
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41a:	e13e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d41c:	cfff69f3 	.word	0xcfff69f3
 800d420:	58000c00 	.word	0x58000c00
 800d424:	11fff4ff 	.word	0x11fff4ff
 800d428:	40011000 	.word	0x40011000
 800d42c:	58024400 	.word	0x58024400
 800d430:	40004400 	.word	0x40004400
 800d434:	40004800 	.word	0x40004800
 800d438:	40004c00 	.word	0x40004c00
 800d43c:	40005000 	.word	0x40005000
 800d440:	2320      	movs	r3, #32
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d446:	e128      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d448:	2340      	movs	r3, #64	@ 0x40
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d44e:	e124      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d450:	2380      	movs	r3, #128	@ 0x80
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d456:	e120      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4acb      	ldr	r2, [pc, #812]	@ (800d78c <UART_SetConfig+0x698>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d176      	bne.n	800d550 <UART_SetConfig+0x45c>
 800d462:	4bcb      	ldr	r3, [pc, #812]	@ (800d790 <UART_SetConfig+0x69c>)
 800d464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d46a:	2b28      	cmp	r3, #40	@ 0x28
 800d46c:	d86c      	bhi.n	800d548 <UART_SetConfig+0x454>
 800d46e:	a201      	add	r2, pc, #4	@ (adr r2, 800d474 <UART_SetConfig+0x380>)
 800d470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d474:	0800d519 	.word	0x0800d519
 800d478:	0800d549 	.word	0x0800d549
 800d47c:	0800d549 	.word	0x0800d549
 800d480:	0800d549 	.word	0x0800d549
 800d484:	0800d549 	.word	0x0800d549
 800d488:	0800d549 	.word	0x0800d549
 800d48c:	0800d549 	.word	0x0800d549
 800d490:	0800d549 	.word	0x0800d549
 800d494:	0800d521 	.word	0x0800d521
 800d498:	0800d549 	.word	0x0800d549
 800d49c:	0800d549 	.word	0x0800d549
 800d4a0:	0800d549 	.word	0x0800d549
 800d4a4:	0800d549 	.word	0x0800d549
 800d4a8:	0800d549 	.word	0x0800d549
 800d4ac:	0800d549 	.word	0x0800d549
 800d4b0:	0800d549 	.word	0x0800d549
 800d4b4:	0800d529 	.word	0x0800d529
 800d4b8:	0800d549 	.word	0x0800d549
 800d4bc:	0800d549 	.word	0x0800d549
 800d4c0:	0800d549 	.word	0x0800d549
 800d4c4:	0800d549 	.word	0x0800d549
 800d4c8:	0800d549 	.word	0x0800d549
 800d4cc:	0800d549 	.word	0x0800d549
 800d4d0:	0800d549 	.word	0x0800d549
 800d4d4:	0800d531 	.word	0x0800d531
 800d4d8:	0800d549 	.word	0x0800d549
 800d4dc:	0800d549 	.word	0x0800d549
 800d4e0:	0800d549 	.word	0x0800d549
 800d4e4:	0800d549 	.word	0x0800d549
 800d4e8:	0800d549 	.word	0x0800d549
 800d4ec:	0800d549 	.word	0x0800d549
 800d4f0:	0800d549 	.word	0x0800d549
 800d4f4:	0800d539 	.word	0x0800d539
 800d4f8:	0800d549 	.word	0x0800d549
 800d4fc:	0800d549 	.word	0x0800d549
 800d500:	0800d549 	.word	0x0800d549
 800d504:	0800d549 	.word	0x0800d549
 800d508:	0800d549 	.word	0x0800d549
 800d50c:	0800d549 	.word	0x0800d549
 800d510:	0800d549 	.word	0x0800d549
 800d514:	0800d541 	.word	0x0800d541
 800d518:	2301      	movs	r3, #1
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e0bc      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d520:	2304      	movs	r3, #4
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e0b8      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d528:	2308      	movs	r3, #8
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52e:	e0b4      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d530:	2310      	movs	r3, #16
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d536:	e0b0      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d538:	2320      	movs	r3, #32
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53e:	e0ac      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d540:	2340      	movs	r3, #64	@ 0x40
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d546:	e0a8      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54e:	e0a4      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a8f      	ldr	r2, [pc, #572]	@ (800d794 <UART_SetConfig+0x6a0>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d130      	bne.n	800d5bc <UART_SetConfig+0x4c8>
 800d55a:	4b8d      	ldr	r3, [pc, #564]	@ (800d790 <UART_SetConfig+0x69c>)
 800d55c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d55e:	f003 0307 	and.w	r3, r3, #7
 800d562:	2b05      	cmp	r3, #5
 800d564:	d826      	bhi.n	800d5b4 <UART_SetConfig+0x4c0>
 800d566:	a201      	add	r2, pc, #4	@ (adr r2, 800d56c <UART_SetConfig+0x478>)
 800d568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56c:	0800d585 	.word	0x0800d585
 800d570:	0800d58d 	.word	0x0800d58d
 800d574:	0800d595 	.word	0x0800d595
 800d578:	0800d59d 	.word	0x0800d59d
 800d57c:	0800d5a5 	.word	0x0800d5a5
 800d580:	0800d5ad 	.word	0x0800d5ad
 800d584:	2300      	movs	r3, #0
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58a:	e086      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d58c:	2304      	movs	r3, #4
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d592:	e082      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d594:	2308      	movs	r3, #8
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59a:	e07e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d59c:	2310      	movs	r3, #16
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a2:	e07a      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d5a4:	2320      	movs	r3, #32
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5aa:	e076      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d5ac:	2340      	movs	r3, #64	@ 0x40
 800d5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b2:	e072      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d5b4:	2380      	movs	r3, #128	@ 0x80
 800d5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ba:	e06e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a75      	ldr	r2, [pc, #468]	@ (800d798 <UART_SetConfig+0x6a4>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d130      	bne.n	800d628 <UART_SetConfig+0x534>
 800d5c6:	4b72      	ldr	r3, [pc, #456]	@ (800d790 <UART_SetConfig+0x69c>)
 800d5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ca:	f003 0307 	and.w	r3, r3, #7
 800d5ce:	2b05      	cmp	r3, #5
 800d5d0:	d826      	bhi.n	800d620 <UART_SetConfig+0x52c>
 800d5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d5d8 <UART_SetConfig+0x4e4>)
 800d5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d8:	0800d5f1 	.word	0x0800d5f1
 800d5dc:	0800d5f9 	.word	0x0800d5f9
 800d5e0:	0800d601 	.word	0x0800d601
 800d5e4:	0800d609 	.word	0x0800d609
 800d5e8:	0800d611 	.word	0x0800d611
 800d5ec:	0800d619 	.word	0x0800d619
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f6:	e050      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d5f8:	2304      	movs	r3, #4
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fe:	e04c      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d600:	2308      	movs	r3, #8
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d606:	e048      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d608:	2310      	movs	r3, #16
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60e:	e044      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d610:	2320      	movs	r3, #32
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d616:	e040      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d618:	2340      	movs	r3, #64	@ 0x40
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61e:	e03c      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d620:	2380      	movs	r3, #128	@ 0x80
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d626:	e038      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a5b      	ldr	r2, [pc, #364]	@ (800d79c <UART_SetConfig+0x6a8>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d130      	bne.n	800d694 <UART_SetConfig+0x5a0>
 800d632:	4b57      	ldr	r3, [pc, #348]	@ (800d790 <UART_SetConfig+0x69c>)
 800d634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	2b05      	cmp	r3, #5
 800d63c:	d826      	bhi.n	800d68c <UART_SetConfig+0x598>
 800d63e:	a201      	add	r2, pc, #4	@ (adr r2, 800d644 <UART_SetConfig+0x550>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d65d 	.word	0x0800d65d
 800d648:	0800d665 	.word	0x0800d665
 800d64c:	0800d66d 	.word	0x0800d66d
 800d650:	0800d675 	.word	0x0800d675
 800d654:	0800d67d 	.word	0x0800d67d
 800d658:	0800d685 	.word	0x0800d685
 800d65c:	2302      	movs	r3, #2
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d662:	e01a      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d664:	2304      	movs	r3, #4
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66a:	e016      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d66c:	2308      	movs	r3, #8
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d672:	e012      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d674:	2310      	movs	r3, #16
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e00e      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d67c:	2320      	movs	r3, #32
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e00a      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d684:	2340      	movs	r3, #64	@ 0x40
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68a:	e006      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d68c:	2380      	movs	r3, #128	@ 0x80
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d692:	e002      	b.n	800d69a <UART_SetConfig+0x5a6>
 800d694:	2380      	movs	r3, #128	@ 0x80
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a3f      	ldr	r2, [pc, #252]	@ (800d79c <UART_SetConfig+0x6a8>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	f040 80f8 	bne.w	800d896 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d6a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6aa:	2b20      	cmp	r3, #32
 800d6ac:	dc46      	bgt.n	800d73c <UART_SetConfig+0x648>
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	f2c0 8082 	blt.w	800d7b8 <UART_SetConfig+0x6c4>
 800d6b4:	3b02      	subs	r3, #2
 800d6b6:	2b1e      	cmp	r3, #30
 800d6b8:	d87e      	bhi.n	800d7b8 <UART_SetConfig+0x6c4>
 800d6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c0 <UART_SetConfig+0x5cc>)
 800d6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c0:	0800d743 	.word	0x0800d743
 800d6c4:	0800d7b9 	.word	0x0800d7b9
 800d6c8:	0800d74b 	.word	0x0800d74b
 800d6cc:	0800d7b9 	.word	0x0800d7b9
 800d6d0:	0800d7b9 	.word	0x0800d7b9
 800d6d4:	0800d7b9 	.word	0x0800d7b9
 800d6d8:	0800d75b 	.word	0x0800d75b
 800d6dc:	0800d7b9 	.word	0x0800d7b9
 800d6e0:	0800d7b9 	.word	0x0800d7b9
 800d6e4:	0800d7b9 	.word	0x0800d7b9
 800d6e8:	0800d7b9 	.word	0x0800d7b9
 800d6ec:	0800d7b9 	.word	0x0800d7b9
 800d6f0:	0800d7b9 	.word	0x0800d7b9
 800d6f4:	0800d7b9 	.word	0x0800d7b9
 800d6f8:	0800d76b 	.word	0x0800d76b
 800d6fc:	0800d7b9 	.word	0x0800d7b9
 800d700:	0800d7b9 	.word	0x0800d7b9
 800d704:	0800d7b9 	.word	0x0800d7b9
 800d708:	0800d7b9 	.word	0x0800d7b9
 800d70c:	0800d7b9 	.word	0x0800d7b9
 800d710:	0800d7b9 	.word	0x0800d7b9
 800d714:	0800d7b9 	.word	0x0800d7b9
 800d718:	0800d7b9 	.word	0x0800d7b9
 800d71c:	0800d7b9 	.word	0x0800d7b9
 800d720:	0800d7b9 	.word	0x0800d7b9
 800d724:	0800d7b9 	.word	0x0800d7b9
 800d728:	0800d7b9 	.word	0x0800d7b9
 800d72c:	0800d7b9 	.word	0x0800d7b9
 800d730:	0800d7b9 	.word	0x0800d7b9
 800d734:	0800d7b9 	.word	0x0800d7b9
 800d738:	0800d7ab 	.word	0x0800d7ab
 800d73c:	2b40      	cmp	r3, #64	@ 0x40
 800d73e:	d037      	beq.n	800d7b0 <UART_SetConfig+0x6bc>
 800d740:	e03a      	b.n	800d7b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d742:	f7fb ff09 	bl	8009558 <HAL_RCCEx_GetD3PCLK1Freq>
 800d746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d748:	e03c      	b.n	800d7c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d74a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fb ff18 	bl	8009584 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d758:	e034      	b.n	800d7c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d75a:	f107 0318 	add.w	r3, r7, #24
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fc f864 	bl	800982c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d768:	e02c      	b.n	800d7c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d76a:	4b09      	ldr	r3, [pc, #36]	@ (800d790 <UART_SetConfig+0x69c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f003 0320 	and.w	r3, r3, #32
 800d772:	2b00      	cmp	r3, #0
 800d774:	d016      	beq.n	800d7a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d776:	4b06      	ldr	r3, [pc, #24]	@ (800d790 <UART_SetConfig+0x69c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	08db      	lsrs	r3, r3, #3
 800d77c:	f003 0303 	and.w	r3, r3, #3
 800d780:	4a07      	ldr	r2, [pc, #28]	@ (800d7a0 <UART_SetConfig+0x6ac>)
 800d782:	fa22 f303 	lsr.w	r3, r2, r3
 800d786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d788:	e01c      	b.n	800d7c4 <UART_SetConfig+0x6d0>
 800d78a:	bf00      	nop
 800d78c:	40011400 	.word	0x40011400
 800d790:	58024400 	.word	0x58024400
 800d794:	40007800 	.word	0x40007800
 800d798:	40007c00 	.word	0x40007c00
 800d79c:	58000c00 	.word	0x58000c00
 800d7a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d7a4:	4b9d      	ldr	r3, [pc, #628]	@ (800da1c <UART_SetConfig+0x928>)
 800d7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7a8:	e00c      	b.n	800d7c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7aa:	4b9d      	ldr	r3, [pc, #628]	@ (800da20 <UART_SetConfig+0x92c>)
 800d7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ae:	e009      	b.n	800d7c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7b6:	e005      	b.n	800d7c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 81de 	beq.w	800db88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d0:	4a94      	ldr	r2, [pc, #592]	@ (800da24 <UART_SetConfig+0x930>)
 800d7d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7da:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	685a      	ldr	r2, [r3, #4]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	4413      	add	r3, r2
 800d7ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d305      	bcc.n	800d7fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d903      	bls.n	800d804 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d802:	e1c1      	b.n	800db88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d806:	2200      	movs	r2, #0
 800d808:	60bb      	str	r3, [r7, #8]
 800d80a:	60fa      	str	r2, [r7, #12]
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d810:	4a84      	ldr	r2, [pc, #528]	@ (800da24 <UART_SetConfig+0x930>)
 800d812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d816:	b29b      	uxth	r3, r3
 800d818:	2200      	movs	r2, #0
 800d81a:	603b      	str	r3, [r7, #0]
 800d81c:	607a      	str	r2, [r7, #4]
 800d81e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d826:	f7f2 fdb3 	bl	8000390 <__aeabi_uldivmod>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4610      	mov	r0, r2
 800d830:	4619      	mov	r1, r3
 800d832:	f04f 0200 	mov.w	r2, #0
 800d836:	f04f 0300 	mov.w	r3, #0
 800d83a:	020b      	lsls	r3, r1, #8
 800d83c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d840:	0202      	lsls	r2, r0, #8
 800d842:	6979      	ldr	r1, [r7, #20]
 800d844:	6849      	ldr	r1, [r1, #4]
 800d846:	0849      	lsrs	r1, r1, #1
 800d848:	2000      	movs	r0, #0
 800d84a:	460c      	mov	r4, r1
 800d84c:	4605      	mov	r5, r0
 800d84e:	eb12 0804 	adds.w	r8, r2, r4
 800d852:	eb43 0905 	adc.w	r9, r3, r5
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	469a      	mov	sl, r3
 800d85e:	4693      	mov	fp, r2
 800d860:	4652      	mov	r2, sl
 800d862:	465b      	mov	r3, fp
 800d864:	4640      	mov	r0, r8
 800d866:	4649      	mov	r1, r9
 800d868:	f7f2 fd92 	bl	8000390 <__aeabi_uldivmod>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4613      	mov	r3, r2
 800d872:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d87a:	d308      	bcc.n	800d88e <UART_SetConfig+0x79a>
 800d87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d882:	d204      	bcs.n	800d88e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d88a:	60da      	str	r2, [r3, #12]
 800d88c:	e17c      	b.n	800db88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d894:	e178      	b.n	800db88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d89e:	f040 80c5 	bne.w	800da2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d8a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8a6:	2b20      	cmp	r3, #32
 800d8a8:	dc48      	bgt.n	800d93c <UART_SetConfig+0x848>
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	db7b      	blt.n	800d9a6 <UART_SetConfig+0x8b2>
 800d8ae:	2b20      	cmp	r3, #32
 800d8b0:	d879      	bhi.n	800d9a6 <UART_SetConfig+0x8b2>
 800d8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b8 <UART_SetConfig+0x7c4>)
 800d8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b8:	0800d943 	.word	0x0800d943
 800d8bc:	0800d94b 	.word	0x0800d94b
 800d8c0:	0800d9a7 	.word	0x0800d9a7
 800d8c4:	0800d9a7 	.word	0x0800d9a7
 800d8c8:	0800d953 	.word	0x0800d953
 800d8cc:	0800d9a7 	.word	0x0800d9a7
 800d8d0:	0800d9a7 	.word	0x0800d9a7
 800d8d4:	0800d9a7 	.word	0x0800d9a7
 800d8d8:	0800d963 	.word	0x0800d963
 800d8dc:	0800d9a7 	.word	0x0800d9a7
 800d8e0:	0800d9a7 	.word	0x0800d9a7
 800d8e4:	0800d9a7 	.word	0x0800d9a7
 800d8e8:	0800d9a7 	.word	0x0800d9a7
 800d8ec:	0800d9a7 	.word	0x0800d9a7
 800d8f0:	0800d9a7 	.word	0x0800d9a7
 800d8f4:	0800d9a7 	.word	0x0800d9a7
 800d8f8:	0800d973 	.word	0x0800d973
 800d8fc:	0800d9a7 	.word	0x0800d9a7
 800d900:	0800d9a7 	.word	0x0800d9a7
 800d904:	0800d9a7 	.word	0x0800d9a7
 800d908:	0800d9a7 	.word	0x0800d9a7
 800d90c:	0800d9a7 	.word	0x0800d9a7
 800d910:	0800d9a7 	.word	0x0800d9a7
 800d914:	0800d9a7 	.word	0x0800d9a7
 800d918:	0800d9a7 	.word	0x0800d9a7
 800d91c:	0800d9a7 	.word	0x0800d9a7
 800d920:	0800d9a7 	.word	0x0800d9a7
 800d924:	0800d9a7 	.word	0x0800d9a7
 800d928:	0800d9a7 	.word	0x0800d9a7
 800d92c:	0800d9a7 	.word	0x0800d9a7
 800d930:	0800d9a7 	.word	0x0800d9a7
 800d934:	0800d9a7 	.word	0x0800d9a7
 800d938:	0800d999 	.word	0x0800d999
 800d93c:	2b40      	cmp	r3, #64	@ 0x40
 800d93e:	d02e      	beq.n	800d99e <UART_SetConfig+0x8aa>
 800d940:	e031      	b.n	800d9a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d942:	f7fa fb91 	bl	8008068 <HAL_RCC_GetPCLK1Freq>
 800d946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d948:	e033      	b.n	800d9b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d94a:	f7fa fba3 	bl	8008094 <HAL_RCC_GetPCLK2Freq>
 800d94e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d950:	e02f      	b.n	800d9b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d956:	4618      	mov	r0, r3
 800d958:	f7fb fe14 	bl	8009584 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d960:	e027      	b.n	800d9b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d962:	f107 0318 	add.w	r3, r7, #24
 800d966:	4618      	mov	r0, r3
 800d968:	f7fb ff60 	bl	800982c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d970:	e01f      	b.n	800d9b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d972:	4b2d      	ldr	r3, [pc, #180]	@ (800da28 <UART_SetConfig+0x934>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f003 0320 	and.w	r3, r3, #32
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d009      	beq.n	800d992 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d97e:	4b2a      	ldr	r3, [pc, #168]	@ (800da28 <UART_SetConfig+0x934>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	08db      	lsrs	r3, r3, #3
 800d984:	f003 0303 	and.w	r3, r3, #3
 800d988:	4a24      	ldr	r2, [pc, #144]	@ (800da1c <UART_SetConfig+0x928>)
 800d98a:	fa22 f303 	lsr.w	r3, r2, r3
 800d98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d990:	e00f      	b.n	800d9b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d992:	4b22      	ldr	r3, [pc, #136]	@ (800da1c <UART_SetConfig+0x928>)
 800d994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d996:	e00c      	b.n	800d9b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d998:	4b21      	ldr	r3, [pc, #132]	@ (800da20 <UART_SetConfig+0x92c>)
 800d99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d99c:	e009      	b.n	800d9b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d99e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9a4:	e005      	b.n	800d9b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d9b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 80e7 	beq.w	800db88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9be:	4a19      	ldr	r2, [pc, #100]	@ (800da24 <UART_SetConfig+0x930>)
 800d9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9cc:	005a      	lsls	r2, r3, #1
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	085b      	lsrs	r3, r3, #1
 800d9d4:	441a      	add	r2, r3
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e2:	2b0f      	cmp	r3, #15
 800d9e4:	d916      	bls.n	800da14 <UART_SetConfig+0x920>
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9ec:	d212      	bcs.n	800da14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f023 030f 	bic.w	r3, r3, #15
 800d9f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fa:	085b      	lsrs	r3, r3, #1
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	b29a      	uxth	r2, r3
 800da04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da06:	4313      	orrs	r3, r2
 800da08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800da10:	60da      	str	r2, [r3, #12]
 800da12:	e0b9      	b.n	800db88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da1a:	e0b5      	b.n	800db88 <UART_SetConfig+0xa94>
 800da1c:	03d09000 	.word	0x03d09000
 800da20:	003d0900 	.word	0x003d0900
 800da24:	080260f8 	.word	0x080260f8
 800da28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800da2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da30:	2b20      	cmp	r3, #32
 800da32:	dc49      	bgt.n	800dac8 <UART_SetConfig+0x9d4>
 800da34:	2b00      	cmp	r3, #0
 800da36:	db7c      	blt.n	800db32 <UART_SetConfig+0xa3e>
 800da38:	2b20      	cmp	r3, #32
 800da3a:	d87a      	bhi.n	800db32 <UART_SetConfig+0xa3e>
 800da3c:	a201      	add	r2, pc, #4	@ (adr r2, 800da44 <UART_SetConfig+0x950>)
 800da3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da42:	bf00      	nop
 800da44:	0800dacf 	.word	0x0800dacf
 800da48:	0800dad7 	.word	0x0800dad7
 800da4c:	0800db33 	.word	0x0800db33
 800da50:	0800db33 	.word	0x0800db33
 800da54:	0800dadf 	.word	0x0800dadf
 800da58:	0800db33 	.word	0x0800db33
 800da5c:	0800db33 	.word	0x0800db33
 800da60:	0800db33 	.word	0x0800db33
 800da64:	0800daef 	.word	0x0800daef
 800da68:	0800db33 	.word	0x0800db33
 800da6c:	0800db33 	.word	0x0800db33
 800da70:	0800db33 	.word	0x0800db33
 800da74:	0800db33 	.word	0x0800db33
 800da78:	0800db33 	.word	0x0800db33
 800da7c:	0800db33 	.word	0x0800db33
 800da80:	0800db33 	.word	0x0800db33
 800da84:	0800daff 	.word	0x0800daff
 800da88:	0800db33 	.word	0x0800db33
 800da8c:	0800db33 	.word	0x0800db33
 800da90:	0800db33 	.word	0x0800db33
 800da94:	0800db33 	.word	0x0800db33
 800da98:	0800db33 	.word	0x0800db33
 800da9c:	0800db33 	.word	0x0800db33
 800daa0:	0800db33 	.word	0x0800db33
 800daa4:	0800db33 	.word	0x0800db33
 800daa8:	0800db33 	.word	0x0800db33
 800daac:	0800db33 	.word	0x0800db33
 800dab0:	0800db33 	.word	0x0800db33
 800dab4:	0800db33 	.word	0x0800db33
 800dab8:	0800db33 	.word	0x0800db33
 800dabc:	0800db33 	.word	0x0800db33
 800dac0:	0800db33 	.word	0x0800db33
 800dac4:	0800db25 	.word	0x0800db25
 800dac8:	2b40      	cmp	r3, #64	@ 0x40
 800daca:	d02e      	beq.n	800db2a <UART_SetConfig+0xa36>
 800dacc:	e031      	b.n	800db32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dace:	f7fa facb 	bl	8008068 <HAL_RCC_GetPCLK1Freq>
 800dad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dad4:	e033      	b.n	800db3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dad6:	f7fa fadd 	bl	8008094 <HAL_RCC_GetPCLK2Freq>
 800dada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dadc:	e02f      	b.n	800db3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fb fd4e 	bl	8009584 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daec:	e027      	b.n	800db3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daee:	f107 0318 	add.w	r3, r7, #24
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fb fe9a 	bl	800982c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dafc:	e01f      	b.n	800db3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dafe:	4b2d      	ldr	r3, [pc, #180]	@ (800dbb4 <UART_SetConfig+0xac0>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 0320 	and.w	r3, r3, #32
 800db06:	2b00      	cmp	r3, #0
 800db08:	d009      	beq.n	800db1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db0a:	4b2a      	ldr	r3, [pc, #168]	@ (800dbb4 <UART_SetConfig+0xac0>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	08db      	lsrs	r3, r3, #3
 800db10:	f003 0303 	and.w	r3, r3, #3
 800db14:	4a28      	ldr	r2, [pc, #160]	@ (800dbb8 <UART_SetConfig+0xac4>)
 800db16:	fa22 f303 	lsr.w	r3, r2, r3
 800db1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db1c:	e00f      	b.n	800db3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800db1e:	4b26      	ldr	r3, [pc, #152]	@ (800dbb8 <UART_SetConfig+0xac4>)
 800db20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db22:	e00c      	b.n	800db3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db24:	4b25      	ldr	r3, [pc, #148]	@ (800dbbc <UART_SetConfig+0xac8>)
 800db26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db28:	e009      	b.n	800db3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db30:	e005      	b.n	800db3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800db32:	2300      	movs	r3, #0
 800db34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800db3c:	bf00      	nop
    }

    if (pclk != 0U)
 800db3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db40:	2b00      	cmp	r3, #0
 800db42:	d021      	beq.n	800db88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db48:	4a1d      	ldr	r2, [pc, #116]	@ (800dbc0 <UART_SetConfig+0xacc>)
 800db4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db4e:	461a      	mov	r2, r3
 800db50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db52:	fbb3 f2f2 	udiv	r2, r3, r2
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	085b      	lsrs	r3, r3, #1
 800db5c:	441a      	add	r2, r3
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	fbb2 f3f3 	udiv	r3, r2, r3
 800db66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6a:	2b0f      	cmp	r3, #15
 800db6c:	d909      	bls.n	800db82 <UART_SetConfig+0xa8e>
 800db6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db74:	d205      	bcs.n	800db82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db78:	b29a      	uxth	r2, r3
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	60da      	str	r2, [r3, #12]
 800db80:	e002      	b.n	800db88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800db82:	2301      	movs	r3, #1
 800db84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	2201      	movs	r2, #1
 800db94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2200      	movs	r2, #0
 800db9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2200      	movs	r2, #0
 800dba2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dba4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3748      	adds	r7, #72	@ 0x48
 800dbac:	46bd      	mov	sp, r7
 800dbae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbb2:	bf00      	nop
 800dbb4:	58024400 	.word	0x58024400
 800dbb8:	03d09000 	.word	0x03d09000
 800dbbc:	003d0900 	.word	0x003d0900
 800dbc0:	080260f8 	.word	0x080260f8

0800dbc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd0:	f003 0308 	and.w	r3, r3, #8
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00a      	beq.n	800dbee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc14:	f003 0302 	and.w	r3, r3, #2
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00a      	beq.n	800dc32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc36:	f003 0304 	and.w	r3, r3, #4
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	430a      	orrs	r2, r1
 800dc52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc58:	f003 0310 	and.w	r3, r3, #16
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00a      	beq.n	800dc76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	430a      	orrs	r2, r1
 800dc74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7a:	f003 0320 	and.w	r3, r3, #32
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00a      	beq.n	800dc98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	430a      	orrs	r2, r1
 800dc96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d01a      	beq.n	800dcda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	430a      	orrs	r2, r1
 800dcb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcc2:	d10a      	bne.n	800dcda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00a      	beq.n	800dcfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	605a      	str	r2, [r3, #4]
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b098      	sub	sp, #96	@ 0x60
 800dd0c:	af02      	add	r7, sp, #8
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd18:	f7f4 f978 	bl	800200c <HAL_GetTick>
 800dd1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 0308 	and.w	r3, r3, #8
 800dd28:	2b08      	cmp	r3, #8
 800dd2a:	d12f      	bne.n	800dd8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd34:	2200      	movs	r2, #0
 800dd36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f88e 	bl	800de5c <UART_WaitOnFlagUntilTimeout>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d022      	beq.n	800dd8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4e:	e853 3f00 	ldrex	r3, [r3]
 800dd52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	461a      	mov	r2, r3
 800dd62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd64:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd6c:	e841 2300 	strex	r3, r2, [r1]
 800dd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e6      	bne.n	800dd46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2220      	movs	r2, #32
 800dd7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	e063      	b.n	800de54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f003 0304 	and.w	r3, r3, #4
 800dd96:	2b04      	cmp	r3, #4
 800dd98:	d149      	bne.n	800de2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dda2:	2200      	movs	r2, #0
 800dda4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f857 	bl	800de5c <UART_WaitOnFlagUntilTimeout>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d03c      	beq.n	800de2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbc:	e853 3f00 	ldrex	r3, [r3]
 800ddc0:	623b      	str	r3, [r7, #32]
   return(result);
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddda:	e841 2300 	strex	r3, r2, [r1]
 800ddde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1e6      	bne.n	800ddb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	e853 3f00 	ldrex	r3, [r3]
 800ddf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f023 0301 	bic.w	r3, r3, #1
 800ddfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3308      	adds	r3, #8
 800de04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de06:	61fa      	str	r2, [r7, #28]
 800de08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de0a:	69b9      	ldr	r1, [r7, #24]
 800de0c:	69fa      	ldr	r2, [r7, #28]
 800de0e:	e841 2300 	strex	r3, r2, [r1]
 800de12:	617b      	str	r3, [r7, #20]
   return(result);
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1e5      	bne.n	800dde6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2220      	movs	r2, #32
 800de1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e012      	b.n	800de54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2220      	movs	r2, #32
 800de32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2220      	movs	r2, #32
 800de3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3758      	adds	r7, #88	@ 0x58
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	4613      	mov	r3, r2
 800de6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de6c:	e04f      	b.n	800df0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de74:	d04b      	beq.n	800df0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de76:	f7f4 f8c9 	bl	800200c <HAL_GetTick>
 800de7a:	4602      	mov	r2, r0
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	69ba      	ldr	r2, [r7, #24]
 800de82:	429a      	cmp	r2, r3
 800de84:	d302      	bcc.n	800de8c <UART_WaitOnFlagUntilTimeout+0x30>
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de8c:	2303      	movs	r3, #3
 800de8e:	e04e      	b.n	800df2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 0304 	and.w	r3, r3, #4
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d037      	beq.n	800df0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2b80      	cmp	r3, #128	@ 0x80
 800dea2:	d034      	beq.n	800df0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	2b40      	cmp	r3, #64	@ 0x40
 800dea8:	d031      	beq.n	800df0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	f003 0308 	and.w	r3, r3, #8
 800deb4:	2b08      	cmp	r3, #8
 800deb6:	d110      	bne.n	800deda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2208      	movs	r2, #8
 800debe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f000 f921 	bl	800e108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2208      	movs	r2, #8
 800deca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e029      	b.n	800df2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dee8:	d111      	bne.n	800df0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800def2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f000 f907 	bl	800e108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2220      	movs	r2, #32
 800defe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e00f      	b.n	800df2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	4013      	ands	r3, r2
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	bf0c      	ite	eq
 800df1e:	2301      	moveq	r3, #1
 800df20:	2300      	movne	r3, #0
 800df22:	b2db      	uxtb	r3, r3
 800df24:	461a      	mov	r2, r3
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d0a0      	beq.n	800de6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b096      	sub	sp, #88	@ 0x58
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	4613      	mov	r3, r2
 800df44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	88fa      	ldrh	r2, [r7, #6]
 800df50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2222      	movs	r2, #34	@ 0x22
 800df60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d02d      	beq.n	800dfca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df74:	4a40      	ldr	r2, [pc, #256]	@ (800e078 <UART_Start_Receive_DMA+0x140>)
 800df76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df7e:	4a3f      	ldr	r2, [pc, #252]	@ (800e07c <UART_Start_Receive_DMA+0x144>)
 800df80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df88:	4a3d      	ldr	r2, [pc, #244]	@ (800e080 <UART_Start_Receive_DMA+0x148>)
 800df8a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df92:	2200      	movs	r2, #0
 800df94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3324      	adds	r3, #36	@ 0x24
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	88fb      	ldrh	r3, [r7, #6]
 800dfac:	f7f4 fca6 	bl	80028fc <HAL_DMA_Start_IT>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d009      	beq.n	800dfca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2210      	movs	r2, #16
 800dfba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2220      	movs	r2, #32
 800dfc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e051      	b.n	800e06e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d018      	beq.n	800e004 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfda:	e853 3f00 	ldrex	r3, [r3]
 800dfde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dfe6:	657b      	str	r3, [r7, #84]	@ 0x54
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	461a      	mov	r2, r3
 800dfee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dff2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dff8:	e841 2300 	strex	r3, r2, [r1]
 800dffc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1e6      	bne.n	800dfd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3308      	adds	r3, #8
 800e00a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e00e:	e853 3f00 	ldrex	r3, [r3]
 800e012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e016:	f043 0301 	orr.w	r3, r3, #1
 800e01a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3308      	adds	r3, #8
 800e022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e024:	637a      	str	r2, [r7, #52]	@ 0x34
 800e026:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e028:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e02a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e02c:	e841 2300 	strex	r3, r2, [r1]
 800e030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d1e5      	bne.n	800e004 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3308      	adds	r3, #8
 800e03e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	e853 3f00 	ldrex	r3, [r3]
 800e046:	613b      	str	r3, [r7, #16]
   return(result);
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e04e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3308      	adds	r3, #8
 800e056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e058:	623a      	str	r2, [r7, #32]
 800e05a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05c:	69f9      	ldr	r1, [r7, #28]
 800e05e:	6a3a      	ldr	r2, [r7, #32]
 800e060:	e841 2300 	strex	r3, r2, [r1]
 800e064:	61bb      	str	r3, [r7, #24]
   return(result);
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1e5      	bne.n	800e038 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3758      	adds	r7, #88	@ 0x58
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	0800e28f 	.word	0x0800e28f
 800e07c:	0800e3bf 	.word	0x0800e3bf
 800e080:	0800e405 	.word	0x0800e405

0800e084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e084:	b480      	push	{r7}
 800e086:	b08f      	sub	sp, #60	@ 0x3c
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	e853 3f00 	ldrex	r3, [r3]
 800e098:	61fb      	str	r3, [r7, #28]
   return(result);
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0b2:	e841 2300 	strex	r3, r2, [r1]
 800e0b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1e6      	bne.n	800e08c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	e853 3f00 	ldrex	r3, [r3]
 800e0cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e0d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3308      	adds	r3, #8
 800e0dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0de:	61ba      	str	r2, [r7, #24]
 800e0e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e2:	6979      	ldr	r1, [r7, #20]
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1e5      	bne.n	800e0be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e0fa:	bf00      	nop
 800e0fc:	373c      	adds	r7, #60	@ 0x3c
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
	...

0800e108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e108:	b480      	push	{r7}
 800e10a:	b095      	sub	sp, #84	@ 0x54
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e118:	e853 3f00 	ldrex	r3, [r3]
 800e11c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	461a      	mov	r2, r3
 800e12c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e12e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e130:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e132:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e134:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e136:	e841 2300 	strex	r3, r2, [r1]
 800e13a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1e6      	bne.n	800e110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	3308      	adds	r3, #8
 800e148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	e853 3f00 	ldrex	r3, [r3]
 800e150:	61fb      	str	r3, [r7, #28]
   return(result);
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d0 <UART_EndRxTransfer+0xc8>)
 800e156:	4013      	ands	r3, r2
 800e158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3308      	adds	r3, #8
 800e160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e164:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e16a:	e841 2300 	strex	r3, r2, [r1]
 800e16e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1e5      	bne.n	800e142 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d118      	bne.n	800e1b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	e853 3f00 	ldrex	r3, [r3]
 800e18a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	f023 0310 	bic.w	r3, r3, #16
 800e192:	647b      	str	r3, [r7, #68]	@ 0x44
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	461a      	mov	r2, r3
 800e19a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e19c:	61bb      	str	r3, [r7, #24]
 800e19e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a0:	6979      	ldr	r1, [r7, #20]
 800e1a2:	69ba      	ldr	r2, [r7, #24]
 800e1a4:	e841 2300 	strex	r3, r2, [r1]
 800e1a8:	613b      	str	r3, [r7, #16]
   return(result);
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1e6      	bne.n	800e17e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2220      	movs	r2, #32
 800e1b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e1c4:	bf00      	nop
 800e1c6:	3754      	adds	r7, #84	@ 0x54
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	effffffe 	.word	0xeffffffe

0800e1d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b090      	sub	sp, #64	@ 0x40
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1ea:	d037      	beq.n	800e25c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3308      	adds	r3, #8
 800e1fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fe:	e853 3f00 	ldrex	r3, [r3]
 800e202:	623b      	str	r3, [r7, #32]
   return(result);
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e20a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e20c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	3308      	adds	r3, #8
 800e212:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e214:	633a      	str	r2, [r7, #48]	@ 0x30
 800e216:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e218:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e21a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e21c:	e841 2300 	strex	r3, r2, [r1]
 800e220:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e224:	2b00      	cmp	r3, #0
 800e226:	d1e5      	bne.n	800e1f4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	e853 3f00 	ldrex	r3, [r3]
 800e234:	60fb      	str	r3, [r7, #12]
   return(result);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e23e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e246:	61fb      	str	r3, [r7, #28]
 800e248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24a:	69b9      	ldr	r1, [r7, #24]
 800e24c:	69fa      	ldr	r2, [r7, #28]
 800e24e:	e841 2300 	strex	r3, r2, [r1]
 800e252:	617b      	str	r3, [r7, #20]
   return(result);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1e6      	bne.n	800e228 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e25a:	e004      	b.n	800e266 <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 800e25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e25e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e262:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e264:	4798      	blx	r3
}
 800e266:	bf00      	nop
 800e268:	3740      	adds	r7, #64	@ 0x40
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b084      	sub	sp, #16
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e27a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b09c      	sub	sp, #112	@ 0x70
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e29a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	69db      	ldr	r3, [r3, #28]
 800e2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2a4:	d071      	beq.n	800e38a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e2a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2b6:	e853 3f00 	ldrex	r3, [r3]
 800e2ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e2bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e2c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e2cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2d4:	e841 2300 	strex	r3, r2, [r1]
 800e2d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e2da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d1e6      	bne.n	800e2ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ea:	e853 3f00 	ldrex	r3, [r3]
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f2:	f023 0301 	bic.w	r3, r3, #1
 800e2f6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	3308      	adds	r3, #8
 800e2fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e300:	647a      	str	r2, [r7, #68]	@ 0x44
 800e302:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e308:	e841 2300 	strex	r3, r2, [r1]
 800e30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1e5      	bne.n	800e2e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3308      	adds	r3, #8
 800e31a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31e:	e853 3f00 	ldrex	r3, [r3]
 800e322:	623b      	str	r3, [r7, #32]
   return(result);
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e32a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e32c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3308      	adds	r3, #8
 800e332:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e334:	633a      	str	r2, [r7, #48]	@ 0x30
 800e336:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e33c:	e841 2300 	strex	r3, r2, [r1]
 800e340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1e5      	bne.n	800e314 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e34a:	2220      	movs	r2, #32
 800e34c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e354:	2b01      	cmp	r3, #1
 800e356:	d118      	bne.n	800e38a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	60fb      	str	r3, [r7, #12]
   return(result);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f023 0310 	bic.w	r3, r3, #16
 800e36c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e36e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	69b9      	ldr	r1, [r7, #24]
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	e841 2300 	strex	r3, r2, [r1]
 800e382:	617b      	str	r3, [r7, #20]
   return(result);
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e6      	bne.n	800e358 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e38a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e38c:	2200      	movs	r2, #0
 800e38e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e394:	2b01      	cmp	r3, #1
 800e396:	d109      	bne.n	800e3ac <UART_DMAReceiveCplt+0x11e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e39a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e39e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e3a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e3a8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3aa:	e004      	b.n	800e3b6 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800e3ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e3b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e3b4:	4798      	blx	r3
}
 800e3b6:	bf00      	nop
 800e3b8:	3770      	adds	r7, #112	@ 0x70
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d10b      	bne.n	800e3f2 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e3e6:	0852      	lsrs	r2, r2, #1
 800e3e8:	b292      	uxth	r2, r2
 800e3ea:	4611      	mov	r1, r2
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3f0:	e004      	b.n	800e3fc <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	4798      	blx	r3
}
 800e3fc:	bf00      	nop
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e410:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e418:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e420:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e42c:	2b80      	cmp	r3, #128	@ 0x80
 800e42e:	d109      	bne.n	800e444 <UART_DMAError+0x40>
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	2b21      	cmp	r3, #33	@ 0x21
 800e434:	d106      	bne.n	800e444 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	2200      	movs	r2, #0
 800e43a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e43e:	6978      	ldr	r0, [r7, #20]
 800e440:	f7ff fe20 	bl	800e084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e44e:	2b40      	cmp	r3, #64	@ 0x40
 800e450:	d109      	bne.n	800e466 <UART_DMAError+0x62>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b22      	cmp	r3, #34	@ 0x22
 800e456:	d106      	bne.n	800e466 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e460:	6978      	ldr	r0, [r7, #20]
 800e462:	f7ff fe51 	bl	800e108 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e46c:	f043 0210 	orr.w	r2, r3, #16
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e47c:	6978      	ldr	r0, [r7, #20]
 800e47e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e480:	bf00      	nop
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4a8:	bf00      	nop
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b088      	sub	sp, #32
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4cc:	61fb      	str	r3, [r7, #28]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	61bb      	str	r3, [r7, #24]
 800e4d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4da:	6979      	ldr	r1, [r7, #20]
 800e4dc:	69ba      	ldr	r2, [r7, #24]
 800e4de:	e841 2300 	strex	r3, r2, [r1]
 800e4e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1e6      	bne.n	800e4b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2220      	movs	r2, #32
 800e4ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e502:	bf00      	nop
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e50a:	b480      	push	{r7}
 800e50c:	b083      	sub	sp, #12
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e512:	bf00      	nop
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e51e:	b480      	push	{r7}
 800e520:	b083      	sub	sp, #12
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e526:	bf00      	nop
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e532:	b480      	push	{r7}
 800e534:	b083      	sub	sp, #12
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e53a:	bf00      	nop
 800e53c:	370c      	adds	r7, #12
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e546:	b480      	push	{r7}
 800e548:	b085      	sub	sp, #20
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e554:	2b01      	cmp	r3, #1
 800e556:	d101      	bne.n	800e55c <HAL_UARTEx_DisableFifoMode+0x16>
 800e558:	2302      	movs	r3, #2
 800e55a:	e027      	b.n	800e5ac <HAL_UARTEx_DisableFifoMode+0x66>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2224      	movs	r2, #36	@ 0x24
 800e568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 0201 	bic.w	r2, r2, #1
 800e582:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e58a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2220      	movs	r2, #32
 800e59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3714      	adds	r7, #20
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d101      	bne.n	800e5d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	e02d      	b.n	800e62c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2224      	movs	r2, #36	@ 0x24
 800e5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f022 0201 	bic.w	r2, r2, #1
 800e5f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	430a      	orrs	r2, r1
 800e60a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 f8a3 	bl	800e758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2220      	movs	r2, #32
 800e61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2200      	movs	r2, #0
 800e626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e644:	2b01      	cmp	r3, #1
 800e646:	d101      	bne.n	800e64c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e648:	2302      	movs	r3, #2
 800e64a:	e02d      	b.n	800e6a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2224      	movs	r2, #36	@ 0x24
 800e658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f022 0201 	bic.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	430a      	orrs	r2, r1
 800e686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f865 	bl	800e758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2220      	movs	r2, #32
 800e69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b08c      	sub	sp, #48	@ 0x30
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	d142      	bne.n	800e74e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e6ce:	88fb      	ldrh	r3, [r7, #6]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e03b      	b.n	800e750 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e6e4:	88fb      	ldrh	r3, [r7, #6]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	68b9      	ldr	r1, [r7, #8]
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7ff fc24 	bl	800df38 <UART_Start_Receive_DMA>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e6f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d124      	bne.n	800e748 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e702:	2b01      	cmp	r3, #1
 800e704:	d11d      	bne.n	800e742 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2210      	movs	r2, #16
 800e70c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	e853 3f00 	ldrex	r3, [r3]
 800e71a:	617b      	str	r3, [r7, #20]
   return(result);
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f043 0310 	orr.w	r3, r3, #16
 800e722:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	461a      	mov	r2, r3
 800e72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e72c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e72e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e730:	6a39      	ldr	r1, [r7, #32]
 800e732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e734:	e841 2300 	strex	r3, r2, [r1]
 800e738:	61fb      	str	r3, [r7, #28]
   return(result);
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e6      	bne.n	800e70e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800e740:	e002      	b.n	800e748 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800e748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e74c:	e000      	b.n	800e750 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e74e:	2302      	movs	r3, #2
  }
}
 800e750:	4618      	mov	r0, r3
 800e752:	3730      	adds	r7, #48	@ 0x30
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e764:	2b00      	cmp	r3, #0
 800e766:	d108      	bne.n	800e77a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2201      	movs	r2, #1
 800e76c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2201      	movs	r2, #1
 800e774:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e778:	e031      	b.n	800e7de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e77a:	2310      	movs	r3, #16
 800e77c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e77e:	2310      	movs	r3, #16
 800e780:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	0e5b      	lsrs	r3, r3, #25
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	f003 0307 	and.w	r3, r3, #7
 800e790:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	0f5b      	lsrs	r3, r3, #29
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f003 0307 	and.w	r3, r3, #7
 800e7a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7a2:	7bbb      	ldrb	r3, [r7, #14]
 800e7a4:	7b3a      	ldrb	r2, [r7, #12]
 800e7a6:	4911      	ldr	r1, [pc, #68]	@ (800e7ec <UARTEx_SetNbDataToProcess+0x94>)
 800e7a8:	5c8a      	ldrb	r2, [r1, r2]
 800e7aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7ae:	7b3a      	ldrb	r2, [r7, #12]
 800e7b0:	490f      	ldr	r1, [pc, #60]	@ (800e7f0 <UARTEx_SetNbDataToProcess+0x98>)
 800e7b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
 800e7c2:	7b7a      	ldrb	r2, [r7, #13]
 800e7c4:	4909      	ldr	r1, [pc, #36]	@ (800e7ec <UARTEx_SetNbDataToProcess+0x94>)
 800e7c6:	5c8a      	ldrb	r2, [r1, r2]
 800e7c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7cc:	7b7a      	ldrb	r2, [r7, #13]
 800e7ce:	4908      	ldr	r1, [pc, #32]	@ (800e7f0 <UARTEx_SetNbDataToProcess+0x98>)
 800e7d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e7de:	bf00      	nop
 800e7e0:	3714      	adds	r7, #20
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	08026110 	.word	0x08026110
 800e7f0:	08026118 	.word	0x08026118

0800e7f4 <__NVIC_SetPriority>:
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	6039      	str	r1, [r7, #0]
 800e7fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e804:	2b00      	cmp	r3, #0
 800e806:	db0a      	blt.n	800e81e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	490c      	ldr	r1, [pc, #48]	@ (800e840 <__NVIC_SetPriority+0x4c>)
 800e80e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e812:	0112      	lsls	r2, r2, #4
 800e814:	b2d2      	uxtb	r2, r2
 800e816:	440b      	add	r3, r1
 800e818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e81c:	e00a      	b.n	800e834 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	b2da      	uxtb	r2, r3
 800e822:	4908      	ldr	r1, [pc, #32]	@ (800e844 <__NVIC_SetPriority+0x50>)
 800e824:	88fb      	ldrh	r3, [r7, #6]
 800e826:	f003 030f 	and.w	r3, r3, #15
 800e82a:	3b04      	subs	r3, #4
 800e82c:	0112      	lsls	r2, r2, #4
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	440b      	add	r3, r1
 800e832:	761a      	strb	r2, [r3, #24]
}
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	e000e100 	.word	0xe000e100
 800e844:	e000ed00 	.word	0xe000ed00

0800e848 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e84c:	4b05      	ldr	r3, [pc, #20]	@ (800e864 <SysTick_Handler+0x1c>)
 800e84e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e850:	f002 fb60 	bl	8010f14 <xTaskGetSchedulerState>
 800e854:	4603      	mov	r3, r0
 800e856:	2b01      	cmp	r3, #1
 800e858:	d001      	beq.n	800e85e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e85a:	f003 fbfd 	bl	8012058 <xPortSysTickHandler>
  }
}
 800e85e:	bf00      	nop
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	e000e010 	.word	0xe000e010

0800e868 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e868:	b580      	push	{r7, lr}
 800e86a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e86c:	2100      	movs	r1, #0
 800e86e:	f06f 0004 	mvn.w	r0, #4
 800e872:	f7ff ffbf 	bl	800e7f4 <__NVIC_SetPriority>
#endif
}
 800e876:	bf00      	nop
 800e878:	bd80      	pop	{r7, pc}
	...

0800e87c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e882:	f3ef 8305 	mrs	r3, IPSR
 800e886:	603b      	str	r3, [r7, #0]
  return(result);
 800e888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e88e:	f06f 0305 	mvn.w	r3, #5
 800e892:	607b      	str	r3, [r7, #4]
 800e894:	e00c      	b.n	800e8b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e896:	4b0a      	ldr	r3, [pc, #40]	@ (800e8c0 <osKernelInitialize+0x44>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d105      	bne.n	800e8aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e89e:	4b08      	ldr	r3, [pc, #32]	@ (800e8c0 <osKernelInitialize+0x44>)
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	607b      	str	r3, [r7, #4]
 800e8a8:	e002      	b.n	800e8b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e8aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8b0:	687b      	ldr	r3, [r7, #4]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	24000bc4 	.word	0x24000bc4

0800e8c4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800e8ca:	f002 fb23 	bl	8010f14 <xTaskGetSchedulerState>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d004      	beq.n	800e8de <osKernelGetState+0x1a>
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d105      	bne.n	800e8e4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800e8d8:	2302      	movs	r3, #2
 800e8da:	607b      	str	r3, [r7, #4]
      break;
 800e8dc:	e00c      	b.n	800e8f8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	607b      	str	r3, [r7, #4]
      break;
 800e8e2:	e009      	b.n	800e8f8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800e8e4:	4b07      	ldr	r3, [pc, #28]	@ (800e904 <osKernelGetState+0x40>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d102      	bne.n	800e8f2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800e8f0:	e001      	b.n	800e8f6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	607b      	str	r3, [r7, #4]
      break;
 800e8f6:	bf00      	nop
  }

  return (state);
 800e8f8:	687b      	ldr	r3, [r7, #4]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	24000bc4 	.word	0x24000bc4

0800e908 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e90e:	f3ef 8305 	mrs	r3, IPSR
 800e912:	603b      	str	r3, [r7, #0]
  return(result);
 800e914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e916:	2b00      	cmp	r3, #0
 800e918:	d003      	beq.n	800e922 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e91a:	f06f 0305 	mvn.w	r3, #5
 800e91e:	607b      	str	r3, [r7, #4]
 800e920:	e010      	b.n	800e944 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e922:	4b0b      	ldr	r3, [pc, #44]	@ (800e950 <osKernelStart+0x48>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d109      	bne.n	800e93e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e92a:	f7ff ff9d 	bl	800e868 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e92e:	4b08      	ldr	r3, [pc, #32]	@ (800e950 <osKernelStart+0x48>)
 800e930:	2202      	movs	r2, #2
 800e932:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e934:	f001 fe68 	bl	8010608 <vTaskStartScheduler>
      stat = osOK;
 800e938:	2300      	movs	r3, #0
 800e93a:	607b      	str	r3, [r7, #4]
 800e93c:	e002      	b.n	800e944 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e93e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e944:	687b      	ldr	r3, [r7, #4]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	24000bc4 	.word	0x24000bc4

0800e954 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e95a:	f3ef 8305 	mrs	r3, IPSR
 800e95e:	603b      	str	r3, [r7, #0]
  return(result);
 800e960:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e966:	f001 ff7b 	bl	8010860 <xTaskGetTickCountFromISR>
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	e002      	b.n	800e974 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e96e:	f001 ff67 	bl	8010840 <xTaskGetTickCount>
 800e972:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e974:	687b      	ldr	r3, [r7, #4]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e97e:	b580      	push	{r7, lr}
 800e980:	b08e      	sub	sp, #56	@ 0x38
 800e982:	af04      	add	r7, sp, #16
 800e984:	60f8      	str	r0, [r7, #12]
 800e986:	60b9      	str	r1, [r7, #8]
 800e988:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e98a:	2300      	movs	r3, #0
 800e98c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e98e:	f3ef 8305 	mrs	r3, IPSR
 800e992:	617b      	str	r3, [r7, #20]
  return(result);
 800e994:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e996:	2b00      	cmp	r3, #0
 800e998:	d17e      	bne.n	800ea98 <osThreadNew+0x11a>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d07b      	beq.n	800ea98 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e9a0:	2380      	movs	r3, #128	@ 0x80
 800e9a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e9a4:	2318      	movs	r3, #24
 800e9a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e9ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e9b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d045      	beq.n	800ea44 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d002      	beq.n	800e9c6 <osThreadNew+0x48>
        name = attr->name;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d008      	beq.n	800e9ec <osThreadNew+0x6e>
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	2b38      	cmp	r3, #56	@ 0x38
 800e9de:	d805      	bhi.n	800e9ec <osThreadNew+0x6e>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <osThreadNew+0x72>
        return (NULL);
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	e054      	b.n	800ea9a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	089b      	lsrs	r3, r3, #2
 800e9fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00e      	beq.n	800ea26 <osThreadNew+0xa8>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	2ba7      	cmp	r3, #167	@ 0xa7
 800ea0e:	d90a      	bls.n	800ea26 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d006      	beq.n	800ea26 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	695b      	ldr	r3, [r3, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d002      	beq.n	800ea26 <osThreadNew+0xa8>
        mem = 1;
 800ea20:	2301      	movs	r3, #1
 800ea22:	61bb      	str	r3, [r7, #24]
 800ea24:	e010      	b.n	800ea48 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10c      	bne.n	800ea48 <osThreadNew+0xca>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d108      	bne.n	800ea48 <osThreadNew+0xca>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d104      	bne.n	800ea48 <osThreadNew+0xca>
          mem = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	61bb      	str	r3, [r7, #24]
 800ea42:	e001      	b.n	800ea48 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ea44:	2300      	movs	r3, #0
 800ea46:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d110      	bne.n	800ea70 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea56:	9202      	str	r2, [sp, #8]
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	6a3a      	ldr	r2, [r7, #32]
 800ea62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f001 fb5b 	bl	8010120 <xTaskCreateStatic>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	613b      	str	r3, [r7, #16]
 800ea6e:	e013      	b.n	800ea98 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d110      	bne.n	800ea98 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	f107 0310 	add.w	r3, r7, #16
 800ea7e:	9301      	str	r3, [sp, #4]
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f001 fba9 	bl	80101e0 <xTaskCreate>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d001      	beq.n	800ea98 <osThreadNew+0x11a>
            hTask = NULL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea98:	693b      	ldr	r3, [r7, #16]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3728      	adds	r7, #40	@ 0x28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaaa:	f3ef 8305 	mrs	r3, IPSR
 800eaae:	60bb      	str	r3, [r7, #8]
  return(result);
 800eab0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <osDelay+0x1c>
    stat = osErrorISR;
 800eab6:	f06f 0305 	mvn.w	r3, #5
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	e007      	b.n	800eace <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <osDelay+0x2c>
      vTaskDelay(ticks);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f001 fd67 	bl	801059c <vTaskDelay>
    }
  }

  return (stat);
 800eace:	68fb      	ldr	r3, [r7, #12]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eae0:	f3ef 8305 	mrs	r3, IPSR
 800eae4:	60fb      	str	r3, [r7, #12]
  return(result);
 800eae6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d003      	beq.n	800eaf4 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800eaec:	f06f 0305 	mvn.w	r3, #5
 800eaf0:	617b      	str	r3, [r7, #20]
 800eaf2:	e019      	b.n	800eb28 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800eaf8:	f001 fea2 	bl	8010840 <xTaskGetTickCount>
 800eafc:	4603      	mov	r3, r0
 800eafe:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d009      	beq.n	800eb22 <osDelayUntil+0x4a>
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	db06      	blt.n	800eb22 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800eb14:	f107 0308 	add.w	r3, r7, #8
 800eb18:	6939      	ldr	r1, [r7, #16]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f001 fcbe 	bl	801049c <vTaskDelayUntil>
 800eb20:	e002      	b.n	800eb28 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800eb22:	f06f 0303 	mvn.w	r3, #3
 800eb26:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800eb28:	697b      	ldr	r3, [r7, #20]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f003 f8a6 	bl	8011c8c <pvTimerGetTimerID>
 800eb40:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d005      	beq.n	800eb54 <TimerCallback+0x22>
    callb->func (callb->arg);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	6852      	ldr	r2, [r2, #4]
 800eb50:	4610      	mov	r0, r2
 800eb52:	4798      	blx	r3
  }
}
 800eb54:	bf00      	nop
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08c      	sub	sp, #48	@ 0x30
 800eb60:	af02      	add	r7, sp, #8
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	607a      	str	r2, [r7, #4]
 800eb66:	603b      	str	r3, [r7, #0]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb70:	f3ef 8305 	mrs	r3, IPSR
 800eb74:	613b      	str	r3, [r7, #16]
  return(result);
 800eb76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d163      	bne.n	800ec44 <osTimerNew+0xe8>
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d060      	beq.n	800ec44 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800eb82:	2008      	movs	r0, #8
 800eb84:	f003 fafa 	bl	801217c <pvPortMalloc>
 800eb88:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d059      	beq.n	800ec44 <osTimerNew+0xe8>
      callb->func = func;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800eb9c:	7afb      	ldrb	r3, [r7, #11]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d102      	bne.n	800eba8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800eba2:	2300      	movs	r3, #0
 800eba4:	61fb      	str	r3, [r7, #28]
 800eba6:	e001      	b.n	800ebac <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ebac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ebb0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d01c      	beq.n	800ebf6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <osTimerNew+0x6e>
          name = attr->name;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d006      	beq.n	800ebe0 <osTimerNew+0x84>
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ebd8:	d902      	bls.n	800ebe0 <osTimerNew+0x84>
          mem = 1;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	61bb      	str	r3, [r7, #24]
 800ebde:	e00c      	b.n	800ebfa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d108      	bne.n	800ebfa <osTimerNew+0x9e>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <osTimerNew+0x9e>
            mem = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	61bb      	str	r3, [r7, #24]
 800ebf4:	e001      	b.n	800ebfa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d10c      	bne.n	800ec1a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	9301      	str	r3, [sp, #4]
 800ec06:	4b12      	ldr	r3, [pc, #72]	@ (800ec50 <osTimerNew+0xf4>)
 800ec08:	9300      	str	r3, [sp, #0]
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	69fa      	ldr	r2, [r7, #28]
 800ec0e:	2101      	movs	r1, #1
 800ec10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec12:	f002 fcae 	bl	8011572 <xTimerCreateStatic>
 800ec16:	6238      	str	r0, [r7, #32]
 800ec18:	e00b      	b.n	800ec32 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d108      	bne.n	800ec32 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ec20:	4b0b      	ldr	r3, [pc, #44]	@ (800ec50 <osTimerNew+0xf4>)
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	69fa      	ldr	r2, [r7, #28]
 800ec28:	2101      	movs	r1, #1
 800ec2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec2c:	f002 fc80 	bl	8011530 <xTimerCreate>
 800ec30:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ec32:	6a3b      	ldr	r3, [r7, #32]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <osTimerNew+0xe8>
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <osTimerNew+0xe8>
        vPortFree (callb);
 800ec3e:	6978      	ldr	r0, [r7, #20]
 800ec40:	f003 fb6a 	bl	8012318 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ec44:	6a3b      	ldr	r3, [r7, #32]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3728      	adds	r7, #40	@ 0x28
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	0800eb33 	.word	0x0800eb33

0800ec54 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08a      	sub	sp, #40	@ 0x28
 800ec58:	af02      	add	r7, sp, #8
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec64:	f3ef 8305 	mrs	r3, IPSR
 800ec68:	613b      	str	r3, [r7, #16]
  return(result);
 800ec6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d175      	bne.n	800ed5c <osSemaphoreNew+0x108>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d072      	beq.n	800ed5c <osSemaphoreNew+0x108>
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d86e      	bhi.n	800ed5c <osSemaphoreNew+0x108>
    mem = -1;
 800ec7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d015      	beq.n	800ecb6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d006      	beq.n	800eca0 <osSemaphoreNew+0x4c>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	2b4f      	cmp	r3, #79	@ 0x4f
 800ec98:	d902      	bls.n	800eca0 <osSemaphoreNew+0x4c>
        mem = 1;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	61bb      	str	r3, [r7, #24]
 800ec9e:	e00c      	b.n	800ecba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d108      	bne.n	800ecba <osSemaphoreNew+0x66>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d104      	bne.n	800ecba <osSemaphoreNew+0x66>
          mem = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	61bb      	str	r3, [r7, #24]
 800ecb4:	e001      	b.n	800ecba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecc0:	d04c      	beq.n	800ed5c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d128      	bne.n	800ed1a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d10a      	bne.n	800ece4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	2203      	movs	r2, #3
 800ecd4:	9200      	str	r2, [sp, #0]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2100      	movs	r1, #0
 800ecda:	2001      	movs	r0, #1
 800ecdc:	f000 fa2c 	bl	800f138 <xQueueGenericCreateStatic>
 800ece0:	61f8      	str	r0, [r7, #28]
 800ece2:	e005      	b.n	800ecf0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ece4:	2203      	movs	r2, #3
 800ece6:	2100      	movs	r1, #0
 800ece8:	2001      	movs	r0, #1
 800ecea:	f000 faa2 	bl	800f232 <xQueueGenericCreate>
 800ecee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d022      	beq.n	800ed3c <osSemaphoreNew+0xe8>
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d01f      	beq.n	800ed3c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	2200      	movs	r2, #0
 800ed00:	2100      	movs	r1, #0
 800ed02:	69f8      	ldr	r0, [r7, #28]
 800ed04:	f000 fb94 	bl	800f430 <xQueueGenericSend>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d016      	beq.n	800ed3c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ed0e:	69f8      	ldr	r0, [r7, #28]
 800ed10:	f001 f832 	bl	800fd78 <vQueueDelete>
            hSemaphore = NULL;
 800ed14:	2300      	movs	r3, #0
 800ed16:	61fb      	str	r3, [r7, #28]
 800ed18:	e010      	b.n	800ed3c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d108      	bne.n	800ed32 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	689b      	ldr	r3, [r3, #8]
 800ed24:	461a      	mov	r2, r3
 800ed26:	68b9      	ldr	r1, [r7, #8]
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f000 fb12 	bl	800f352 <xQueueCreateCountingSemaphoreStatic>
 800ed2e:	61f8      	str	r0, [r7, #28]
 800ed30:	e004      	b.n	800ed3c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f000 fb45 	bl	800f3c4 <xQueueCreateCountingSemaphore>
 800ed3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00c      	beq.n	800ed5c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d003      	beq.n	800ed50 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	617b      	str	r3, [r7, #20]
 800ed4e:	e001      	b.n	800ed54 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ed50:	2300      	movs	r3, #0
 800ed52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ed54:	6979      	ldr	r1, [r7, #20]
 800ed56:	69f8      	ldr	r0, [r7, #28]
 800ed58:	f001 f95a 	bl	8010010 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ed5c:	69fb      	ldr	r3, [r7, #28]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3720      	adds	r7, #32
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d103      	bne.n	800ed88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ed80:	f06f 0303 	mvn.w	r3, #3
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	e039      	b.n	800edfc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed88:	f3ef 8305 	mrs	r3, IPSR
 800ed8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d022      	beq.n	800edda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d003      	beq.n	800eda2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ed9a:	f06f 0303 	mvn.w	r3, #3
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	e02c      	b.n	800edfc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800eda2:	2300      	movs	r3, #0
 800eda4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eda6:	f107 0308 	add.w	r3, r7, #8
 800edaa:	461a      	mov	r2, r3
 800edac:	2100      	movs	r1, #0
 800edae:	6938      	ldr	r0, [r7, #16]
 800edb0:	f000 ff60 	bl	800fc74 <xQueueReceiveFromISR>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d003      	beq.n	800edc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800edba:	f06f 0302 	mvn.w	r3, #2
 800edbe:	617b      	str	r3, [r7, #20]
 800edc0:	e01c      	b.n	800edfc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d019      	beq.n	800edfc <osSemaphoreAcquire+0x94>
 800edc8:	4b0f      	ldr	r3, [pc, #60]	@ (800ee08 <osSemaphoreAcquire+0xa0>)
 800edca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edce:	601a      	str	r2, [r3, #0]
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	e010      	b.n	800edfc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	6938      	ldr	r0, [r7, #16]
 800edde:	f000 fe39 	bl	800fa54 <xQueueSemaphoreTake>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d009      	beq.n	800edfc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d003      	beq.n	800edf6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800edee:	f06f 0301 	mvn.w	r3, #1
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	e002      	b.n	800edfc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800edf6:	f06f 0302 	mvn.w	r3, #2
 800edfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800edfc:	697b      	ldr	r3, [r7, #20]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3718      	adds	r7, #24
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d103      	bne.n	800ee2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ee22:	f06f 0303 	mvn.w	r3, #3
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	e02c      	b.n	800ee84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee2a:	f3ef 8305 	mrs	r3, IPSR
 800ee2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d01a      	beq.n	800ee6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ee36:	2300      	movs	r3, #0
 800ee38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee3a:	f107 0308 	add.w	r3, r7, #8
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6938      	ldr	r0, [r7, #16]
 800ee42:	f000 fc95 	bl	800f770 <xQueueGiveFromISR>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d003      	beq.n	800ee54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ee4c:	f06f 0302 	mvn.w	r3, #2
 800ee50:	617b      	str	r3, [r7, #20]
 800ee52:	e017      	b.n	800ee84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d014      	beq.n	800ee84 <osSemaphoreRelease+0x78>
 800ee5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee90 <osSemaphoreRelease+0x84>)
 800ee5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	e00b      	b.n	800ee84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	2200      	movs	r2, #0
 800ee70:	2100      	movs	r1, #0
 800ee72:	6938      	ldr	r0, [r7, #16]
 800ee74:	f000 fadc 	bl	800f430 <xQueueGenericSend>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d002      	beq.n	800ee84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ee7e:	f06f 0302 	mvn.w	r3, #2
 800ee82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ee84:	697b      	ldr	r3, [r7, #20]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3718      	adds	r7, #24
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	e000ed04 	.word	0xe000ed04

0800ee94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4a07      	ldr	r2, [pc, #28]	@ (800eec0 <vApplicationGetIdleTaskMemory+0x2c>)
 800eea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	4a06      	ldr	r2, [pc, #24]	@ (800eec4 <vApplicationGetIdleTaskMemory+0x30>)
 800eeaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2280      	movs	r2, #128	@ 0x80
 800eeb0:	601a      	str	r2, [r3, #0]
}
 800eeb2:	bf00      	nop
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	24000bc8 	.word	0x24000bc8
 800eec4:	24000c70 	.word	0x24000c70

0800eec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	4a07      	ldr	r2, [pc, #28]	@ (800eef4 <vApplicationGetTimerTaskMemory+0x2c>)
 800eed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	4a06      	ldr	r2, [pc, #24]	@ (800eef8 <vApplicationGetTimerTaskMemory+0x30>)
 800eede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eee6:	601a      	str	r2, [r3, #0]
}
 800eee8:	bf00      	nop
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr
 800eef4:	24000e70 	.word	0x24000e70
 800eef8:	24000f18 	.word	0x24000f18

0800eefc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f103 0208 	add.w	r2, r3, #8
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f103 0208 	add.w	r2, r3, #8
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f103 0208 	add.w	r2, r3, #8
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ef30:	bf00      	nop
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ef4a:	bf00      	nop
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef56:	b480      	push	{r7}
 800ef58:	b085      	sub	sp, #20
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	689a      	ldr	r2, [r3, #8]
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	683a      	ldr	r2, [r7, #0]
 800ef80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	1c5a      	adds	r2, r3, #1
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	601a      	str	r2, [r3, #0]
}
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b085      	sub	sp, #20
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efb4:	d103      	bne.n	800efbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	60fb      	str	r3, [r7, #12]
 800efbc:	e00c      	b.n	800efd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3308      	adds	r3, #8
 800efc2:	60fb      	str	r3, [r7, #12]
 800efc4:	e002      	b.n	800efcc <vListInsert+0x2e>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d2f6      	bcs.n	800efc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	601a      	str	r2, [r3, #0]
}
 800f004:	bf00      	nop
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	6892      	ldr	r2, [r2, #8]
 800f026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	6852      	ldr	r2, [r2, #4]
 800f030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d103      	bne.n	800f044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	689a      	ldr	r2, [r3, #8]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	1e5a      	subs	r2, r3, #1
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3714      	adds	r7, #20
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10b      	bne.n	800f090 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f08a:	bf00      	nop
 800f08c:	bf00      	nop
 800f08e:	e7fd      	b.n	800f08c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f090:	f002 ff52 	bl	8011f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f09c:	68f9      	ldr	r1, [r7, #12]
 800f09e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f0a0:	fb01 f303 	mul.w	r3, r1, r3
 800f0a4:	441a      	add	r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	68f9      	ldr	r1, [r7, #12]
 800f0c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f0c6:	fb01 f303 	mul.w	r3, r1, r3
 800f0ca:	441a      	add	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	22ff      	movs	r2, #255	@ 0xff
 800f0d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	22ff      	movs	r2, #255	@ 0xff
 800f0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d114      	bne.n	800f110 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d01a      	beq.n	800f124 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3310      	adds	r3, #16
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f001 fd38 	bl	8010b68 <xTaskRemoveFromEventList>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d012      	beq.n	800f124 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f134 <xQueueGenericReset+0xd0>)
 800f100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	f3bf 8f6f 	isb	sy
 800f10e:	e009      	b.n	800f124 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	3310      	adds	r3, #16
 800f114:	4618      	mov	r0, r3
 800f116:	f7ff fef1 	bl	800eefc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3324      	adds	r3, #36	@ 0x24
 800f11e:	4618      	mov	r0, r3
 800f120:	f7ff feec 	bl	800eefc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f124:	f002 ff3a 	bl	8011f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f128:	2301      	movs	r3, #1
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	e000ed04 	.word	0xe000ed04

0800f138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08e      	sub	sp, #56	@ 0x38
 800f13c:	af02      	add	r7, sp, #8
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10b      	bne.n	800f164 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f15e:	bf00      	nop
 800f160:	bf00      	nop
 800f162:	e7fd      	b.n	800f160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10b      	bne.n	800f182 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f17c:	bf00      	nop
 800f17e:	bf00      	nop
 800f180:	e7fd      	b.n	800f17e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <xQueueGenericCreateStatic+0x56>
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <xQueueGenericCreateStatic+0x5a>
 800f18e:	2301      	movs	r3, #1
 800f190:	e000      	b.n	800f194 <xQueueGenericCreateStatic+0x5c>
 800f192:	2300      	movs	r3, #0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d10b      	bne.n	800f1b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19c:	f383 8811 	msr	BASEPRI, r3
 800f1a0:	f3bf 8f6f 	isb	sy
 800f1a4:	f3bf 8f4f 	dsb	sy
 800f1a8:	623b      	str	r3, [r7, #32]
}
 800f1aa:	bf00      	nop
 800f1ac:	bf00      	nop
 800f1ae:	e7fd      	b.n	800f1ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d102      	bne.n	800f1bc <xQueueGenericCreateStatic+0x84>
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d101      	bne.n	800f1c0 <xQueueGenericCreateStatic+0x88>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e000      	b.n	800f1c2 <xQueueGenericCreateStatic+0x8a>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10b      	bne.n	800f1de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	61fb      	str	r3, [r7, #28]
}
 800f1d8:	bf00      	nop
 800f1da:	bf00      	nop
 800f1dc:	e7fd      	b.n	800f1da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f1de:	2350      	movs	r3, #80	@ 0x50
 800f1e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2b50      	cmp	r3, #80	@ 0x50
 800f1e6:	d00b      	beq.n	800f200 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	61bb      	str	r3, [r7, #24]
}
 800f1fa:	bf00      	nop
 800f1fc:	bf00      	nop
 800f1fe:	e7fd      	b.n	800f1fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f200:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00d      	beq.n	800f228 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f214:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	4613      	mov	r3, r2
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	68b9      	ldr	r1, [r7, #8]
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f000 f840 	bl	800f2a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3730      	adds	r7, #48	@ 0x30
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f232:	b580      	push	{r7, lr}
 800f234:	b08a      	sub	sp, #40	@ 0x28
 800f236:	af02      	add	r7, sp, #8
 800f238:	60f8      	str	r0, [r7, #12]
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	4613      	mov	r3, r2
 800f23e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10b      	bne.n	800f25e <xQueueGenericCreate+0x2c>
	__asm volatile
 800f246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24a:	f383 8811 	msr	BASEPRI, r3
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	613b      	str	r3, [r7, #16]
}
 800f258:	bf00      	nop
 800f25a:	bf00      	nop
 800f25c:	e7fd      	b.n	800f25a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	fb02 f303 	mul.w	r3, r2, r3
 800f266:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	3350      	adds	r3, #80	@ 0x50
 800f26c:	4618      	mov	r0, r3
 800f26e:	f002 ff85 	bl	801217c <pvPortMalloc>
 800f272:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d011      	beq.n	800f29e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	3350      	adds	r3, #80	@ 0x50
 800f282:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f28c:	79fa      	ldrb	r2, [r7, #7]
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	4613      	mov	r3, r2
 800f294:	697a      	ldr	r2, [r7, #20]
 800f296:	68b9      	ldr	r1, [r7, #8]
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 f805 	bl	800f2a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f29e:	69bb      	ldr	r3, [r7, #24]
	}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3720      	adds	r7, #32
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d103      	bne.n	800f2c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	69ba      	ldr	r2, [r7, #24]
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	e002      	b.n	800f2ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	69b8      	ldr	r0, [r7, #24]
 800f2da:	f7ff fec3 	bl	800f064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	78fa      	ldrb	r2, [r7, #3]
 800f2e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f2e6:	bf00      	nop
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00e      	beq.n	800f31a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f30e:	2300      	movs	r3, #0
 800f310:	2200      	movs	r2, #0
 800f312:	2100      	movs	r1, #0
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f88b 	bl	800f430 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f31a:	bf00      	nop
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f322:	b580      	push	{r7, lr}
 800f324:	b086      	sub	sp, #24
 800f326:	af00      	add	r7, sp, #0
 800f328:	4603      	mov	r3, r0
 800f32a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f32c:	2301      	movs	r3, #1
 800f32e:	617b      	str	r3, [r7, #20]
 800f330:	2300      	movs	r3, #0
 800f332:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	461a      	mov	r2, r3
 800f338:	6939      	ldr	r1, [r7, #16]
 800f33a:	6978      	ldr	r0, [r7, #20]
 800f33c:	f7ff ff79 	bl	800f232 <xQueueGenericCreate>
 800f340:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f7ff ffd3 	bl	800f2ee <prvInitialiseMutex>

		return xNewQueue;
 800f348:	68fb      	ldr	r3, [r7, #12]
	}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f352:	b580      	push	{r7, lr}
 800f354:	b08a      	sub	sp, #40	@ 0x28
 800f356:	af02      	add	r7, sp, #8
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	60b9      	str	r1, [r7, #8]
 800f35c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10b      	bne.n	800f37c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f368:	f383 8811 	msr	BASEPRI, r3
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	f3bf 8f4f 	dsb	sy
 800f374:	61bb      	str	r3, [r7, #24]
}
 800f376:	bf00      	nop
 800f378:	bf00      	nop
 800f37a:	e7fd      	b.n	800f378 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	429a      	cmp	r2, r3
 800f382:	d90b      	bls.n	800f39c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800f384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	617b      	str	r3, [r7, #20]
}
 800f396:	bf00      	nop
 800f398:	bf00      	nop
 800f39a:	e7fd      	b.n	800f398 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f39c:	2302      	movs	r3, #2
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	2100      	movs	r1, #0
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7ff fec6 	bl	800f138 <xQueueGenericCreateStatic>
 800f3ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	68ba      	ldr	r2, [r7, #8]
 800f3b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f3ba:	69fb      	ldr	r3, [r7, #28]
	}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3720      	adds	r7, #32
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10b      	bne.n	800f3ec <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d8:	f383 8811 	msr	BASEPRI, r3
 800f3dc:	f3bf 8f6f 	isb	sy
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	613b      	str	r3, [r7, #16]
}
 800f3e6:	bf00      	nop
 800f3e8:	bf00      	nop
 800f3ea:	e7fd      	b.n	800f3e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d90b      	bls.n	800f40c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	60fb      	str	r3, [r7, #12]
}
 800f406:	bf00      	nop
 800f408:	bf00      	nop
 800f40a:	e7fd      	b.n	800f408 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f40c:	2202      	movs	r2, #2
 800f40e:	2100      	movs	r1, #0
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff ff0e 	bl	800f232 <xQueueGenericCreate>
 800f416:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	683a      	ldr	r2, [r7, #0]
 800f422:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f424:	697b      	ldr	r3, [r7, #20]
	}
 800f426:	4618      	mov	r0, r3
 800f428:	3718      	adds	r7, #24
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
	...

0800f430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b08e      	sub	sp, #56	@ 0x38
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
 800f43c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f43e:	2300      	movs	r3, #0
 800f440:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10b      	bne.n	800f464 <xQueueGenericSend+0x34>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	e7fd      	b.n	800f460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d103      	bne.n	800f472 <xQueueGenericSend+0x42>
 800f46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <xQueueGenericSend+0x46>
 800f472:	2301      	movs	r3, #1
 800f474:	e000      	b.n	800f478 <xQueueGenericSend+0x48>
 800f476:	2300      	movs	r3, #0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10b      	bne.n	800f494 <xQueueGenericSend+0x64>
	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f48e:	bf00      	nop
 800f490:	bf00      	nop
 800f492:	e7fd      	b.n	800f490 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2b02      	cmp	r3, #2
 800f498:	d103      	bne.n	800f4a2 <xQueueGenericSend+0x72>
 800f49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d101      	bne.n	800f4a6 <xQueueGenericSend+0x76>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e000      	b.n	800f4a8 <xQueueGenericSend+0x78>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d10b      	bne.n	800f4c4 <xQueueGenericSend+0x94>
	__asm volatile
 800f4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b0:	f383 8811 	msr	BASEPRI, r3
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	623b      	str	r3, [r7, #32]
}
 800f4be:	bf00      	nop
 800f4c0:	bf00      	nop
 800f4c2:	e7fd      	b.n	800f4c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4c4:	f001 fd26 	bl	8010f14 <xTaskGetSchedulerState>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d102      	bne.n	800f4d4 <xQueueGenericSend+0xa4>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <xQueueGenericSend+0xa8>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e000      	b.n	800f4da <xQueueGenericSend+0xaa>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10b      	bne.n	800f4f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800f4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e2:	f383 8811 	msr	BASEPRI, r3
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	61fb      	str	r3, [r7, #28]
}
 800f4f0:	bf00      	nop
 800f4f2:	bf00      	nop
 800f4f4:	e7fd      	b.n	800f4f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4f6:	f002 fd1f 	bl	8011f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f502:	429a      	cmp	r2, r3
 800f504:	d302      	bcc.n	800f50c <xQueueGenericSend+0xdc>
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d129      	bne.n	800f560 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f50c:	683a      	ldr	r2, [r7, #0]
 800f50e:	68b9      	ldr	r1, [r7, #8]
 800f510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f512:	f000 fc6d 	bl	800fdf0 <prvCopyDataToQueue>
 800f516:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d010      	beq.n	800f542 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f522:	3324      	adds	r3, #36	@ 0x24
 800f524:	4618      	mov	r0, r3
 800f526:	f001 fb1f 	bl	8010b68 <xTaskRemoveFromEventList>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d013      	beq.n	800f558 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f530:	4b3f      	ldr	r3, [pc, #252]	@ (800f630 <xQueueGenericSend+0x200>)
 800f532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	e00a      	b.n	800f558 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f544:	2b00      	cmp	r3, #0
 800f546:	d007      	beq.n	800f558 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f548:	4b39      	ldr	r3, [pc, #228]	@ (800f630 <xQueueGenericSend+0x200>)
 800f54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f558:	f002 fd20 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 800f55c:	2301      	movs	r3, #1
 800f55e:	e063      	b.n	800f628 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d103      	bne.n	800f56e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f566:	f002 fd19 	bl	8011f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e05c      	b.n	800f628 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f570:	2b00      	cmp	r3, #0
 800f572:	d106      	bne.n	800f582 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f574:	f107 0314 	add.w	r3, r7, #20
 800f578:	4618      	mov	r0, r3
 800f57a:	f001 fb59 	bl	8010c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f57e:	2301      	movs	r3, #1
 800f580:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f582:	f002 fd0b 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f586:	f001 f8af 	bl	80106e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f58a:	f002 fcd5 	bl	8011f38 <vPortEnterCritical>
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f594:	b25b      	sxtb	r3, r3
 800f596:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f59a:	d103      	bne.n	800f5a4 <xQueueGenericSend+0x174>
 800f59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5aa:	b25b      	sxtb	r3, r3
 800f5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5b0:	d103      	bne.n	800f5ba <xQueueGenericSend+0x18a>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f5ba:	f002 fcef 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5be:	1d3a      	adds	r2, r7, #4
 800f5c0:	f107 0314 	add.w	r3, r7, #20
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f001 fb48 	bl	8010c5c <xTaskCheckForTimeOut>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d124      	bne.n	800f61c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f5d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5d4:	f000 fd04 	bl	800ffe0 <prvIsQueueFull>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d018      	beq.n	800f610 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e0:	3310      	adds	r3, #16
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f001 fa6c 	bl	8010ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5ee:	f000 fc8f 	bl	800ff10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f5f2:	f001 f887 	bl	8010704 <xTaskResumeAll>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f47f af7c 	bne.w	800f4f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f630 <xQueueGenericSend+0x200>)
 800f600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f604:	601a      	str	r2, [r3, #0]
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	e772      	b.n	800f4f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f612:	f000 fc7d 	bl	800ff10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f616:	f001 f875 	bl	8010704 <xTaskResumeAll>
 800f61a:	e76c      	b.n	800f4f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f61c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f61e:	f000 fc77 	bl	800ff10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f622:	f001 f86f 	bl	8010704 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3738      	adds	r7, #56	@ 0x38
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	e000ed04 	.word	0xe000ed04

0800f634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b090      	sub	sp, #64	@ 0x40
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	607a      	str	r2, [r7, #4]
 800f640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10b      	bne.n	800f664 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	e7fd      	b.n	800f660 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d103      	bne.n	800f672 <xQueueGenericSendFromISR+0x3e>
 800f66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f66c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d101      	bne.n	800f676 <xQueueGenericSendFromISR+0x42>
 800f672:	2301      	movs	r3, #1
 800f674:	e000      	b.n	800f678 <xQueueGenericSendFromISR+0x44>
 800f676:	2300      	movs	r3, #0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d10b      	bne.n	800f694 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f68e:	bf00      	nop
 800f690:	bf00      	nop
 800f692:	e7fd      	b.n	800f690 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	2b02      	cmp	r3, #2
 800f698:	d103      	bne.n	800f6a2 <xQueueGenericSendFromISR+0x6e>
 800f69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d101      	bne.n	800f6a6 <xQueueGenericSendFromISR+0x72>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e000      	b.n	800f6a8 <xQueueGenericSendFromISR+0x74>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d10b      	bne.n	800f6c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	623b      	str	r3, [r7, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	bf00      	nop
 800f6c2:	e7fd      	b.n	800f6c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6c4:	f002 fd18 	bl	80120f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f6c8:	f3ef 8211 	mrs	r2, BASEPRI
 800f6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d0:	f383 8811 	msr	BASEPRI, r3
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	61fa      	str	r2, [r7, #28]
 800f6de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f6e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d302      	bcc.n	800f6f6 <xQueueGenericSendFromISR+0xc2>
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	2b02      	cmp	r3, #2
 800f6f4:	d12f      	bne.n	800f756 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f704:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	68b9      	ldr	r1, [r7, #8]
 800f70a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f70c:	f000 fb70 	bl	800fdf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f710:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f718:	d112      	bne.n	800f740 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d016      	beq.n	800f750 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f724:	3324      	adds	r3, #36	@ 0x24
 800f726:	4618      	mov	r0, r3
 800f728:	f001 fa1e 	bl	8010b68 <xTaskRemoveFromEventList>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00e      	beq.n	800f750 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d00b      	beq.n	800f750 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	601a      	str	r2, [r3, #0]
 800f73e:	e007      	b.n	800f750 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f740:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f744:	3301      	adds	r3, #1
 800f746:	b2db      	uxtb	r3, r3
 800f748:	b25a      	sxtb	r2, r3
 800f74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f750:	2301      	movs	r3, #1
 800f752:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f754:	e001      	b.n	800f75a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f756:	2300      	movs	r3, #0
 800f758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f75c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f764:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3740      	adds	r7, #64	@ 0x40
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b08e      	sub	sp, #56	@ 0x38
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10b      	bne.n	800f79c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	623b      	str	r3, [r7, #32]
}
 800f796:	bf00      	nop
 800f798:	bf00      	nop
 800f79a:	e7fd      	b.n	800f798 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00b      	beq.n	800f7bc <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	61fb      	str	r3, [r7, #28]
}
 800f7b6:	bf00      	nop
 800f7b8:	bf00      	nop
 800f7ba:	e7fd      	b.n	800f7b8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d103      	bne.n	800f7cc <xQueueGiveFromISR+0x5c>
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d101      	bne.n	800f7d0 <xQueueGiveFromISR+0x60>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	e000      	b.n	800f7d2 <xQueueGiveFromISR+0x62>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d10b      	bne.n	800f7ee <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7da:	f383 8811 	msr	BASEPRI, r3
 800f7de:	f3bf 8f6f 	isb	sy
 800f7e2:	f3bf 8f4f 	dsb	sy
 800f7e6:	61bb      	str	r3, [r7, #24]
}
 800f7e8:	bf00      	nop
 800f7ea:	bf00      	nop
 800f7ec:	e7fd      	b.n	800f7ea <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7ee:	f002 fc83 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 800f7f2:	f3ef 8211 	mrs	r2, BASEPRI
 800f7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fa:	f383 8811 	msr	BASEPRI, r3
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	617a      	str	r2, [r7, #20]
 800f808:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f80a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f812:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d22b      	bcs.n	800f876 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f820:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f830:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f838:	d112      	bne.n	800f860 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d016      	beq.n	800f870 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f844:	3324      	adds	r3, #36	@ 0x24
 800f846:	4618      	mov	r0, r3
 800f848:	f001 f98e 	bl	8010b68 <xTaskRemoveFromEventList>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00e      	beq.n	800f870 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00b      	beq.n	800f870 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	2201      	movs	r2, #1
 800f85c:	601a      	str	r2, [r3, #0]
 800f85e:	e007      	b.n	800f870 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f864:	3301      	adds	r3, #1
 800f866:	b2db      	uxtb	r3, r3
 800f868:	b25a      	sxtb	r2, r3
 800f86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f86c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f870:	2301      	movs	r3, #1
 800f872:	637b      	str	r3, [r7, #52]	@ 0x34
 800f874:	e001      	b.n	800f87a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f876:	2300      	movs	r3, #0
 800f878:	637b      	str	r3, [r7, #52]	@ 0x34
 800f87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f87c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f383 8811 	msr	BASEPRI, r3
}
 800f884:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3738      	adds	r7, #56	@ 0x38
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b08c      	sub	sp, #48	@ 0x30
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f89c:	2300      	movs	r3, #0
 800f89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d10b      	bne.n	800f8c2 <xQueueReceive+0x32>
	__asm volatile
 800f8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ae:	f383 8811 	msr	BASEPRI, r3
 800f8b2:	f3bf 8f6f 	isb	sy
 800f8b6:	f3bf 8f4f 	dsb	sy
 800f8ba:	623b      	str	r3, [r7, #32]
}
 800f8bc:	bf00      	nop
 800f8be:	bf00      	nop
 800f8c0:	e7fd      	b.n	800f8be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d103      	bne.n	800f8d0 <xQueueReceive+0x40>
 800f8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d101      	bne.n	800f8d4 <xQueueReceive+0x44>
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e000      	b.n	800f8d6 <xQueueReceive+0x46>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d10b      	bne.n	800f8f2 <xQueueReceive+0x62>
	__asm volatile
 800f8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8de:	f383 8811 	msr	BASEPRI, r3
 800f8e2:	f3bf 8f6f 	isb	sy
 800f8e6:	f3bf 8f4f 	dsb	sy
 800f8ea:	61fb      	str	r3, [r7, #28]
}
 800f8ec:	bf00      	nop
 800f8ee:	bf00      	nop
 800f8f0:	e7fd      	b.n	800f8ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8f2:	f001 fb0f 	bl	8010f14 <xTaskGetSchedulerState>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <xQueueReceive+0x72>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d101      	bne.n	800f906 <xQueueReceive+0x76>
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <xQueueReceive+0x78>
 800f906:	2300      	movs	r3, #0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10b      	bne.n	800f924 <xQueueReceive+0x94>
	__asm volatile
 800f90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f910:	f383 8811 	msr	BASEPRI, r3
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	61bb      	str	r3, [r7, #24]
}
 800f91e:	bf00      	nop
 800f920:	bf00      	nop
 800f922:	e7fd      	b.n	800f920 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f924:	f002 fb08 	bl	8011f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f92c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f930:	2b00      	cmp	r3, #0
 800f932:	d01f      	beq.n	800f974 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f934:	68b9      	ldr	r1, [r7, #8]
 800f936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f938:	f000 fac4 	bl	800fec4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f93e:	1e5a      	subs	r2, r3, #1
 800f940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f942:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f946:	691b      	ldr	r3, [r3, #16]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00f      	beq.n	800f96c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94e:	3310      	adds	r3, #16
 800f950:	4618      	mov	r0, r3
 800f952:	f001 f909 	bl	8010b68 <xTaskRemoveFromEventList>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d007      	beq.n	800f96c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f95c:	4b3c      	ldr	r3, [pc, #240]	@ (800fa50 <xQueueReceive+0x1c0>)
 800f95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f962:	601a      	str	r2, [r3, #0]
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f96c:	f002 fb16 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 800f970:	2301      	movs	r3, #1
 800f972:	e069      	b.n	800fa48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d103      	bne.n	800f982 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f97a:	f002 fb0f 	bl	8011f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f97e:	2300      	movs	r3, #0
 800f980:	e062      	b.n	800fa48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d106      	bne.n	800f996 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f988:	f107 0310 	add.w	r3, r7, #16
 800f98c:	4618      	mov	r0, r3
 800f98e:	f001 f94f 	bl	8010c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f996:	f002 fb01 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f99a:	f000 fea5 	bl	80106e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f99e:	f002 facb 	bl	8011f38 <vPortEnterCritical>
 800f9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9a8:	b25b      	sxtb	r3, r3
 800f9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9ae:	d103      	bne.n	800f9b8 <xQueueReceive+0x128>
 800f9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f9be:	b25b      	sxtb	r3, r3
 800f9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9c4:	d103      	bne.n	800f9ce <xQueueReceive+0x13e>
 800f9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9ce:	f002 fae5 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9d2:	1d3a      	adds	r2, r7, #4
 800f9d4:	f107 0310 	add.w	r3, r7, #16
 800f9d8:	4611      	mov	r1, r2
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f001 f93e 	bl	8010c5c <xTaskCheckForTimeOut>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d123      	bne.n	800fa2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9e8:	f000 fae4 	bl	800ffb4 <prvIsQueueEmpty>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d017      	beq.n	800fa22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f4:	3324      	adds	r3, #36	@ 0x24
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f001 f862 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa02:	f000 fa85 	bl	800ff10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa06:	f000 fe7d 	bl	8010704 <xTaskResumeAll>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d189      	bne.n	800f924 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fa10:	4b0f      	ldr	r3, [pc, #60]	@ (800fa50 <xQueueReceive+0x1c0>)
 800fa12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa16:	601a      	str	r2, [r3, #0]
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	f3bf 8f6f 	isb	sy
 800fa20:	e780      	b.n	800f924 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa24:	f000 fa74 	bl	800ff10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa28:	f000 fe6c 	bl	8010704 <xTaskResumeAll>
 800fa2c:	e77a      	b.n	800f924 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa30:	f000 fa6e 	bl	800ff10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa34:	f000 fe66 	bl	8010704 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa3a:	f000 fabb 	bl	800ffb4 <prvIsQueueEmpty>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f43f af6f 	beq.w	800f924 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3730      	adds	r7, #48	@ 0x30
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	e000ed04 	.word	0xe000ed04

0800fa54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08e      	sub	sp, #56	@ 0x38
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10b      	bne.n	800fa88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	623b      	str	r3, [r7, #32]
}
 800fa82:	bf00      	nop
 800fa84:	bf00      	nop
 800fa86:	e7fd      	b.n	800fa84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00b      	beq.n	800faa8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	61fb      	str	r3, [r7, #28]
}
 800faa2:	bf00      	nop
 800faa4:	bf00      	nop
 800faa6:	e7fd      	b.n	800faa4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800faa8:	f001 fa34 	bl	8010f14 <xTaskGetSchedulerState>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d102      	bne.n	800fab8 <xQueueSemaphoreTake+0x64>
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <xQueueSemaphoreTake+0x68>
 800fab8:	2301      	movs	r3, #1
 800faba:	e000      	b.n	800fabe <xQueueSemaphoreTake+0x6a>
 800fabc:	2300      	movs	r3, #0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10b      	bne.n	800fada <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac6:	f383 8811 	msr	BASEPRI, r3
 800faca:	f3bf 8f6f 	isb	sy
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	61bb      	str	r3, [r7, #24]
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop
 800fad8:	e7fd      	b.n	800fad6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fada:	f002 fa2d 	bl	8011f38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d024      	beq.n	800fb34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800faea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faec:	1e5a      	subs	r2, r3, #1
 800faee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faf0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d104      	bne.n	800fb04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fafa:	f001 fb85 	bl	8011208 <pvTaskIncrementMutexHeldCount>
 800fafe:	4602      	mov	r2, r0
 800fb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00f      	beq.n	800fb2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb0e:	3310      	adds	r3, #16
 800fb10:	4618      	mov	r0, r3
 800fb12:	f001 f829 	bl	8010b68 <xTaskRemoveFromEventList>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d007      	beq.n	800fb2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb1c:	4b54      	ldr	r3, [pc, #336]	@ (800fc70 <xQueueSemaphoreTake+0x21c>)
 800fb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb2c:	f002 fa36 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 800fb30:	2301      	movs	r3, #1
 800fb32:	e098      	b.n	800fc66 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d112      	bne.n	800fb60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00b      	beq.n	800fb58 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	617b      	str	r3, [r7, #20]
}
 800fb52:	bf00      	nop
 800fb54:	bf00      	nop
 800fb56:	e7fd      	b.n	800fb54 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb58:	f002 fa20 	bl	8011f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	e082      	b.n	800fc66 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb66:	f107 030c 	add.w	r3, r7, #12
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f001 f860 	bl	8010c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb70:	2301      	movs	r3, #1
 800fb72:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb74:	f002 fa12 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb78:	f000 fdb6 	bl	80106e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb7c:	f002 f9dc 	bl	8011f38 <vPortEnterCritical>
 800fb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb86:	b25b      	sxtb	r3, r3
 800fb88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb8c:	d103      	bne.n	800fb96 <xQueueSemaphoreTake+0x142>
 800fb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb9c:	b25b      	sxtb	r3, r3
 800fb9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fba2:	d103      	bne.n	800fbac <xQueueSemaphoreTake+0x158>
 800fba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba6:	2200      	movs	r2, #0
 800fba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fbac:	f002 f9f6 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbb0:	463a      	mov	r2, r7
 800fbb2:	f107 030c 	add.w	r3, r7, #12
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f001 f84f 	bl	8010c5c <xTaskCheckForTimeOut>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d132      	bne.n	800fc2a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbc6:	f000 f9f5 	bl	800ffb4 <prvIsQueueEmpty>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d026      	beq.n	800fc1e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d109      	bne.n	800fbec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fbd8:	f002 f9ae 	bl	8011f38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f001 f9b5 	bl	8010f50 <xTaskPriorityInherit>
 800fbe6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fbe8:	f002 f9d8 	bl	8011f9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbee:	3324      	adds	r3, #36	@ 0x24
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f000 ff65 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbfc:	f000 f988 	bl	800ff10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc00:	f000 fd80 	bl	8010704 <xTaskResumeAll>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f47f af67 	bne.w	800fada <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fc0c:	4b18      	ldr	r3, [pc, #96]	@ (800fc70 <xQueueSemaphoreTake+0x21c>)
 800fc0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	f3bf 8f4f 	dsb	sy
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	e75d      	b.n	800fada <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc20:	f000 f976 	bl	800ff10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc24:	f000 fd6e 	bl	8010704 <xTaskResumeAll>
 800fc28:	e757      	b.n	800fada <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc2c:	f000 f970 	bl	800ff10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc30:	f000 fd68 	bl	8010704 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc36:	f000 f9bd 	bl	800ffb4 <prvIsQueueEmpty>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f43f af4c 	beq.w	800fada <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00d      	beq.n	800fc64 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fc48:	f002 f976 	bl	8011f38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc4e:	f000 f8b7 	bl	800fdc0 <prvGetDisinheritPriorityAfterTimeout>
 800fc52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f001 fa50 	bl	8011100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc60:	f002 f99c 	bl	8011f9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3738      	adds	r7, #56	@ 0x38
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	e000ed04 	.word	0xe000ed04

0800fc74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b08e      	sub	sp, #56	@ 0x38
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d10b      	bne.n	800fca2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	623b      	str	r3, [r7, #32]
}
 800fc9c:	bf00      	nop
 800fc9e:	bf00      	nop
 800fca0:	e7fd      	b.n	800fc9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d103      	bne.n	800fcb0 <xQueueReceiveFromISR+0x3c>
 800fca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d101      	bne.n	800fcb4 <xQueueReceiveFromISR+0x40>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e000      	b.n	800fcb6 <xQueueReceiveFromISR+0x42>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d10b      	bne.n	800fcd2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	61fb      	str	r3, [r7, #28]
}
 800fccc:	bf00      	nop
 800fcce:	bf00      	nop
 800fcd0:	e7fd      	b.n	800fcce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcd2:	f002 fa11 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 800fcd6:	f3ef 8211 	mrs	r2, BASEPRI
 800fcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	61ba      	str	r2, [r7, #24]
 800fcec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fcee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d02f      	beq.n	800fd5e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fd0c:	f000 f8da 	bl	800fec4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd12:	1e5a      	subs	r2, r3, #1
 800fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fd1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd20:	d112      	bne.n	800fd48 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d016      	beq.n	800fd58 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2c:	3310      	adds	r3, #16
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 ff1a 	bl	8010b68 <xTaskRemoveFromEventList>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00e      	beq.n	800fd58 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00b      	beq.n	800fd58 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	e007      	b.n	800fd58 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	b25a      	sxtb	r2, r3
 800fd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd5c:	e001      	b.n	800fd62 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	f383 8811 	msr	BASEPRI, r3
}
 800fd6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3738      	adds	r7, #56	@ 0x38
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10b      	bne.n	800fda2 <vQueueDelete+0x2a>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	60bb      	str	r3, [r7, #8]
}
 800fd9c:	bf00      	nop
 800fd9e:	bf00      	nop
 800fda0:	e7fd      	b.n	800fd9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f000 f95e 	bl	8010064 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d102      	bne.n	800fdb8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f002 fab0 	bl	8012318 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fdb8:	bf00      	nop
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d006      	beq.n	800fdde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	e001      	b.n	800fde2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fdde:	2300      	movs	r3, #0
 800fde0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fde2:	68fb      	ldr	r3, [r7, #12]
	}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b086      	sub	sp, #24
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d10d      	bne.n	800fe2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d14d      	bne.n	800feb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f001 f900 	bl	8011020 <xTaskPriorityDisinherit>
 800fe20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2200      	movs	r2, #0
 800fe26:	609a      	str	r2, [r3, #8]
 800fe28:	e043      	b.n	800feb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d119      	bne.n	800fe64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6858      	ldr	r0, [r3, #4]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe38:	461a      	mov	r2, r3
 800fe3a:	68b9      	ldr	r1, [r7, #8]
 800fe3c:	f014 f8d5 	bl	8023fea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe48:	441a      	add	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d32b      	bcc.n	800feb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	605a      	str	r2, [r3, #4]
 800fe62:	e026      	b.n	800feb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	68d8      	ldr	r0, [r3, #12]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	68b9      	ldr	r1, [r7, #8]
 800fe70:	f014 f8bb 	bl	8023fea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	68da      	ldr	r2, [r3, #12]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7c:	425b      	negs	r3, r3
 800fe7e:	441a      	add	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	68da      	ldr	r2, [r3, #12]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d207      	bcs.n	800fea0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	689a      	ldr	r2, [r3, #8]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe98:	425b      	negs	r3, r3
 800fe9a:	441a      	add	r2, r3
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d105      	bne.n	800feb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d002      	beq.n	800feb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	3b01      	subs	r3, #1
 800feb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800feba:	697b      	ldr	r3, [r7, #20]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d018      	beq.n	800ff08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	68da      	ldr	r2, [r3, #12]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fede:	441a      	add	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	68da      	ldr	r2, [r3, #12]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	429a      	cmp	r2, r3
 800feee:	d303      	bcc.n	800fef8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68d9      	ldr	r1, [r3, #12]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff00:	461a      	mov	r2, r3
 800ff02:	6838      	ldr	r0, [r7, #0]
 800ff04:	f014 f871 	bl	8023fea <memcpy>
	}
}
 800ff08:	bf00      	nop
 800ff0a:	3708      	adds	r7, #8
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff18:	f002 f80e 	bl	8011f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff24:	e011      	b.n	800ff4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d012      	beq.n	800ff54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3324      	adds	r3, #36	@ 0x24
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 fe18 	bl	8010b68 <xTaskRemoveFromEventList>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff3e:	f000 fef1 	bl	8010d24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
 800ff44:	3b01      	subs	r3, #1
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	dce9      	bgt.n	800ff26 <prvUnlockQueue+0x16>
 800ff52:	e000      	b.n	800ff56 <prvUnlockQueue+0x46>
					break;
 800ff54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	22ff      	movs	r2, #255	@ 0xff
 800ff5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ff5e:	f002 f81d 	bl	8011f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff62:	f001 ffe9 	bl	8011f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff6e:	e011      	b.n	800ff94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	691b      	ldr	r3, [r3, #16]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d012      	beq.n	800ff9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	3310      	adds	r3, #16
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f000 fdf3 	bl	8010b68 <xTaskRemoveFromEventList>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff88:	f000 fecc 	bl	8010d24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dce9      	bgt.n	800ff70 <prvUnlockQueue+0x60>
 800ff9c:	e000      	b.n	800ffa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	22ff      	movs	r2, #255	@ 0xff
 800ffa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ffa8:	f001 fff8 	bl	8011f9c <vPortExitCritical>
}
 800ffac:	bf00      	nop
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffbc:	f001 ffbc 	bl	8011f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d102      	bne.n	800ffce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e001      	b.n	800ffd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffd2:	f001 ffe3 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffe8:	f001 ffa6 	bl	8011f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d102      	bne.n	800fffe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fff8:	2301      	movs	r3, #1
 800fffa:	60fb      	str	r3, [r7, #12]
 800fffc:	e001      	b.n	8010002 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fffe:	2300      	movs	r3, #0
 8010000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010002:	f001 ffcb 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 8010006:	68fb      	ldr	r3, [r7, #12]
}
 8010008:	4618      	mov	r0, r3
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801001a:	2300      	movs	r3, #0
 801001c:	60fb      	str	r3, [r7, #12]
 801001e:	e014      	b.n	801004a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010020:	4a0f      	ldr	r2, [pc, #60]	@ (8010060 <vQueueAddToRegistry+0x50>)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d10b      	bne.n	8010044 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801002c:	490c      	ldr	r1, [pc, #48]	@ (8010060 <vQueueAddToRegistry+0x50>)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	683a      	ldr	r2, [r7, #0]
 8010032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010036:	4a0a      	ldr	r2, [pc, #40]	@ (8010060 <vQueueAddToRegistry+0x50>)
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	00db      	lsls	r3, r3, #3
 801003c:	4413      	add	r3, r2
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010042:	e006      	b.n	8010052 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3301      	adds	r3, #1
 8010048:	60fb      	str	r3, [r7, #12]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b07      	cmp	r3, #7
 801004e:	d9e7      	bls.n	8010020 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010050:	bf00      	nop
 8010052:	bf00      	nop
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	24001318 	.word	0x24001318

08010064 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801006c:	2300      	movs	r3, #0
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	e016      	b.n	80100a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010072:	4a10      	ldr	r2, [pc, #64]	@ (80100b4 <vQueueUnregisterQueue+0x50>)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	00db      	lsls	r3, r3, #3
 8010078:	4413      	add	r3, r2
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	429a      	cmp	r2, r3
 8010080:	d10b      	bne.n	801009a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010082:	4a0c      	ldr	r2, [pc, #48]	@ (80100b4 <vQueueUnregisterQueue+0x50>)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2100      	movs	r1, #0
 8010088:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801008c:	4a09      	ldr	r2, [pc, #36]	@ (80100b4 <vQueueUnregisterQueue+0x50>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	00db      	lsls	r3, r3, #3
 8010092:	4413      	add	r3, r2
 8010094:	2200      	movs	r2, #0
 8010096:	605a      	str	r2, [r3, #4]
				break;
 8010098:	e006      	b.n	80100a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	3301      	adds	r3, #1
 801009e:	60fb      	str	r3, [r7, #12]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2b07      	cmp	r3, #7
 80100a4:	d9e5      	bls.n	8010072 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80100a6:	bf00      	nop
 80100a8:	bf00      	nop
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	24001318 	.word	0x24001318

080100b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b086      	sub	sp, #24
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80100c8:	f001 ff36 	bl	8011f38 <vPortEnterCritical>
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100d2:	b25b      	sxtb	r3, r3
 80100d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100d8:	d103      	bne.n	80100e2 <vQueueWaitForMessageRestricted+0x2a>
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100e8:	b25b      	sxtb	r3, r3
 80100ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100ee:	d103      	bne.n	80100f8 <vQueueWaitForMessageRestricted+0x40>
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80100f8:	f001 ff50 	bl	8011f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010100:	2b00      	cmp	r3, #0
 8010102:	d106      	bne.n	8010112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	3324      	adds	r3, #36	@ 0x24
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	68b9      	ldr	r1, [r7, #8]
 801010c:	4618      	mov	r0, r3
 801010e:	f000 fcff 	bl	8010b10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010112:	6978      	ldr	r0, [r7, #20]
 8010114:	f7ff fefc 	bl	800ff10 <prvUnlockQueue>
	}
 8010118:	bf00      	nop
 801011a:	3718      	adds	r7, #24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010120:	b580      	push	{r7, lr}
 8010122:	b08e      	sub	sp, #56	@ 0x38
 8010124:	af04      	add	r7, sp, #16
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
 801012c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801012e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010130:	2b00      	cmp	r3, #0
 8010132:	d10b      	bne.n	801014c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010138:	f383 8811 	msr	BASEPRI, r3
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	623b      	str	r3, [r7, #32]
}
 8010146:	bf00      	nop
 8010148:	bf00      	nop
 801014a:	e7fd      	b.n	8010148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801014c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014e:	2b00      	cmp	r3, #0
 8010150:	d10b      	bne.n	801016a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	61fb      	str	r3, [r7, #28]
}
 8010164:	bf00      	nop
 8010166:	bf00      	nop
 8010168:	e7fd      	b.n	8010166 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801016a:	23a8      	movs	r3, #168	@ 0xa8
 801016c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	2ba8      	cmp	r3, #168	@ 0xa8
 8010172:	d00b      	beq.n	801018c <xTaskCreateStatic+0x6c>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	61bb      	str	r3, [r7, #24]
}
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	e7fd      	b.n	8010188 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801018c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801018e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010190:	2b00      	cmp	r3, #0
 8010192:	d01e      	beq.n	80101d2 <xTaskCreateStatic+0xb2>
 8010194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010196:	2b00      	cmp	r3, #0
 8010198:	d01b      	beq.n	80101d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801019a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801019e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80101a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a6:	2202      	movs	r2, #2
 80101a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101ac:	2300      	movs	r3, #0
 80101ae:	9303      	str	r3, [sp, #12]
 80101b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b2:	9302      	str	r3, [sp, #8]
 80101b4:	f107 0314 	add.w	r3, r7, #20
 80101b8:	9301      	str	r3, [sp, #4]
 80101ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	68b9      	ldr	r1, [r7, #8]
 80101c4:	68f8      	ldr	r0, [r7, #12]
 80101c6:	f000 f851 	bl	801026c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101cc:	f000 f8f6 	bl	80103bc <prvAddNewTaskToReadyList>
 80101d0:	e001      	b.n	80101d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80101d6:	697b      	ldr	r3, [r7, #20]
	}
 80101d8:	4618      	mov	r0, r3
 80101da:	3728      	adds	r7, #40	@ 0x28
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b08c      	sub	sp, #48	@ 0x30
 80101e4:	af04      	add	r7, sp, #16
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	603b      	str	r3, [r7, #0]
 80101ec:	4613      	mov	r3, r2
 80101ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80101f0:	88fb      	ldrh	r3, [r7, #6]
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4618      	mov	r0, r3
 80101f6:	f001 ffc1 	bl	801217c <pvPortMalloc>
 80101fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00e      	beq.n	8010220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010202:	20a8      	movs	r0, #168	@ 0xa8
 8010204:	f001 ffba 	bl	801217c <pvPortMalloc>
 8010208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d003      	beq.n	8010218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	697a      	ldr	r2, [r7, #20]
 8010214:	631a      	str	r2, [r3, #48]	@ 0x30
 8010216:	e005      	b.n	8010224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010218:	6978      	ldr	r0, [r7, #20]
 801021a:	f002 f87d 	bl	8012318 <vPortFree>
 801021e:	e001      	b.n	8010224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010220:	2300      	movs	r3, #0
 8010222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d017      	beq.n	801025a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010232:	88fa      	ldrh	r2, [r7, #6]
 8010234:	2300      	movs	r3, #0
 8010236:	9303      	str	r3, [sp, #12]
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	9302      	str	r3, [sp, #8]
 801023c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	68b9      	ldr	r1, [r7, #8]
 8010248:	68f8      	ldr	r0, [r7, #12]
 801024a:	f000 f80f 	bl	801026c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801024e:	69f8      	ldr	r0, [r7, #28]
 8010250:	f000 f8b4 	bl	80103bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010254:	2301      	movs	r3, #1
 8010256:	61bb      	str	r3, [r7, #24]
 8010258:	e002      	b.n	8010260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801025a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801025e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010260:	69bb      	ldr	r3, [r7, #24]
	}
 8010262:	4618      	mov	r0, r3
 8010264:	3720      	adds	r7, #32
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b088      	sub	sp, #32
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801027a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	461a      	mov	r2, r3
 8010284:	21a5      	movs	r1, #165	@ 0xa5
 8010286:	f013 fe20 	bl	8023eca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801028a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801028e:	6879      	ldr	r1, [r7, #4]
 8010290:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010294:	440b      	add	r3, r1
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	4413      	add	r3, r2
 801029a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	f023 0307 	bic.w	r3, r3, #7
 80102a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	f003 0307 	and.w	r3, r3, #7
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00b      	beq.n	80102c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	617b      	str	r3, [r7, #20]
}
 80102c0:	bf00      	nop
 80102c2:	bf00      	nop
 80102c4:	e7fd      	b.n	80102c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d01f      	beq.n	801030c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102cc:	2300      	movs	r3, #0
 80102ce:	61fb      	str	r3, [r7, #28]
 80102d0:	e012      	b.n	80102f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	4413      	add	r3, r2
 80102d8:	7819      	ldrb	r1, [r3, #0]
 80102da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	4413      	add	r3, r2
 80102e0:	3334      	adds	r3, #52	@ 0x34
 80102e2:	460a      	mov	r2, r1
 80102e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	4413      	add	r3, r2
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d006      	beq.n	8010300 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	3301      	adds	r3, #1
 80102f6:	61fb      	str	r3, [r7, #28]
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	2b0f      	cmp	r3, #15
 80102fc:	d9e9      	bls.n	80102d2 <prvInitialiseNewTask+0x66>
 80102fe:	e000      	b.n	8010302 <prvInitialiseNewTask+0x96>
			{
				break;
 8010300:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010304:	2200      	movs	r2, #0
 8010306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801030a:	e003      	b.n	8010314 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801030c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030e:	2200      	movs	r2, #0
 8010310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010316:	2b37      	cmp	r3, #55	@ 0x37
 8010318:	d901      	bls.n	801031e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801031a:	2337      	movs	r3, #55	@ 0x37
 801031c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801031e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010322:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010328:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801032a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801032c:	2200      	movs	r2, #0
 801032e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010332:	3304      	adds	r3, #4
 8010334:	4618      	mov	r0, r3
 8010336:	f7fe fe01 	bl	800ef3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801033a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033c:	3318      	adds	r3, #24
 801033e:	4618      	mov	r0, r3
 8010340:	f7fe fdfc 	bl	800ef3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010348:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801034a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801034c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010352:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010358:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801035a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035c:	2200      	movs	r2, #0
 801035e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010364:	2200      	movs	r2, #0
 8010366:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801036a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036c:	3354      	adds	r3, #84	@ 0x54
 801036e:	224c      	movs	r2, #76	@ 0x4c
 8010370:	2100      	movs	r1, #0
 8010372:	4618      	mov	r0, r3
 8010374:	f013 fda9 	bl	8023eca <memset>
 8010378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037a:	4a0d      	ldr	r2, [pc, #52]	@ (80103b0 <prvInitialiseNewTask+0x144>)
 801037c:	659a      	str	r2, [r3, #88]	@ 0x58
 801037e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010380:	4a0c      	ldr	r2, [pc, #48]	@ (80103b4 <prvInitialiseNewTask+0x148>)
 8010382:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010386:	4a0c      	ldr	r2, [pc, #48]	@ (80103b8 <prvInitialiseNewTask+0x14c>)
 8010388:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	68f9      	ldr	r1, [r7, #12]
 801038e:	69b8      	ldr	r0, [r7, #24]
 8010390:	f001 fc9e 	bl	8011cd0 <pxPortInitialiseStack>
 8010394:	4602      	mov	r2, r0
 8010396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801039a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039c:	2b00      	cmp	r3, #0
 801039e:	d002      	beq.n	80103a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103a6:	bf00      	nop
 80103a8:	3720      	adds	r7, #32
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	24023008 	.word	0x24023008
 80103b4:	24023070 	.word	0x24023070
 80103b8:	240230d8 	.word	0x240230d8

080103bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80103c4:	f001 fdb8 	bl	8011f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80103c8:	4b2d      	ldr	r3, [pc, #180]	@ (8010480 <prvAddNewTaskToReadyList+0xc4>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	3301      	adds	r3, #1
 80103ce:	4a2c      	ldr	r2, [pc, #176]	@ (8010480 <prvAddNewTaskToReadyList+0xc4>)
 80103d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80103d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010484 <prvAddNewTaskToReadyList+0xc8>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d109      	bne.n	80103ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103da:	4a2a      	ldr	r2, [pc, #168]	@ (8010484 <prvAddNewTaskToReadyList+0xc8>)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103e0:	4b27      	ldr	r3, [pc, #156]	@ (8010480 <prvAddNewTaskToReadyList+0xc4>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d110      	bne.n	801040a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103e8:	f000 fcc0 	bl	8010d6c <prvInitialiseTaskLists>
 80103ec:	e00d      	b.n	801040a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103ee:	4b26      	ldr	r3, [pc, #152]	@ (8010488 <prvAddNewTaskToReadyList+0xcc>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d109      	bne.n	801040a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103f6:	4b23      	ldr	r3, [pc, #140]	@ (8010484 <prvAddNewTaskToReadyList+0xc8>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010400:	429a      	cmp	r2, r3
 8010402:	d802      	bhi.n	801040a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010404:	4a1f      	ldr	r2, [pc, #124]	@ (8010484 <prvAddNewTaskToReadyList+0xc8>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801040a:	4b20      	ldr	r3, [pc, #128]	@ (801048c <prvAddNewTaskToReadyList+0xd0>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3301      	adds	r3, #1
 8010410:	4a1e      	ldr	r2, [pc, #120]	@ (801048c <prvAddNewTaskToReadyList+0xd0>)
 8010412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010414:	4b1d      	ldr	r3, [pc, #116]	@ (801048c <prvAddNewTaskToReadyList+0xd0>)
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010420:	4b1b      	ldr	r3, [pc, #108]	@ (8010490 <prvAddNewTaskToReadyList+0xd4>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	429a      	cmp	r2, r3
 8010426:	d903      	bls.n	8010430 <prvAddNewTaskToReadyList+0x74>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801042c:	4a18      	ldr	r2, [pc, #96]	@ (8010490 <prvAddNewTaskToReadyList+0xd4>)
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010434:	4613      	mov	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4413      	add	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4a15      	ldr	r2, [pc, #84]	@ (8010494 <prvAddNewTaskToReadyList+0xd8>)
 801043e:	441a      	add	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	3304      	adds	r3, #4
 8010444:	4619      	mov	r1, r3
 8010446:	4610      	mov	r0, r2
 8010448:	f7fe fd85 	bl	800ef56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801044c:	f001 fda6 	bl	8011f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010450:	4b0d      	ldr	r3, [pc, #52]	@ (8010488 <prvAddNewTaskToReadyList+0xcc>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00e      	beq.n	8010476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010458:	4b0a      	ldr	r3, [pc, #40]	@ (8010484 <prvAddNewTaskToReadyList+0xc8>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010462:	429a      	cmp	r2, r3
 8010464:	d207      	bcs.n	8010476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010466:	4b0c      	ldr	r3, [pc, #48]	@ (8010498 <prvAddNewTaskToReadyList+0xdc>)
 8010468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010476:	bf00      	nop
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	2400182c 	.word	0x2400182c
 8010484:	24001358 	.word	0x24001358
 8010488:	24001838 	.word	0x24001838
 801048c:	24001848 	.word	0x24001848
 8010490:	24001834 	.word	0x24001834
 8010494:	2400135c 	.word	0x2400135c
 8010498:	e000ed04 	.word	0xe000ed04

0801049c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801049c:	b580      	push	{r7, lr}
 801049e:	b08a      	sub	sp, #40	@ 0x28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80104a6:	2300      	movs	r3, #0
 80104a8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d10b      	bne.n	80104c8 <vTaskDelayUntil+0x2c>
	__asm volatile
 80104b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b4:	f383 8811 	msr	BASEPRI, r3
 80104b8:	f3bf 8f6f 	isb	sy
 80104bc:	f3bf 8f4f 	dsb	sy
 80104c0:	617b      	str	r3, [r7, #20]
}
 80104c2:	bf00      	nop
 80104c4:	bf00      	nop
 80104c6:	e7fd      	b.n	80104c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10b      	bne.n	80104e6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	613b      	str	r3, [r7, #16]
}
 80104e0:	bf00      	nop
 80104e2:	bf00      	nop
 80104e4:	e7fd      	b.n	80104e2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80104e6:	4b2a      	ldr	r3, [pc, #168]	@ (8010590 <vTaskDelayUntil+0xf4>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00b      	beq.n	8010506 <vTaskDelayUntil+0x6a>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	60fb      	str	r3, [r7, #12]
}
 8010500:	bf00      	nop
 8010502:	bf00      	nop
 8010504:	e7fd      	b.n	8010502 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8010506:	f000 f8ef 	bl	80106e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801050a:	4b22      	ldr	r3, [pc, #136]	@ (8010594 <vTaskDelayUntil+0xf8>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	4413      	add	r3, r2
 8010518:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	6a3a      	ldr	r2, [r7, #32]
 8010520:	429a      	cmp	r2, r3
 8010522:	d20b      	bcs.n	801053c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	69fa      	ldr	r2, [r7, #28]
 801052a:	429a      	cmp	r2, r3
 801052c:	d211      	bcs.n	8010552 <vTaskDelayUntil+0xb6>
 801052e:	69fa      	ldr	r2, [r7, #28]
 8010530:	6a3b      	ldr	r3, [r7, #32]
 8010532:	429a      	cmp	r2, r3
 8010534:	d90d      	bls.n	8010552 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010536:	2301      	movs	r3, #1
 8010538:	627b      	str	r3, [r7, #36]	@ 0x24
 801053a:	e00a      	b.n	8010552 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	69fa      	ldr	r2, [r7, #28]
 8010542:	429a      	cmp	r2, r3
 8010544:	d303      	bcc.n	801054e <vTaskDelayUntil+0xb2>
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	6a3b      	ldr	r3, [r7, #32]
 801054a:	429a      	cmp	r2, r3
 801054c:	d901      	bls.n	8010552 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801054e:	2301      	movs	r3, #1
 8010550:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	69fa      	ldr	r2, [r7, #28]
 8010556:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055a:	2b00      	cmp	r3, #0
 801055c:	d006      	beq.n	801056c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801055e:	69fa      	ldr	r2, [r7, #28]
 8010560:	6a3b      	ldr	r3, [r7, #32]
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f000 ff44 	bl	80113f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801056c:	f000 f8ca 	bl	8010704 <xTaskResumeAll>
 8010570:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d107      	bne.n	8010588 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8010578:	4b07      	ldr	r3, [pc, #28]	@ (8010598 <vTaskDelayUntil+0xfc>)
 801057a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801057e:	601a      	str	r2, [r3, #0]
 8010580:	f3bf 8f4f 	dsb	sy
 8010584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010588:	bf00      	nop
 801058a:	3728      	adds	r7, #40	@ 0x28
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	24001854 	.word	0x24001854
 8010594:	24001830 	.word	0x24001830
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80105a4:	2300      	movs	r3, #0
 80105a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d018      	beq.n	80105e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80105ae:	4b14      	ldr	r3, [pc, #80]	@ (8010600 <vTaskDelay+0x64>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00b      	beq.n	80105ce <vTaskDelay+0x32>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	60bb      	str	r3, [r7, #8]
}
 80105c8:	bf00      	nop
 80105ca:	bf00      	nop
 80105cc:	e7fd      	b.n	80105ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80105ce:	f000 f88b 	bl	80106e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80105d2:	2100      	movs	r1, #0
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 ff0d 	bl	80113f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80105da:	f000 f893 	bl	8010704 <xTaskResumeAll>
 80105de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d107      	bne.n	80105f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80105e6:	4b07      	ldr	r3, [pc, #28]	@ (8010604 <vTaskDelay+0x68>)
 80105e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105f6:	bf00      	nop
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	24001854 	.word	0x24001854
 8010604:	e000ed04 	.word	0xe000ed04

08010608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b08a      	sub	sp, #40	@ 0x28
 801060c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801060e:	2300      	movs	r3, #0
 8010610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010612:	2300      	movs	r3, #0
 8010614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010616:	463a      	mov	r2, r7
 8010618:	1d39      	adds	r1, r7, #4
 801061a:	f107 0308 	add.w	r3, r7, #8
 801061e:	4618      	mov	r0, r3
 8010620:	f7fe fc38 	bl	800ee94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010624:	6839      	ldr	r1, [r7, #0]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	68ba      	ldr	r2, [r7, #8]
 801062a:	9202      	str	r2, [sp, #8]
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	2300      	movs	r3, #0
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	2300      	movs	r3, #0
 8010634:	460a      	mov	r2, r1
 8010636:	4924      	ldr	r1, [pc, #144]	@ (80106c8 <vTaskStartScheduler+0xc0>)
 8010638:	4824      	ldr	r0, [pc, #144]	@ (80106cc <vTaskStartScheduler+0xc4>)
 801063a:	f7ff fd71 	bl	8010120 <xTaskCreateStatic>
 801063e:	4603      	mov	r3, r0
 8010640:	4a23      	ldr	r2, [pc, #140]	@ (80106d0 <vTaskStartScheduler+0xc8>)
 8010642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010644:	4b22      	ldr	r3, [pc, #136]	@ (80106d0 <vTaskStartScheduler+0xc8>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d002      	beq.n	8010652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801064c:	2301      	movs	r3, #1
 801064e:	617b      	str	r3, [r7, #20]
 8010650:	e001      	b.n	8010656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010652:	2300      	movs	r3, #0
 8010654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	2b01      	cmp	r3, #1
 801065a:	d102      	bne.n	8010662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801065c:	f000 ff1e 	bl	801149c <xTimerCreateTimerTask>
 8010660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d11b      	bne.n	80106a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8010668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	613b      	str	r3, [r7, #16]
}
 801067a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801067c:	4b15      	ldr	r3, [pc, #84]	@ (80106d4 <vTaskStartScheduler+0xcc>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3354      	adds	r3, #84	@ 0x54
 8010682:	4a15      	ldr	r2, [pc, #84]	@ (80106d8 <vTaskStartScheduler+0xd0>)
 8010684:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010686:	4b15      	ldr	r3, [pc, #84]	@ (80106dc <vTaskStartScheduler+0xd4>)
 8010688:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801068c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801068e:	4b14      	ldr	r3, [pc, #80]	@ (80106e0 <vTaskStartScheduler+0xd8>)
 8010690:	2201      	movs	r2, #1
 8010692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010694:	4b13      	ldr	r3, [pc, #76]	@ (80106e4 <vTaskStartScheduler+0xdc>)
 8010696:	2200      	movs	r2, #0
 8010698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801069a:	f001 fba9 	bl	8011df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801069e:	e00f      	b.n	80106c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80106a6:	d10b      	bne.n	80106c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80106a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ac:	f383 8811 	msr	BASEPRI, r3
 80106b0:	f3bf 8f6f 	isb	sy
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	60fb      	str	r3, [r7, #12]
}
 80106ba:	bf00      	nop
 80106bc:	bf00      	nop
 80106be:	e7fd      	b.n	80106bc <vTaskStartScheduler+0xb4>
}
 80106c0:	bf00      	nop
 80106c2:	3718      	adds	r7, #24
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	08025d84 	.word	0x08025d84
 80106cc:	08010d3d 	.word	0x08010d3d
 80106d0:	24001850 	.word	0x24001850
 80106d4:	24001358 	.word	0x24001358
 80106d8:	2400004c 	.word	0x2400004c
 80106dc:	2400184c 	.word	0x2400184c
 80106e0:	24001838 	.word	0x24001838
 80106e4:	24001830 	.word	0x24001830

080106e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80106e8:	b480      	push	{r7}
 80106ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80106ec:	4b04      	ldr	r3, [pc, #16]	@ (8010700 <vTaskSuspendAll+0x18>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3301      	adds	r3, #1
 80106f2:	4a03      	ldr	r2, [pc, #12]	@ (8010700 <vTaskSuspendAll+0x18>)
 80106f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80106f6:	bf00      	nop
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	24001854 	.word	0x24001854

08010704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801070a:	2300      	movs	r3, #0
 801070c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801070e:	2300      	movs	r3, #0
 8010710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010712:	4b42      	ldr	r3, [pc, #264]	@ (801081c <xTaskResumeAll+0x118>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d10b      	bne.n	8010732 <xTaskResumeAll+0x2e>
	__asm volatile
 801071a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	603b      	str	r3, [r7, #0]
}
 801072c:	bf00      	nop
 801072e:	bf00      	nop
 8010730:	e7fd      	b.n	801072e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010732:	f001 fc01 	bl	8011f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010736:	4b39      	ldr	r3, [pc, #228]	@ (801081c <xTaskResumeAll+0x118>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	3b01      	subs	r3, #1
 801073c:	4a37      	ldr	r2, [pc, #220]	@ (801081c <xTaskResumeAll+0x118>)
 801073e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010740:	4b36      	ldr	r3, [pc, #216]	@ (801081c <xTaskResumeAll+0x118>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d162      	bne.n	801080e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010748:	4b35      	ldr	r3, [pc, #212]	@ (8010820 <xTaskResumeAll+0x11c>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d05e      	beq.n	801080e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010750:	e02f      	b.n	80107b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010752:	4b34      	ldr	r3, [pc, #208]	@ (8010824 <xTaskResumeAll+0x120>)
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	3318      	adds	r3, #24
 801075e:	4618      	mov	r0, r3
 8010760:	f7fe fc56 	bl	800f010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	3304      	adds	r3, #4
 8010768:	4618      	mov	r0, r3
 801076a:	f7fe fc51 	bl	800f010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010772:	4b2d      	ldr	r3, [pc, #180]	@ (8010828 <xTaskResumeAll+0x124>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	429a      	cmp	r2, r3
 8010778:	d903      	bls.n	8010782 <xTaskResumeAll+0x7e>
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801077e:	4a2a      	ldr	r2, [pc, #168]	@ (8010828 <xTaskResumeAll+0x124>)
 8010780:	6013      	str	r3, [r2, #0]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010786:	4613      	mov	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	4413      	add	r3, r2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	4a27      	ldr	r2, [pc, #156]	@ (801082c <xTaskResumeAll+0x128>)
 8010790:	441a      	add	r2, r3
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	3304      	adds	r3, #4
 8010796:	4619      	mov	r1, r3
 8010798:	4610      	mov	r0, r2
 801079a:	f7fe fbdc 	bl	800ef56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107a2:	4b23      	ldr	r3, [pc, #140]	@ (8010830 <xTaskResumeAll+0x12c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d302      	bcc.n	80107b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80107ac:	4b21      	ldr	r3, [pc, #132]	@ (8010834 <xTaskResumeAll+0x130>)
 80107ae:	2201      	movs	r2, #1
 80107b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107b2:	4b1c      	ldr	r3, [pc, #112]	@ (8010824 <xTaskResumeAll+0x120>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1cb      	bne.n	8010752 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80107c0:	f000 fb78 	bl	8010eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80107c4:	4b1c      	ldr	r3, [pc, #112]	@ (8010838 <xTaskResumeAll+0x134>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d010      	beq.n	80107f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80107d0:	f000 f858 	bl	8010884 <xTaskIncrementTick>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d002      	beq.n	80107e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80107da:	4b16      	ldr	r3, [pc, #88]	@ (8010834 <xTaskResumeAll+0x130>)
 80107dc:	2201      	movs	r2, #1
 80107de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	3b01      	subs	r3, #1
 80107e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1f1      	bne.n	80107d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80107ec:	4b12      	ldr	r3, [pc, #72]	@ (8010838 <xTaskResumeAll+0x134>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80107f2:	4b10      	ldr	r3, [pc, #64]	@ (8010834 <xTaskResumeAll+0x130>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d009      	beq.n	801080e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80107fa:	2301      	movs	r3, #1
 80107fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80107fe:	4b0f      	ldr	r3, [pc, #60]	@ (801083c <xTaskResumeAll+0x138>)
 8010800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010804:	601a      	str	r2, [r3, #0]
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801080e:	f001 fbc5 	bl	8011f9c <vPortExitCritical>

	return xAlreadyYielded;
 8010812:	68bb      	ldr	r3, [r7, #8]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3710      	adds	r7, #16
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	24001854 	.word	0x24001854
 8010820:	2400182c 	.word	0x2400182c
 8010824:	240017ec 	.word	0x240017ec
 8010828:	24001834 	.word	0x24001834
 801082c:	2400135c 	.word	0x2400135c
 8010830:	24001358 	.word	0x24001358
 8010834:	24001840 	.word	0x24001840
 8010838:	2400183c 	.word	0x2400183c
 801083c:	e000ed04 	.word	0xe000ed04

08010840 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010846:	4b05      	ldr	r3, [pc, #20]	@ (801085c <xTaskGetTickCount+0x1c>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801084c:	687b      	ldr	r3, [r7, #4]
}
 801084e:	4618      	mov	r0, r3
 8010850:	370c      	adds	r7, #12
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	24001830 	.word	0x24001830

08010860 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010866:	f001 fc47 	bl	80120f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801086a:	2300      	movs	r3, #0
 801086c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801086e:	4b04      	ldr	r3, [pc, #16]	@ (8010880 <xTaskGetTickCountFromISR+0x20>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010874:	683b      	ldr	r3, [r7, #0]
}
 8010876:	4618      	mov	r0, r3
 8010878:	3708      	adds	r7, #8
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	24001830 	.word	0x24001830

08010884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801088a:	2300      	movs	r3, #0
 801088c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801088e:	4b4f      	ldr	r3, [pc, #316]	@ (80109cc <xTaskIncrementTick+0x148>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	f040 8090 	bne.w	80109b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010898:	4b4d      	ldr	r3, [pc, #308]	@ (80109d0 <xTaskIncrementTick+0x14c>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3301      	adds	r3, #1
 801089e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80108a0:	4a4b      	ldr	r2, [pc, #300]	@ (80109d0 <xTaskIncrementTick+0x14c>)
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d121      	bne.n	80108f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80108ac:	4b49      	ldr	r3, [pc, #292]	@ (80109d4 <xTaskIncrementTick+0x150>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00b      	beq.n	80108ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80108b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ba:	f383 8811 	msr	BASEPRI, r3
 80108be:	f3bf 8f6f 	isb	sy
 80108c2:	f3bf 8f4f 	dsb	sy
 80108c6:	603b      	str	r3, [r7, #0]
}
 80108c8:	bf00      	nop
 80108ca:	bf00      	nop
 80108cc:	e7fd      	b.n	80108ca <xTaskIncrementTick+0x46>
 80108ce:	4b41      	ldr	r3, [pc, #260]	@ (80109d4 <xTaskIncrementTick+0x150>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
 80108d4:	4b40      	ldr	r3, [pc, #256]	@ (80109d8 <xTaskIncrementTick+0x154>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a3e      	ldr	r2, [pc, #248]	@ (80109d4 <xTaskIncrementTick+0x150>)
 80108da:	6013      	str	r3, [r2, #0]
 80108dc:	4a3e      	ldr	r2, [pc, #248]	@ (80109d8 <xTaskIncrementTick+0x154>)
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	4b3e      	ldr	r3, [pc, #248]	@ (80109dc <xTaskIncrementTick+0x158>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	3301      	adds	r3, #1
 80108e8:	4a3c      	ldr	r2, [pc, #240]	@ (80109dc <xTaskIncrementTick+0x158>)
 80108ea:	6013      	str	r3, [r2, #0]
 80108ec:	f000 fae2 	bl	8010eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80108f0:	4b3b      	ldr	r3, [pc, #236]	@ (80109e0 <xTaskIncrementTick+0x15c>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	693a      	ldr	r2, [r7, #16]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d349      	bcc.n	801098e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108fa:	4b36      	ldr	r3, [pc, #216]	@ (80109d4 <xTaskIncrementTick+0x150>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d104      	bne.n	801090e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010904:	4b36      	ldr	r3, [pc, #216]	@ (80109e0 <xTaskIncrementTick+0x15c>)
 8010906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801090a:	601a      	str	r2, [r3, #0]
					break;
 801090c:	e03f      	b.n	801098e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801090e:	4b31      	ldr	r3, [pc, #196]	@ (80109d4 <xTaskIncrementTick+0x150>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801091e:	693a      	ldr	r2, [r7, #16]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	429a      	cmp	r2, r3
 8010924:	d203      	bcs.n	801092e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010926:	4a2e      	ldr	r2, [pc, #184]	@ (80109e0 <xTaskIncrementTick+0x15c>)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801092c:	e02f      	b.n	801098e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	3304      	adds	r3, #4
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe fb6c 	bl	800f010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801093c:	2b00      	cmp	r3, #0
 801093e:	d004      	beq.n	801094a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	3318      	adds	r3, #24
 8010944:	4618      	mov	r0, r3
 8010946:	f7fe fb63 	bl	800f010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801094e:	4b25      	ldr	r3, [pc, #148]	@ (80109e4 <xTaskIncrementTick+0x160>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	429a      	cmp	r2, r3
 8010954:	d903      	bls.n	801095e <xTaskIncrementTick+0xda>
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801095a:	4a22      	ldr	r2, [pc, #136]	@ (80109e4 <xTaskIncrementTick+0x160>)
 801095c:	6013      	str	r3, [r2, #0]
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010962:	4613      	mov	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4413      	add	r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	4a1f      	ldr	r2, [pc, #124]	@ (80109e8 <xTaskIncrementTick+0x164>)
 801096c:	441a      	add	r2, r3
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	3304      	adds	r3, #4
 8010972:	4619      	mov	r1, r3
 8010974:	4610      	mov	r0, r2
 8010976:	f7fe faee 	bl	800ef56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801097e:	4b1b      	ldr	r3, [pc, #108]	@ (80109ec <xTaskIncrementTick+0x168>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010984:	429a      	cmp	r2, r3
 8010986:	d3b8      	bcc.n	80108fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010988:	2301      	movs	r3, #1
 801098a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801098c:	e7b5      	b.n	80108fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801098e:	4b17      	ldr	r3, [pc, #92]	@ (80109ec <xTaskIncrementTick+0x168>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010994:	4914      	ldr	r1, [pc, #80]	@ (80109e8 <xTaskIncrementTick+0x164>)
 8010996:	4613      	mov	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	4413      	add	r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	440b      	add	r3, r1
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d901      	bls.n	80109aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80109a6:	2301      	movs	r3, #1
 80109a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80109aa:	4b11      	ldr	r3, [pc, #68]	@ (80109f0 <xTaskIncrementTick+0x16c>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d007      	beq.n	80109c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80109b2:	2301      	movs	r3, #1
 80109b4:	617b      	str	r3, [r7, #20]
 80109b6:	e004      	b.n	80109c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80109b8:	4b0e      	ldr	r3, [pc, #56]	@ (80109f4 <xTaskIncrementTick+0x170>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3301      	adds	r3, #1
 80109be:	4a0d      	ldr	r2, [pc, #52]	@ (80109f4 <xTaskIncrementTick+0x170>)
 80109c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80109c2:	697b      	ldr	r3, [r7, #20]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3718      	adds	r7, #24
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	24001854 	.word	0x24001854
 80109d0:	24001830 	.word	0x24001830
 80109d4:	240017e4 	.word	0x240017e4
 80109d8:	240017e8 	.word	0x240017e8
 80109dc:	24001844 	.word	0x24001844
 80109e0:	2400184c 	.word	0x2400184c
 80109e4:	24001834 	.word	0x24001834
 80109e8:	2400135c 	.word	0x2400135c
 80109ec:	24001358 	.word	0x24001358
 80109f0:	24001840 	.word	0x24001840
 80109f4:	2400183c 	.word	0x2400183c

080109f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80109fe:	4b2b      	ldr	r3, [pc, #172]	@ (8010aac <vTaskSwitchContext+0xb4>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d003      	beq.n	8010a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010a06:	4b2a      	ldr	r3, [pc, #168]	@ (8010ab0 <vTaskSwitchContext+0xb8>)
 8010a08:	2201      	movs	r2, #1
 8010a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010a0c:	e047      	b.n	8010a9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010a0e:	4b28      	ldr	r3, [pc, #160]	@ (8010ab0 <vTaskSwitchContext+0xb8>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a14:	4b27      	ldr	r3, [pc, #156]	@ (8010ab4 <vTaskSwitchContext+0xbc>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	60fb      	str	r3, [r7, #12]
 8010a1a:	e011      	b.n	8010a40 <vTaskSwitchContext+0x48>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10b      	bne.n	8010a3a <vTaskSwitchContext+0x42>
	__asm volatile
 8010a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	607b      	str	r3, [r7, #4]
}
 8010a34:	bf00      	nop
 8010a36:	bf00      	nop
 8010a38:	e7fd      	b.n	8010a36 <vTaskSwitchContext+0x3e>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	60fb      	str	r3, [r7, #12]
 8010a40:	491d      	ldr	r1, [pc, #116]	@ (8010ab8 <vTaskSwitchContext+0xc0>)
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	4613      	mov	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4413      	add	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	440b      	add	r3, r1
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d0e3      	beq.n	8010a1c <vTaskSwitchContext+0x24>
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	4613      	mov	r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	4413      	add	r3, r2
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	4a16      	ldr	r2, [pc, #88]	@ (8010ab8 <vTaskSwitchContext+0xc0>)
 8010a60:	4413      	add	r3, r2
 8010a62:	60bb      	str	r3, [r7, #8]
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	685a      	ldr	r2, [r3, #4]
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	605a      	str	r2, [r3, #4]
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	685a      	ldr	r2, [r3, #4]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	3308      	adds	r3, #8
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d104      	bne.n	8010a84 <vTaskSwitchContext+0x8c>
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	685a      	ldr	r2, [r3, #4]
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	605a      	str	r2, [r3, #4]
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8010abc <vTaskSwitchContext+0xc4>)
 8010a8c:	6013      	str	r3, [r2, #0]
 8010a8e:	4a09      	ldr	r2, [pc, #36]	@ (8010ab4 <vTaskSwitchContext+0xbc>)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010a94:	4b09      	ldr	r3, [pc, #36]	@ (8010abc <vTaskSwitchContext+0xc4>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	3354      	adds	r3, #84	@ 0x54
 8010a9a:	4a09      	ldr	r2, [pc, #36]	@ (8010ac0 <vTaskSwitchContext+0xc8>)
 8010a9c:	6013      	str	r3, [r2, #0]
}
 8010a9e:	bf00      	nop
 8010aa0:	3714      	adds	r7, #20
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr
 8010aaa:	bf00      	nop
 8010aac:	24001854 	.word	0x24001854
 8010ab0:	24001840 	.word	0x24001840
 8010ab4:	24001834 	.word	0x24001834
 8010ab8:	2400135c 	.word	0x2400135c
 8010abc:	24001358 	.word	0x24001358
 8010ac0:	2400004c 	.word	0x2400004c

08010ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d10b      	bne.n	8010aec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	60fb      	str	r3, [r7, #12]
}
 8010ae6:	bf00      	nop
 8010ae8:	bf00      	nop
 8010aea:	e7fd      	b.n	8010ae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010aec:	4b07      	ldr	r3, [pc, #28]	@ (8010b0c <vTaskPlaceOnEventList+0x48>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	3318      	adds	r3, #24
 8010af2:	4619      	mov	r1, r3
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7fe fa52 	bl	800ef9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010afa:	2101      	movs	r1, #1
 8010afc:	6838      	ldr	r0, [r7, #0]
 8010afe:	f000 fc79 	bl	80113f4 <prvAddCurrentTaskToDelayedList>
}
 8010b02:	bf00      	nop
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	24001358 	.word	0x24001358

08010b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b086      	sub	sp, #24
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d10b      	bne.n	8010b3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	617b      	str	r3, [r7, #20]
}
 8010b34:	bf00      	nop
 8010b36:	bf00      	nop
 8010b38:	e7fd      	b.n	8010b36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8010b64 <vTaskPlaceOnEventListRestricted+0x54>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	3318      	adds	r3, #24
 8010b40:	4619      	mov	r1, r3
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f7fe fa07 	bl	800ef56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b54:	6879      	ldr	r1, [r7, #4]
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f000 fc4c 	bl	80113f4 <prvAddCurrentTaskToDelayedList>
	}
 8010b5c:	bf00      	nop
 8010b5e:	3718      	adds	r7, #24
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	24001358 	.word	0x24001358

08010b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d10b      	bne.n	8010b96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	60fb      	str	r3, [r7, #12]
}
 8010b90:	bf00      	nop
 8010b92:	bf00      	nop
 8010b94:	e7fd      	b.n	8010b92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	3318      	adds	r3, #24
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fa38 	bl	800f010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8010c18 <xTaskRemoveFromEventList+0xb0>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d11d      	bne.n	8010be4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	3304      	adds	r3, #4
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fe fa2f 	bl	800f010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bb6:	4b19      	ldr	r3, [pc, #100]	@ (8010c1c <xTaskRemoveFromEventList+0xb4>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d903      	bls.n	8010bc6 <xTaskRemoveFromEventList+0x5e>
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bc2:	4a16      	ldr	r2, [pc, #88]	@ (8010c1c <xTaskRemoveFromEventList+0xb4>)
 8010bc4:	6013      	str	r3, [r2, #0]
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bca:	4613      	mov	r3, r2
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	4413      	add	r3, r2
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	4a13      	ldr	r2, [pc, #76]	@ (8010c20 <xTaskRemoveFromEventList+0xb8>)
 8010bd4:	441a      	add	r2, r3
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	3304      	adds	r3, #4
 8010bda:	4619      	mov	r1, r3
 8010bdc:	4610      	mov	r0, r2
 8010bde:	f7fe f9ba 	bl	800ef56 <vListInsertEnd>
 8010be2:	e005      	b.n	8010bf0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	3318      	adds	r3, #24
 8010be8:	4619      	mov	r1, r3
 8010bea:	480e      	ldr	r0, [pc, #56]	@ (8010c24 <xTaskRemoveFromEventList+0xbc>)
 8010bec:	f7fe f9b3 	bl	800ef56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8010c28 <xTaskRemoveFromEventList+0xc0>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d905      	bls.n	8010c0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010bfe:	2301      	movs	r3, #1
 8010c00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c02:	4b0a      	ldr	r3, [pc, #40]	@ (8010c2c <xTaskRemoveFromEventList+0xc4>)
 8010c04:	2201      	movs	r2, #1
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	e001      	b.n	8010c0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c0e:	697b      	ldr	r3, [r7, #20]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3718      	adds	r7, #24
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	24001854 	.word	0x24001854
 8010c1c:	24001834 	.word	0x24001834
 8010c20:	2400135c 	.word	0x2400135c
 8010c24:	240017ec 	.word	0x240017ec
 8010c28:	24001358 	.word	0x24001358
 8010c2c:	24001840 	.word	0x24001840

08010c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010c38:	4b06      	ldr	r3, [pc, #24]	@ (8010c54 <vTaskInternalSetTimeOutState+0x24>)
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010c40:	4b05      	ldr	r3, [pc, #20]	@ (8010c58 <vTaskInternalSetTimeOutState+0x28>)
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	605a      	str	r2, [r3, #4]
}
 8010c48:	bf00      	nop
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr
 8010c54:	24001844 	.word	0x24001844
 8010c58:	24001830 	.word	0x24001830

08010c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b088      	sub	sp, #32
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10b      	bne.n	8010c84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	613b      	str	r3, [r7, #16]
}
 8010c7e:	bf00      	nop
 8010c80:	bf00      	nop
 8010c82:	e7fd      	b.n	8010c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d10b      	bne.n	8010ca2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c8e:	f383 8811 	msr	BASEPRI, r3
 8010c92:	f3bf 8f6f 	isb	sy
 8010c96:	f3bf 8f4f 	dsb	sy
 8010c9a:	60fb      	str	r3, [r7, #12]
}
 8010c9c:	bf00      	nop
 8010c9e:	bf00      	nop
 8010ca0:	e7fd      	b.n	8010c9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010ca2:	f001 f949 	bl	8011f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8010d1c <xTaskCheckForTimeOut+0xc0>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	69ba      	ldr	r2, [r7, #24]
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010cbe:	d102      	bne.n	8010cc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	61fb      	str	r3, [r7, #28]
 8010cc4:	e023      	b.n	8010d0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	4b15      	ldr	r3, [pc, #84]	@ (8010d20 <xTaskCheckForTimeOut+0xc4>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d007      	beq.n	8010ce2 <xTaskCheckForTimeOut+0x86>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	69ba      	ldr	r2, [r7, #24]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d302      	bcc.n	8010ce2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	61fb      	str	r3, [r7, #28]
 8010ce0:	e015      	b.n	8010d0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d20b      	bcs.n	8010d04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	1ad2      	subs	r2, r2, r3
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7ff ff99 	bl	8010c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	61fb      	str	r3, [r7, #28]
 8010d02:	e004      	b.n	8010d0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2200      	movs	r2, #0
 8010d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010d0e:	f001 f945 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 8010d12:	69fb      	ldr	r3, [r7, #28]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3720      	adds	r7, #32
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	24001830 	.word	0x24001830
 8010d20:	24001844 	.word	0x24001844

08010d24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010d24:	b480      	push	{r7}
 8010d26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010d28:	4b03      	ldr	r3, [pc, #12]	@ (8010d38 <vTaskMissedYield+0x14>)
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	601a      	str	r2, [r3, #0]
}
 8010d2e:	bf00      	nop
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr
 8010d38:	24001840 	.word	0x24001840

08010d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010d44:	f000 f852 	bl	8010dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010d48:	4b06      	ldr	r3, [pc, #24]	@ (8010d64 <prvIdleTask+0x28>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d9f9      	bls.n	8010d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010d50:	4b05      	ldr	r3, [pc, #20]	@ (8010d68 <prvIdleTask+0x2c>)
 8010d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d56:	601a      	str	r2, [r3, #0]
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010d60:	e7f0      	b.n	8010d44 <prvIdleTask+0x8>
 8010d62:	bf00      	nop
 8010d64:	2400135c 	.word	0x2400135c
 8010d68:	e000ed04 	.word	0xe000ed04

08010d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d72:	2300      	movs	r3, #0
 8010d74:	607b      	str	r3, [r7, #4]
 8010d76:	e00c      	b.n	8010d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	4413      	add	r3, r2
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	4a12      	ldr	r2, [pc, #72]	@ (8010dcc <prvInitialiseTaskLists+0x60>)
 8010d84:	4413      	add	r3, r2
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fe f8b8 	bl	800eefc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	607b      	str	r3, [r7, #4]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b37      	cmp	r3, #55	@ 0x37
 8010d96:	d9ef      	bls.n	8010d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010d98:	480d      	ldr	r0, [pc, #52]	@ (8010dd0 <prvInitialiseTaskLists+0x64>)
 8010d9a:	f7fe f8af 	bl	800eefc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d9e:	480d      	ldr	r0, [pc, #52]	@ (8010dd4 <prvInitialiseTaskLists+0x68>)
 8010da0:	f7fe f8ac 	bl	800eefc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010da4:	480c      	ldr	r0, [pc, #48]	@ (8010dd8 <prvInitialiseTaskLists+0x6c>)
 8010da6:	f7fe f8a9 	bl	800eefc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010daa:	480c      	ldr	r0, [pc, #48]	@ (8010ddc <prvInitialiseTaskLists+0x70>)
 8010dac:	f7fe f8a6 	bl	800eefc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010db0:	480b      	ldr	r0, [pc, #44]	@ (8010de0 <prvInitialiseTaskLists+0x74>)
 8010db2:	f7fe f8a3 	bl	800eefc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010db6:	4b0b      	ldr	r3, [pc, #44]	@ (8010de4 <prvInitialiseTaskLists+0x78>)
 8010db8:	4a05      	ldr	r2, [pc, #20]	@ (8010dd0 <prvInitialiseTaskLists+0x64>)
 8010dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8010de8 <prvInitialiseTaskLists+0x7c>)
 8010dbe:	4a05      	ldr	r2, [pc, #20]	@ (8010dd4 <prvInitialiseTaskLists+0x68>)
 8010dc0:	601a      	str	r2, [r3, #0]
}
 8010dc2:	bf00      	nop
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	2400135c 	.word	0x2400135c
 8010dd0:	240017bc 	.word	0x240017bc
 8010dd4:	240017d0 	.word	0x240017d0
 8010dd8:	240017ec 	.word	0x240017ec
 8010ddc:	24001800 	.word	0x24001800
 8010de0:	24001818 	.word	0x24001818
 8010de4:	240017e4 	.word	0x240017e4
 8010de8:	240017e8 	.word	0x240017e8

08010dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010df2:	e019      	b.n	8010e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010df4:	f001 f8a0 	bl	8011f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010df8:	4b10      	ldr	r3, [pc, #64]	@ (8010e3c <prvCheckTasksWaitingTermination+0x50>)
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	3304      	adds	r3, #4
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7fe f903 	bl	800f010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e40 <prvCheckTasksWaitingTermination+0x54>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	4a0b      	ldr	r2, [pc, #44]	@ (8010e40 <prvCheckTasksWaitingTermination+0x54>)
 8010e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e14:	4b0b      	ldr	r3, [pc, #44]	@ (8010e44 <prvCheckTasksWaitingTermination+0x58>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8010e44 <prvCheckTasksWaitingTermination+0x58>)
 8010e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010e1e:	f001 f8bd 	bl	8011f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 f810 	bl	8010e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e28:	4b06      	ldr	r3, [pc, #24]	@ (8010e44 <prvCheckTasksWaitingTermination+0x58>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d1e1      	bne.n	8010df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e30:	bf00      	nop
 8010e32:	bf00      	nop
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	24001800 	.word	0x24001800
 8010e40:	2400182c 	.word	0x2400182c
 8010e44:	24001814 	.word	0x24001814

08010e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	3354      	adds	r3, #84	@ 0x54
 8010e54:	4618      	mov	r0, r3
 8010e56:	f013 f845 	bl	8023ee4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d108      	bne.n	8010e76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f001 fa55 	bl	8012318 <vPortFree>
				vPortFree( pxTCB );
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f001 fa52 	bl	8012318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010e74:	e019      	b.n	8010eaa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d103      	bne.n	8010e88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f001 fa49 	bl	8012318 <vPortFree>
	}
 8010e86:	e010      	b.n	8010eaa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010e8e:	2b02      	cmp	r3, #2
 8010e90:	d00b      	beq.n	8010eaa <prvDeleteTCB+0x62>
	__asm volatile
 8010e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	60fb      	str	r3, [r7, #12]
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop
 8010ea8:	e7fd      	b.n	8010ea6 <prvDeleteTCB+0x5e>
	}
 8010eaa:	bf00      	nop
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010eba:	4b0c      	ldr	r3, [pc, #48]	@ (8010eec <prvResetNextTaskUnblockTime+0x38>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d104      	bne.n	8010ece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8010ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8010ec6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010eca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ecc:	e008      	b.n	8010ee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ece:	4b07      	ldr	r3, [pc, #28]	@ (8010eec <prvResetNextTaskUnblockTime+0x38>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	4a04      	ldr	r2, [pc, #16]	@ (8010ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8010ede:	6013      	str	r3, [r2, #0]
}
 8010ee0:	bf00      	nop
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	240017e4 	.word	0x240017e4
 8010ef0:	2400184c 	.word	0x2400184c

08010ef4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010efa:	4b05      	ldr	r3, [pc, #20]	@ (8010f10 <xTaskGetCurrentTaskHandle+0x1c>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010f00:	687b      	ldr	r3, [r7, #4]
	}
 8010f02:	4618      	mov	r0, r3
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	24001358 	.word	0x24001358

08010f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8010f48 <xTaskGetSchedulerState+0x34>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d102      	bne.n	8010f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f22:	2301      	movs	r3, #1
 8010f24:	607b      	str	r3, [r7, #4]
 8010f26:	e008      	b.n	8010f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f28:	4b08      	ldr	r3, [pc, #32]	@ (8010f4c <xTaskGetSchedulerState+0x38>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d102      	bne.n	8010f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f30:	2302      	movs	r3, #2
 8010f32:	607b      	str	r3, [r7, #4]
 8010f34:	e001      	b.n	8010f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f36:	2300      	movs	r3, #0
 8010f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f3a:	687b      	ldr	r3, [r7, #4]
	}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	24001838 	.word	0x24001838
 8010f4c:	24001854 	.word	0x24001854

08010f50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d051      	beq.n	801100a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8011014 <xTaskPriorityInherit+0xc4>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d241      	bcs.n	8010ff8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	699b      	ldr	r3, [r3, #24]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	db06      	blt.n	8010f8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f7c:	4b25      	ldr	r3, [pc, #148]	@ (8011014 <xTaskPriorityInherit+0xc4>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	6959      	ldr	r1, [r3, #20]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f92:	4613      	mov	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8011018 <xTaskPriorityInherit+0xc8>)
 8010f9c:	4413      	add	r3, r2
 8010f9e:	4299      	cmp	r1, r3
 8010fa0:	d122      	bne.n	8010fe8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe f832 	bl	800f010 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fac:	4b19      	ldr	r3, [pc, #100]	@ (8011014 <xTaskPriorityInherit+0xc4>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fba:	4b18      	ldr	r3, [pc, #96]	@ (801101c <xTaskPriorityInherit+0xcc>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d903      	bls.n	8010fca <xTaskPriorityInherit+0x7a>
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc6:	4a15      	ldr	r2, [pc, #84]	@ (801101c <xTaskPriorityInherit+0xcc>)
 8010fc8:	6013      	str	r3, [r2, #0]
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fce:	4613      	mov	r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	4413      	add	r3, r2
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4a10      	ldr	r2, [pc, #64]	@ (8011018 <xTaskPriorityInherit+0xc8>)
 8010fd8:	441a      	add	r2, r3
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	3304      	adds	r3, #4
 8010fde:	4619      	mov	r1, r3
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	f7fd ffb8 	bl	800ef56 <vListInsertEnd>
 8010fe6:	e004      	b.n	8010ff2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8011014 <xTaskPriorityInherit+0xc4>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	60fb      	str	r3, [r7, #12]
 8010ff6:	e008      	b.n	801100a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ffc:	4b05      	ldr	r3, [pc, #20]	@ (8011014 <xTaskPriorityInherit+0xc4>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011002:	429a      	cmp	r2, r3
 8011004:	d201      	bcs.n	801100a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011006:	2301      	movs	r3, #1
 8011008:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801100a:	68fb      	ldr	r3, [r7, #12]
	}
 801100c:	4618      	mov	r0, r3
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	24001358 	.word	0x24001358
 8011018:	2400135c 	.word	0x2400135c
 801101c:	24001834 	.word	0x24001834

08011020 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011020:	b580      	push	{r7, lr}
 8011022:	b086      	sub	sp, #24
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801102c:	2300      	movs	r3, #0
 801102e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d058      	beq.n	80110e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011036:	4b2f      	ldr	r3, [pc, #188]	@ (80110f4 <xTaskPriorityDisinherit+0xd4>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	693a      	ldr	r2, [r7, #16]
 801103c:	429a      	cmp	r2, r3
 801103e:	d00b      	beq.n	8011058 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	60fb      	str	r3, [r7, #12]
}
 8011052:	bf00      	nop
 8011054:	bf00      	nop
 8011056:	e7fd      	b.n	8011054 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10b      	bne.n	8011078 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	60bb      	str	r3, [r7, #8]
}
 8011072:	bf00      	nop
 8011074:	bf00      	nop
 8011076:	e7fd      	b.n	8011074 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801107c:	1e5a      	subs	r2, r3, #1
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801108a:	429a      	cmp	r2, r3
 801108c:	d02c      	beq.n	80110e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011092:	2b00      	cmp	r3, #0
 8011094:	d128      	bne.n	80110e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	3304      	adds	r3, #4
 801109a:	4618      	mov	r0, r3
 801109c:	f7fd ffb8 	bl	800f010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110b8:	4b0f      	ldr	r3, [pc, #60]	@ (80110f8 <xTaskPriorityDisinherit+0xd8>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d903      	bls.n	80110c8 <xTaskPriorityDisinherit+0xa8>
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c4:	4a0c      	ldr	r2, [pc, #48]	@ (80110f8 <xTaskPriorityDisinherit+0xd8>)
 80110c6:	6013      	str	r3, [r2, #0]
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110cc:	4613      	mov	r3, r2
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	4413      	add	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4a09      	ldr	r2, [pc, #36]	@ (80110fc <xTaskPriorityDisinherit+0xdc>)
 80110d6:	441a      	add	r2, r3
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	3304      	adds	r3, #4
 80110dc:	4619      	mov	r1, r3
 80110de:	4610      	mov	r0, r2
 80110e0:	f7fd ff39 	bl	800ef56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80110e4:	2301      	movs	r3, #1
 80110e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80110e8:	697b      	ldr	r3, [r7, #20]
	}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3718      	adds	r7, #24
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	24001358 	.word	0x24001358
 80110f8:	24001834 	.word	0x24001834
 80110fc:	2400135c 	.word	0x2400135c

08011100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011100:	b580      	push	{r7, lr}
 8011102:	b088      	sub	sp, #32
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801110e:	2301      	movs	r3, #1
 8011110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d06c      	beq.n	80111f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10b      	bne.n	8011138 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	60fb      	str	r3, [r7, #12]
}
 8011132:	bf00      	nop
 8011134:	bf00      	nop
 8011136:	e7fd      	b.n	8011134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	429a      	cmp	r2, r3
 8011140:	d902      	bls.n	8011148 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	e002      	b.n	801114e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011148:	69bb      	ldr	r3, [r7, #24]
 801114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801114c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011152:	69fa      	ldr	r2, [r7, #28]
 8011154:	429a      	cmp	r2, r3
 8011156:	d04c      	beq.n	80111f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	429a      	cmp	r2, r3
 8011160:	d147      	bne.n	80111f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011162:	4b26      	ldr	r3, [pc, #152]	@ (80111fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	429a      	cmp	r2, r3
 801116a:	d10b      	bne.n	8011184 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801116c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011170:	f383 8811 	msr	BASEPRI, r3
 8011174:	f3bf 8f6f 	isb	sy
 8011178:	f3bf 8f4f 	dsb	sy
 801117c:	60bb      	str	r3, [r7, #8]
}
 801117e:	bf00      	nop
 8011180:	bf00      	nop
 8011182:	e7fd      	b.n	8011180 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011188:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	69fa      	ldr	r2, [r7, #28]
 801118e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	db04      	blt.n	80111a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801119e:	69bb      	ldr	r3, [r7, #24]
 80111a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	6959      	ldr	r1, [r3, #20]
 80111a6:	693a      	ldr	r2, [r7, #16]
 80111a8:	4613      	mov	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4413      	add	r3, r2
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	4a13      	ldr	r2, [pc, #76]	@ (8011200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80111b2:	4413      	add	r3, r2
 80111b4:	4299      	cmp	r1, r3
 80111b6:	d11c      	bne.n	80111f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	3304      	adds	r3, #4
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fd ff27 	bl	800f010 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011204 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d903      	bls.n	80111d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111d2:	4a0c      	ldr	r2, [pc, #48]	@ (8011204 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80111d4:	6013      	str	r3, [r2, #0]
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111da:	4613      	mov	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	4413      	add	r3, r2
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4a07      	ldr	r2, [pc, #28]	@ (8011200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80111e4:	441a      	add	r2, r3
 80111e6:	69bb      	ldr	r3, [r7, #24]
 80111e8:	3304      	adds	r3, #4
 80111ea:	4619      	mov	r1, r3
 80111ec:	4610      	mov	r0, r2
 80111ee:	f7fd feb2 	bl	800ef56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111f2:	bf00      	nop
 80111f4:	3720      	adds	r7, #32
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	24001358 	.word	0x24001358
 8011200:	2400135c 	.word	0x2400135c
 8011204:	24001834 	.word	0x24001834

08011208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011208:	b480      	push	{r7}
 801120a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801120c:	4b07      	ldr	r3, [pc, #28]	@ (801122c <pvTaskIncrementMutexHeldCount+0x24>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d004      	beq.n	801121e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011214:	4b05      	ldr	r3, [pc, #20]	@ (801122c <pvTaskIncrementMutexHeldCount+0x24>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801121a:	3201      	adds	r2, #1
 801121c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801121e:	4b03      	ldr	r3, [pc, #12]	@ (801122c <pvTaskIncrementMutexHeldCount+0x24>)
 8011220:	681b      	ldr	r3, [r3, #0]
	}
 8011222:	4618      	mov	r0, r3
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr
 801122c:	24001358 	.word	0x24001358

08011230 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801123a:	f000 fe7d 	bl	8011f38 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801123e:	4b20      	ldr	r3, [pc, #128]	@ (80112c0 <ulTaskNotifyTake+0x90>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d113      	bne.n	8011272 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801124a:	4b1d      	ldr	r3, [pc, #116]	@ (80112c0 <ulTaskNotifyTake+0x90>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2201      	movs	r2, #1
 8011250:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00b      	beq.n	8011272 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801125a:	2101      	movs	r1, #1
 801125c:	6838      	ldr	r0, [r7, #0]
 801125e:	f000 f8c9 	bl	80113f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011262:	4b18      	ldr	r3, [pc, #96]	@ (80112c4 <ulTaskNotifyTake+0x94>)
 8011264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011268:	601a      	str	r2, [r3, #0]
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011272:	f000 fe93 	bl	8011f9c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011276:	f000 fe5f 	bl	8011f38 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801127a:	4b11      	ldr	r3, [pc, #68]	@ (80112c0 <ulTaskNotifyTake+0x90>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011282:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00e      	beq.n	80112a8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d005      	beq.n	801129c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011290:	4b0b      	ldr	r3, [pc, #44]	@ (80112c0 <ulTaskNotifyTake+0x90>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	2200      	movs	r2, #0
 8011296:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801129a:	e005      	b.n	80112a8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801129c:	4b08      	ldr	r3, [pc, #32]	@ (80112c0 <ulTaskNotifyTake+0x90>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68fa      	ldr	r2, [r7, #12]
 80112a2:	3a01      	subs	r2, #1
 80112a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80112a8:	4b05      	ldr	r3, [pc, #20]	@ (80112c0 <ulTaskNotifyTake+0x90>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80112b2:	f000 fe73 	bl	8011f9c <vPortExitCritical>

		return ulReturn;
 80112b6:	68fb      	ldr	r3, [r7, #12]
	}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	24001358 	.word	0x24001358
 80112c4:	e000ed04 	.word	0xe000ed04

080112c8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b08a      	sub	sp, #40	@ 0x28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d10b      	bne.n	80112f0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80112d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112dc:	f383 8811 	msr	BASEPRI, r3
 80112e0:	f3bf 8f6f 	isb	sy
 80112e4:	f3bf 8f4f 	dsb	sy
 80112e8:	61bb      	str	r3, [r7, #24]
}
 80112ea:	bf00      	nop
 80112ec:	bf00      	nop
 80112ee:	e7fd      	b.n	80112ec <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112f0:	f000 ff02 	bl	80120f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80112f8:	f3ef 8211 	mrs	r2, BASEPRI
 80112fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011300:	f383 8811 	msr	BASEPRI, r3
 8011304:	f3bf 8f6f 	isb	sy
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	617a      	str	r2, [r7, #20]
 801130e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011310:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011312:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011316:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801131a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801131e:	2202      	movs	r2, #2
 8011320:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8011324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801132a:	1c5a      	adds	r2, r3, #1
 801132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801132e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011332:	7ffb      	ldrb	r3, [r7, #31]
 8011334:	2b01      	cmp	r3, #1
 8011336:	d147      	bne.n	80113c8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801133a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00b      	beq.n	8011358 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8011340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011344:	f383 8811 	msr	BASEPRI, r3
 8011348:	f3bf 8f6f 	isb	sy
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	60fb      	str	r3, [r7, #12]
}
 8011352:	bf00      	nop
 8011354:	bf00      	nop
 8011356:	e7fd      	b.n	8011354 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011358:	4b20      	ldr	r3, [pc, #128]	@ (80113dc <vTaskNotifyGiveFromISR+0x114>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d11d      	bne.n	801139c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011362:	3304      	adds	r3, #4
 8011364:	4618      	mov	r0, r3
 8011366:	f7fd fe53 	bl	800f010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136e:	4b1c      	ldr	r3, [pc, #112]	@ (80113e0 <vTaskNotifyGiveFromISR+0x118>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	429a      	cmp	r2, r3
 8011374:	d903      	bls.n	801137e <vTaskNotifyGiveFromISR+0xb6>
 8011376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801137a:	4a19      	ldr	r2, [pc, #100]	@ (80113e0 <vTaskNotifyGiveFromISR+0x118>)
 801137c:	6013      	str	r3, [r2, #0]
 801137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4a16      	ldr	r2, [pc, #88]	@ (80113e4 <vTaskNotifyGiveFromISR+0x11c>)
 801138c:	441a      	add	r2, r3
 801138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011390:	3304      	adds	r3, #4
 8011392:	4619      	mov	r1, r3
 8011394:	4610      	mov	r0, r2
 8011396:	f7fd fdde 	bl	800ef56 <vListInsertEnd>
 801139a:	e005      	b.n	80113a8 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139e:	3318      	adds	r3, #24
 80113a0:	4619      	mov	r1, r3
 80113a2:	4811      	ldr	r0, [pc, #68]	@ (80113e8 <vTaskNotifyGiveFromISR+0x120>)
 80113a4:	f7fd fdd7 	bl	800ef56 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80113a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113ac:	4b0f      	ldr	r3, [pc, #60]	@ (80113ec <vTaskNotifyGiveFromISR+0x124>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d908      	bls.n	80113c8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d002      	beq.n	80113c2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	2201      	movs	r2, #1
 80113c0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80113c2:	4b0b      	ldr	r3, [pc, #44]	@ (80113f0 <vTaskNotifyGiveFromISR+0x128>)
 80113c4:	2201      	movs	r2, #1
 80113c6:	601a      	str	r2, [r3, #0]
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	f383 8811 	msr	BASEPRI, r3
}
 80113d2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80113d4:	bf00      	nop
 80113d6:	3728      	adds	r7, #40	@ 0x28
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	24001854 	.word	0x24001854
 80113e0:	24001834 	.word	0x24001834
 80113e4:	2400135c 	.word	0x2400135c
 80113e8:	240017ec 	.word	0x240017ec
 80113ec:	24001358 	.word	0x24001358
 80113f0:	24001840 	.word	0x24001840

080113f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80113fe:	4b21      	ldr	r3, [pc, #132]	@ (8011484 <prvAddCurrentTaskToDelayedList+0x90>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011404:	4b20      	ldr	r3, [pc, #128]	@ (8011488 <prvAddCurrentTaskToDelayedList+0x94>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	3304      	adds	r3, #4
 801140a:	4618      	mov	r0, r3
 801140c:	f7fd fe00 	bl	800f010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011416:	d10a      	bne.n	801142e <prvAddCurrentTaskToDelayedList+0x3a>
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d007      	beq.n	801142e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801141e:	4b1a      	ldr	r3, [pc, #104]	@ (8011488 <prvAddCurrentTaskToDelayedList+0x94>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	3304      	adds	r3, #4
 8011424:	4619      	mov	r1, r3
 8011426:	4819      	ldr	r0, [pc, #100]	@ (801148c <prvAddCurrentTaskToDelayedList+0x98>)
 8011428:	f7fd fd95 	bl	800ef56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801142c:	e026      	b.n	801147c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	4413      	add	r3, r2
 8011434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011436:	4b14      	ldr	r3, [pc, #80]	@ (8011488 <prvAddCurrentTaskToDelayedList+0x94>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	68ba      	ldr	r2, [r7, #8]
 801143c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	429a      	cmp	r2, r3
 8011444:	d209      	bcs.n	801145a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011446:	4b12      	ldr	r3, [pc, #72]	@ (8011490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	4b0f      	ldr	r3, [pc, #60]	@ (8011488 <prvAddCurrentTaskToDelayedList+0x94>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3304      	adds	r3, #4
 8011450:	4619      	mov	r1, r3
 8011452:	4610      	mov	r0, r2
 8011454:	f7fd fda3 	bl	800ef9e <vListInsert>
}
 8011458:	e010      	b.n	801147c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801145a:	4b0e      	ldr	r3, [pc, #56]	@ (8011494 <prvAddCurrentTaskToDelayedList+0xa0>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	4b0a      	ldr	r3, [pc, #40]	@ (8011488 <prvAddCurrentTaskToDelayedList+0x94>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3304      	adds	r3, #4
 8011464:	4619      	mov	r1, r3
 8011466:	4610      	mov	r0, r2
 8011468:	f7fd fd99 	bl	800ef9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801146c:	4b0a      	ldr	r3, [pc, #40]	@ (8011498 <prvAddCurrentTaskToDelayedList+0xa4>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	68ba      	ldr	r2, [r7, #8]
 8011472:	429a      	cmp	r2, r3
 8011474:	d202      	bcs.n	801147c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011476:	4a08      	ldr	r2, [pc, #32]	@ (8011498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	6013      	str	r3, [r2, #0]
}
 801147c:	bf00      	nop
 801147e:	3710      	adds	r7, #16
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	24001830 	.word	0x24001830
 8011488:	24001358 	.word	0x24001358
 801148c:	24001818 	.word	0x24001818
 8011490:	240017e8 	.word	0x240017e8
 8011494:	240017e4 	.word	0x240017e4
 8011498:	2400184c 	.word	0x2400184c

0801149c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b08a      	sub	sp, #40	@ 0x28
 80114a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80114a2:	2300      	movs	r3, #0
 80114a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80114a6:	f000 fbb1 	bl	8011c0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80114aa:	4b1d      	ldr	r3, [pc, #116]	@ (8011520 <xTimerCreateTimerTask+0x84>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d021      	beq.n	80114f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80114b2:	2300      	movs	r3, #0
 80114b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80114b6:	2300      	movs	r3, #0
 80114b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80114ba:	1d3a      	adds	r2, r7, #4
 80114bc:	f107 0108 	add.w	r1, r7, #8
 80114c0:	f107 030c 	add.w	r3, r7, #12
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7fd fcff 	bl	800eec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80114ca:	6879      	ldr	r1, [r7, #4]
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	9202      	str	r2, [sp, #8]
 80114d2:	9301      	str	r3, [sp, #4]
 80114d4:	2302      	movs	r3, #2
 80114d6:	9300      	str	r3, [sp, #0]
 80114d8:	2300      	movs	r3, #0
 80114da:	460a      	mov	r2, r1
 80114dc:	4911      	ldr	r1, [pc, #68]	@ (8011524 <xTimerCreateTimerTask+0x88>)
 80114de:	4812      	ldr	r0, [pc, #72]	@ (8011528 <xTimerCreateTimerTask+0x8c>)
 80114e0:	f7fe fe1e 	bl	8010120 <xTaskCreateStatic>
 80114e4:	4603      	mov	r3, r0
 80114e6:	4a11      	ldr	r2, [pc, #68]	@ (801152c <xTimerCreateTimerTask+0x90>)
 80114e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80114ea:	4b10      	ldr	r3, [pc, #64]	@ (801152c <xTimerCreateTimerTask+0x90>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d001      	beq.n	80114f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80114f2:	2301      	movs	r3, #1
 80114f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10b      	bne.n	8011514 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80114fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011500:	f383 8811 	msr	BASEPRI, r3
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	613b      	str	r3, [r7, #16]
}
 801150e:	bf00      	nop
 8011510:	bf00      	nop
 8011512:	e7fd      	b.n	8011510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011514:	697b      	ldr	r3, [r7, #20]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3718      	adds	r7, #24
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	24001888 	.word	0x24001888
 8011524:	08025d8c 	.word	0x08025d8c
 8011528:	080117a5 	.word	0x080117a5
 801152c:	2400188c 	.word	0x2400188c

08011530 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af02      	add	r7, sp, #8
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801153e:	202c      	movs	r0, #44	@ 0x2c
 8011540:	f000 fe1c 	bl	801217c <pvPortMalloc>
 8011544:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d00d      	beq.n	8011568 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	2200      	movs	r2, #0
 8011550:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	9301      	str	r3, [sp, #4]
 8011558:	6a3b      	ldr	r3, [r7, #32]
 801155a:	9300      	str	r3, [sp, #0]
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	68b9      	ldr	r1, [r7, #8]
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f000 f845 	bl	80115f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011568:	697b      	ldr	r3, [r7, #20]
	}
 801156a:	4618      	mov	r0, r3
 801156c:	3718      	adds	r7, #24
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011572:	b580      	push	{r7, lr}
 8011574:	b08a      	sub	sp, #40	@ 0x28
 8011576:	af02      	add	r7, sp, #8
 8011578:	60f8      	str	r0, [r7, #12]
 801157a:	60b9      	str	r1, [r7, #8]
 801157c:	607a      	str	r2, [r7, #4]
 801157e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011580:	232c      	movs	r3, #44	@ 0x2c
 8011582:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	2b2c      	cmp	r3, #44	@ 0x2c
 8011588:	d00b      	beq.n	80115a2 <xTimerCreateStatic+0x30>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	61bb      	str	r3, [r7, #24]
}
 801159c:	bf00      	nop
 801159e:	bf00      	nop
 80115a0:	e7fd      	b.n	801159e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80115a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80115a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10b      	bne.n	80115c2 <xTimerCreateStatic+0x50>
	__asm volatile
 80115aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ae:	f383 8811 	msr	BASEPRI, r3
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	f3bf 8f4f 	dsb	sy
 80115ba:	617b      	str	r3, [r7, #20]
}
 80115bc:	bf00      	nop
 80115be:	bf00      	nop
 80115c0:	e7fd      	b.n	80115be <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80115c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00d      	beq.n	80115e8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	2202      	movs	r2, #2
 80115d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	68b9      	ldr	r1, [r7, #8]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f000 f805 	bl	80115f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80115e8:	69fb      	ldr	r3, [r7, #28]
	}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3720      	adds	r7, #32
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b086      	sub	sp, #24
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	60f8      	str	r0, [r7, #12]
 80115fa:	60b9      	str	r1, [r7, #8]
 80115fc:	607a      	str	r2, [r7, #4]
 80115fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d10b      	bne.n	801161e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8011606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801160a:	f383 8811 	msr	BASEPRI, r3
 801160e:	f3bf 8f6f 	isb	sy
 8011612:	f3bf 8f4f 	dsb	sy
 8011616:	617b      	str	r3, [r7, #20]
}
 8011618:	bf00      	nop
 801161a:	bf00      	nop
 801161c:	e7fd      	b.n	801161a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011620:	2b00      	cmp	r3, #0
 8011622:	d01e      	beq.n	8011662 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011624:	f000 faf2 	bl	8011c0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	68ba      	ldr	r2, [r7, #8]
 8011632:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	683a      	ldr	r2, [r7, #0]
 8011638:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801163c:	6a3a      	ldr	r2, [r7, #32]
 801163e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011642:	3304      	adds	r3, #4
 8011644:	4618      	mov	r0, r3
 8011646:	f7fd fc79 	bl	800ef3c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d008      	beq.n	8011662 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011656:	f043 0304 	orr.w	r3, r3, #4
 801165a:	b2da      	uxtb	r2, r3
 801165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011662:	bf00      	nop
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
	...

0801166c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b08a      	sub	sp, #40	@ 0x28
 8011670:	af00      	add	r7, sp, #0
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	60b9      	str	r1, [r7, #8]
 8011676:	607a      	str	r2, [r7, #4]
 8011678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801167a:	2300      	movs	r3, #0
 801167c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d10b      	bne.n	801169c <xTimerGenericCommand+0x30>
	__asm volatile
 8011684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011688:	f383 8811 	msr	BASEPRI, r3
 801168c:	f3bf 8f6f 	isb	sy
 8011690:	f3bf 8f4f 	dsb	sy
 8011694:	623b      	str	r3, [r7, #32]
}
 8011696:	bf00      	nop
 8011698:	bf00      	nop
 801169a:	e7fd      	b.n	8011698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801169c:	4b19      	ldr	r3, [pc, #100]	@ (8011704 <xTimerGenericCommand+0x98>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d02a      	beq.n	80116fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2b05      	cmp	r3, #5
 80116b4:	dc18      	bgt.n	80116e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80116b6:	f7ff fc2d 	bl	8010f14 <xTaskGetSchedulerState>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b02      	cmp	r3, #2
 80116be:	d109      	bne.n	80116d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80116c0:	4b10      	ldr	r3, [pc, #64]	@ (8011704 <xTimerGenericCommand+0x98>)
 80116c2:	6818      	ldr	r0, [r3, #0]
 80116c4:	f107 0110 	add.w	r1, r7, #16
 80116c8:	2300      	movs	r3, #0
 80116ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116cc:	f7fd feb0 	bl	800f430 <xQueueGenericSend>
 80116d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80116d2:	e012      	b.n	80116fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80116d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011704 <xTimerGenericCommand+0x98>)
 80116d6:	6818      	ldr	r0, [r3, #0]
 80116d8:	f107 0110 	add.w	r1, r7, #16
 80116dc:	2300      	movs	r3, #0
 80116de:	2200      	movs	r2, #0
 80116e0:	f7fd fea6 	bl	800f430 <xQueueGenericSend>
 80116e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80116e6:	e008      	b.n	80116fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80116e8:	4b06      	ldr	r3, [pc, #24]	@ (8011704 <xTimerGenericCommand+0x98>)
 80116ea:	6818      	ldr	r0, [r3, #0]
 80116ec:	f107 0110 	add.w	r1, r7, #16
 80116f0:	2300      	movs	r3, #0
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	f7fd ff9e 	bl	800f634 <xQueueGenericSendFromISR>
 80116f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80116fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3728      	adds	r7, #40	@ 0x28
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	24001888 	.word	0x24001888

08011708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b088      	sub	sp, #32
 801170c:	af02      	add	r7, sp, #8
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011712:	4b23      	ldr	r3, [pc, #140]	@ (80117a0 <prvProcessExpiredTimer+0x98>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	3304      	adds	r3, #4
 8011720:	4618      	mov	r0, r3
 8011722:	f7fd fc75 	bl	800f010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801172c:	f003 0304 	and.w	r3, r3, #4
 8011730:	2b00      	cmp	r3, #0
 8011732:	d023      	beq.n	801177c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	699a      	ldr	r2, [r3, #24]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	18d1      	adds	r1, r2, r3
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	6978      	ldr	r0, [r7, #20]
 8011742:	f000 f8d5 	bl	80118f0 <prvInsertTimerInActiveList>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d020      	beq.n	801178e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801174c:	2300      	movs	r3, #0
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	2300      	movs	r3, #0
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	2100      	movs	r1, #0
 8011756:	6978      	ldr	r0, [r7, #20]
 8011758:	f7ff ff88 	bl	801166c <xTimerGenericCommand>
 801175c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d114      	bne.n	801178e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011768:	f383 8811 	msr	BASEPRI, r3
 801176c:	f3bf 8f6f 	isb	sy
 8011770:	f3bf 8f4f 	dsb	sy
 8011774:	60fb      	str	r3, [r7, #12]
}
 8011776:	bf00      	nop
 8011778:	bf00      	nop
 801177a:	e7fd      	b.n	8011778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011782:	f023 0301 	bic.w	r3, r3, #1
 8011786:	b2da      	uxtb	r2, r3
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	6a1b      	ldr	r3, [r3, #32]
 8011792:	6978      	ldr	r0, [r7, #20]
 8011794:	4798      	blx	r3
}
 8011796:	bf00      	nop
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	24001880 	.word	0x24001880

080117a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80117ac:	f107 0308 	add.w	r3, r7, #8
 80117b0:	4618      	mov	r0, r3
 80117b2:	f000 f859 	bl	8011868 <prvGetNextExpireTime>
 80117b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	4619      	mov	r1, r3
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f000 f805 	bl	80117cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80117c2:	f000 f8d7 	bl	8011974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80117c6:	bf00      	nop
 80117c8:	e7f0      	b.n	80117ac <prvTimerTask+0x8>
	...

080117cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80117d6:	f7fe ff87 	bl	80106e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117da:	f107 0308 	add.w	r3, r7, #8
 80117de:	4618      	mov	r0, r3
 80117e0:	f000 f866 	bl	80118b0 <prvSampleTimeNow>
 80117e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d130      	bne.n	801184e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10a      	bne.n	8011808 <prvProcessTimerOrBlockTask+0x3c>
 80117f2:	687a      	ldr	r2, [r7, #4]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d806      	bhi.n	8011808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80117fa:	f7fe ff83 	bl	8010704 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80117fe:	68f9      	ldr	r1, [r7, #12]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7ff ff81 	bl	8011708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011806:	e024      	b.n	8011852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d008      	beq.n	8011820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801180e:	4b13      	ldr	r3, [pc, #76]	@ (801185c <prvProcessTimerOrBlockTask+0x90>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d101      	bne.n	801181c <prvProcessTimerOrBlockTask+0x50>
 8011818:	2301      	movs	r3, #1
 801181a:	e000      	b.n	801181e <prvProcessTimerOrBlockTask+0x52>
 801181c:	2300      	movs	r3, #0
 801181e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011820:	4b0f      	ldr	r3, [pc, #60]	@ (8011860 <prvProcessTimerOrBlockTask+0x94>)
 8011822:	6818      	ldr	r0, [r3, #0]
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	683a      	ldr	r2, [r7, #0]
 801182c:	4619      	mov	r1, r3
 801182e:	f7fe fc43 	bl	80100b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011832:	f7fe ff67 	bl	8010704 <xTaskResumeAll>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d10a      	bne.n	8011852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801183c:	4b09      	ldr	r3, [pc, #36]	@ (8011864 <prvProcessTimerOrBlockTask+0x98>)
 801183e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011842:	601a      	str	r2, [r3, #0]
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	f3bf 8f6f 	isb	sy
}
 801184c:	e001      	b.n	8011852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801184e:	f7fe ff59 	bl	8010704 <xTaskResumeAll>
}
 8011852:	bf00      	nop
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	24001884 	.word	0x24001884
 8011860:	24001888 	.word	0x24001888
 8011864:	e000ed04 	.word	0xe000ed04

08011868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011870:	4b0e      	ldr	r3, [pc, #56]	@ (80118ac <prvGetNextExpireTime+0x44>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d101      	bne.n	801187e <prvGetNextExpireTime+0x16>
 801187a:	2201      	movs	r2, #1
 801187c:	e000      	b.n	8011880 <prvGetNextExpireTime+0x18>
 801187e:	2200      	movs	r2, #0
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d105      	bne.n	8011898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801188c:	4b07      	ldr	r3, [pc, #28]	@ (80118ac <prvGetNextExpireTime+0x44>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60fb      	str	r3, [r7, #12]
 8011896:	e001      	b.n	801189c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011898:	2300      	movs	r3, #0
 801189a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801189c:	68fb      	ldr	r3, [r7, #12]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3714      	adds	r7, #20
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	24001880 	.word	0x24001880

080118b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80118b8:	f7fe ffc2 	bl	8010840 <xTaskGetTickCount>
 80118bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80118be:	4b0b      	ldr	r3, [pc, #44]	@ (80118ec <prvSampleTimeNow+0x3c>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d205      	bcs.n	80118d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80118c8:	f000 f93a 	bl	8011b40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2201      	movs	r2, #1
 80118d0:	601a      	str	r2, [r3, #0]
 80118d2:	e002      	b.n	80118da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80118da:	4a04      	ldr	r2, [pc, #16]	@ (80118ec <prvSampleTimeNow+0x3c>)
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80118e0:	68fb      	ldr	r3, [r7, #12]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	24001890 	.word	0x24001890

080118f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b086      	sub	sp, #24
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	60b9      	str	r1, [r7, #8]
 80118fa:	607a      	str	r2, [r7, #4]
 80118fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80118fe:	2300      	movs	r3, #0
 8011900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	68fa      	ldr	r2, [r7, #12]
 801190c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801190e:	68ba      	ldr	r2, [r7, #8]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	429a      	cmp	r2, r3
 8011914:	d812      	bhi.n	801193c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	1ad2      	subs	r2, r2, r3
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	429a      	cmp	r2, r3
 8011922:	d302      	bcc.n	801192a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011924:	2301      	movs	r3, #1
 8011926:	617b      	str	r3, [r7, #20]
 8011928:	e01b      	b.n	8011962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801192a:	4b10      	ldr	r3, [pc, #64]	@ (801196c <prvInsertTimerInActiveList+0x7c>)
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	3304      	adds	r3, #4
 8011932:	4619      	mov	r1, r3
 8011934:	4610      	mov	r0, r2
 8011936:	f7fd fb32 	bl	800ef9e <vListInsert>
 801193a:	e012      	b.n	8011962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	429a      	cmp	r2, r3
 8011942:	d206      	bcs.n	8011952 <prvInsertTimerInActiveList+0x62>
 8011944:	68ba      	ldr	r2, [r7, #8]
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	429a      	cmp	r2, r3
 801194a:	d302      	bcc.n	8011952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801194c:	2301      	movs	r3, #1
 801194e:	617b      	str	r3, [r7, #20]
 8011950:	e007      	b.n	8011962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011952:	4b07      	ldr	r3, [pc, #28]	@ (8011970 <prvInsertTimerInActiveList+0x80>)
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	3304      	adds	r3, #4
 801195a:	4619      	mov	r1, r3
 801195c:	4610      	mov	r0, r2
 801195e:	f7fd fb1e 	bl	800ef9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011962:	697b      	ldr	r3, [r7, #20]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3718      	adds	r7, #24
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	24001884 	.word	0x24001884
 8011970:	24001880 	.word	0x24001880

08011974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b08e      	sub	sp, #56	@ 0x38
 8011978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801197a:	e0ce      	b.n	8011b1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	da19      	bge.n	80119b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011982:	1d3b      	adds	r3, r7, #4
 8011984:	3304      	adds	r3, #4
 8011986:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10b      	bne.n	80119a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	61fb      	str	r3, [r7, #28]
}
 80119a0:	bf00      	nop
 80119a2:	bf00      	nop
 80119a4:	e7fd      	b.n	80119a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80119a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119ac:	6850      	ldr	r0, [r2, #4]
 80119ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119b0:	6892      	ldr	r2, [r2, #8]
 80119b2:	4611      	mov	r1, r2
 80119b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f2c0 80ae 	blt.w	8011b1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80119c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c4:	695b      	ldr	r3, [r3, #20]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d004      	beq.n	80119d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119cc:	3304      	adds	r3, #4
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fd fb1e 	bl	800f010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80119d4:	463b      	mov	r3, r7
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7ff ff6a 	bl	80118b0 <prvSampleTimeNow>
 80119dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b09      	cmp	r3, #9
 80119e2:	f200 8097 	bhi.w	8011b14 <prvProcessReceivedCommands+0x1a0>
 80119e6:	a201      	add	r2, pc, #4	@ (adr r2, 80119ec <prvProcessReceivedCommands+0x78>)
 80119e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ec:	08011a15 	.word	0x08011a15
 80119f0:	08011a15 	.word	0x08011a15
 80119f4:	08011a15 	.word	0x08011a15
 80119f8:	08011a8b 	.word	0x08011a8b
 80119fc:	08011a9f 	.word	0x08011a9f
 8011a00:	08011aeb 	.word	0x08011aeb
 8011a04:	08011a15 	.word	0x08011a15
 8011a08:	08011a15 	.word	0x08011a15
 8011a0c:	08011a8b 	.word	0x08011a8b
 8011a10:	08011a9f 	.word	0x08011a9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a1a:	f043 0301 	orr.w	r3, r3, #1
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2a:	699b      	ldr	r3, [r3, #24]
 8011a2c:	18d1      	adds	r1, r2, r3
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a34:	f7ff ff5c 	bl	80118f0 <prvInsertTimerInActiveList>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d06c      	beq.n	8011b18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a4c:	f003 0304 	and.w	r3, r3, #4
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d061      	beq.n	8011b18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a58:	699b      	ldr	r3, [r3, #24]
 8011a5a:	441a      	add	r2, r3
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	2300      	movs	r3, #0
 8011a62:	2100      	movs	r1, #0
 8011a64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a66:	f7ff fe01 	bl	801166c <xTimerGenericCommand>
 8011a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011a6c:	6a3b      	ldr	r3, [r7, #32]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d152      	bne.n	8011b18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a76:	f383 8811 	msr	BASEPRI, r3
 8011a7a:	f3bf 8f6f 	isb	sy
 8011a7e:	f3bf 8f4f 	dsb	sy
 8011a82:	61bb      	str	r3, [r7, #24]
}
 8011a84:	bf00      	nop
 8011a86:	bf00      	nop
 8011a88:	e7fd      	b.n	8011a86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a90:	f023 0301 	bic.w	r3, r3, #1
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011a9c:	e03d      	b.n	8011b1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011aa4:	f043 0301 	orr.w	r3, r3, #1
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab8:	699b      	ldr	r3, [r3, #24]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d10b      	bne.n	8011ad6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ac2:	f383 8811 	msr	BASEPRI, r3
 8011ac6:	f3bf 8f6f 	isb	sy
 8011aca:	f3bf 8f4f 	dsb	sy
 8011ace:	617b      	str	r3, [r7, #20]
}
 8011ad0:	bf00      	nop
 8011ad2:	bf00      	nop
 8011ad4:	e7fd      	b.n	8011ad2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad8:	699a      	ldr	r2, [r3, #24]
 8011ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011adc:	18d1      	adds	r1, r2, r3
 8011ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ae4:	f7ff ff04 	bl	80118f0 <prvInsertTimerInActiveList>
					break;
 8011ae8:	e017      	b.n	8011b1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011af0:	f003 0302 	and.w	r3, r3, #2
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d103      	bne.n	8011b00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011afa:	f000 fc0d 	bl	8012318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011afe:	e00c      	b.n	8011b1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b06:	f023 0301 	bic.w	r3, r3, #1
 8011b0a:	b2da      	uxtb	r2, r3
 8011b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011b12:	e002      	b.n	8011b1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011b14:	bf00      	nop
 8011b16:	e000      	b.n	8011b1a <prvProcessReceivedCommands+0x1a6>
					break;
 8011b18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b1a:	4b08      	ldr	r3, [pc, #32]	@ (8011b3c <prvProcessReceivedCommands+0x1c8>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	1d39      	adds	r1, r7, #4
 8011b20:	2200      	movs	r2, #0
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7fd feb4 	bl	800f890 <xQueueReceive>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f47f af26 	bne.w	801197c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011b30:	bf00      	nop
 8011b32:	bf00      	nop
 8011b34:	3730      	adds	r7, #48	@ 0x30
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	24001888 	.word	0x24001888

08011b40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b088      	sub	sp, #32
 8011b44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011b46:	e049      	b.n	8011bdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b48:	4b2e      	ldr	r3, [pc, #184]	@ (8011c04 <prvSwitchTimerLists+0xc4>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b52:	4b2c      	ldr	r3, [pc, #176]	@ (8011c04 <prvSwitchTimerLists+0xc4>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fd fa55 	bl	800f010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	6a1b      	ldr	r3, [r3, #32]
 8011b6a:	68f8      	ldr	r0, [r7, #12]
 8011b6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b74:	f003 0304 	and.w	r3, r3, #4
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d02f      	beq.n	8011bdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	699b      	ldr	r3, [r3, #24]
 8011b80:	693a      	ldr	r2, [r7, #16]
 8011b82:	4413      	add	r3, r2
 8011b84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011b86:	68ba      	ldr	r2, [r7, #8]
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d90e      	bls.n	8011bac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8011c04 <prvSwitchTimerLists+0xc4>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	f7fd f9fa 	bl	800ef9e <vListInsert>
 8011baa:	e017      	b.n	8011bdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bac:	2300      	movs	r3, #0
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	693a      	ldr	r2, [r7, #16]
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f7ff fd58 	bl	801166c <xTimerGenericCommand>
 8011bbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d10b      	bne.n	8011bdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc8:	f383 8811 	msr	BASEPRI, r3
 8011bcc:	f3bf 8f6f 	isb	sy
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	603b      	str	r3, [r7, #0]
}
 8011bd6:	bf00      	nop
 8011bd8:	bf00      	nop
 8011bda:	e7fd      	b.n	8011bd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011bdc:	4b09      	ldr	r3, [pc, #36]	@ (8011c04 <prvSwitchTimerLists+0xc4>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1b0      	bne.n	8011b48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011be6:	4b07      	ldr	r3, [pc, #28]	@ (8011c04 <prvSwitchTimerLists+0xc4>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011bec:	4b06      	ldr	r3, [pc, #24]	@ (8011c08 <prvSwitchTimerLists+0xc8>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4a04      	ldr	r2, [pc, #16]	@ (8011c04 <prvSwitchTimerLists+0xc4>)
 8011bf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011bf4:	4a04      	ldr	r2, [pc, #16]	@ (8011c08 <prvSwitchTimerLists+0xc8>)
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	6013      	str	r3, [r2, #0]
}
 8011bfa:	bf00      	nop
 8011bfc:	3718      	adds	r7, #24
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	24001880 	.word	0x24001880
 8011c08:	24001884 	.word	0x24001884

08011c0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011c12:	f000 f991 	bl	8011f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011c16:	4b15      	ldr	r3, [pc, #84]	@ (8011c6c <prvCheckForValidListAndQueue+0x60>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d120      	bne.n	8011c60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011c1e:	4814      	ldr	r0, [pc, #80]	@ (8011c70 <prvCheckForValidListAndQueue+0x64>)
 8011c20:	f7fd f96c 	bl	800eefc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011c24:	4813      	ldr	r0, [pc, #76]	@ (8011c74 <prvCheckForValidListAndQueue+0x68>)
 8011c26:	f7fd f969 	bl	800eefc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011c2a:	4b13      	ldr	r3, [pc, #76]	@ (8011c78 <prvCheckForValidListAndQueue+0x6c>)
 8011c2c:	4a10      	ldr	r2, [pc, #64]	@ (8011c70 <prvCheckForValidListAndQueue+0x64>)
 8011c2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011c30:	4b12      	ldr	r3, [pc, #72]	@ (8011c7c <prvCheckForValidListAndQueue+0x70>)
 8011c32:	4a10      	ldr	r2, [pc, #64]	@ (8011c74 <prvCheckForValidListAndQueue+0x68>)
 8011c34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011c36:	2300      	movs	r3, #0
 8011c38:	9300      	str	r3, [sp, #0]
 8011c3a:	4b11      	ldr	r3, [pc, #68]	@ (8011c80 <prvCheckForValidListAndQueue+0x74>)
 8011c3c:	4a11      	ldr	r2, [pc, #68]	@ (8011c84 <prvCheckForValidListAndQueue+0x78>)
 8011c3e:	2110      	movs	r1, #16
 8011c40:	200a      	movs	r0, #10
 8011c42:	f7fd fa79 	bl	800f138 <xQueueGenericCreateStatic>
 8011c46:	4603      	mov	r3, r0
 8011c48:	4a08      	ldr	r2, [pc, #32]	@ (8011c6c <prvCheckForValidListAndQueue+0x60>)
 8011c4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011c4c:	4b07      	ldr	r3, [pc, #28]	@ (8011c6c <prvCheckForValidListAndQueue+0x60>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d005      	beq.n	8011c60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011c54:	4b05      	ldr	r3, [pc, #20]	@ (8011c6c <prvCheckForValidListAndQueue+0x60>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	490b      	ldr	r1, [pc, #44]	@ (8011c88 <prvCheckForValidListAndQueue+0x7c>)
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fe f9d8 	bl	8010010 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011c60:	f000 f99c 	bl	8011f9c <vPortExitCritical>
}
 8011c64:	bf00      	nop
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	24001888 	.word	0x24001888
 8011c70:	24001858 	.word	0x24001858
 8011c74:	2400186c 	.word	0x2400186c
 8011c78:	24001880 	.word	0x24001880
 8011c7c:	24001884 	.word	0x24001884
 8011c80:	24001934 	.word	0x24001934
 8011c84:	24001894 	.word	0x24001894
 8011c88:	08025d94 	.word	0x08025d94

08011c8c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b086      	sub	sp, #24
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d10b      	bne.n	8011cb6 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8011c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca2:	f383 8811 	msr	BASEPRI, r3
 8011ca6:	f3bf 8f6f 	isb	sy
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	60fb      	str	r3, [r7, #12]
}
 8011cb0:	bf00      	nop
 8011cb2:	bf00      	nop
 8011cb4:	e7fd      	b.n	8011cb2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8011cb6:	f000 f93f 	bl	8011f38 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	69db      	ldr	r3, [r3, #28]
 8011cbe:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011cc0:	f000 f96c 	bl	8011f9c <vPortExitCritical>

	return pvReturn;
 8011cc4:	693b      	ldr	r3, [r7, #16]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3718      	adds	r7, #24
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
	...

08011cd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	3b04      	subs	r3, #4
 8011ce0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	3b04      	subs	r3, #4
 8011cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	f023 0201 	bic.w	r2, r3, #1
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	3b04      	subs	r3, #4
 8011cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d00:	4a0c      	ldr	r2, [pc, #48]	@ (8011d34 <pxPortInitialiseStack+0x64>)
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	3b14      	subs	r3, #20
 8011d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	3b04      	subs	r3, #4
 8011d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f06f 0202 	mvn.w	r2, #2
 8011d1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	3b20      	subs	r3, #32
 8011d24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d26:	68fb      	ldr	r3, [r7, #12]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	08011d39 	.word	0x08011d39

08011d38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b085      	sub	sp, #20
 8011d3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d42:	4b13      	ldr	r3, [pc, #76]	@ (8011d90 <prvTaskExitError+0x58>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d4a:	d00b      	beq.n	8011d64 <prvTaskExitError+0x2c>
	__asm volatile
 8011d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	60fb      	str	r3, [r7, #12]
}
 8011d5e:	bf00      	nop
 8011d60:	bf00      	nop
 8011d62:	e7fd      	b.n	8011d60 <prvTaskExitError+0x28>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	60bb      	str	r3, [r7, #8]
}
 8011d76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d78:	bf00      	nop
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d0fc      	beq.n	8011d7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d80:	bf00      	nop
 8011d82:	bf00      	nop
 8011d84:	3714      	adds	r7, #20
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr
 8011d8e:	bf00      	nop
 8011d90:	24000010 	.word	0x24000010
	...

08011da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011da0:	4b07      	ldr	r3, [pc, #28]	@ (8011dc0 <pxCurrentTCBConst2>)
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011daa:	f380 8809 	msr	PSP, r0
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f04f 0000 	mov.w	r0, #0
 8011db6:	f380 8811 	msr	BASEPRI, r0
 8011dba:	4770      	bx	lr
 8011dbc:	f3af 8000 	nop.w

08011dc0 <pxCurrentTCBConst2>:
 8011dc0:	24001358 	.word	0x24001358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop

08011dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011dc8:	4808      	ldr	r0, [pc, #32]	@ (8011dec <prvPortStartFirstTask+0x24>)
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f380 8808 	msr	MSP, r0
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8814 	msr	CONTROL, r0
 8011dda:	b662      	cpsie	i
 8011ddc:	b661      	cpsie	f
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	df00      	svc	0
 8011de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011dea:	bf00      	nop
 8011dec:	e000ed08 	.word	0xe000ed08

08011df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011df6:	4b47      	ldr	r3, [pc, #284]	@ (8011f14 <xPortStartScheduler+0x124>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a47      	ldr	r2, [pc, #284]	@ (8011f18 <xPortStartScheduler+0x128>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d10b      	bne.n	8011e18 <xPortStartScheduler+0x28>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	613b      	str	r3, [r7, #16]
}
 8011e12:	bf00      	nop
 8011e14:	bf00      	nop
 8011e16:	e7fd      	b.n	8011e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e18:	4b3e      	ldr	r3, [pc, #248]	@ (8011f14 <xPortStartScheduler+0x124>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8011f1c <xPortStartScheduler+0x12c>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d10b      	bne.n	8011e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8011e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	60fb      	str	r3, [r7, #12]
}
 8011e34:	bf00      	nop
 8011e36:	bf00      	nop
 8011e38:	e7fd      	b.n	8011e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e3a:	4b39      	ldr	r3, [pc, #228]	@ (8011f20 <xPortStartScheduler+0x130>)
 8011e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	22ff      	movs	r2, #255	@ 0xff
 8011e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e54:	78fb      	ldrb	r3, [r7, #3]
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b31      	ldr	r3, [pc, #196]	@ (8011f24 <xPortStartScheduler+0x134>)
 8011e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e62:	4b31      	ldr	r3, [pc, #196]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e64:	2207      	movs	r2, #7
 8011e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e68:	e009      	b.n	8011e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	4a2d      	ldr	r2, [pc, #180]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e74:	78fb      	ldrb	r3, [r7, #3]
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e7e:	78fb      	ldrb	r3, [r7, #3]
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e86:	2b80      	cmp	r3, #128	@ 0x80
 8011e88:	d0ef      	beq.n	8011e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e8a:	4b27      	ldr	r3, [pc, #156]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f1c3 0307 	rsb	r3, r3, #7
 8011e92:	2b04      	cmp	r3, #4
 8011e94:	d00b      	beq.n	8011eae <xPortStartScheduler+0xbe>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9a:	f383 8811 	msr	BASEPRI, r3
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f3bf 8f4f 	dsb	sy
 8011ea6:	60bb      	str	r3, [r7, #8]
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	e7fd      	b.n	8011eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011eae:	4b1e      	ldr	r3, [pc, #120]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	021b      	lsls	r3, r3, #8
 8011eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011ec0:	4a19      	ldr	r2, [pc, #100]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ecc:	4b17      	ldr	r3, [pc, #92]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a16      	ldr	r2, [pc, #88]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ed8:	4b14      	ldr	r3, [pc, #80]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a13      	ldr	r2, [pc, #76]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ee4:	f000 f8da 	bl	801209c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ee8:	4b11      	ldr	r3, [pc, #68]	@ (8011f30 <xPortStartScheduler+0x140>)
 8011eea:	2200      	movs	r2, #0
 8011eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011eee:	f000 f8f9 	bl	80120e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011ef2:	4b10      	ldr	r3, [pc, #64]	@ (8011f34 <xPortStartScheduler+0x144>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8011f34 <xPortStartScheduler+0x144>)
 8011ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011efe:	f7ff ff63 	bl	8011dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f02:	f7fe fd79 	bl	80109f8 <vTaskSwitchContext>
	prvTaskExitError();
 8011f06:	f7ff ff17 	bl	8011d38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3718      	adds	r7, #24
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	e000ed00 	.word	0xe000ed00
 8011f18:	410fc271 	.word	0x410fc271
 8011f1c:	410fc270 	.word	0x410fc270
 8011f20:	e000e400 	.word	0xe000e400
 8011f24:	24001984 	.word	0x24001984
 8011f28:	24001988 	.word	0x24001988
 8011f2c:	e000ed20 	.word	0xe000ed20
 8011f30:	24000010 	.word	0x24000010
 8011f34:	e000ef34 	.word	0xe000ef34

08011f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	607b      	str	r3, [r7, #4]
}
 8011f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f52:	4b10      	ldr	r3, [pc, #64]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3301      	adds	r3, #1
 8011f58:	4a0e      	ldr	r2, [pc, #56]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d110      	bne.n	8011f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f64:	4b0c      	ldr	r3, [pc, #48]	@ (8011f98 <vPortEnterCritical+0x60>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8011f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f72:	f383 8811 	msr	BASEPRI, r3
 8011f76:	f3bf 8f6f 	isb	sy
 8011f7a:	f3bf 8f4f 	dsb	sy
 8011f7e:	603b      	str	r3, [r7, #0]
}
 8011f80:	bf00      	nop
 8011f82:	bf00      	nop
 8011f84:	e7fd      	b.n	8011f82 <vPortEnterCritical+0x4a>
	}
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	24000010 	.word	0x24000010
 8011f98:	e000ed04 	.word	0xe000ed04

08011f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011fa2:	4b12      	ldr	r3, [pc, #72]	@ (8011fec <vPortExitCritical+0x50>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10b      	bne.n	8011fc2 <vPortExitCritical+0x26>
	__asm volatile
 8011faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fae:	f383 8811 	msr	BASEPRI, r3
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	607b      	str	r3, [r7, #4]
}
 8011fbc:	bf00      	nop
 8011fbe:	bf00      	nop
 8011fc0:	e7fd      	b.n	8011fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8011fec <vPortExitCritical+0x50>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	3b01      	subs	r3, #1
 8011fc8:	4a08      	ldr	r2, [pc, #32]	@ (8011fec <vPortExitCritical+0x50>)
 8011fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011fcc:	4b07      	ldr	r3, [pc, #28]	@ (8011fec <vPortExitCritical+0x50>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d105      	bne.n	8011fe0 <vPortExitCritical+0x44>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	f383 8811 	msr	BASEPRI, r3
}
 8011fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fe0:	bf00      	nop
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	24000010 	.word	0x24000010

08011ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ff0:	f3ef 8009 	mrs	r0, PSP
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	4b15      	ldr	r3, [pc, #84]	@ (8012050 <pxCurrentTCBConst>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	f01e 0f10 	tst.w	lr, #16
 8012000:	bf08      	it	eq
 8012002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	6010      	str	r0, [r2, #0]
 801200c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012014:	f380 8811 	msr	BASEPRI, r0
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f7fe fcea 	bl	80109f8 <vTaskSwitchContext>
 8012024:	f04f 0000 	mov.w	r0, #0
 8012028:	f380 8811 	msr	BASEPRI, r0
 801202c:	bc09      	pop	{r0, r3}
 801202e:	6819      	ldr	r1, [r3, #0]
 8012030:	6808      	ldr	r0, [r1, #0]
 8012032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012036:	f01e 0f10 	tst.w	lr, #16
 801203a:	bf08      	it	eq
 801203c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012040:	f380 8809 	msr	PSP, r0
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	f3af 8000 	nop.w

08012050 <pxCurrentTCBConst>:
 8012050:	24001358 	.word	0x24001358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012054:	bf00      	nop
 8012056:	bf00      	nop

08012058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
	__asm volatile
 801205e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	607b      	str	r3, [r7, #4]
}
 8012070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012072:	f7fe fc07 	bl	8010884 <xTaskIncrementTick>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801207c:	4b06      	ldr	r3, [pc, #24]	@ (8012098 <xPortSysTickHandler+0x40>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	2300      	movs	r3, #0
 8012086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	f383 8811 	msr	BASEPRI, r3
}
 801208e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801209c:	b480      	push	{r7}
 801209e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80120a0:	4b0b      	ldr	r3, [pc, #44]	@ (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	@ (80120d4 <vPortSetupTimerInterrupt+0x38>)
 80120a8:	2200      	movs	r2, #0
 80120aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80120ac:	4b0a      	ldr	r3, [pc, #40]	@ (80120d8 <vPortSetupTimerInterrupt+0x3c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a0a      	ldr	r2, [pc, #40]	@ (80120dc <vPortSetupTimerInterrupt+0x40>)
 80120b2:	fba2 2303 	umull	r2, r3, r2, r3
 80120b6:	099b      	lsrs	r3, r3, #6
 80120b8:	4a09      	ldr	r2, [pc, #36]	@ (80120e0 <vPortSetupTimerInterrupt+0x44>)
 80120ba:	3b01      	subs	r3, #1
 80120bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80120be:	4b04      	ldr	r3, [pc, #16]	@ (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120c0:	2207      	movs	r2, #7
 80120c2:	601a      	str	r2, [r3, #0]
}
 80120c4:	bf00      	nop
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	e000e010 	.word	0xe000e010
 80120d4:	e000e018 	.word	0xe000e018
 80120d8:	24000000 	.word	0x24000000
 80120dc:	10624dd3 	.word	0x10624dd3
 80120e0:	e000e014 	.word	0xe000e014

080120e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80120f4 <vPortEnableVFP+0x10>
 80120e8:	6801      	ldr	r1, [r0, #0]
 80120ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80120ee:	6001      	str	r1, [r0, #0]
 80120f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120f2:	bf00      	nop
 80120f4:	e000ed88 	.word	0xe000ed88

080120f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120fe:	f3ef 8305 	mrs	r3, IPSR
 8012102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b0f      	cmp	r3, #15
 8012108:	d915      	bls.n	8012136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801210a:	4a18      	ldr	r2, [pc, #96]	@ (801216c <vPortValidateInterruptPriority+0x74>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012114:	4b16      	ldr	r3, [pc, #88]	@ (8012170 <vPortValidateInterruptPriority+0x78>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	429a      	cmp	r2, r3
 801211c:	d20b      	bcs.n	8012136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	607b      	str	r3, [r7, #4]
}
 8012130:	bf00      	nop
 8012132:	bf00      	nop
 8012134:	e7fd      	b.n	8012132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012136:	4b0f      	ldr	r3, [pc, #60]	@ (8012174 <vPortValidateInterruptPriority+0x7c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801213e:	4b0e      	ldr	r3, [pc, #56]	@ (8012178 <vPortValidateInterruptPriority+0x80>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	429a      	cmp	r2, r3
 8012144:	d90b      	bls.n	801215e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801214a:	f383 8811 	msr	BASEPRI, r3
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	f3bf 8f4f 	dsb	sy
 8012156:	603b      	str	r3, [r7, #0]
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	e7fd      	b.n	801215a <vPortValidateInterruptPriority+0x62>
	}
 801215e:	bf00      	nop
 8012160:	3714      	adds	r7, #20
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	e000e3f0 	.word	0xe000e3f0
 8012170:	24001984 	.word	0x24001984
 8012174:	e000ed0c 	.word	0xe000ed0c
 8012178:	24001988 	.word	0x24001988

0801217c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b08a      	sub	sp, #40	@ 0x28
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012184:	2300      	movs	r3, #0
 8012186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012188:	f7fe faae 	bl	80106e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801218c:	4b5c      	ldr	r3, [pc, #368]	@ (8012300 <pvPortMalloc+0x184>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d101      	bne.n	8012198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012194:	f000 f924 	bl	80123e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012198:	4b5a      	ldr	r3, [pc, #360]	@ (8012304 <pvPortMalloc+0x188>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	4013      	ands	r3, r2
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f040 8095 	bne.w	80122d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d01e      	beq.n	80121ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80121ac:	2208      	movs	r2, #8
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4413      	add	r3, r2
 80121b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f003 0307 	and.w	r3, r3, #7
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d015      	beq.n	80121ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f023 0307 	bic.w	r3, r3, #7
 80121c4:	3308      	adds	r3, #8
 80121c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f003 0307 	and.w	r3, r3, #7
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00b      	beq.n	80121ea <pvPortMalloc+0x6e>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	617b      	str	r3, [r7, #20]
}
 80121e4:	bf00      	nop
 80121e6:	bf00      	nop
 80121e8:	e7fd      	b.n	80121e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d06f      	beq.n	80122d0 <pvPortMalloc+0x154>
 80121f0:	4b45      	ldr	r3, [pc, #276]	@ (8012308 <pvPortMalloc+0x18c>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d86a      	bhi.n	80122d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121fa:	4b44      	ldr	r3, [pc, #272]	@ (801230c <pvPortMalloc+0x190>)
 80121fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121fe:	4b43      	ldr	r3, [pc, #268]	@ (801230c <pvPortMalloc+0x190>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012204:	e004      	b.n	8012210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	429a      	cmp	r2, r3
 8012218:	d903      	bls.n	8012222 <pvPortMalloc+0xa6>
 801221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1f1      	bne.n	8012206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012222:	4b37      	ldr	r3, [pc, #220]	@ (8012300 <pvPortMalloc+0x184>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012228:	429a      	cmp	r2, r3
 801222a:	d051      	beq.n	80122d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2208      	movs	r2, #8
 8012232:	4413      	add	r3, r2
 8012234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	6a3b      	ldr	r3, [r7, #32]
 801223c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	1ad2      	subs	r2, r2, r3
 8012246:	2308      	movs	r3, #8
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	429a      	cmp	r2, r3
 801224c:	d920      	bls.n	8012290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	4413      	add	r3, r2
 8012254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	f003 0307 	and.w	r3, r3, #7
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <pvPortMalloc+0xfc>
	__asm volatile
 8012260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	613b      	str	r3, [r7, #16]
}
 8012272:	bf00      	nop
 8012274:	bf00      	nop
 8012276:	e7fd      	b.n	8012274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	1ad2      	subs	r2, r2, r3
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801228a:	69b8      	ldr	r0, [r7, #24]
 801228c:	f000 f90c 	bl	80124a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012290:	4b1d      	ldr	r3, [pc, #116]	@ (8012308 <pvPortMalloc+0x18c>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	4a1b      	ldr	r2, [pc, #108]	@ (8012308 <pvPortMalloc+0x18c>)
 801229c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801229e:	4b1a      	ldr	r3, [pc, #104]	@ (8012308 <pvPortMalloc+0x18c>)
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012310 <pvPortMalloc+0x194>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d203      	bcs.n	80122b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122aa:	4b17      	ldr	r3, [pc, #92]	@ (8012308 <pvPortMalloc+0x18c>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	4a18      	ldr	r2, [pc, #96]	@ (8012310 <pvPortMalloc+0x194>)
 80122b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b4:	685a      	ldr	r2, [r3, #4]
 80122b6:	4b13      	ldr	r3, [pc, #76]	@ (8012304 <pvPortMalloc+0x188>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	431a      	orrs	r2, r3
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80122c6:	4b13      	ldr	r3, [pc, #76]	@ (8012314 <pvPortMalloc+0x198>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	3301      	adds	r3, #1
 80122cc:	4a11      	ldr	r2, [pc, #68]	@ (8012314 <pvPortMalloc+0x198>)
 80122ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122d0:	f7fe fa18 	bl	8010704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	f003 0307 	and.w	r3, r3, #7
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00b      	beq.n	80122f6 <pvPortMalloc+0x17a>
	__asm volatile
 80122de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e2:	f383 8811 	msr	BASEPRI, r3
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	60fb      	str	r3, [r7, #12]
}
 80122f0:	bf00      	nop
 80122f2:	bf00      	nop
 80122f4:	e7fd      	b.n	80122f2 <pvPortMalloc+0x176>
	return pvReturn;
 80122f6:	69fb      	ldr	r3, [r7, #28]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3728      	adds	r7, #40	@ 0x28
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	2401ee54 	.word	0x2401ee54
 8012304:	2401ee68 	.word	0x2401ee68
 8012308:	2401ee58 	.word	0x2401ee58
 801230c:	2401ee4c 	.word	0x2401ee4c
 8012310:	2401ee5c 	.word	0x2401ee5c
 8012314:	2401ee60 	.word	0x2401ee60

08012318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d04f      	beq.n	80123ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801232a:	2308      	movs	r3, #8
 801232c:	425b      	negs	r3, r3
 801232e:	697a      	ldr	r2, [r7, #20]
 8012330:	4413      	add	r3, r2
 8012332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	4b25      	ldr	r3, [pc, #148]	@ (80123d4 <vPortFree+0xbc>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4013      	ands	r3, r2
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10b      	bne.n	801235e <vPortFree+0x46>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	60fb      	str	r3, [r7, #12]
}
 8012358:	bf00      	nop
 801235a:	bf00      	nop
 801235c:	e7fd      	b.n	801235a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00b      	beq.n	801237e <vPortFree+0x66>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	60bb      	str	r3, [r7, #8]
}
 8012378:	bf00      	nop
 801237a:	bf00      	nop
 801237c:	e7fd      	b.n	801237a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	4b14      	ldr	r3, [pc, #80]	@ (80123d4 <vPortFree+0xbc>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4013      	ands	r3, r2
 8012388:	2b00      	cmp	r3, #0
 801238a:	d01e      	beq.n	80123ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d11a      	bne.n	80123ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	4b0e      	ldr	r3, [pc, #56]	@ (80123d4 <vPortFree+0xbc>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	43db      	mvns	r3, r3
 801239e:	401a      	ands	r2, r3
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80123a4:	f7fe f9a0 	bl	80106e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	4b0a      	ldr	r3, [pc, #40]	@ (80123d8 <vPortFree+0xc0>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4413      	add	r3, r2
 80123b2:	4a09      	ldr	r2, [pc, #36]	@ (80123d8 <vPortFree+0xc0>)
 80123b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80123b6:	6938      	ldr	r0, [r7, #16]
 80123b8:	f000 f876 	bl	80124a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80123bc:	4b07      	ldr	r3, [pc, #28]	@ (80123dc <vPortFree+0xc4>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	3301      	adds	r3, #1
 80123c2:	4a06      	ldr	r2, [pc, #24]	@ (80123dc <vPortFree+0xc4>)
 80123c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80123c6:	f7fe f99d 	bl	8010704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80123ca:	bf00      	nop
 80123cc:	3718      	adds	r7, #24
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	2401ee68 	.word	0x2401ee68
 80123d8:	2401ee58 	.word	0x2401ee58
 80123dc:	2401ee64 	.word	0x2401ee64

080123e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80123e6:	4b29      	ldr	r3, [pc, #164]	@ (801248c <prvHeapInit+0xac>)
 80123e8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123ea:	4b29      	ldr	r3, [pc, #164]	@ (8012490 <prvHeapInit+0xb0>)
 80123ec:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f003 0307 	and.w	r3, r3, #7
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00c      	beq.n	8012412 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	3307      	adds	r3, #7
 80123fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	f023 0307 	bic.w	r3, r3, #7
 8012404:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012406:	68ba      	ldr	r2, [r7, #8]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	4a20      	ldr	r2, [pc, #128]	@ (8012490 <prvHeapInit+0xb0>)
 801240e:	4413      	add	r3, r2
 8012410:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012416:	4a1f      	ldr	r2, [pc, #124]	@ (8012494 <prvHeapInit+0xb4>)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801241c:	4b1d      	ldr	r3, [pc, #116]	@ (8012494 <prvHeapInit+0xb4>)
 801241e:	2200      	movs	r2, #0
 8012420:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	4413      	add	r3, r2
 8012428:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801242a:	2208      	movs	r2, #8
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	1a9b      	subs	r3, r3, r2
 8012430:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f023 0307 	bic.w	r3, r3, #7
 8012438:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	4a16      	ldr	r2, [pc, #88]	@ (8012498 <prvHeapInit+0xb8>)
 801243e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012440:	4b15      	ldr	r3, [pc, #84]	@ (8012498 <prvHeapInit+0xb8>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2200      	movs	r2, #0
 8012446:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012448:	4b13      	ldr	r3, [pc, #76]	@ (8012498 <prvHeapInit+0xb8>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	2200      	movs	r2, #0
 801244e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	68fa      	ldr	r2, [r7, #12]
 8012458:	1ad2      	subs	r2, r2, r3
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801245e:	4b0e      	ldr	r3, [pc, #56]	@ (8012498 <prvHeapInit+0xb8>)
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	4a0c      	ldr	r2, [pc, #48]	@ (801249c <prvHeapInit+0xbc>)
 801246c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	4a0b      	ldr	r2, [pc, #44]	@ (80124a0 <prvHeapInit+0xc0>)
 8012474:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012476:	4b0b      	ldr	r3, [pc, #44]	@ (80124a4 <prvHeapInit+0xc4>)
 8012478:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801247c:	601a      	str	r2, [r3, #0]
}
 801247e:	bf00      	nop
 8012480:	3714      	adds	r7, #20
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop
 801248c:	0001d4c0 	.word	0x0001d4c0
 8012490:	2400198c 	.word	0x2400198c
 8012494:	2401ee4c 	.word	0x2401ee4c
 8012498:	2401ee54 	.word	0x2401ee54
 801249c:	2401ee5c 	.word	0x2401ee5c
 80124a0:	2401ee58 	.word	0x2401ee58
 80124a4:	2401ee68 	.word	0x2401ee68

080124a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124b0:	4b28      	ldr	r3, [pc, #160]	@ (8012554 <prvInsertBlockIntoFreeList+0xac>)
 80124b2:	60fb      	str	r3, [r7, #12]
 80124b4:	e002      	b.n	80124bc <prvInsertBlockIntoFreeList+0x14>
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	60fb      	str	r3, [r7, #12]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	687a      	ldr	r2, [r7, #4]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d8f7      	bhi.n	80124b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	68ba      	ldr	r2, [r7, #8]
 80124d0:	4413      	add	r3, r2
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d108      	bne.n	80124ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	685a      	ldr	r2, [r3, #4]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	441a      	add	r2, r3
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	441a      	add	r2, r3
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d118      	bne.n	8012530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	4b15      	ldr	r3, [pc, #84]	@ (8012558 <prvInsertBlockIntoFreeList+0xb0>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	429a      	cmp	r2, r3
 8012508:	d00d      	beq.n	8012526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	685a      	ldr	r2, [r3, #4]
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	441a      	add	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	e008      	b.n	8012538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012526:	4b0c      	ldr	r3, [pc, #48]	@ (8012558 <prvInsertBlockIntoFreeList+0xb0>)
 8012528:	681a      	ldr	r2, [r3, #0]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	601a      	str	r2, [r3, #0]
 801252e:	e003      	b.n	8012538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012538:	68fa      	ldr	r2, [r7, #12]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	429a      	cmp	r2, r3
 801253e:	d002      	beq.n	8012546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012546:	bf00      	nop
 8012548:	3714      	adds	r7, #20
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	2401ee4c 	.word	0x2401ee4c
 8012558:	2401ee54 	.word	0x2401ee54

0801255c <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback() {
 801255c:	b480      	push	{r7}
 801255e:	b083      	sub	sp, #12
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	4a04      	ldr	r2, [pc, #16]	@ (8012578 <_ZN8CallbackC1Ev+0x1c>)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	601a      	str	r2, [r3, #0]

	}
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr
 8012578:	08026148 	.word	0x08026148

0801257c <_ZN8Callback4callEv>:

	virtual void call() {
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]

	}
 8012584:	bf00      	nop
 8012586:	370c      	adds	r7, #12
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr

08012590 <_ZN8Callback4callEPv>:

	virtual void call(void *argument) {
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]

	}
 801259a:	bf00      	nop
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <_ZN19core_utils_CallbackIvvE4callEv>:
	void set(cls *object, void (cls::*member)(void)) {
		this->_fp = core_utils_FunctionPointer<void, void>(object, member);
		this->registered = 1;
	}

	void call() {
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
		this->_fp();
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	3308      	adds	r3, #8
 80125b2:	4618      	mov	r0, r3
 80125b4:	f000 f97f 	bl	80128b6 <_ZN26core_utils_FunctionPointerIvvEclEv>
	}
 80125b8:	bf00      	nop
 80125ba:	3708      	adds	r7, #8
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <_ZN26twipr_spi_comm_callbacks_tC1Ev>:

typedef enum twipr_spi_comm_callback_id_t {
	TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX, TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
} twipr_spi_comm_callback_id_t;

typedef struct twipr_spi_comm_callbacks_t {
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f000 f97e 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	3320      	adds	r3, #32
 80125d4:	4618      	mov	r0, r3
 80125d6:	f000 f979 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4618      	mov	r0, r3
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <_ZN23TWIPR_SPI_CommunicationC1Ev>:

#include "twipr_spi_communication.h"
//
//static uint8_t tx_cmd_buf[4] = { 0x55, 0x00, 0x00, 10};

TWIPR_SPI_Communication::TWIPR_SPI_Communication() {
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	751a      	strb	r2, [r3, #20]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	331c      	adds	r3, #28
 80125f6:	4618      	mov	r0, r3
 80125f8:	f00e f981 	bl	80208fe <_ZN23core_hardware_SPI_slaveC1Ev>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	3388      	adds	r3, #136	@ 0x88
 8012600:	4618      	mov	r0, r3
 8012602:	f7ff ffdd 	bl	80125c0 <_ZN26twipr_spi_comm_callbacks_tC1Ev>

}
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>:

/* =============================================================== */
void TWIPR_SPI_Communication::init(twipr_spi_comm_config_t config) {
 8012610:	b084      	sub	sp, #16
 8012612:	b5b0      	push	{r4, r5, r7, lr}
 8012614:	b09a      	sub	sp, #104	@ 0x68
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
 801261a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801261e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	461d      	mov	r5, r3
 8012626:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 801262a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801262c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801262e:	6823      	ldr	r3, [r4, #0]
 8012630:	602b      	str	r3, [r5, #0]

	core_hardware_spi_config_t spi_config = { .hspi = this->config.hspi,
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
			.rx_buffer = (uint8_t*) this->config.sequence_buffer, .tx_buffer =
					(uint8_t*) this->config.sample_buffer, };
 8012636:	60fb      	str	r3, [r7, #12]
			.rx_buffer = (uint8_t*) this->config.sequence_buffer, .tx_buffer =
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	68db      	ldr	r3, [r3, #12]
					(uint8_t*) this->config.sample_buffer, };
 801263c:	613b      	str	r3, [r7, #16]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	617b      	str	r3, [r7, #20]

	this->spi_slave.init(spi_config);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f103 001c 	add.w	r0, r3, #28
 801264a:	f107 030c 	add.w	r3, r7, #12
 801264e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012650:	f00e f964 	bl	802091c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 801265a:	4b18      	ldr	r3, [pc, #96]	@ (80126bc <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xac>)
 801265c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801265e:	2300      	movs	r3, #0
 8012660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012662:	f107 0018 	add.w	r0, r7, #24
 8012666:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801266a:	cb0c      	ldmia	r3, {r2, r3}
 801266c:	6879      	ldr	r1, [r7, #4]
 801266e:	f000 f94b 	bl	8012908 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8012672:	f107 0318 	add.w	r3, r7, #24
 8012676:	461a      	mov	r2, r3
 8012678:	2100      	movs	r1, #0
 801267a:	4620      	mov	r0, r4
 801267c:	f00e f9ba 	bl	80209f4 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_SPI_Communication::rx_cmplt_function));

	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 8012686:	4b0e      	ldr	r3, [pc, #56]	@ (80126c0 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xb0>)
 8012688:	663b      	str	r3, [r7, #96]	@ 0x60
 801268a:	2300      	movs	r3, #0
 801268c:	667b      	str	r3, [r7, #100]	@ 0x64
 801268e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8012692:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8012696:	cb0c      	ldmia	r3, {r2, r3}
 8012698:	6879      	ldr	r1, [r7, #4]
 801269a:	f000 f935 	bl	8012908 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 801269e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80126a2:	461a      	mov	r2, r3
 80126a4:	2101      	movs	r1, #1
 80126a6:	4620      	mov	r0, r4
 80126a8:	f00e f9a4 	bl	80209f4 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
//	uint8_t sample_size = sizeof(twipr_logging_sample_t);

//	tx_cmd_buf[1] = trajectory_size;
//	tx_cmd_buf[2] =	sample_size;

}
 80126ac:	bf00      	nop
 80126ae:	3768      	adds	r7, #104	@ 0x68
 80126b0:	46bd      	mov	sp, r7
 80126b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80126b6:	b004      	add	sp, #16
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop
 80126bc:	08012823 	.word	0x08012823
 80126c0:	0801284f 	.word	0x0801284f

080126c4 <_ZN23TWIPR_SPI_Communication5startEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::start() {
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
	this->spi_slave.start();
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	331c      	adds	r3, #28
 80126d0:	4618      	mov	r0, r3
 80126d2:	f00e f961 	bl	8020998 <_ZN23core_hardware_SPI_slave5startEv>
	this->provideSampleData();
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f85e 	bl	8012798 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 80126dc:	bf00      	nop
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <_ZN8CallbackaSERKS_>:
class Callback {
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr

080126fc <_ZN19core_utils_CallbackIvtEaSERKS0_>:
class core_utils_Callback<void, input_type> : public Callback {
 80126fc:	b5b0      	push	{r4, r5, r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	4611      	mov	r1, r2
 801270c:	4618      	mov	r0, r3
 801270e:	f7ff ffe9 	bl	80126e4 <_ZN8CallbackaSERKS_>
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	791a      	ldrb	r2, [r3, #4]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	711a      	strb	r2, [r3, #4]
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	f102 0408 	add.w	r4, r2, #8
 8012722:	f103 0508 	add.w	r5, r3, #8
 8012726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801272a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801272e:	e884 0003 	stmia.w	r4, {r0, r1}
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	3708      	adds	r7, #8
 8012738:	46bd      	mov	sp, r7
 801273a:	bdb0      	pop	{r4, r5, r7, pc}

0801273c <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>:
/* =============================================================== */
void TWIPR_SPI_Communication::registerCallback(
		twipr_spi_comm_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	460b      	mov	r3, r1
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 801274a:	7afb      	ldrb	r3, [r7, #11]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d008      	beq.n	8012762 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x26>
 8012750:	2b01      	cmp	r3, #1
 8012752:	d10d      	bne.n	8012770 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	case TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX: {
		this->callbacks.sample_tx_callback = callback;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	33a8      	adds	r3, #168	@ 0xa8
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	4618      	mov	r0, r3
 801275c:	f7ff ffce 	bl	80126fc <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 8012760:	e006      	b.n	8012770 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	}
	case TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX: {
		this->callbacks.trajectory_rx_callback = callback;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	3388      	adds	r3, #136	@ 0x88
 8012766:	6879      	ldr	r1, [r7, #4]
 8012768:	4618      	mov	r0, r3
 801276a:	f7ff ffc7 	bl	80126fc <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 801276e:	bf00      	nop
	}
	}
}
 8012770:	bf00      	nop
 8012772:	3710      	adds	r7, #16
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEv>:
//	TWIPR_SPI_COMMAND_MESSAGE_LENGTH);
//}


/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(){
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
	this->receiveTrajectory(this->config.sequence_buffer, this->config.len_sequence_buffer);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	68d9      	ldr	r1, [r3, #12]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	8a1b      	ldrh	r3, [r3, #16]
 8012788:	461a      	mov	r2, r3
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f000 f814 	bl	80127b8 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEP22twipr_sequence_input_tt>
}
 8012790:	bf00      	nop
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(){
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
	this->provideSampleData(this->config.sample_buffer, this->config.len_sample_buffer);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6859      	ldr	r1, [r3, #4]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	891b      	ldrh	r3, [r3, #8]
 80127a8:	461a      	mov	r2, r3
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f000 f81c 	bl	80127e8 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>
}
 80127b0:	bf00      	nop
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEP22twipr_sequence_input_tt>:

/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(
		twipr_sequence_input_t *trajectory_buffer, uint16_t len) {
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	4613      	mov	r3, r2
 80127c4:	80fb      	strh	r3, [r7, #6]
	this->spi_slave.receiveData((uint8_t*) trajectory_buffer,  sizeof(twipr_sequence_input_t) * len);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f103 001c 	add.w	r0, r3, #28
 80127cc:	88fb      	ldrh	r3, [r7, #6]
 80127ce:	461a      	mov	r2, r3
 80127d0:	0052      	lsls	r2, r2, #1
 80127d2:	4413      	add	r3, r2
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	461a      	mov	r2, r3
 80127da:	68b9      	ldr	r1, [r7, #8]
 80127dc:	f00e f8e6 	bl	80209ac <_ZN23core_hardware_SPI_slave11receiveDataEPht>
}
 80127e0:	bf00      	nop
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>:

/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(
		twipr_logging_sample_t *sample_buffer, uint16_t len) {
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	4613      	mov	r3, r2
 80127f4:	80fb      	strh	r3, [r7, #6]

	this->mode = TWIPR_SPI_COMM_MODE_TX;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2202      	movs	r2, #2
 80127fa:	751a      	strb	r2, [r3, #20]
	this->spi_slave.provideData((uint8_t*) sample_buffer, sizeof(twipr_logging_sample_t) * len);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	f103 001c 	add.w	r0, r3, #28
 8012802:	88fb      	ldrh	r3, [r7, #6]
 8012804:	461a      	mov	r2, r3
 8012806:	00d2      	lsls	r2, r2, #3
 8012808:	441a      	add	r2, r3
 801280a:	0092      	lsls	r2, r2, #2
 801280c:	4413      	add	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	b29b      	uxth	r3, r3
 8012812:	461a      	mov	r2, r3
 8012814:	68b9      	ldr	r1, [r7, #8]
 8012816:	f00e f8db 	bl	80209d0 <_ZN23core_hardware_SPI_slave11provideDataEPht>
}
 801281a:	bf00      	nop
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::rx_cmplt_function() {
 8012822:	b580      	push	{r7, lr}
 8012824:	b082      	sub	sp, #8
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
	if (this->callbacks.trajectory_rx_callback.registered) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8012830:	2b00      	cmp	r3, #0
 8012832:	d008      	beq.n	8012846 <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv+0x24>
		this->callbacks.trajectory_rx_callback.call(this->config.len_sequence_buffer);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8a1b      	ldrh	r3, [r3, #16]
 801283e:	4619      	mov	r1, r3
 8012840:	4610      	mov	r0, r2
 8012842:	f000 f895 	bl	8012970 <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 8012846:	bf00      	nop
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::tx_cmplt_function() {
 801284e:	b580      	push	{r7, lr}
 8012850:	b082      	sub	sp, #8
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]

	// Execute the TX Callback, if registered
	if (this->callbacks.sample_tx_callback.registered) {
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801285c:	2b00      	cmp	r3, #0
 801285e:	d008      	beq.n	8012872 <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv+0x24>
		this->callbacks.sample_tx_callback.call(this->_len);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	8b5b      	ldrh	r3, [r3, #26]
 801286a:	4619      	mov	r1, r3
 801286c:	4610      	mov	r0, r2
 801286e:	f000 f87f 	bl	8012970 <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->provideSampleData();
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff ff90 	bl	8012798 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::stopTransmission(){
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(this->config.hspi);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	4618      	mov	r0, r3
 801288e:	f7f8 fb81 	bl	800af94 <HAL_SPI_Abort>
}
 8012892:	bf00      	nop
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}

0801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 801289a:	b580      	push	{r7, lr}
 801289c:	b082      	sub	sp, #8
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
 80128a2:	6039      	str	r1, [r7, #0]
        attach(function);
 80128a4:	6839      	ldr	r1, [r7, #0]
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f873 	bl	8012992 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4618      	mov	r0, r3
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}

080128b6 <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 80128b6:	b580      	push	{r7, lr}
 80128b8:	b082      	sub	sp, #8
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
        return call();
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f878 	bl	80129b4 <_ZN26core_utils_FunctionPointerIvvE4callEv>
 80128c4:	bf00      	nop
    }
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <_ZN19core_utils_CallbackIvtEC1Ev>:
	core_utils_Callback() {
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7ff fe40 	bl	801255c <_ZN8CallbackC1Ev>
 80128dc:	4a09      	ldr	r2, [pc, #36]	@ (8012904 <_ZN19core_utils_CallbackIvtEC1Ev+0x38>)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	601a      	str	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2200      	movs	r2, #0
 80128e6:	711a      	strb	r2, [r3, #4]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	3308      	adds	r3, #8
 80128ec:	2100      	movs	r1, #0
 80128ee:	4618      	mov	r0, r3
 80128f0:	f000 f885 	bl	80129fe <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		this->registered = 0;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	711a      	strb	r2, [r3, #4]
	}
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	08026128 	.word	0x08026128

08012908 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 8012908:	b5b0      	push	{r4, r5, r7, lr}
 801290a:	b08a      	sub	sp, #40	@ 0x28
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	4639      	mov	r1, r7
 8012914:	e881 000c 	stmia.w	r1, {r2, r3}
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	4618      	mov	r0, r3
 801291c:	f7ff fe1e 	bl	801255c <_ZN8CallbackC1Ev>
 8012920:	4a12      	ldr	r2, [pc, #72]	@ (801296c <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE+0x64>)
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	601a      	str	r2, [r3, #0]
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2200      	movs	r2, #0
 801292a:	711a      	strb	r2, [r3, #4]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	3308      	adds	r3, #8
 8012930:	2100      	movs	r1, #0
 8012932:	4618      	mov	r0, r3
 8012934:	f7ff ffb1 	bl	801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 8012938:	f107 0010 	add.w	r0, r7, #16
 801293c:	463b      	mov	r3, r7
 801293e:	cb0c      	ldmia	r3, {r2, r3}
 8012940:	68b9      	ldr	r1, [r7, #8]
 8012942:	f000 f86a 	bl	8012a1a <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	f103 0408 	add.w	r4, r3, #8
 801294c:	f107 0510 	add.w	r5, r7, #16
 8012950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012954:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012958:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2201      	movs	r2, #1
 8012960:	711a      	strb	r2, [r3, #4]
	}
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	4618      	mov	r0, r3
 8012966:	3728      	adds	r7, #40	@ 0x28
 8012968:	46bd      	mov	sp, r7
 801296a:	bdb0      	pop	{r4, r5, r7, pc}
 801296c:	08026138 	.word	0x08026138

08012970 <_ZN19core_utils_CallbackIvtE4callEt>:
	void call(input_type input) {
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	460b      	mov	r3, r1
 801297a:	807b      	strh	r3, [r7, #2]
		this->_fp(input);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	3308      	adds	r3, #8
 8012980:	887a      	ldrh	r2, [r7, #2]
 8012982:	4611      	mov	r1, r2
 8012984:	4618      	mov	r0, r3
 8012986:	f000 f85b 	bl	8012a40 <_ZN26core_utils_FunctionPointerIvtEclEt>
	}
 801298a:	bf00      	nop
 801298c:	3708      	adds	r7, #8
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 8012992:	b480      	push	{r7}
 8012994:	b083      	sub	sp, #12
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
 801299a:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	683a      	ldr	r2, [r7, #0]
 80129a0:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	615a      	str	r2, [r3, #20]
    }
 80129a8:	bf00      	nop
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	695b      	ldr	r3, [r3, #20]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d107      	bne.n	80129d4 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d003      	beq.n	80129d4 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4798      	blx	r3
 80129d2:	e011      	b.n	80129f8 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	695b      	ldr	r3, [r3, #20]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d00c      	beq.n	80129f6 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d008      	beq.n	80129f6 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	695b      	ldr	r3, [r3, #20]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	6810      	ldr	r0, [r2, #0]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	3204      	adds	r2, #4
 80129f0:	4611      	mov	r1, r2
 80129f2:	4798      	blx	r3
 80129f4:	e000      	b.n	80129f8 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return R();
 80129f6:	bf00      	nop
    }
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b082      	sub	sp, #8
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
 8012a06:	6039      	str	r1, [r7, #0]
        attach(function);
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 f827 	bl	8012a5e <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>
    }
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	3708      	adds	r7, #8
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b084      	sub	sp, #16
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	60f8      	str	r0, [r7, #12]
 8012a22:	60b9      	str	r1, [r7, #8]
 8012a24:	4639      	mov	r1, r7
 8012a26:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8012a2a:	463b      	mov	r3, r7
 8012a2c:	cb0c      	ldmia	r3, {r2, r3}
 8012a2e:	68b9      	ldr	r1, [r7, #8]
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f000 f825 	bl	8012a80 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>
    }
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3710      	adds	r7, #16
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <_ZN26core_utils_FunctionPointerIvtEclEt>:
    R operator ()(A1 a) {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	460b      	mov	r3, r1
 8012a4a:	807b      	strh	r3, [r7, #2]
        return call(a);
 8012a4c:	887b      	ldrh	r3, [r7, #2]
 8012a4e:	4619      	mov	r1, r3
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f000 f833 	bl	8012abc <_ZN26core_utils_FunctionPointerIvtE4callEt>
 8012a56:	bf00      	nop
    }
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>:
    void attach(R (*function)(A1)) {
 8012a5e:	b480      	push	{r7}
 8012a60:	b083      	sub	sp, #12
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
 8012a66:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2200      	movs	r2, #0
 8012a72:	615a      	str	r2, [r3, #20]
    }
 8012a74:	bf00      	nop
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8012a80:	b480      	push	{r7}
 8012a82:	b085      	sub	sp, #20
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	463b      	mov	r3, r7
 8012a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012aa2:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	4a03      	ldr	r2, [pc, #12]	@ (8012ab8 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE+0x38>)
 8012aaa:	615a      	str	r2, [r3, #20]
    }
 8012aac:	bf00      	nop
 8012aae:	3714      	adds	r7, #20
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr
 8012ab8:	08012b0f 	.word	0x08012b0f

08012abc <_ZN26core_utils_FunctionPointerIvtE4callEt>:
    R call(A1 a) {
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	807b      	strh	r3, [r7, #2]
        if (_membercaller == 0 && _p.function) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	695b      	ldr	r3, [r3, #20]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d109      	bne.n	8012ae4 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d005      	beq.n	8012ae4 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
           return _p.function(a);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	887a      	ldrh	r2, [r7, #2]
 8012ade:	4610      	mov	r0, r2
 8012ae0:	4798      	blx	r3
 8012ae2:	e011      	b.n	8012b08 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        } else if (_membercaller && _p.object) {
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	695b      	ldr	r3, [r3, #20]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00c      	beq.n	8012b06 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d008      	beq.n	8012b06 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
           return _membercaller(_p.object, _member, a);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	695b      	ldr	r3, [r3, #20]
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	6810      	ldr	r0, [r2, #0]
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	1d11      	adds	r1, r2, #4
 8012b00:	887a      	ldrh	r2, [r7, #2]
 8012b02:	4798      	blx	r3
 8012b04:	e000      	b.n	8012b08 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        return R();
 8012b06:	bf00      	nop
    }
 8012b08:	3708      	adds	r7, #8
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}

08012b0e <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
 8012b0e:	b580      	push	{r7, lr}
 8012b10:	b084      	sub	sp, #16
 8012b12:	af00      	add	r7, sp, #0
 8012b14:	6078      	str	r0, [r7, #4]
 8012b16:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	105b      	asrs	r3, r3, #1
 8012b26:	461a      	mov	r2, r3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	1899      	adds	r1, r3, r2
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	f003 0301 	and.w	r3, r3, #1
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00b      	beq.n	8012b50 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x42>
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	105b      	asrs	r3, r3, #1
 8012b3e:	461a      	mov	r2, r3
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	4413      	add	r3, r2
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	68ba      	ldr	r2, [r7, #8]
 8012b48:	6812      	ldr	r2, [r2, #0]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	e001      	b.n	8012b54 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x46>
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	4608      	mov	r0, r1
 8012b56:	4798      	blx	r3
 8012b58:	bf00      	nop
    }
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZN19core_utils_CallbackIvvEC1Ev>:
	core_utils_Callback() {
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7ff fcf6 	bl	801255c <_ZN8CallbackC1Ev>
 8012b70:	4a09      	ldr	r2, [pc, #36]	@ (8012b98 <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	601a      	str	r2, [r3, #0]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	711a      	strb	r2, [r3, #4]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	3308      	adds	r3, #8
 8012b80:	2100      	movs	r1, #0
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7ff fe89 	bl	801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	711a      	strb	r2, [r3, #4]
	}
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4618      	mov	r0, r3
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	08026138 	.word	0x08026138

08012b9c <_ZN6BufferC1Ev>:
#include "stdint.h"
#include "../core_default_config.h"

class Buffer {
public:
	Buffer() {
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	809a      	strh	r2, [r3, #4]

	}
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4618      	mov	r0, r3
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <_Z3nopv>:
#include "core_utils_functionpointer.h"
#include "core_utils_registermap.h"
#include "elapsedMillis.h"


inline void nop(){
 8012bb8:	b480      	push	{r7}
 8012bba:	af00      	add	r7, sp, #0

}
 8012bbc:	bf00      	nop
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr
	...

08012bc8 <_ZN4UARTC1Ev>:
/* =========================================================================== */

/* =========================================================================== */
class UART {
public:
	UART() {
 8012bc8:	b480      	push	{r7}
 8012bca:	b083      	sub	sp, #12
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	4a04      	ldr	r2, [pc, #16]	@ (8012be4 <_ZN4UARTC1Ev+0x1c>)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	601a      	str	r2, [r3, #0]

	}
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	370c      	adds	r7, #12
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr
 8012be4:	080261c4 	.word	0x080261c4

08012be8 <_ZN4UART10rxFunctionEt>:

	virtual void rxFunction(uint16_t len) {
 8012be8:	b480      	push	{r7}
 8012bea:	b083      	sub	sp, #12
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	460b      	mov	r3, r1
 8012bf2:	807b      	strh	r3, [r7, #2]

	}
 8012bf4:	bf00      	nop
 8012bf6:	370c      	adds	r7, #12
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <_ZN4UART9get_huartEv>:

	virtual UART_HandleTypeDef* get_huart() {
 8012c00:	b480      	push	{r7}
 8012c02:	b083      	sub	sp, #12
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
		return NULL;
 8012c08:	2300      	movs	r3, #0
	}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	370c      	adds	r7, #12
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr
	...

08012c18 <_ZN13UartInterfaceC1Ev>:
extern core_hardware_UART_config std_hardware_uart_config;
extern core_comm_UartInterface_config_t std_uart_config;
/* ---------------------------------------------------------- */
class UartInterface {
public:
	UartInterface() {
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	4a06      	ldr	r2, [pc, #24]	@ (8012c3c <_ZN13UartInterfaceC1Ev+0x24>)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	711a      	strb	r2, [r3, #4]

	}
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	370c      	adds	r7, #12
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop
 8012c3c:	080261a0 	.word	0x080261a0

08012c40 <_ZN13UartInterface11rx_functionEv>:
	virtual void rx_function() {
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
//		return 0;
	}
 8012c48:	bf00      	nop
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <_ZN13UartInterface9setTaskIDEP19tskTaskControlBlock>:
	virtual void setTaskID(TaskHandle_t task) {
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]

	}
 8012c5e:	bf00      	nop
 8012c60:	370c      	adds	r7, #12
 8012c62:	46bd      	mov	sp, r7
 8012c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c68:	4770      	bx	lr

08012c6a <_ZN13UartInterface9getTaskIDEv>:
	virtual TaskHandle_t getTaskID() {
 8012c6a:	b480      	push	{r7}
 8012c6c:	b083      	sub	sp, #12
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
		return NULL;
 8012c72:	2300      	movs	r3, #0
	}
 8012c74:	4618      	mov	r0, r3
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <_Z20twipr_uart_comm_taskPv>:
static core_comm_SerialMessage_memory<128> outgoing_msg;

bool rx_available = false;

/* =========================================================================== */
void twipr_uart_comm_task(void *argument) {
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]

	TWIPR_UART_Communication *comm = (TWIPR_UART_Communication*) argument;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	60fb      	str	r3, [r7, #12]
	comm->task = xTaskGetCurrentTaskHandle();
 8012c8c:	f7fe f932 	bl	8010ef4 <xTaskGetCurrentTaskHandle>
 8012c90:	4602      	mov	r2, r0
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	601a      	str	r2, [r3, #0]
	comm->taskFunction();
 8012c96:	68f8      	ldr	r0, [r7, #12]
 8012c98:	f000 f8f8 	bl	8012e8c <_ZN24TWIPR_UART_Communication12taskFunctionEv>
}
 8012c9c:	bf00      	nop
 8012c9e:	3710      	adds	r7, #16
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <_ZN27twipr_uart_comm_callbacks_tC1Ev>:
	TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
	TWIPR_UART_COMM_CALLBACK_MSG_READ,
	TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
} twipr_uart_comm_callback_id_t;

typedef struct twipr_uart_comm_callbacks_t {
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f000 fa3a 	bl	8013128 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	3320      	adds	r3, #32
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f000 fa35 	bl	8013128 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	3340      	adds	r3, #64	@ 0x40
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f000 fa30 	bl	8013128 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	3360      	adds	r3, #96	@ 0x60
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 fa2b 	bl	8013128 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <_ZN24TWIPR_UART_CommunicationC1Ev>:

/* =========================================================================== */
TWIPR_UART_Communication::TWIPR_UART_Communication() {
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	605a      	str	r2, [r3, #4]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	330c      	adds	r3, #12
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f000 f9dc 	bl	80130ac <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	f241 339c 	movw	r3, #5020	@ 0x139c
 8012cfa:	4413      	add	r3, r2
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7ff ffd1 	bl	8012ca4 <_ZN27twipr_uart_comm_callbacks_tC1Ev>

}
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4618      	mov	r0, r3
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>:

/* =========================================================================== */
void TWIPR_UART_Communication::init(twipr_uart_comm_config_t config) {
 8012d0c:	b590      	push	{r4, r7, lr}
 8012d0e:	b08d      	sub	sp, #52	@ 0x34
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6039      	str	r1, [r7, #0]

	// Initialize the UART interface to the Raspberry Pi
	this->_uart_cm4.init(config.huart,
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f103 000c 	add.w	r0, r3, #12
 8012d1c:	6839      	ldr	r1, [r7, #0]
 8012d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8012d5c <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x50>)
 8012d20:	cb0c      	ldmia	r3, {r2, r3}
 8012d22:	f000 fa1f 	bl	8013164 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>
			twipr_communication_uart_cm4_interface_config);

	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f103 040c 	add.w	r4, r3, #12
			core_utils_Callback<void, void>(this,
 8012d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8012d60 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x54>)
 8012d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d30:	2300      	movs	r3, #0
 8012d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d34:	f107 0008 	add.w	r0, r7, #8
 8012d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012d3c:	cb0c      	ldmia	r3, {r2, r3}
 8012d3e:	6879      	ldr	r1, [r7, #4]
 8012d40:	f000 fa48 	bl	80131d4 <_ZN19core_utils_CallbackIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>
	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 8012d44:	f107 0308 	add.w	r3, r7, #8
 8012d48:	461a      	mov	r2, r3
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f000 fa95 	bl	801327c <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_UART_Communication::_rx_callback));
}
 8012d52:	bf00      	nop
 8012d54:	3734      	adds	r7, #52	@ 0x34
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd90      	pop	{r4, r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	24000014 	.word	0x24000014
 8012d60:	08012fd1 	.word	0x08012fd1

08012d64 <_ZN24TWIPR_UART_Communication5startEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::start() {
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]

	// Start the UART interfaces
	this->_uart_cm4.start();
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	330c      	adds	r3, #12
 8012d70:	4618      	mov	r0, r3
 8012d72:	f000 faa6 	bl	80132c2 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>

	// Start the task
	this->_thread = osThreadNew(twipr_uart_comm_task, this, &task_attributes);
 8012d76:	4a06      	ldr	r2, [pc, #24]	@ (8012d90 <_ZN24TWIPR_UART_Communication5startEv+0x2c>)
 8012d78:	6879      	ldr	r1, [r7, #4]
 8012d7a:	4806      	ldr	r0, [pc, #24]	@ (8012d94 <_ZN24TWIPR_UART_Communication5startEv+0x30>)
 8012d7c:	f7fb fdff 	bl	800e97e <osThreadNew>
 8012d80:	4602      	mov	r2, r0
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	609a      	str	r2, [r3, #8]
}
 8012d86:	bf00      	nop
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	08026150 	.word	0x08026150
 8012d94:	08012c81 	.word	0x08012c81

08012d98 <_ZN24TWIPR_UART_Communication5resetEv>:
/* =========================================================================== */
void TWIPR_UART_Communication::reset(){
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
	this->_uart_cm4.reset();
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	330c      	adds	r3, #12
 8012da4:	4618      	mov	r0, r3
 8012da6:	f000 fa9d 	bl	80132e4 <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>
}
 8012daa:	bf00      	nop
 8012dac:	3708      	adds	r7, #8
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}

08012db2 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>:
	outgoing_msg.len = len;
	this->send(&outgoing_msg);
}

/* =========================================================================== */
void TWIPR_UART_Communication::send(core_comm_SerialMessage *msg) {
 8012db2:	b580      	push	{r7, lr}
 8012db4:	b082      	sub	sp, #8
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	6078      	str	r0, [r7, #4]
 8012dba:	6039      	str	r1, [r7, #0]

	// Check the message
	this->_uart_cm4.send(msg);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	330c      	adds	r3, #12
 8012dc0:	6839      	ldr	r1, [r7, #0]
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f000 fa9c 	bl	8013300 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>
}
 8012dc8:	bf00      	nop
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>:
class core_utils_Callback<void, input_type> : public Callback {
 8012dd0:	b5b0      	push	{r4, r5, r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	4611      	mov	r1, r2
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fc7f 	bl	80126e4 <_ZN8CallbackaSERKS_>
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	791a      	ldrb	r2, [r3, #4]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	711a      	strb	r2, [r3, #4]
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	f102 0408 	add.w	r4, r2, #8
 8012df6:	f103 0508 	add.w	r5, r3, #8
 8012dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012e02:	e884 0003 	stmia.w	r4, {r0, r1}
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bdb0      	pop	{r4, r5, r7, pc}

08012e10 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>:

/* =========================================================================== */
void TWIPR_UART_Communication::registerCallback(
		twipr_uart_comm_callback_id_t callback_id,
		core_utils_Callback<void, core_comm_SerialMessage*> callback) {
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	460b      	mov	r3, r1
 8012e1a:	607a      	str	r2, [r7, #4]
 8012e1c:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8012e1e:	7afb      	ldrb	r3, [r7, #11]
 8012e20:	2b03      	cmp	r3, #3
 8012e22:	d82f      	bhi.n	8012e84 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
 8012e24:	a201      	add	r2, pc, #4	@ (adr r2, 8012e2c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x1c>)
 8012e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e2a:	bf00      	nop
 8012e2c:	08012e3d 	.word	0x08012e3d
 8012e30:	08012e4f 	.word	0x08012e4f
 8012e34:	08012e61 	.word	0x08012e61
 8012e38:	08012e73 	.word	0x08012e73
	case TWIPR_UART_COMM_CALLBACK_RX_MSG: {
		this->_callbacks.rx_msg = callback;
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	f241 339c 	movw	r3, #5020	@ 0x139c
 8012e42:	4413      	add	r3, r2
 8012e44:	6879      	ldr	r1, [r7, #4]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7ff ffc2 	bl	8012dd0 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012e4c:	e01a      	b.n	8012e84 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_WRITE: {
		this->_callbacks.write_msg = callback;
 8012e4e:	68fa      	ldr	r2, [r7, #12]
 8012e50:	f241 33bc 	movw	r3, #5052	@ 0x13bc
 8012e54:	4413      	add	r3, r2
 8012e56:	6879      	ldr	r1, [r7, #4]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7ff ffb9 	bl	8012dd0 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012e5e:	e011      	b.n	8012e84 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_READ: {
		this->_callbacks.read_msg = callback;
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	f241 33dc 	movw	r3, #5084	@ 0x13dc
 8012e66:	4413      	add	r3, r2
 8012e68:	6879      	ldr	r1, [r7, #4]
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7ff ffb0 	bl	8012dd0 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012e70:	e008      	b.n	8012e84 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_FUNC: {
		this->_callbacks.func_msg = callback;
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	f241 33fc 	movw	r3, #5116	@ 0x13fc
 8012e78:	4413      	add	r3, r2
 8012e7a:	6879      	ldr	r1, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff ffa7 	bl	8012dd0 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012e82:	bf00      	nop
	}
	}

}
 8012e84:	bf00      	nop
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <_ZN24TWIPR_UART_Communication12taskFunctionEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::taskFunction() {
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
	//	uint32_t kernel_ticks = 0;
	while (true) {
		if (rx_available){
 8012e94:	4b0d      	ldr	r3, [pc, #52]	@ (8012ecc <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x40>)
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d012      	beq.n	8012ec2 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x36>
			rx_available = false;
 8012e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8012ecc <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x40>)
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]
			if (this->_uart_cm4.rx_queue.available()) {
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	3318      	adds	r3, #24
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 fa47 	bl	801333a <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	bf14      	ite	ne
 8012eb2:	2301      	movne	r3, #1
 8012eb4:	2300      	moveq	r3, #0
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d002      	beq.n	8012ec2 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x36>
						this->_handleIncomingMessages();
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f000 f807 	bl	8012ed0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>
			}
		}
		osDelay(1);
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	f7fb fded 	bl	800eaa2 <osDelay>
		if (rx_available){
 8012ec8:	e7e4      	b.n	8012e94 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>
 8012eca:	bf00      	nop
 8012ecc:	2401ef8c 	.word	0x2401ef8c

08012ed0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>:

	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_handleIncomingMessages() {
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
	// Loop through all the messages in the rx queue
	while (this->_uart_cm4.rx_queue.available()) {
 8012ed8:	e065      	b.n	8012fa6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
		this->_uart_cm4.rx_queue.read(&incoming_msg);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	3318      	adds	r3, #24
 8012ede:	493b      	ldr	r1, [pc, #236]	@ (8012fcc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 fa49 	bl	8013378 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>
		// TODO

		// Handle the different addresses

		// Handle the different commands
		switch (incoming_msg.cmd) {
 8012ee6:	4b39      	ldr	r3, [pc, #228]	@ (8012fcc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	3b01      	subs	r3, #1
 8012eec:	2b07      	cmp	r3, #7
 8012eee:	d859      	bhi.n	8012fa4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd4>
 8012ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8012ef8 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x28>)
 8012ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef6:	bf00      	nop
 8012ef8:	08012f19 	.word	0x08012f19
 8012efc:	08012f39 	.word	0x08012f39
 8012f00:	08012fa5 	.word	0x08012fa5
 8012f04:	08012fa5 	.word	0x08012fa5
 8012f08:	08012f59 	.word	0x08012f59
 8012f0c:	08012f5f 	.word	0x08012f5f
 8012f10:	08012f65 	.word	0x08012f65
 8012f14:	08012f85 	.word	0x08012f85
		case MSG_COMMAND_WRITE: {
//			this->_handleMessage_write(&incoming_msg);
			if (this->_callbacks.write_msg.registered) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012f1e:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d033      	beq.n	8012f8e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
				this->_callbacks.write_msg.call(&incoming_msg);
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	f241 33bc 	movw	r3, #5052	@ 0x13bc
 8012f2c:	4413      	add	r3, r2
 8012f2e:	4927      	ldr	r1, [pc, #156]	@ (8012fcc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012f30:	4618      	mov	r0, r3
 8012f32:	f000 faae 	bl	8013492 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
			break;
 8012f36:	e02a      	b.n	8012f8e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
		}
		case MSG_COMMAND_READ: {
			if (this->_callbacks.read_msg.registered) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012f3e:	f893 33e0 	ldrb.w	r3, [r3, #992]	@ 0x3e0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d025      	beq.n	8012f92 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
				this->_callbacks.read_msg.call(&incoming_msg);
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	f241 33dc 	movw	r3, #5084	@ 0x13dc
 8012f4c:	4413      	add	r3, r2
 8012f4e:	491f      	ldr	r1, [pc, #124]	@ (8012fcc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012f50:	4618      	mov	r0, r3
 8012f52:	f000 fa9e 	bl	8013492 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_read(&incoming_msg);
			break;
 8012f56:	e01c      	b.n	8012f92 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
		}
		case MSG_COMMAND_EVENT: {
			nop();
 8012f58:	f7ff fe2e 	bl	8012bb8 <_Z3nopv>
			break;
 8012f5c:	e01c      	b.n	8012f98 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_MSG: {
			nop();
 8012f5e:	f7ff fe2b 	bl	8012bb8 <_Z3nopv>
			break;
 8012f62:	e019      	b.n	8012f98 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_FCT: {
			if (this->_callbacks.func_msg.registered) {
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012f6a:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d011      	beq.n	8012f96 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
				this->_callbacks.func_msg.call(&incoming_msg);
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	f241 33fc 	movw	r3, #5116	@ 0x13fc
 8012f78:	4413      	add	r3, r2
 8012f7a:	4914      	ldr	r1, [pc, #80]	@ (8012fcc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f000 fa88 	bl	8013492 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_function(&incoming_msg);
			break;
 8012f82:	e008      	b.n	8012f96 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
		}
		case MSG_COMMAND_ECHO: {
			this->send(&incoming_msg);
 8012f84:	4911      	ldr	r1, [pc, #68]	@ (8012fcc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7ff ff13 	bl	8012db2 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
			break;
 8012f8c:	e004      	b.n	8012f98 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 8012f8e:	bf00      	nop
 8012f90:	e002      	b.n	8012f98 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 8012f92:	bf00      	nop
 8012f94:	e000      	b.n	8012f98 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 8012f96:	bf00      	nop
		default: {
			continue;
			break;
		}
		}
		this->last_received_message_tick = osKernelGetTickCount();
 8012f98:	f7fb fcdc 	bl	800e954 <osKernelGetTickCount>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	605a      	str	r2, [r3, #4]
 8012fa2:	e000      	b.n	8012fa6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
			continue;
 8012fa4:	bf00      	nop
	while (this->_uart_cm4.rx_queue.available()) {
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3318      	adds	r3, #24
 8012faa:	4618      	mov	r0, r3
 8012fac:	f000 f9c5 	bl	801333a <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	bf14      	ite	ne
 8012fb6:	2301      	movne	r3, #1
 8012fb8:	2300      	moveq	r3, #0
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d18c      	bne.n	8012eda <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xa>
	}
}
 8012fc0:	bf00      	nop
 8012fc2:	bf00      	nop
 8012fc4:	3708      	adds	r7, #8
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	2401ee6c 	.word	0x2401ee6c

08012fd0 <_ZN24TWIPR_UART_Communication12_rx_callbackEv>:
//		this->send(&outgoing_msg);
//	}
//}

/* =========================================================================== */
void TWIPR_UART_Communication::_rx_callback() {
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
	rx_available = true;
 8012fd8:	4b04      	ldr	r3, [pc, #16]	@ (8012fec <_ZN24TWIPR_UART_Communication12_rx_callbackEv+0x1c>)
 8012fda:	2201      	movs	r2, #1
 8012fdc:	701a      	strb	r2, [r3, #0]
//	if (this->task != NULL) {
//		xTaskNotifyGive(this->task);
//	}
}
 8012fde:	bf00      	nop
 8012fe0:	370c      	adds	r7, #12
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	2401ef8c 	.word	0x2401ef8c

08012ff0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>:
};

template <int size>
class core_comm_SerialMessage_memory: public core_comm_SerialMessage {
public:
	core_comm_SerialMessage_memory(){
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
		this->data_ptr = data;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f103 0210 	add.w	r2, r3, #16
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	609a      	str	r2, [r3, #8]
	}
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <_ZN25core_hardware_UART_configC1Ev>:
typedef struct core_hardware_UART_config {
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2202      	movs	r2, #2
 801301c:	701a      	strb	r2, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2201      	movs	r2, #1
 8013022:	705a      	strb	r2, [r3, #1]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2201      	movs	r2, #1
 8013028:	709a      	strb	r2, [r3, #2]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2201      	movs	r2, #1
 801302e:	70da      	strb	r2, [r3, #3]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	4618      	mov	r0, r3
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr

0801303e <_ZN32core_comm_UartInterface_config_tC1Ev>:
typedef struct core_comm_UartInterface_config_t {
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff ffe1 	bl	8013010 <_ZN25core_hardware_UART_configC1Ev>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	3708      	adds	r7, #8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>:
#define CORE_COMMUNICATION_SERIAL_SOCKET_CORE_COMM_MESSAGEQUEUE_H_

#include <communication/uart_interface/core_comm_SerialProtocol.h>

template<int num_messages, int buf_size>
class core_comm_MessageQueue {
 8013058:	b5b0      	push	{r4, r5, r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2409      	movs	r4, #9
 8013064:	461d      	mov	r5, r3
 8013066:	e004      	b.n	8013072 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x1a>
 8013068:	4628      	mov	r0, r5
 801306a:	f7ff ffc1 	bl	8012ff0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
 801306e:	3c01      	subs	r4, #1
 8013070:	3590      	adds	r5, #144	@ 0x90
 8013072:	2c00      	cmp	r4, #0
 8013074:	daf8      	bge.n	8013068 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x10>
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	220a      	movs	r2, #10
 801307a:	f883 25a3 	strb.w	r2, [r3, #1443]	@ 0x5a3
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4618      	mov	r0, r3
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bdb0      	pop	{r4, r5, r7, pc}

08013088 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>:
typedef struct core_comm_UartInterface_callbacks_t {
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	4618      	mov	r0, r3
 8013094:	f7ff fd64 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3320      	adds	r3, #32
 801309c:	4618      	mov	r0, r3
 801309e:	f000 f843 	bl	8013128 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	3708      	adds	r7, #8
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>:
	core_comm_UartInterface_config_t config;
	core_comm_UartInterface_status_t status;
	core_comm_MessageQueue<uart_buffers, uart_buffer_size> rx_queue;

	/* ------------------------------------------------------------- */
	core_comm_UartInterface() {
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff fdae 	bl	8012c18 <_ZN13UartInterfaceC1Ev>
 80130bc:	4a19      	ldr	r2, [pc, #100]	@ (8013124 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev+0x78>)
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	601a      	str	r2, [r3, #0]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	3305      	adds	r3, #5
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7ff ffb9 	bl	801303e <_ZN32core_comm_UartInterface_config_tC1Ev>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	330c      	adds	r3, #12
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff ffc1 	bl	8013058 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80130dc:	4618      	mov	r0, r3
 80130de:	f000 f9f5 	bl	80134cc <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	f241 3344 	movw	r3, #4932	@ 0x1344
 80130e8:	4413      	add	r3, r2
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7ff ffcc 	bl	8013088 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80130f6:	461a      	mov	r2, r3
 80130f8:	2300      	movs	r3, #0
 80130fa:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013104:	461a      	mov	r2, r3
 8013106:	2300      	movs	r3, #0
 8013108:	f8c2 3388 	str.w	r3, [r2, #904]	@ 0x388
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_NONE;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	72da      	strb	r2, [r3, #11]
		this->exit = 0;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2200      	movs	r2, #0
 8013116:	711a      	strb	r2, [r3, #4]
	}
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4618      	mov	r0, r3
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	0802617c 	.word	0x0802617c

08013128 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>:
	core_utils_Callback() {
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4618      	mov	r0, r3
 8013134:	f7ff fa12 	bl	801255c <_ZN8CallbackC1Ev>
 8013138:	4a09      	ldr	r2, [pc, #36]	@ (8013160 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev+0x38>)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	601a      	str	r2, [r3, #0]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2200      	movs	r2, #0
 8013142:	711a      	strb	r2, [r3, #4]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3308      	adds	r3, #8
 8013148:	2100      	movs	r1, #0
 801314a:	4618      	mov	r0, r3
 801314c:	f000 f9f6 	bl	801353c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		this->registered = 0;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	711a      	strb	r2, [r3, #4]
	}
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4618      	mov	r0, r3
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}
 8013160:	080261b4 	.word	0x080261b4

08013164 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>:
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, std_uart_config);
	}
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart,
 8013164:	b590      	push	{r4, r7, lr}
 8013166:	b08f      	sub	sp, #60	@ 0x3c
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	4639      	mov	r1, r7
 8013170:	e881 000c 	stmia.w	r1, {r2, r3}
			core_comm_UartInterface_config_t config) {

		this->config = config;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	3305      	adds	r3, #5
 8013178:	463a      	mov	r2, r7
 801317a:	6810      	ldr	r0, [r2, #0]
 801317c:	6018      	str	r0, [r3, #0]
 801317e:	8892      	ldrh	r2, [r2, #4]
 8013180:	809a      	strh	r2, [r3, #4]
		this->_uart.init(huart, this->config.uart);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f503 60b8 	add.w	r0, r3, #1472	@ 0x5c0
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 801318e:	4613      	mov	r3, r2
 8013190:	461a      	mov	r2, r3
 8013192:	68b9      	ldr	r1, [r7, #8]
 8013194:	f000 f9e0 	bl	8013558 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>

		// Add the rx callback to the UARTs
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f503 64b8 	add.w	r4, r3, #1472	@ 0x5c0
				core_utils_Callback<void, void>(this,
 801319e:	2300      	movs	r3, #0
 80131a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80131a2:	2301      	movs	r3, #1
 80131a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80131a6:	f107 0010 	add.w	r0, r7, #16
 80131aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80131ae:	cb0c      	ldmia	r3, {r2, r3}
 80131b0:	68f9      	ldr	r1, [r7, #12]
 80131b2:	f000 fb2b 	bl	801380c <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 80131b6:	f107 0310 	add.w	r3, r7, #16
 80131ba:	461a      	mov	r2, r3
 80131bc:	2100      	movs	r1, #0
 80131be:	4620      	mov	r0, r4
 80131c0:	f000 fb58 	bl	8013874 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>
						&core_comm_UartInterface<uart_buffers, uart_buffer_size>::rx_function));

		this->status = CORE_COMM_SERIAL_SOCKET_STATE_INIT;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2201      	movs	r2, #1
 80131c8:	72da      	strb	r2, [r3, #11]
	}
 80131ca:	bf00      	nop
 80131cc:	373c      	adds	r7, #60	@ 0x3c
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd90      	pop	{r4, r7, pc}
	...

080131d4 <_ZN19core_utils_CallbackIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 80131d4:	b5b0      	push	{r4, r5, r7, lr}
 80131d6:	b08a      	sub	sp, #40	@ 0x28
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	4639      	mov	r1, r7
 80131e0:	e881 000c 	stmia.w	r1, {r2, r3}
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7ff f9b8 	bl	801255c <_ZN8CallbackC1Ev>
 80131ec:	4a12      	ldr	r2, [pc, #72]	@ (8013238 <_ZN19core_utils_CallbackIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE+0x64>)
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2200      	movs	r2, #0
 80131f6:	711a      	strb	r2, [r3, #4]
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	3308      	adds	r3, #8
 80131fc:	2100      	movs	r1, #0
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff fb4b 	bl	801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 8013204:	f107 0010 	add.w	r0, r7, #16
 8013208:	463b      	mov	r3, r7
 801320a:	cb0c      	ldmia	r3, {r2, r3}
 801320c:	68b9      	ldr	r1, [r7, #8]
 801320e:	f000 fb46 	bl	801389e <_ZN26core_utils_FunctionPointerIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f103 0408 	add.w	r4, r3, #8
 8013218:	f107 0510 	add.w	r5, r7, #16
 801321c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801321e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013220:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013224:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	711a      	strb	r2, [r3, #4]
	}
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	4618      	mov	r0, r3
 8013232:	3728      	adds	r7, #40	@ 0x28
 8013234:	46bd      	mov	sp, r7
 8013236:	bdb0      	pop	{r4, r5, r7, pc}
 8013238:	08026138 	.word	0x08026138

0801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>:
class core_utils_Callback<void, void> : public Callback {
 801323c:	b5b0      	push	{r4, r5, r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	683a      	ldr	r2, [r7, #0]
 801324a:	4611      	mov	r1, r2
 801324c:	4618      	mov	r0, r3
 801324e:	f7ff fa49 	bl	80126e4 <_ZN8CallbackaSERKS_>
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	791a      	ldrb	r2, [r3, #4]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	711a      	strb	r2, [r3, #4]
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	f102 0408 	add.w	r4, r2, #8
 8013262:	f103 0508 	add.w	r5, r3, #8
 8013266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801326a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801326e:	e884 0003 	stmia.w	r4, {r0, r1}
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	4618      	mov	r0, r3
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bdb0      	pop	{r4, r5, r7, pc}

0801327c <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE>:
	/* ------------------------------------------------------------- */
	core_comm_SerialMessage* getMessagePointer() {
		return this->rx_queue.readPointer();
	}
	/* ------------------------------------------------------------- */
	void registerCallback(core_comm_UartInterface_callback_id_t callback_id,
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	460b      	mov	r3, r1
 8013286:	607a      	str	r2, [r7, #4]
 8013288:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		switch (callback_id) {
 801328a:	7afb      	ldrb	r3, [r7, #11]
 801328c:	2b02      	cmp	r3, #2
 801328e:	d013      	beq.n	80132b8 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3c>
 8013290:	2b02      	cmp	r3, #2
 8013292:	dc12      	bgt.n	80132ba <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x22>
 8013298:	2b01      	cmp	r3, #1
 801329a:	d009      	beq.n	80132b0 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x34>
		}
		case CORE_COMM_SERIAL_SOCKET_CB_ERROR: {
			break;
		}
		}
	}
 801329c:	e00d      	b.n	80132ba <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
			this->_callbacks.rx = callback;
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	f241 3344 	movw	r3, #4932	@ 0x1344
 80132a4:	4413      	add	r3, r2
 80132a6:	6879      	ldr	r1, [r7, #4]
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7ff ffc7 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
			break;
 80132ae:	e004      	b.n	80132ba <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
			core_ErrorHandler(0x00);
 80132b0:	2000      	movs	r0, #0
 80132b2:	f00e fba2 	bl	80219fa <_Z17core_ErrorHandleri>
			break;
 80132b6:	e000      	b.n	80132ba <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvvE+0x3e>
			break;
 80132b8:	bf00      	nop
	}
 80132ba:	bf00      	nop
 80132bc:	3710      	adds	r7, #16
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}

080132c2 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>:
	void start() {
 80132c2:	b580      	push	{r7, lr}
 80132c4:	b082      	sub	sp, #8
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	6078      	str	r0, [r7, #4]
		this->_uart.start();
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80132d0:	4618      	mov	r0, r3
 80132d2:	f000 faf7 	bl	80138c4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_RUN;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2202      	movs	r2, #2
 80132da:	72da      	strb	r2, [r3, #11]
	}
 80132dc:	bf00      	nop
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>:
	void reset(){
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
		this->_uart.reset();
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80132f2:	4618      	mov	r0, r3
 80132f4:	f000 fb03 	bl	80138fe <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>
	}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>:
	void send(core_comm_SerialMessage *message) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
		uint8_t len = message->encode(this->_tx_buf);
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 8013310:	4413      	add	r3, r2
 8013312:	4619      	mov	r1, r3
 8013314:	6838      	ldr	r0, [r7, #0]
 8013316:	f00b fa8c 	bl	801e832 <_ZN23core_comm_SerialMessage6encodeEPh>
 801331a:	4603      	mov	r3, r0
 801331c:	73fb      	strb	r3, [r7, #15]
		this->send(this->_tx_buf, len);
 801331e:	687a      	ldr	r2, [r7, #4]
 8013320:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 8013324:	4413      	add	r3, r2
 8013326:	7bfa      	ldrb	r2, [r7, #15]
 8013328:	b292      	uxth	r2, r2
 801332a:	4619      	mov	r1, r3
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 faf9 	bl	8013924 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>
	}
 8013332:	bf00      	nop
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>:
		core_comm_SerialMessage *msg = &this->messages[this->idx_read];
		this->inc_read();
		return msg;
	}

	uint8_t available() {
 801333a:	b480      	push	{r7}
 801333c:	b085      	sub	sp, #20
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
		int8_t available_msg = this->idx_write - this->idx_read;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f893 25a1 	ldrb.w	r2, [r3, #1441]	@ 0x5a1
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 801334e:	1ad3      	subs	r3, r2, r3
 8013350:	b2db      	uxtb	r3, r3
 8013352:	73fb      	strb	r3, [r7, #15]
		if (available_msg < 0) {
 8013354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013358:	2b00      	cmp	r3, #0
 801335a:	da06      	bge.n	801336a <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv+0x30>
			available_msg += this->len;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f893 25a3 	ldrb.w	r2, [r3, #1443]	@ 0x5a3
 8013362:	7bfb      	ldrb	r3, [r7, #15]
 8013364:	4413      	add	r3, r2
 8013366:	b2db      	uxtb	r3, r3
 8013368:	73fb      	strb	r3, [r7, #15]
		}
		return available_msg;
 801336a:	7bfb      	ldrb	r3, [r7, #15]
	}
 801336c:	4618      	mov	r0, r3
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr

08013378 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>:
	uint8_t read(core_comm_SerialMessage *message) {
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7ff ffd9 	bl	801333a <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	bf0c      	ite	eq
 801338e:	2301      	moveq	r3, #1
 8013390:	2300      	movne	r3, #0
 8013392:	b2db      	uxtb	r3, r3
 8013394:	2b00      	cmp	r3, #0
 8013396:	d001      	beq.n	801339c <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x24>
			return 0;
 8013398:	2300      	movs	r3, #0
 801339a:	e076      	b.n	801348a <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x112>
		message->address_1 = this->messages[this->idx_read].address_1;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80133a2:	4619      	mov	r1, r3
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	460b      	mov	r3, r1
 80133a8:	00db      	lsls	r3, r3, #3
 80133aa:	440b      	add	r3, r1
 80133ac:	011b      	lsls	r3, r3, #4
 80133ae:	4413      	add	r3, r2
 80133b0:	3301      	adds	r3, #1
 80133b2:	781a      	ldrb	r2, [r3, #0]
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	705a      	strb	r2, [r3, #1]
		message->address_2 = this->messages[this->idx_read].address_2;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80133be:	4619      	mov	r1, r3
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	460b      	mov	r3, r1
 80133c4:	00db      	lsls	r3, r3, #3
 80133c6:	440b      	add	r3, r1
 80133c8:	011b      	lsls	r3, r3, #4
 80133ca:	4413      	add	r3, r2
 80133cc:	3302      	adds	r3, #2
 80133ce:	781a      	ldrb	r2, [r3, #0]
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	709a      	strb	r2, [r3, #2]
		message->address_3 = this->messages[this->idx_read].address_3;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80133da:	4619      	mov	r1, r3
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	460b      	mov	r3, r1
 80133e0:	00db      	lsls	r3, r3, #3
 80133e2:	440b      	add	r3, r1
 80133e4:	011b      	lsls	r3, r3, #4
 80133e6:	4413      	add	r3, r2
 80133e8:	3303      	adds	r3, #3
 80133ea:	781a      	ldrb	r2, [r3, #0]
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	70da      	strb	r2, [r3, #3]
		message->flag = this->messages[this->idx_read].flag;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 80133f6:	4619      	mov	r1, r3
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	460b      	mov	r3, r1
 80133fc:	00db      	lsls	r3, r3, #3
 80133fe:	440b      	add	r3, r1
 8013400:	011b      	lsls	r3, r3, #4
 8013402:	4413      	add	r3, r2
 8013404:	3304      	adds	r3, #4
 8013406:	781a      	ldrb	r2, [r3, #0]
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	711a      	strb	r2, [r3, #4]
		message->cmd = this->messages[this->idx_read].cmd;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8013412:	4619      	mov	r1, r3
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	460b      	mov	r3, r1
 8013418:	00db      	lsls	r3, r3, #3
 801341a:	440b      	add	r3, r1
 801341c:	011b      	lsls	r3, r3, #4
 801341e:	4413      	add	r3, r2
 8013420:	781a      	ldrb	r2, [r3, #0]
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	701a      	strb	r2, [r3, #0]
		message->len = this->messages[this->idx_read].len;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 801342c:	4619      	mov	r1, r3
 801342e:	687a      	ldr	r2, [r7, #4]
 8013430:	460b      	mov	r3, r1
 8013432:	00db      	lsls	r3, r3, #3
 8013434:	440b      	add	r3, r1
 8013436:	011b      	lsls	r3, r3, #4
 8013438:	4413      	add	r3, r2
 801343a:	330c      	adds	r3, #12
 801343c:	881a      	ldrh	r2, [r3, #0]
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	819a      	strh	r2, [r3, #12]
		for (int i = 0; i<message->len; i++){
 8013442:	2300      	movs	r3, #0
 8013444:	60fb      	str	r3, [r7, #12]
 8013446:	e016      	b.n	8013476 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xfe>
			message->data_ptr[i] = this->messages[this->idx_read].data_ptr[i];
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 801344e:	4619      	mov	r1, r3
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	460b      	mov	r3, r1
 8013454:	00db      	lsls	r3, r3, #3
 8013456:	440b      	add	r3, r1
 8013458:	011b      	lsls	r3, r3, #4
 801345a:	4413      	add	r3, r2
 801345c:	3308      	adds	r3, #8
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	441a      	add	r2, r3
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	6899      	ldr	r1, [r3, #8]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	440b      	add	r3, r1
 801346c:	7812      	ldrb	r2, [r2, #0]
 801346e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<message->len; i++){
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	3301      	adds	r3, #1
 8013474:	60fb      	str	r3, [r7, #12]
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	899b      	ldrh	r3, [r3, #12]
 801347a:	461a      	mov	r2, r3
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	4293      	cmp	r3, r2
 8013480:	dbe2      	blt.n	8013448 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xd0>
		this->inc_read();
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f000 fa68 	bl	8013958 <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>
		return 1;
 8013488:	2301      	movs	r3, #1
	}
 801348a:	4618      	mov	r0, r3
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>:
	void call(input_type input) {
 8013492:	b580      	push	{r7, lr}
 8013494:	b082      	sub	sp, #8
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	6039      	str	r1, [r7, #0]
		this->_fp(input);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	3308      	adds	r3, #8
 80134a0:	6839      	ldr	r1, [r7, #0]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f000 fa79 	bl	801399a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>
	}
 80134a8:	bf00      	nop
 80134aa:	3708      	adds	r7, #8
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <_ZN30core_hardware_UART_callbacks_tC1Ev>:
typedef struct core_hardware_UART_callbacks_t {
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7ff fb50 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4618      	mov	r0, r3
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
	...

080134cc <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>:

template<int num_buffers, int size_buffers>
class core_hardware_UART: public UART {
public:

	core_hardware_UART() {
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7ff fb76 	bl	8012bc8 <_ZN4UARTC1Ev>
 80134dc:	4a16      	ldr	r2, [pc, #88]	@ (8013538 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev+0x6c>)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2200      	movs	r2, #0
 80134e6:	711a      	strb	r2, [r3, #4]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	3305      	adds	r3, #5
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff fd8f 	bl	8013010 <_ZN25core_hardware_UART_configC1Ev>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	3310      	adds	r3, #16
 80134f6:	4618      	mov	r0, r3
 80134f8:	f000 fa5c 	bl	80139b4 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8013502:	4618      	mov	r0, r3
 8013504:	f000 fa56 	bl	80139b4 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff ffce 	bl	80134b0 <_ZN30core_hardware_UART_callbacks_tC1Ev>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f603 33f4 	addw	r3, r3, #3060	@ 0xbf4
 801351a:	4618      	mov	r0, r3
 801351c:	f000 fa6e 	bl	80139fc <_ZN17core_utils_BufferILi128EEC1Ev>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f603 437c 	addw	r3, r3, #3196	@ 0xc7c
 8013526:	4618      	mov	r0, r3
 8013528:	f000 fa68 	bl	80139fc <_ZN17core_utils_BufferILi128EEC1Ev>

	}
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	4618      	mov	r0, r3
 8013530:	3708      	adds	r7, #8
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	08026190 	.word	0x08026190

0801353c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
        attach(function);
 8013546:	6839      	ldr	r1, [r7, #0]
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 fa6f 	bl	8013a2c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>
    }
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	4618      	mov	r0, r3
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>:
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, core_hardware_uart_std_config);
	}

	/* ------------------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart, core_hardware_UART_config config) {
 8013558:	b580      	push	{r7, lr}
 801355a:	b084      	sub	sp, #16
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	60b9      	str	r1, [r7, #8]
 8013562:	607a      	str	r2, [r7, #4]

		this->huart = huart;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	68ba      	ldr	r2, [r7, #8]
 8013568:	60da      	str	r2, [r3, #12]

		this->config = config;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3305      	adds	r3, #5
 801356e:	1d3a      	adds	r2, r7, #4
 8013570:	6810      	ldr	r0, [r2, #0]
 8013572:	6018      	str	r0, [r3, #0]
		if (this->huart == NULL) {
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d102      	bne.n	8013582 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x2a>
			core_ErrorHandler(1);
 801357c:	2001      	movs	r0, #1
 801357e:	f00e fa3c 	bl	80219fa <_Z17core_ErrorHandleri>
		}
		HAL_UART_RegisterRxEventCallback(this->huart, uartRxCmpltDMA_callback);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	68db      	ldr	r3, [r3, #12]
 8013586:	495a      	ldr	r1, [pc, #360]	@ (80136f0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x198>)
 8013588:	4618      	mov	r0, r3
 801358a:	f7f8 ff5f 	bl	800c44c <HAL_UART_RegisterRxEventCallback>
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4a56      	ldr	r2, [pc, #344]	@ (80136f4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x19c>)
 801359a:	4293      	cmp	r3, r2
 801359c:	d077      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4a53      	ldr	r2, [pc, #332]	@ (80136f8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a0>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d06f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4a50      	ldr	r2, [pc, #320]	@ (80136fc <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a4>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d067      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	68db      	ldr	r3, [r3, #12]
 80135c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	4a4d      	ldr	r2, [pc, #308]	@ (8013700 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a8>)
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d05f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	4a4a      	ldr	r2, [pc, #296]	@ (8013704 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1ac>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d057      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	4a47      	ldr	r2, [pc, #284]	@ (8013708 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b0>)
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d04f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	4a44      	ldr	r2, [pc, #272]	@ (801370c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b4>)
 80135fa:	4293      	cmp	r3, r2
 80135fc:	d047      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	4a41      	ldr	r2, [pc, #260]	@ (8013710 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b8>)
 801360a:	4293      	cmp	r3, r2
 801360c:	d03f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	4a3e      	ldr	r2, [pc, #248]	@ (8013714 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1bc>)
 801361a:	4293      	cmp	r3, r2
 801361c:	d037      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4a3b      	ldr	r2, [pc, #236]	@ (8013718 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c0>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d02f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	68db      	ldr	r3, [r3, #12]
 8013632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	4a38      	ldr	r2, [pc, #224]	@ (801371c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c4>)
 801363a:	4293      	cmp	r3, r2
 801363c:	d027      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4a35      	ldr	r2, [pc, #212]	@ (8013720 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 801364a:	4293      	cmp	r3, r2
 801364c:	d01f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	4a32      	ldr	r2, [pc, #200]	@ (8013724 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1cc>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d017      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	68db      	ldr	r3, [r3, #12]
 8013662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	4a2f      	ldr	r2, [pc, #188]	@ (8013728 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d0>)
 801366a:	4293      	cmp	r3, r2
 801366c:	d00f      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4a2c      	ldr	r2, [pc, #176]	@ (801372c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d4>)
 801367a:	4293      	cmp	r3, r2
 801367c:	d007      	beq.n	801368e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	68db      	ldr	r3, [r3, #12]
 8013682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	4a29      	ldr	r2, [pc, #164]	@ (8013730 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d8>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d10e      	bne.n	80136ac <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x154>
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f022 0208 	bic.w	r2, r2, #8
 80136a8:	601a      	str	r2, [r3, #0]
 80136aa:	e00d      	b.n	80136c8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x170>
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	f022 0204 	bic.w	r2, r2, #4
 80136c6:	601a      	str	r2, [r3, #0]

		this->state = CORE_HARDWARE_UART_STATE_INIT;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2201      	movs	r2, #1
 80136cc:	711a      	strb	r2, [r3, #4]

		uarts[num_uarts] = this;
 80136ce:	4b19      	ldr	r3, [pc, #100]	@ (8013734 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	4619      	mov	r1, r3
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	4a18      	ldr	r2, [pc, #96]	@ (8013738 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e0>)
 80136d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_uarts++;
 80136dc:	4b15      	ldr	r3, [pc, #84]	@ (8013734 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	3301      	adds	r3, #1
 80136e2:	b2da      	uxtb	r2, r3
 80136e4:	4b13      	ldr	r3, [pc, #76]	@ (8013734 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80136e6:	701a      	strb	r2, [r3, #0]
	}
 80136e8:	bf00      	nop
 80136ea:	3710      	adds	r7, #16
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	08020ab5 	.word	0x08020ab5
 80136f4:	40020010 	.word	0x40020010
 80136f8:	40020028 	.word	0x40020028
 80136fc:	40020040 	.word	0x40020040
 8013700:	40020058 	.word	0x40020058
 8013704:	40020070 	.word	0x40020070
 8013708:	40020088 	.word	0x40020088
 801370c:	400200a0 	.word	0x400200a0
 8013710:	400200b8 	.word	0x400200b8
 8013714:	40020410 	.word	0x40020410
 8013718:	40020428 	.word	0x40020428
 801371c:	40020440 	.word	0x40020440
 8013720:	40020458 	.word	0x40020458
 8013724:	40020470 	.word	0x40020470
 8013728:	40020488 	.word	0x40020488
 801372c:	400204a0 	.word	0x400204a0
 8013730:	400204b8 	.word	0x400204b8
 8013734:	24022d04 	.word	0x24022d04
 8013738:	24022cf0 	.word	0x24022cf0

0801373c <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv>:
	TaskHandle_t getTaskID() {
		return this->_task_id;
	}

	/* ------------------------------------------------------------- */
	void rx_function() {
 801373c:	b580      	push	{r7, lr}
 801373e:	b086      	sub	sp, #24
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
		uint8_t num_messages = 0;
 8013744:	2300      	movs	r3, #0
 8013746:	75fb      	strb	r3, [r7, #23]

		while (this->_uart.available() > 0) {
 8013748:	e04d      	b.n	80137e6 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
			Buffer *buffer = this->_uart.rx_queue.read();
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8013750:	4618      	mov	r0, r3
 8013752:	f000 f98a 	bl	8013a6a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>
 8013756:	6138      	str	r0, [r7, #16]

			if (this->config.use_protocol) {
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	7a5b      	ldrb	r3, [r3, #9]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d03a      	beq.n	80137d6 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9a>
				// Decode the buffer into the rx message
				uint8_t correct_message = this->_rx_msg.decode(buffer);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8013766:	6939      	ldr	r1, [r7, #16]
 8013768:	4618      	mov	r0, r3
 801376a:	f00b f937 	bl	801e9dc <_ZN23core_comm_SerialMessage6decodeEP6Buffer>
 801376e:	4603      	mov	r3, r0
 8013770:	73fb      	strb	r3, [r7, #15]

				// If the buffer did not contain a correct message do not proceed with the message handling
				if (!correct_message) {
 8013772:	7bfb      	ldrb	r3, [r7, #15]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d035      	beq.n	80137e4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa8>
					continue;
				}

				if (this->config.use_queue) {
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	7a9b      	ldrb	r3, [r3, #10]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d009      	beq.n	8013794 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x58>
					this->rx_queue.write(&_rx_msg);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f103 020c 	add.w	r2, r3, #12
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 801378c:	4619      	mov	r1, r3
 801378e:	4610      	mov	r0, r2
 8013790:	f000 f990 	bl	8013ab4 <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>
				}

				if (this->_callbacks.rx.registered) {
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801379a:	f893 3348 	ldrb.w	r3, [r3, #840]	@ 0x348
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d006      	beq.n	80137b0 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x74>
					this->_callbacks.rx.call();
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	f241 3344 	movw	r3, #4932	@ 0x1344
 80137a8:	4413      	add	r3, r2
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fe fefb 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
				}
				if (this->_callbacks.rx_msg.registered) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80137b6:	f893 3368 	ldrb.w	r3, [r3, #872]	@ 0x368
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00e      	beq.n	80137dc <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa0>
					this->_callbacks.rx_msg.call(&_rx_msg);
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	f241 3364 	movw	r3, #4964	@ 0x1364
 80137c4:	4413      	add	r3, r2
 80137c6:	687a      	ldr	r2, [r7, #4]
 80137c8:	f502 62b6 	add.w	r2, r2, #1456	@ 0x5b0
 80137cc:	4611      	mov	r1, r2
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7ff fe5f 	bl	8013492 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
 80137d4:	e002      	b.n	80137dc <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa0>
				}
			} else { // no protocol used
				while (1) {
					nop();
 80137d6:	f7ff f9ef 	bl	8012bb8 <_Z3nopv>
 80137da:	e7fc      	b.n	80137d6 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9a>
				}
			}

			num_messages++;
 80137dc:	7dfb      	ldrb	r3, [r7, #23]
 80137de:	3301      	adds	r3, #1
 80137e0:	75fb      	strb	r3, [r7, #23]
 80137e2:	e000      	b.n	80137e6 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
					continue;
 80137e4:	bf00      	nop
		while (this->_uart.available() > 0) {
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80137ec:	4618      	mov	r0, r3
 80137ee:	f000 f92e 	bl	8013a4e <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	bfcc      	ite	gt
 80137f8:	2301      	movgt	r3, #1
 80137fa:	2300      	movle	r3, #0
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d1a3      	bne.n	801374a <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xe>

		}
//		return num_messages;
	}
 8013802:	bf00      	nop
 8013804:	bf00      	nop
 8013806:	3718      	adds	r7, #24
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 801380c:	b5b0      	push	{r4, r5, r7, lr}
 801380e:	b08a      	sub	sp, #40	@ 0x28
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	60b9      	str	r1, [r7, #8]
 8013816:	4639      	mov	r1, r7
 8013818:	e881 000c 	stmia.w	r1, {r2, r3}
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe fe9c 	bl	801255c <_ZN8CallbackC1Ev>
 8013824:	4a12      	ldr	r2, [pc, #72]	@ (8013870 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE+0x64>)
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	601a      	str	r2, [r3, #0]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2200      	movs	r2, #0
 801382e:	711a      	strb	r2, [r3, #4]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	3308      	adds	r3, #8
 8013834:	2100      	movs	r1, #0
 8013836:	4618      	mov	r0, r3
 8013838:	f7ff f82f 	bl	801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 801383c:	f107 0010 	add.w	r0, r7, #16
 8013840:	463b      	mov	r3, r7
 8013842:	cb0c      	ldmia	r3, {r2, r3}
 8013844:	68b9      	ldr	r1, [r7, #8]
 8013846:	f000 f950 	bl	8013aea <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f103 0408 	add.w	r4, r3, #8
 8013850:	f107 0510 	add.w	r5, r7, #16
 8013854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013858:	e895 0003 	ldmia.w	r5, {r0, r1}
 801385c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2201      	movs	r2, #1
 8013864:	711a      	strb	r2, [r3, #4]
	}
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	4618      	mov	r0, r3
 801386a:	3728      	adds	r7, #40	@ 0x28
 801386c:	46bd      	mov	sp, r7
 801386e:	bdb0      	pop	{r4, r5, r7, pc}
 8013870:	08026138 	.word	0x08026138

08013874 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>:

		this->startReceiveDMA();
	}

	/* ------------------------------------------------------------------------- */
	void registerCallback(core_hardware_UART_CB_ID callback_id,
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	60f8      	str	r0, [r7, #12]
 801387c:	460b      	mov	r3, r1
 801387e:	607a      	str	r2, [r7, #4]
 8013880:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		if (callback_id == CORE_HARDWARE_UART_CB_RX) {
 8013882:	7afb      	ldrb	r3, [r7, #11]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d106      	bne.n	8013896 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE+0x22>
			this->_callbacks.rx = callback;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 801388e:	6879      	ldr	r1, [r7, #4]
 8013890:	4618      	mov	r0, r3
 8013892:	f7ff fcd3 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		}
	}
 8013896:	bf00      	nop
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <_ZN26core_utils_FunctionPointerIvvEC1I24TWIPR_UART_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 801389e:	b580      	push	{r7, lr}
 80138a0:	b084      	sub	sp, #16
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	60f8      	str	r0, [r7, #12]
 80138a6:	60b9      	str	r1, [r7, #8]
 80138a8:	4639      	mov	r1, r7
 80138aa:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80138ae:	463b      	mov	r3, r7
 80138b0:	cb0c      	ldmia	r3, {r2, r3}
 80138b2:	68b9      	ldr	r1, [r7, #8]
 80138b4:	68f8      	ldr	r0, [r7, #12]
 80138b6:	f000 f92b 	bl	8013b10 <_ZN26core_utils_FunctionPointerIvvE6attachI24TWIPR_UART_CommunicationEEvPT_MS3_FvvE>
    }
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	4618      	mov	r0, r3
 80138be:	3710      	adds	r7, #16
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>:
	void start() {
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
		if (this->state != CORE_HARDWARE_UART_STATE_INIT) {
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	791b      	ldrb	r3, [r3, #4]
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d002      	beq.n	80138da <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x16>
			core_ErrorHandler(2);
 80138d4:	2002      	movs	r0, #2
 80138d6:	f00e f890 	bl	80219fa <_Z17core_ErrorHandleri>
		if (this->config.mode == CORE_HARDWARE_UART_MODE_DMA) {
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	795b      	ldrb	r3, [r3, #5]
 80138de:	2b02      	cmp	r3, #2
 80138e0:	d103      	bne.n	80138ea <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x26>
			this->startReceiveDMA();
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 f932 	bl	8013b4c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 80138e8:	e002      	b.n	80138f0 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x2c>
			core_ErrorHandler(3);
 80138ea:	2003      	movs	r0, #3
 80138ec:	f00e f885 	bl	80219fa <_Z17core_ErrorHandleri>
		this->state = CORE_HARDWARE_UART_STATE_RUN;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2202      	movs	r2, #2
 80138f4:	711a      	strb	r2, [r3, #4]
	}
 80138f6:	bf00      	nop
 80138f8:	3708      	adds	r7, #8
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>:
	void reset() {
 80138fe:	b580      	push	{r7, lr}
 8013900:	b082      	sub	sp, #8
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
		HAL_UART_Abort(this->huart);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	4618      	mov	r0, r3
 801390c:	f7f8 fe4e 	bl	800c5ac <HAL_UART_Abort>
		this->state = CORE_HARDWARE_UART_STATE_INIT;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2201      	movs	r2, #1
 8013914:	711a      	strb	r2, [r3, #4]
		this->start();
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f7ff ffd4 	bl	80138c4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
	}
 801391c:	bf00      	nop
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>:
	void send(uint8_t *buffer, uint16_t len) {
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	4613      	mov	r3, r2
 8013930:	80fb      	strh	r3, [r7, #6]
		if (this->status != CORE_COMM_SERIAL_SOCKET_STATE_RUN) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	7adb      	ldrb	r3, [r3, #11]
 8013936:	2b02      	cmp	r3, #2
 8013938:	d002      	beq.n	8013940 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(1);
 801393a:	2001      	movs	r0, #1
 801393c:	f00e f85d 	bl	80219fa <_Z17core_ErrorHandleri>
		this->_uart.send(buffer, len);
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8013946:	88fa      	ldrh	r2, [r7, #6]
 8013948:	68b9      	ldr	r1, [r7, #8]
 801394a:	4618      	mov	r0, r3
 801394c:	f000 f9d6 	bl	8013cfc <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>
	}
 8013950:	bf00      	nop
 8013952:	3710      	adds	r7, #16
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}

08013958 <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 8013958:	b480      	push	{r7}
 801395a:	b083      	sub	sp, #12
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8013966:	3301      	adds	r3, #1
 8013968:	b2da      	uxtb	r2, r3
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f883 25a0 	strb.w	r2, [r3, #1440]	@ 0x5a0
		if (this->idx_read == this->len) {
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 25a0 	ldrb.w	r2, [r3, #1440]	@ 0x5a0
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 35a3 	ldrb.w	r3, [r3, #1443]	@ 0x5a3
 801397c:	429a      	cmp	r2, r3
 801397e:	d103      	bne.n	8013988 <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2200      	movs	r2, #0
 8013984:	f883 25a0 	strb.w	r2, [r3, #1440]	@ 0x5a0
		return this->idx_read;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
	}
 801398e:	4618      	mov	r0, r3
 8013990:	370c      	adds	r7, #12
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>:
    R operator ()(A1 a) {
 801399a:	b580      	push	{r7, lr}
 801399c:	b082      	sub	sp, #8
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
 80139a2:	6039      	str	r1, [r7, #0]
        return call(a);
 80139a4:	6839      	ldr	r1, [r7, #0]
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 f9f8 	bl	8013d9c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>
 80139ac:	bf00      	nop
    }
 80139ae:	3708      	adds	r7, #8
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>:
};

template<int num, int size>
class core_utils_BufferQueue {
public:
	core_utils_BufferQueue() {
 80139b4:	b5b0      	push	{r4, r5, r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	3304      	adds	r3, #4
 80139c0:	2409      	movs	r4, #9
 80139c2:	461d      	mov	r5, r3
 80139c4:	e004      	b.n	80139d0 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x1c>
 80139c6:	4628      	mov	r0, r5
 80139c8:	f000 f818 	bl	80139fc <_ZN17core_utils_BufferILi128EEC1Ev>
 80139cc:	3c01      	subs	r4, #1
 80139ce:	3588      	adds	r5, #136	@ 0x88
 80139d0:	2c00      	cmp	r4, #0
 80139d2:	daf8      	bge.n	80139c6 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x12>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	220a      	movs	r2, #10
 80139d8:	f883 2554 	strb.w	r2, [r3, #1364]	@ 0x554
		this->idx_read = 0;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556
		this->idx_write = 0;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		this->overflow = 0;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	701a      	strb	r2, [r3, #0]
	}
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4618      	mov	r0, r3
 80139f6:	3708      	adds	r7, #8
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bdb0      	pop	{r4, r5, r7, pc}

080139fc <_ZN17core_utils_BufferILi128EEC1Ev>:
	core_utils_Buffer<size>(){
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff f8c8 	bl	8012b9c <_ZN6BufferC1Ev>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	3306      	adds	r3, #6
 8013a10:	2280      	movs	r2, #128	@ 0x80
 8013a12:	2100      	movs	r1, #0
 8013a14:	4618      	mov	r0, r3
 8013a16:	f010 fa58 	bl	8023eca <memset>
		this->data_ptr = this->buffer;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	1d9a      	adds	r2, r3, #6
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	601a      	str	r2, [r3, #0]
	}
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	4618      	mov	r0, r3
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>:
    void attach(R (*function)(A1)) {
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	683a      	ldr	r2, [r7, #0]
 8013a3a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	615a      	str	r2, [r3, #20]
    }
 8013a42:	bf00      	nop
 8013a44:	370c      	adds	r7, #12
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr

08013a4e <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>:
	int8_t available() {
 8013a4e:	b580      	push	{r7, lr}
 8013a50:	b082      	sub	sp, #8
 8013a52:	af00      	add	r7, sp, #0
 8013a54:	6078      	str	r0, [r7, #4]
		return this->rx_queue.available();
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	3310      	adds	r3, #16
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f000 f9c5 	bl	8013dea <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013a60:	4603      	mov	r3, r0
	}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>:

		uint8_t len = this->buffers[this->idx_read].len;
		this->inc_read();
		return len;
	}
	Buffer* read() {
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b084      	sub	sp, #16
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
		if (this->available() < 1) {
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f000 f9b9 	bl	8013dea <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	bfd4      	ite	le
 8013a7e:	2301      	movle	r3, #1
 8013a80:	2300      	movgt	r3, #0
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x22>
			return 0;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	e00f      	b.n	8013aac <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x42>
		}

		Buffer *buffer = &this->buffers[this->idx_read];
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8013a92:	461a      	mov	r2, r3
 8013a94:	4613      	mov	r3, r2
 8013a96:	011b      	lsls	r3, r3, #4
 8013a98:	4413      	add	r3, r2
 8013a9a:	00db      	lsls	r3, r3, #3
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	3304      	adds	r3, #4
 8013aa2:	60fb      	str	r3, [r7, #12]
		this->inc_read();
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 f9c7 	bl	8013e38 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return buffer;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
	}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3710      	adds	r7, #16
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}

08013ab4 <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>:
	uint8_t write(core_comm_SerialMessage *message) {
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6039      	str	r1, [r7, #0]
		message->copyTo(&this->messages[this->idx_write]);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	00db      	lsls	r3, r3, #3
 8013aca:	4413      	add	r3, r2
 8013acc:	011b      	lsls	r3, r3, #4
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	4413      	add	r3, r2
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	6838      	ldr	r0, [r7, #0]
 8013ad6:	f00a fe76 	bl	801e7c6 <_ZN23core_comm_SerialMessage6copyToEPS_>
		return this->inc_write();
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 f9cb 	bl	8013e76 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>
 8013ae0:	4603      	mov	r3, r0
	}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b084      	sub	sp, #16
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	60f8      	str	r0, [r7, #12]
 8013af2:	60b9      	str	r1, [r7, #8]
 8013af4:	4639      	mov	r1, r7
 8013af6:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8013afa:	463b      	mov	r3, r7
 8013afc:	cb0c      	ldmia	r3, {r2, r3}
 8013afe:	68b9      	ldr	r1, [r7, #8]
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	f000 f9d9 	bl	8013eb8 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>
    }
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3710      	adds	r7, #16
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <_ZN26core_utils_FunctionPointerIvvE6attachI24TWIPR_UART_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8013b10:	b480      	push	{r7}
 8013b12:	b085      	sub	sp, #20
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	4639      	mov	r1, r7
 8013b1c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	68ba      	ldr	r2, [r7, #8]
 8013b24:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	3304      	adds	r3, #4
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	463b      	mov	r3, r7
 8013b2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b32:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	4a03      	ldr	r2, [pc, #12]	@ (8013b48 <_ZN26core_utils_FunctionPointerIvvE6attachI24TWIPR_UART_CommunicationEEvPT_MS3_FvvE+0x38>)
 8013b3a:	615a      	str	r2, [r3, #20]
    }
 8013b3c:	bf00      	nop
 8013b3e:	3714      	adds	r7, #20
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr
 8013b48:	08013ef5 	.word	0x08013ef5

08013b4c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>:
	void startReceiveDMA() {
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
		if (this->config.queues) {
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	7a1b      	ldrb	r3, [r3, #8]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 80a7 	beq.w	8013cac <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x160>
			HAL_UARTEx_ReceiveToIdle_DMA(this->huart,
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	68d8      	ldr	r0, [r3, #12]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f603 33fa 	addw	r3, r3, #3066	@ 0xbfa
 8013b68:	2280      	movs	r2, #128	@ 0x80
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	f7fa fda0 	bl	800e6b0 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	4a50      	ldr	r2, [pc, #320]	@ (8013cbc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x170>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d077      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4a4d      	ldr	r2, [pc, #308]	@ (8013cc0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x174>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d06f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8013cc4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x178>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d067      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4a47      	ldr	r2, [pc, #284]	@ (8013cc8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x17c>)
 8013bac:	4293      	cmp	r3, r2
 8013bae:	d05f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	68db      	ldr	r3, [r3, #12]
 8013bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	4a44      	ldr	r2, [pc, #272]	@ (8013ccc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x180>)
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	d057      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4a41      	ldr	r2, [pc, #260]	@ (8013cd0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x184>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d04f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4a3e      	ldr	r2, [pc, #248]	@ (8013cd4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x188>)
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	d047      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	4a3b      	ldr	r2, [pc, #236]	@ (8013cd8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x18c>)
 8013bec:	4293      	cmp	r3, r2
 8013bee:	d03f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	4a38      	ldr	r2, [pc, #224]	@ (8013cdc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x190>)
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d037      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4a35      	ldr	r2, [pc, #212]	@ (8013ce0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x194>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d02f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	68db      	ldr	r3, [r3, #12]
 8013c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	4a32      	ldr	r2, [pc, #200]	@ (8013ce4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x198>)
 8013c1c:	4293      	cmp	r3, r2
 8013c1e:	d027      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	68db      	ldr	r3, [r3, #12]
 8013c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8013ce8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x19c>)
 8013c2c:	4293      	cmp	r3, r2
 8013c2e:	d01f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8013cec <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a0>)
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d017      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	4a29      	ldr	r2, [pc, #164]	@ (8013cf0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a4>)
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d00f      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4a26      	ldr	r2, [pc, #152]	@ (8013cf4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a8>)
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	d007      	beq.n	8013c70 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	4a23      	ldr	r2, [pc, #140]	@ (8013cf8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1ac>)
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	d10e      	bne.n	8013c8e <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x142>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f022 0208 	bic.w	r2, r2, #8
 8013c8a:	601a      	str	r2, [r3, #0]
	}
 8013c8c:	e011      	b.n	8013cb2 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	68db      	ldr	r3, [r3, #12]
 8013c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f022 0204 	bic.w	r2, r2, #4
 8013ca8:	601a      	str	r2, [r3, #0]
	}
 8013caa:	e002      	b.n	8013cb2 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
 8013cac:	2005      	movs	r0, #5
 8013cae:	f00d fea4 	bl	80219fa <_Z17core_ErrorHandleri>
	}
 8013cb2:	bf00      	nop
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	40020010 	.word	0x40020010
 8013cc0:	40020028 	.word	0x40020028
 8013cc4:	40020040 	.word	0x40020040
 8013cc8:	40020058 	.word	0x40020058
 8013ccc:	40020070 	.word	0x40020070
 8013cd0:	40020088 	.word	0x40020088
 8013cd4:	400200a0 	.word	0x400200a0
 8013cd8:	400200b8 	.word	0x400200b8
 8013cdc:	40020410 	.word	0x40020410
 8013ce0:	40020428 	.word	0x40020428
 8013ce4:	40020440 	.word	0x40020440
 8013ce8:	40020458 	.word	0x40020458
 8013cec:	40020470 	.word	0x40020470
 8013cf0:	40020488 	.word	0x40020488
 8013cf4:	400204a0 	.word	0x400204a0
 8013cf8:	400204b8 	.word	0x400204b8

08013cfc <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>:
	void send(uint8_t *data, uint16_t len) {
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b086      	sub	sp, #24
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	4613      	mov	r3, r2
 8013d08:	80fb      	strh	r3, [r7, #6]
		if (this->state != CORE_HARDWARE_UART_STATE_RUN) {
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	791b      	ldrb	r3, [r3, #4]
 8013d0e:	2b02      	cmp	r3, #2
 8013d10:	d002      	beq.n	8013d18 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(4);
 8013d12:	2004      	movs	r0, #4
 8013d14:	f00d fe71 	bl	80219fa <_Z17core_ErrorHandleri>
		if (this->config.mode != CORE_HARDWARE_UART_MODE_DMA
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	795b      	ldrb	r3, [r3, #5]
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d006      	beq.n	8013d2e <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
				&& this->config.queues != 1) {
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	7a1b      	ldrb	r3, [r3, #8]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d002      	beq.n	8013d2e <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
			core_ErrorHandler(5);
 8013d28:	2005      	movs	r0, #5
 8013d2a:	f00d fe66 	bl	80219fa <_Z17core_ErrorHandleri>
		if (this->config.cobs_encode_tx) {
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	79db      	ldrb	r3, [r3, #7]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d022      	beq.n	8013d7c <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x80>
			uint8_t len_encode = cobsEncode(data, len, this->_tx_buffer.buffer);
 8013d36:	88fb      	ldrh	r3, [r7, #6]
 8013d38:	b2d9      	uxtb	r1, r3
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	f603 4382 	addw	r3, r3, #3202	@ 0xc82
 8013d40:	461a      	mov	r2, r3
 8013d42:	68b8      	ldr	r0, [r7, #8]
 8013d44:	f00d fd21 	bl	802178a <_Z10cobsEncodePhhS_>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	75fb      	strb	r3, [r7, #23]
			this->_tx_buffer.buffer[len_encode] = 0x00;
 8013d4c:	7dfb      	ldrb	r3, [r7, #23]
 8013d4e:	68fa      	ldr	r2, [r7, #12]
 8013d50:	4413      	add	r3, r2
 8013d52:	2200      	movs	r2, #0
 8013d54:	f883 2c82 	strb.w	r2, [r3, #3202]	@ 0xc82
			this->_tx_buffer.len = len_encode + 1;
 8013d58:	7dfb      	ldrb	r3, [r7, #23]
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	b29a      	uxth	r2, r3
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	f8a3 2c80 	strh.w	r2, [r3, #3200]	@ 0xc80
			this->tx_queue.write(&this->_tx_buffer);
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	f503 62ad 	add.w	r2, r3, #1384	@ 0x568
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f603 437c 	addw	r3, r3, #3196	@ 0xc7c
 8013d72:	4619      	mov	r1, r3
 8013d74:	4610      	mov	r0, r2
 8013d76:	f000 f8e6 	bl	8013f46 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
 8013d7a:	e008      	b.n	8013d8e <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x92>
			this->tx_queue.write(data, (uint8_t) len);
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8013d82:	88fa      	ldrh	r2, [r7, #6]
 8013d84:	b2d2      	uxtb	r2, r2
 8013d86:	68b9      	ldr	r1, [r7, #8]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f000 f918 	bl	8013fbe <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>
		this->flushTx();
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	f000 f94e 	bl	8014030 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>
	}
 8013d94:	bf00      	nop
 8013d96:	3718      	adds	r7, #24
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>:
    R call(A1 a) {
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	695b      	ldr	r3, [r3, #20]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d108      	bne.n	8013dc0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d004      	beq.n	8013dc0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
           return _p.function(a);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	6838      	ldr	r0, [r7, #0]
 8013dbc:	4798      	blx	r3
 8013dbe:	e011      	b.n	8013de4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        } else if (_membercaller && _p.object) {
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	695b      	ldr	r3, [r3, #20]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d00c      	beq.n	8013de2 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d008      	beq.n	8013de2 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
           return _membercaller(_p.object, _member, a);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	695b      	ldr	r3, [r3, #20]
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	6810      	ldr	r0, [r2, #0]
 8013dd8:	687a      	ldr	r2, [r7, #4]
 8013dda:	1d11      	adds	r1, r2, #4
 8013ddc:	683a      	ldr	r2, [r7, #0]
 8013dde:	4798      	blx	r3
 8013de0:	e000      	b.n	8013de4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        return R();
 8013de2:	bf00      	nop
    }
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>:

	int8_t available() {
 8013dea:	b480      	push	{r7}
 8013dec:	b085      	sub	sp, #20
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
		if (this->overflow) {
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d002      	beq.n	8013e00 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x16>
			return -1;
 8013dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013dfe:	e015      	b.n	8013e2c <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x42>
		}
		int8_t available = this->idx_write - this->idx_read;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8013e0c:	1ad3      	subs	r3, r2, r3
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	73fb      	strb	r3, [r7, #15]
		if (available < 0) {
 8013e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	da06      	bge.n	8013e28 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x3e>
			available += this->num_buffers;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f893 2554 	ldrb.w	r2, [r3, #1364]	@ 0x554
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
 8013e22:	4413      	add	r3, r2
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	73fb      	strb	r3, [r7, #15]
		}
		return available;
 8013e28:	f997 300f 	ldrsb.w	r3, [r7, #15]

	}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3714      	adds	r7, #20
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>:
			return 0;
		} else {
			return 1;
		}
	}
	uint8_t inc_read() {
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8013e46:	3301      	adds	r3, #1
 8013e48:	b2da      	uxtb	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556

		if (this->idx_read == this->num_buffers) {
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f893 2556 	ldrb.w	r2, [r3, #1366]	@ 0x556
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d103      	bne.n	8013e68 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2200      	movs	r2, #0
 8013e64:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556
		}
		return 1;
 8013e68:	2301      	movs	r3, #1
	}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	370c      	adds	r7, #12
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr

08013e76 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 8013e76:	b480      	push	{r7}
 8013e78:	b083      	sub	sp, #12
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
 8013e84:	3301      	adds	r3, #1
 8013e86:	b2da      	uxtb	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f883 25a1 	strb.w	r2, [r3, #1441]	@ 0x5a1
		if (this->idx_write == this->len) {
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 25a1 	ldrb.w	r2, [r3, #1441]	@ 0x5a1
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f893 35a3 	ldrb.w	r3, [r3, #1443]	@ 0x5a3
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d103      	bne.n	8013ea6 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	f883 25a1 	strb.w	r2, [r3, #1441]	@ 0x5a1
		return this->idx_write;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
	}
 8013eac:	4618      	mov	r0, r3
 8013eae:	370c      	adds	r7, #12
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr

08013eb8 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8013eb8:	b480      	push	{r7}
 8013eba:	b085      	sub	sp, #20
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	4639      	mov	r1, r7
 8013ec4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	68ba      	ldr	r2, [r7, #8]
 8013ecc:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	3304      	adds	r3, #4
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	463b      	mov	r3, r7
 8013ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013eda:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	4a03      	ldr	r2, [pc, #12]	@ (8013ef0 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE+0x38>)
 8013ee2:	615a      	str	r2, [r3, #20]
    }
 8013ee4:	bf00      	nop
 8013ee6:	3714      	adds	r7, #20
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	0801405f 	.word	0x0801405f

08013ef4 <_ZN26core_utils_FunctionPointerIvvE12membercallerI24TWIPR_UART_CommunicationEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b084      	sub	sp, #16
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	105b      	asrs	r3, r3, #1
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	1899      	adds	r1, r3, r2
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	f003 0301 	and.w	r3, r3, #1
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d00b      	beq.n	8013f36 <_ZN26core_utils_FunctionPointerIvvE12membercallerI24TWIPR_UART_CommunicationEEvPvPj+0x42>
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	105b      	asrs	r3, r3, #1
 8013f24:	461a      	mov	r2, r3
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	4413      	add	r3, r2
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	6812      	ldr	r2, [r2, #0]
 8013f30:	4413      	add	r3, r2
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	e001      	b.n	8013f3a <_ZN26core_utils_FunctionPointerIvvE12membercallerI24TWIPR_UART_CommunicationEEvPvPj+0x46>
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4608      	mov	r0, r1
 8013f3c:	4798      	blx	r3
 8013f3e:	bf00      	nop
    }
 8013f40:	3710      	adds	r7, #16
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>:
	uint8_t write(Buffer *buffer) {
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b084      	sub	sp, #16
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
 8013f4e:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < buffer->len; i++) {
 8013f50:	2300      	movs	r3, #0
 8013f52:	60fb      	str	r3, [r7, #12]
 8013f54:	e016      	b.n	8013f84 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x3e>
			this->buffers[this->idx_write].data_ptr[i] = buffer->data_ptr[i];
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	441a      	add	r2, r3
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 8013f64:	4618      	mov	r0, r3
 8013f66:	6879      	ldr	r1, [r7, #4]
 8013f68:	4603      	mov	r3, r0
 8013f6a:	011b      	lsls	r3, r3, #4
 8013f6c:	4403      	add	r3, r0
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	440b      	add	r3, r1
 8013f72:	3304      	adds	r3, #4
 8013f74:	6819      	ldr	r1, [r3, #0]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	440b      	add	r3, r1
 8013f7a:	7812      	ldrb	r2, [r2, #0]
 8013f7c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < buffer->len; i++) {
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	3301      	adds	r3, #1
 8013f82:	60fb      	str	r3, [r7, #12]
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	889b      	ldrh	r3, [r3, #4]
 8013f88:	461a      	mov	r2, r3
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	dbe2      	blt.n	8013f56 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x10>
		this->buffers[this->idx_write].len = buffer->len;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 8013f96:	4619      	mov	r1, r3
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	8898      	ldrh	r0, [r3, #4]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	011b      	lsls	r3, r3, #4
 8013fa2:	440b      	add	r3, r1
 8013fa4:	00db      	lsls	r3, r3, #3
 8013fa6:	4413      	add	r3, r2
 8013fa8:	3308      	adds	r3, #8
 8013faa:	4602      	mov	r2, r0
 8013fac:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 f87e 	bl	80140b0 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8013fb4:	4603      	mov	r3, r0
	}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}

08013fbe <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>:
	uint8_t write(uint8_t *buffer, uint16_t len) {
 8013fbe:	b580      	push	{r7, lr}
 8013fc0:	b086      	sub	sp, #24
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	60f8      	str	r0, [r7, #12]
 8013fc6:	60b9      	str	r1, [r7, #8]
 8013fc8:	4613      	mov	r3, r2
 8013fca:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i < len; i++) {
 8013fcc:	2300      	movs	r3, #0
 8013fce:	617b      	str	r3, [r7, #20]
 8013fd0:	e015      	b.n	8013ffe <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x40>
			this->buffers[this->idx_write].data_ptr[i] = buffer[i];
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	68ba      	ldr	r2, [r7, #8]
 8013fd6:	441a      	add	r2, r3
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 8013fde:	4618      	mov	r0, r3
 8013fe0:	68f9      	ldr	r1, [r7, #12]
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	011b      	lsls	r3, r3, #4
 8013fe6:	4403      	add	r3, r0
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	440b      	add	r3, r1
 8013fec:	3304      	adds	r3, #4
 8013fee:	6819      	ldr	r1, [r3, #0]
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	440b      	add	r3, r1
 8013ff4:	7812      	ldrb	r2, [r2, #0]
 8013ff6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	617b      	str	r3, [r7, #20]
 8013ffe:	88fb      	ldrh	r3, [r7, #6]
 8014000:	697a      	ldr	r2, [r7, #20]
 8014002:	429a      	cmp	r2, r3
 8014004:	dbe5      	blt.n	8013fd2 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x14>
		this->buffers[this->idx_write].len = len;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 801400c:	4619      	mov	r1, r3
 801400e:	68fa      	ldr	r2, [r7, #12]
 8014010:	460b      	mov	r3, r1
 8014012:	011b      	lsls	r3, r3, #4
 8014014:	440b      	add	r3, r1
 8014016:	00db      	lsls	r3, r3, #3
 8014018:	4413      	add	r3, r2
 801401a:	3308      	adds	r3, #8
 801401c:	88fa      	ldrh	r2, [r7, #6]
 801401e:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f000 f845 	bl	80140b0 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8014026:	4603      	mov	r3, r0
	}
 8014028:	4618      	mov	r0, r3
 801402a:	3718      	adds	r7, #24
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>:
	uint8_t _tx_encode_buf[size_buffers + 10];
	core_utils_Buffer<size_buffers> _rx_buffer;
	core_utils_Buffer<size_buffers> _tx_buffer;

	/* ------------------------------------------------------------------------- */
	void flushTx() {
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
		while (!(this->huart->gState == HAL_UART_STATE_READY)) {
 8014038:	bf00      	nop
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	68db      	ldr	r3, [r3, #12]
 801403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014042:	2b20      	cmp	r3, #32
 8014044:	bf14      	ite	ne
 8014046:	2301      	movne	r3, #1
 8014048:	2300      	moveq	r3, #0
 801404a:	b2db      	uxtb	r3, r3
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1f4      	bne.n	801403a <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv+0xa>

		}
		this->sendNextBuffer();
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 f859 	bl	8014108 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>
	}
 8014056:	bf00      	nop
 8014058:	3708      	adds	r7, #8
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 801405e:	b580      	push	{r7, lr}
 8014060:	b084      	sub	sp, #16
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
 8014066:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	105b      	asrs	r3, r3, #1
 8014076:	461a      	mov	r2, r3
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	1899      	adds	r1, r3, r2
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	f003 0301 	and.w	r3, r3, #1
 8014084:	2b00      	cmp	r3, #0
 8014086:	d00b      	beq.n	80140a0 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x42>
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	105b      	asrs	r3, r3, #1
 801408e:	461a      	mov	r2, r3
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	4413      	add	r3, r2
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	68ba      	ldr	r2, [r7, #8]
 8014098:	6812      	ldr	r2, [r2, #0]
 801409a:	4413      	add	r3, r2
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	e001      	b.n	80140a4 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x46>
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4608      	mov	r0, r1
 80140a6:	4798      	blx	r3
 80140a8:	bf00      	nop
    }
 80140aa:	3710      	adds	r7, #16
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 80140be:	3301      	adds	r3, #1
 80140c0:	b2da      	uxtb	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		if (this->idx_write == this->num_buffers) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d103      	bne.n	80140e0 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		if (this->idx_write == this->idx_read) {
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d104      	bne.n	80140fa <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4a>
			this->overflow = 1;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2201      	movs	r2, #1
 80140f4:	701a      	strb	r2, [r3, #0]
			return 0;
 80140f6:	2300      	movs	r3, #0
 80140f8:	e000      	b.n	80140fc <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4c>
			return 1;
 80140fa:	2301      	movs	r3, #1
	}
 80140fc:	4618      	mov	r0, r3
 80140fe:	370c      	adds	r7, #12
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr

08014108 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>:

	/* ------------------------------------------------------------------------- */
	void sendNextBuffer() {
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
		if (!this->tx_queue.available()) {
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8014116:	4618      	mov	r0, r3
 8014118:	f7ff fe67 	bl	8013dea <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 801411c:	4603      	mov	r3, r0
 801411e:	2b00      	cmp	r3, #0
 8014120:	bf0c      	ite	eq
 8014122:	2301      	moveq	r3, #1
 8014124:	2300      	movne	r3, #0
 8014126:	b2db      	uxtb	r3, r3
 8014128:	2b00      	cmp	r3, #0
 801412a:	d120      	bne.n	801416e <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x66>
			return;
		}

		if (this->huart->gState != HAL_UART_STATE_READY) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014134:	2b20      	cmp	r3, #32
 8014136:	bf14      	ite	ne
 8014138:	2301      	movne	r3, #1
 801413a:	2300      	moveq	r3, #0
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d117      	bne.n	8014172 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6a>
			return;
		}

		uint8_t *buffer = NULL;
 8014142:	2300      	movs	r3, #0
 8014144:	60bb      	str	r3, [r7, #8]
		uint8_t len = this->tx_queue.read(&buffer);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 801414c:	f107 0208 	add.w	r2, r7, #8
 8014150:	4611      	mov	r1, r2
 8014152:	4618      	mov	r0, r3
 8014154:	f000 f811 	bl	801417a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>
 8014158:	4603      	mov	r3, r0
 801415a:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_DMA(this->huart, buffer, len);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	68b9      	ldr	r1, [r7, #8]
 8014162:	7bfa      	ldrb	r2, [r7, #15]
 8014164:	b292      	uxth	r2, r2
 8014166:	4618      	mov	r0, r3
 8014168:	f7f8 f9a0 	bl	800c4ac <HAL_UART_Transmit_DMA>
 801416c:	e002      	b.n	8014174 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 801416e:	bf00      	nop
 8014170:	e000      	b.n	8014174 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8014172:	bf00      	nop
	}
 8014174:	3710      	adds	r7, #16
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>:
	uint8_t read(uint8_t **buffer) {
 801417a:	b580      	push	{r7, lr}
 801417c:	b084      	sub	sp, #16
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
 8014182:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f7ff fe30 	bl	8013dea <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	bfd4      	ite	le
 8014190:	2301      	movle	r3, #1
 8014192:	2300      	movgt	r3, #0
 8014194:	b2db      	uxtb	r3, r3
 8014196:	2b00      	cmp	r3, #0
 8014198:	d001      	beq.n	801419e <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x24>
			return 0;
 801419a:	2300      	movs	r3, #0
 801419c:	e01e      	b.n	80141dc <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x62>
		*buffer = &this->buffers[this->idx_read].data_ptr[0];
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 80141a4:	4619      	mov	r1, r3
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	460b      	mov	r3, r1
 80141aa:	011b      	lsls	r3, r3, #4
 80141ac:	440b      	add	r3, r1
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	4413      	add	r3, r2
 80141b2:	3304      	adds	r3, #4
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	601a      	str	r2, [r3, #0]
		uint8_t len = this->buffers[this->idx_read].len;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 80141c0:	4619      	mov	r1, r3
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	460b      	mov	r3, r1
 80141c6:	011b      	lsls	r3, r3, #4
 80141c8:	440b      	add	r3, r1
 80141ca:	00db      	lsls	r3, r3, #3
 80141cc:	4413      	add	r3, r2
 80141ce:	3308      	adds	r3, #8
 80141d0:	881b      	ldrh	r3, [r3, #0]
 80141d2:	73fb      	strb	r3, [r7, #15]
		this->inc_read();
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff fe2f 	bl	8013e38 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return len;
 80141da:	7bfb      	ldrb	r3, [r7, #15]
	}
 80141dc:	4618      	mov	r0, r3
 80141de:	3710      	adds	r7, #16
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <_Z41__static_initialization_and_destruction_0ii>:
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d10a      	bne.n	801420a <_Z41__static_initialization_and_destruction_0ii+0x26>
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d105      	bne.n	801420a <_Z41__static_initialization_and_destruction_0ii+0x26>
static core_comm_SerialMessage_memory<128> incoming_msg;
 80141fe:	4805      	ldr	r0, [pc, #20]	@ (8014214 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014200:	f7fe fef6 	bl	8012ff0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
static core_comm_SerialMessage_memory<128> outgoing_msg;
 8014204:	4804      	ldr	r0, [pc, #16]	@ (8014218 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8014206:	f7fe fef3 	bl	8012ff0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
}
 801420a:	bf00      	nop
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	2401ee6c 	.word	0x2401ee6c
 8014218:	2401eefc 	.word	0x2401eefc

0801421c <_ZN23core_comm_UartInterfaceILi10ELi128EE9setTaskIDEP19tskTaskControlBlock>:
	void setTaskID(TaskHandle_t task) {
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
		this->_task_id = task;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801422c:	461a      	mov	r2, r3
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	f8c2 3388 	str.w	r3, [r2, #904]	@ 0x388
	}
 8014234:	bf00      	nop
 8014236:	370c      	adds	r7, #12
 8014238:	46bd      	mov	sp, r7
 801423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423e:	4770      	bx	lr

08014240 <_ZN23core_comm_UartInterfaceILi10ELi128EE9getTaskIDEv>:
	TaskHandle_t getTaskID() {
 8014240:	b480      	push	{r7}
 8014242:	b083      	sub	sp, #12
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
		return this->_task_id;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801424e:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
	}
 8014252:	4618      	mov	r0, r3
 8014254:	370c      	adds	r7, #12
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr

0801425e <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt>:
	void rxFunction(uint16_t len) {
 801425e:	b580      	push	{r7, lr}
 8014260:	b082      	sub	sp, #8
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
 8014266:	460b      	mov	r3, r1
 8014268:	807b      	strh	r3, [r7, #2]
		if (len == 0) {
 801426a:	887b      	ldrh	r3, [r7, #2]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d031      	beq.n	80142d4 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x76>
		if (this->config.cobs_encode_rx) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	799b      	ldrb	r3, [r3, #6]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00c      	beq.n	8014292 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x34>
			len = cobsDecodeInPlace(this->_rx_buffer.buffer, len - 1);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f603 32fa 	addw	r2, r3, #3066	@ 0xbfa
 801427e:	887b      	ldrh	r3, [r7, #2]
 8014280:	b2db      	uxtb	r3, r3
 8014282:	3b01      	subs	r3, #1
 8014284:	b2db      	uxtb	r3, r3
 8014286:	4619      	mov	r1, r3
 8014288:	4610      	mov	r0, r2
 801428a:	f00d fb13 	bl	80218b4 <_Z17cobsDecodeInPlacePhh>
 801428e:	4603      	mov	r3, r0
 8014290:	807b      	strh	r3, [r7, #2]
		this->_rx_buffer.len = len;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	887a      	ldrh	r2, [r7, #2]
 8014296:	f8a3 2bf8 	strh.w	r2, [r3, #3064]	@ 0xbf8
		if (this->config.queues) {
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	7a1b      	ldrb	r3, [r3, #8]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d009      	beq.n	80142b6 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x58>
			this->rx_queue.write(&this->_rx_buffer);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f103 0210 	add.w	r2, r3, #16
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f603 33f4 	addw	r3, r3, #3060	@ 0xbf4
 80142ae:	4619      	mov	r1, r3
 80142b0:	4610      	mov	r0, r2
 80142b2:	f7ff fe48 	bl	8013f46 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
		if (this->_callbacks.rx.registered) {
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f893 3ac4 	ldrb.w	r3, [r3, #2756]	@ 0xac4
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d005      	beq.n	80142cc <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x6e>
			this->_callbacks.rx.call();
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fe f96d 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
		this->startReceiveDMA();
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	f7ff fc3d 	bl	8013b4c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 80142d2:	e000      	b.n	80142d6 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x78>
			return;
 80142d4:	bf00      	nop
	}
 80142d6:	3708      	adds	r7, #8
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <_ZN18core_hardware_UARTILi10ELi128EE9get_huartEv>:
	UART_HandleTypeDef* get_huart() {
 80142dc:	b480      	push	{r7}
 80142de:	b083      	sub	sp, #12
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
		return this->huart;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	68db      	ldr	r3, [r3, #12]
	}
 80142e8:	4618      	mov	r0, r3
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr

080142f4 <_GLOBAL__sub_I_rx_available>:
 80142f4:	b580      	push	{r7, lr}
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80142fc:	2001      	movs	r0, #1
 80142fe:	f7ff ff71 	bl	80141e4 <_Z41__static_initialization_and_destruction_0ii>
 8014302:	bd80      	pop	{r7, pc}

08014304 <_ZN15core_utils_GPIOC1Ev>:
void core_utils_gpio_registerExtiCallback(uint16_t line, void (* function) (void));


class core_utils_GPIO {
public:
	core_utils_GPIO(){
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]

	}
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	4618      	mov	r0, r3
 8014310:	370c      	adds	r7, #12
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr

0801431a <_ZN11RegisterMap8addEntryEhP13RegisterEntry>:
};

/* ============================================================ */
class RegisterMap {
public:
	virtual void addEntry(uint8_t address, RegisterEntry *entry) {
 801431a:	b480      	push	{r7}
 801431c:	b085      	sub	sp, #20
 801431e:	af00      	add	r7, sp, #0
 8014320:	60f8      	str	r0, [r7, #12]
 8014322:	460b      	mov	r3, r1
 8014324:	607a      	str	r2, [r7, #4]
 8014326:	72fb      	strb	r3, [r7, #11]

	}
 8014328:	bf00      	nop
 801432a:	3714      	adds	r7, #20
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <_ZN11RegisterMap8hasEntryEh>:
	virtual bool hasEntry(uint8_t address) {
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	460b      	mov	r3, r1
 801433e:	70fb      	strb	r3, [r7, #3]
		return false;
 8014340:	2300      	movs	r3, #0
	}
 8014342:	4618      	mov	r0, r3
 8014344:	370c      	adds	r7, #12
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr

0801434e <_ZN11RegisterMap12getInputSizeEh>:
	/* -------------------------------------------------- */
	virtual uint16_t getInputSize(uint8_t address) {
 801434e:	b580      	push	{r7, lr}
 8014350:	b082      	sub	sp, #8
 8014352:	af00      	add	r7, sp, #0
 8014354:	6078      	str	r0, [r7, #4]
 8014356:	460b      	mov	r3, r1
 8014358:	70fb      	strb	r3, [r7, #3]
		return this->entries[address].getInputSize();
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	689a      	ldr	r2, [r3, #8]
 801435e:	78fb      	ldrb	r3, [r7, #3]
 8014360:	00db      	lsls	r3, r3, #3
 8014362:	18d1      	adds	r1, r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	689a      	ldr	r2, [r3, #8]
 8014368:	78fb      	ldrb	r3, [r7, #3]
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	4413      	add	r3, r2
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	4608      	mov	r0, r1
 8014374:	4798      	blx	r3
 8014376:	4603      	mov	r3, r0
	}
 8014378:	4618      	mov	r0, r3
 801437a:	3708      	adds	r7, #8
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <_ZN11RegisterMap13getOutputSizeEh>:
	/* -------------------------------------------------- */
	virtual uint16_t getOutputSize(uint8_t address) {
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	460b      	mov	r3, r1
 801438a:	70fb      	strb	r3, [r7, #3]
		return this->entries[address].getOutputSize();
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	689a      	ldr	r2, [r3, #8]
 8014390:	78fb      	ldrb	r3, [r7, #3]
 8014392:	00db      	lsls	r3, r3, #3
 8014394:	18d1      	adds	r1, r2, r3
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	689a      	ldr	r2, [r3, #8]
 801439a:	78fb      	ldrb	r3, [r7, #3]
 801439c:	00db      	lsls	r3, r3, #3
 801439e:	4413      	add	r3, r2
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	3304      	adds	r3, #4
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	4608      	mov	r0, r1
 80143a8:	4798      	blx	r3
 80143aa:	4603      	mov	r3, r0
	}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <_ZN11RegisterMap7getTypeEh>:
	virtual register_entry_type_t getType(uint8_t address) {
 80143b4:	b480      	push	{r7}
 80143b6:	b083      	sub	sp, #12
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	460b      	mov	r3, r1
 80143be:	70fb      	strb	r3, [r7, #3]
		return REGISTER_ENTRY_TYPE_NONE;
 80143c0:	2300      	movs	r3, #0
	}
 80143c2:	4618      	mov	r0, r3
 80143c4:	370c      	adds	r7, #12
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr

080143ce <_ZN11RegisterMap7executeEhPhS0_>:
	/* -------------------------------------------------- */
	virtual uint16_t execute(uint8_t address, uint8_t *input, uint8_t *output) {
 80143ce:	b480      	push	{r7}
 80143d0:	b085      	sub	sp, #20
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	60f8      	str	r0, [r7, #12]
 80143d6:	607a      	str	r2, [r7, #4]
 80143d8:	603b      	str	r3, [r7, #0]
 80143da:	460b      	mov	r3, r1
 80143dc:	72fb      	strb	r3, [r7, #11]
		return 0;
 80143de:	2300      	movs	r3, #0
	}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3714      	adds	r7, #20
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <_ZN11RegisterMap5writeEhPh>:
	/* -------------------------------------------------- */
	virtual void write(uint8_t address, uint8_t *input) {
 80143ec:	b480      	push	{r7}
 80143ee:	b085      	sub	sp, #20
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	460b      	mov	r3, r1
 80143f6:	607a      	str	r2, [r7, #4]
 80143f8:	72fb      	strb	r3, [r7, #11]

	}
 80143fa:	bf00      	nop
 80143fc:	3714      	adds	r7, #20
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr

08014406 <_ZN11RegisterMap4readEhPh>:
	/* -------------------------------------------------- */
	virtual uint16_t read(uint8_t address, uint8_t *output) {
 8014406:	b480      	push	{r7}
 8014408:	b085      	sub	sp, #20
 801440a:	af00      	add	r7, sp, #0
 801440c:	60f8      	str	r0, [r7, #12]
 801440e:	460b      	mov	r3, r1
 8014410:	607a      	str	r2, [r7, #4]
 8014412:	72fb      	strb	r3, [r7, #11]
		return 0;
 8014414:	2300      	movs	r3, #0
	}
 8014416:	4618      	mov	r0, r3
 8014418:	3714      	adds	r7, #20
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
	...

08014424 <_ZN15BILBO_Message_tC1Ev>:
} serial_message_type_t;

class BILBO_Message_t {
public:

	BILBO_Message_t(){
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	4a04      	ldr	r2, [pc, #16]	@ (8014440 <_ZN15BILBO_Message_tC1Ev+0x1c>)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	601a      	str	r2, [r3, #0]

	}
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	4618      	mov	r0, r3
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	08026208 	.word	0x08026208

08014444 <_ZN28twipr_communication_config_tC1Ev>:
	char message [DEBUG_PRINT_BUFFER_SIZE];
} debug_message_data_t;

typedef BILBO_Message<debug_message_data_t, MSG_EVENT, MESSAGE_ID_DEBUG> BILBO_Debug_Message;

typedef struct twipr_communication_config_t {
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	3308      	adds	r3, #8
 8014450:	4618      	mov	r0, r3
 8014452:	f7ff ff57 	bl	8014304 <_ZN15core_utils_GPIOC1Ev>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4618      	mov	r0, r3
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <_ZN31twipr_communication_callbacks_tC1Ev>:
typedef struct twipr_communication_callbacks_t {
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	4618      	mov	r0, r3
 801446c:	f7fe fa2e 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	4618      	mov	r0, r3
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}

0801447a <_ZN26TWIPR_CommunicationManagerC1Ev>:

void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma);

TWIPR_CommunicationManager *active_manager = NULL;

TWIPR_CommunicationManager::TWIPR_CommunicationManager() {
 801447a:	b580      	push	{r7, lr}
 801447c:	b082      	sub	sp, #8
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4618      	mov	r0, r3
 8014486:	f7ff ffdd 	bl	8014444 <_ZN28twipr_communication_config_tC1Ev>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	3318      	adds	r3, #24
 801448e:	4618      	mov	r0, r3
 8014490:	f7fe fc24 	bl	8012cdc <_ZN24TWIPR_UART_CommunicationC1Ev>
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	f241 4334 	movw	r3, #5172	@ 0x1434
 801449a:	4413      	add	r3, r2
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe f8a1 	bl	80125e4 <_ZN23TWIPR_SPI_CommunicationC1Ev>
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 80144a8:	4413      	add	r3, r2
 80144aa:	4618      	mov	r0, r3
 80144ac:	f009 fba5 	bl	801dbfa <_ZN3CANC1Ev>
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	f641 1304 	movw	r3, #6404	@ 0x1904
 80144b6:	4413      	add	r3, r2
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7ff ffd1 	bl	8014460 <_ZN31twipr_communication_callbacks_tC1Ev>
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	f641 63ec 	movw	r3, #7916	@ 0x1eec
 80144c4:	4413      	add	r3, r2
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 fc1c 	bl	8014d04 <_ZN13BILBO_MessageI20debug_message_data_tL21serial_message_type_t5ELh221EEC1Ev>

}
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	4618      	mov	r0, r3
 80144d0:	3708      	adds	r7, #8
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
	...

080144d8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>:

/* ====================================================================== */
void TWIPR_CommunicationManager::init(twipr_communication_config_t config) {
 80144d8:	b084      	sub	sp, #16
 80144da:	b5b0      	push	{r4, r5, r7, lr}
 80144dc:	b0c8      	sub	sp, #288	@ 0x120
 80144de:	af02      	add	r7, sp, #8
 80144e0:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80144e4:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 80144e8:	6020      	str	r0, [r4, #0]
 80144ea:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 80144ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80144f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80144f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	461d      	mov	r5, r3
 80144fe:	f507 7496 	add.w	r4, r7, #300	@ 0x12c
 8014502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014506:	e894 0003 	ldmia.w	r4, {r0, r1}
 801450a:	e885 0003 	stmia.w	r5, {r0, r1}

	active_manager = this;
 801450e:	4aa6      	ldr	r2, [pc, #664]	@ (80147a8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2d0>)
 8014510:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014514:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	6013      	str	r3, [r2, #0]

	// Initialize the UART CM4 Interface
	twipr_uart_comm_config_t uart_config = { .huart = this->config.huart };
 801451c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014520:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	627b      	str	r3, [r7, #36]	@ 0x24
	this->uart_interface.init(uart_config);
 801452a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801452e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	3318      	adds	r3, #24
 8014536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014538:	4618      	mov	r0, r3
 801453a:	f7fe fbe7 	bl	8012d0c <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 801453e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014542:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f103 0418 	add.w	r4, r3, #24
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 801454c:	4b97      	ldr	r3, [pc, #604]	@ (80147ac <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2d4>)
 801454e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014550:	2300      	movs	r3, #0
 8014552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014554:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014558:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 801455c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8014560:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8014564:	cb0c      	ldmia	r3, {r2, r3}
 8014566:	6809      	ldr	r1, [r1, #0]
 8014568:	f000 fbee 	bl	8014d48 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 801456c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014570:	461a      	mov	r2, r3
 8014572:	2101      	movs	r1, #1
 8014574:	4620      	mov	r0, r4
 8014576:	f7fe fc4b 	bl	8012e10 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_write_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 801457a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801457e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f103 0418 	add.w	r4, r3, #24
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8014588:	4b89      	ldr	r3, [pc, #548]	@ (80147b0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2d8>)
 801458a:	673b      	str	r3, [r7, #112]	@ 0x70
 801458c:	2300      	movs	r3, #0
 801458e:	677b      	str	r3, [r7, #116]	@ 0x74
 8014590:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014594:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8014598:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801459c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80145a0:	cb0c      	ldmia	r3, {r2, r3}
 80145a2:	6809      	ldr	r1, [r1, #0]
 80145a4:	f000 fbd0 	bl	8014d48 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 80145a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80145ac:	461a      	mov	r2, r3
 80145ae:	2102      	movs	r1, #2
 80145b0:	4620      	mov	r0, r4
 80145b2:	f7fe fc2d 	bl	8012e10 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_read_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80145b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80145ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f103 0418 	add.w	r4, r3, #24
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 80145c4:	4b7b      	ldr	r3, [pc, #492]	@ (80147b4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2dc>)
 80145c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80145ca:	2300      	movs	r3, #0
 80145cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80145d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80145d4:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 80145d8:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80145dc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80145e0:	cb0c      	ldmia	r3, {r2, r3}
 80145e2:	6809      	ldr	r1, [r1, #0]
 80145e4:	f000 fbb0 	bl	8014d48 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80145e8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80145ec:	461a      	mov	r2, r3
 80145ee:	2103      	movs	r1, #3
 80145f0:	4620      	mov	r0, r4
 80145f2:	f7fe fc0d 	bl	8012e10 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_func_callback));

	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 80145f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80145fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	8adc      	ldrh	r4, [r3, #22]
			core_utils_Callback<void, void>(this,
 8014602:	4b6d      	ldr	r3, [pc, #436]	@ (80147b8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2e0>)
 8014604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014608:	2300      	movs	r3, #0
 801460a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801460e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014612:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8014616:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801461a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801461e:	cb0c      	ldmia	r3, {r2, r3}
 8014620:	6809      	ldr	r1, [r1, #0]
 8014622:	f000 fbc5 	bl	8014db0 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 8014626:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801462a:	4619      	mov	r1, r3
 801462c:	4620      	mov	r0, r4
 801462e:	f00d fa51 	bl	8021ad4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::resetUART));

	// Initialize the SPI Interface
	twipr_spi_comm_config_t spi_config = { .hspi = this->config.hspi,
 8014632:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801463a:	461a      	mov	r2, r3
 801463c:	2300      	movs	r3, #0
 801463e:	6013      	str	r3, [r2, #0]
 8014640:	6053      	str	r3, [r2, #4]
 8014642:	6093      	str	r3, [r2, #8]
 8014644:	60d3      	str	r3, [r2, #12]
 8014646:	6113      	str	r3, [r2, #16]
 8014648:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801464c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014650:	220a      	movs	r2, #10
 8014652:	811a      	strh	r2, [r3, #8]
 8014654:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014658:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	685a      	ldr	r2, [r3, #4]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
			TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE, .sequence_buffer =
					this->config.sequence_rx_buffer, .len_sequence_buffer =
					this->config.len_sequence_buffer };
 8014660:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014668:	601a      	str	r2, [r3, #0]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
 801466a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801466e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014672:	681a      	ldr	r2, [r3, #0]
 8014674:	f641 1324 	movw	r3, #6436	@ 0x1924
 8014678:	4413      	add	r3, r2
					this->config.len_sequence_buffer };
 801467a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 801467e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8014682:	6053      	str	r3, [r2, #4]
					this->config.sequence_rx_buffer, .len_sequence_buffer =
 8014684:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014688:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	691a      	ldr	r2, [r3, #16]
					this->config.len_sequence_buffer };
 8014690:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014698:	60da      	str	r2, [r3, #12]
 801469a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801469e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	8a9a      	ldrh	r2, [r3, #20]
 80146a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80146ae:	821a      	strh	r2, [r3, #16]
	this->spi_interface.init(spi_config);
 80146b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	f241 4434 	movw	r4, #5172	@ 0x1434
 80146be:	441c      	add	r4, r3
 80146c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80146c8:	466d      	mov	r5, sp
 80146ca:	f103 020c 	add.w	r2, r3, #12
 80146ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80146d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80146d8:	4620      	mov	r0, r4
 80146da:	f7fd ff99 	bl	8012610 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>

	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 80146de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f241 4434 	movw	r4, #5172	@ 0x1434
 80146ec:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 80146ee:	4b33      	ldr	r3, [pc, #204]	@ (80147bc <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2e4>)
 80146f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80146f4:	2300      	movs	r3, #0
 80146f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80146fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80146fe:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8014702:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8014706:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801470a:	cb0c      	ldmia	r3, {r2, r3}
 801470c:	6809      	ldr	r1, [r1, #0]
 801470e:	f000 fb83 	bl	8014e18 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 8014712:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8014716:	461a      	mov	r2, r3
 8014718:	2100      	movs	r1, #0
 801471a:	4620      	mov	r0, r4
 801471c:	f7fe f80e 	bl	801273c <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_rxTrajectory_callback));
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8014720:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014724:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f241 4434 	movw	r4, #5172	@ 0x1434
 801472e:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 8014730:	4b23      	ldr	r3, [pc, #140]	@ (80147c0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2e8>)
 8014732:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8014736:	2300      	movs	r3, #0
 8014738:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801473c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014740:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8014744:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8014748:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801474c:	cb0c      	ldmia	r3, {r2, r3}
 801474e:	6809      	ldr	r1, [r1, #0]
 8014750:	f000 fb62 	bl	8014e18 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8014754:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8014758:	461a      	mov	r2, r3
 801475a:	2101      	movs	r1, #1
 801475c:	4620      	mov	r0, r4
 801475e:	f7fd ffed 	bl	801273c <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_txSamples_callback));

	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 8014762:	4a18      	ldr	r2, [pc, #96]	@ (80147c4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2ec>)
 8014764:	2100      	movs	r1, #0
 8014766:	4818      	ldr	r0, [pc, #96]	@ (80147c8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2f0>)
 8014768:	f7ef ffc0 	bl	80046ec <HAL_DMA_RegisterCallback>
			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);

	// Initialize the CAN Bus
	can_config_t can_config = { .hfdcan = BOARD_FDCAN, };
 801476c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014770:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014774:	4a15      	ldr	r2, [pc, #84]	@ (80147cc <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x2f4>)
 8014776:	601a      	str	r2, [r3, #0]

	this->can.init(can_config);
 8014778:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801477c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 8014786:	4413      	add	r3, r2
 8014788:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 801478c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8014790:	6811      	ldr	r1, [r2, #0]
 8014792:	4618      	mov	r0, r3
 8014794:	f009 fab8 	bl	801dd08 <_ZN3CAN4initE12can_config_t>
}
 8014798:	bf00      	nop
 801479a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801479e:	46bd      	mov	sp, r7
 80147a0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80147a4:	b004      	add	sp, #16
 80147a6:	4770      	bx	lr
 80147a8:	2401f3a8 	.word	0x2401f3a8
 80147ac:	0801484d 	.word	0x0801484d
 80147b0:	08014939 	.word	0x08014939
 80147b4:	08014a15 	.word	0x08014a15
 80147b8:	08014833 	.word	0x08014833
 80147bc:	08014b69 	.word	0x08014b69
 80147c0:	08014be1 	.word	0x08014be1
 80147c4:	08014c51 	.word	0x08014c51
 80147c8:	24000af0 	.word	0x24000af0
 80147cc:	24000224 	.word	0x24000224

080147d0 <_ZN26TWIPR_CommunicationManager5startEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::start() {
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]

	// Start the UART Interface
	this->uart_interface.start();
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	3318      	adds	r3, #24
 80147dc:	4618      	mov	r0, r3
 80147de:	f7fe fac1 	bl	8012d64 <_ZN24TWIPR_UART_Communication5startEv>

	// Start the SPI Interface
	this->spi_interface.start();
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	f241 4334 	movw	r3, #5172	@ 0x1434
 80147e8:	4413      	add	r3, r2
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fd ff6a 	bl	80126c4 <_ZN23TWIPR_SPI_Communication5startEv>

	// Start the CAN Bus
	this->can.start();
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 80147f6:	4413      	add	r3, r2
 80147f8:	4618      	mov	r0, r3
 80147fa:	f009 fb75 	bl	801dee8 <_ZN3CAN5startEv>
}
 80147fe:	bf00      	nop
 8014800:	3708      	adds	r7, #8
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}

08014806 <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE>:
/* ====================================================================== */
void TWIPR_CommunicationManager::registerCallback(
		twipr_communication_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 8014806:	b580      	push	{r7, lr}
 8014808:	b084      	sub	sp, #16
 801480a:	af00      	add	r7, sp, #0
 801480c:	60f8      	str	r0, [r7, #12]
 801480e:	460b      	mov	r3, r1
 8014810:	607a      	str	r2, [r7, #4]
 8014812:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8014814:	7afb      	ldrb	r3, [r7, #11]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d107      	bne.n	801482a <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE+0x24>
	case TWIPR_COMM_CALLBACK_NEW_TRAJECTORY: {
		this->_callbacks.new_trajectory = callback;
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	f641 1304 	movw	r3, #6404	@ 0x1904
 8014820:	4413      	add	r3, r2
 8014822:	6879      	ldr	r1, [r7, #4]
 8014824:	4618      	mov	r0, r3
 8014826:	f7fd ff69 	bl	80126fc <_ZN19core_utils_CallbackIvtEaSERKS0_>
	}
	}
}
 801482a:	bf00      	nop
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <_ZN26TWIPR_CommunicationManager9resetUARTEv>:

/* ====================================================================== */
void TWIPR_CommunicationManager::resetUART() {
 8014832:	b580      	push	{r7, lr}
 8014834:	b082      	sub	sp, #8
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
	this->uart_interface.reset();
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	3318      	adds	r3, #24
 801483e:	4618      	mov	r0, r3
 8014840:	f7fe faaa 	bl	8012d98 <_ZN24TWIPR_UART_Communication5resetEv>
}
 8014844:	bf00      	nop
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_write_callback(
		core_comm_SerialMessage *msg) {
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	789a      	ldrb	r2, [r3, #2]
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	78db      	ldrb	r3, [r3, #3]
 801485e:	4619      	mov	r1, r3
 8014860:	4610      	mov	r0, r2
 8014862:	f00d f84f 	bl	8021904 <_Z15uint8_to_uint16hh>
 8014866:	4603      	mov	r3, r0
 8014868:	81fb      	strh	r3, [r7, #14]

	if (!register_map.hasEntry(address)) {
 801486a:	89fb      	ldrh	r3, [r7, #14]
 801486c:	b2db      	uxtb	r3, r3
 801486e:	4619      	mov	r1, r3
 8014870:	482f      	ldr	r0, [pc, #188]	@ (8014930 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 8014872:	f000 fb05 	bl	8014e80 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>
 8014876:	4603      	mov	r3, r0
 8014878:	f083 0301 	eor.w	r3, r3, #1
 801487c:	b2db      	uxtb	r3, r3
 801487e:	2b00      	cmp	r3, #0
 8014880:	d005      	beq.n	801488e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x42>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8014882:	2202      	movs	r2, #2
 8014884:	6839      	ldr	r1, [r7, #0]
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f000 f942 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801488c:	e04c      	b.n	8014928 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xdc>
	}

	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_WRITABLE
 801488e:	89fb      	ldrh	r3, [r7, #14]
 8014890:	b2db      	uxtb	r3, r3
 8014892:	4619      	mov	r1, r3
 8014894:	4826      	ldr	r0, [pc, #152]	@ (8014930 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 8014896:	f000 fb0a 	bl	8014eae <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 801489a:	4603      	mov	r3, r0
			&& register_map.getType(address)
 801489c:	2b02      	cmp	r3, #2
 801489e:	d00a      	beq.n	80148b6 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x6a>
 80148a0:	89fb      	ldrh	r3, [r7, #14]
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	4619      	mov	r1, r3
 80148a6:	4822      	ldr	r0, [pc, #136]	@ (8014930 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 80148a8:	f000 fb01 	bl	8014eae <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b04      	cmp	r3, #4
 80148b0:	d001      	beq.n	80148b6 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x6a>
 80148b2:	2301      	movs	r3, #1
 80148b4:	e000      	b.n	80148b8 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x6c>
 80148b6:	2300      	movs	r3, #0
	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_WRITABLE
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d005      	beq.n	80148c8 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x7c>
					!= REGISTER_ENTRY_TYPE_READWRITEABLE) {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 80148bc:	2206      	movs	r2, #6
 80148be:	6839      	ldr	r1, [r7, #0]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 f925 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80148c6:	e02f      	b.n	8014928 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xdc>
	}

	if (register_map.getInputSize(address) != msg->len) {
 80148c8:	89fb      	ldrh	r3, [r7, #14]
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	4619      	mov	r1, r3
 80148ce:	4818      	ldr	r0, [pc, #96]	@ (8014930 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 80148d0:	f000 fb16 	bl	8014f00 <_ZN22core_utils_RegisterMapILi255EE12getInputSizeEh>
 80148d4:	4603      	mov	r3, r0
 80148d6:	461a      	mov	r2, r3
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	899b      	ldrh	r3, [r3, #12]
 80148dc:	429a      	cmp	r2, r3
 80148de:	bf14      	ite	ne
 80148e0:	2301      	movne	r3, #1
 80148e2:	2300      	moveq	r3, #0
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d11d      	bne.n	8014926 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xda>
//		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
		return;
	}

	register_map.write(address, msg->data_ptr);
 80148ea:	89fb      	ldrh	r3, [r7, #14]
 80148ec:	b2d9      	uxtb	r1, r3
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	689b      	ldr	r3, [r3, #8]
 80148f2:	461a      	mov	r2, r3
 80148f4:	480e      	ldr	r0, [pc, #56]	@ (8014930 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe4>)
 80148f6:	f000 fb1e 	bl	8014f36 <_ZN22core_utils_RegisterMapILi255EE5writeEhPh>

	outgoing_msg.address_1 = msg->address_1;
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	785a      	ldrb	r2, [r3, #1]
 80148fe:	4b0d      	ldr	r3, [pc, #52]	@ (8014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014900:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_2;
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	789a      	ldrb	r2, [r3, #2]
 8014906:	4b0b      	ldr	r3, [pc, #44]	@ (8014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014908:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_3;
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	78da      	ldrb	r2, [r3, #3]
 801490e:	4b09      	ldr	r3, [pc, #36]	@ (8014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014910:	705a      	strb	r2, [r3, #1]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014912:	4b08      	ldr	r3, [pc, #32]	@ (8014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014914:	2203      	movs	r2, #3
 8014916:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 1;
 8014918:	4b06      	ldr	r3, [pc, #24]	@ (8014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 801491a:	2201      	movs	r2, #1
 801491c:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 0;
 801491e:	4b05      	ldr	r3, [pc, #20]	@ (8014934 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xe8>)
 8014920:	2200      	movs	r2, #0
 8014922:	819a      	strh	r2, [r3, #12]
 8014924:	e000      	b.n	8014928 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xdc>
		return;
 8014926:	bf00      	nop

//	this->uart_interface.send(&outgoing_msg);

}
 8014928:	3710      	adds	r7, #16
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	2401ef90 	.word	0x2401ef90
 8014934:	2401f398 	.word	0x2401f398

08014938 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_read_callback(
		core_comm_SerialMessage *msg) {
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	789a      	ldrb	r2, [r3, #2]
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	78db      	ldrb	r3, [r3, #3]
 801494a:	4619      	mov	r1, r3
 801494c:	4610      	mov	r0, r2
 801494e:	f00c ffd9 	bl	8021904 <_Z15uint8_to_uint16hh>
 8014952:	4603      	mov	r3, r0
 8014954:	81fb      	strh	r3, [r7, #14]

	if (!register_map.hasEntry(address)) {
 8014956:	89fb      	ldrh	r3, [r7, #14]
 8014958:	b2db      	uxtb	r3, r3
 801495a:	4619      	mov	r1, r3
 801495c:	482b      	ldr	r0, [pc, #172]	@ (8014a0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 801495e:	f000 fa8f 	bl	8014e80 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>
 8014962:	4603      	mov	r3, r0
 8014964:	f083 0301 	eor.w	r3, r3, #1
 8014968:	b2db      	uxtb	r3, r3
 801496a:	2b00      	cmp	r3, #0
 801496c:	d005      	beq.n	801497a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x42>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 801496e:	2202      	movs	r2, #2
 8014970:	6839      	ldr	r1, [r7, #0]
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f8cc 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014978:	e044      	b.n	8014a04 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xcc>
	}

	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_READABLE
 801497a:	89fb      	ldrh	r3, [r7, #14]
 801497c:	b2db      	uxtb	r3, r3
 801497e:	4619      	mov	r1, r3
 8014980:	4822      	ldr	r0, [pc, #136]	@ (8014a0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 8014982:	f000 fa94 	bl	8014eae <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014986:	4603      	mov	r3, r0
			&& register_map.getType(address)
 8014988:	2b03      	cmp	r3, #3
 801498a:	d00a      	beq.n	80149a2 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x6a>
 801498c:	89fb      	ldrh	r3, [r7, #14]
 801498e:	b2db      	uxtb	r3, r3
 8014990:	4619      	mov	r1, r3
 8014992:	481e      	ldr	r0, [pc, #120]	@ (8014a0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 8014994:	f000 fa8b 	bl	8014eae <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014998:	4603      	mov	r3, r0
 801499a:	2b04      	cmp	r3, #4
 801499c:	d001      	beq.n	80149a2 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x6a>
 801499e:	2301      	movs	r3, #1
 80149a0:	e000      	b.n	80149a4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x6c>
 80149a2:	2300      	movs	r3, #0
	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_READABLE
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d005      	beq.n	80149b4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x7c>
					!= REGISTER_ENTRY_TYPE_READWRITEABLE) {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 80149a8:	2206      	movs	r2, #6
 80149aa:	6839      	ldr	r1, [r7, #0]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f000 f8af 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80149b2:	e027      	b.n	8014a04 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xcc>
	}

	// Read the entry into the outgoing message
	uint16_t len = register_map.read(address, outgoing_msg.data_ptr);
 80149b4:	89fb      	ldrh	r3, [r7, #14]
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	4a15      	ldr	r2, [pc, #84]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149ba:	6892      	ldr	r2, [r2, #8]
 80149bc:	4619      	mov	r1, r3
 80149be:	4813      	ldr	r0, [pc, #76]	@ (8014a0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd4>)
 80149c0:	f000 fae0 	bl	8014f84 <_ZN22core_utils_RegisterMapILi255EE4readEhPh>
 80149c4:	4603      	mov	r3, r0
 80149c6:	81bb      	strh	r3, [r7, #12]

	if (len > 0) {
 80149c8:	89bb      	ldrh	r3, [r7, #12]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d01a      	beq.n	8014a04 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xcc>
		// Construct the outgoing message
		outgoing_msg.address_1 = msg->address_1;
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	785a      	ldrb	r2, [r3, #1]
 80149d2:	4b0f      	ldr	r3, [pc, #60]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149d4:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	789a      	ldrb	r2, [r3, #2]
 80149da:	4b0d      	ldr	r3, [pc, #52]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149dc:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	78da      	ldrb	r2, [r3, #3]
 80149e2:	4b0b      	ldr	r3, [pc, #44]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149e4:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 80149e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149e8:	2201      	movs	r2, #1
 80149ea:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 80149ec:	4b08      	ldr	r3, [pc, #32]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149ee:	2203      	movs	r2, #3
 80149f0:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = len;
 80149f2:	4a07      	ldr	r2, [pc, #28]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149f4:	89bb      	ldrh	r3, [r7, #12]
 80149f6:	8193      	strh	r3, [r2, #12]

		this->uart_interface.send(&outgoing_msg);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	3318      	adds	r3, #24
 80149fc:	4904      	ldr	r1, [pc, #16]	@ (8014a10 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xd8>)
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fe f9d7 	bl	8012db2 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	2401ef90 	.word	0x2401ef90
 8014a10:	2401f398 	.word	0x2401f398

08014a14 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_func_callback(
		core_comm_SerialMessage *msg) {
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	6039      	str	r1, [r7, #0]

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	789a      	ldrb	r2, [r3, #2]
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	78db      	ldrb	r3, [r3, #3]
 8014a26:	4619      	mov	r1, r3
 8014a28:	4610      	mov	r0, r2
 8014a2a:	f00c ff6b 	bl	8021904 <_Z15uint8_to_uint16hh>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	81fb      	strh	r3, [r7, #14]

	if (!register_map.hasEntry(address)) {
 8014a32:	89fb      	ldrh	r3, [r7, #14]
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	4619      	mov	r1, r3
 8014a38:	4833      	ldr	r0, [pc, #204]	@ (8014b08 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014a3a:	f000 fa21 	bl	8014e80 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	f083 0301 	eor.w	r3, r3, #1
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d005      	beq.n	8014a56 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x42>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8014a4a:	2202      	movs	r2, #2
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 f85e 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014a54:	e054      	b.n	8014b00 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
	}

	if (register_map.getInputSize(address) != msg->len) {
 8014a56:	89fb      	ldrh	r3, [r7, #14]
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	482a      	ldr	r0, [pc, #168]	@ (8014b08 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014a5e:	f000 fa4f 	bl	8014f00 <_ZN22core_utils_RegisterMapILi255EE12getInputSizeEh>
 8014a62:	4603      	mov	r3, r0
 8014a64:	461a      	mov	r2, r3
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	899b      	ldrh	r3, [r3, #12]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	bf14      	ite	ne
 8014a6e:	2301      	movne	r3, #1
 8014a70:	2300      	moveq	r3, #0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d005      	beq.n	8014a84 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 8014a78:	2205      	movs	r2, #5
 8014a7a:	6839      	ldr	r1, [r7, #0]
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 f847 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014a82:	e03d      	b.n	8014b00 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
	}

	if (register_map.getType(address) != REGISTER_ENTRY_TYPE_EXECUTABLE) {
 8014a84:	89fb      	ldrh	r3, [r7, #14]
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	4619      	mov	r1, r3
 8014a8a:	481f      	ldr	r0, [pc, #124]	@ (8014b08 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014a8c:	f000 fa0f 	bl	8014eae <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>
 8014a90:	4603      	mov	r3, r0
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	bf14      	ite	ne
 8014a96:	2301      	movne	r3, #1
 8014a98:	2300      	moveq	r3, #0
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d005      	beq.n	8014aac <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x98>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8014aa0:	2206      	movs	r2, #6
 8014aa2:	6839      	ldr	r1, [r7, #0]
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f000 f833 	bl	8014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014aaa:	e029      	b.n	8014b00 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
	}

	// Execute the function and store the data
	uint8_t ret_size = register_map.execute(address, msg->data_ptr,
 8014aac:	89fb      	ldrh	r3, [r7, #14]
 8014aae:	b2d9      	uxtb	r1, r3
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	689a      	ldr	r2, [r3, #8]
 8014ab4:	4b15      	ldr	r3, [pc, #84]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014ab6:	689b      	ldr	r3, [r3, #8]
 8014ab8:	4813      	ldr	r0, [pc, #76]	@ (8014b08 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf4>)
 8014aba:	f000 fa8d 	bl	8014fd8 <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_>
 8014abe:	4603      	mov	r3, r0
			outgoing_msg.data_ptr);
 8014ac0:	737b      	strb	r3, [r7, #13]

	// Send back a message if the function returns something
	if (ret_size > 0) {
 8014ac2:	7b7b      	ldrb	r3, [r7, #13]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d01b      	beq.n	8014b00 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xec>
		outgoing_msg.address_1 = msg->address_1;
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	785a      	ldrb	r2, [r3, #1]
 8014acc:	4b0f      	ldr	r3, [pc, #60]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014ace:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	789a      	ldrb	r2, [r3, #2]
 8014ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014ad6:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	78da      	ldrb	r2, [r3, #3]
 8014adc:	4b0b      	ldr	r3, [pc, #44]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014ade:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 8014ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014ae6:	4b09      	ldr	r3, [pc, #36]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014ae8:	2203      	movs	r2, #3
 8014aea:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = ret_size;
 8014aec:	7b7b      	ldrb	r3, [r7, #13]
 8014aee:	b29a      	uxth	r2, r3
 8014af0:	4b06      	ldr	r3, [pc, #24]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014af2:	819a      	strh	r2, [r3, #12]
		this->uart_interface.send(&outgoing_msg);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	3318      	adds	r3, #24
 8014af8:	4904      	ldr	r1, [pc, #16]	@ (8014b0c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xf8>)
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fe f959 	bl	8012db2 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	2401ef90 	.word	0x2401ef90
 8014b0c:	2401f398 	.word	0x2401f398

08014b10 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uartResponseError(
		core_comm_SerialMessage *incoming_message, uint8_t error_code) {
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b084      	sub	sp, #16
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	4613      	mov	r3, r2
 8014b1c:	71fb      	strb	r3, [r7, #7]
	outgoing_msg.address_1 = incoming_message->address_1;
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	785a      	ldrb	r2, [r3, #1]
 8014b22:	4b10      	ldr	r3, [pc, #64]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b24:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = incoming_message->address_2;
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	789a      	ldrb	r2, [r3, #2]
 8014b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b2c:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = incoming_message->address_3;
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	78da      	ldrb	r2, [r3, #3]
 8014b32:	4b0c      	ldr	r3, [pc, #48]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b34:	70da      	strb	r2, [r3, #3]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014b36:	4b0b      	ldr	r3, [pc, #44]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b38:	2203      	movs	r2, #3
 8014b3a:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 0;
 8014b3c:	4b09      	ldr	r3, [pc, #36]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b3e:	2200      	movs	r2, #0
 8014b40:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 1;
 8014b42:	4b08      	ldr	r3, [pc, #32]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b44:	2201      	movs	r2, #1
 8014b46:	819a      	strh	r2, [r3, #12]
	outgoing_msg.data_ptr[0] = error_code;
 8014b48:	4b06      	ldr	r3, [pc, #24]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	79fa      	ldrb	r2, [r7, #7]
 8014b4e:	701a      	strb	r2, [r3, #0]
	this->uart_interface.send(&outgoing_msg);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	3318      	adds	r3, #24
 8014b54:	4903      	ldr	r1, [pc, #12]	@ (8014b64 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fe f92b 	bl	8012db2 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 8014b5c:	bf00      	nop
 8014b5e:	3710      	adds	r7, #16
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	2401f398 	.word	0x2401f398

08014b68 <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_rxTrajectory_callback(uint16_t len) {
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	460b      	mov	r3, r1
 8014b72:	807b      	strh	r3, [r7, #2]
	// We have received a new trajectory by the CM4
	if (this->_callbacks.new_trajectory.registered) {
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014b7a:	f893 3908 	ldrb.w	r3, [r3, #2312]	@ 0x908
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d008      	beq.n	8014b94 <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt+0x2c>
		this->_callbacks.new_trajectory.call(len);
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	f641 1304 	movw	r3, #6404	@ 0x1904
 8014b88:	4413      	add	r3, r2
 8014b8a:	887a      	ldrh	r2, [r7, #2]
 8014b8c:	4611      	mov	r1, r2
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7fd feee 	bl	8012970 <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->spi_interface.provideSampleData();
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014b9a:	4413      	add	r3, r2
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7fd fdfb 	bl	8012798 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8014ba2:	bf00      	nop
 8014ba4:	3708      	adds	r7, #8
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}

08014baa <_ZN26TWIPR_CommunicationManager32sampleBufferDMATransfer_callbackEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::sampleBufferDMATransfer_callback() {
 8014baa:	b580      	push	{r7, lr}
 8014bac:	b082      	sub	sp, #8
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
	this->spi_interface.stopTransmission();
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014bb8:	4413      	add	r3, r2
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fd fe60 	bl	8012880 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>
	this->spi_interface.provideSampleData();
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014bc6:	4413      	add	r3, r2
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fd fde5 	bl	8012798 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
	this->config.notification_gpio_tx.toggle();
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3308      	adds	r3, #8
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f00c ff6e 	bl	8021ab4 <_ZN15core_utils_GPIO6toggleEv>
}
 8014bd8:	bf00      	nop
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <_ZN26TWIPR_CommunicationManager23_spi_txSamples_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_txSamples_callback(uint16_t len) {
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	460b      	mov	r3, r1
 8014bea:	807b      	strh	r3, [r7, #2]
//	this->config.notification_gpio_tx.write(0);
}
 8014bec:	bf00      	nop
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <_ZN26TWIPR_CommunicationManager17receiveTrajectoryEv>:

/* ====================================================================== */
void TWIPR_CommunicationManager::receiveTrajectory() {
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
	this->spi_interface.stopTransmission();
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014c06:	4413      	add	r3, r2
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7fd fe39 	bl	8012880 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>
	this->spi_interface.receiveTrajectory();
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014c14:	4413      	add	r3, r2
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fd fdae 	bl	8012778 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEv>
}
 8014c1c:	bf00      	nop
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <_ZN26TWIPR_CommunicationManager17provideSampleDataEP22twipr_logging_sample_t>:

/* ====================================================================== */
void TWIPR_CommunicationManager::provideSampleData(
		twipr_logging_sample_t *buffer) {
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	6039      	str	r1, [r7, #0]
	HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM, (uint32_t) buffer,
 8014c2e:	6839      	ldr	r1, [r7, #0]
			(uint32_t) &this->_sample_buffer_tx,
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	f641 1324 	movw	r3, #6436	@ 0x1924
 8014c36:	4413      	add	r3, r2
	HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM, (uint32_t) buffer,
 8014c38:	461a      	mov	r2, r3
 8014c3a:	f44f 63b9 	mov.w	r3, #1480	@ 0x5c8
 8014c3e:	4803      	ldr	r0, [pc, #12]	@ (8014c4c <_ZN26TWIPR_CommunicationManager17provideSampleDataEP22twipr_logging_sample_t+0x28>)
 8014c40:	f7ed fe5c 	bl	80028fc <HAL_DMA_Start_IT>
			TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE * sizeof(twipr_logging_sample_t));
}
 8014c44:	bf00      	nop
 8014c46:	3708      	adds	r7, #8
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	24000af0 	.word	0x24000af0

08014c50 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef>:

/* ======================================================================*/
void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma) {
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
	active_manager->sampleBufferDMATransfer_callback();
 8014c58:	4b04      	ldr	r3, [pc, #16]	@ (8014c6c <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef+0x1c>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7ff ffa4 	bl	8014baa <_ZN26TWIPR_CommunicationManager32sampleBufferDMATransfer_callbackEv>
}
 8014c62:	bf00      	nop
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	2401f3a8 	.word	0x2401f3a8

08014c70 <_ZN26TWIPR_CommunicationManager11sendMessageER15BILBO_Message_t>:

/* ======================================================================*/
void TWIPR_CommunicationManager::sendMessage(BILBO_Message_t &message) {
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b086      	sub	sp, #24
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
 8014c78:	6039      	str	r1, [r7, #0]
	core_comm_SerialMessage serial_msg = message.encode();
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f107 0208 	add.w	r2, r7, #8
 8014c84:	6839      	ldr	r1, [r7, #0]
 8014c86:	4610      	mov	r0, r2
 8014c88:	4798      	blx	r3
	// some uart sending stuff
	this->uart_interface.send(&serial_msg);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	3318      	adds	r3, #24
 8014c8e:	f107 0208 	add.w	r2, r7, #8
 8014c92:	4611      	mov	r1, r2
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7fe f88c 	bl	8012db2 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 8014c9a:	bf00      	nop
 8014c9c:	3718      	adds	r7, #24
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
	...

08014ca4 <_ZN11RegisterMapC1Ev>:
class RegisterMap {
 8014ca4:	b480      	push	{r7}
 8014ca6:	b083      	sub	sp, #12
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	4a04      	ldr	r2, [pc, #16]	@ (8014cc0 <_ZN11RegisterMapC1Ev+0x1c>)
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	601a      	str	r2, [r3, #0]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	370c      	adds	r7, #12
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr
 8014cc0:	08026214 	.word	0x08026214

08014cc4 <_ZN22core_utils_RegisterMapILi255EEC1Eh>:

/* ============================================================ */
template<int size>
class core_utils_RegisterMap: public RegisterMap {
public:
	core_utils_RegisterMap<size>(uint8_t address) {
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	460b      	mov	r3, r1
 8014cce:	70fb      	strb	r3, [r7, #3]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7ff ffe6 	bl	8014ca4 <_ZN11RegisterMapC1Ev>
 8014cd8:	4a09      	ldr	r2, [pc, #36]	@ (8014d00 <_ZN22core_utils_RegisterMapILi255EEC1Eh+0x3c>)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	601a      	str	r2, [r3, #0]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	330c      	adds	r3, #12
 8014ce2:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8014ce6:	2100      	movs	r1, #0
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f00f f8ee 	bl	8023eca <memset>
		this->address = address;
 8014cee:	78fb      	ldrb	r3, [r7, #3]
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	809a      	strh	r2, [r3, #4]
	}
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	080261d4 	.word	0x080261d4

08014d04 <_ZN13BILBO_MessageI20debug_message_data_tL21serial_message_type_t5ELh221EEC1Ev>:

template<typename data_type_t, serial_message_type_t msg_type, uint8_t message_id>
class BILBO_Message: public BILBO_Message_t {
public:

	BILBO_Message() {
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7ff fb88 	bl	8014424 <_ZN15BILBO_Message_tC1Ev>
 8014d14:	4a0b      	ldr	r2, [pc, #44]	@ (8014d44 <_ZN13BILBO_MessageI20debug_message_data_tL21serial_message_type_t5ELh221EEC1Ev+0x40>)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	601a      	str	r2, [r3, #0]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2281      	movs	r2, #129	@ 0x81
 8014d1e:	809a      	strh	r2, [r3, #4]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2205      	movs	r2, #5
 8014d24:	719a      	strb	r2, [r3, #6]
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	22dd      	movs	r2, #221	@ 0xdd
 8014d2a:	71da      	strb	r2, [r3, #7]
		this->data = &this->data_union.data;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f103 0208 	add.w	r2, r3, #8
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	}
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3708      	adds	r7, #8
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	080261fc 	.word	0x080261fc

08014d48 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8014d48:	b5b0      	push	{r4, r5, r7, lr}
 8014d4a:	b08a      	sub	sp, #40	@ 0x28
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	4639      	mov	r1, r7
 8014d54:	e881 000c 	stmia.w	r1, {r2, r3}
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fd fbfe 	bl	801255c <_ZN8CallbackC1Ev>
 8014d60:	4a12      	ldr	r2, [pc, #72]	@ (8014dac <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E+0x64>)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	711a      	strb	r2, [r3, #4]
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	3308      	adds	r3, #8
 8014d70:	2100      	movs	r1, #0
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fe fbe2 	bl	801353c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8014d78:	f107 0010 	add.w	r0, r7, #16
 8014d7c:	463b      	mov	r3, r7
 8014d7e:	cb0c      	ldmia	r3, {r2, r3}
 8014d80:	68b9      	ldr	r1, [r7, #8]
 8014d82:	f000 f952 	bl	801502a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	f103 0408 	add.w	r4, r3, #8
 8014d8c:	f107 0510 	add.w	r5, r7, #16
 8014d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d98:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2201      	movs	r2, #1
 8014da0:	711a      	strb	r2, [r3, #4]
	}
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	4618      	mov	r0, r3
 8014da6:	3728      	adds	r7, #40	@ 0x28
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bdb0      	pop	{r4, r5, r7, pc}
 8014dac:	080261b4 	.word	0x080261b4

08014db0 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 8014db0:	b5b0      	push	{r4, r5, r7, lr}
 8014db2:	b08a      	sub	sp, #40	@ 0x28
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	60b9      	str	r1, [r7, #8]
 8014dba:	4639      	mov	r1, r7
 8014dbc:	e881 000c 	stmia.w	r1, {r2, r3}
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fd fbca 	bl	801255c <_ZN8CallbackC1Ev>
 8014dc8:	4a12      	ldr	r2, [pc, #72]	@ (8014e14 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE+0x64>)
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	711a      	strb	r2, [r3, #4]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	3308      	adds	r3, #8
 8014dd8:	2100      	movs	r1, #0
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7fd fd5d 	bl	801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 8014de0:	f107 0010 	add.w	r0, r7, #16
 8014de4:	463b      	mov	r3, r7
 8014de6:	cb0c      	ldmia	r3, {r2, r3}
 8014de8:	68b9      	ldr	r1, [r7, #8]
 8014dea:	f000 f931 	bl	8015050 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	f103 0408 	add.w	r4, r3, #8
 8014df4:	f107 0510 	add.w	r5, r7, #16
 8014df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e00:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2201      	movs	r2, #1
 8014e08:	711a      	strb	r2, [r3, #4]
	}
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3728      	adds	r7, #40	@ 0x28
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bdb0      	pop	{r4, r5, r7, pc}
 8014e14:	08026138 	.word	0x08026138

08014e18 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8014e18:	b5b0      	push	{r4, r5, r7, lr}
 8014e1a:	b08a      	sub	sp, #40	@ 0x28
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	60b9      	str	r1, [r7, #8]
 8014e22:	4639      	mov	r1, r7
 8014e24:	e881 000c 	stmia.w	r1, {r2, r3}
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fd fb96 	bl	801255c <_ZN8CallbackC1Ev>
 8014e30:	4a12      	ldr	r2, [pc, #72]	@ (8014e7c <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE+0x64>)
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	601a      	str	r2, [r3, #0]
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	711a      	strb	r2, [r3, #4]
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	3308      	adds	r3, #8
 8014e40:	2100      	movs	r1, #0
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fd fddb 	bl	80129fe <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8014e48:	f107 0010 	add.w	r0, r7, #16
 8014e4c:	463b      	mov	r3, r7
 8014e4e:	cb0c      	ldmia	r3, {r2, r3}
 8014e50:	68b9      	ldr	r1, [r7, #8]
 8014e52:	f000 f910 	bl	8015076 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	f103 0408 	add.w	r4, r3, #8
 8014e5c:	f107 0510 	add.w	r5, r7, #16
 8014e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e68:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	2201      	movs	r2, #1
 8014e70:	711a      	strb	r2, [r3, #4]
	}
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	4618      	mov	r0, r3
 8014e76:	3728      	adds	r7, #40	@ 0x28
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8014e7c:	08026128 	.word	0x08026128

08014e80 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh>:
	void addEntry(uint8_t address, RegisterEntry *entry) {
//		assert(this->entries[address] == nullptr && "Entry at this address is not NULL");
		this->entries[address] = entry;
	}
	/* -------------------------------------------------- */
	bool hasEntry(uint8_t address) {
 8014e80:	b480      	push	{r7}
 8014e82:	b083      	sub	sp, #12
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	460b      	mov	r3, r1
 8014e8a:	70fb      	strb	r3, [r7, #3]
		if (this->entries[address] != NULL) {
 8014e8c:	78fb      	ldrb	r3, [r7, #3]
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	3302      	adds	r3, #2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d001      	beq.n	8014ea0 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh+0x20>
			return true;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e000      	b.n	8014ea2 <_ZN22core_utils_RegisterMapILi255EE8hasEntryEh+0x22>
		} else {
			return false;
 8014ea0:	2300      	movs	r3, #0
		}
	}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	370c      	adds	r7, #12
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr

08014eae <_ZN22core_utils_RegisterMapILi255EE7getTypeEh>:
	uint16_t getOutputSize(uint8_t address) {
		return this->entries[address]->getOutputSize();
	}
	/* -------------------------------------------------- */

	register_entry_type_t getType(uint8_t address) {
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b082      	sub	sp, #8
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
 8014eb6:	460b      	mov	r3, r1
 8014eb8:	70fb      	strb	r3, [r7, #3]
		if (this->hasEntry(address)) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	3304      	adds	r3, #4
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	78fa      	ldrb	r2, [r7, #3]
 8014ec4:	4611      	mov	r1, r2
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	4798      	blx	r3
 8014eca:	4603      	mov	r3, r0
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d012      	beq.n	8014ef6 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh+0x48>
			return this->entries[address]->getType();
 8014ed0:	78fb      	ldrb	r3, [r7, #3]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	3302      	adds	r3, #2
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	4413      	add	r3, r2
 8014eda:	6859      	ldr	r1, [r3, #4]
 8014edc:	78fb      	ldrb	r3, [r7, #3]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	3302      	adds	r3, #2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4413      	add	r3, r2
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	3318      	adds	r3, #24
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	4608      	mov	r0, r1
 8014ef0:	4798      	blx	r3
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	e000      	b.n	8014ef8 <_ZN22core_utils_RegisterMapILi255EE7getTypeEh+0x4a>
		}
		return REGISTER_ENTRY_TYPE_NONE;
 8014ef6:	2300      	movs	r3, #0
	}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <_ZN22core_utils_RegisterMapILi255EE12getInputSizeEh>:
	uint16_t getInputSize(uint8_t address) {
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b082      	sub	sp, #8
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	460b      	mov	r3, r1
 8014f0a:	70fb      	strb	r3, [r7, #3]
		return this->entries[address]->getInputSize();
 8014f0c:	78fb      	ldrb	r3, [r7, #3]
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	3302      	adds	r3, #2
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	4413      	add	r3, r2
 8014f16:	6859      	ldr	r1, [r3, #4]
 8014f18:	78fb      	ldrb	r3, [r7, #3]
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	3302      	adds	r3, #2
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	4413      	add	r3, r2
 8014f22:	685b      	ldr	r3, [r3, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	4608      	mov	r0, r1
 8014f2a:	4798      	blx	r3
 8014f2c:	4603      	mov	r3, r0
	}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <_ZN22core_utils_RegisterMapILi255EE5writeEhPh>:
	void write(uint8_t address, uint8_t *input) {
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b084      	sub	sp, #16
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	60f8      	str	r0, [r7, #12]
 8014f3e:	460b      	mov	r3, r1
 8014f40:	607a      	str	r2, [r7, #4]
 8014f42:	72fb      	strb	r3, [r7, #11]
		if (this->hasEntry(address)) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	3304      	adds	r3, #4
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	7afa      	ldrb	r2, [r7, #11]
 8014f4e:	4611      	mov	r1, r2
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	4798      	blx	r3
 8014f54:	4603      	mov	r3, r0
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d010      	beq.n	8014f7c <_ZN22core_utils_RegisterMapILi255EE5writeEhPh+0x46>
			this->entries[address]->write(input);
 8014f5a:	7afb      	ldrb	r3, [r7, #11]
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	3302      	adds	r3, #2
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	4413      	add	r3, r2
 8014f64:	6858      	ldr	r0, [r3, #4]
 8014f66:	7afb      	ldrb	r3, [r7, #11]
 8014f68:	68fa      	ldr	r2, [r7, #12]
 8014f6a:	3302      	adds	r3, #2
 8014f6c:	009b      	lsls	r3, r3, #2
 8014f6e:	4413      	add	r3, r2
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	3310      	adds	r3, #16
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	6879      	ldr	r1, [r7, #4]
 8014f7a:	4798      	blx	r3
	}
 8014f7c:	bf00      	nop
 8014f7e:	3710      	adds	r7, #16
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}

08014f84 <_ZN22core_utils_RegisterMapILi255EE4readEhPh>:
	uint16_t read(uint8_t address, uint8_t *output) {
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	60f8      	str	r0, [r7, #12]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	607a      	str	r2, [r7, #4]
 8014f90:	72fb      	strb	r3, [r7, #11]
		if (this->hasEntry(address)) {
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	3304      	adds	r3, #4
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	7afa      	ldrb	r2, [r7, #11]
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	68f8      	ldr	r0, [r7, #12]
 8014fa0:	4798      	blx	r3
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d012      	beq.n	8014fce <_ZN22core_utils_RegisterMapILi255EE4readEhPh+0x4a>
			return this->entries[address]->read(output);
 8014fa8:	7afb      	ldrb	r3, [r7, #11]
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	3302      	adds	r3, #2
 8014fae:	009b      	lsls	r3, r3, #2
 8014fb0:	4413      	add	r3, r2
 8014fb2:	6858      	ldr	r0, [r3, #4]
 8014fb4:	7afb      	ldrb	r3, [r7, #11]
 8014fb6:	68fa      	ldr	r2, [r7, #12]
 8014fb8:	3302      	adds	r3, #2
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	4413      	add	r3, r2
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	3314      	adds	r3, #20
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	6879      	ldr	r1, [r7, #4]
 8014fc8:	4798      	blx	r3
 8014fca:	4603      	mov	r3, r0
 8014fcc:	e000      	b.n	8014fd0 <_ZN22core_utils_RegisterMapILi255EE4readEhPh+0x4c>
		return 0;
 8014fce:	2300      	movs	r3, #0
	}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_>:
	uint16_t execute(uint8_t address, uint8_t *input, uint8_t *output) {
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	607a      	str	r2, [r7, #4]
 8014fe2:	603b      	str	r3, [r7, #0]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	72fb      	strb	r3, [r7, #11]
		if (this->entries[address] != NULL) {
 8014fe8:	7afb      	ldrb	r3, [r7, #11]
 8014fea:	68fa      	ldr	r2, [r7, #12]
 8014fec:	3302      	adds	r3, #2
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	4413      	add	r3, r2
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d013      	beq.n	8015020 <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_+0x48>
			return this->entries[address]->execute(input, output);
 8014ff8:	7afb      	ldrb	r3, [r7, #11]
 8014ffa:	68fa      	ldr	r2, [r7, #12]
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	4413      	add	r3, r2
 8015002:	6858      	ldr	r0, [r3, #4]
 8015004:	7afb      	ldrb	r3, [r7, #11]
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	3302      	adds	r3, #2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	4413      	add	r3, r2
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	330c      	adds	r3, #12
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	6879      	ldr	r1, [r7, #4]
 801501a:	4798      	blx	r3
 801501c:	4603      	mov	r3, r0
 801501e:	e000      	b.n	8015022 <_ZN22core_utils_RegisterMapILi255EE7executeEhPhS1_+0x4a>
		return 0;
 8015020:	2300      	movs	r3, #0
	}
 8015022:	4618      	mov	r0, r3
 8015024:	3710      	adds	r7, #16
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801502a:	b580      	push	{r7, lr}
 801502c:	b084      	sub	sp, #16
 801502e:	af00      	add	r7, sp, #0
 8015030:	60f8      	str	r0, [r7, #12]
 8015032:	60b9      	str	r1, [r7, #8]
 8015034:	4639      	mov	r1, r7
 8015036:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801503a:	463b      	mov	r3, r7
 801503c:	cb0c      	ldmia	r3, {r2, r3}
 801503e:	68b9      	ldr	r1, [r7, #8]
 8015040:	68f8      	ldr	r0, [r7, #12]
 8015042:	f000 f82b 	bl	801509c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>
    }
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	4618      	mov	r0, r3
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	4639      	mov	r1, r7
 801505c:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8015060:	463b      	mov	r3, r7
 8015062:	cb0c      	ldmia	r3, {r2, r3}
 8015064:	68b9      	ldr	r1, [r7, #8]
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f000 f836 	bl	80150d8 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>
    }
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8015076:	b580      	push	{r7, lr}
 8015078:	b084      	sub	sp, #16
 801507a:	af00      	add	r7, sp, #0
 801507c:	60f8      	str	r0, [r7, #12]
 801507e:	60b9      	str	r1, [r7, #8]
 8015080:	4639      	mov	r1, r7
 8015082:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8015086:	463b      	mov	r3, r7
 8015088:	cb0c      	ldmia	r3, {r2, r3}
 801508a:	68b9      	ldr	r1, [r7, #8]
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f000 f841 	bl	8015114 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>
    }
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	4618      	mov	r0, r3
 8015096:	3710      	adds	r7, #16
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801509c:	b480      	push	{r7}
 801509e:	b085      	sub	sp, #20
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	4639      	mov	r1, r7
 80150a8:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	68ba      	ldr	r2, [r7, #8]
 80150b0:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	3304      	adds	r3, #4
 80150b6:	461a      	mov	r2, r3
 80150b8:	463b      	mov	r3, r7
 80150ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80150be:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	4a03      	ldr	r2, [pc, #12]	@ (80150d4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E+0x38>)
 80150c6:	615a      	str	r2, [r3, #20]
    }
 80150c8:	bf00      	nop
 80150ca:	3714      	adds	r7, #20
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr
 80150d4:	08015151 	.word	0x08015151

080150d8 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 80150d8:	b480      	push	{r7}
 80150da:	b085      	sub	sp, #20
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	4639      	mov	r1, r7
 80150e4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	68ba      	ldr	r2, [r7, #8]
 80150ec:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	3304      	adds	r3, #4
 80150f2:	461a      	mov	r2, r3
 80150f4:	463b      	mov	r3, r7
 80150f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80150fa:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	4a03      	ldr	r2, [pc, #12]	@ (8015110 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE+0x38>)
 8015102:	615a      	str	r2, [r3, #20]
    }
 8015104:	bf00      	nop
 8015106:	3714      	adds	r7, #20
 8015108:	46bd      	mov	sp, r7
 801510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510e:	4770      	bx	lr
 8015110:	080151a5 	.word	0x080151a5

08015114 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 8015114:	b480      	push	{r7}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	4639      	mov	r1, r7
 8015120:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	68ba      	ldr	r2, [r7, #8]
 8015128:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	3304      	adds	r3, #4
 801512e:	461a      	mov	r2, r3
 8015130:	463b      	mov	r3, r7
 8015132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015136:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	4a03      	ldr	r2, [pc, #12]	@ (801514c <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE+0x38>)
 801513e:	615a      	str	r2, [r3, #20]
    }
 8015140:	bf00      	nop
 8015142:	3714      	adds	r7, #20
 8015144:	46bd      	mov	sp, r7
 8015146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514a:	4770      	bx	lr
 801514c:	080151f7 	.word	0x080151f7

08015150 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	105b      	asrs	r3, r3, #1
 801516a:	461a      	mov	r2, r3
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	1898      	adds	r0, r3, r2
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	f003 0301 	and.w	r3, r3, #1
 8015178:	2b00      	cmp	r3, #0
 801517a:	d00b      	beq.n	8015194 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x44>
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	105b      	asrs	r3, r3, #1
 8015182:	461a      	mov	r2, r3
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	4413      	add	r3, r2
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	693a      	ldr	r2, [r7, #16]
 801518c:	6812      	ldr	r2, [r2, #0]
 801518e:	4413      	add	r3, r2
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	e001      	b.n	8015198 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x48>
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	6879      	ldr	r1, [r7, #4]
 801519a:	4798      	blx	r3
 801519c:	bf00      	nop
    }
 801519e:	3718      	adds	r7, #24
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	105b      	asrs	r3, r3, #1
 80151bc:	461a      	mov	r2, r3
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	1899      	adds	r1, r3, r2
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	f003 0301 	and.w	r3, r3, #1
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d00b      	beq.n	80151e6 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x42>
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	105b      	asrs	r3, r3, #1
 80151d4:	461a      	mov	r2, r3
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	4413      	add	r3, r2
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	6812      	ldr	r2, [r2, #0]
 80151e0:	4413      	add	r3, r2
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	e001      	b.n	80151ea <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x46>
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	4608      	mov	r0, r1
 80151ec:	4798      	blx	r3
 80151ee:	bf00      	nop
    }
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b086      	sub	sp, #24
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	60f8      	str	r0, [r7, #12]
 80151fe:	60b9      	str	r1, [r7, #8]
 8015200:	4613      	mov	r3, r2
 8015202:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	105b      	asrs	r3, r3, #1
 8015212:	461a      	mov	r2, r3
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	1898      	adds	r0, r3, r2
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	f003 0301 	and.w	r3, r3, #1
 8015220:	2b00      	cmp	r3, #0
 8015222:	d00b      	beq.n	801523c <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x46>
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	685b      	ldr	r3, [r3, #4]
 8015228:	105b      	asrs	r3, r3, #1
 801522a:	461a      	mov	r2, r3
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	4413      	add	r3, r2
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	693a      	ldr	r2, [r7, #16]
 8015234:	6812      	ldr	r2, [r2, #0]
 8015236:	4413      	add	r3, r2
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	e001      	b.n	8015240 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x4a>
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	88fa      	ldrh	r2, [r7, #6]
 8015242:	4611      	mov	r1, r2
 8015244:	4798      	blx	r3
 8015246:	bf00      	nop
    }
 8015248:	3718      	adds	r7, #24
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
	...

08015250 <_Z41__static_initialization_and_destruction_0ii>:
	this->_debug_message.data->flag = 1;

	if (length > 0 && length < DEBUG_PRINT_BUFFER_SIZE) {
		this->sendMessage(this->_debug_message);
	}
}
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2b01      	cmp	r3, #1
 801525e:	d108      	bne.n	8015272 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015266:	4293      	cmp	r3, r2
 8015268:	d103      	bne.n	8015272 <_Z41__static_initialization_and_destruction_0ii+0x22>
core_utils_RegisterMap<255> register_map = core_utils_RegisterMap<255>(
 801526a:	2101      	movs	r1, #1
 801526c:	4803      	ldr	r0, [pc, #12]	@ (801527c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801526e:	f7ff fd29 	bl	8014cc4 <_ZN22core_utils_RegisterMapILi255EEC1Eh>
}
 8015272:	bf00      	nop
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}
 801527a:	bf00      	nop
 801527c:	2401ef90 	.word	0x2401ef90

08015280 <_ZN22core_utils_RegisterMapILi255EE8addEntryEhP13RegisterEntry>:
	void addEntry(uint8_t address, RegisterEntry *entry) {
 8015280:	b480      	push	{r7}
 8015282:	b085      	sub	sp, #20
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	460b      	mov	r3, r1
 801528a:	607a      	str	r2, [r7, #4]
 801528c:	72fb      	strb	r3, [r7, #11]
		this->entries[address] = entry;
 801528e:	7afb      	ldrb	r3, [r7, #11]
 8015290:	68fa      	ldr	r2, [r7, #12]
 8015292:	3302      	adds	r3, #2
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	4413      	add	r3, r2
 8015298:	687a      	ldr	r2, [r7, #4]
 801529a:	605a      	str	r2, [r3, #4]
	}
 801529c:	bf00      	nop
 801529e:	3714      	adds	r7, #20
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr

080152a8 <_ZN22core_utils_RegisterMapILi255EE13getOutputSizeEh>:
	uint16_t getOutputSize(uint8_t address) {
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	460b      	mov	r3, r1
 80152b2:	70fb      	strb	r3, [r7, #3]
		return this->entries[address]->getOutputSize();
 80152b4:	78fb      	ldrb	r3, [r7, #3]
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	3302      	adds	r3, #2
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	4413      	add	r3, r2
 80152be:	6859      	ldr	r1, [r3, #4]
 80152c0:	78fb      	ldrb	r3, [r7, #3]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	3302      	adds	r3, #2
 80152c6:	009b      	lsls	r3, r3, #2
 80152c8:	4413      	add	r3, r2
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	3304      	adds	r3, #4
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	4608      	mov	r0, r1
 80152d4:	4798      	blx	r3
 80152d6:	4603      	mov	r3, r0
	}
 80152d8:	4618      	mov	r0, r3
 80152da:	3708      	adds	r7, #8
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <_ZN13BILBO_MessageI20debug_message_data_tL21serial_message_type_t5ELh221EE6encodeEv>:

	core_comm_SerialMessage encode() override {
 80152e0:	b480      	push	{r7}
 80152e2:	b083      	sub	sp, #12
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
		core_comm_SerialMessage msg;

		msg.cmd = this->type;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	799a      	ldrb	r2, [r3, #6]
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	701a      	strb	r2, [r3, #0]
		msg.address_1 = 0x01;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2201      	movs	r2, #1
 80152f6:	705a      	strb	r2, [r3, #1]
		msg.address_2 = this->id >> 8;
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	79db      	ldrb	r3, [r3, #7]
 80152fc:	121b      	asrs	r3, r3, #8
 80152fe:	b2da      	uxtb	r2, r3
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	709a      	strb	r2, [r3, #2]
		msg.address_3 = this->id;
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	79da      	ldrb	r2, [r3, #7]
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	70da      	strb	r2, [r3, #3]
		msg.flag = 0x00;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2200      	movs	r2, #0
 8015310:	711a      	strb	r2, [r3, #4]
		msg.data_ptr = this->data_union.data_buffer;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	f103 0208 	add.w	r2, r3, #8
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	609a      	str	r2, [r3, #8]
		msg.len = this->len;
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	889a      	ldrh	r2, [r3, #4]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	819a      	strh	r2, [r3, #12]
		return msg;
 8015324:	bf00      	nop
	}
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	370c      	adds	r7, #12
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr

08015332 <_GLOBAL__sub_I_register_map>:
 8015332:	b580      	push	{r7, lr}
 8015334:	af00      	add	r7, sp, #0
 8015336:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801533a:	2001      	movs	r0, #1
 801533c:	f7ff ff88 	bl	8015250 <_Z41__static_initialization_and_destruction_0ii>
 8015340:	bd80      	pop	{r7, pc}

08015342 <_ZN32twipr_balancing_control_config_tC1Ev>:

typedef enum twipr_balancing_control_callback_id_t {
	TWIPR_BALANCING_CONTROL_CALLBACK_ERROR = 1,
} twipr_balancing_control_callback_id_t;

typedef struct twipr_balancing_control_config_t {
 8015342:	b580      	push	{r7, lr}
 8015344:	b082      	sub	sp, #8
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	2320      	movs	r3, #32
 8015350:	461a      	mov	r2, r3
 8015352:	2100      	movs	r1, #0
 8015354:	f00e fdb9 	bl	8023eca <memset>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f04f 0200 	mov.w	r2, #0
 801535e:	621a      	str	r2, [r3, #32]
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	4618      	mov	r0, r3
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}

0801536a <_ZN22TWIPR_BalancingControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include <twipr_balancing_control.h>

TWIPR_BalancingControl::TWIPR_BalancingControl() {
 801536a:	b580      	push	{r7, lr}
 801536c:	b082      	sub	sp, #8
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	3304      	adds	r3, #4
 8015376:	4618      	mov	r0, r3
 8015378:	f7ff ffe3 	bl	8015342 <_ZN32twipr_balancing_control_config_tC1Ev>
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2200      	movs	r2, #0
 8015380:	705a      	strb	r2, [r3, #1]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_NONE;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2200      	movs	r2, #0
 8015386:	701a      	strb	r2, [r3, #0]
}
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	4618      	mov	r0, r3
 801538c:	3708      	adds	r7, #8
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::init(twipr_balancing_control_config_t config) {
 8015392:	b084      	sub	sp, #16
 8015394:	b4b0      	push	{r4, r5, r7}
 8015396:	b083      	sub	sp, #12
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	f107 001c 	add.w	r0, r7, #28
 80153a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	1d1c      	adds	r4, r3, #4
 80153a8:	f107 051c 	add.w	r5, r7, #28
 80153ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153b4:	682b      	ldr	r3, [r5, #0]
 80153b6:	6023      	str	r3, [r4, #0]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	701a      	strb	r2, [r3, #0]
}
 80153be:	bf00      	nop
 80153c0:	370c      	adds	r7, #12
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bcb0      	pop	{r4, r5, r7}
 80153c6:	b004      	add	sp, #16
 80153c8:	4770      	bx	lr

080153ca <_ZN22TWIPR_BalancingControl5startEv>:

/* ========================================================================= */
void TWIPR_BalancingControl::start() {
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b082      	sub	sp, #8
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f993 3000 	ldrsb.w	r3, [r3]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d005      	beq.n	80153e8 <_ZN22TWIPR_BalancingControl5startEv+0x1e>
			|| this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR) {
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f993 3000 	ldrsb.w	r3, [r3]
 80153e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80153e6:	d103      	bne.n	80153f0 <_ZN22TWIPR_BalancingControl5startEv+0x26>
		twipr_error_handler(TWIPR_BALANCING_CONTROL_ERROR_INIT);
 80153e8:	f240 6002 	movw	r0, #1538	@ 0x602
 80153ec:	f002 f89c 	bl	8017528 <_Z19twipr_error_handlerm>
	}
	this->status = TWIPR_BALANCING_CONTROL_STATUS_RUNNING;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2202      	movs	r2, #2
 80153f4:	701a      	strb	r2, [r3, #0]
}
 80153f6:	bf00      	nop
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
	...

08015400 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::update(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8015400:	b084      	sub	sp, #16
 8015402:	b580      	push	{r7, lr}
 8015404:	b088      	sub	sp, #32
 8015406:	af04      	add	r7, sp, #16
 8015408:	60f8      	str	r0, [r7, #12]
 801540a:	f107 001c 	add.w	r0, r7, #28
 801540e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015412:	eeb0 7a40 	vmov.f32	s14, s0
 8015416:	eef0 7a60 	vmov.f32	s15, s1
 801541a:	ed87 7a01 	vstr	s14, [r7, #4]
 801541e:	edc7 7a02 	vstr	s15, [r7, #8]

	switch (this->status) {
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f993 3000 	ldrsb.w	r3, [r3]
 8015428:	3301      	adds	r3, #1
 801542a:	2b03      	cmp	r3, #3
 801542c:	d858      	bhi.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 801542e:	a201      	add	r2, pc, #4	@ (adr r2, 8015434 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x34>)
 8015430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015434:	08015469 	.word	0x08015469
 8015438:	08015445 	.word	0x08015445
 801543c:	08015457 	.word	0x08015457
 8015440:	0801547b 	.word	0x0801547b
	case TWIPR_BALANCING_CONTROL_STATUS_NONE: {
		output->u_1 = 0;
 8015444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015446:	f04f 0200 	mov.w	r2, #0
 801544a:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 801544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801544e:	f04f 0200 	mov.w	r2, #0
 8015452:	605a      	str	r2, [r3, #4]
		break;
 8015454:	e044      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_IDLE: {
		output->u_1 = 0;
 8015456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015458:	f04f 0200 	mov.w	r2, #0
 801545c:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 801545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015460:	f04f 0200 	mov.w	r2, #0
 8015464:	605a      	str	r2, [r3, #4]
		break;
 8015466:	e03b      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_ERROR: {
		output->u_1 = 0;
 8015468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546a:	f04f 0200 	mov.w	r2, #0
 801546e:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8015470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015472:	f04f 0200 	mov.w	r2, #0
 8015476:	605a      	str	r2, [r3, #4]
		break;
 8015478:	e032      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	785b      	ldrb	r3, [r3, #1]
 801547e:	2b02      	cmp	r3, #2
 8015480:	d016      	beq.n	80154b0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xb0>
 8015482:	2b02      	cmp	r3, #2
 8015484:	dc2c      	bgt.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8015486:	2b00      	cmp	r3, #0
 8015488:	d002      	beq.n	8015490 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x90>
 801548a:	2b01      	cmp	r3, #1
 801548c:	d009      	beq.n	80154a2 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xa2>
			this->_calculateOutput(state, input, output);
		}
		}
	}
	}
}
 801548e:	e027      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = 0;
 8015490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015492:	f04f 0200 	mov.w	r2, #0
 8015496:	601a      	str	r2, [r3, #0]
			output->u_2 = 0;
 8015498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549a:	f04f 0200 	mov.w	r2, #0
 801549e:	605a      	str	r2, [r3, #4]
			break;
 80154a0:	e01e      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = input.u_1;
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a6:	601a      	str	r2, [r3, #0]
			output->u_2 = input.u_2;
 80154a8:	68ba      	ldr	r2, [r7, #8]
 80154aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ac:	605a      	str	r2, [r3, #4]
			break;
 80154ae:	e017      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			this->_calculateOutput(state, input, output);
 80154b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80154b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80154b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ba:	9302      	str	r3, [sp, #8]
 80154bc:	466a      	mov	r2, sp
 80154be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80154c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80154c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80154ca:	f107 031c 	add.w	r3, r7, #28
 80154ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80154d0:	eeb0 0a47 	vmov.f32	s0, s14
 80154d4:	eef0 0a67 	vmov.f32	s1, s15
 80154d8:	68f8      	ldr	r0, [r7, #12]
 80154da:	f000 f809 	bl	80154f0 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
}
 80154de:	e7ff      	b.n	80154e0 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 80154e0:	bf00      	nop
 80154e2:	3710      	adds	r7, #16
 80154e4:	46bd      	mov	sp, r7
 80154e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80154ea:	b004      	add	sp, #16
 80154ec:	4770      	bx	lr
 80154ee:	bf00      	nop

080154f0 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::_calculateOutput(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 80154f0:	b084      	sub	sp, #16
 80154f2:	b480      	push	{r7}
 80154f4:	b085      	sub	sp, #20
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	60f8      	str	r0, [r7, #12]
 80154fa:	f107 001c 	add.w	r0, r7, #28
 80154fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015502:	eeb0 7a40 	vmov.f32	s14, s0
 8015506:	eef0 7a60 	vmov.f32	s15, s1
 801550a:	ed87 7a01 	vstr	s14, [r7, #4]
 801550e:	edc7 7a02 	vstr	s15, [r7, #8]
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	ed93 7a01 	vldr	s14, [r3, #4]
 8015518:	edd7 7a07 	vldr	s15, [r7, #28]
 801551c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	edd3 6a02 	vldr	s13, [r3, #8]
 8015526:	edd7 7a08 	vldr	s15, [r7, #32]
 801552a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801552e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[2] * state.theta_dot
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	edd3 6a03 	vldr	s13, [r3, #12]
 8015538:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801553c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015540:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[3] * state.psi_dot;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	edd3 6a04 	vldr	s13, [r3, #16]
 801554a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801554e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015552:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8015556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015558:	edc3 7a00 	vstr	s15, [r3]

	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	ed93 7a05 	vldr	s14, [r3, #20]
 8015562:	edd7 7a07 	vldr	s15, [r7, #28]
 8015566:	ee27 7a27 	vmul.f32	s14, s14, s15
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	edd3 6a06 	vldr	s13, [r3, #24]
 8015570:	edd7 7a08 	vldr	s15, [r7, #32]
 8015574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015578:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[6] * state.theta_dot
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	edd3 6a07 	vldr	s13, [r3, #28]
 8015582:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801558a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[7] * state.psi_dot;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	edd3 6a08 	vldr	s13, [r3, #32]
 8015594:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801559c:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 80155a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a2:	edc3 7a01 	vstr	s15, [r3, #4]

	output->u_1 = output->u_1 + input.u_1;
 80155a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a8:	ed93 7a00 	vldr	s14, [r3]
 80155ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80155b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b6:	edc3 7a00 	vstr	s15, [r3]
	output->u_2 = output->u_2 + input.u_2;
 80155ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80155c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80155c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ca:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80155ce:	bf00      	nop
 80155d0:	3714      	adds	r7, #20
 80155d2:	46bd      	mov	sp, r7
 80155d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d8:	b004      	add	sp, #16
 80155da:	4770      	bx	lr

080155dc <_ZN22TWIPR_BalancingControl4stopEv>:
void TWIPR_BalancingControl::reset() {
	this->stop();
	this->start();
}
/* ========================================================================= */
void TWIPR_BalancingControl::stop() {
 80155dc:	b480      	push	{r7}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2200      	movs	r2, #0
 80155e8:	705a      	strb	r2, [r3, #1]
//	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
}
 80155ea:	bf00      	nop
 80155ec:	370c      	adds	r7, #12
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr

080155f6 <_ZN22TWIPR_BalancingControl5set_KEPf>:
/* ========================================================================= */
void TWIPR_BalancingControl::set_K(float K[8]) {
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b082      	sub	sp, #8
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
 80155fe:	6039      	str	r1, [r7, #0]
	memcpy(this->config.K, K, sizeof(float) * 8);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	3304      	adds	r3, #4
 8015604:	2220      	movs	r2, #32
 8015606:	6839      	ldr	r1, [r7, #0]
 8015608:	4618      	mov	r0, r3
 801560a:	f00e fcee 	bl	8023fea <memcpy>
}
 801560e:	bf00      	nop
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::setMode(twipr_balancing_control_mode_t mode) {
 8015616:	b480      	push	{r7}
 8015618:	b083      	sub	sp, #12
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR){
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f993 3000 	ldrsb.w	r3, [r3]
 8015628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801562c:	d008      	beq.n	8015640 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2a>
		return;
	}

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE){
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f993 3000 	ldrsb.w	r3, [r3]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d005      	beq.n	8015644 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2e>
		return;
	}
	this->mode = mode;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	78fa      	ldrb	r2, [r7, #3]
 801563c:	705a      	strb	r2, [r3, #1]
 801563e:	e002      	b.n	8015646 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8015640:	bf00      	nop
 8015642:	e000      	b.n	8015646 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8015644:	bf00      	nop
}
 8015646:	370c      	adds	r7, #12
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr

08015650 <_ZN25twipr_control_callbacks_tC1Ev>:
	twipr_control_external_input_t external_input;
	twipr_control_data_t data;
} twipr_logging_control_t;


typedef struct twipr_control_callbacks_t {
 8015650:	b580      	push	{r7, lr}
 8015652:	b082      	sub	sp, #8
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	4618      	mov	r0, r3
 801565c:	f000 fe0f 	bl	801627e <_ZN28core_utils_CallbackContainerILi4EtEC1Ev>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	3384      	adds	r3, #132	@ 0x84
 8015664:	4618      	mov	r0, r3
 8015666:	f000 fe22 	bl	80162ae <_ZN28core_utils_CallbackContainerILi4EmEC1Ev>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015670:	4618      	mov	r0, r3
 8015672:	f000 fe34 	bl	80162de <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tEC1Ev>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	4618      	mov	r0, r3
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <_ZN20TWIPR_ControlManagerC1Ev>:
osSemaphoreId_t semaphore_external_input;

/* ======================================================== */
//core_utils_RegisterEntry<uint8_t, twipr_control_mode_t> regf_set_mode(&register_map, 0x05, manager, &TWIPR_ControlManager::setMode);
/* ======================================================== */
TWIPR_ControlManager::TWIPR_ControlManager() {
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2200      	movs	r2, #0
 801568c:	701a      	strb	r2, [r3, #0]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2200      	movs	r2, #0
 8015692:	705a      	strb	r2, [r3, #1]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	3314      	adds	r3, #20
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff ffd9 	bl	8015650 <_ZN25twipr_control_callbacks_tC1Ev>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7ff fe60 	bl	801536a <_ZN22TWIPR_BalancingControlC1Ev>
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80156b0:	4618      	mov	r0, r3
 80156b2:	f000 ffd2 	bl	801665a <_ZN18TWIPR_SpeedControlC1Ev>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2201      	movs	r2, #1
 80156ba:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c

}
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4618      	mov	r0, r3
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t>:

/* ======================================================== */
void TWIPR_ControlManager::init(twipr_control_init_config_t config) {
 80156c8:	b084      	sub	sp, #16
 80156ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156cc:	b0c7      	sub	sp, #284	@ 0x11c
 80156ce:	af12      	add	r7, sp, #72	@ 0x48
 80156d0:	6078      	str	r0, [r7, #4]
 80156d2:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 80156d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	manager = this;
 80156da:	4a3f      	ldr	r2, [pc, #252]	@ (80157d8 <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t+0x110>)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6013      	str	r3, [r2, #0]
	this->config = config;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	1d1c      	adds	r4, r3, #4
 80156e4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80156e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->_estimation = config.estimation;
 80156ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330

	// Initialize the balancing controller
	twipr_balancing_control_config_t balancing_control_config;
 80156f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80156fc:	2224      	movs	r2, #36	@ 0x24
 80156fe:	2100      	movs	r1, #0
 8015700:	4618      	mov	r0, r3
 8015702:	f00e fbe2 	bl	8023eca <memset>
	this->_balancing_control.init(balancing_control_config);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	f503 76d0 	add.w	r6, r3, #416	@ 0x1a0
 801570c:	466d      	mov	r5, sp
 801570e:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8015712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015716:	e894 0003 	ldmia.w	r4, {r0, r1}
 801571a:	e885 0003 	stmia.w	r5, {r0, r1}
 801571e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8015722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015724:	4630      	mov	r0, r6
 8015726:	f7ff fe34 	bl	8015392 <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>

	twipr_speed_control_forward_config_t speed_control_forward_config = { .Kp =
 801572a:	4b2c      	ldr	r3, [pc, #176]	@ (80157dc <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t+0x114>)
 801572c:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8015730:	461d      	mov	r5, r3
 8015732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801573a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801573e:	e884 0003 	stmia.w	r4, {r0, r1}
			0, .Ki = 0, .Kd = 0, .Ts = TWIPR_CONTROL_TS_MS / 1000.0 };

	twipr_speed_control_turn_config_t speed_control_turn_config = { .Kp = 0,
 8015742:	4b27      	ldr	r3, [pc, #156]	@ (80157e0 <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t+0x118>)
 8015744:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8015748:	461d      	mov	r5, r3
 801574a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801574c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801574e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015752:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015756:	e884 0003 	stmia.w	r4, {r0, r1}
			.Ki = 0, .Kd = 0, .Ts = TWIPR_CONTROL_TS_MS / 1000.0 };

	twipr_speed_control_config_t speed_control_config = { .forward_config =
			speed_control_forward_config, .turn_config =
			speed_control_turn_config };
 801575a:	f107 040c 	add.w	r4, r7, #12
 801575e:	f107 0584 	add.w	r5, r7, #132	@ 0x84
 8015762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801576a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801576e:	e884 0003 	stmia.w	r4, {r0, r1}
 8015772:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8015776:	f107 055c 	add.w	r5, r7, #92	@ 0x5c
 801577a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801577c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801577e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015782:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015786:	e884 0003 	stmia.w	r4, {r0, r1}

	this->_speed_control.init(speed_control_config);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f503 7400 	add.w	r4, r3, #512	@ 0x200
 8015790:	4668      	mov	r0, sp
 8015792:	f107 0318 	add.w	r3, r7, #24
 8015796:	2244      	movs	r2, #68	@ 0x44
 8015798:	4619      	mov	r1, r3
 801579a:	f00e fc26 	bl	8023fea <memcpy>
 801579e:	f107 030c 	add.w	r3, r7, #12
 80157a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80157a4:	4620      	mov	r0, r4
 80157a6:	f000 ff6f 	bl	8016688 <_ZN18TWIPR_SpeedControl4initE28twipr_speed_control_config_t>

	this->status = TWIPR_CONTROL_STATUS_IDLE;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2200      	movs	r2, #0
 80157ae:	701a      	strb	r2, [r3, #0]
	this->mode = TWIPR_CONTROL_MODE_OFF;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2200      	movs	r2, #0
 80157b4:	705a      	strb	r2, [r3, #1]

	this->_resetExternalInput();
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 fd1b 	bl	80161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f000 fd4a 	bl	8016256 <_ZN20TWIPR_ControlManager12_resetOutputEv>
	this->_tick = 0;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2200      	movs	r2, #0
 80157c6:	f8c3 2334 	str.w	r2, [r3, #820]	@ 0x334

}
 80157ca:	bf00      	nop
 80157cc:	37d4      	adds	r7, #212	@ 0xd4
 80157ce:	46bd      	mov	sp, r7
 80157d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157d4:	b004      	add	sp, #16
 80157d6:	4770      	bx	lr
 80157d8:	2401f3ac 	.word	0x2401f3ac
 80157dc:	08025db4 	.word	0x08025db4
 80157e0:	08025ddc 	.word	0x08025ddc

080157e4 <_ZN20TWIPR_ControlManager5startEv>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::start() {
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
	this->status = TWIPR_CONTROL_STATUS_RUNNING;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2201      	movs	r2, #1
 80157f0:	701a      	strb	r2, [r3, #0]
	this->_balancing_control.start();
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7ff fde6 	bl	80153ca <_ZN22TWIPR_BalancingControl5startEv>
	return 1;
 80157fe:	2301      	movs	r3, #1
}
 8015800:	4618      	mov	r0, r3
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <_ZN20TWIPR_ControlManager4stopEv>:

/* ======================================================== */

/* ======================================================== */
void TWIPR_ControlManager::stop() {
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]

	// Stop the balancing controller
	this->_balancing_control.stop();
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8015816:	4618      	mov	r0, r3
 8015818:	f7ff fee0 	bl	80155dc <_ZN22TWIPR_BalancingControl4stopEv>

	// Set the own state to idle
	this->mode = TWIPR_CONTROL_MODE_OFF;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2200      	movs	r2, #0
 8015820:	705a      	strb	r2, [r3, #1]

	// Set the input to 0
	this->_resetExternalInput();
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fce5 	bl	80161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>

}
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <_ZN20TWIPR_ControlManager6updateEv>:
void TWIPR_ControlManager::reset() {
	twipr_error_handler(0);
}

/* ======================================================== */
void TWIPR_ControlManager::update() {
 8015830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015832:	b097      	sub	sp, #92	@ 0x5c
 8015834:	af08      	add	r7, sp, #32
 8015836:	61f8      	str	r0, [r7, #28]

	// Read the dynamic state from the estimator
	this->_dynamic_state = this->_estimation->getState();
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	f8d3 2330 	ldr.w	r2, [r3, #816]	@ 0x330
 801583e:	69fc      	ldr	r4, [r7, #28]
 8015840:	463b      	mov	r3, r7
 8015842:	4611      	mov	r1, r2
 8015844:	4618      	mov	r0, r3
 8015846:	f002 f93d 	bl	8017ac4 <_ZN16TWIPR_Estimation8getStateEv>
 801584a:	f504 743e 	add.w	r4, r4, #760	@ 0x2f8
 801584e:	463d      	mov	r5, r7
 8015850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015854:	682b      	ldr	r3, [r5, #0]
 8015856:	6023      	str	r3, [r4, #0]

	// Check for errors
	// TODO

	// Initialize the drive input
	twipr_control_output_t control_output = { 0, 0 };
 8015858:	f04f 0300 	mov.w	r3, #0
 801585c:	623b      	str	r3, [r7, #32]
 801585e:	f04f 0300 	mov.w	r3, #0
 8015862:	627b      	str	r3, [r7, #36]	@ 0x24

	switch (this->status) {
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	f993 3000 	ldrsb.w	r3, [r3]
 801586a:	2b01      	cmp	r3, #1
 801586c:	d020      	beq.n	80158b0 <_ZN20TWIPR_ControlManager6updateEv+0x80>
 801586e:	2b01      	cmp	r3, #1
 8015870:	f300 808e 	bgt.w	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
 8015874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015878:	d002      	beq.n	8015880 <_ZN20TWIPR_ControlManager6updateEv+0x50>
 801587a:	2b00      	cmp	r3, #0
 801587c:	d00c      	beq.n	8015898 <_ZN20TWIPR_ControlManager6updateEv+0x68>
 801587e:	e087      	b.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
	case (TWIPR_CONTROL_STATUS_ERROR): {
		//
		this->_step_error();
 8015880:	69f8      	ldr	r0, [r7, #28]
 8015882:	f000 fadd 	bl	8015e40 <_ZN20TWIPR_ControlManager11_step_errorEv>
 8015886:	eeb0 7a40 	vmov.f32	s14, s0
 801588a:	eef0 7a60 	vmov.f32	s15, s1
 801588e:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8015892:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		break;
 8015896:	e07b      	b.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
	}
	case (TWIPR_CONTROL_STATUS_IDLE): {
		//
		this->_step_idle();
 8015898:	69f8      	ldr	r0, [r7, #28]
 801589a:	f000 faac 	bl	8015df6 <_ZN20TWIPR_ControlManager10_step_idleEv>
 801589e:	eeb0 7a40 	vmov.f32	s14, s0
 80158a2:	eef0 7a60 	vmov.f32	s15, s1
 80158a6:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 80158aa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		break;
 80158ae:	e06f      	b.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
	}
	case (TWIPR_CONTROL_STATUS_RUNNING): {

		switch (this->mode) {
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	785b      	ldrb	r3, [r3, #1]
 80158b4:	2b03      	cmp	r3, #3
 80158b6:	d86b      	bhi.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
 80158b8:	a201      	add	r2, pc, #4	@ (adr r2, 80158c0 <_ZN20TWIPR_ControlManager6updateEv+0x90>)
 80158ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158be:	bf00      	nop
 80158c0:	080158d1 	.word	0x080158d1
 80158c4:	080158e9 	.word	0x080158e9
 80158c8:	08015915 	.word	0x08015915
 80158cc:	08015953 	.word	0x08015953
		case (TWIPR_CONTROL_MODE_OFF): {
			control_output = this->_step_off();
 80158d0:	69f8      	ldr	r0, [r7, #28]
 80158d2:	f000 fa41 	bl	8015d58 <_ZN20TWIPR_ControlManager9_step_offEv>
 80158d6:	eeb0 7a40 	vmov.f32	s14, s0
 80158da:	eef0 7a60 	vmov.f32	s15, s1
 80158de:	ed87 7a08 	vstr	s14, [r7, #32]
 80158e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			break;
 80158e6:	e053      	b.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
		}
		case (TWIPR_CONTROL_MODE_DIRECT): {
			control_output = this->_step_direct(this->_external_input);
 80158e8:	69fb      	ldr	r3, [r7, #28]
 80158ea:	466c      	mov	r4, sp
 80158ec:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 80158f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80158f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80158f6:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80158fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80158fc:	69f8      	ldr	r0, [r7, #28]
 80158fe:	f000 fa50 	bl	8015da2 <_ZN20TWIPR_ControlManager12_step_directE30twipr_control_external_input_t>
 8015902:	eeb0 7a40 	vmov.f32	s14, s0
 8015906:	eef0 7a60 	vmov.f32	s15, s1
 801590a:	ed87 7a08 	vstr	s14, [r7, #32]
 801590e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			break;
 8015912:	e03d      	b.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
		}
		case (TWIPR_CONTROL_MODE_BALANCING): {
			control_output = this->_step_balancing(_external_input,
 8015914:	69fe      	ldr	r6, [r7, #28]
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	ad03      	add	r5, sp, #12
 801591a:	f503 743e 	add.w	r4, r3, #760	@ 0x2f8
 801591e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	602b      	str	r3, [r5, #0]
 8015926:	466c      	mov	r4, sp
 8015928:	f506 7339 	add.w	r3, r6, #740	@ 0x2e4
 801592c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015934:	f506 7336 	add.w	r3, r6, #728	@ 0x2d8
 8015938:	cb0e      	ldmia	r3, {r1, r2, r3}
 801593a:	69f8      	ldr	r0, [r7, #28]
 801593c:	f000 faa5 	bl	8015e8a <_ZN20TWIPR_ControlManager15_step_balancingE30twipr_control_external_input_t24twipr_estimation_state_t>
 8015940:	eeb0 7a40 	vmov.f32	s14, s0
 8015944:	eef0 7a60 	vmov.f32	s15, s1
 8015948:	ed87 7a08 	vstr	s14, [r7, #32]
 801594c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
					_dynamic_state);
			break;
 8015950:	e01e      	b.n	8015990 <_ZN20TWIPR_ControlManager6updateEv+0x160>
		}
		case (TWIPR_CONTROL_MODE_VELOCITY): {
//			control_output = this->_step_balancing(_external_input,
//								_dynamic_state);
			control_output = this->_step_velocity(_external_input,
 8015952:	69fe      	ldr	r6, [r7, #28]
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	ad03      	add	r5, sp, #12
 8015958:	f503 743e 	add.w	r4, r3, #760	@ 0x2f8
 801595c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801595e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015960:	6823      	ldr	r3, [r4, #0]
 8015962:	602b      	str	r3, [r5, #0]
 8015964:	466c      	mov	r4, sp
 8015966:	f506 7339 	add.w	r3, r6, #740	@ 0x2e4
 801596a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801596e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015972:	f506 7336 	add.w	r3, r6, #728	@ 0x2d8
 8015976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015978:	69f8      	ldr	r0, [r7, #28]
 801597a:	f000 fada 	bl	8015f32 <_ZN20TWIPR_ControlManager14_step_velocityE30twipr_control_external_input_t24twipr_estimation_state_t>
 801597e:	eeb0 7a40 	vmov.f32	s14, s0
 8015982:	eef0 7a60 	vmov.f32	s15, s1
 8015986:	ed87 7a08 	vstr	s14, [r7, #32]
 801598a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
					_dynamic_state);
			break;
 801598e:	bf00      	nop
		}

	}
	}

	this->_data.input_left = control_output.u_left;
 8015990:	6a3a      	ldr	r2, [r7, #32]
 8015992:	69fb      	ldr	r3, [r7, #28]
 8015994:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	this->_data.input_right = control_output.u_right;
 8015998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801599a:	69fb      	ldr	r3, [r7, #28]
 801599c:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	// Limit the Output
	control_output.u_left = limit(control_output.u_left,
 80159a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80159aa:	eef0 0a47 	vmov.f32	s1, s14
 80159ae:	eeb0 0a67 	vmov.f32	s0, s15
 80159b2:	f00c f851 	bl	8021a58 <_Z5limitff>
 80159b6:	eef0 7a40 	vmov.f32	s15, s0
 80159ba:	edc7 7a08 	vstr	s15, [r7, #32]
			this->config.max_torque);
	control_output.u_right = limit(control_output.u_right,
 80159be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80159c8:	eef0 0a47 	vmov.f32	s1, s14
 80159cc:	eeb0 0a67 	vmov.f32	s0, s15
 80159d0:	f00c f842 	bl	8021a58 <_Z5limitff>
 80159d4:	eef0 7a40 	vmov.f32	s15, s0
 80159d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			this->config.max_torque);

	// Write the output to the data
	this->_data.output_left = control_output.u_left;
 80159dc:	6a3a      	ldr	r2, [r7, #32]
 80159de:	69fb      	ldr	r3, [r7, #28]
 80159e0:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	this->_data.output_right = control_output.u_right;
 80159e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159e6:	69fb      	ldr	r3, [r7, #28]
 80159e8:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328

//	control_output.u_left = 0;
//	control_output.u_right = 0;
	// Write the output to the motors
	this->_setTorque(control_output);
 80159ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80159f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80159f4:	eeb0 0a47 	vmov.f32	s0, s14
 80159f8:	eef0 0a67 	vmov.f32	s1, s15
 80159fc:	69f8      	ldr	r0, [r7, #28]
 80159fe:	f000 fbac 	bl	801615a <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>

	// Increase the tick
	this->_tick++;
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	f8d3 3334 	ldr.w	r3, [r3, #820]	@ 0x334
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	f8c3 2334 	str.w	r2, [r3, #820]	@ 0x334

	// Call the step callbacks
	this->callbacks.step.call(this->_tick);
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	f8d3 3334 	ldr.w	r3, [r3, #820]	@ 0x334
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	4610      	mov	r0, r2
 8015a20:	f000 fc75 	bl	801630e <_ZN28core_utils_CallbackContainerILi4EmE4callEm>

}
 8015a24:	bf00      	nop
 8015a26:	373c      	adds	r7, #60	@ 0x3c
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a2c <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t>:

/* ======================================================== */
uint8_t TWIPR_ControlManager::setMode(twipr_control_mode_t mode) {
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	460b      	mov	r3, r1
 8015a36:	70fb      	strb	r3, [r7, #3]

	// Setting mode should only work while running
	if (this->status == TWIPR_CONTROL_STATUS_IDLE) {
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d101      	bne.n	8015a46 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x1a>
		return 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	e053      	b.n	8015aee <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xc2>
	}
	if (this->status == TWIPR_CONTROL_STATUS_ERROR) {
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	f993 3000 	ldrsb.w	r3, [r3]
 8015a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015a50:	d101      	bne.n	8015a56 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x2a>
		return 0;
 8015a52:	2300      	movs	r3, #0
 8015a54:	e04b      	b.n	8015aee <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xc2>
	}

	// Switch the mode of the balancing controller to the appropriate mode
	switch (mode) {
 8015a56:	78fb      	ldrb	r3, [r7, #3]
 8015a58:	2b03      	cmp	r3, #3
 8015a5a:	d82d      	bhi.n	8015ab8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
 8015a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8015a64 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x38>)
 8015a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a62:	bf00      	nop
 8015a64:	08015a75 	.word	0x08015a75
 8015a68:	08015a7d 	.word	0x08015a7d
 8015a6c:	08015a8d 	.word	0x08015a8d
 8015a70:	08015a9d 	.word	0x08015a9d
	case TWIPR_CONTROL_MODE_OFF: {
		this->stop();
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f7ff fec7 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
		break;
 8015a7a:	e01d      	b.n	8015ab8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
	case TWIPR_CONTROL_MODE_DIRECT: {
//		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
//			this->config.drive->start();
//		}

		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_DIRECT);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8015a82:	2101      	movs	r1, #1
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7ff fdc6 	bl	8015616 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8015a8a:	e015      	b.n	8015ab8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
	}
	case TWIPR_CONTROL_MODE_BALANCING: {
//		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
//			this->config.drive->start();
//		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8015a92:	2102      	movs	r1, #2
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7ff fdbe 	bl	8015616 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8015a9a:	e00d      	b.n	8015ab8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x8c>
	}
	case TWIPR_CONTROL_MODE_VELOCITY: {
//		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
//			this->config.drive->start();
//		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8015aa2:	2102      	movs	r1, #2
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7ff fdb6 	bl	8015616 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		this->_speed_control.reset();
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f000 fe86 	bl	80167c2 <_ZN18TWIPR_SpeedControl5resetEv>
		break;
 8015ab6:	bf00      	nop
	}
	}

	// Reset the input
	this->_resetExternalInput();
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f000 fb9a 	bl	80161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>

	bool mode_changed = false;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	73fb      	strb	r3, [r7, #15]

	if (this->mode != mode) {
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	785b      	ldrb	r3, [r3, #1]
 8015ac6:	78fa      	ldrb	r2, [r7, #3]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d001      	beq.n	8015ad0 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xa4>
		mode_changed = true;
 8015acc:	2301      	movs	r3, #1
 8015ace:	73fb      	strb	r3, [r7, #15]
	}
	this->mode = mode;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	78fa      	ldrb	r2, [r7, #3]
 8015ad4:	705a      	strb	r2, [r3, #1]

	if (mode_changed) {
 8015ad6:	7bfb      	ldrb	r3, [r7, #15]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d007      	beq.n	8015aec <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xc0>

		this->callbacks.mode_change.call(mode);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8015ae2:	78fa      	ldrb	r2, [r7, #3]
 8015ae4:	4611      	mov	r1, r2
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f000 fc35 	bl	8016356 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE4callES0_>
	}

	return 1;
 8015aec:	2301      	movs	r3, #1
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3710      	adds	r7, #16
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop

08015af8 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t>:
	this->_external_input = input;
	osSemaphoreRelease(semaphore_external_input);
}
/* ======================================================== */
void TWIPR_ControlManager::setBalancingInput(
		twipr_balancing_control_input_t input) {
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	eeb0 7a40 	vmov.f32	s14, s0
 8015b04:	eef0 7a60 	vmov.f32	s15, s1
 8015b08:	ed87 7a01 	vstr	s14, [r7, #4]
 8015b0c:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->_externalInputEnabled == false) {
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d014      	beq.n	8015b44 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x4c>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8015b4c <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x54>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015b22:	4618      	mov	r0, r3
 8015b24:	f7f9 f920 	bl	800ed68 <osSemaphoreAcquire>
	this->_external_input.u_balancing_1 = input.u_1;
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	this->_external_input.u_balancing_2 = input.u_2;
 8015b30:	68ba      	ldr	r2, [r7, #8]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
	osSemaphoreRelease(semaphore_external_input);
 8015b38:	4b04      	ldr	r3, [pc, #16]	@ (8015b4c <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x54>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7f9 f965 	bl	800ee0c <osSemaphoreRelease>
 8015b42:	e000      	b.n	8015b46 <_ZN20TWIPR_ControlManager17setBalancingInputE31twipr_balancing_control_input_t+0x4e>
		return;
 8015b44:	bf00      	nop
}
 8015b46:	3710      	adds	r7, #16
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	2401f3b0 	.word	0x2401f3b0

08015b50 <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t>:

/* ======================================================== */
void TWIPR_ControlManager::setSpeed(twipr_speed_control_input_t speed) {
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b084      	sub	sp, #16
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	eeb0 7a40 	vmov.f32	s14, s0
 8015b5c:	eef0 7a60 	vmov.f32	s15, s1
 8015b60:	ed87 7a01 	vstr	s14, [r7, #4]
 8015b64:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->_externalInputEnabled == false) {
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d014      	beq.n	8015b9c <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x4c>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015b72:	4b0c      	ldr	r3, [pc, #48]	@ (8015ba4 <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x54>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7f9 f8f4 	bl	800ed68 <osSemaphoreAcquire>
	this->_external_input.u_velocity_forward = speed.forward;
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
	this->_external_input.u_velocity_turn = speed.turn;
 8015b88:	68ba      	ldr	r2, [r7, #8]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	osSemaphoreRelease(semaphore_external_input);
 8015b90:	4b04      	ldr	r3, [pc, #16]	@ (8015ba4 <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x54>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7f9 f939 	bl	800ee0c <osSemaphoreRelease>
 8015b9a:	e000      	b.n	8015b9e <_ZN20TWIPR_ControlManager8setSpeedE27twipr_speed_control_input_t+0x4e>
		return;
 8015b9c:	bf00      	nop
}
 8015b9e:	3710      	adds	r7, #16
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}
 8015ba4:	2401f3b0 	.word	0x2401f3b0

08015ba8 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t>:

/* ======================================================== */
void TWIPR_ControlManager::setDirectInput(twipr_control_direct_input_t input) {
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	60f8      	str	r0, [r7, #12]
 8015bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8015bb4:	eef0 7a60 	vmov.f32	s15, s1
 8015bb8:	ed87 7a01 	vstr	s14, [r7, #4]
 8015bbc:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->_externalInputEnabled == false) {
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d014      	beq.n	8015bf4 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x4c>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015bca:	4b0c      	ldr	r3, [pc, #48]	@ (8015bfc <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x54>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7f9 f8c8 	bl	800ed68 <osSemaphoreAcquire>
	this->_external_input.u_direct_1 = input.input_left;
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
	this->_external_input.u_direct_2 = input.input_right;
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
	osSemaphoreRelease(semaphore_external_input);
 8015be8:	4b04      	ldr	r3, [pc, #16]	@ (8015bfc <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x54>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7f9 f90d 	bl	800ee0c <osSemaphoreRelease>
 8015bf2:	e000      	b.n	8015bf6 <_ZN20TWIPR_ControlManager14setDirectInputE28twipr_control_direct_input_t+0x4e>
		return;
 8015bf4:	bf00      	nop
}
 8015bf6:	3710      	adds	r7, #16
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	2401f3b0 	.word	0x2401f3b0

08015c00 <_ZN20TWIPR_ControlManager20disableExternalInputEv>:

/* ======================================================== */
void TWIPR_ControlManager::disableExternalInput() {
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
	this->_externalInputEnabled = false;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c

}
 8015c10:	bf00      	nop
 8015c12:	370c      	adds	r7, #12
 8015c14:	46bd      	mov	sp, r7
 8015c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1a:	4770      	bx	lr

08015c1c <_ZN20TWIPR_ControlManager19enableExternalInputEv>:

/* ======================================================== */
void TWIPR_ControlManager::enableExternalInput() {
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
	this->_externalInputEnabled = true;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2201      	movs	r2, #1
 8015c28:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
}
 8015c2c:	bf00      	nop
 8015c2e:	370c      	adds	r7, #12
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr

08015c38 <_ZN20TWIPR_ControlManager16setBalancingGainEPf>:
twipr_control_status_t TWIPR_ControlManager::getStatus() {
	return this->status;
}

/* ======================================================== */
uint8_t TWIPR_ControlManager::setBalancingGain(float *K) {
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	6039      	str	r1, [r7, #0]
	// This is only allowed if the controller is off
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f993 3000 	ldrsb.w	r3, [r3]
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d001      	beq.n	8015c50 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x18>
		return 0;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	e00d      	b.n	8015c6c <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x34>
//		return;
	}
	if (this->mode != TWIPR_CONTROL_MODE_OFF) {
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	785b      	ldrb	r3, [r3, #1]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d001      	beq.n	8015c5c <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x24>
		return 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e007      	b.n	8015c6c <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x34>
//		return;
	}

	this->_balancing_control.set_K(K);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8015c62:	6839      	ldr	r1, [r7, #0]
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7ff fcc6 	bl	80155f6 <_ZN22TWIPR_BalancingControl5set_KEPf>

	return 1;
 8015c6a:	2301      	movs	r3, #1
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3708      	adds	r7, #8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}

08015c74 <_ZN20TWIPR_ControlManager28setVelocityControlForwardPIDEPf>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::setVelocityControlForwardPID(float *PID) {
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	6039      	str	r1, [r7, #0]
	this->_speed_control.setForwardPID(PID[0], PID[1], PID[2]);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8015c84:	683b      	ldr	r3, [r7, #0]
 8015c86:	edd3 7a00 	vldr	s15, [r3]
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	ed93 7a00 	vldr	s14, [r3]
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	3308      	adds	r3, #8
 8015c96:	edd3 6a00 	vldr	s13, [r3]
 8015c9a:	eeb0 1a66 	vmov.f32	s2, s13
 8015c9e:	eef0 0a47 	vmov.f32	s1, s14
 8015ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8015ca6:	4610      	mov	r0, r2
 8015ca8:	f000 fe30 	bl	801690c <_ZN18TWIPR_SpeedControl13setForwardPIDEfff>

	return 1;
 8015cac:	2301      	movs	r3, #1
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3708      	adds	r7, #8
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <_ZN20TWIPR_ControlManager25setVelocityControlTurnPIDEPf>:

/* ======================================================== */
uint8_t TWIPR_ControlManager::setVelocityControlTurnPID(float *PID) {
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b082      	sub	sp, #8
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
 8015cbe:	6039      	str	r1, [r7, #0]
	this->_speed_control.setTurnPID(PID[0], PID[1], PID[2]);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	edd3 7a00 	vldr	s15, [r3]
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	3304      	adds	r3, #4
 8015cd0:	ed93 7a00 	vldr	s14, [r3]
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	3308      	adds	r3, #8
 8015cd8:	edd3 6a00 	vldr	s13, [r3]
 8015cdc:	eeb0 1a66 	vmov.f32	s2, s13
 8015ce0:	eef0 0a47 	vmov.f32	s1, s14
 8015ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8015ce8:	4610      	mov	r0, r2
 8015cea:	f000 fe31 	bl	8016950 <_ZN18TWIPR_SpeedControl10setTurnPIDEfff>

	return 1;
 8015cee:	2301      	movs	r3, #1
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <_ZN20TWIPR_ControlManager23getControlConfigurationEv>:

/* ======================================================== */
twipr_control_configuration_t TWIPR_ControlManager::getControlConfiguration() {
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	6039      	str	r1, [r7, #0]
	twipr_control_configuration_t config;
//	this->_balancing_control.config	.K[1] = -1;
//	return config;
	memcpy(config.K, this->_balancing_control.config.K, sizeof(float) * 8);
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8015d08:	2220      	movs	r2, #32
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f00e f96c 	bl	8023fea <memcpy>
	config.forward_kp = this->_speed_control.config.forward_config.Kp;
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	621a      	str	r2, [r3, #32]
	config.forward_ki = this->_speed_control.config.forward_config.Ki;
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	625a      	str	r2, [r3, #36]	@ 0x24
	config.forward_kd = this->_speed_control.config.forward_config.Kd;
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	629a      	str	r2, [r3, #40]	@ 0x28

	config.turn_kp = this->_speed_control.config.turn_config.Kp;
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	62da      	str	r2, [r3, #44]	@ 0x2c
	config.turn_ki = this->_speed_control.config.turn_config.Ki;
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	631a      	str	r2, [r3, #48]	@ 0x30
	config.turn_kd = this->_speed_control.config.turn_config.Kd;
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	635a      	str	r2, [r3, #52]	@ 0x34

	return config;
 8015d4e:	bf00      	nop
}
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}

08015d58 <_ZN20TWIPR_ControlManager9_step_offEv>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_off() {
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b088      	sub	sp, #32
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	60f8      	str	r0, [r7, #12]
	this->_resetExternalInput();
 8015d60:	68f8      	ldr	r0, [r7, #12]
 8015d62:	f000 fa46 	bl	80161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 8015d66:	68f8      	ldr	r0, [r7, #12]
 8015d68:	f000 fa75 	bl	8016256 <_ZN20TWIPR_ControlManager12_resetOutputEv>
	twipr_control_output_t output = { 0, 0 };
 8015d6c:	f04f 0300 	mov.w	r3, #0
 8015d70:	613b      	str	r3, [r7, #16]
 8015d72:	f04f 0300 	mov.w	r3, #0
 8015d76:	617b      	str	r3, [r7, #20]
	return output;
 8015d78:	f107 0318 	add.w	r3, r7, #24
 8015d7c:	f107 0210 	add.w	r2, r7, #16
 8015d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d84:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d88:	69ba      	ldr	r2, [r7, #24]
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	ee07 2a10 	vmov	s14, r2
 8015d90:	ee07 3a90 	vmov	s15, r3
}
 8015d94:	eeb0 0a47 	vmov.f32	s0, s14
 8015d98:	eef0 0a67 	vmov.f32	s1, s15
 8015d9c:	3720      	adds	r7, #32
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <_ZN20TWIPR_ControlManager12_step_directE30twipr_control_external_input_t>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_direct(
		twipr_control_external_input_t input) {
 8015da2:	b084      	sub	sp, #16
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b088      	sub	sp, #32
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015db0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	this->_resetOutput();
 8015db4:	68f8      	ldr	r0, [r7, #12]
 8015db6:	f000 fa4e 	bl	8016256 <_ZN20TWIPR_ControlManager12_resetOutputEv>
	// TODO

	twipr_control_output_t output = { 0, 0 };
 8015dba:	f04f 0300 	mov.w	r3, #0
 8015dbe:	613b      	str	r3, [r7, #16]
 8015dc0:	f04f 0300 	mov.w	r3, #0
 8015dc4:	617b      	str	r3, [r7, #20]
	return output;
 8015dc6:	f107 0318 	add.w	r3, r7, #24
 8015dca:	f107 0210 	add.w	r2, r7, #16
 8015dce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015dd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8015dd6:	69ba      	ldr	r2, [r7, #24]
 8015dd8:	69fb      	ldr	r3, [r7, #28]
 8015dda:	ee07 2a10 	vmov	s14, r2
 8015dde:	ee07 3a90 	vmov	s15, r3

}
 8015de2:	eeb0 0a47 	vmov.f32	s0, s14
 8015de6:	eef0 0a67 	vmov.f32	s1, s15
 8015dea:	3720      	adds	r7, #32
 8015dec:	46bd      	mov	sp, r7
 8015dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015df2:	b004      	add	sp, #16
 8015df4:	4770      	bx	lr

08015df6 <_ZN20TWIPR_ControlManager10_step_idleEv>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_idle() {
 8015df6:	b580      	push	{r7, lr}
 8015df8:	b088      	sub	sp, #32
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	60f8      	str	r0, [r7, #12]
	this->_resetExternalInput();
 8015dfe:	68f8      	ldr	r0, [r7, #12]
 8015e00:	f000 f9f7 	bl	80161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f000 fa26 	bl	8016256 <_ZN20TWIPR_ControlManager12_resetOutputEv>
	twipr_control_output_t output = { 0, 0 };
 8015e0a:	f04f 0300 	mov.w	r3, #0
 8015e0e:	613b      	str	r3, [r7, #16]
 8015e10:	f04f 0300 	mov.w	r3, #0
 8015e14:	617b      	str	r3, [r7, #20]
	return output;
 8015e16:	f107 0318 	add.w	r3, r7, #24
 8015e1a:	f107 0210 	add.w	r2, r7, #16
 8015e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e22:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e26:	69ba      	ldr	r2, [r7, #24]
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	ee07 2a10 	vmov	s14, r2
 8015e2e:	ee07 3a90 	vmov	s15, r3
}
 8015e32:	eeb0 0a47 	vmov.f32	s0, s14
 8015e36:	eef0 0a67 	vmov.f32	s1, s15
 8015e3a:	3720      	adds	r7, #32
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <_ZN20TWIPR_ControlManager11_step_errorEv>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_error() {
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b088      	sub	sp, #32
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	60f8      	str	r0, [r7, #12]
	this->_resetExternalInput();
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f000 f9d2 	bl	80161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>
	this->_resetOutput();
 8015e4e:	68f8      	ldr	r0, [r7, #12]
 8015e50:	f000 fa01 	bl	8016256 <_ZN20TWIPR_ControlManager12_resetOutputEv>
	twipr_control_output_t output = { 0, 0 };
 8015e54:	f04f 0300 	mov.w	r3, #0
 8015e58:	613b      	str	r3, [r7, #16]
 8015e5a:	f04f 0300 	mov.w	r3, #0
 8015e5e:	617b      	str	r3, [r7, #20]
	return output;
 8015e60:	f107 0318 	add.w	r3, r7, #24
 8015e64:	f107 0210 	add.w	r2, r7, #16
 8015e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e70:	69ba      	ldr	r2, [r7, #24]
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	ee07 2a10 	vmov	s14, r2
 8015e78:	ee07 3a90 	vmov	s15, r3
}
 8015e7c:	eeb0 0a47 	vmov.f32	s0, s14
 8015e80:	eef0 0a67 	vmov.f32	s1, s15
 8015e84:	3720      	adds	r7, #32
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}

08015e8a <_ZN20TWIPR_ControlManager15_step_balancingE30twipr_control_external_input_t24twipr_estimation_state_t>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_balancing(
		twipr_control_external_input_t input, twipr_estimation_state_t state) {
 8015e8a:	b084      	sub	sp, #16
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b08e      	sub	sp, #56	@ 0x38
 8015e90:	af02      	add	r7, sp, #8
 8015e92:	60f8      	str	r0, [r7, #12]
 8015e94:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8015e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	twipr_control_output_t output = { 0, 0 };
 8015e9c:	f04f 0300 	mov.w	r3, #0
 8015ea0:	623b      	str	r3, [r7, #32]
 8015ea2:	f04f 0300 	mov.w	r3, #0
 8015ea6:	627b      	str	r3, [r7, #36]	@ 0x24

	twipr_balancing_control_input_t balancing_control_input = {
			input.u_balancing_1, input.u_balancing_2, };
 8015ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015eaa:	61bb      	str	r3, [r7, #24]
 8015eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015eae:	61fb      	str	r3, [r7, #28]

	this->_data.input_balancing_1 = balancing_control_input.u_1;
 8015eb0:	69ba      	ldr	r2, [r7, #24]
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	this->_data.input_balancing_2 = balancing_control_input.u_2;
 8015eb8:	69fa      	ldr	r2, [r7, #28]
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	twipr_balancing_control_output_t balancing_control_output =
			this->_update_balancing_control(balancing_control_input, state);
 8015ec0:	ed97 7a06 	vldr	s14, [r7, #24]
 8015ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8015ec8:	466a      	mov	r2, sp
 8015eca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8015ece:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ed2:	e882 0003 	stmia.w	r2, {r0, r1}
 8015ed6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015edc:	eeb0 0a47 	vmov.f32	s0, s14
 8015ee0:	eef0 0a67 	vmov.f32	s1, s15
 8015ee4:	68f8      	ldr	r0, [r7, #12]
 8015ee6:	f000 f8ee 	bl	80160c6 <_ZN20TWIPR_ControlManager25_update_balancing_controlE31twipr_balancing_control_input_t24twipr_estimation_state_t>
 8015eea:	eeb0 7a40 	vmov.f32	s14, s0
 8015eee:	eef0 7a60 	vmov.f32	s15, s1
 8015ef2:	ed87 7a04 	vstr	s14, [r7, #16]
 8015ef6:	edc7 7a05 	vstr	s15, [r7, #20]

	output.u_left = balancing_control_output.u_1;
 8015efa:	693b      	ldr	r3, [r7, #16]
 8015efc:	623b      	str	r3, [r7, #32]
	output.u_right = balancing_control_output.u_2;
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	627b      	str	r3, [r7, #36]	@ 0x24

	return output;
 8015f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015f06:	f107 0220 	add.w	r2, r7, #32
 8015f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f16:	ee07 2a10 	vmov	s14, r2
 8015f1a:	ee07 3a90 	vmov	s15, r3

}
 8015f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8015f22:	eef0 0a67 	vmov.f32	s1, s15
 8015f26:	3730      	adds	r7, #48	@ 0x30
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015f2e:	b004      	add	sp, #16
 8015f30:	4770      	bx	lr

08015f32 <_ZN20TWIPR_ControlManager14_step_velocityE30twipr_control_external_input_t24twipr_estimation_state_t>:
/* ======================================================== */
twipr_control_output_t TWIPR_ControlManager::_step_velocity(
		twipr_control_external_input_t input, twipr_estimation_state_t state) {
 8015f32:	b084      	sub	sp, #16
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b092      	sub	sp, #72	@ 0x48
 8015f38:	af02      	add	r7, sp, #8
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8015f40:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	twipr_control_output_t output = { 0, 0 };
 8015f44:	f04f 0300 	mov.w	r3, #0
 8015f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f4a:	f04f 0300 	mov.w	r3, #0
 8015f4e:	637b      	str	r3, [r7, #52]	@ 0x34

	twipr_speed_control_input_t speed_control_input = { .forward =
			input.u_velocity_forward, .turn = input.u_velocity_turn, };
 8015f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015f54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

	this->_data.input_velocity_forward = input.u_velocity_forward;
 8015f58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
	this->_data.input_velocity_turn = input.u_velocity_turn;
 8015f60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310

	// Update the Speed Controller
	twipr_speed_control_output_t speed_control_output =
			this->_update_velocity_control(speed_control_input, state);
 8015f68:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015f6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015f70:	466a      	mov	r2, sp
 8015f72:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015f76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f7a:	e882 0003 	stmia.w	r2, {r0, r1}
 8015f7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015f84:	eeb0 0a47 	vmov.f32	s0, s14
 8015f88:	eef0 0a67 	vmov.f32	s1, s15
 8015f8c:	68f8      	ldr	r0, [r7, #12]
 8015f8e:	f000 f84d 	bl	801602c <_ZN20TWIPR_ControlManager24_update_velocity_controlE27twipr_speed_control_input_t24twipr_estimation_state_t>
 8015f92:	eeb0 7a40 	vmov.f32	s14, s0
 8015f96:	eef0 7a60 	vmov.f32	s15, s1
 8015f9a:	ed87 7a08 	vstr	s14, [r7, #32]
 8015f9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Feed the result into the balancing controller
	twipr_balancing_control_input_t balancing_control_input = { .u_1 =
			speed_control_output.input_left, .u_2 =
 8015fa2:	6a3b      	ldr	r3, [r7, #32]
			speed_control_output.input_right };
 8015fa4:	61bb      	str	r3, [r7, #24]
 8015fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fa8:	61fb      	str	r3, [r7, #28]

	this->_data.input_balancing_1 = balancing_control_input.u_1;
 8015faa:	69ba      	ldr	r2, [r7, #24]
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	this->_data.input_balancing_2 = balancing_control_input.u_2;
 8015fb2:	69fa      	ldr	r2, [r7, #28]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	twipr_balancing_control_output_t balancing_control_output =
			this->_update_balancing_control(balancing_control_input, state);
 8015fba:	ed97 7a06 	vldr	s14, [r7, #24]
 8015fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8015fc2:	466a      	mov	r2, sp
 8015fc4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015fc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015fcc:	e882 0003 	stmia.w	r2, {r0, r1}
 8015fd0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8015fda:	eef0 0a67 	vmov.f32	s1, s15
 8015fde:	68f8      	ldr	r0, [r7, #12]
 8015fe0:	f000 f871 	bl	80160c6 <_ZN20TWIPR_ControlManager25_update_balancing_controlE31twipr_balancing_control_input_t24twipr_estimation_state_t>
 8015fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8015fe8:	eef0 7a60 	vmov.f32	s15, s1
 8015fec:	ed87 7a04 	vstr	s14, [r7, #16]
 8015ff0:	edc7 7a05 	vstr	s15, [r7, #20]

	output.u_left = balancing_control_output.u_1;
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	633b      	str	r3, [r7, #48]	@ 0x30
	output.u_right = balancing_control_output.u_2;
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	637b      	str	r3, [r7, #52]	@ 0x34

	return output;
 8015ffc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016000:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016004:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016008:	e883 0003 	stmia.w	r3, {r0, r1}
 801600c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801600e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016010:	ee07 2a10 	vmov	s14, r2
 8016014:	ee07 3a90 	vmov	s15, r3

}
 8016018:	eeb0 0a47 	vmov.f32	s0, s14
 801601c:	eef0 0a67 	vmov.f32	s1, s15
 8016020:	3740      	adds	r7, #64	@ 0x40
 8016022:	46bd      	mov	sp, r7
 8016024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016028:	b004      	add	sp, #16
 801602a:	4770      	bx	lr

0801602c <_ZN20TWIPR_ControlManager24_update_velocity_controlE27twipr_speed_control_input_t24twipr_estimation_state_t>:
/* ======================================================== */
twipr_speed_control_output_t TWIPR_ControlManager::_update_velocity_control(
		twipr_speed_control_input_t input, twipr_estimation_state_t state) {
 801602c:	b084      	sub	sp, #16
 801602e:	b580      	push	{r7, lr}
 8016030:	b08a      	sub	sp, #40	@ 0x28
 8016032:	af00      	add	r7, sp, #0
 8016034:	6178      	str	r0, [r7, #20]
 8016036:	eeb0 7a40 	vmov.f32	s14, s0
 801603a:	eef0 7a60 	vmov.f32	s15, s1
 801603e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8016042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016046:	ed87 7a03 	vstr	s14, [r7, #12]
 801604a:	edc7 7a04 	vstr	s15, [r7, #16]

	twipr_speed_control_output_t output = { 0, 0 };
 801604e:	f04f 0300 	mov.w	r3, #0
 8016052:	61bb      	str	r3, [r7, #24]
 8016054:	f04f 0300 	mov.w	r3, #0
 8016058:	61fb      	str	r3, [r7, #28]

	output = this->_speed_control.update(input, state.v, state.psi_dot);
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8016060:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8016064:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8016068:	ed97 7a03 	vldr	s14, [r7, #12]
 801606c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016070:	eef0 1a46 	vmov.f32	s3, s12
 8016074:	eeb0 1a66 	vmov.f32	s2, s13
 8016078:	eeb0 0a47 	vmov.f32	s0, s14
 801607c:	eef0 0a67 	vmov.f32	s1, s15
 8016080:	4618      	mov	r0, r3
 8016082:	f000 fbc0 	bl	8016806 <_ZN18TWIPR_SpeedControl6updateE27twipr_speed_control_input_tff>
 8016086:	eeb0 7a40 	vmov.f32	s14, s0
 801608a:	eef0 7a60 	vmov.f32	s15, s1
 801608e:	ed87 7a06 	vstr	s14, [r7, #24]
 8016092:	edc7 7a07 	vstr	s15, [r7, #28]

	return output;
 8016096:	f107 0320 	add.w	r3, r7, #32
 801609a:	f107 0218 	add.w	r2, r7, #24
 801609e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80160a6:	6a3a      	ldr	r2, [r7, #32]
 80160a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160aa:	ee07 2a10 	vmov	s14, r2
 80160ae:	ee07 3a90 	vmov	s15, r3
}
 80160b2:	eeb0 0a47 	vmov.f32	s0, s14
 80160b6:	eef0 0a67 	vmov.f32	s1, s15
 80160ba:	3728      	adds	r7, #40	@ 0x28
 80160bc:	46bd      	mov	sp, r7
 80160be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80160c2:	b004      	add	sp, #16
 80160c4:	4770      	bx	lr

080160c6 <_ZN20TWIPR_ControlManager25_update_balancing_controlE31twipr_balancing_control_input_t24twipr_estimation_state_t>:

/* ======================================================== */
twipr_balancing_control_output_t TWIPR_ControlManager::_update_balancing_control(
		twipr_balancing_control_input_t input, twipr_estimation_state_t state) {
 80160c6:	b084      	sub	sp, #16
 80160c8:	b590      	push	{r4, r7, lr}
 80160ca:	b08f      	sub	sp, #60	@ 0x3c
 80160cc:	af04      	add	r7, sp, #16
 80160ce:	6178      	str	r0, [r7, #20]
 80160d0:	eeb0 7a40 	vmov.f32	s14, s0
 80160d4:	eef0 7a60 	vmov.f32	s15, s1
 80160d8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80160dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80160e0:	ed87 7a03 	vstr	s14, [r7, #12]
 80160e4:	edc7 7a04 	vstr	s15, [r7, #16]
	//	 Calculate the input from the balancing controller

	twipr_balancing_control_output_t output = { 0, 0 };
 80160e8:	f04f 0300 	mov.w	r3, #0
 80160ec:	61bb      	str	r3, [r7, #24]
 80160ee:	f04f 0300 	mov.w	r3, #0
 80160f2:	61fb      	str	r3, [r7, #28]

	// Update the balancing controller
	this->_balancing_control.update(state, input, &output);
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	f503 74d0 	add.w	r4, r3, #416	@ 0x1a0
 80160fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80160fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8016102:	f107 0318 	add.w	r3, r7, #24
 8016106:	9302      	str	r3, [sp, #8]
 8016108:	466a      	mov	r2, sp
 801610a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801610e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016112:	e882 0003 	stmia.w	r2, {r0, r1}
 8016116:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801611a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801611c:	eeb0 0a47 	vmov.f32	s0, s14
 8016120:	eef0 0a67 	vmov.f32	s1, s15
 8016124:	4620      	mov	r0, r4
 8016126:	f7ff f96b 	bl	8015400 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>

	return output;
 801612a:	f107 0320 	add.w	r3, r7, #32
 801612e:	f107 0218 	add.w	r2, r7, #24
 8016132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016136:	e883 0003 	stmia.w	r3, {r0, r1}
 801613a:	6a3a      	ldr	r2, [r7, #32]
 801613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613e:	ee07 2a10 	vmov	s14, r2
 8016142:	ee07 3a90 	vmov	s15, r3
}
 8016146:	eeb0 0a47 	vmov.f32	s0, s14
 801614a:	eef0 0a67 	vmov.f32	s1, s15
 801614e:	372c      	adds	r7, #44	@ 0x2c
 8016150:	46bd      	mov	sp, r7
 8016152:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016156:	b004      	add	sp, #16
 8016158:	4770      	bx	lr

0801615a <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>:
/* ======================================================== */
void TWIPR_ControlManager::_setTorque(twipr_control_output_t output) {
 801615a:	b580      	push	{r7, lr}
 801615c:	b086      	sub	sp, #24
 801615e:	af00      	add	r7, sp, #0
 8016160:	60f8      	str	r0, [r7, #12]
 8016162:	eeb0 7a40 	vmov.f32	s14, s0
 8016166:	eef0 7a60 	vmov.f32	s15, s1
 801616a:	ed87 7a01 	vstr	s14, [r7, #4]
 801616e:	edc7 7a02 	vstr	s15, [r7, #8]
	// Limit the maximum torque

	// Apply the torque to the motors
	twipr_drive_can_input_t drive_input = { .torque_left = output.u_left,
 8016172:	687b      	ldr	r3, [r7, #4]
			.torque_right = output.u_right };
 8016174:	613b      	str	r3, [r7, #16]
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	617b      	str	r3, [r7, #20]

	this->config.drive->setTorque(drive_input);
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	689b      	ldr	r3, [r3, #8]
 801617e:	ed97 7a04 	vldr	s14, [r7, #16]
 8016182:	edd7 7a05 	vldr	s15, [r7, #20]
 8016186:	eeb0 0a47 	vmov.f32	s0, s14
 801618a:	eef0 0a67 	vmov.f32	s1, s15
 801618e:	4618      	mov	r0, r3
 8016190:	f001 f97a 	bl	8017488 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t>
}
 8016194:	bf00      	nop
 8016196:	3718      	adds	r7, #24
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <_ZN20TWIPR_ControlManager9getSampleEv>:

/* ======================================================== */
twipr_logging_control_t TWIPR_ControlManager::getSample() {
 801619c:	b4b0      	push	{r4, r5, r7}
 801619e:	b083      	sub	sp, #12
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
	twipr_logging_control_t sample;
	sample.control_mode = this->mode;
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	785a      	ldrb	r2, [r3, #1]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	705a      	strb	r2, [r3, #1]
	sample.control_status = this->status;
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	f993 2000 	ldrsb.w	r2, [r3]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	701a      	strb	r2, [r3, #0]
	sample.external_input = this->_external_input;
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	1d14      	adds	r4, r2, #4
 80161be:	f503 7536 	add.w	r5, r3, #728	@ 0x2d8
 80161c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80161ca:	e884 0003 	stmia.w	r4, {r0, r1}
	sample.data = this->_data;
 80161ce:	687a      	ldr	r2, [r7, #4]
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	f102 041c 	add.w	r4, r2, #28
 80161d6:	f503 7543 	add.w	r5, r3, #780	@ 0x30c
 80161da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80161e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return sample;
 80161e6:	bf00      	nop
}
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	370c      	adds	r7, #12
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bcb0      	pop	{r4, r5, r7}
 80161f0:	4770      	bx	lr

080161f2 <_ZN20TWIPR_ControlManager19_resetExternalInputEv>:

void TWIPR_ControlManager::_resetExternalInput() {
 80161f2:	b480      	push	{r7}
 80161f4:	b083      	sub	sp, #12
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]

	this->_external_input.u_direct_1 = 0.0;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f04f 0200 	mov.w	r2, #0
 8016200:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
	this->_external_input.u_direct_2 = 0.0;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f04f 0200 	mov.w	r2, #0
 801620a:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
	this->_external_input.u_balancing_1 = 0.0;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f04f 0200 	mov.w	r2, #0
 8016214:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	this->_external_input.u_balancing_2 = 0.0;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f04f 0200 	mov.w	r2, #0
 801621e:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
	this->_external_input.u_velocity_forward = 0.0;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f04f 0200 	mov.w	r2, #0
 8016228:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
	this->_external_input.u_velocity_turn = 0.0;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f04f 0200 	mov.w	r2, #0
 8016232:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	this->_output.u_left = 0.0;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f04f 0200 	mov.w	r2, #0
 801623c:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
	this->_output.u_right = 0.0;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f04f 0200 	mov.w	r2, #0
 8016246:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4

}
 801624a:	bf00      	nop
 801624c:	370c      	adds	r7, #12
 801624e:	46bd      	mov	sp, r7
 8016250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016254:	4770      	bx	lr

08016256 <_ZN20TWIPR_ControlManager12_resetOutputEv>:

void TWIPR_ControlManager::_resetOutput() {
 8016256:	b480      	push	{r7}
 8016258:	b083      	sub	sp, #12
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
	this->_output.u_left = 0;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f04f 0200 	mov.w	r2, #0
 8016264:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
	this->_output.u_right = 0;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f04f 0200 	mov.w	r2, #0
 801626e:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
}
 8016272:	bf00      	nop
 8016274:	370c      	adds	r7, #12
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr

0801627e <_ZN28core_utils_CallbackContainerILi4EtEC1Ev>:
};

template<int num_callbacks, typename input_type>
class core_utils_CallbackContainer {
public:
	core_utils_CallbackContainer() {
 801627e:	b5b0      	push	{r4, r5, r7, lr}
 8016280:	b082      	sub	sp, #8
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	601a      	str	r2, [r3, #0]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	3304      	adds	r3, #4
 8016290:	2403      	movs	r4, #3
 8016292:	461d      	mov	r5, r3
 8016294:	e004      	b.n	80162a0 <_ZN28core_utils_CallbackContainerILi4EtEC1Ev+0x22>
 8016296:	4628      	mov	r0, r5
 8016298:	f7fc fb18 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 801629c:	3c01      	subs	r4, #1
 801629e:	3520      	adds	r5, #32
 80162a0:	2c00      	cmp	r4, #0
 80162a2:	daf8      	bge.n	8016296 <_ZN28core_utils_CallbackContainerILi4EtEC1Ev+0x18>

	}
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	4618      	mov	r0, r3
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bdb0      	pop	{r4, r5, r7, pc}

080162ae <_ZN28core_utils_CallbackContainerILi4EmEC1Ev>:
	core_utils_CallbackContainer() {
 80162ae:	b5b0      	push	{r4, r5, r7, lr}
 80162b0:	b082      	sub	sp, #8
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	6078      	str	r0, [r7, #4]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2200      	movs	r2, #0
 80162ba:	601a      	str	r2, [r3, #0]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	3304      	adds	r3, #4
 80162c0:	2403      	movs	r4, #3
 80162c2:	461d      	mov	r5, r3
 80162c4:	e004      	b.n	80162d0 <_ZN28core_utils_CallbackContainerILi4EmEC1Ev+0x22>
 80162c6:	4628      	mov	r0, r5
 80162c8:	f000 f86c 	bl	80163a4 <_ZN19core_utils_CallbackIvmEC1Ev>
 80162cc:	3c01      	subs	r4, #1
 80162ce:	3520      	adds	r5, #32
 80162d0:	2c00      	cmp	r4, #0
 80162d2:	daf8      	bge.n	80162c6 <_ZN28core_utils_CallbackContainerILi4EmEC1Ev+0x18>
	}
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	4618      	mov	r0, r3
 80162d8:	3708      	adds	r7, #8
 80162da:	46bd      	mov	sp, r7
 80162dc:	bdb0      	pop	{r4, r5, r7, pc}

080162de <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tEC1Ev>:
	core_utils_CallbackContainer() {
 80162de:	b5b0      	push	{r4, r5, r7, lr}
 80162e0:	b082      	sub	sp, #8
 80162e2:	af00      	add	r7, sp, #0
 80162e4:	6078      	str	r0, [r7, #4]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	2200      	movs	r2, #0
 80162ea:	601a      	str	r2, [r3, #0]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	3304      	adds	r3, #4
 80162f0:	2403      	movs	r4, #3
 80162f2:	461d      	mov	r5, r3
 80162f4:	e004      	b.n	8016300 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tEC1Ev+0x22>
 80162f6:	4628      	mov	r0, r5
 80162f8:	f000 f872 	bl	80163e0 <_ZN19core_utils_CallbackIv20twipr_control_mode_tEC1Ev>
 80162fc:	3c01      	subs	r4, #1
 80162fe:	3520      	adds	r5, #32
 8016300:	2c00      	cmp	r4, #0
 8016302:	daf8      	bge.n	80162f6 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tEC1Ev+0x18>
	}
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	4618      	mov	r0, r3
 8016308:	3708      	adds	r7, #8
 801630a:	46bd      	mov	sp, r7
 801630c:	bdb0      	pop	{r4, r5, r7, pc}

0801630e <_ZN28core_utils_CallbackContainerILi4EmE4callEm>:
		} else {
			return false;
		}
	}

	void call(input_type input) {
 801630e:	b580      	push	{r7, lr}
 8016310:	b084      	sub	sp, #16
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]
 8016316:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < num_callbacks; i++) {
 8016318:	2300      	movs	r3, #0
 801631a:	60fb      	str	r3, [r7, #12]
 801631c:	e013      	b.n	8016346 <_ZN28core_utils_CallbackContainerILi4EmE4callEm+0x38>
			if (this->callbacks[i].registered) {
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	015b      	lsls	r3, r3, #5
 8016324:	4413      	add	r3, r2
 8016326:	3308      	adds	r3, #8
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d008      	beq.n	8016340 <_ZN28core_utils_CallbackContainerILi4EmE4callEm+0x32>
				this->callbacks[i].call(input);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	015b      	lsls	r3, r3, #5
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	4413      	add	r3, r2
 8016336:	3304      	adds	r3, #4
 8016338:	6839      	ldr	r1, [r7, #0]
 801633a:	4618      	mov	r0, r3
 801633c:	f000 f86e 	bl	801641c <_ZN19core_utils_CallbackIvmE4callEm>
		for (int i = 0; i < num_callbacks; i++) {
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	3301      	adds	r3, #1
 8016344:	60fb      	str	r3, [r7, #12]
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2b03      	cmp	r3, #3
 801634a:	dde8      	ble.n	801631e <_ZN28core_utils_CallbackContainerILi4EmE4callEm+0x10>
			}
		}
	}
 801634c:	bf00      	nop
 801634e:	bf00      	nop
 8016350:	3710      	adds	r7, #16
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE4callES0_>:
	void call(input_type input) {
 8016356:	b580      	push	{r7, lr}
 8016358:	b084      	sub	sp, #16
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
 801635e:	460b      	mov	r3, r1
 8016360:	70fb      	strb	r3, [r7, #3]
		for (int i = 0; i < num_callbacks; i++) {
 8016362:	2300      	movs	r3, #0
 8016364:	60fb      	str	r3, [r7, #12]
 8016366:	e014      	b.n	8016392 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE4callES0_+0x3c>
			if (this->callbacks[i].registered) {
 8016368:	687a      	ldr	r2, [r7, #4]
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	015b      	lsls	r3, r3, #5
 801636e:	4413      	add	r3, r2
 8016370:	3308      	adds	r3, #8
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d009      	beq.n	801638c <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE4callES0_+0x36>
				this->callbacks[i].call(input);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	015b      	lsls	r3, r3, #5
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	4413      	add	r3, r2
 8016380:	3304      	adds	r3, #4
 8016382:	78fa      	ldrb	r2, [r7, #3]
 8016384:	4611      	mov	r1, r2
 8016386:	4618      	mov	r0, r3
 8016388:	f000 f857 	bl	801643a <_ZN19core_utils_CallbackIv20twipr_control_mode_tE4callES0_>
		for (int i = 0; i < num_callbacks; i++) {
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	3301      	adds	r3, #1
 8016390:	60fb      	str	r3, [r7, #12]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	2b03      	cmp	r3, #3
 8016396:	dde7      	ble.n	8016368 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE4callES0_+0x12>
	}
 8016398:	bf00      	nop
 801639a:	bf00      	nop
 801639c:	3710      	adds	r7, #16
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
	...

080163a4 <_ZN19core_utils_CallbackIvmEC1Ev>:
	core_utils_Callback() {
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b082      	sub	sp, #8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	4618      	mov	r0, r3
 80163b0:	f7fc f8d4 	bl	801255c <_ZN8CallbackC1Ev>
 80163b4:	4a09      	ldr	r2, [pc, #36]	@ (80163dc <_ZN19core_utils_CallbackIvmEC1Ev+0x38>)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	601a      	str	r2, [r3, #0]
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2200      	movs	r2, #0
 80163be:	711a      	strb	r2, [r3, #4]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	3308      	adds	r3, #8
 80163c4:	2100      	movs	r1, #0
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 f848 	bl	801645c <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		this->registered = 0;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2200      	movs	r2, #0
 80163d0:	711a      	strb	r2, [r3, #4]
	}
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	4618      	mov	r0, r3
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	0802624c 	.word	0x0802624c

080163e0 <_ZN19core_utils_CallbackIv20twipr_control_mode_tEC1Ev>:
	core_utils_Callback() {
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7fc f8b6 	bl	801255c <_ZN8CallbackC1Ev>
 80163f0:	4a09      	ldr	r2, [pc, #36]	@ (8016418 <_ZN19core_utils_CallbackIv20twipr_control_mode_tEC1Ev+0x38>)
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	601a      	str	r2, [r3, #0]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	2200      	movs	r2, #0
 80163fa:	711a      	strb	r2, [r3, #4]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	3308      	adds	r3, #8
 8016400:	2100      	movs	r1, #0
 8016402:	4618      	mov	r0, r3
 8016404:	f000 f838 	bl	8016478 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tEC1EPFvS0_E>
		this->registered = 0;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2200      	movs	r2, #0
 801640c:	711a      	strb	r2, [r3, #4]
	}
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	4618      	mov	r0, r3
 8016412:	3708      	adds	r7, #8
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}
 8016418:	0802623c 	.word	0x0802623c

0801641c <_ZN19core_utils_CallbackIvmE4callEm>:
	void call(input_type input) {
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	6039      	str	r1, [r7, #0]
		this->_fp(input);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	3308      	adds	r3, #8
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	4618      	mov	r0, r3
 801642e:	f000 f831 	bl	8016494 <_ZN26core_utils_FunctionPointerIvmEclEm>
	}
 8016432:	bf00      	nop
 8016434:	3708      	adds	r7, #8
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <_ZN19core_utils_CallbackIv20twipr_control_mode_tE4callES0_>:
	void call(input_type input) {
 801643a:	b580      	push	{r7, lr}
 801643c:	b082      	sub	sp, #8
 801643e:	af00      	add	r7, sp, #0
 8016440:	6078      	str	r0, [r7, #4]
 8016442:	460b      	mov	r3, r1
 8016444:	70fb      	strb	r3, [r7, #3]
		this->_fp(input);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	3308      	adds	r3, #8
 801644a:	78fa      	ldrb	r2, [r7, #3]
 801644c:	4611      	mov	r1, r2
 801644e:	4618      	mov	r0, r3
 8016450:	f000 f82d 	bl	80164ae <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tEclES0_>
	}
 8016454:	bf00      	nop
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}

0801645c <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	6039      	str	r1, [r7, #0]
        attach(function);
 8016466:	6839      	ldr	r1, [r7, #0]
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f000 f82f 	bl	80164cc <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>
    }
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	4618      	mov	r0, r3
 8016472:	3708      	adds	r7, #8
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	6039      	str	r1, [r7, #0]
        attach(function);
 8016482:	6839      	ldr	r1, [r7, #0]
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f000 f832 	bl	80164ee <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE6attachEPFvS0_E>
    }
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	4618      	mov	r0, r3
 801648e:	3708      	adds	r7, #8
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <_ZN26core_utils_FunctionPointerIvmEclEm>:
    R operator ()(A1 a) {
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
        return call(a);
 801649e:	6839      	ldr	r1, [r7, #0]
 80164a0:	6878      	ldr	r0, [r7, #4]
 80164a2:	f000 f835 	bl	8016510 <_ZN26core_utils_FunctionPointerIvmE4callEm>
 80164a6:	bf00      	nop
    }
 80164a8:	3708      	adds	r7, #8
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}

080164ae <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tEclES0_>:
    R operator ()(A1 a) {
 80164ae:	b580      	push	{r7, lr}
 80164b0:	b082      	sub	sp, #8
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	6078      	str	r0, [r7, #4]
 80164b6:	460b      	mov	r3, r1
 80164b8:	70fb      	strb	r3, [r7, #3]
        return call(a);
 80164ba:	78fb      	ldrb	r3, [r7, #3]
 80164bc:	4619      	mov	r1, r3
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f000 f84d 	bl	801655e <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_>
 80164c4:	bf00      	nop
    }
 80164c6:	3708      	adds	r7, #8
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}

080164cc <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>:
    void attach(R (*function)(A1)) {
 80164cc:	b480      	push	{r7}
 80164ce:	b083      	sub	sp, #12
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	683a      	ldr	r2, [r7, #0]
 80164da:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2200      	movs	r2, #0
 80164e0:	615a      	str	r2, [r3, #20]
    }
 80164e2:	bf00      	nop
 80164e4:	370c      	adds	r7, #12
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr

080164ee <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 80164ee:	b480      	push	{r7}
 80164f0:	b083      	sub	sp, #12
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	683a      	ldr	r2, [r7, #0]
 80164fc:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2200      	movs	r2, #0
 8016502:	615a      	str	r2, [r3, #20]
    }
 8016504:	bf00      	nop
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr

08016510 <_ZN26core_utils_FunctionPointerIvmE4callEm>:
    R call(A1 a) {
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	695b      	ldr	r3, [r3, #20]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d108      	bne.n	8016534 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d004      	beq.n	8016534 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
           return _p.function(a);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	6838      	ldr	r0, [r7, #0]
 8016530:	4798      	blx	r3
 8016532:	e011      	b.n	8016558 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        } else if (_membercaller && _p.object) {
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	695b      	ldr	r3, [r3, #20]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d00c      	beq.n	8016556 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d008      	beq.n	8016556 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
           return _membercaller(_p.object, _member, a);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	695b      	ldr	r3, [r3, #20]
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	6810      	ldr	r0, [r2, #0]
 801654c:	687a      	ldr	r2, [r7, #4]
 801654e:	1d11      	adds	r1, r2, #4
 8016550:	683a      	ldr	r2, [r7, #0]
 8016552:	4798      	blx	r3
 8016554:	e000      	b.n	8016558 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        return R();
 8016556:	bf00      	nop
    }
 8016558:	3708      	adds	r7, #8
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}

0801655e <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_>:
    R call(A1 a) {
 801655e:	b580      	push	{r7, lr}
 8016560:	b082      	sub	sp, #8
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
 8016566:	460b      	mov	r3, r1
 8016568:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	695b      	ldr	r3, [r3, #20]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d109      	bne.n	8016586 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_+0x28>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d005      	beq.n	8016586 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_+0x28>
           return _p.function(a);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	78fa      	ldrb	r2, [r7, #3]
 8016580:	4610      	mov	r0, r2
 8016582:	4798      	blx	r3
 8016584:	e011      	b.n	80165aa <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_+0x4c>
        } else if (_membercaller && _p.object) {
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	695b      	ldr	r3, [r3, #20]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d00c      	beq.n	80165a8 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_+0x4a>
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d008      	beq.n	80165a8 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_+0x4a>
           return _membercaller(_p.object, _member, a);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	695b      	ldr	r3, [r3, #20]
 801659a:	687a      	ldr	r2, [r7, #4]
 801659c:	6810      	ldr	r0, [r2, #0]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	1d11      	adds	r1, r2, #4
 80165a2:	78fa      	ldrb	r2, [r7, #3]
 80165a4:	4798      	blx	r3
 80165a6:	e000      	b.n	80165aa <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE4callES0_+0x4c>
        return R();
 80165a8:	bf00      	nop
    }
 80165aa:	3708      	adds	r7, #8
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <_ZN36twipr_speed_control_forward_config_tC1Ev>:

#include "core.h"

class TWIPR_Supervisor; // Definition for a supervisor to have access to the private methods and variables

typedef struct twipr_speed_control_forward_config_t {
 80165b0:	b480      	push	{r7}
 80165b2:	b083      	sub	sp, #12
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2200      	movs	r2, #0
 80165bc:	741a      	strb	r2, [r3, #16]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f04f 0200 	mov.w	r2, #0
 80165c4:	615a      	str	r2, [r3, #20]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2200      	movs	r2, #0
 80165ca:	761a      	strb	r2, [r3, #24]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	4a08      	ldr	r2, [pc, #32]	@ (80165f0 <_ZN36twipr_speed_control_forward_config_tC1Ev+0x40>)
 80165d0:	61da      	str	r2, [r3, #28]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2200      	movs	r2, #0
 80165d6:	f883 2020 	strb.w	r2, [r3, #32]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f04f 0200 	mov.w	r2, #0
 80165e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	4618      	mov	r0, r3
 80165e6:	370c      	adds	r7, #12
 80165e8:	46bd      	mov	sp, r7
 80165ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ee:	4770      	bx	lr
 80165f0:	3d4ccccd 	.word	0x3d4ccccd

080165f4 <_ZN33twipr_speed_control_turn_config_tC1Ev>:

	bool enable_rate_limit = false;
	float rate_limit = 0;
} twipr_speed_control_forward_config_t;

typedef struct twipr_speed_control_turn_config_t {
 80165f4:	b480      	push	{r7}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2200      	movs	r2, #0
 8016600:	741a      	strb	r2, [r3, #16]
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f04f 0200 	mov.w	r2, #0
 8016608:	615a      	str	r2, [r3, #20]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2200      	movs	r2, #0
 801660e:	761a      	strb	r2, [r3, #24]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8016616:	61da      	str	r2, [r3, #28]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2200      	movs	r2, #0
 801661c:	f883 2020 	strb.w	r2, [r3, #32]
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f04f 0200 	mov.w	r2, #0
 8016626:	625a      	str	r2, [r3, #36]	@ 0x24
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	4618      	mov	r0, r3
 801662c:	370c      	adds	r7, #12
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr

08016636 <_ZN28twipr_speed_control_config_tC1Ev>:

	bool enable_rate_limit = false;
	float rate_limit = 0;
} twipr_speed_control_turn_config_t;

typedef struct twipr_speed_control_config_t {
 8016636:	b580      	push	{r7, lr}
 8016638:	b082      	sub	sp, #8
 801663a:	af00      	add	r7, sp, #0
 801663c:	6078      	str	r0, [r7, #4]
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	4618      	mov	r0, r3
 8016642:	f7ff ffb5 	bl	80165b0 <_ZN36twipr_speed_control_forward_config_tC1Ev>
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	3328      	adds	r3, #40	@ 0x28
 801664a:	4618      	mov	r0, r3
 801664c:	f7ff ffd2 	bl	80165f4 <_ZN33twipr_speed_control_turn_config_tC1Ev>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	4618      	mov	r0, r3
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <_ZN18TWIPR_SpeedControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_speed_control.h"

TWIPR_SpeedControl::TWIPR_SpeedControl() {
 801665a:	b580      	push	{r7, lr}
 801665c:	b082      	sub	sp, #8
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	4618      	mov	r0, r3
 8016666:	f7ff ffe6 	bl	8016636 <_ZN28twipr_speed_control_config_tC1Ev>
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	3360      	adds	r3, #96	@ 0x60
 801666e:	4618      	mov	r0, r3
 8016670:	f008 fa2f 	bl	801ead2 <_ZN11PID_ControlC1Ev>
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	339c      	adds	r3, #156	@ 0x9c
 8016678:	4618      	mov	r0, r3
 801667a:	f008 fa2a 	bl	801ead2 <_ZN11PID_ControlC1Ev>

}
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <_ZN18TWIPR_SpeedControl4initE28twipr_speed_control_config_t>:


uint8_t counter = 0;

// =========================================================================================================================== //
void TWIPR_SpeedControl::init(twipr_speed_control_config_t config) {
 8016688:	b084      	sub	sp, #16
 801668a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801668c:	b0a5      	sub	sp, #148	@ 0x94
 801668e:	af0a      	add	r7, sp, #40	@ 0x28
 8016690:	6078      	str	r0, [r7, #4]
 8016692:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	4618      	mov	r0, r3
 801669e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80166a2:	2250      	movs	r2, #80	@ 0x50
 80166a4:	4619      	mov	r1, r3
 80166a6:	f00d fca0 	bl	8023fea <memcpy>
	pid_control_config_t forward_control_config = { .Kp =
			this->config.forward_config.Kp,
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
			.output_limit_max = this->config.forward_config.output_limit,
			.output_limit_min = -this->config.forward_config.output_limit,

			.enable_rate_limit = this->config.forward_config.enable_rate_limit,
			.rate_limit_max = this->config.forward_config.rate_limit,
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166ae:	63bb      	str	r3, [r7, #56]	@ 0x38
			.Ki = this->config.forward_config.Ki, .Kd =
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	685b      	ldr	r3, [r3, #4]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
					this->config.forward_config.Kd, .Ts =
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	689b      	ldr	r3, [r3, #8]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166ba:	643b      	str	r3, [r7, #64]	@ 0x40
					this->config.forward_config.Ts,
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	68db      	ldr	r3, [r3, #12]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166c0:	647b      	str	r3, [r7, #68]	@ 0x44
					this->config.forward_config.enable_integral_limit,
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	7e1b      	ldrb	r3, [r3, #24]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
			.error_integral_limit = this->config.forward_config.integral_limit,
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	69db      	ldr	r3, [r3, #28]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
					this->config.forward_config.enable_output_limit,
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	7c1b      	ldrb	r3, [r3, #16]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166d4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
			.output_limit_max = this->config.forward_config.output_limit,
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	695b      	ldr	r3, [r3, #20]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166dc:	657b      	str	r3, [r7, #84]	@ 0x54
			.output_limit_min = -this->config.forward_config.output_limit,
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80166e4:	eef1 7a67 	vneg.f32	s15, s15
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166e8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			.enable_rate_limit = this->config.forward_config.enable_rate_limit,
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f893 3020 	ldrb.w	r3, [r3, #32]
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166f2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
			.rate_limit_max = this->config.forward_config.rate_limit,
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			.rate_limit_min = -this->config.forward_config.rate_limit, };
 80166fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8016702:	eef1 7a67 	vneg.f32	s15, s15
 8016706:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

	pid_control_config_t turn_control_config = { .Kp =
			this->config.turn_config.Kp, .Ki = this->config.turn_config.Ki,
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			.output_limit_max = this->config.turn_config.output_limit,
			.output_limit_min = -this->config.turn_config.output_limit,

			.enable_rate_limit = this->config.turn_config.enable_rate_limit,
			.rate_limit_max = this->config.turn_config.rate_limit,
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801670e:	60bb      	str	r3, [r7, #8]
			this->config.turn_config.Kp, .Ki = this->config.turn_config.Ki,
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016714:	60fb      	str	r3, [r7, #12]
			.Kd = this->config.turn_config.Kd,
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801671a:	613b      	str	r3, [r7, #16]
			.Ts = this->config.turn_config.Ts,
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016720:	617b      	str	r3, [r7, #20]
					this->config.turn_config.enable_integral_limit,
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016728:	763b      	strb	r3, [r7, #24]
			.error_integral_limit = this->config.turn_config.integral_limit,
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801672e:	61fb      	str	r3, [r7, #28]
			.enable_output_limit = this->config.turn_config.enable_output_limit,
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016736:	f887 3020 	strb.w	r3, [r7, #32]
			.output_limit_max = this->config.turn_config.output_limit,
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801673e:	627b      	str	r3, [r7, #36]	@ 0x24
			.output_limit_min = -this->config.turn_config.output_limit,
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8016746:	eef1 7a67 	vneg.f32	s15, s15
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801674a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			.enable_rate_limit = this->config.turn_config.enable_rate_limit,
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 8016754:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			.rate_limit_max = this->config.turn_config.rate_limit,
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
			.rate_limit_min = -this->config.turn_config.rate_limit, };
 801675c:	633b      	str	r3, [r7, #48]	@ 0x30
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8016764:	eef1 7a67 	vneg.f32	s15, s15
 8016768:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	this->_forward_control_pid.init(forward_control_config);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f103 0660 	add.w	r6, r3, #96	@ 0x60
 8016772:	466d      	mov	r5, sp
 8016774:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8016778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801677a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801677c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801677e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016780:	6823      	ldr	r3, [r4, #0]
 8016782:	602b      	str	r3, [r5, #0]
 8016784:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016788:	cb0e      	ldmia	r3, {r1, r2, r3}
 801678a:	4630      	mov	r0, r6
 801678c:	f008 f9ae 	bl	801eaec <_ZN11PID_Control4initE20pid_control_config_t>
	this->_turn_control_pid.init(turn_control_config);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f103 069c 	add.w	r6, r3, #156	@ 0x9c
 8016796:	466d      	mov	r5, sp
 8016798:	f107 0414 	add.w	r4, r7, #20
 801679c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801679e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167a4:	6823      	ldr	r3, [r4, #0]
 80167a6:	602b      	str	r3, [r5, #0]
 80167a8:	f107 0308 	add.w	r3, r7, #8
 80167ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80167ae:	4630      	mov	r0, r6
 80167b0:	f008 f99c 	bl	801eaec <_ZN11PID_Control4initE20pid_control_config_t>

}
 80167b4:	bf00      	nop
 80167b6:	376c      	adds	r7, #108	@ 0x6c
 80167b8:	46bd      	mov	sp, r7
 80167ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167be:	b004      	add	sp, #16
 80167c0:	4770      	bx	lr

080167c2 <_ZN18TWIPR_SpeedControl5resetEv>:

void TWIPR_SpeedControl::reset() {
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b082      	sub	sp, #8
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
	this->_forward_control_pid.reset();
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	3360      	adds	r3, #96	@ 0x60
 80167ce:	4618      	mov	r0, r3
 80167d0:	f008 f9ab 	bl	801eb2a <_ZN11PID_Control5resetEv>
	this->_turn_control_pid.reset();
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	339c      	adds	r3, #156	@ 0x9c
 80167d8:	4618      	mov	r0, r3
 80167da:	f008 f9a6 	bl	801eb2a <_ZN11PID_Control5resetEv>

	this->input.forward = 0;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f04f 0200 	mov.w	r2, #0
 80167e4:	651a      	str	r2, [r3, #80]	@ 0x50
	this->input.turn = 0;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f04f 0200 	mov.w	r2, #0
 80167ec:	655a      	str	r2, [r3, #84]	@ 0x54
	this->output.input_left = 0;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f04f 0200 	mov.w	r2, #0
 80167f4:	659a      	str	r2, [r3, #88]	@ 0x58
	this->output.input_right = 0;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f04f 0200 	mov.w	r2, #0
 80167fc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80167fe:	bf00      	nop
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <_ZN18TWIPR_SpeedControl6updateE27twipr_speed_control_input_tff>:

// =========================================================================================================================== //
twipr_speed_control_output_t TWIPR_SpeedControl::update(
		twipr_speed_control_input_t input, float speed_forward_meas,
		float speed_turn_meas) {
 8016806:	b580      	push	{r7, lr}
 8016808:	b090      	sub	sp, #64	@ 0x40
 801680a:	af00      	add	r7, sp, #0
 801680c:	61f8      	str	r0, [r7, #28]
 801680e:	eeb0 7a40 	vmov.f32	s14, s0
 8016812:	eef0 7a60 	vmov.f32	s15, s1
 8016816:	ed87 1a04 	vstr	s2, [r7, #16]
 801681a:	edc7 1a03 	vstr	s3, [r7, #12]
 801681e:	ed87 7a05 	vstr	s14, [r7, #20]
 8016822:	edc7 7a06 	vstr	s15, [r7, #24]
	twipr_speed_control_output_t output = { .input_left = 0, .input_right = 0 };
 8016826:	f04f 0300 	mov.w	r3, #0
 801682a:	623b      	str	r3, [r7, #32]
 801682c:	f04f 0300 	mov.w	r3, #0
 8016830:	627b      	str	r3, [r7, #36]	@ 0x24

	this->input = input;
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	3350      	adds	r3, #80	@ 0x50
 8016836:	f107 0214 	add.w	r2, r7, #20
 801683a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801683e:	e883 0003 	stmia.w	r3, {r0, r1}
	float error_speed = input.forward - speed_forward_meas;
 8016842:	ed97 7a05 	vldr	s14, [r7, #20]
 8016846:	edd7 7a04 	vldr	s15, [r7, #16]
 801684a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801684e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float error_turn = input.turn - speed_turn_meas;
 8016852:	ed97 7a06 	vldr	s14, [r7, #24]
 8016856:	edd7 7a03 	vldr	s15, [r7, #12]
 801685a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801685e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	float output_forward = this->_forward_control_pid.update(error_speed);
 8016862:	69fb      	ldr	r3, [r7, #28]
 8016864:	3360      	adds	r3, #96	@ 0x60
 8016866:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 801686a:	4618      	mov	r0, r3
 801686c:	f008 f973 	bl	801eb56 <_ZN11PID_Control6updateEf>
 8016870:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	float output_turn = this->_turn_control_pid.update(error_turn);
 8016874:	69fb      	ldr	r3, [r7, #28]
 8016876:	339c      	adds	r3, #156	@ 0x9c
 8016878:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 801687c:	4618      	mov	r0, r3
 801687e:	f008 f96a 	bl	801eb56 <_ZN11PID_Control6updateEf>
 8016882:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

	this->output.input_left = output_forward / 2.0 + output_turn / 2.0;
 8016886:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801688a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801688e:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8016892:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8016896:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801689a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801689e:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80168a2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80168a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80168aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80168ae:	69fb      	ldr	r3, [r7, #28]
 80168b0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	this->output.input_right = output_forward / 2.0 - output_turn / 2.0;
 80168b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80168b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80168bc:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80168c0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80168c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80168c8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80168cc:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80168d0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80168d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80168d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	return this->output;
 80168e2:	69fa      	ldr	r2, [r7, #28]
 80168e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80168e8:	3258      	adds	r2, #88	@ 0x58
 80168ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168ee:	e883 0003 	stmia.w	r3, {r0, r1}

	return output;
}
 80168f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80168f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168f6:	ee07 2a10 	vmov	s14, r2
 80168fa:	ee07 3a90 	vmov	s15, r3
 80168fe:	eeb0 0a47 	vmov.f32	s0, s14
 8016902:	eef0 0a67 	vmov.f32	s1, s15
 8016906:	3740      	adds	r7, #64	@ 0x40
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <_ZN18TWIPR_SpeedControl13setForwardPIDEfff>:

// =========================================================================================================================== //
void TWIPR_SpeedControl::setForwardPID(float Kp, float Ki, float Kd) {
 801690c:	b480      	push	{r7}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	ed87 0a02 	vstr	s0, [r7, #8]
 8016918:	edc7 0a01 	vstr	s1, [r7, #4]
 801691c:	ed87 1a00 	vstr	s2, [r7]
	this->config.forward_config.Kp = Kp;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	68ba      	ldr	r2, [r7, #8]
 8016924:	601a      	str	r2, [r3, #0]
	this->config.forward_config.Ki = Ki;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	687a      	ldr	r2, [r7, #4]
 801692a:	605a      	str	r2, [r3, #4]
	this->config.forward_config.Kd = Kd;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	683a      	ldr	r2, [r7, #0]
 8016930:	609a      	str	r2, [r3, #8]

	this->_forward_control_pid.config.Kp = Kp;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	68ba      	ldr	r2, [r7, #8]
 8016936:	661a      	str	r2, [r3, #96]	@ 0x60
	this->_forward_control_pid.config.Ki = Ki;
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	687a      	ldr	r2, [r7, #4]
 801693c:	665a      	str	r2, [r3, #100]	@ 0x64
	this->_forward_control_pid.config.Kd = Kd;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	683a      	ldr	r2, [r7, #0]
 8016942:	669a      	str	r2, [r3, #104]	@ 0x68

}
 8016944:	bf00      	nop
 8016946:	3714      	adds	r7, #20
 8016948:	46bd      	mov	sp, r7
 801694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694e:	4770      	bx	lr

08016950 <_ZN18TWIPR_SpeedControl10setTurnPIDEfff>:

// =========================================================================================================================== //
void TWIPR_SpeedControl::setTurnPID(float Kp, float Ki, float Kd) {
 8016950:	b480      	push	{r7}
 8016952:	b085      	sub	sp, #20
 8016954:	af00      	add	r7, sp, #0
 8016956:	60f8      	str	r0, [r7, #12]
 8016958:	ed87 0a02 	vstr	s0, [r7, #8]
 801695c:	edc7 0a01 	vstr	s1, [r7, #4]
 8016960:	ed87 1a00 	vstr	s2, [r7]
	this->config.turn_config.Kp = Kp;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	68ba      	ldr	r2, [r7, #8]
 8016968:	629a      	str	r2, [r3, #40]	@ 0x28
	this->config.turn_config.Ki = Ki;
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	62da      	str	r2, [r3, #44]	@ 0x2c
	this->config.turn_config.Kd = Kd;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	683a      	ldr	r2, [r7, #0]
 8016974:	631a      	str	r2, [r3, #48]	@ 0x30

	this->_turn_control_pid.config.Kp = Kp;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	68ba      	ldr	r2, [r7, #8]
 801697a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	this->_turn_control_pid.config.Ki = Ki;
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	687a      	ldr	r2, [r7, #4]
 8016982:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	this->_turn_control_pid.config.Kd = Kd;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	683a      	ldr	r2, [r7, #0]
 801698a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
}
 801698e:	bf00      	nop
 8016990:	3714      	adds	r7, #20
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr

0801699a <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 801699a:	b480      	push	{r7}
 801699c:	b083      	sub	sp, #12
 801699e:	af00      	add	r7, sp, #0
 80169a0:	ed87 0a01 	vstr	s0, [r7, #4]
 80169a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80169a8:	eef0 7ae7 	vabs.f32	s15, s15
 80169ac:	eeb0 0a67 	vmov.f32	s0, s15
 80169b0:	370c      	adds	r7, #12
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr

080169ba <_ZN13elapsedMillis5resetEv>:

class elapsedMillis {
private:
	unsigned long ms;
public:
	void reset() {
 80169ba:	b580      	push	{r7, lr}
 80169bc:	b082      	sub	sp, #8
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
		ms = millis();
 80169c2:	f00b faf7 	bl	8021fb4 <_Z6millisv>
 80169c6:	4602      	mov	r2, r0
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	601a      	str	r2, [r3, #0]
	}
 80169cc:	bf00      	nop
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <_ZN13elapsedMillisC1Ev>:
	elapsedMillis(void) {
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
		ms = millis();
 80169dc:	f00b faea 	bl	8021fb4 <_Z6millisv>
 80169e0:	4602      	mov	r2, r0
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	601a      	str	r2, [r3, #0]
	}
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	4618      	mov	r0, r3
 80169ea:	3708      	adds	r7, #8
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <_ZNK13elapsedMilliscvmEv>:
		ms = millis() - val;
	}
	elapsedMillis(const elapsedMillis &orig) {
		ms = orig.ms;
	}
	operator unsigned long() const {
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
		return millis() - ms;
 80169f8:	f00b fadc 	bl	8021fb4 <_Z6millisv>
 80169fc:	4602      	mov	r2, r0
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	1ad3      	subs	r3, r2, r3
	}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3708      	adds	r7, #8
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}

08016a0c <_Z41__static_initialization_and_destruction_0ii>:
	this->status = TWIPR_DRIVE_STATUS_ERROR;
	this->error = (twipr_drive_error_t) error;

	// Call the error handler of the TWIPR
	twipr_error_handler(error);
}
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
 8016a14:	6039      	str	r1, [r7, #0]
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2b01      	cmp	r3, #1
 8016a1a:	d107      	bne.n	8016a2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a22:	4293      	cmp	r3, r2
 8016a24:	d102      	bne.n	8016a2c <_Z41__static_initialization_and_destruction_0ii+0x20>
elapsedMillis raceConditionTimer;
 8016a26:	4803      	ldr	r0, [pc, #12]	@ (8016a34 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8016a28:	f7ff ffd4 	bl	80169d4 <_ZN13elapsedMillisC1Ev>
}
 8016a2c:	bf00      	nop
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	2401f3b4 	.word	0x2401f3b4

08016a38 <_GLOBAL__sub_I_speed_semaphore>:
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	af00      	add	r7, sp, #0
 8016a3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016a40:	2001      	movs	r0, #1
 8016a42:	f7ff ffe3 	bl	8016a0c <_Z41__static_initialization_and_destruction_0ii>
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <_ZN13elapsedMillisC1Em>:
	elapsedMillis(unsigned long val) {
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
 8016a50:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 8016a52:	f00b faaf 	bl	8021fb4 <_Z6millisv>
 8016a56:	4602      	mov	r2, r0
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	1ad2      	subs	r2, r2, r3
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	601a      	str	r2, [r3, #0]
	}
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	4618      	mov	r0, r3
 8016a64:	3708      	adds	r7, #8
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}

08016a6a <_ZN17SimplexMotion_CANC1Ev>:

osSemaphoreId_t drive_can_speed_semaphore;
osSemaphoreId_t drive_can_voltage_semaphore;
osSemaphoreId_t drive_can_torque_semaphore;

SimplexMotion_CAN::SimplexMotion_CAN() {
 8016a6a:	b480      	push	{r7}
 8016a6c:	b083      	sub	sp, #12
 8016a6e:	af00      	add	r7, sp, #0
 8016a70:	6078      	str	r0, [r7, #4]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2200      	movs	r2, #0
 8016a76:	701a      	strb	r2, [r3, #0]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	611a      	str	r2, [r3, #16]

}
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	4618      	mov	r0, r3
 8016a82:	370c      	adds	r7, #12
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr

08016a8c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::init(simplexmotion_can_config_t config) {
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b086      	sub	sp, #24
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	60f8      	str	r0, [r7, #12]
 8016a94:	4638      	mov	r0, r7
 8016a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	3304      	adds	r3, #4
 8016a9e:	463a      	mov	r2, r7
 8016aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8016aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_StatusTypeDef status;
	// Check the communication
	status = this->checkCommunication();
 8016aa6:	68f8      	ldr	r0, [r7, #12]
 8016aa8:	f000 f91a 	bl	8016ce0 <_ZN17SimplexMotion_CAN18checkCommunicationEv>
 8016aac:	4603      	mov	r3, r0
 8016aae:	75fb      	strb	r3, [r7, #23]

	if (status) {
 8016ab0:	7dfb      	ldrb	r3, [r7, #23]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d001      	beq.n	8016aba <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x2e>
		return HAL_ERROR;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	e024      	b.n	8016b04 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x78>
	}
	// Read the Firmware Version
	uint16_t software_rev = 0;
 8016aba:	2300      	movs	r3, #0
 8016abc:	82bb      	strh	r3, [r7, #20]
	status = this->readSoftwareRev(software_rev);
 8016abe:	f107 0314 	add.w	r3, r7, #20
 8016ac2:	4619      	mov	r1, r3
 8016ac4:	68f8      	ldr	r0, [r7, #12]
 8016ac6:	f000 f9bd 	bl	8016e44 <_ZN17SimplexMotion_CAN15readSoftwareRevERt>
 8016aca:	4603      	mov	r3, r0
 8016acc:	75fb      	strb	r3, [r7, #23]

	// Reset the motor
	status = this->setMode(SIMPLEXMOTION_CAN_MODE_RESET);
 8016ace:	2101      	movs	r1, #1
 8016ad0:	68f8      	ldr	r0, [r7, #12]
 8016ad2:	f000 f9c6 	bl	8016e62 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	75fb      	strb	r3, [r7, #23]

	if (status) {
 8016ada:	7dfb      	ldrb	r3, [r7, #23]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d001      	beq.n	8016ae4 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x58>
		return HAL_ERROR;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	e00f      	b.n	8016b04 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x78>
	}

	// Set the torque limit
	status = this->setTorqueLimit(this->config.torque_limit);
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8016aea:	eeb0 0a67 	vmov.f32	s0, s15
 8016aee:	68f8      	ldr	r0, [r7, #12]
 8016af0:	f000 fa58 	bl	8016fa4 <_ZN17SimplexMotion_CAN14setTorqueLimitEf>
 8016af4:	4603      	mov	r3, r0
 8016af6:	75fb      	strb	r3, [r7, #23]

	if (status) {
 8016af8:	7dfb      	ldrb	r3, [r7, #23]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d001      	beq.n	8016b02 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x76>
		return HAL_ERROR;
 8016afe:	2301      	movs	r3, #1
 8016b00:	e000      	b.n	8016b04 <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t+0x78>
	}

	// Beep

	return HAL_OK;
 8016b02:	2300      	movs	r3, #0
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	3718      	adds	r7, #24
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::start(simplexmotion_can_mode_t mode) {
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	460b      	mov	r3, r1
 8016b16:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	status = this->setTarget(0);
 8016b18:	2100      	movs	r1, #0
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f000 f9fc 	bl	8016f18 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016b20:	4603      	mov	r3, r0
 8016b22:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016b24:	7bfb      	ldrb	r3, [r7, #15]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d001      	beq.n	8016b2e <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x22>
		return HAL_ERROR;
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	e00c      	b.n	8016b48 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x3c>
	}

	status = this->setMode(mode);
 8016b2e:	78fb      	ldrb	r3, [r7, #3]
 8016b30:	4619      	mov	r1, r3
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	f000 f995 	bl	8016e62 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016b3c:	7bfb      	ldrb	r3, [r7, #15]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d001      	beq.n	8016b46 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x3a>
		return HAL_ERROR;
 8016b42:	2301      	movs	r3, #1
 8016b44:	e000      	b.n	8016b48 <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t+0x3c>
	}

	return HAL_OK;
 8016b46:	2300      	movs	r3, #0

}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}

08016b50 <_ZN17SimplexMotion_CAN5writeEtPhh>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::write(uint16_t reg, uint8_t *data,
		uint8_t length) {
 8016b50:	b590      	push	{r4, r7, lr}
 8016b52:	b087      	sub	sp, #28
 8016b54:	af02      	add	r7, sp, #8
 8016b56:	60f8      	str	r0, [r7, #12]
 8016b58:	607a      	str	r2, [r7, #4]
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	460b      	mov	r3, r1
 8016b5e:	817b      	strh	r3, [r7, #10]
 8016b60:	4613      	mov	r3, r2
 8016b62:	727b      	strb	r3, [r7, #9]
	return this->config.can->sendMessage(this->_getCANHeader(reg), data, length);
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	685c      	ldr	r4, [r3, #4]
 8016b68:	897b      	ldrh	r3, [r7, #10]
 8016b6a:	4619      	mov	r1, r3
 8016b6c:	68f8      	ldr	r0, [r7, #12]
 8016b6e:	f000 fa7b 	bl	8017068 <_ZN17SimplexMotion_CAN13_getCANHeaderEt>
 8016b72:	4601      	mov	r1, r0
 8016b74:	7a7b      	ldrb	r3, [r7, #9]
 8016b76:	2201      	movs	r2, #1
 8016b78:	9200      	str	r2, [sp, #0]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	f007 fb79 	bl	801e274 <_ZN3CAN11sendMessageEmPhhb>
 8016b82:	4603      	mov	r3, r0
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3714      	adds	r7, #20
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd90      	pop	{r4, r7, pc}

08016b8c <_ZN17SimplexMotion_CAN5writeEtt>:
	uint8_t tx_data[4];
	float_to_bytearray(data, tx_data);
	return this->write(reg, tx_data, 4);
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::write(uint16_t reg, uint16_t data) {
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	460b      	mov	r3, r1
 8016b96:	807b      	strh	r3, [r7, #2]
 8016b98:	4613      	mov	r3, r2
 8016b9a:	803b      	strh	r3, [r7, #0]
	uint8_t tx_data[2];
	uint16_to_bytearray(data, tx_data);
 8016b9c:	f107 020c 	add.w	r2, r7, #12
 8016ba0:	883b      	ldrh	r3, [r7, #0]
 8016ba2:	4611      	mov	r1, r2
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f00a ff11 	bl	80219cc <_Z19uint16_to_bytearraytPh>
	return this->write(reg, tx_data, 2);
 8016baa:	f107 020c 	add.w	r2, r7, #12
 8016bae:	8879      	ldrh	r1, [r7, #2]
 8016bb0:	2302      	movs	r3, #2
 8016bb2:	6878      	ldr	r0, [r7, #4]
 8016bb4:	f7ff ffcc 	bl	8016b50 <_ZN17SimplexMotion_CAN5writeEtPhh>
 8016bb8:	4603      	mov	r3, r0
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <_ZN17SimplexMotion_CAN5writeEtl>:
	uint8_t tx_data[2];
	int16_to_bytearray(data, tx_data);
	return this->write(reg, tx_data, 2);
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::write(uint16_t reg, int32_t data) {
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b086      	sub	sp, #24
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	60f8      	str	r0, [r7, #12]
 8016bca:	460b      	mov	r3, r1
 8016bcc:	607a      	str	r2, [r7, #4]
 8016bce:	817b      	strh	r3, [r7, #10]
	uint8_t tx_data[4];
	int32_to_bytearray(data, tx_data);
 8016bd0:	f107 0314 	add.w	r3, r7, #20
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f00a fed7 	bl	802198a <_Z18int32_to_bytearraylPh>
	return this->write(reg, tx_data, 4);
 8016bdc:	f107 0214 	add.w	r2, r7, #20
 8016be0:	8979      	ldrh	r1, [r7, #10]
 8016be2:	2304      	movs	r3, #4
 8016be4:	68f8      	ldr	r0, [r7, #12]
 8016be6:	f7ff ffb3 	bl	8016b50 <_ZN17SimplexMotion_CAN5writeEtPhh>
 8016bea:	4603      	mov	r3, r0
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3718      	adds	r7, #24
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <_ZN17SimplexMotion_CAN4readEtPhhRh>:

/* --------------------------------------------------------------------- */
CAN_Status SimplexMotion_CAN::read(uint16_t reg, uint8_t *responseData,
		uint8_t requestLength, uint8_t &responseLength) {
 8016bf4:	b590      	push	{r4, r7, lr}
 8016bf6:	b087      	sub	sp, #28
 8016bf8:	af02      	add	r7, sp, #8
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	607a      	str	r2, [r7, #4]
 8016bfe:	461a      	mov	r2, r3
 8016c00:	460b      	mov	r3, r1
 8016c02:	817b      	strh	r3, [r7, #10]
 8016c04:	4613      	mov	r3, r2
 8016c06:	727b      	strb	r3, [r7, #9]
	return this->config.can->sendRemoteFrame(this->_getCANHeader(reg),
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	685c      	ldr	r4, [r3, #4]
 8016c0c:	897b      	ldrh	r3, [r7, #10]
 8016c0e:	4619      	mov	r1, r3
 8016c10:	68f8      	ldr	r0, [r7, #12]
 8016c12:	f000 fa29 	bl	8017068 <_ZN17SimplexMotion_CAN13_getCANHeaderEt>
 8016c16:	4601      	mov	r1, r0
 8016c18:	6a3b      	ldr	r3, [r7, #32]
 8016c1a:	9301      	str	r3, [sp, #4]
 8016c1c:	7a7b      	ldrb	r3, [r7, #9]
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2202      	movs	r2, #2
 8016c24:	4620      	mov	r0, r4
 8016c26:	f007 fb63 	bl	801e2f0 <_ZN3CAN15sendRemoteFrameEmmPhhRh>
 8016c2a:	4603      	mov	r3, r0
	SIMPLEXMOTION_CAN_REMOTE_TIMEOUT, responseData, requestLength,
			responseLength);
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3714      	adds	r7, #20
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd90      	pop	{r4, r7, pc}

08016c34 <_ZN17SimplexMotion_CAN4readEtRt>:
	data = bytearray_to_float(responseData);

	return HAL_OK;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::read(uint16_t reg, uint16_t &data) {
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b088      	sub	sp, #32
 8016c38:	af02      	add	r7, sp, #8
 8016c3a:	60f8      	str	r0, [r7, #12]
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	607a      	str	r2, [r7, #4]
 8016c40:	817b      	strh	r3, [r7, #10]
	uint8_t responseData[2];
	uint8_t responseLength = 0;
 8016c42:	2300      	movs	r3, #0
 8016c44:	74fb      	strb	r3, [r7, #19]

	CAN_Status status = this->read(reg, responseData, 2, responseLength);
 8016c46:	f107 0214 	add.w	r2, r7, #20
 8016c4a:	8979      	ldrh	r1, [r7, #10]
 8016c4c:	f107 0313 	add.w	r3, r7, #19
 8016c50:	9300      	str	r3, [sp, #0]
 8016c52:	2302      	movs	r3, #2
 8016c54:	68f8      	ldr	r0, [r7, #12]
 8016c56:	f7ff ffcd 	bl	8016bf4 <_ZN17SimplexMotion_CAN4readEtPhhRh>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	75fb      	strb	r3, [r7, #23]

	if (status != CAN_SUCCESS || responseLength != 2) {
 8016c5e:	7dfb      	ldrb	r3, [r7, #23]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d102      	bne.n	8016c6a <_ZN17SimplexMotion_CAN4readEtRt+0x36>
 8016c64:	7cfb      	ldrb	r3, [r7, #19]
 8016c66:	2b02      	cmp	r3, #2
 8016c68:	d001      	beq.n	8016c6e <_ZN17SimplexMotion_CAN4readEtRt+0x3a>
		return HAL_ERROR;
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	e009      	b.n	8016c82 <_ZN17SimplexMotion_CAN4readEtRt+0x4e>
	}

	data = bytearray_to_uint16(responseData);
 8016c6e:	f107 0314 	add.w	r3, r7, #20
 8016c72:	4618      	mov	r0, r3
 8016c74:	f00a fe5d 	bl	8021932 <_Z19bytearray_to_uint16Ph>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8016c80:	2300      	movs	r3, #0
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3718      	adds	r7, #24
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}

08016c8a <_ZN17SimplexMotion_CAN4readEtRs>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::read(uint16_t reg, int16_t &data) {
 8016c8a:	b580      	push	{r7, lr}
 8016c8c:	b088      	sub	sp, #32
 8016c8e:	af02      	add	r7, sp, #8
 8016c90:	60f8      	str	r0, [r7, #12]
 8016c92:	460b      	mov	r3, r1
 8016c94:	607a      	str	r2, [r7, #4]
 8016c96:	817b      	strh	r3, [r7, #10]
	uint8_t responseData[2];
	uint8_t responseLength = 0;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	74fb      	strb	r3, [r7, #19]

	CAN_Status status = this->read(reg, responseData, 2, responseLength);
 8016c9c:	f107 0214 	add.w	r2, r7, #20
 8016ca0:	8979      	ldrh	r1, [r7, #10]
 8016ca2:	f107 0313 	add.w	r3, r7, #19
 8016ca6:	9300      	str	r3, [sp, #0]
 8016ca8:	2302      	movs	r3, #2
 8016caa:	68f8      	ldr	r0, [r7, #12]
 8016cac:	f7ff ffa2 	bl	8016bf4 <_ZN17SimplexMotion_CAN4readEtPhhRh>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	75fb      	strb	r3, [r7, #23]

	if (status != CAN_SUCCESS || responseLength != 2) {
 8016cb4:	7dfb      	ldrb	r3, [r7, #23]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d102      	bne.n	8016cc0 <_ZN17SimplexMotion_CAN4readEtRs+0x36>
 8016cba:	7cfb      	ldrb	r3, [r7, #19]
 8016cbc:	2b02      	cmp	r3, #2
 8016cbe:	d001      	beq.n	8016cc4 <_ZN17SimplexMotion_CAN4readEtRs+0x3a>
		return HAL_ERROR;
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	e009      	b.n	8016cd8 <_ZN17SimplexMotion_CAN4readEtRs+0x4e>
	}

	data = bytearray_to_int16(responseData);
 8016cc4:	f107 0314 	add.w	r3, r7, #20
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f00a fe48 	bl	802195e <_Z18bytearray_to_int16Ph>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8016cd6:	2300      	movs	r3, #0
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	3718      	adds	r7, #24
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd80      	pop	{r7, pc}

08016ce0 <_ZN17SimplexMotion_CAN18checkCommunicationEv>:
	data = bytearray_to_int32(responseData);

	return HAL_OK;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::checkCommunication() {
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
	// Read the mode
	simplexmotion_can_mode_t mode;
	HAL_StatusTypeDef status = this->readMode(mode);
 8016ce8:	f107 030e 	add.w	r3, r7, #14
 8016cec:	4619      	mov	r1, r3
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 f8e9 	bl	8016ec6 <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	73fb      	strb	r3, [r7, #15]
	return status;
 8016cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3710      	adds	r7, #16
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}

08016d02 <_ZN17SimplexMotion_CAN10checkMotorEv>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::checkMotor() {
 8016d02:	b580      	push	{r7, lr}
 8016d04:	b084      	sub	sp, #16
 8016d06:	af00      	add	r7, sp, #0
 8016d08:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	// Check the communication
	status = this->checkCommunication();
 8016d0a:	6878      	ldr	r0, [r7, #4]
 8016d0c:	f7ff ffe8 	bl	8016ce0 <_ZN17SimplexMotion_CAN18checkCommunicationEv>
 8016d10:	4603      	mov	r3, r0
 8016d12:	73fb      	strb	r3, [r7, #15]
	if (status) {
 8016d14:	7bfb      	ldrb	r3, [r7, #15]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d001      	beq.n	8016d1e <_ZN17SimplexMotion_CAN10checkMotorEv+0x1c>
		return status;
 8016d1a:	7bfb      	ldrb	r3, [r7, #15]
 8016d1c:	e019      	b.n	8016d52 <_ZN17SimplexMotion_CAN10checkMotorEv+0x50>
	}
	status = this->beep(500);
 8016d1e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f000 f91c 	bl	8016f60 <_ZN17SimplexMotion_CAN4beepEt>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	73fb      	strb	r3, [r7, #15]
	if (status) {
 8016d2c:	7bfb      	ldrb	r3, [r7, #15]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d001      	beq.n	8016d36 <_ZN17SimplexMotion_CAN10checkMotorEv+0x34>
		return status;
 8016d32:	7bfb      	ldrb	r3, [r7, #15]
 8016d34:	e00d      	b.n	8016d52 <_ZN17SimplexMotion_CAN10checkMotorEv+0x50>
	}
	osDelay(150);
 8016d36:	2096      	movs	r0, #150	@ 0x96
 8016d38:	f7f7 feb3 	bl	800eaa2 <osDelay>
	status = this->stop();
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f000 f8fb 	bl	8016f38 <_ZN17SimplexMotion_CAN4stopEv>
 8016d42:	4603      	mov	r3, r0
 8016d44:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016d46:	7bfb      	ldrb	r3, [r7, #15]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d001      	beq.n	8016d50 <_ZN17SimplexMotion_CAN10checkMotorEv+0x4e>
		return status;
 8016d4c:	7bfb      	ldrb	r3, [r7, #15]
 8016d4e:	e000      	b.n	8016d52 <_ZN17SimplexMotion_CAN10checkMotorEv+0x50>
	}

	return HAL_OK;
 8016d50:	2300      	movs	r3, #0

}
 8016d52:	4618      	mov	r0, r3
 8016d54:	3710      	adds	r7, #16
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	0000      	movs	r0, r0
 8016d5c:	0000      	movs	r0, r0
	...

08016d60 <_ZN17SimplexMotion_CAN9setTorqueEf>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setTorque(float torque) {
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b084      	sub	sp, #16
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
 8016d68:	ed87 0a00 	vstr	s0, [r7]
	if (this->mode != SIMPLEXMOTION_CAN_MODE_TORQUE) {
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	2b28      	cmp	r3, #40	@ 0x28
 8016d72:	d001      	beq.n	8016d78 <_ZN17SimplexMotion_CAN9setTorqueEf+0x18>
		return HAL_ERROR;
 8016d74:	2301      	movs	r3, #1
 8016d76:	e022      	b.n	8016dbe <_ZN17SimplexMotion_CAN9setTorqueEf+0x5e>
	}

	// Calculate the corresponding torque value
	int16_t torque_value_int = (int16_t) (this->config.direction * torque
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8016d7e:	ee07 3a90 	vmov	s15, r3
 8016d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016d86:	edd7 7a00 	vldr	s15, [r7]
 8016d8a:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->config.torque_limit * 32767.0);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	ed93 7a03 	vldr	s14, [r3, #12]
 8016d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016d98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016d9c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8016dc8 <_ZN17SimplexMotion_CAN9setTorqueEf+0x68>
 8016da0:	ee27 7b06 	vmul.f64	d7, d7, d6
	int16_t torque_value_int = (int16_t) (this->config.direction * torque
 8016da4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016da8:	ee17 3a90 	vmov	r3, s15
 8016dac:	81fb      	strh	r3, [r7, #14]

	return this->setTarget((int32_t) torque_value_int);
 8016dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016db2:	4619      	mov	r1, r3
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f000 f8af 	bl	8016f18 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	bf00      	nop
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3710      	adds	r7, #16
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}
 8016dc6:	bf00      	nop
 8016dc8:	00000000 	.word	0x00000000
 8016dcc:	40dfffc0 	.word	0x40dfffc0

08016dd0 <_ZN17SimplexMotion_CAN9readSpeedERf>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readSpeed(float &speed) {
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
 8016dd8:	6039      	str	r1, [r7, #0]
	int16_t speed_int = 0;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status;

	status = this->read(SIMPLEXMOTION_CAN_REG_SPEED, speed_int);
 8016dde:	f107 030c 	add.w	r3, r7, #12
 8016de2:	461a      	mov	r2, r3
 8016de4:	21ca      	movs	r1, #202	@ 0xca
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7ff ff4f 	bl	8016c8a <_ZN17SimplexMotion_CAN4readEtRs>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73fb      	strb	r3, [r7, #15]

	if (status) {
 8016df0:	7bfb      	ldrb	r3, [r7, #15]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d001      	beq.n	8016dfa <_ZN17SimplexMotion_CAN9readSpeedERf+0x2a>
		return HAL_ERROR;
 8016df6:	2301      	movs	r3, #1
 8016df8:	e01b      	b.n	8016e32 <_ZN17SimplexMotion_CAN9readSpeedERf+0x62>
	}

	speed = this->config.direction * 2 * pi * speed_int / 256;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8016e00:	005b      	lsls	r3, r3, #1
 8016e02:	ee07 3a90 	vmov	s15, r3
 8016e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e0a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8016e3c <_ZN17SimplexMotion_CAN9readSpeedERf+0x6c>
 8016e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016e12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016e16:	ee07 3a90 	vmov	s15, r3
 8016e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016e22:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8016e40 <_ZN17SimplexMotion_CAN9readSpeedERf+0x70>
 8016e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8016e30:	2300      	movs	r3, #0
}
 8016e32:	4618      	mov	r0, r3
 8016e34:	3710      	adds	r7, #16
 8016e36:	46bd      	mov	sp, r7
 8016e38:	bd80      	pop	{r7, pc}
 8016e3a:	bf00      	nop
 8016e3c:	40490fdb 	.word	0x40490fdb
 8016e40:	43800000 	.word	0x43800000

08016e44 <_ZN17SimplexMotion_CAN15readSoftwareRevERt>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readHardwareRev() {
	return HAL_ERROR;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readSoftwareRev(uint16_t &software_rev) {
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	6039      	str	r1, [r7, #0]
	return this->read(SIMPLEXMOTION_CAN_REG_SW_REV, software_rev);
 8016e4e:	683a      	ldr	r2, [r7, #0]
 8016e50:	2102      	movs	r1, #2
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f7ff feee 	bl	8016c34 <_ZN17SimplexMotion_CAN4readEtRt>
 8016e58:	4603      	mov	r3, r0
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}

08016e62 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readName() {
	return HAL_ERROR;
}
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setMode(simplexmotion_can_mode_t mode) {
 8016e62:	b580      	push	{r7, lr}
 8016e64:	b084      	sub	sp, #16
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	6078      	str	r0, [r7, #4]
 8016e6a:	460b      	mov	r3, r1
 8016e6c:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status = this->write(SIMPLEXMOTION_CAN_REG_MODE,
 8016e6e:	78fb      	ldrb	r3, [r7, #3]
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	461a      	mov	r2, r3
 8016e74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	f7ff fe87 	bl	8016b8c <_ZN17SimplexMotion_CAN5writeEtt>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	73fb      	strb	r3, [r7, #15]
			(uint16_t) mode);

	if (status != HAL_OK) {
 8016e82:	7bfb      	ldrb	r3, [r7, #15]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d001      	beq.n	8016e8c <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x2a>
		return status;
 8016e88:	7bfb      	ldrb	r3, [r7, #15]
 8016e8a:	e018      	b.n	8016ebe <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x5c>
	}

	// Read back the mode
	simplexmotion_can_mode_t mode_read = SIMPLEXMOTION_CAN_MODE_OFF;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	73bb      	strb	r3, [r7, #14]
	status = this->readMode(mode_read);
 8016e90:	f107 030e 	add.w	r3, r7, #14
 8016e94:	4619      	mov	r1, r3
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 f815 	bl	8016ec6 <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d001      	beq.n	8016eaa <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x48>
		return status;
 8016ea6:	7bfb      	ldrb	r3, [r7, #15]
 8016ea8:	e009      	b.n	8016ebe <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x5c>
	}

	// Check if the mode has been successfully set

	if (mode_read != mode) {
 8016eaa:	7bbb      	ldrb	r3, [r7, #14]
 8016eac:	78fa      	ldrb	r2, [r7, #3]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d001      	beq.n	8016eb6 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x54>
		return HAL_ERROR;
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	e003      	b.n	8016ebe <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t+0x5c>
	}

	this->mode = mode;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	78fa      	ldrb	r2, [r7, #3]
 8016eba:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8016ebc:	2300      	movs	r3, #0

}
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	3710      	adds	r7, #16
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	bd80      	pop	{r7, pc}

08016ec6 <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::readMode(simplexmotion_can_mode_t &mode) {
 8016ec6:	b580      	push	{r7, lr}
 8016ec8:	b086      	sub	sp, #24
 8016eca:	af02      	add	r7, sp, #8
 8016ecc:	6078      	str	r0, [r7, #4]
 8016ece:	6039      	str	r1, [r7, #0]
	uint8_t rx_data[2] = { 0 };
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	81bb      	strh	r3, [r7, #12]
	uint8_t responseLength = 0;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	72fb      	strb	r3, [r7, #11]

	CAN_Status status = this->read(SIMPLEXMOTION_CAN_REG_MODE, rx_data, 2,
 8016ed8:	f107 020c 	add.w	r2, r7, #12
 8016edc:	f107 030b 	add.w	r3, r7, #11
 8016ee0:	9300      	str	r3, [sp, #0]
 8016ee2:	2302      	movs	r3, #2
 8016ee4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7ff fe83 	bl	8016bf4 <_ZN17SimplexMotion_CAN4readEtPhhRh>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	73fb      	strb	r3, [r7, #15]
			responseLength);

	if (status == CAN_SUCCESS) {
 8016ef2:	7bfb      	ldrb	r3, [r7, #15]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d10a      	bne.n	8016f0e <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t+0x48>
		mode = (simplexmotion_can_mode_t) bytearray_to_uint16(rx_data);
 8016ef8:	f107 030c 	add.w	r3, r7, #12
 8016efc:	4618      	mov	r0, r3
 8016efe:	f00a fd18 	bl	8021932 <_Z19bytearray_to_uint16Ph>
 8016f02:	4603      	mov	r3, r0
 8016f04:	b2da      	uxtb	r2, r3
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	e000      	b.n	8016f10 <_ZN17SimplexMotion_CAN8readModeER24simplexmotion_can_mode_t+0x4a>
	}

	return HAL_ERROR;
 8016f0e:	2301      	movs	r3, #1
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3710      	adds	r7, #16
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <_ZN17SimplexMotion_CAN9setTargetEl>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setTarget(int32_t target) {
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
	return this->write(SIMPLEXMOTION_CAN_REG_TARGET_INPUT, target);
 8016f22:	683a      	ldr	r2, [r7, #0]
 8016f24:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	f7ff fe4a 	bl	8016bc2 <_ZN17SimplexMotion_CAN5writeEtl>
 8016f2e:	4603      	mov	r3, r0
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3708      	adds	r7, #8
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <_ZN17SimplexMotion_CAN4stopEv>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::stop() {
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = this->setTarget(0);
 8016f40:	2100      	movs	r1, #0
 8016f42:	6878      	ldr	r0, [r7, #4]
 8016f44:	f7ff ffe8 	bl	8016f18 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	73fb      	strb	r3, [r7, #15]
	if (status) {
 8016f4c:	7bfb      	ldrb	r3, [r7, #15]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d001      	beq.n	8016f56 <_ZN17SimplexMotion_CAN4stopEv+0x1e>
		return HAL_ERROR;
 8016f52:	2301      	movs	r3, #1
 8016f54:	e000      	b.n	8016f58 <_ZN17SimplexMotion_CAN4stopEv+0x20>
	}
//	status = this->setMode(SIMPLEXMOTION_CAN_MODE_OFF);
//	if (status) {
//		return HAL_ERROR;
//	}
	return HAL_OK;
 8016f56:	2300      	movs	r3, #0
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3710      	adds	r7, #16
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}

08016f60 <_ZN17SimplexMotion_CAN4beepEt>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::beep(uint16_t amplitude) {
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
 8016f68:	460b      	mov	r3, r1
 8016f6a:	807b      	strh	r3, [r7, #2]

	HAL_StatusTypeDef ret;
	ret = this->setMode(SIMPLEXMOTION_CAN_MODE_BEEP);
 8016f6c:	213c      	movs	r1, #60	@ 0x3c
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f7ff ff77 	bl	8016e62 <_ZN17SimplexMotion_CAN7setModeE24simplexmotion_can_mode_t>
 8016f74:	4603      	mov	r3, r0
 8016f76:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8016f78:	7bfb      	ldrb	r3, [r7, #15]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d001      	beq.n	8016f82 <_ZN17SimplexMotion_CAN4beepEt+0x22>
		return ret;
 8016f7e:	7bfb      	ldrb	r3, [r7, #15]
 8016f80:	e00c      	b.n	8016f9c <_ZN17SimplexMotion_CAN4beepEt+0x3c>
	}
	// Set the amplitude

	ret = this->setTarget((int32_t) amplitude);
 8016f82:	887b      	ldrh	r3, [r7, #2]
 8016f84:	4619      	mov	r1, r3
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7ff ffc6 	bl	8016f18 <_ZN17SimplexMotion_CAN9setTargetEl>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8016f90:	7bfb      	ldrb	r3, [r7, #15]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d001      	beq.n	8016f9a <_ZN17SimplexMotion_CAN4beepEt+0x3a>
		return ret;
 8016f96:	7bfb      	ldrb	r3, [r7, #15]
 8016f98:	e000      	b.n	8016f9c <_ZN17SimplexMotion_CAN4beepEt+0x3c>
	}
	return ret;
 8016f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3710      	adds	r7, #16
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <_ZN17SimplexMotion_CAN14setTorqueLimitEf>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::setTorqueLimit(float maxTorque) {
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	ed87 0a00 	vstr	s0, [r7]

	uint16_t torque_limit_int = (uint16_t) (maxTorque * 1000);
 8016fb0:	edd7 7a00 	vldr	s15, [r7]
 8016fb4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 801700c <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x68>
 8016fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016fc0:	ee17 3a90 	vmov	r3, s15
 8016fc4:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef status;

	status = this->write(SIMPLEXMOTION_CAN_REG_TORQUE_LIMIT, torque_limit_int);
 8016fc6:	89fb      	ldrh	r3, [r7, #14]
 8016fc8:	461a      	mov	r2, r3
 8016fca:	21cc      	movs	r1, #204	@ 0xcc
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7ff fddd 	bl	8016b8c <_ZN17SimplexMotion_CAN5writeEtt>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	737b      	strb	r3, [r7, #13]

	if (status) {
 8016fd6:	7b7b      	ldrb	r3, [r7, #13]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d001      	beq.n	8016fe0 <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x3c>
		return HAL_ERROR;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	e011      	b.n	8017004 <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x60>
	}
	uint16_t torque_limit_check = 0;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	817b      	strh	r3, [r7, #10]

	status = this->read(SIMPLEXMOTION_CAN_REG_TORQUE_LIMIT, torque_limit_check);
 8016fe4:	f107 030a 	add.w	r3, r7, #10
 8016fe8:	461a      	mov	r2, r3
 8016fea:	21cc      	movs	r1, #204	@ 0xcc
 8016fec:	6878      	ldr	r0, [r7, #4]
 8016fee:	f7ff fe21 	bl	8016c34 <_ZN17SimplexMotion_CAN4readEtRt>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	737b      	strb	r3, [r7, #13]

	if (torque_limit_int != torque_limit_check) {
 8016ff6:	897b      	ldrh	r3, [r7, #10]
 8016ff8:	89fa      	ldrh	r2, [r7, #14]
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d001      	beq.n	8017002 <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x5e>
		return HAL_ERROR;
 8016ffe:	2301      	movs	r3, #1
 8017000:	e000      	b.n	8017004 <_ZN17SimplexMotion_CAN14setTorqueLimitEf+0x60>
	}

	return HAL_OK;
 8017002:	2300      	movs	r3, #0
}
 8017004:	4618      	mov	r0, r3
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	447a0000 	.word	0x447a0000

08017010 <_ZN17SimplexMotion_CAN10getVoltageERf>:
HAL_StatusTypeDef SimplexMotion_CAN::getTemperature(float &temperature) {
	return HAL_ERROR;
}

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef SimplexMotion_CAN::getVoltage(float &voltage) {
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
 8017018:	6039      	str	r1, [r7, #0]
	uint16_t voltage_int = 0;
 801701a:	2300      	movs	r3, #0
 801701c:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = this->read(SIMPLEXMOTION_CAN_REG_VOLTAGE,
 801701e:	f107 030c 	add.w	r3, r7, #12
 8017022:	461a      	mov	r2, r3
 8017024:	2164      	movs	r1, #100	@ 0x64
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f7ff fe04 	bl	8016c34 <_ZN17SimplexMotion_CAN4readEtRt>
 801702c:	4603      	mov	r3, r0
 801702e:	73fb      	strb	r3, [r7, #15]
			voltage_int);

	if (status) {
 8017030:	7bfb      	ldrb	r3, [r7, #15]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d001      	beq.n	801703a <_ZN17SimplexMotion_CAN10getVoltageERf+0x2a>
		return status;
 8017036:	7bfb      	ldrb	r3, [r7, #15]
 8017038:	e00e      	b.n	8017058 <_ZN17SimplexMotion_CAN10getVoltageERf+0x48>
	}

	voltage = voltage_int * 0.01;
 801703a:	89bb      	ldrh	r3, [r7, #12]
 801703c:	ee07 3a90 	vmov	s15, r3
 8017040:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017044:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8017060 <_ZN17SimplexMotion_CAN10getVoltageERf+0x50>
 8017048:	ee27 7b06 	vmul.f64	d7, d7, d6
 801704c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8017056:	2300      	movs	r3, #0
}
 8017058:	4618      	mov	r0, r3
 801705a:	3710      	adds	r7, #16
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	47ae147b 	.word	0x47ae147b
 8017064:	3f847ae1 	.word	0x3f847ae1

08017068 <_ZN17SimplexMotion_CAN13_getCANHeaderEt>:

/* --------------------------------------------------------------------- */
uint32_t SimplexMotion_CAN::_getCANHeader(uint16_t address) {
 8017068:	b480      	push	{r7}
 801706a:	b083      	sub	sp, #12
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	460b      	mov	r3, r1
 8017072:	807b      	strh	r3, [r7, #2]

	return (0 << 24) | (this->config.id << 16) | address;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	7a1b      	ldrb	r3, [r3, #8]
 8017078:	041a      	lsls	r2, r3, #16
 801707a:	887b      	ldrh	r3, [r7, #2]
 801707c:	4313      	orrs	r3, r2

}
 801707e:	4618      	mov	r0, r3
 8017080:	370c      	adds	r7, #12
 8017082:	46bd      	mov	sp, r7
 8017084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017088:	4770      	bx	lr

0801708a <_ZN15TWIPR_Drive_CANC1Ev>:

/* ====================================================================== */
TWIPR_Drive_CAN::TWIPR_Drive_CAN() {
 801708a:	b580      	push	{r7, lr}
 801708c:	b082      	sub	sp, #8
 801708e:	af00      	add	r7, sp, #0
 8017090:	6078      	str	r0, [r7, #4]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	330c      	adds	r3, #12
 8017096:	4618      	mov	r0, r3
 8017098:	f7ff fce7 	bl	8016a6a <_ZN17SimplexMotion_CANC1Ev>
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	3320      	adds	r3, #32
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7ff fce2 	bl	8016a6a <_ZN17SimplexMotion_CANC1Ev>
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	3334      	adds	r3, #52	@ 0x34
 80170aa:	2200      	movs	r2, #0
 80170ac:	601a      	str	r2, [r3, #0]
 80170ae:	605a      	str	r2, [r3, #4]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2200      	movs	r2, #0
 80170b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2200      	movs	r2, #0
 80170ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	f04f 0200 	mov.w	r2, #0
 80170c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	3348      	adds	r3, #72	@ 0x48
 80170ca:	2200      	movs	r2, #0
 80170cc:	601a      	str	r2, [r3, #0]
 80170ce:	605a      	str	r2, [r3, #4]

}
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	4618      	mov	r0, r3
 80170d4:	3708      	adds	r7, #8
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
	...

080170dc <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef TWIPR_Drive_CAN::init(twipr_drive_can_config_t config) {
 80170dc:	b590      	push	{r4, r7, lr}
 80170de:	b08d      	sub	sp, #52	@ 0x34
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	4638      	mov	r0, r7
 80170e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	461c      	mov	r4, r3
 80170ee:	463b      	mov	r3, r7
 80170f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80170f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	HAL_StatusTypeDef status;

	simplexmotion_can_config_t config_left = { .can = this->config.can, .id =
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681b      	ldr	r3, [r3, #0]
			this->config.id_left, .direction = this->config.direction_left,
			.torque_limit = this->config.torque_max };
 80170fc:	623b      	str	r3, [r7, #32]
			this->config.id_left, .direction = this->config.direction_left,
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	791b      	ldrb	r3, [r3, #4]
			.torque_limit = this->config.torque_max };
 8017102:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			this->config.id_left, .direction = this->config.direction_left,
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	f993 3006 	ldrsb.w	r3, [r3, #6]
			.torque_limit = this->config.torque_max };
 801710c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	689b      	ldr	r3, [r3, #8]
 8017114:	62bb      	str	r3, [r7, #40]	@ 0x28

	simplexmotion_can_config_t config_right = { .can = this->config.can, .id =
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	681b      	ldr	r3, [r3, #0]
			this->config.id_right, .direction = this->config.direction_right,
			.torque_limit = this->config.torque_max };
 801711a:	617b      	str	r3, [r7, #20]
			this->config.id_right, .direction = this->config.direction_right,
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	795b      	ldrb	r3, [r3, #5]
			.torque_limit = this->config.torque_max };
 8017120:	763b      	strb	r3, [r7, #24]
			this->config.id_right, .direction = this->config.direction_right,
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	f993 3007 	ldrsb.w	r3, [r3, #7]
			.torque_limit = this->config.torque_max };
 8017128:	767b      	strb	r3, [r7, #25]
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	689b      	ldr	r3, [r3, #8]
 801712e:	61fb      	str	r3, [r7, #28]

	status = this->motor_left.init(config_left);
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	f103 000c 	add.w	r0, r3, #12
 8017136:	f107 0320 	add.w	r3, r7, #32
 801713a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801713c:	f7ff fca6 	bl	8016a8c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t>
 8017140:	4603      	mov	r3, r0
 8017142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status) {
 8017146:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801714a:	2b00      	cmp	r3, #0
 801714c:	d002      	beq.n	8017154 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0x78>
		return status;
 801714e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017152:	e02a      	b.n	80171aa <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xce>
	}
	status = this->motor_right.init(config_right);
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f103 0020 	add.w	r0, r3, #32
 801715a:	f107 0314 	add.w	r3, r7, #20
 801715e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017160:	f7ff fc94 	bl	8016a8c <_ZN17SimplexMotion_CAN4initE26simplexmotion_can_config_t>
 8017164:	4603      	mov	r3, r0
 8017166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status) {
 801716a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801716e:	2b00      	cmp	r3, #0
 8017170:	d002      	beq.n	8017178 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0x9c>
		return status;
 8017172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017176:	e018      	b.n	80171aa <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xce>
	}

	drive_can_speed_semaphore = osSemaphoreNew(1, 1, NULL);
 8017178:	2200      	movs	r2, #0
 801717a:	2101      	movs	r1, #1
 801717c:	2001      	movs	r0, #1
 801717e:	f7f7 fd69 	bl	800ec54 <osSemaphoreNew>
 8017182:	4603      	mov	r3, r0
 8017184:	4a0b      	ldr	r2, [pc, #44]	@ (80171b4 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xd8>)
 8017186:	6013      	str	r3, [r2, #0]
	drive_can_torque_semaphore = osSemaphoreNew(1, 1, NULL);
 8017188:	2200      	movs	r2, #0
 801718a:	2101      	movs	r1, #1
 801718c:	2001      	movs	r0, #1
 801718e:	f7f7 fd61 	bl	800ec54 <osSemaphoreNew>
 8017192:	4603      	mov	r3, r0
 8017194:	4a08      	ldr	r2, [pc, #32]	@ (80171b8 <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xdc>)
 8017196:	6013      	str	r3, [r2, #0]
	drive_can_voltage_semaphore = osSemaphoreNew(1, 1, NULL);
 8017198:	2200      	movs	r2, #0
 801719a:	2101      	movs	r1, #1
 801719c:	2001      	movs	r0, #1
 801719e:	f7f7 fd59 	bl	800ec54 <osSemaphoreNew>
 80171a2:	4603      	mov	r3, r0
 80171a4:	4a05      	ldr	r2, [pc, #20]	@ (80171bc <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t+0xe0>)
 80171a6:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80171a8:	2300      	movs	r3, #0
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3734      	adds	r7, #52	@ 0x34
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd90      	pop	{r4, r7, pc}
 80171b2:	bf00      	nop
 80171b4:	2401f3b8 	.word	0x2401f3b8
 80171b8:	2401f3c0 	.word	0x2401f3c0
 80171bc:	2401f3bc 	.word	0x2401f3bc

080171c0 <_ZN15TWIPR_Drive_CAN5startEv>:
/* --------------------------------------------------------------------- */
HAL_StatusTypeDef TWIPR_Drive_CAN::start() {
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = this->motor_left.checkMotor();
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	330c      	adds	r3, #12
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7ff fd98 	bl	8016d02 <_ZN17SimplexMotion_CAN10checkMotorEv>
 80171d2:	4603      	mov	r3, r0
 80171d4:	73fb      	strb	r3, [r7, #15]

	if (status) {
 80171d6:	7bfb      	ldrb	r3, [r7, #15]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d001      	beq.n	80171e0 <_ZN15TWIPR_Drive_CAN5startEv+0x20>
		return HAL_ERROR;
 80171dc:	2301      	movs	r3, #1
 80171de:	e024      	b.n	801722a <_ZN15TWIPR_Drive_CAN5startEv+0x6a>
	}

	osDelay(250);
 80171e0:	20fa      	movs	r0, #250	@ 0xfa
 80171e2:	f7f7 fc5e 	bl	800eaa2 <osDelay>
	status = this->motor_right.checkMotor();
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	3320      	adds	r3, #32
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7ff fd89 	bl	8016d02 <_ZN17SimplexMotion_CAN10checkMotorEv>
 80171f0:	4603      	mov	r3, r0
 80171f2:	73fb      	strb	r3, [r7, #15]

	if (status) {
 80171f4:	7bfb      	ldrb	r3, [r7, #15]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d001      	beq.n	80171fe <_ZN15TWIPR_Drive_CAN5startEv+0x3e>
		return HAL_ERROR;
 80171fa:	2301      	movs	r3, #1
 80171fc:	e015      	b.n	801722a <_ZN15TWIPR_Drive_CAN5startEv+0x6a>
	}

	this->motor_left.start(SIMPLEXMOTION_CAN_MODE_TORQUE);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	330c      	adds	r3, #12
 8017202:	2128      	movs	r1, #40	@ 0x28
 8017204:	4618      	mov	r0, r3
 8017206:	f7ff fc81 	bl	8016b0c <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t>
	this->motor_right.start(SIMPLEXMOTION_CAN_MODE_TORQUE);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	3320      	adds	r3, #32
 801720e:	2128      	movs	r1, #40	@ 0x28
 8017210:	4618      	mov	r0, r3
 8017212:	f7ff fc7b 	bl	8016b0c <_ZN17SimplexMotion_CAN5startE24simplexmotion_can_mode_t>
	this->status = TWIPR_DRIVE_CAN_STATUS_RUNNING;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2201      	movs	r2, #1
 801721a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	osThreadNew(startCANDriveTask, (void*) this, &drive_task_attributes);
 801721e:	4a05      	ldr	r2, [pc, #20]	@ (8017234 <_ZN15TWIPR_Drive_CAN5startEv+0x74>)
 8017220:	6879      	ldr	r1, [r7, #4]
 8017222:	4805      	ldr	r0, [pc, #20]	@ (8017238 <_ZN15TWIPR_Drive_CAN5startEv+0x78>)
 8017224:	f7f7 fbab 	bl	800e97e <osThreadNew>

	return HAL_OK;
 8017228:	2300      	movs	r3, #0
}
 801722a:	4618      	mov	r0, r3
 801722c:	3710      	adds	r7, #16
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
 8017232:	bf00      	nop
 8017234:	08026254 	.word	0x08026254
 8017238:	080174e5 	.word	0x080174e5

0801723c <_ZN15TWIPR_Drive_CAN4taskEv>:

void TWIPR_Drive_CAN::task() {
 801723c:	b580      	push	{r7, lr}
 801723e:	b08c      	sub	sp, #48	@ 0x30
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
	uint32_t current_tick = 0;
 8017244:	2300      	movs	r3, #0
 8017246:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t ticks_loop = 0;
 8017248:	2300      	movs	r3, #0
 801724a:	62bb      	str	r3, [r7, #40]	@ 0x28
	elapsedMillis voltageTimer = 0;
 801724c:	f107 0318 	add.w	r3, r7, #24
 8017250:	2100      	movs	r1, #0
 8017252:	4618      	mov	r0, r3
 8017254:	f7ff fbf8 	bl	8016a48 <_ZN13elapsedMillisC1Em>
	float left_motor_voltage = 0;
 8017258:	f04f 0300 	mov.w	r3, #0
 801725c:	617b      	str	r3, [r7, #20]
	float left_motor_speed = 0;
 801725e:	f04f 0300 	mov.w	r3, #0
 8017262:	613b      	str	r3, [r7, #16]
	float right_motor_speed = 0;
 8017264:	f04f 0300 	mov.w	r3, #0
 8017268:	60fb      	str	r3, [r7, #12]
	float torque_left = 0;
 801726a:	f04f 0300 	mov.w	r3, #0
 801726e:	627b      	str	r3, [r7, #36]	@ 0x24
	float torque_right = 0;
 8017270:	f04f 0300 	mov.w	r3, #0
 8017274:	623b      	str	r3, [r7, #32]
	HAL_StatusTypeDef status = HAL_ERROR;
 8017276:	2301      	movs	r3, #1
 8017278:	77fb      	strb	r3, [r7, #31]

	while (true) {
		current_tick = osKernelGetTickCount();
 801727a:	f7f7 fb6b 	bl	800e954 <osKernelGetTickCount>
 801727e:	62f8      	str	r0, [r7, #44]	@ 0x2c

		if (this->status == TWIPR_DRIVE_CAN_STATUS_RUNNING) {
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017286:	2b01      	cmp	r3, #1
 8017288:	d17e      	bne.n	8017388 <_ZN15TWIPR_Drive_CAN4taskEv+0x14c>
			// Read the voltage
			if (voltageTimer > 1000) {
 801728a:	f107 0318 	add.w	r3, r7, #24
 801728e:	4618      	mov	r0, r3
 8017290:	f7ff fbae 	bl	80169f0 <_ZNK13elapsedMilliscvmEv>
 8017294:	4603      	mov	r3, r0
 8017296:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801729a:	bf8c      	ite	hi
 801729c:	2301      	movhi	r3, #1
 801729e:	2300      	movls	r3, #0
 80172a0:	b2db      	uxtb	r3, r3
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d020      	beq.n	80172e8 <_ZN15TWIPR_Drive_CAN4taskEv+0xac>
				voltageTimer.reset();
 80172a6:	f107 0318 	add.w	r3, r7, #24
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7ff fb85 	bl	80169ba <_ZN13elapsedMillis5resetEv>

				status = this->motor_left.getVoltage(left_motor_voltage);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	330c      	adds	r3, #12
 80172b4:	f107 0214 	add.w	r2, r7, #20
 80172b8:	4611      	mov	r1, r2
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7ff fea8 	bl	8017010 <_ZN17SimplexMotion_CAN10getVoltageERf>
 80172c0:	4603      	mov	r3, r0
 80172c2:	77fb      	strb	r3, [r7, #31]

				if (status == HAL_OK) {
 80172c4:	7ffb      	ldrb	r3, [r7, #31]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d10e      	bne.n	80172e8 <_ZN15TWIPR_Drive_CAN4taskEv+0xac>
					osSemaphoreAcquire(drive_can_voltage_semaphore,
 80172ca:	4b40      	ldr	r3, [pc, #256]	@ (80173cc <_ZN15TWIPR_Drive_CAN4taskEv+0x190>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80172d2:	4618      	mov	r0, r3
 80172d4:	f7f7 fd48 	bl	800ed68 <osSemaphoreAcquire>
					portMAX_DELAY);
					this->drive_voltage = left_motor_voltage;
 80172d8:	697a      	ldr	r2, [r7, #20]
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	645a      	str	r2, [r3, #68]	@ 0x44
					osSemaphoreRelease(drive_can_voltage_semaphore);
 80172de:	4b3b      	ldr	r3, [pc, #236]	@ (80173cc <_ZN15TWIPR_Drive_CAN4taskEv+0x190>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7f7 fd92 	bl	800ee0c <osSemaphoreRelease>
					// TODO
				}
			}

			// Read the speed
			status = this->motor_left.readSpeed(left_motor_speed);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	330c      	adds	r3, #12
 80172ec:	f107 0210 	add.w	r2, r7, #16
 80172f0:	4611      	mov	r1, r2
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7ff fd6c 	bl	8016dd0 <_ZN17SimplexMotion_CAN9readSpeedERf>
 80172f8:	4603      	mov	r3, r0
 80172fa:	77fb      	strb	r3, [r7, #31]
			if (status) {
 80172fc:	7ffb      	ldrb	r3, [r7, #31]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d15f      	bne.n	80173c2 <_ZN15TWIPR_Drive_CAN4taskEv+0x186>
				continue;
				// TODO
			}
			status = this->motor_right.readSpeed(right_motor_speed);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	3320      	adds	r3, #32
 8017306:	f107 020c 	add.w	r2, r7, #12
 801730a:	4611      	mov	r1, r2
 801730c:	4618      	mov	r0, r3
 801730e:	f7ff fd5f 	bl	8016dd0 <_ZN17SimplexMotion_CAN9readSpeedERf>
 8017312:	4603      	mov	r3, r0
 8017314:	77fb      	strb	r3, [r7, #31]
			if (status) {
 8017316:	7ffb      	ldrb	r3, [r7, #31]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d154      	bne.n	80173c6 <_ZN15TWIPR_Drive_CAN4taskEv+0x18a>
				continue;
				// TODO
			}
			osSemaphoreAcquire(drive_can_speed_semaphore, portMAX_DELAY);
 801731c:	4b2c      	ldr	r3, [pc, #176]	@ (80173d0 <_ZN15TWIPR_Drive_CAN4taskEv+0x194>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017324:	4618      	mov	r0, r3
 8017326:	f7f7 fd1f 	bl	800ed68 <osSemaphoreAcquire>
			this->speed.speed_left = left_motor_speed;
 801732a:	693a      	ldr	r2, [r7, #16]
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	649a      	str	r2, [r3, #72]	@ 0x48
			this->speed.speed_right = right_motor_speed;
 8017330:	68fa      	ldr	r2, [r7, #12]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	64da      	str	r2, [r3, #76]	@ 0x4c
			osSemaphoreRelease(drive_can_speed_semaphore);
 8017336:	4b26      	ldr	r3, [pc, #152]	@ (80173d0 <_ZN15TWIPR_Drive_CAN4taskEv+0x194>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	4618      	mov	r0, r3
 801733c:	f7f7 fd66 	bl	800ee0c <osSemaphoreRelease>

			// Write the torque
			osSemaphoreAcquire(drive_can_torque_semaphore, portMAX_DELAY);
 8017340:	4b24      	ldr	r3, [pc, #144]	@ (80173d4 <_ZN15TWIPR_Drive_CAN4taskEv+0x198>)
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017348:	4618      	mov	r0, r3
 801734a:	f7f7 fd0d 	bl	800ed68 <osSemaphoreAcquire>
			torque_left = this->input.torque_left;
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017352:	627b      	str	r3, [r7, #36]	@ 0x24
			torque_right = this->input.torque_right;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017358:	623b      	str	r3, [r7, #32]
			osSemaphoreRelease(drive_can_torque_semaphore);
 801735a:	4b1e      	ldr	r3, [pc, #120]	@ (80173d4 <_ZN15TWIPR_Drive_CAN4taskEv+0x198>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	4618      	mov	r0, r3
 8017360:	f7f7 fd54 	bl	800ee0c <osSemaphoreRelease>

			status = this->motor_left.setTorque(torque_left);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	330c      	adds	r3, #12
 8017368:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 801736c:	4618      	mov	r0, r3
 801736e:	f7ff fcf7 	bl	8016d60 <_ZN17SimplexMotion_CAN9setTorqueEf>
 8017372:	4603      	mov	r3, r0
 8017374:	77fb      	strb	r3, [r7, #31]
			if (status) {
				// TODO
			}
			status = this->motor_right.setTorque(torque_right);
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	3320      	adds	r3, #32
 801737a:	ed97 0a08 	vldr	s0, [r7, #32]
 801737e:	4618      	mov	r0, r3
 8017380:	f7ff fcee 	bl	8016d60 <_ZN17SimplexMotion_CAN9setTorqueEf>
 8017384:	4603      	mov	r3, r0
 8017386:	77fb      	strb	r3, [r7, #31]
			if (status) {
				// TODO
			}
		}

		ticks_loop = osKernelGetTickCount() - current_tick;
 8017388:	f7f7 fae4 	bl	800e954 <osKernelGetTickCount>
 801738c:	4602      	mov	r2, r0
 801738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017390:	1ad3      	subs	r3, r2, r3
 8017392:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ticks_loop > TWIPR_DRIVE_CAN_MAIN_TASK_TIME_MS) {
 8017394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017396:	2b0a      	cmp	r3, #10
 8017398:	d908      	bls.n	80173ac <_ZN15TWIPR_Drive_CAN4taskEv+0x170>
			nop();
 801739a:	f7fb fc0d 	bl	8012bb8 <_Z3nopv>
			rc_buzzer.beep(1000, 250, 1);
 801739e:	2201      	movs	r2, #1
 80173a0:	21fa      	movs	r1, #250	@ 0xfa
 80173a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80173d8 <_ZN15TWIPR_Drive_CAN4taskEv+0x19c>
 80173a6:	480d      	ldr	r0, [pc, #52]	@ (80173dc <_ZN15TWIPR_Drive_CAN4taskEv+0x1a0>)
 80173a8:	f006 fb48 	bl	801da3c <_ZN19RobotControl_Buzzer4beepEfth>
			// TODO
		}
		this->tick++;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173b0:	1c5a      	adds	r2, r3, #1
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	63da      	str	r2, [r3, #60]	@ 0x3c
		osDelayUntil(current_tick + TWIPR_DRIVE_CAN_MAIN_TASK_TIME_MS);
 80173b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173b8:	330a      	adds	r3, #10
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7f7 fb8c 	bl	800ead8 <osDelayUntil>
 80173c0:	e75b      	b.n	801727a <_ZN15TWIPR_Drive_CAN4taskEv+0x3e>
				continue;
 80173c2:	bf00      	nop
 80173c4:	e759      	b.n	801727a <_ZN15TWIPR_Drive_CAN4taskEv+0x3e>
				continue;
 80173c6:	bf00      	nop
		current_tick = osKernelGetTickCount();
 80173c8:	e757      	b.n	801727a <_ZN15TWIPR_Drive_CAN4taskEv+0x3e>
 80173ca:	bf00      	nop
 80173cc:	2401f3bc 	.word	0x2401f3bc
 80173d0:	2401f3b8 	.word	0x2401f3b8
 80173d4:	2401f3c0 	.word	0x2401f3c0
 80173d8:	447a0000 	.word	0x447a0000
 80173dc:	24022cbc 	.word	0x24022cbc

080173e0 <_ZN15TWIPR_Drive_CAN8getSpeedEv>:

	return HAL_OK;
}

/* --------------------------------------------------------------------- */
twipr_drive_can_speed_t TWIPR_Drive_CAN::getSpeed() {
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b088      	sub	sp, #32
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	60f8      	str	r0, [r7, #12]
	twipr_drive_can_speed_t speed = { 0 };
 80173e8:	f107 0310 	add.w	r3, r7, #16
 80173ec:	2200      	movs	r2, #0
 80173ee:	601a      	str	r2, [r3, #0]
 80173f0:	605a      	str	r2, [r3, #4]
	osSemaphoreAcquire(drive_can_speed_semaphore, portMAX_DELAY);
 80173f2:	4b14      	ldr	r3, [pc, #80]	@ (8017444 <_ZN15TWIPR_Drive_CAN8getSpeedEv+0x64>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7f7 fcb4 	bl	800ed68 <osSemaphoreAcquire>
	speed = this->speed;
 8017400:	68fa      	ldr	r2, [r7, #12]
 8017402:	f107 0310 	add.w	r3, r7, #16
 8017406:	3248      	adds	r2, #72	@ 0x48
 8017408:	e892 0003 	ldmia.w	r2, {r0, r1}
 801740c:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(drive_can_speed_semaphore);
 8017410:	4b0c      	ldr	r3, [pc, #48]	@ (8017444 <_ZN15TWIPR_Drive_CAN8getSpeedEv+0x64>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	4618      	mov	r0, r3
 8017416:	f7f7 fcf9 	bl	800ee0c <osSemaphoreRelease>

	return speed;
 801741a:	f107 0318 	add.w	r3, r7, #24
 801741e:	f107 0210 	add.w	r2, r7, #16
 8017422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017426:	e883 0003 	stmia.w	r3, {r0, r1}
 801742a:	69ba      	ldr	r2, [r7, #24]
 801742c:	69fb      	ldr	r3, [r7, #28]
 801742e:	ee07 2a10 	vmov	s14, r2
 8017432:	ee07 3a90 	vmov	s15, r3
}
 8017436:	eeb0 0a47 	vmov.f32	s0, s14
 801743a:	eef0 0a67 	vmov.f32	s1, s15
 801743e:	3720      	adds	r7, #32
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	2401f3b8 	.word	0x2401f3b8

08017448 <_ZN15TWIPR_Drive_CAN10getVoltageEv>:

/* --------------------------------------------------------------------- */
float TWIPR_Drive_CAN::getVoltage() {
 8017448:	b580      	push	{r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
	float voltage = 0;
 8017450:	f04f 0300 	mov.w	r3, #0
 8017454:	60fb      	str	r3, [r7, #12]
	osSemaphoreAcquire(drive_can_voltage_semaphore, portMAX_DELAY);
 8017456:	4b0b      	ldr	r3, [pc, #44]	@ (8017484 <_ZN15TWIPR_Drive_CAN10getVoltageEv+0x3c>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801745e:	4618      	mov	r0, r3
 8017460:	f7f7 fc82 	bl	800ed68 <osSemaphoreAcquire>
	voltage = this->drive_voltage;
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017468:	60fb      	str	r3, [r7, #12]
	osSemaphoreRelease(drive_can_voltage_semaphore);
 801746a:	4b06      	ldr	r3, [pc, #24]	@ (8017484 <_ZN15TWIPR_Drive_CAN10getVoltageEv+0x3c>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	4618      	mov	r0, r3
 8017470:	f7f7 fccc 	bl	800ee0c <osSemaphoreRelease>
	return voltage;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	ee07 3a90 	vmov	s15, r3
}
 801747a:	eeb0 0a67 	vmov.f32	s0, s15
 801747e:	3710      	adds	r7, #16
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}
 8017484:	2401f3bc 	.word	0x2401f3bc

08017488 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t>:

/* --------------------------------------------------------------------- */
HAL_StatusTypeDef TWIPR_Drive_CAN::setTorque(twipr_drive_can_input_t input) {
 8017488:	b580      	push	{r7, lr}
 801748a:	b084      	sub	sp, #16
 801748c:	af00      	add	r7, sp, #0
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	eeb0 7a40 	vmov.f32	s14, s0
 8017494:	eef0 7a60 	vmov.f32	s15, s1
 8017498:	ed87 7a01 	vstr	s14, [r7, #4]
 801749c:	edc7 7a02 	vstr	s15, [r7, #8]
	if (this->status != TWIPR_DRIVE_CAN_STATUS_RUNNING) {
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d001      	beq.n	80174ae <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x26>
		return HAL_ERROR;
 80174aa:	2301      	movs	r3, #1
 80174ac:	e013      	b.n	80174d6 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x4e>
	}
	osSemaphoreAcquire(drive_can_torque_semaphore, portMAX_DELAY);
 80174ae:	4b0c      	ldr	r3, [pc, #48]	@ (80174e0 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x58>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7f7 fc56 	bl	800ed68 <osSemaphoreAcquire>
	this->input = input;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	3334      	adds	r3, #52	@ 0x34
 80174c0:	1d3a      	adds	r2, r7, #4
 80174c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80174c6:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(drive_can_torque_semaphore);
 80174ca:	4b05      	ldr	r3, [pc, #20]	@ (80174e0 <_ZN15TWIPR_Drive_CAN9setTorqueE23twipr_drive_can_input_t+0x58>)
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7f7 fc9c 	bl	800ee0c <osSemaphoreRelease>
	return HAL_OK;
 80174d4:	2300      	movs	r3, #0
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3710      	adds	r7, #16
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	2401f3c0 	.word	0x2401f3c0

080174e4 <_Z17startCANDriveTaskPv>:

/* --------------------------------------------------------------------- */
void startCANDriveTask(void *argument) {
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
	TWIPR_Drive_CAN *drive = (TWIPR_Drive_CAN*) argument;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	60fb      	str	r3, [r7, #12]
	drive->task();
 80174f0:	68f8      	ldr	r0, [r7, #12]
 80174f2:	f7ff fea3 	bl	801723c <_ZN15TWIPR_Drive_CAN4taskEv>
}
 80174f6:	bf00      	nop
 80174f8:	3710      	adds	r7, #16
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}

080174fe <_Z5delaym>:

inline void delay(uint32_t msec){
 80174fe:	b580      	push	{r7, lr}
 8017500:	b084      	sub	sp, #16
 8017502:	af00      	add	r7, sp, #0
 8017504:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 8017506:	f7f7 f9dd 	bl	800e8c4 <osKernelGetState>
 801750a:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	2b02      	cmp	r3, #2
 8017510:	d103      	bne.n	801751a <_Z5delaym+0x1c>
		osDelay(msec);
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f7f7 fac5 	bl	800eaa2 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 8017518:	e002      	b.n	8017520 <_Z5delaym+0x22>
		HAL_Delay(msec);
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f7ea fd82 	bl	8002024 <HAL_Delay>
}
 8017520:	bf00      	nop
 8017522:	3710      	adds	r7, #16
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <_Z19twipr_error_handlerm>:
 */


#include "twipr_errors.h"

void twipr_error_handler(uint32_t errorcode) {
 8017528:	b580      	push	{r7, lr}
 801752a:	b086      	sub	sp, #24
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]

	// Turn on the LED2

	// if the error code starts with 0x00 then it's severe and should result in a firmware stop
	if (errorcode >> 24 == 0x00) {
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	0e1b      	lsrs	r3, r3, #24
 8017534:	2b00      	cmp	r3, #0
 8017536:	d13b      	bne.n	80175b0 <_Z19twipr_error_handlerm+0x88>
		// Try to suspend all tasks
		vTaskSuspendAll();
 8017538:	f7f9 f8d6 	bl	80106e8 <vTaskSuspendAll>
		while (true) {
			uint8_t id1 = errorcode >> 8 & 0xFF;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	0a1b      	lsrs	r3, r3, #8
 8017540:	73fb      	strb	r3, [r7, #15]
			uint8_t id2 = errorcode & 0xFF;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	73bb      	strb	r3, [r7, #14]

			for (int i = 0; i < id1; i++) {
 8017546:	2300      	movs	r3, #0
 8017548:	617b      	str	r3, [r7, #20]
 801754a:	e00e      	b.n	801756a <_Z19twipr_error_handlerm+0x42>
				rc_status_led_2.on();
 801754c:	481a      	ldr	r0, [pc, #104]	@ (80175b8 <_Z19twipr_error_handlerm+0x90>)
 801754e:	f009 f952 	bl	80207f6 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 8017552:	2096      	movs	r0, #150	@ 0x96
 8017554:	f7ea fd66 	bl	8002024 <HAL_Delay>
				rc_status_led_2.off();
 8017558:	4817      	ldr	r0, [pc, #92]	@ (80175b8 <_Z19twipr_error_handlerm+0x90>)
 801755a:	f009 f95c 	bl	8020816 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 801755e:	2096      	movs	r0, #150	@ 0x96
 8017560:	f7ea fd60 	bl	8002024 <HAL_Delay>
			for (int i = 0; i < id1; i++) {
 8017564:	697b      	ldr	r3, [r7, #20]
 8017566:	3301      	adds	r3, #1
 8017568:	617b      	str	r3, [r7, #20]
 801756a:	7bfb      	ldrb	r3, [r7, #15]
 801756c:	697a      	ldr	r2, [r7, #20]
 801756e:	429a      	cmp	r2, r3
 8017570:	dbec      	blt.n	801754c <_Z19twipr_error_handlerm+0x24>
			}
			delay(750);
 8017572:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8017576:	f7ff ffc2 	bl	80174fe <_Z5delaym>
			for (int i = 0; i < id2; i++) {
 801757a:	2300      	movs	r3, #0
 801757c:	613b      	str	r3, [r7, #16]
 801757e:	e00e      	b.n	801759e <_Z19twipr_error_handlerm+0x76>
				rc_status_led_2.on();
 8017580:	480d      	ldr	r0, [pc, #52]	@ (80175b8 <_Z19twipr_error_handlerm+0x90>)
 8017582:	f009 f938 	bl	80207f6 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 8017586:	2096      	movs	r0, #150	@ 0x96
 8017588:	f7ea fd4c 	bl	8002024 <HAL_Delay>
				rc_status_led_2.off();
 801758c:	480a      	ldr	r0, [pc, #40]	@ (80175b8 <_Z19twipr_error_handlerm+0x90>)
 801758e:	f009 f942 	bl	8020816 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 8017592:	2096      	movs	r0, #150	@ 0x96
 8017594:	f7ea fd46 	bl	8002024 <HAL_Delay>
			for (int i = 0; i < id2; i++) {
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	3301      	adds	r3, #1
 801759c:	613b      	str	r3, [r7, #16]
 801759e:	7bbb      	ldrb	r3, [r7, #14]
 80175a0:	693a      	ldr	r2, [r7, #16]
 80175a2:	429a      	cmp	r2, r3
 80175a4:	dbec      	blt.n	8017580 <_Z19twipr_error_handlerm+0x58>
			}
			HAL_Delay(1500);
 80175a6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80175aa:	f7ea fd3b 	bl	8002024 <HAL_Delay>
		}
 80175ae:	e7c5      	b.n	801753c <_Z19twipr_error_handlerm+0x14>
	}
}
 80175b0:	bf00      	nop
 80175b2:	3718      	adds	r7, #24
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}
 80175b8:	24022c98 	.word	0x24022c98

080175bc <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80175bc:	b580      	push	{r7, lr}
 80175be:	b082      	sub	sp, #8
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80175c6:	edc7 0a00 	vstr	s1, [r7]
 80175ca:	edd7 0a00 	vldr	s1, [r7]
 80175ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80175d2:	f00a fcf6 	bl	8021fc2 <atan2f>
 80175d6:	eef0 7a40 	vmov.f32	s15, s0
 80175da:	eeb0 0a67 	vmov.f32	s0, s15
 80175de:	3708      	adds	r7, #8
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 80175e4:	b480      	push	{r7}
 80175e6:	b083      	sub	sp, #12
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	ed87 0a00 	vstr	s0, [r7]
 80175f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80175f4:	ed97 7a00 	vldr	s14, [r7]
 80175f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	edc3 7a04 	vstr	s15, [r3, #16]
 8017602:	bf00      	nop
 8017604:	370c      	adds	r7, #12
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr
	...

08017610 <_ZN16TWIPR_EstimationC1Ev>:

static const osThreadAttr_t estimation_task_attributes = { .name = "estimation",
		.stack_size = 1280 * 4, .priority = (osPriority_t) osPriorityNormal, };

/* ======================================================= */
TWIPR_Estimation::TWIPR_Estimation() :
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
		vqf(TWIPR_ESTIMATION_TS) {
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2200      	movs	r2, #0
 801761c:	f8a3 281c 	strh.w	r2, [r3, #2076]	@ 0x81c
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8017626:	4618      	mov	r0, r3
 8017628:	f008 fd1e 	bl	8020068 <_ZN8MadgwickC1Ev>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8017632:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8017636:	eebf 1b00 	vmov.f64	d1, #240	@ 0xbf800000 -1.0
 801763a:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8017668 <_ZN16TWIPR_EstimationC1Ev+0x58>
 801763e:	4618      	mov	r0, r3
 8017640:	f007 fbc4 	bl	801edcc <_ZN8BasicVQFC1Eddd>
	this->status = TWIPR_ESTIMATION_STATUS_NONE;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2200      	movs	r2, #0
 8017648:	701a      	strb	r2, [r3, #0]
	this->vqf.setTauAcc(0.5);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8017650:	eeb6 0b00 	vmov.f64	d0, #96	@ 0x3f000000  0.5
 8017654:	4618      	mov	r0, r3
 8017656:	f007 fd55 	bl	801f104 <_ZN8BasicVQF9setTauAccEd>
}
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}
 8017664:	f3af 8000 	nop.w
 8017668:	47ae147b 	.word	0x47ae147b
 801766c:	3f847ae1 	.word	0x3f847ae1

08017670 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>:

/* ======================================================= */
void TWIPR_Estimation::init(twipr_estimation_config_t config) {
 8017670:	b084      	sub	sp, #16
 8017672:	b5b0      	push	{r4, r5, r7, lr}
 8017674:	b082      	sub	sp, #8
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	f107 001c 	add.w	r0, r7, #28
 801767e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8017688:	f107 051c 	add.w	r5, r7, #28
 801768c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801768e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017694:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Initialize the sensors

	this->status = TWIPR_ESTIMATION_STATUS_IDLE;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	2201      	movs	r2, #1
 801769c:	701a      	strb	r2, [r3, #0]
	this->_semaphore = osSemaphoreNew(1, 1, NULL);
 801769e:	2200      	movs	r2, #0
 80176a0:	2101      	movs	r1, #1
 80176a2:	2001      	movs	r0, #1
 80176a4:	f7f7 fad6 	bl	800ec54 <osSemaphoreNew>
 80176a8:	4602      	mov	r2, r0
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
}
 80176b0:	bf00      	nop
 80176b2:	3708      	adds	r7, #8
 80176b4:	46bd      	mov	sp, r7
 80176b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80176ba:	b004      	add	sp, #16
 80176bc:	4770      	bx	lr
	...

080176c0 <_ZN16TWIPR_Estimation5startEv>:

/* ======================================================= */
void TWIPR_Estimation::start() {
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b082      	sub	sp, #8
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
	osThreadNew(estimation_task, (void*) this, &estimation_task_attributes);
 80176c8:	4a04      	ldr	r2, [pc, #16]	@ (80176dc <_ZN16TWIPR_Estimation5startEv+0x1c>)
 80176ca:	6879      	ldr	r1, [r7, #4]
 80176cc:	4804      	ldr	r0, [pc, #16]	@ (80176e0 <_ZN16TWIPR_Estimation5startEv+0x20>)
 80176ce:	f7f7 f956 	bl	800e97e <osThreadNew>
}
 80176d2:	bf00      	nop
 80176d4:	3708      	adds	r7, #8
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}
 80176da:	bf00      	nop
 80176dc:	08026278 	.word	0x08026278
 80176e0:	08017b31 	.word	0x08017b31

080176e4 <_ZN16TWIPR_Estimation13task_functionEv>:
/* ======================================================= */
void TWIPR_Estimation::reset() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::task_function() {
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]

	this->_orientation_fusion.begin((float) TWIPR_ESTIMATION_FREQUENCY);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 80176f2:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 801771c <_ZN16TWIPR_Estimation13task_functionEv+0x38>
 80176f6:	4618      	mov	r0, r3
 80176f8:	f7ff ff74 	bl	80175e4 <_ZN8Madgwick5beginEf>
	this->status = TWIPR_ESTIMATION_STATUS_OK;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2202      	movs	r2, #2
 8017700:	701a      	strb	r2, [r3, #0]
//	this->_sensors.calibrate();
	uint32_t ticks;

	while (true) {
		ticks = osKernelGetTickCount();
 8017702:	f7f7 f927 	bl	800e954 <osKernelGetTickCount>
 8017706:	60f8      	str	r0, [r7, #12]
		this->update();
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 f809 	bl	8017720 <_ZN16TWIPR_Estimation6updateEv>
		osDelayUntil(ticks + (uint32_t) (1000.0 / TWIPR_ESTIMATION_FREQUENCY));
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	330a      	adds	r3, #10
 8017712:	4618      	mov	r0, r3
 8017714:	f7f7 f9e0 	bl	800ead8 <osDelayUntil>
		ticks = osKernelGetTickCount();
 8017718:	bf00      	nop
 801771a:	e7f2      	b.n	8017702 <_ZN16TWIPR_Estimation13task_functionEv+0x1e>
 801771c:	42c80000 	.word	0x42c80000

08017720 <_ZN16TWIPR_Estimation6updateEv>:
/* ======================================================= */
void TWIPR_Estimation::stop() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::update() {
 8017720:	b5b0      	push	{r4, r5, r7, lr}
 8017722:	b0a8      	sub	sp, #160	@ 0xa0
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]

	// Update the Sensors
	this->config.sensors->update();
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801772c:	4618      	mov	r0, r3
 801772e:	f000 fa7c 	bl	8017c2a <_ZN13TWIPR_Sensors6updateEv>

	// Read the sensor data
	twipr_sensors_data_t data = this->config.sensors->getData();
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017736:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801773a:	4611      	mov	r1, r2
 801773c:	4618      	mov	r0, r3
 801773e:	f000 fa85 	bl	8017c4c <_ZN13TWIPR_Sensors7getDataEv>

	// Orientation Estimation
	this->_orientation_fusion.updateIMU(data.gyr.x, data.gyr.y, data.gyr.z,
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8017748:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801774c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8017750:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8017754:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 8017758:	edd7 5a1a 	vldr	s11, [r7, #104]	@ 0x68
 801775c:	ed97 5a1b 	vldr	s10, [r7, #108]	@ 0x6c
 8017760:	eef0 2a45 	vmov.f32	s5, s10
 8017764:	eeb0 2a65 	vmov.f32	s4, s11
 8017768:	eef0 1a46 	vmov.f32	s3, s12
 801776c:	eeb0 1a66 	vmov.f32	s2, s13
 8017770:	eef0 0a47 	vmov.f32	s1, s14
 8017774:	eeb0 0a67 	vmov.f32	s0, s15
 8017778:	4618      	mov	r0, r3
 801777a:	f008 fc9d 	bl	80200b8 <_ZN8Madgwick9updateIMUEffffff>
			data.acc.x, data.acc.y, data.acc.z);

	vqf_real_t gyr[3] = { data.gyr.x, data.gyr.y, data.gyr.z };
 801777e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8017782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017786:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 801778a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801778e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017792:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8017796:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801779a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801779e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	vqf_real_t acc[3] = { data.acc.x, data.acc.y, data.acc.z };
 80177a2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80177a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80177aa:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
 80177ae:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80177b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80177b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
 80177ba:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80177be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80177c2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	vqf.update(gyr, acc);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 80177cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80177d0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80177d4:	4618      	mov	r0, r3
 80177d6:	f007 fc71 	bl	801f0bc <_ZN8BasicVQF6updateEPKdS1_>

	vqf_real_t quat[4];

	vqf.getQuat6D(quat);
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 80177e0:	f107 0208 	add.w	r2, r7, #8
 80177e4:	4611      	mov	r1, r2
 80177e6:	4618      	mov	r0, r3
 80177e8:	f007 fc7a 	bl	801f0e0 <_ZNK8BasicVQF9getQuat6DEPd>
	float w = quat[0];
 80177ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80177f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80177f4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float x = quat[1];
 80177f8:	ed97 7b04 	vldr	d7, [r7, #16]
 80177fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017800:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	float y = quat[2];
 8017804:	ed97 7b06 	vldr	d7, [r7, #24]
 8017808:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801780c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	float z = quat[3];
 8017810:	ed97 7b08 	vldr	d7, [r7, #32]
 8017814:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017818:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90

	float theta = atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y));
 801781c:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8017820:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8017824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017828:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 801782c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8017830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017838:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801783c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8017840:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017844:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8017848:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801784c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017850:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017854:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017858:	ee77 7a67 	vsub.f32	s15, s14, s15
 801785c:	eef0 0a67 	vmov.f32	s1, s15
 8017860:	eeb0 0a66 	vmov.f32	s0, s13
 8017864:	f7ff feaa 	bl	80175bc <_ZSt5atan2ff>
 8017868:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c

//	float theta = this->_orientation_fusion.getRollRadians();
	float theta_dot = data.gyr.x;
 801786c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801786e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

//	float theta =

	// Correct the speed by the pitch angle velocity
	data.speed_left += theta_dot;
 8017872:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8017876:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 801787a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801787e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	data.speed_right += theta_dot;
 8017882:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8017886:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 801788a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801788e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	// Get the speed and yaw speed
	float v = ((data.speed_left + data.speed_right) / 2 )
 8017892:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8017896:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 801789a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801789e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80178a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			* this->config.model.r_wheel;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
	float v = ((data.speed_left + data.speed_right) / 2 )
 80178ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80178b0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84

	float psi_dot = (data.speed_right - data.speed_left)
 80178b4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80178b8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80178bc:	ee37 7a67 	vsub.f32	s14, s14, s15
			* this->config.model.r_wheel / this->config.model.distance_wheels;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80178c6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
	float psi_dot = (data.speed_right - data.speed_left)
 80178d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80178d4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

	// Set the current state
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 80178de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80178e2:	4618      	mov	r0, r3
 80178e4:	f7f7 fa40 	bl	800ed68 <osSemaphoreAcquire>
	this->state.v = v;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80178ee:	605a      	str	r2, [r3, #4]
	this->state.theta = theta;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80178f6:	609a      	str	r2, [r3, #8]
	this->state.theta_dot = theta_dot;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80178fe:	60da      	str	r2, [r3, #12]
	this->state.psi = 0;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f04f 0200 	mov.w	r2, #0
 8017906:	611a      	str	r2, [r3, #16]
	this->state.psi_dot = psi_dot;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801790e:	615a      	str	r2, [r3, #20]

	// Calculate the average
	this->mean_state.v = this->mean_state.v
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	ed93 7a06 	vldr	s14, [r3, #24]
			- (this->_state_buffer[this->_state_buffer_index].v
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 801791c:	4619      	mov	r1, r3
 801791e:	687a      	ldr	r2, [r7, #4]
 8017920:	460b      	mov	r3, r1
 8017922:	009b      	lsls	r3, r3, #2
 8017924:	440b      	add	r3, r1
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	4413      	add	r3, r2
 801792a:	334c      	adds	r3, #76	@ 0x4c
 801792c:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017930:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017934:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].v
 8017938:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.v / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	edd3 6a01 	vldr	s13, [r3, #4]
 8017942:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017946:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801794a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.v = this->mean_state.v
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	edc3 7a06 	vstr	s15, [r3, #24]
	this->mean_state.theta = this->mean_state.theta
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	ed93 7a07 	vldr	s14, [r3, #28]
			- (this->_state_buffer[this->_state_buffer_index].theta
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017960:	4619      	mov	r1, r3
 8017962:	687a      	ldr	r2, [r7, #4]
 8017964:	460b      	mov	r3, r1
 8017966:	009b      	lsls	r3, r3, #2
 8017968:	440b      	add	r3, r1
 801796a:	009b      	lsls	r3, r3, #2
 801796c:	4413      	add	r3, r2
 801796e:	3350      	adds	r3, #80	@ 0x50
 8017970:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017974:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017978:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta
 801797c:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	edd3 6a02 	vldr	s13, [r3, #8]
 8017986:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 801798a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801798e:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta = this->mean_state.theta
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	edc3 7a07 	vstr	s15, [r3, #28]
	this->mean_state.theta_dot = this->mean_state.theta_dot
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	ed93 7a08 	vldr	s14, [r3, #32]
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80179a4:	4619      	mov	r1, r3
 80179a6:	687a      	ldr	r2, [r7, #4]
 80179a8:	460b      	mov	r3, r1
 80179aa:	009b      	lsls	r3, r3, #2
 80179ac:	440b      	add	r3, r1
 80179ae:	009b      	lsls	r3, r3, #2
 80179b0:	4413      	add	r3, r2
 80179b2:	3354      	adds	r3, #84	@ 0x54
 80179b4:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 80179b8:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 80179bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 80179c0:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta_dot
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	edd3 6a03 	vldr	s13, [r3, #12]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 80179ca:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 80179ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.theta_dot
 80179d2:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta_dot = this->mean_state.theta_dot
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	edc3 7a08 	vstr	s15, [r3, #32]
	this->mean_state.psi = this->mean_state.psi
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			- (this->_state_buffer[this->_state_buffer_index].psi
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80179e8:	4619      	mov	r1, r3
 80179ea:	687a      	ldr	r2, [r7, #4]
 80179ec:	460b      	mov	r3, r1
 80179ee:	009b      	lsls	r3, r3, #2
 80179f0:	440b      	add	r3, r1
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	4413      	add	r3, r2
 80179f6:	3358      	adds	r3, #88	@ 0x58
 80179f8:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 80179fc:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017a00:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi
 8017a04:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	edd3 6a04 	vldr	s13, [r3, #16]
 8017a0e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017a12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8017a16:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi = this->mean_state.psi
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	this->mean_state.psi_dot =
			this->mean_state.psi_dot
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					- (this->_state_buffer[this->_state_buffer_index].psi_dot
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017a2c:	4619      	mov	r1, r3
 8017a2e:	687a      	ldr	r2, [r7, #4]
 8017a30:	460b      	mov	r3, r1
 8017a32:	009b      	lsls	r3, r3, #2
 8017a34:	440b      	add	r3, r1
 8017a36:	009b      	lsls	r3, r3, #2
 8017a38:	4413      	add	r3, r2
 8017a3a:	335c      	adds	r3, #92	@ 0x5c
 8017a3c:	edd3 6a00 	vldr	s13, [r3]
							/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 8017a40:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
					- (this->_state_buffer[this->_state_buffer_index].psi_dot
 8017a48:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (this->state.psi_dot
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	edd3 6a05 	vldr	s13, [r3, #20]
							/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8017a52:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8017ac0 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
 8017a56:	eec6 7a86 	vdiv.f32	s15, s13, s12
					+ (this->state.psi_dot
 8017a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi_dot =
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	this->_state_buffer[this->_state_buffer_index] = this->state;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017a6a:	4619      	mov	r1, r3
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	460b      	mov	r3, r1
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	440b      	add	r3, r1
 8017a74:	009b      	lsls	r3, r3, #2
 8017a76:	4413      	add	r3, r2
 8017a78:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	1d14      	adds	r4, r2, #4
 8017a80:	1d1d      	adds	r5, r3, #4
 8017a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a86:	682b      	ldr	r3, [r5, #0]
 8017a88:	6023      	str	r3, [r4, #0]
	osSemaphoreRelease(_semaphore);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 8017a90:	4618      	mov	r0, r3
 8017a92:	f7f7 f9bb 	bl	800ee0c <osSemaphoreRelease>

	this->_state_buffer_index++;
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017a9c:	3301      	adds	r3, #1
 8017a9e:	b29a      	uxth	r2, r3
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	f8a3 281c 	strh.w	r2, [r3, #2076]	@ 0x81c
	if (this->_state_buffer_index == TWIPR_ESTIMATION_STATE_BUFFER_SIZE) {
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 8017aac:	2b64      	cmp	r3, #100	@ 0x64
 8017aae:	d103      	bne.n	8017ab8 <_ZN16TWIPR_Estimation6updateEv+0x398>
		this->_state_buffer_index = 0;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	f8a3 281c 	strh.w	r2, [r3, #2076]	@ 0x81c
	}

}
 8017ab8:	bf00      	nop
 8017aba:	37a0      	adds	r7, #160	@ 0xa0
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bdb0      	pop	{r4, r5, r7, pc}
 8017ac0:	42c80000 	.word	0x42c80000

08017ac4 <_ZN16TWIPR_Estimation8getStateEv>:
	out = this->mean_state;
	osSemaphoreRelease(_semaphore);
	return out;
}
/* ======================================================= */
twipr_estimation_state_t TWIPR_Estimation::getState() {
 8017ac4:	b5b0      	push	{r4, r5, r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
 8017acc:	6039      	str	r1, [r7, #0]
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 8017ad4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7f7 f945 	bl	800ed68 <osSemaphoreAcquire>
	twipr_estimation_state_t out = this->state;
 8017ade:	687a      	ldr	r2, [r7, #4]
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	4615      	mov	r5, r2
 8017ae4:	1d1c      	adds	r4, r3, #4
 8017ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017aea:	6823      	ldr	r3, [r4, #0]
 8017aec:	602b      	str	r3, [r5, #0]
	osSemaphoreRelease(_semaphore);
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7f7 f989 	bl	800ee0c <osSemaphoreRelease>
	return out;
 8017afa:	bf00      	nop
}
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bdb0      	pop	{r4, r5, r7, pc}

08017b04 <_ZN16TWIPR_Estimation9getSampleEv>:
/* ======================================================= */
void TWIPR_Estimation::setState(twipr_estimation_state_t state) {
	twipr_error_handler(0);
}
/* ======================================================= */
twipr_logging_estimation_t TWIPR_Estimation::getSample() {
 8017b04:	b5b0      	push	{r4, r5, r7, lr}
 8017b06:	b088      	sub	sp, #32
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	61f8      	str	r0, [r7, #28]
 8017b0c:	61b9      	str	r1, [r7, #24]
	twipr_logging_estimation_t sample;
	sample.state = this->getState();
 8017b0e:	69fc      	ldr	r4, [r7, #28]
 8017b10:	463b      	mov	r3, r7
 8017b12:	69b9      	ldr	r1, [r7, #24]
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7ff ffd5 	bl	8017ac4 <_ZN16TWIPR_Estimation8getStateEv>
 8017b1a:	4625      	mov	r5, r4
 8017b1c:	463c      	mov	r4, r7
 8017b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017b22:	6823      	ldr	r3, [r4, #0]
 8017b24:	602b      	str	r3, [r5, #0]
	return sample;
 8017b26:	bf00      	nop
}
 8017b28:	69f8      	ldr	r0, [r7, #28]
 8017b2a:	3720      	adds	r7, #32
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bdb0      	pop	{r4, r5, r7, pc}

08017b30 <_Z15estimation_taskPv>:
/* ======================================================= */
void estimation_task(void *estimation) {
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
	TWIPR_Estimation *estimator = (TWIPR_Estimation*) estimation;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	60fb      	str	r3, [r7, #12]
	estimator->task_function();
 8017b3c:	68f8      	ldr	r0, [r7, #12]
 8017b3e:	f7ff fdd1 	bl	80176e4 <_ZN16TWIPR_Estimation13task_functionEv>
}
 8017b42:	bf00      	nop
 8017b44:	3710      	adds	r7, #16
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}

08017b4a <_ZN13TWIPR_SensorsC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_sensors.h"

TWIPR_Sensors::TWIPR_Sensors() {
 8017b4a:	b580      	push	{r7, lr}
 8017b4c:	b082      	sub	sp, #8
 8017b4e:	af00      	add	r7, sp, #0
 8017b50:	6078      	str	r0, [r7, #4]
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	3304      	adds	r3, #4
 8017b56:	4618      	mov	r0, r3
 8017b58:	f009 f864 	bl	8020c24 <_ZN6BMI160C1Ev>

}
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3708      	adds	r7, #8
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}
	...

08017b68 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>:

/* ======================================================= */
uint8_t TWIPR_Sensors::init(twipr_sensors_config_t config) {
 8017b68:	b590      	push	{r4, r7, lr}
 8017b6a:	b08d      	sub	sp, #52	@ 0x34
 8017b6c:	af02      	add	r7, sp, #8
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]

	// Initialize the IMU
	bmi160_gyr_config_t gyr_config;
 8017b72:	4b23      	ldr	r3, [pc, #140]	@ (8017c00 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x98>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	623b      	str	r3, [r7, #32]
	bmi160_acc_config_t acc_config;
 8017b78:	4b22      	ldr	r3, [pc, #136]	@ (8017c04 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x9c>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	61fb      	str	r3, [r7, #28]
	bmi160_config_t imu_config = { .hspi = BOARD_SPI_INTERN, .CS_GPIOx =
 8017b7e:	f107 0308 	add.w	r3, r7, #8
 8017b82:	2200      	movs	r2, #0
 8017b84:	601a      	str	r2, [r3, #0]
 8017b86:	605a      	str	r2, [r3, #4]
 8017b88:	609a      	str	r2, [r3, #8]
 8017b8a:	60da      	str	r2, [r3, #12]
 8017b8c:	611a      	str	r2, [r3, #16]
 8017b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8017c08 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa0>)
 8017b90:	60bb      	str	r3, [r7, #8]
 8017b92:	4b1e      	ldr	r3, [pc, #120]	@ (8017c0c <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa4>)
 8017b94:	60fb      	str	r3, [r7, #12]
 8017b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017b9a:	823b      	strh	r3, [r7, #16]
	BOARD_CS_IMU_PORT, .CS_GPIO_Pin =
	BOARD_CS_IMU_PIN, .gyr = gyr_config, .acc = acc_config };
 8017b9c:	f107 0312 	add.w	r3, r7, #18
 8017ba0:	f107 0220 	add.w	r2, r7, #32
 8017ba4:	6810      	ldr	r0, [r2, #0]
 8017ba6:	6018      	str	r0, [r3, #0]
 8017ba8:	f107 0316 	add.w	r3, r7, #22
 8017bac:	f107 021c 	add.w	r2, r7, #28
 8017bb0:	6810      	ldr	r0, [r2, #0]
 8017bb2:	6018      	str	r0, [r3, #0]
//
	uint8_t success = imu.init(imu_config);
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	1d1c      	adds	r4, r3, #4
 8017bb8:	466a      	mov	r2, sp
 8017bba:	f107 0314 	add.w	r3, r7, #20
 8017bbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bc2:	e882 0003 	stmia.w	r2, {r0, r1}
 8017bc6:	f107 0308 	add.w	r3, r7, #8
 8017bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017bcc:	4620      	mov	r0, r4
 8017bce:	f009 f869 	bl	8020ca4 <_ZN6BMI1604initE15bmi160_config_t>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (!success) {
 8017bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d104      	bne.n	8017bea <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x82>
		this->status = TWIPR_SENSORS_STATUS_ERROR;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	22ff      	movs	r2, #255	@ 0xff
 8017be4:	701a      	strb	r2, [r3, #0]
		return 0;
 8017be6:	2300      	movs	r3, #0
 8017be8:	e006      	b.n	8017bf8 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x90>
	}


	this->_config = config;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	683a      	ldr	r2, [r7, #0]
 8017bee:	651a      	str	r2, [r3, #80]	@ 0x50

	this->status = TWIPR_SENSORS_STATUS_IDLE;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	701a      	strb	r2, [r3, #0]
	return 1;
 8017bf6:	2301      	movs	r3, #1
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	372c      	adds	r7, #44	@ 0x2c
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd90      	pop	{r4, r7, pc}
 8017c00:	08025e18 	.word	0x08025e18
 8017c04:	08025e1c 	.word	0x08025e1c
 8017c08:	240003cc 	.word	0x240003cc
 8017c0c:	58020400 	.word	0x58020400

08017c10 <_ZN13TWIPR_Sensors5startEv>:
/* ======================================================= */
void TWIPR_Sensors::start() {
 8017c10:	b480      	push	{r7}
 8017c12:	b083      	sub	sp, #12
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
	// TODO
	this->status = TWIPR_SENSORS_STATUS_RUNNING;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2201      	movs	r2, #1
 8017c1c:	701a      	strb	r2, [r3, #0]
}
 8017c1e:	bf00      	nop
 8017c20:	370c      	adds	r7, #12
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr

08017c2a <_ZN13TWIPR_Sensors6updateEv>:

	return success;

}
/* ======================================================= */
void TWIPR_Sensors::update() {
 8017c2a:	b580      	push	{r7, lr}
 8017c2c:	b082      	sub	sp, #8
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
	this->_readImu();
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f000 f81f 	bl	8017c76 <_ZN13TWIPR_Sensors8_readImuEv>
	this->_readMotorSpeed();
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f000 f83b 	bl	8017cb4 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>
	this->_readBatteryVoltage();
 8017c3e:	6878      	ldr	r0, [r7, #4]
 8017c40:	f000 f855 	bl	8017cee <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>
}
 8017c44:	bf00      	nop
 8017c46:	3708      	adds	r7, #8
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}

08017c4c <_ZN13TWIPR_Sensors7getDataEv>:
/* ======================================================= */
twipr_sensors_data_t TWIPR_Sensors::getData() {
 8017c4c:	b4b0      	push	{r4, r5, r7}
 8017c4e:	b083      	sub	sp, #12
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	6039      	str	r1, [r7, #0]
	return this->_data;
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	4615      	mov	r5, r2
 8017c5c:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 8017c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	602b      	str	r3, [r5, #0]
}
 8017c6c:	6878      	ldr	r0, [r7, #4]
 8017c6e:	370c      	adds	r7, #12
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bcb0      	pop	{r4, r5, r7}
 8017c74:	4770      	bx	lr

08017c76 <_ZN13TWIPR_Sensors8_readImuEv>:
	this->imu.fastOffsetCalibration();
	return 0;
}

/* ======================================================= */
void TWIPR_Sensors::_readImu() {
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b082      	sub	sp, #8
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	6078      	str	r0, [r7, #4]
	this->imu.update();
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	3304      	adds	r3, #4
 8017c82:	4618      	mov	r0, r3
 8017c84:	f009 f93f 	bl	8020f06 <_ZN6BMI1606updateEv>
	memcpy(&this->_data.acc, &this->imu.acc, sizeof(this->_data.acc));
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	3320      	adds	r3, #32
 8017c92:	220c      	movs	r2, #12
 8017c94:	4619      	mov	r1, r3
 8017c96:	f00c f9a8 	bl	8023fea <memcpy>
	memcpy(&this->_data.gyr, &this->imu.gyr, sizeof(this->_data.gyr));
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	330c      	adds	r3, #12
 8017ca4:	220c      	movs	r2, #12
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	f00c f99f 	bl	8023fea <memcpy>
}
 8017cac:	bf00      	nop
 8017cae:	3708      	adds	r7, #8
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>:

/* ======================================================= */
void TWIPR_Sensors::_readMotorSpeed() {
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b084      	sub	sp, #16
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
	// TODO: I probably need some check here if this has been initialized or so

	twipr_drive_can_speed_t motor_speed = this->_config.drive->getSpeed();
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7ff fb8d 	bl	80173e0 <_ZN15TWIPR_Drive_CAN8getSpeedEv>
 8017cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8017cca:	eef0 7a60 	vmov.f32	s15, s1
 8017cce:	ed87 7a02 	vstr	s14, [r7, #8]
 8017cd2:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_data.speed_left = motor_speed.speed_left;
 8017cd6:	68ba      	ldr	r2, [r7, #8]
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	655a      	str	r2, [r3, #84]	@ 0x54
	this->_data.speed_right = motor_speed.speed_right;
 8017cdc:	68fa      	ldr	r2, [r7, #12]
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	659a      	str	r2, [r3, #88]	@ 0x58

	nop();
 8017ce2:	f7fa ff69 	bl	8012bb8 <_Z3nopv>
}
 8017ce6:	bf00      	nop
 8017ce8:	3710      	adds	r7, #16
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}

08017cee <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>:

/* ======================================================= */
void TWIPR_Sensors::_readBatteryVoltage() {
 8017cee:	b580      	push	{r7, lr}
 8017cf0:	b084      	sub	sp, #16
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
	float voltage = this->_config.drive->getVoltage();
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7ff fba4 	bl	8017448 <_ZN15TWIPR_Drive_CAN10getVoltageEv>
 8017d00:	ed87 0a03 	vstr	s0, [r7, #12]
	this->_data.battery_voltage = voltage;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	68fa      	ldr	r2, [r7, #12]
 8017d08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8017d0a:	bf00      	nop
 8017d0c:	3710      	adds	r7, #16
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}

08017d12 <_ZN13RegisterEntry12getInputSizeEv>:
	virtual uint16_t getInputSize() {
 8017d12:	b480      	push	{r7}
 8017d14:	b083      	sub	sp, #12
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	6078      	str	r0, [r7, #4]
		return 0;
 8017d1a:	2300      	movs	r3, #0
	}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	370c      	adds	r7, #12
 8017d20:	46bd      	mov	sp, r7
 8017d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d26:	4770      	bx	lr

08017d28 <_ZN13RegisterEntry13getOutputSizeEv>:
	virtual uint16_t getOutputSize() {
 8017d28:	b480      	push	{r7}
 8017d2a:	b083      	sub	sp, #12
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
		return 0;
 8017d30:	2300      	movs	r3, #0
	}
 8017d32:	4618      	mov	r0, r3
 8017d34:	370c      	adds	r7, #12
 8017d36:	46bd      	mov	sp, r7
 8017d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3c:	4770      	bx	lr

08017d3e <_ZN13RegisterEntry7executeEv>:
	virtual void execute() {
 8017d3e:	b480      	push	{r7}
 8017d40:	b083      	sub	sp, #12
 8017d42:	af00      	add	r7, sp, #0
 8017d44:	6078      	str	r0, [r7, #4]
	}
 8017d46:	bf00      	nop
 8017d48:	370c      	adds	r7, #12
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d50:	4770      	bx	lr

08017d52 <_ZN13RegisterEntry7executeEPhS0_>:
	virtual uint16_t execute(uint8_t *input, uint8_t *output) {
 8017d52:	b480      	push	{r7}
 8017d54:	b085      	sub	sp, #20
 8017d56:	af00      	add	r7, sp, #0
 8017d58:	60f8      	str	r0, [r7, #12]
 8017d5a:	60b9      	str	r1, [r7, #8]
 8017d5c:	607a      	str	r2, [r7, #4]
		return 0;
 8017d5e:	2300      	movs	r3, #0
	}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3714      	adds	r7, #20
 8017d64:	46bd      	mov	sp, r7
 8017d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6a:	4770      	bx	lr

08017d6c <_ZN13RegisterEntry5writeEPh>:
	virtual void write(uint8_t *input) {
 8017d6c:	b480      	push	{r7}
 8017d6e:	b083      	sub	sp, #12
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
 8017d74:	6039      	str	r1, [r7, #0]
	}
 8017d76:	bf00      	nop
 8017d78:	370c      	adds	r7, #12
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d80:	4770      	bx	lr

08017d82 <_ZN13RegisterEntry4readEPh>:
	virtual uint16_t read(uint8_t *output) {
 8017d82:	b480      	push	{r7}
 8017d84:	b083      	sub	sp, #12
 8017d86:	af00      	add	r7, sp, #0
 8017d88:	6078      	str	r0, [r7, #4]
 8017d8a:	6039      	str	r1, [r7, #0]
		return 0;
 8017d8c:	2300      	movs	r3, #0
	}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	370c      	adds	r7, #12
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr

08017d9a <_ZN13RegisterEntry7getTypeEv>:
	virtual register_entry_type_t getType() {
 8017d9a:	b480      	push	{r7}
 8017d9c:	b083      	sub	sp, #12
 8017d9e:	af00      	add	r7, sp, #0
 8017da0:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_TYPE_NONE;
 8017da2:	2300      	movs	r3, #0
	}
 8017da4:	4618      	mov	r0, r3
 8017da6:	370c      	adds	r7, #12
 8017da8:	46bd      	mov	sp, r7
 8017daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dae:	4770      	bx	lr

08017db0 <_ZN13RegisterEntryC1Ev>:
class RegisterEntry {
 8017db0:	b480      	push	{r7}
 8017db2:	b083      	sub	sp, #12
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
 8017db8:	4a04      	ldr	r2, [pc, #16]	@ (8017dcc <_ZN13RegisterEntryC1Ev+0x1c>)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	601a      	str	r2, [r3, #0]
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	370c      	adds	r7, #12
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dca:	4770      	bx	lr
 8017dcc:	080266a8 	.word	0x080266a8

08017dd0 <_ZN8CallbackaSEOS_>:
class Callback {
 8017dd0:	b480      	push	{r7}
 8017dd2:	b083      	sub	sp, #12
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
 8017dd8:	6039      	str	r1, [r7, #0]
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	370c      	adds	r7, #12
 8017de0:	46bd      	mov	sp, r7
 8017de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de6:	4770      	bx	lr

08017de8 <_ZN19core_utils_CallbackIvvEaSEOS0_>:
class core_utils_Callback<void, void> : public Callback {
 8017de8:	b5b0      	push	{r4, r5, r7, lr}
 8017dea:	b082      	sub	sp, #8
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
 8017df0:	6039      	str	r1, [r7, #0]
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	683a      	ldr	r2, [r7, #0]
 8017df6:	4611      	mov	r1, r2
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7ff ffe9 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	791a      	ldrb	r2, [r3, #4]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	711a      	strb	r2, [r3, #4]
 8017e06:	687a      	ldr	r2, [r7, #4]
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	f102 0408 	add.w	r4, r2, #8
 8017e0e:	f103 0508 	add.w	r5, r3, #8
 8017e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017e1a:	e884 0003 	stmia.w	r4, {r0, r1}
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4618      	mov	r0, r3
 8017e22:	3708      	adds	r7, #8
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bdb0      	pop	{r4, r5, r7, pc}

08017e28 <_ZN24core_utils_RegisterEntryIvvE7executeEv>:
		map->addEntry(this->address, this);
		this->callback = core_utils_Callback<void, void>(object, member);
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
	}
	/* --------------------------------------------------------------------------------------------------------- */
	void execute() {
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b082      	sub	sp, #8
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
		this->callback.call();
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	3308      	adds	r3, #8
 8017e34:	4618      	mov	r0, r3
 8017e36:	f7fa fbb6 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
	}
 8017e3a:	bf00      	nop
 8017e3c:	3708      	adds	r7, #8
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}

08017e42 <_ZN24core_utils_RegisterEntryIvvE7executeEPhS1_>:
	/* --------------------------------------------------------------------------------------------------------- */
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8017e42:	b580      	push	{r7, lr}
 8017e44:	b084      	sub	sp, #16
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	60f8      	str	r0, [r7, #12]
 8017e4a:	60b9      	str	r1, [r7, #8]
 8017e4c:	607a      	str	r2, [r7, #4]
		this->callback.call();
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	3308      	adds	r3, #8
 8017e52:	4618      	mov	r0, r3
 8017e54:	f7fa fba7 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
		return this->getOutputSize();
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	3304      	adds	r3, #4
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	68f8      	ldr	r0, [r7, #12]
 8017e62:	4798      	blx	r3
 8017e64:	4603      	mov	r3, r0
	}
 8017e66:	4618      	mov	r0, r3
 8017e68:	3710      	adds	r7, #16
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bd80      	pop	{r7, pc}

08017e6e <_ZN24core_utils_RegisterEntryIvvE12getInputSizeEv>:
	/* --------------------------------------------------------------------------------------------------------- */
	uint16_t getInputSize() {
 8017e6e:	b480      	push	{r7}
 8017e70:	b083      	sub	sp, #12
 8017e72:	af00      	add	r7, sp, #0
 8017e74:	6078      	str	r0, [r7, #4]
		return 0;
 8017e76:	2300      	movs	r3, #0
	}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	370c      	adds	r7, #12
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr

08017e84 <_ZN24core_utils_RegisterEntryIvvE13getOutputSizeEv>:

	/* --------------------------------------------------------------------------------------------------------- */
	uint16_t getOutputSize() {
 8017e84:	b480      	push	{r7}
 8017e86:	b083      	sub	sp, #12
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
		return 0;
 8017e8c:	2300      	movs	r3, #0
	}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	370c      	adds	r7, #12
 8017e92:	46bd      	mov	sp, r7
 8017e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e98:	4770      	bx	lr

08017e9a <_ZN24core_utils_RegisterEntryIvvE7getTypeEv>:
	/* --------------------------------------------------------------------------------------------------------- */
	register_entry_type_t getType() {
 8017e9a:	b480      	push	{r7}
 8017e9c:	b083      	sub	sp, #12
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
		return this->type;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	799b      	ldrb	r3, [r3, #6]
	}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	370c      	adds	r7, #12
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr
	...

08017eb4 <firmware>:


/**
 * @brief Initializes and starts the firmware task. This is the function called from the main function.
 */
void firmware() {
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	af00      	add	r7, sp, #0
    osThreadNew(start_firmware_task, (void*)&twipr_firmware, &firmware_task_attributes);
 8017eb8:	4a03      	ldr	r2, [pc, #12]	@ (8017ec8 <firmware+0x14>)
 8017eba:	4904      	ldr	r1, [pc, #16]	@ (8017ecc <firmware+0x18>)
 8017ebc:	4804      	ldr	r0, [pc, #16]	@ (8017ed0 <firmware+0x1c>)
 8017ebe:	f7f6 fd5e 	bl	800e97e <osThreadNew>
}
 8017ec2:	bf00      	nop
 8017ec4:	bd80      	pop	{r7, pc}
 8017ec6:	bf00      	nop
 8017ec8:	0802629c 	.word	0x0802629c
 8017ecc:	2401f3c8 	.word	0x2401f3c8
 8017ed0:	08017ed5 	.word	0x08017ed5

08017ed4 <_Z19start_firmware_taskPv>:

/**
 * @brief Task wrapper to execute the firmware's main task function.
 * @param argument Pointer to the firmware object.
 */
void start_firmware_task(void* argument) {
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
    TWIPR_Firmware* firmware = (TWIPR_Firmware*)argument;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	60fb      	str	r3, [r7, #12]
//    firmware->task = xTaskGetCurrentTaskHandle();
    firmware->helperTask();
 8017ee0:	68f8      	ldr	r0, [r7, #12]
 8017ee2:	f000 f869 	bl	8017fb8 <_ZN14TWIPR_Firmware10helperTaskEv>
}
 8017ee6:	bf00      	nop
 8017ee8:	3710      	adds	r7, #16
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}

08017eee <_ZN26TWIPR_CommunicationManagerD1Ev>:
	twipr_sequence_input_t *sequence_rx_buffer;
	uint16_t len_sequence_buffer;
	uint16_t reset_uart_exti;
} twipr_communication_config_t;

class TWIPR_CommunicationManager {
 8017eee:	b580      	push	{r7, lr}
 8017ef0:	b082      	sub	sp, #8
 8017ef2:	af00      	add	r7, sp, #0
 8017ef4:	6078      	str	r0, [r7, #4]
 8017ef6:	687a      	ldr	r2, [r7, #4]
 8017ef8:	f241 43fc 	movw	r3, #5372	@ 0x14fc
 8017efc:	4413      	add	r3, r2
 8017efe:	4618      	mov	r0, r3
 8017f00:	f005 fea5 	bl	801dc4e <_ZN3CAND1Ev>
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	4618      	mov	r0, r3
 8017f08:	3708      	adds	r7, #8
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	bd80      	pop	{r7, pc}
	...

08017f10 <_ZN14TWIPR_FirmwareC1Ev>:

/**
 * @brief Constructor for TWIPR_Firmware.
 */
TWIPR_Firmware::TWIPR_Firmware() {
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b082      	sub	sp, #8
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2202      	movs	r2, #2
 8017f1c:	701a      	strb	r2, [r3, #0]
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2200      	movs	r2, #0
 8017f22:	705a      	strb	r2, [r3, #1]
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	4a23      	ldr	r2, [pc, #140]	@ (8017fb4 <_ZN14TWIPR_FirmwareC1Ev+0xa4>)
 8017f28:	8812      	ldrh	r2, [r2, #0]
 8017f2a:	805a      	strh	r2, [r3, #2]
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2200      	movs	r2, #0
 8017f30:	605a      	str	r2, [r3, #4]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	3308      	adds	r3, #8
 8017f36:	4618      	mov	r0, r3
 8017f38:	f7ff f8a7 	bl	801708a <_ZN15TWIPR_Drive_CANC1Ev>
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	3358      	adds	r3, #88	@ 0x58
 8017f40:	4618      	mov	r0, r3
 8017f42:	f7fc fa9a 	bl	801447a <_ZN26TWIPR_CommunicationManagerC1Ev>
 8017f46:	687a      	ldr	r2, [r7, #4]
 8017f48:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 8017f4c:	4413      	add	r3, r2
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fd fb96 	bl	8015680 <_ZN20TWIPR_ControlManagerC1Ev>
 8017f54:	687a      	ldr	r2, [r7, #4]
 8017f56:	f242 330c 	movw	r3, #8972	@ 0x230c
 8017f5a:	4413      	add	r3, r2
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f005 f969 	bl	801d234 <_ZN15TWIPR_SequencerC1Ev>
 8017f62:	687a      	ldr	r2, [r7, #4]
 8017f64:	f242 3398 	movw	r3, #9112	@ 0x2398
 8017f68:	4413      	add	r3, r2
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7ff fb50 	bl	8017610 <_ZN16TWIPR_EstimationC1Ev>
 8017f70:	687a      	ldr	r2, [r7, #4]
 8017f72:	f642 43d8 	movw	r3, #11480	@ 0x2cd8
 8017f76:	4413      	add	r3, r2
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f004 ff0c 	bl	801cd96 <_ZN16TWIPR_SupervisorC1Ev>
 8017f7e:	687a      	ldr	r2, [r7, #4]
 8017f80:	f642 5328 	movw	r3, #11560	@ 0x2d28
 8017f84:	4413      	add	r3, r2
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7ff fddf 	bl	8017b4a <_ZN13TWIPR_SensorsC1Ev>
 8017f8c:	687a      	ldr	r2, [r7, #4]
 8017f8e:	f642 53a0 	movw	r3, #11680	@ 0x2da0
 8017f92:	4413      	add	r3, r2
 8017f94:	4618      	mov	r0, r3
 8017f96:	f004 fdcf 	bl	801cb38 <_ZN13TWIPR_LoggingC1Ev>
 8017f9a:	687a      	ldr	r2, [r7, #4]
 8017f9c:	f243 3394 	movw	r3, #13204	@ 0x3394
 8017fa0:	4413      	add	r3, r2
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7fe fd16 	bl	80169d4 <_ZN13elapsedMillisC1Ev>
    // Constructor logic can be extended if necessary
}
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	4618      	mov	r0, r3
 8017fac:	3708      	adds	r7, #8
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	08025e34 	.word	0x08025e34

08017fb8 <_ZN14TWIPR_Firmware10helperTaskEv>:

/**
 * @brief Main firmware task logic. This is initializing and starting the firmware. It then proceeds to do some monitoring.
 */
void TWIPR_Firmware::helperTask() {
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b084      	sub	sp, #16
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
    // Initialize and start the firmware components
    HAL_StatusTypeDef status;
    status = this->init();
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f000 f861 	bl	8018088 <_ZN14TWIPR_Firmware4initEv>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	73fb      	strb	r3, [r7, #15]

    if (status){
 8017fca:	7bfb      	ldrb	r3, [r7, #15]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d002      	beq.n	8017fd6 <_ZN14TWIPR_Firmware10helperTaskEv+0x1e>
    	while (true){
    		nop();
 8017fd0:	f7fa fdf2 	bl	8012bb8 <_Z3nopv>
 8017fd4:	e7fc      	b.n	8017fd0 <_ZN14TWIPR_Firmware10helperTaskEv+0x18>
    	}
    }

    status = this->start();
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 f9cc 	bl	8018374 <_ZN14TWIPR_Firmware5startEv>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	73fb      	strb	r3, [r7, #15]

    if (status){
 8017fe0:	7bfb      	ldrb	r3, [r7, #15]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d002      	beq.n	8017fec <_ZN14TWIPR_Firmware10helperTaskEv+0x34>
    	while (true){
    		nop();
 8017fe6:	f7fa fde7 	bl	8012bb8 <_Z3nopv>
 8017fea:	e7fc      	b.n	8017fe6 <_ZN14TWIPR_Firmware10helperTaskEv+0x2e>
    	}
    }

    osDelay(150);
 8017fec:	2096      	movs	r0, #150	@ 0x96
 8017fee:	f7f6 fd58 	bl	800eaa2 <osDelay>
    // Signal successful initialization
    rc_buzzer.setConfig(900, 250, 1);
 8017ff2:	2201      	movs	r2, #1
 8017ff4:	21fa      	movs	r1, #250	@ 0xfa
 8017ff6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8018074 <_ZN14TWIPR_Firmware10helperTaskEv+0xbc>
 8017ffa:	481f      	ldr	r0, [pc, #124]	@ (8018078 <_ZN14TWIPR_Firmware10helperTaskEv+0xc0>)
 8017ffc:	f005 fcf8 	bl	801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>
    rc_buzzer.start();
 8018000:	481d      	ldr	r0, [pc, #116]	@ (8018078 <_ZN14TWIPR_Firmware10helperTaskEv+0xc0>)
 8018002:	f005 fd0d 	bl	801da20 <_ZN19RobotControl_Buzzer5startEv>

    // Initialize the LED state
    rc_rgb_led_side_1.setColor(0, 0, 0);
 8018006:	2300      	movs	r3, #0
 8018008:	2200      	movs	r2, #0
 801800a:	2100      	movs	r1, #0
 801800c:	481b      	ldr	r0, [pc, #108]	@ (801807c <_ZN14TWIPR_Firmware10helperTaskEv+0xc4>)
 801800e:	f005 fcb1 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
    rc_rgb_led_side_1.state(1);
 8018012:	2101      	movs	r1, #1
 8018014:	4819      	ldr	r0, [pc, #100]	@ (801807c <_ZN14TWIPR_Firmware10helperTaskEv+0xc4>)
 8018016:	f005 fccb 	bl	801d9b0 <_ZN19RobotControl_RGBLED5stateEh>

    rgb_color_struct_t color_white_dim = {
 801801a:	4a19      	ldr	r2, [pc, #100]	@ (8018080 <_ZN14TWIPR_Firmware10helperTaskEv+0xc8>)
 801801c:	f107 030c 	add.w	r3, r7, #12
 8018020:	6812      	ldr	r2, [r2, #0]
 8018022:	4611      	mov	r1, r2
 8018024:	8019      	strh	r1, [r3, #0]
 8018026:	3302      	adds	r3, #2
 8018028:	0c12      	lsrs	r2, r2, #16
 801802a:	701a      	strb	r2, [r3, #0]
    		.red = 2,
			.green = 2,
			.blue = 2
    };

    extender.rgbLEDStrip_extern_setColor(color_white_dim);
 801802c:	68f9      	ldr	r1, [r7, #12]
 801802e:	4815      	ldr	r0, [pc, #84]	@ (8018084 <_ZN14TWIPR_Firmware10helperTaskEv+0xcc>)
 8018030:	f005 fbf7 	bl	801d822 <_ZN21RobotControl_Extender27rgbLEDStrip_extern_setColorE18rgb_color_struct_t>


    elapsedMillis debug_timer;
 8018034:	f107 0308 	add.w	r3, r7, #8
 8018038:	4618      	mov	r0, r3
 801803a:	f7fe fccb 	bl	80169d4 <_ZN13elapsedMillisC1Ev>

    // Main task loop
    while (true) {

    	// Check the Control Mode LED Timer
    	if (this->timer_control_mode_led > 250){
 801803e:	687a      	ldr	r2, [r7, #4]
 8018040:	f243 3394 	movw	r3, #13204	@ 0x3394
 8018044:	4413      	add	r3, r2
 8018046:	4618      	mov	r0, r3
 8018048:	f7fe fcd2 	bl	80169f0 <_ZNK13elapsedMilliscvmEv>
 801804c:	4603      	mov	r3, r0
 801804e:	2bfa      	cmp	r3, #250	@ 0xfa
 8018050:	bf8c      	ite	hi
 8018052:	2301      	movhi	r3, #1
 8018054:	2300      	movls	r3, #0
 8018056:	b2db      	uxtb	r3, r3
 8018058:	2b00      	cmp	r3, #0
 801805a:	d0f0      	beq.n	801803e <_ZN14TWIPR_Firmware10helperTaskEv+0x86>
    		this->timer_control_mode_led.reset();
 801805c:	687a      	ldr	r2, [r7, #4]
 801805e:	f243 3394 	movw	r3, #13204	@ 0x3394
 8018062:	4413      	add	r3, r2
 8018064:	4618      	mov	r0, r3
 8018066:	f7fe fca8 	bl	80169ba <_ZN13elapsedMillis5resetEv>
    		this->setControlModeLed();
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f000 fab2 	bl	80185d4 <_ZN14TWIPR_Firmware17setControlModeLedEv>
    	if (this->timer_control_mode_led > 250){
 8018070:	e7e5      	b.n	801803e <_ZN14TWIPR_Firmware10helperTaskEv+0x86>
 8018072:	bf00      	nop
 8018074:	44610000 	.word	0x44610000
 8018078:	24022cbc 	.word	0x24022cbc
 801807c:	24022cb4 	.word	0x24022cb4
 8018080:	08025e38 	.word	0x08025e38
 8018084:	24022cac 	.word	0x24022cac

08018088 <_ZN14TWIPR_Firmware4initEv>:
}

/**
 * @brief Initializes all the firmware modules and configurations.
 */
HAL_StatusTypeDef TWIPR_Firmware::init() {
 8018088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801808a:	b0b3      	sub	sp, #204	@ 0xcc
 801808c:	af08      	add	r7, sp, #32
 801808e:	6078      	str	r0, [r7, #4]
    // Initialize robot control and peripheral modules
    robot_control_init();
 8018090:	f005 fd2a 	bl	801dae8 <_Z18robot_control_initv>
    robot_control_start();
 8018094:	f005 fd3a 	bl	801db0c <_Z19robot_control_startv>

    io_start();
 8018098:	f004 fd06 	bl	801caa8 <_Z8io_startv>

    // Setup RGB LED and buzzer for feedback
    rc_rgb_led_status.setColor(120, 40, 0); // Orange
 801809c:	2300      	movs	r3, #0
 801809e:	2228      	movs	r2, #40	@ 0x28
 80180a0:	2178      	movs	r1, #120	@ 0x78
 80180a2:	48a5      	ldr	r0, [pc, #660]	@ (8018338 <_ZN14TWIPR_Firmware4initEv+0x2b0>)
 80180a4:	f005 fc66 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
    rc_rgb_led_status.state(1);
 80180a8:	2101      	movs	r1, #1
 80180aa:	48a3      	ldr	r0, [pc, #652]	@ (8018338 <_ZN14TWIPR_Firmware4initEv+0x2b0>)
 80180ac:	f005 fc80 	bl	801d9b0 <_ZN19RobotControl_RGBLED5stateEh>
    rc_buzzer.setConfig(800, 250, 1);
 80180b0:	2201      	movs	r2, #1
 80180b2:	21fa      	movs	r1, #250	@ 0xfa
 80180b4:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 801833c <_ZN14TWIPR_Firmware4initEv+0x2b4>
 80180b8:	48a1      	ldr	r0, [pc, #644]	@ (8018340 <_ZN14TWIPR_Firmware4initEv+0x2b8>)
 80180ba:	f005 fc99 	bl	801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>
    rc_buzzer.start();
 80180be:	48a0      	ldr	r0, [pc, #640]	@ (8018340 <_ZN14TWIPR_Firmware4initEv+0x2b8>)
 80180c0:	f005 fcae 	bl	801da20 <_ZN19RobotControl_Buzzer5startEv>

    osDelay(250); // Allow initialization delay
 80180c4:	20fa      	movs	r0, #250	@ 0xfa
 80180c6:	f7f6 fcec 	bl	800eaa2 <osDelay>

    // Communication module setup
    twipr_communication_config_t twipr_comm_config = {
 80180ca:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80180ce:	2200      	movs	r2, #0
 80180d0:	601a      	str	r2, [r3, #0]
 80180d2:	605a      	str	r2, [r3, #4]
 80180d4:	609a      	str	r2, [r3, #8]
 80180d6:	60da      	str	r2, [r3, #12]
 80180d8:	611a      	str	r2, [r3, #16]
 80180da:	615a      	str	r2, [r3, #20]
 80180dc:	4b99      	ldr	r3, [pc, #612]	@ (8018344 <_ZN14TWIPR_Firmware4initEv+0x2bc>)
 80180de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80180e2:	4b99      	ldr	r3, [pc, #612]	@ (8018348 <_ZN14TWIPR_Firmware4initEv+0x2c0>)
 80180e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80180e8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80180ec:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 80180f0:	2304      	movs	r3, #4
 80180f2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
        .hspi = BOARD_SPI_CM4,
        .notification_gpio_tx = core_utils_GPIO(CM4_SAMPLE_NOTIFICATION_PORT, CM4_SAMPLE_NOTIFICATION_PIN),
        .sequence_rx_buffer = this->sequencer.rx_buffer,
        .len_sequence_buffer = TWIPR_SEQUENCE_BUFFER_SIZE,
        .reset_uart_exti = CM4_UART_RESET_EXTI,
    };
 80180f6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80180fa:	3308      	adds	r3, #8
 80180fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018100:	4992      	ldr	r1, [pc, #584]	@ (801834c <_ZN14TWIPR_Firmware4initEv+0x2c4>)
 8018102:	4618      	mov	r0, r3
 8018104:	f009 fcc2 	bl	8021a8c <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>
        .sequence_rx_buffer = this->sequencer.rx_buffer,
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801810e:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
    };
 8018112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    this->comm.init(twipr_comm_config);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 801811c:	466c      	mov	r4, sp
 801811e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8018122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801812a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801812e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018130:	4628      	mov	r0, r5
 8018132:	f7fc f9d1 	bl	80144d8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>
    this->comm.start();
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	3358      	adds	r3, #88	@ 0x58
 801813a:	4618      	mov	r0, r3
 801813c:	f7fc fb48 	bl	80147d0 <_ZN26TWIPR_CommunicationManager5startEv>

    // Sensors initialization
    twipr_sensors_config_t twipr_sensors_config = { .drive = &this->drive };
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	3308      	adds	r3, #8
 8018144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    this->sensors.init(twipr_sensors_config);
 8018148:	687a      	ldr	r2, [r7, #4]
 801814a:	f642 5328 	movw	r3, #11560	@ 0x2d28
 801814e:	4413      	add	r3, r2
 8018150:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8018154:	4618      	mov	r0, r3
 8018156:	f7ff fd07 	bl	8017b68 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>

    // Estimation module setup
    twipr_estimation_config_t twipr_estimation_config = {
        .drive = &this->drive,
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	3308      	adds	r3, #8
        .sensors = &this->sensors,
//        .enable_slip_detection = 1,
        .model = twipr_model_small,
    };
 801815e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        .sensors = &this->sensors,
 8018160:	687a      	ldr	r2, [r7, #4]
 8018162:	f642 5328 	movw	r3, #11560	@ 0x2d28
 8018166:	4413      	add	r3, r2
    };
 8018168:	673b      	str	r3, [r7, #112]	@ 0x70
 801816a:	4b79      	ldr	r3, [pc, #484]	@ (8018350 <_ZN14TWIPR_Firmware4initEv+0x2c8>)
 801816c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8018170:	461d      	mov	r5, r3
 8018172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018176:	682b      	ldr	r3, [r5, #0]
 8018178:	6023      	str	r3, [r4, #0]
    this->estimation.init(twipr_estimation_config);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f242 3498 	movw	r4, #9112	@ 0x2398
 8018180:	441c      	add	r4, r3
 8018182:	466d      	mov	r5, sp
 8018184:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801818a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801818e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8018192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018194:	4620      	mov	r0, r4
 8018196:	f7ff fa6b 	bl	8017670 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>

    // Control module initialization
    twipr_control_init_config_t twipr_control_config = {
 801819a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801819e:	2200      	movs	r2, #0
 80181a0:	601a      	str	r2, [r3, #0]
 80181a2:	605a      	str	r2, [r3, #4]
 80181a4:	609a      	str	r2, [r3, #8]
 80181a6:	60da      	str	r2, [r3, #12]
 80181a8:	4b6a      	ldr	r3, [pc, #424]	@ (8018354 <_ZN14TWIPR_Firmware4initEv+0x2cc>)
 80181aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80181ac:	4b6a      	ldr	r3, [pc, #424]	@ (8018358 <_ZN14TWIPR_Firmware4initEv+0x2d0>)
 80181ae:	66bb      	str	r3, [r7, #104]	@ 0x68
        .estimation = &this->estimation,
 80181b0:	687a      	ldr	r2, [r7, #4]
 80181b2:	f242 3398 	movw	r3, #9112	@ 0x2398
 80181b6:	4413      	add	r3, r2
        .drive = &this->drive,
        .max_torque = TWIPR_CONTROL_MAX_TORQUE,
        .freq = TWIPR_CONTROL_TASK_FREQ,
    };
 80181b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        .drive = &this->drive,
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	3308      	adds	r3, #8
    };
 80181be:	663b      	str	r3, [r7, #96]	@ 0x60
    this->control.init(twipr_control_config);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f641 70d4 	movw	r0, #8148	@ 0x1fd4
 80181c6:	4418      	add	r0, r3
 80181c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80181ca:	9300      	str	r3, [sp, #0]
 80181cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80181d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80181d2:	f7fd fa79 	bl	80156c8 <_ZN20TWIPR_ControlManager4initE27twipr_control_init_config_t>

    // Drive
    twipr_drive_can_config_t twipr_drive_config = {
 80181d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80181da:	2200      	movs	r2, #0
 80181dc:	601a      	str	r2, [r3, #0]
 80181de:	605a      	str	r2, [r3, #4]
 80181e0:	609a      	str	r2, [r3, #8]
 80181e2:	2301      	movs	r3, #1
 80181e4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80181e8:	2302      	movs	r3, #2
 80181ea:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80181ee:	23ff      	movs	r3, #255	@ 0xff
 80181f0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80181f4:	2301      	movs	r3, #1
 80181f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80181fa:	4b58      	ldr	r3, [pc, #352]	@ (801835c <_ZN14TWIPR_Firmware4initEv+0x2d4>)
 80181fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    		.can = &this->comm.can,
 80181fe:	687a      	ldr	r2, [r7, #4]
 8018200:	f241 5354 	movw	r3, #5460	@ 0x1554
 8018204:	4413      	add	r3, r2
			.id_left = 1,
			.id_right = 2,
			.direction_left = -1,
			.direction_right = 1,
			.torque_max = 0.4
    };
 8018206:	653b      	str	r3, [r7, #80]	@ 0x50

    HAL_StatusTypeDef status = this->drive.init(twipr_drive_config);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f103 0008 	add.w	r0, r3, #8
 801820e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8018212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018214:	f7fe ff62 	bl	80170dc <_ZN15TWIPR_Drive_CAN4initE24twipr_drive_can_config_t>
 8018218:	4603      	mov	r3, r0
 801821a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    if (status){
 801821e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8018222:	2b00      	cmp	r3, #0
 8018224:	d002      	beq.n	801822c <_ZN14TWIPR_Firmware4initEv+0x1a4>
    	return status;
 8018226:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 801822a:	e081      	b.n	8018330 <_ZN14TWIPR_Firmware4initEv+0x2a8>
    }


    // Initialize safety module
    twipr_supervisor_config_t supervisor_config = {
 801822c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018230:	222c      	movs	r2, #44	@ 0x2c
 8018232:	2100      	movs	r1, #0
 8018234:	4618      	mov	r0, r3
 8018236:	f00b fe48 	bl	8023eca <memset>
 801823a:	4b49      	ldr	r3, [pc, #292]	@ (8018360 <_ZN14TWIPR_Firmware4initEv+0x2d8>)
 801823c:	637b      	str	r3, [r7, #52]	@ 0x34
 801823e:	4b49      	ldr	r3, [pc, #292]	@ (8018364 <_ZN14TWIPR_Firmware4initEv+0x2dc>)
 8018240:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018242:	4b49      	ldr	r3, [pc, #292]	@ (8018368 <_ZN14TWIPR_Firmware4initEv+0x2e0>)
 8018244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018246:	4b49      	ldr	r3, [pc, #292]	@ (801836c <_ZN14TWIPR_Firmware4initEv+0x2e4>)
 8018248:	643b      	str	r3, [r7, #64]	@ 0x40
 801824a:	2332      	movs	r3, #50	@ 0x32
 801824c:	647b      	str	r3, [r7, #68]	@ 0x44
 801824e:	4b48      	ldr	r3, [pc, #288]	@ (8018370 <_ZN14TWIPR_Firmware4initEv+0x2e8>)
 8018250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018252:	4b47      	ldr	r3, [pc, #284]	@ (8018370 <_ZN14TWIPR_Firmware4initEv+0x2e8>)
 8018254:	64fb      	str	r3, [r7, #76]	@ 0x4c
    	.estimation = &this->estimation,
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	f242 3398 	movw	r3, #9112	@ 0x2398
 801825c:	4413      	add	r3, r2
        .drive = &this->drive,
        .control = &this->control,
		.communication = &this->comm,
		.off_button = &off_button,
        .max_wheel_speed = TWIPR_SAFETY_MAX_WHEEL_SPEED,
    };
 801825e:	627b      	str	r3, [r7, #36]	@ 0x24
        .drive = &this->drive,
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	3308      	adds	r3, #8
    };
 8018264:	62bb      	str	r3, [r7, #40]	@ 0x28
        .control = &this->control,
 8018266:	687a      	ldr	r2, [r7, #4]
 8018268:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 801826c:	4413      	add	r3, r2
    };
 801826e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		.communication = &this->comm,
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	3358      	adds	r3, #88	@ 0x58
    };
 8018274:	633b      	str	r3, [r7, #48]	@ 0x30
    this->supervisor.init(supervisor_config);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	f642 46d8 	movw	r6, #11480	@ 0x2cd8
 801827c:	441e      	add	r6, r3
 801827e:	466d      	mov	r5, sp
 8018280:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8018284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018288:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801828c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018296:	4630      	mov	r0, r6
 8018298:	f004 fd96 	bl	801cdc8 <_ZN16TWIPR_Supervisor4initE25twipr_supervisor_config_t>

    // Sequencer setup
    twipr_sequencer_config_t sequencer_config = {
        .control = &this->control,
 801829c:	687a      	ldr	r2, [r7, #4]
 801829e:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 80182a2:	4413      	add	r3, r2
        .comm = &this->comm,
    };
 80182a4:	61fb      	str	r3, [r7, #28]
        .comm = &this->comm,
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	3358      	adds	r3, #88	@ 0x58
    };
 80182aa:	623b      	str	r3, [r7, #32]
    this->sequencer.init(sequencer_config);
 80182ac:	687a      	ldr	r2, [r7, #4]
 80182ae:	f242 330c 	movw	r3, #8972	@ 0x230c
 80182b2:	4413      	add	r3, r2
 80182b4:	f107 021c 	add.w	r2, r7, #28
 80182b8:	ca06      	ldmia	r2, {r1, r2}
 80182ba:	4618      	mov	r0, r3
 80182bc:	f004 ffd2 	bl	801d264 <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t>
        .firmware = this,
        .control = &this->control,
        .estimation = &this->estimation,
        .sensors = &this->sensors,
        .sequencer = &this->sequencer,
    };
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	60bb      	str	r3, [r7, #8]
        .control = &this->control,
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 80182ca:	4413      	add	r3, r2
    };
 80182cc:	60fb      	str	r3, [r7, #12]
        .estimation = &this->estimation,
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	f242 3398 	movw	r3, #9112	@ 0x2398
 80182d4:	4413      	add	r3, r2
    };
 80182d6:	613b      	str	r3, [r7, #16]
        .sensors = &this->sensors,
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	f642 5328 	movw	r3, #11560	@ 0x2d28
 80182de:	4413      	add	r3, r2
    };
 80182e0:	617b      	str	r3, [r7, #20]
        .sequencer = &this->sequencer,
 80182e2:	687a      	ldr	r2, [r7, #4]
 80182e4:	f242 330c 	movw	r3, #8972	@ 0x230c
 80182e8:	4413      	add	r3, r2
    };
 80182ea:	61bb      	str	r3, [r7, #24]
    this->logging.init(logging_config);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f642 54a0 	movw	r4, #11680	@ 0x2da0
 80182f2:	441c      	add	r4, r3
 80182f4:	466a      	mov	r2, sp
 80182f6:	f107 0314 	add.w	r3, r7, #20
 80182fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8018302:	f107 0308 	add.w	r3, r7, #8
 8018306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018308:	4620      	mov	r0, r4
 801830a:	f004 fc24 	bl	801cb56 <_ZN13TWIPR_Logging4initE22twipr_logging_config_t>


    this->debugData = twipr_debug_sample_t{0};
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018314:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8018318:	2200      	movs	r2, #0
 801831a:	601a      	str	r2, [r3, #0]
 801831c:	605a      	str	r2, [r3, #4]
 801831e:	609a      	str	r2, [r3, #8]
 8018320:	60da      	str	r2, [r3, #12]
    this->debugData.debug2 = 55;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018328:	2237      	movs	r2, #55	@ 0x37
 801832a:	f883 2381 	strb.w	r2, [r3, #897]	@ 0x381

    return HAL_OK;
 801832e:	2300      	movs	r3, #0
}
 8018330:	4618      	mov	r0, r3
 8018332:	37ac      	adds	r7, #172	@ 0xac
 8018334:	46bd      	mov	sp, r7
 8018336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018338:	24022cb0 	.word	0x24022cb0
 801833c:	44480000 	.word	0x44480000
 8018340:	24022cbc 	.word	0x24022cbc
 8018344:	24000754 	.word	0x24000754
 8018348:	24000318 	.word	0x24000318
 801834c:	58021000 	.word	0x58021000
 8018350:	2400001c 	.word	0x2400001c
 8018354:	3e99999a 	.word	0x3e99999a
 8018358:	42c80000 	.word	0x42c80000
 801835c:	3ecccccd 	.word	0x3ecccccd
 8018360:	24022c18 	.word	0x24022c18
 8018364:	42960000 	.word	0x42960000
 8018368:	3dcccccd 	.word	0x3dcccccd
 801836c:	3d4ccccd 	.word	0x3d4ccccd
 8018370:	3e4ccccd 	.word	0x3e4ccccd

08018374 <_ZN14TWIPR_Firmware5startEv>:

/**
 * @brief Starts the various firmware components and control tasks.
 */
HAL_StatusTypeDef TWIPR_Firmware::start() {
 8018374:	b580      	push	{r7, lr}
 8018376:	b084      	sub	sp, #16
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]

    // Start the Sensors
    this->sensors.start();
 801837c:	687a      	ldr	r2, [r7, #4]
 801837e:	f642 5328 	movw	r3, #11560	@ 0x2d28
 8018382:	4413      	add	r3, r2
 8018384:	4618      	mov	r0, r3
 8018386:	f7ff fc43 	bl	8017c10 <_ZN13TWIPR_Sensors5startEv>

    // Start the estimation module
    this->estimation.start();
 801838a:	687a      	ldr	r2, [r7, #4]
 801838c:	f242 3398 	movw	r3, #9112	@ 0x2398
 8018390:	4413      	add	r3, r2
 8018392:	4618      	mov	r0, r3
 8018394:	f7ff f994 	bl	80176c0 <_ZN16TWIPR_Estimation5startEv>


    HAL_StatusTypeDef status = this->drive.start();
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	3308      	adds	r3, #8
 801839c:	4618      	mov	r0, r3
 801839e:	f7fe ff0f 	bl	80171c0 <_ZN15TWIPR_Drive_CAN5startEv>
 80183a2:	4603      	mov	r3, r0
 80183a4:	73fb      	strb	r3, [r7, #15]

    if(status){
 80183a6:	7bfb      	ldrb	r3, [r7, #15]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d002      	beq.n	80183b2 <_ZN14TWIPR_Firmware5startEv+0x3e>
    	while(true){
    		nop();
 80183ac:	f7fa fc04 	bl	8012bb8 <_Z3nopv>
 80183b0:	e7fc      	b.n	80183ac <_ZN14TWIPR_Firmware5startEv+0x38>
    	}
    }

    // Start the control module
    this->control.start();
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 80183b8:	4413      	add	r3, r2
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7fd fa12 	bl	80157e4 <_ZN20TWIPR_ControlManager5startEv>

    // Start the safety module
    this->supervisor.start();
 80183c0:	687a      	ldr	r2, [r7, #4]
 80183c2:	f642 43d8 	movw	r3, #11480	@ 0x2cd8
 80183c6:	4413      	add	r3, r2
 80183c8:	4618      	mov	r0, r3
 80183ca:	f004 fd19 	bl	801ce00 <_ZN16TWIPR_Supervisor5startEv>

    // Start the Sequencer module
    this->sequencer.start();
 80183ce:	687a      	ldr	r2, [r7, #4]
 80183d0:	f242 330c 	movw	r3, #8972	@ 0x230c
 80183d4:	4413      	add	r3, r2
 80183d6:	4618      	mov	r0, r3
 80183d8:	f004 ff84 	bl	801d2e4 <_ZN15TWIPR_Sequencer5startEv>

    // Start the control task
    osThreadNew(start_firmware_control_task, (void*)&twipr_firmware, &control_task_attributes);
 80183dc:	4a06      	ldr	r2, [pc, #24]	@ (80183f8 <_ZN14TWIPR_Firmware5startEv+0x84>)
 80183de:	4907      	ldr	r1, [pc, #28]	@ (80183fc <_ZN14TWIPR_Firmware5startEv+0x88>)
 80183e0:	4807      	ldr	r0, [pc, #28]	@ (8018400 <_ZN14TWIPR_Firmware5startEv+0x8c>)
 80183e2:	f7f6 facc 	bl	800e97e <osThreadNew>

    // Set firmware state to RUNNING
    this->firmware_state = TWIPR_FIRMWARE_STATE_RUNNING;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	2201      	movs	r2, #1
 80183ea:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 80183ec:	2300      	movs	r3, #0
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3710      	adds	r7, #16
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
 80183f6:	bf00      	nop
 80183f8:	080262c0 	.word	0x080262c0
 80183fc:	2401f3c8 	.word	0x2401f3c8
 8018400:	08018587 	.word	0x08018587

08018404 <_ZN14TWIPR_Firmware11controlTaskEv>:
 * @brief Main control task function for the firmware.
 *
 * This task ensures periodic execution of control logic and manages the
 * state of the firmware. It checks timing constraints and handles error states.
 */
void TWIPR_Firmware::controlTask() {
 8018404:	b580      	push	{r7, lr}
 8018406:	b084      	sub	sp, #16
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
    uint32_t global_tick;  // Current system tick
    uint32_t loop_time;    // Time taken for one control loop

    while (true) {
        global_tick = osKernelGetTickCount();  // Get current system tick
 801840c:	f7f6 faa2 	bl	800e954 <osKernelGetTickCount>
 8018410:	60f8      	str	r0, [r7, #12]

        // Execute the control task step
        this->controlTaskStep();
 8018412:	6878      	ldr	r0, [r7, #4]
 8018414:	f000 f816 	bl	8018444 <_ZN14TWIPR_Firmware15controlTaskStepEv>

        // Measure the time taken for the loop
        loop_time = osKernelGetTickCount() - global_tick;
 8018418:	f7f6 fa9c 	bl	800e954 <osKernelGetTickCount>
 801841c:	4602      	mov	r2, r0
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	1ad3      	subs	r3, r2, r3
 8018422:	60bb      	str	r3, [r7, #8]

        // Check for race conditions or timing issues
        if (loop_time > (1000.0 / (float)TWIPR_CONTROL_TASK_FREQ)) {
 8018424:	68bb      	ldr	r3, [r7, #8]
 8018426:	2b0a      	cmp	r3, #10
 8018428:	d905      	bls.n	8018436 <_ZN14TWIPR_Firmware11controlTaskEv+0x32>
            this->firmware_state = TWIPR_FIRMWARE_STATE_ERROR;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	22ff      	movs	r2, #255	@ 0xff
 801842e:	701a      	strb	r2, [r3, #0]
            this->error = TWIPR_ERROR_CRITICAL;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2201      	movs	r2, #1
 8018434:	705a      	strb	r2, [r3, #1]
        }

        // Delay until the next loop execution
        osDelayUntil(global_tick + (uint32_t)(1000.0 / (float) TWIPR_CONTROL_TASK_FREQ));
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	330a      	adds	r3, #10
 801843a:	4618      	mov	r0, r3
 801843c:	f7f6 fb4c 	bl	800ead8 <osDelayUntil>
        global_tick = osKernelGetTickCount();  // Get current system tick
 8018440:	e7e4      	b.n	801840c <_ZN14TWIPR_Firmware11controlTaskEv+0x8>
	...

08018444 <_ZN14TWIPR_Firmware15controlTaskStepEv>:
 *
 * This method updates the state of the firmware based on its current mode,
 * manages the controller, updates the sequencer, and collects data samples
 * for logging.
 */
void TWIPR_Firmware::controlTaskStep() {
 8018444:	b580      	push	{r7, lr}
 8018446:	b084      	sub	sp, #16
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]


    switch (this->firmware_state) {
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f993 3000 	ldrsb.w	r3, [r3]
 8018452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018456:	d05c      	beq.n	8018512 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xce>
 8018458:	2b01      	cmp	r3, #1
 801845a:	d161      	bne.n	8018520 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xdc>
        case TWIPR_FIRMWARE_STATE_RUNNING: {

		if (activityTimer > 250) {
 801845c:	4836      	ldr	r0, [pc, #216]	@ (8018538 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xf4>)
 801845e:	f7fe fac7 	bl	80169f0 <_ZNK13elapsedMilliscvmEv>
 8018462:	4603      	mov	r3, r0
 8018464:	2bfa      	cmp	r3, #250	@ 0xfa
 8018466:	bf8c      	ite	hi
 8018468:	2301      	movhi	r3, #1
 801846a:	2300      	movls	r3, #0
 801846c:	b2db      	uxtb	r3, r3
 801846e:	2b00      	cmp	r3, #0
 8018470:	d005      	beq.n	801847e <_ZN14TWIPR_Firmware15controlTaskStepEv+0x3a>
			activityTimer.reset();
 8018472:	4831      	ldr	r0, [pc, #196]	@ (8018538 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xf4>)
 8018474:	f7fe faa1 	bl	80169ba <_ZN13elapsedMillis5resetEv>
			rc_activity_led.toggle();
 8018478:	4830      	ldr	r0, [pc, #192]	@ (801853c <_ZN14TWIPR_Firmware15controlTaskStepEv+0xf8>)
 801847a:	f008 f9dc 	bl	8020836 <_ZN17core_hardware_LED6toggleEv>

        	// Check all modules
        	//TODO

        	// Check for errors in the safety module
        	twipr_error_t error = this->supervisor.check();
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	f642 43d8 	movw	r3, #11480	@ 0x2cd8
 8018484:	4413      	add	r3, r2
 8018486:	4618      	mov	r0, r3
 8018488:	f004 fdf0 	bl	801d06c <_ZN16TWIPR_Supervisor5checkEv>
 801848c:	4603      	mov	r3, r0
 801848e:	73fb      	strb	r3, [r7, #15]
        	if (!(error == TWIPR_ERROR_NONE)){
 8018490:	7bfb      	ldrb	r3, [r7, #15]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d004      	beq.n	80184a0 <_ZN14TWIPR_Firmware15controlTaskStepEv+0x5c>
        		this->errorHandler(error);
 8018496:	7bfb      	ldrb	r3, [r7, #15]
 8018498:	4619      	mov	r1, r3
 801849a:	6878      	ldr	r0, [r7, #4]
 801849c:	f000 f852 	bl	8018544 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t>
        	}

            // Update the sequencer
            this->sequencer.update();
 80184a0:	687a      	ldr	r2, [r7, #4]
 80184a2:	f242 330c 	movw	r3, #8972	@ 0x230c
 80184a6:	4413      	add	r3, r2
 80184a8:	4618      	mov	r0, r3
 80184aa:	f004 ff25 	bl	801d2f8 <_ZN15TWIPR_Sequencer6updateEv>

            // Update the controller
            this->control.update();
 80184ae:	687a      	ldr	r2, [r7, #4]
 80184b0:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 80184b4:	4413      	add	r3, r2
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7fd f9ba 	bl	8015830 <_ZN20TWIPR_ControlManager6updateEv>

            // Collect samples for logging
            sample_buffer_state = this->logging.collectSamples();
 80184bc:	687a      	ldr	r2, [r7, #4]
 80184be:	f642 53a0 	movw	r3, #11680	@ 0x2da0
 80184c2:	4413      	add	r3, r2
 80184c4:	4618      	mov	r0, r3
 80184c6:	f004 fb62 	bl	801cb8e <_ZN13TWIPR_Logging14collectSamplesEv>
 80184ca:	4603      	mov	r3, r0
 80184cc:	461a      	mov	r2, r3
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80184d4:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390

            // If the logging buffer is full, provide data to the communication module
            if (sample_buffer_state == TWIPR_LOGGING_BUFFER_FULL) {
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80184de:	f893 3390 	ldrb.w	r3, [r3, #912]	@ 0x390
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d109      	bne.n	80184fa <_ZN14TWIPR_Firmware15controlTaskStepEv+0xb6>
                this->comm.provideSampleData(this->logging.sample_buffer);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80184ec:	687a      	ldr	r2, [r7, #4]
 80184ee:	f642 53a0 	movw	r3, #11680	@ 0x2da0
 80184f2:	4413      	add	r3, r2
 80184f4:	4619      	mov	r1, r3
 80184f6:	f7fc fb95 	bl	8014c24 <_ZN26TWIPR_CommunicationManager17provideSampleDataEP22twipr_logging_sample_t>
            }

            // Increment the tick counter
            this->tick++;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	685b      	ldr	r3, [r3, #4]
 80184fe:	1c5a      	adds	r2, r3, #1
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	605a      	str	r2, [r3, #4]

            // Set the status LED to green (normal operation)
            rc_rgb_led_status.setColor(0, 60, 0);
 8018504:	2300      	movs	r3, #0
 8018506:	223c      	movs	r2, #60	@ 0x3c
 8018508:	2100      	movs	r1, #0
 801850a:	480d      	ldr	r0, [pc, #52]	@ (8018540 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xfc>)
 801850c:	f005 fa32 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
            break;
 8018510:	e00d      	b.n	801852e <_ZN14TWIPR_Firmware15controlTaskStepEv+0xea>
        }
        case TWIPR_FIRMWARE_STATE_ERROR: {
            // Set the status LED to red (error state)
            rc_rgb_led_status.setColor(120, 0, 0);
 8018512:	2300      	movs	r3, #0
 8018514:	2200      	movs	r2, #0
 8018516:	2178      	movs	r1, #120	@ 0x78
 8018518:	4809      	ldr	r0, [pc, #36]	@ (8018540 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xfc>)
 801851a:	f005 fa2b 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
            break;
 801851e:	e006      	b.n	801852e <_ZN14TWIPR_Firmware15controlTaskStepEv+0xea>
        }
        default: {
            // Handle undefined or unexpected states
            rc_rgb_led_status.setColor(120, 0, 0);
 8018520:	2300      	movs	r3, #0
 8018522:	2200      	movs	r2, #0
 8018524:	2178      	movs	r1, #120	@ 0x78
 8018526:	4806      	ldr	r0, [pc, #24]	@ (8018540 <_ZN14TWIPR_Firmware15controlTaskStepEv+0xfc>)
 8018528:	f005 fa24 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
            break;
 801852c:	bf00      	nop
        }
    }
}
 801852e:	bf00      	nop
 8018530:	3710      	adds	r7, #16
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	24022bfc 	.word	0x24022bfc
 801853c:	24022ca0 	.word	0x24022ca0
 8018540:	24022cb0 	.word	0x24022cb0

08018544 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t>:


void TWIPR_Firmware::errorHandler(twipr_error_t error){
 8018544:	b580      	push	{r7, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
 801854c:	460b      	mov	r3, r1
 801854e:	70fb      	strb	r3, [r7, #3]
	switch (error) {
 8018550:	78fb      	ldrb	r3, [r7, #3]
 8018552:	2b02      	cmp	r3, #2
 8018554:	d010      	beq.n	8018578 <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x34>
 8018556:	2b02      	cmp	r3, #2
 8018558:	dc11      	bgt.n	801857e <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
 801855a:	2b00      	cmp	r3, #0
 801855c:	d00e      	beq.n	801857c <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x38>
 801855e:	2b01      	cmp	r3, #1
 8018560:	d10d      	bne.n	801857e <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
	case TWIPR_ERROR_CRITICAL:{
		this->control.stop();
 8018562:	687a      	ldr	r2, [r7, #4]
 8018564:	f641 73d4 	movw	r3, #8148	@ 0x1fd4
 8018568:	4413      	add	r3, r2
 801856a:	4618      	mov	r0, r3
 801856c:	f7fd f94c 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
		this->firmware_state = TWIPR_FIRMWARE_STATE_ERROR;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	22ff      	movs	r2, #255	@ 0xff
 8018574:	701a      	strb	r2, [r3, #0]
		break;
 8018576:	e002      	b.n	801857e <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
	}
	case TWIPR_ERROR_WARNING :{
		break;
 8018578:	bf00      	nop
 801857a:	e000      	b.n	801857e <_ZN14TWIPR_Firmware12errorHandlerE13twipr_error_t+0x3a>
	}
	case TWIPR_ERROR_NONE:{
		break;
 801857c:	bf00      	nop
	}
	}
}
 801857e:	bf00      	nop
 8018580:	3708      	adds	r7, #8
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}

08018586 <_Z27start_firmware_control_taskPv>:

/**
 * @brief Wrapper function to start the control task.
 * @param argument Pointer to the firmware object.
 */
void start_firmware_control_task(void* argument) {
 8018586:	b580      	push	{r7, lr}
 8018588:	b084      	sub	sp, #16
 801858a:	af00      	add	r7, sp, #0
 801858c:	6078      	str	r0, [r7, #4]
    TWIPR_Firmware* firmware = (TWIPR_Firmware*)argument;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	60fb      	str	r3, [r7, #12]
    firmware->controlTask();
 8018592:	68f8      	ldr	r0, [r7, #12]
 8018594:	f7ff ff36 	bl	8018404 <_ZN14TWIPR_Firmware11controlTaskEv>
}
 8018598:	bf00      	nop
 801859a:	3710      	adds	r7, #16
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <_ZN14TWIPR_Firmware9getSampleEv>:

/**
 * @brief Retrieves a logging sample with the current state and tick count.
 * @return A logging structure containing the current tick, state, and error code.
 */
twipr_logging_general_t TWIPR_Firmware::getSample() {
 80185a0:	b480      	push	{r7}
 80185a2:	b083      	sub	sp, #12
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	6039      	str	r1, [r7, #0]
    twipr_logging_general_t sample = {
        .tick = this->tick,
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	685a      	ldr	r2, [r3, #4]
        .state = this->firmware_state,
        .error = this->error,
    };
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	601a      	str	r2, [r3, #0]
        .state = this->firmware_state,
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	f993 2000 	ldrsb.w	r2, [r3]
    };
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	711a      	strb	r2, [r3, #4]
        .error = this->error,
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	785a      	ldrb	r2, [r3, #1]
    };
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	715a      	strb	r2, [r3, #5]
    return sample;
 80185c4:	bf00      	nop
}
 80185c6:	6878      	ldr	r0, [r7, #4]
 80185c8:	370c      	adds	r7, #12
 80185ca:	46bd      	mov	sp, r7
 80185cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d0:	4770      	bx	lr
	...

080185d4 <_ZN14TWIPR_Firmware17setControlModeLedEv>:
 * the robot's current control mode:
 * - **Red**: TWIPR_CONTROL_MODE_OFF (The system is off)
 * - **Amber**: TWIPR_CONTROL_MODE_BALANCING (The system is in balancing mode)
 * - **Green**: TWIPR_CONTROL_MODE_VELOCITY (The system is in velocity mode)
 */
void TWIPR_Firmware::setControlModeLed() {
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b082      	sub	sp, #8
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
    // Check the current control mode and set the LED color accordingly
    if (this->control.mode == TWIPR_CONTROL_MODE_OFF) {
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80185e2:	f893 3fd5 	ldrb.w	r3, [r3, #4053]	@ 0xfd5
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d106      	bne.n	80185f8 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x24>
        rc_rgb_led_side_1.setColor(100, 0, 0); // Red for OFF mode
 80185ea:	2300      	movs	r3, #0
 80185ec:	2200      	movs	r2, #0
 80185ee:	2164      	movs	r1, #100	@ 0x64
 80185f0:	4811      	ldr	r0, [pc, #68]	@ (8018638 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x64>)
 80185f2:	f005 f9bf 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
    } else if (this->control.mode == TWIPR_CONTROL_MODE_BALANCING) {
        rc_rgb_led_side_1.setColor(100, 70, 0); // Amber for Balancing
    } else if (this->control.mode == TWIPR_CONTROL_MODE_VELOCITY) {
        rc_rgb_led_side_1.setColor(0, 100, 0); // Green for Velocity
    }
}
 80185f6:	e01a      	b.n	801862e <_ZN14TWIPR_Firmware17setControlModeLedEv+0x5a>
    } else if (this->control.mode == TWIPR_CONTROL_MODE_BALANCING) {
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80185fe:	f893 3fd5 	ldrb.w	r3, [r3, #4053]	@ 0xfd5
 8018602:	2b02      	cmp	r3, #2
 8018604:	d106      	bne.n	8018614 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x40>
        rc_rgb_led_side_1.setColor(100, 70, 0); // Amber for Balancing
 8018606:	2300      	movs	r3, #0
 8018608:	2246      	movs	r2, #70	@ 0x46
 801860a:	2164      	movs	r1, #100	@ 0x64
 801860c:	480a      	ldr	r0, [pc, #40]	@ (8018638 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x64>)
 801860e:	f005 f9b1 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
}
 8018612:	e00c      	b.n	801862e <_ZN14TWIPR_Firmware17setControlModeLedEv+0x5a>
    } else if (this->control.mode == TWIPR_CONTROL_MODE_VELOCITY) {
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801861a:	f893 3fd5 	ldrb.w	r3, [r3, #4053]	@ 0xfd5
 801861e:	2b03      	cmp	r3, #3
 8018620:	d105      	bne.n	801862e <_ZN14TWIPR_Firmware17setControlModeLedEv+0x5a>
        rc_rgb_led_side_1.setColor(0, 100, 0); // Green for Velocity
 8018622:	2300      	movs	r3, #0
 8018624:	2264      	movs	r2, #100	@ 0x64
 8018626:	2100      	movs	r1, #0
 8018628:	4803      	ldr	r0, [pc, #12]	@ (8018638 <_ZN14TWIPR_Firmware17setControlModeLedEv+0x64>)
 801862a:	f005 f9a3 	bl	801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>
}
 801862e:	bf00      	nop
 8018630:	3708      	adds	r7, #8
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	24022cb4 	.word	0x24022cb4

0801863c <_ZN14TWIPR_Firmware5debugEh>:

/**
 * @brief Debug function used for custom debugging operations.
 * @param input The debug input value to process.
 */
uint8_t TWIPR_Firmware::debug(uint8_t input) {
 801863c:	b480      	push	{r7}
 801863e:	b083      	sub	sp, #12
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	460b      	mov	r3, r1
 8018646:	70fb      	strb	r3, [r7, #3]
    // Debugging logic can be implemented here
	return input + 1;
 8018648:	78fb      	ldrb	r3, [r7, #3]
 801864a:	3301      	adds	r3, #1
 801864c:	b2db      	uxtb	r3, r3
}
 801864e:	4618      	mov	r0, r3
 8018650:	370c      	adds	r7, #12
 8018652:	46bd      	mov	sp, r7
 8018654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018658:	4770      	bx	lr
	...

0801865c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvEC1EP11RegisterMaphPS0_>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 801865c:	b580      	push	{r7, lr}
 801865e:	b084      	sub	sp, #16
 8018660:	af00      	add	r7, sp, #0
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	603b      	str	r3, [r7, #0]
 8018668:	4613      	mov	r3, r2
 801866a:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	4618      	mov	r0, r3
 8018670:	f7ff fb9e 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018674:	4a0e      	ldr	r2, [pc, #56]	@ (80186b0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvEC1EP11RegisterMaphPS0_+0x54>)
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	601a      	str	r2, [r3, #0]
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	3310      	adds	r3, #16
 801867e:	4618      	mov	r0, r3
 8018680:	f000 fdcc 	bl	801921c <_ZN19core_utils_CallbackI22twipr_firmware_state_tvEC1Ev>
		this->address = address;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	79fa      	ldrb	r2, [r7, #7]
 8018688:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	68fa      	ldr	r2, [r7, #12]
 8018692:	7b11      	ldrb	r1, [r2, #12]
 8018694:	68fa      	ldr	r2, [r7, #12]
 8018696:	68b8      	ldr	r0, [r7, #8]
 8018698:	4798      	blx	r3
		this->data = data;
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	683a      	ldr	r2, [r7, #0]
 801869e:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	2203      	movs	r2, #3
 80186a4:	735a      	strb	r2, [r3, #13]
	}
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	4618      	mov	r0, r3
 80186aa:	3710      	adds	r7, #16
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	08026650 	.word	0x08026650

080186b4 <_ZN24core_utils_RegisterEntryImvEC1EP11RegisterMaphPm>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b084      	sub	sp, #16
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	60f8      	str	r0, [r7, #12]
 80186bc:	60b9      	str	r1, [r7, #8]
 80186be:	603b      	str	r3, [r7, #0]
 80186c0:	4613      	mov	r3, r2
 80186c2:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7ff fb72 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 80186cc:	4a0e      	ldr	r2, [pc, #56]	@ (8018708 <_ZN24core_utils_RegisterEntryImvEC1EP11RegisterMaphPm+0x54>)
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	601a      	str	r2, [r3, #0]
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	3314      	adds	r3, #20
 80186d6:	4618      	mov	r0, r3
 80186d8:	f000 fdbe 	bl	8019258 <_ZN19core_utils_CallbackImvEC1Ev>
		this->address = address;
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	79fa      	ldrb	r2, [r7, #7]
 80186e0:	741a      	strb	r2, [r3, #16]
		map->addEntry(this->address, this);
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	68fa      	ldr	r2, [r7, #12]
 80186ea:	7c11      	ldrb	r1, [r2, #16]
 80186ec:	68fa      	ldr	r2, [r7, #12]
 80186ee:	68b8      	ldr	r0, [r7, #8]
 80186f0:	4798      	blx	r3
		this->data = data;
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	683a      	ldr	r2, [r7, #0]
 80186f6:	60da      	str	r2, [r3, #12]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	2203      	movs	r2, #3
 80186fc:	745a      	strb	r2, [r3, #17]
	}
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	4618      	mov	r0, r3
 8018702:	3710      	adds	r7, #16
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	0802661c 	.word	0x0802661c

0801870c <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvEC1EP11RegisterMaphPS0_>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	60b9      	str	r1, [r7, #8]
 8018716:	603b      	str	r3, [r7, #0]
 8018718:	4613      	mov	r3, r2
 801871a:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	4618      	mov	r0, r3
 8018720:	f7ff fb46 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018724:	4a0e      	ldr	r2, [pc, #56]	@ (8018760 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvEC1EP11RegisterMaphPS0_+0x54>)
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	601a      	str	r2, [r3, #0]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	3310      	adds	r3, #16
 801872e:	4618      	mov	r0, r3
 8018730:	f000 fdb0 	bl	8019294 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvEC1Ev>
		this->address = address;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	79fa      	ldrb	r2, [r7, #7]
 8018738:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	68fa      	ldr	r2, [r7, #12]
 8018742:	7b11      	ldrb	r1, [r2, #12]
 8018744:	68fa      	ldr	r2, [r7, #12]
 8018746:	68b8      	ldr	r0, [r7, #8]
 8018748:	4798      	blx	r3
		this->data = data;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	2203      	movs	r2, #3
 8018754:	735a      	strb	r2, [r3, #13]
	}
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	4618      	mov	r0, r3
 801875a:	3710      	adds	r7, #16
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}
 8018760:	080265e8 	.word	0x080265e8

08018764 <_ZN19core_utils_CallbackIhhEaSEOS0_>:
class core_utils_Callback: public Callback {
 8018764:	b5b0      	push	{r4, r5, r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
 801876c:	6039      	str	r1, [r7, #0]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	683a      	ldr	r2, [r7, #0]
 8018772:	4611      	mov	r1, r2
 8018774:	4618      	mov	r0, r3
 8018776:	f7ff fb2b 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	791a      	ldrb	r2, [r3, #4]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	711a      	strb	r2, [r3, #4]
 8018782:	687a      	ldr	r2, [r7, #4]
 8018784:	683b      	ldr	r3, [r7, #0]
 8018786:	f102 0408 	add.w	r4, r2, #8
 801878a:	f103 0508 	add.w	r5, r3, #8
 801878e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018796:	e884 0003 	stmia.w	r4, {r0, r1}
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	4618      	mov	r0, r3
 801879e:	3708      	adds	r7, #8
 80187a0:	46bd      	mov	sp, r7
 80187a2:	bdb0      	pop	{r4, r5, r7, pc}

080187a4 <_ZN24core_utils_RegisterEntryIhhEC1I14TWIPR_FirmwareEEP11RegisterMaphPT_MS5_FhhE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 80187a4:	b590      	push	{r4, r7, lr}
 80187a6:	b08d      	sub	sp, #52	@ 0x34
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	603b      	str	r3, [r7, #0]
 80187b0:	4613      	mov	r3, r2
 80187b2:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7ff fafa 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 80187bc:	4a17      	ldr	r2, [pc, #92]	@ (801881c <_ZN24core_utils_RegisterEntryIhhEC1I14TWIPR_FirmwareEEP11RegisterMaphPT_MS5_FhhE+0x78>)
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	601a      	str	r2, [r3, #0]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2200      	movs	r2, #0
 80187c6:	609a      	str	r2, [r3, #8]
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	3310      	adds	r3, #16
 80187cc:	4618      	mov	r0, r3
 80187ce:	f000 fd7f 	bl	80192d0 <_ZN19core_utils_CallbackIhhEC1Ev>
		this->address = address;
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	79fa      	ldrb	r2, [r7, #7]
 80187d6:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	7b11      	ldrb	r1, [r2, #12]
 80187e2:	68fa      	ldr	r2, [r7, #12]
 80187e4:	68b8      	ldr	r0, [r7, #8]
 80187e6:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	f103 0410 	add.w	r4, r3, #16
 80187ee:	f107 0010 	add.w	r0, r7, #16
 80187f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80187f6:	cb0c      	ldmia	r3, {r2, r3}
 80187f8:	6839      	ldr	r1, [r7, #0]
 80187fa:	f000 fd87 	bl	801930c <_ZN19core_utils_CallbackIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>
 80187fe:	f107 0310 	add.w	r3, r7, #16
 8018802:	4619      	mov	r1, r3
 8018804:	4620      	mov	r0, r4
 8018806:	f7ff ffad 	bl	8018764 <_ZN19core_utils_CallbackIhhEaSEOS0_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	2201      	movs	r2, #1
 801880e:	735a      	strb	r2, [r3, #13]
	}
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	4618      	mov	r0, r3
 8018814:	3734      	adds	r7, #52	@ 0x34
 8018816:	46bd      	mov	sp, r7
 8018818:	bd90      	pop	{r4, r7, pc}
 801881a:	bf00      	nop
 801881c:	080265b4 	.word	0x080265b4

08018820 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 8018820:	b5b0      	push	{r4, r5, r7, lr}
 8018822:	b082      	sub	sp, #8
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	6039      	str	r1, [r7, #0]
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	683a      	ldr	r2, [r7, #0]
 801882e:	4611      	mov	r1, r2
 8018830:	4618      	mov	r0, r3
 8018832:	f7ff facd 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	791a      	ldrb	r2, [r3, #4]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	711a      	strb	r2, [r3, #4]
 801883e:	687a      	ldr	r2, [r7, #4]
 8018840:	683b      	ldr	r3, [r7, #0]
 8018842:	f102 0408 	add.w	r4, r2, #8
 8018846:	f103 0508 	add.w	r5, r3, #8
 801884a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801884c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801884e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018852:	e884 0003 	stmia.w	r4, {r0, r1}
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	4618      	mov	r0, r3
 801885a:	3708      	adds	r7, #8
 801885c:	46bd      	mov	sp, r7
 801885e:	bdb0      	pop	{r4, r5, r7, pc}

08018860 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018860:	b590      	push	{r4, r7, lr}
 8018862:	b08d      	sub	sp, #52	@ 0x34
 8018864:	af00      	add	r7, sp, #0
 8018866:	60f8      	str	r0, [r7, #12]
 8018868:	60b9      	str	r1, [r7, #8]
 801886a:	603b      	str	r3, [r7, #0]
 801886c:	4613      	mov	r3, r2
 801886e:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	4618      	mov	r0, r3
 8018874:	f7ff fa9c 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018878:	4a17      	ldr	r2, [pc, #92]	@ (80188d8 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	601a      	str	r2, [r3, #0]
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	2200      	movs	r2, #0
 8018882:	611a      	str	r2, [r3, #16]
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	3318      	adds	r3, #24
 8018888:	4618      	mov	r0, r3
 801888a:	f000 fd73 	bl	8019374 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1Ev>
		this->address = address;
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	79fa      	ldrb	r2, [r7, #7]
 8018892:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	68fa      	ldr	r2, [r7, #12]
 801889c:	7d11      	ldrb	r1, [r2, #20]
 801889e:	68fa      	ldr	r2, [r7, #12]
 80188a0:	68b8      	ldr	r0, [r7, #8]
 80188a2:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	f103 0418 	add.w	r4, r3, #24
 80188aa:	f107 0010 	add.w	r0, r7, #16
 80188ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80188b2:	cb0c      	ldmia	r3, {r2, r3}
 80188b4:	6839      	ldr	r1, [r7, #0]
 80188b6:	f000 fd7b 	bl	80193b0 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>
 80188ba:	f107 0310 	add.w	r3, r7, #16
 80188be:	4619      	mov	r1, r3
 80188c0:	4620      	mov	r0, r4
 80188c2:	f7ff ffad 	bl	8018820 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	2201      	movs	r2, #1
 80188ca:	755a      	strb	r2, [r3, #21]
	}
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	4618      	mov	r0, r3
 80188d0:	3734      	adds	r7, #52	@ 0x34
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd90      	pop	{r4, r7, pc}
 80188d6:	bf00      	nop
 80188d8:	08026580 	.word	0x08026580

080188dc <_ZN24core_utils_RegisterEntryIhvEC1EP11RegisterMaphPh>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 80188dc:	b580      	push	{r7, lr}
 80188de:	b084      	sub	sp, #16
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	60f8      	str	r0, [r7, #12]
 80188e4:	60b9      	str	r1, [r7, #8]
 80188e6:	603b      	str	r3, [r7, #0]
 80188e8:	4613      	mov	r3, r2
 80188ea:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	4618      	mov	r0, r3
 80188f0:	f7ff fa5e 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 80188f4:	4a0e      	ldr	r2, [pc, #56]	@ (8018930 <_ZN24core_utils_RegisterEntryIhvEC1EP11RegisterMaphPh+0x54>)
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	3310      	adds	r3, #16
 80188fe:	4618      	mov	r0, r3
 8018900:	f000 fd8a 	bl	8019418 <_ZN19core_utils_CallbackIhvEC1Ev>
		this->address = address;
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	79fa      	ldrb	r2, [r7, #7]
 8018908:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	68fa      	ldr	r2, [r7, #12]
 8018912:	7b11      	ldrb	r1, [r2, #12]
 8018914:	68fa      	ldr	r2, [r7, #12]
 8018916:	68b8      	ldr	r0, [r7, #8]
 8018918:	4798      	blx	r3
		this->data = data;
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	683a      	ldr	r2, [r7, #0]
 801891e:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	2203      	movs	r2, #3
 8018924:	735a      	strb	r2, [r3, #13]
	}
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	4618      	mov	r0, r3
 801892a:	3710      	adds	r7, #16
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}
 8018930:	0802654c 	.word	0x0802654c

08018934 <_ZN24core_utils_RegisterEntryIffEC1EP11RegisterMaphPf>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018934:	b580      	push	{r7, lr}
 8018936:	b084      	sub	sp, #16
 8018938:	af00      	add	r7, sp, #0
 801893a:	60f8      	str	r0, [r7, #12]
 801893c:	60b9      	str	r1, [r7, #8]
 801893e:	603b      	str	r3, [r7, #0]
 8018940:	4613      	mov	r3, r2
 8018942:	71fb      	strb	r3, [r7, #7]
			input_type *data) {
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	4618      	mov	r0, r3
 8018948:	f7ff fa32 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 801894c:	4a10      	ldr	r2, [pc, #64]	@ (8018990 <_ZN24core_utils_RegisterEntryIffEC1EP11RegisterMaphPf+0x5c>)
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	601a      	str	r2, [r3, #0]
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	2200      	movs	r2, #0
 8018956:	611a      	str	r2, [r3, #16]
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	3318      	adds	r3, #24
 801895c:	4618      	mov	r0, r3
 801895e:	f000 fd79 	bl	8019454 <_ZN19core_utils_CallbackIffEC1Ev>
		this->address = address;
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	79fa      	ldrb	r2, [r7, #7]
 8018966:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	68fa      	ldr	r2, [r7, #12]
 8018970:	7d11      	ldrb	r1, [r2, #20]
 8018972:	68fa      	ldr	r2, [r7, #12]
 8018974:	68b8      	ldr	r0, [r7, #8]
 8018976:	4798      	blx	r3
		this->data = data;
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	683a      	ldr	r2, [r7, #0]
 801897c:	611a      	str	r2, [r3, #16]
		this->type = REGISTER_ENTRY_TYPE_READWRITEABLE;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	2204      	movs	r2, #4
 8018982:	755a      	strb	r2, [r3, #21]
	}
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	4618      	mov	r0, r3
 8018988:	3710      	adds	r7, #16
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
 801898e:	bf00      	nop
 8018990:	08026518 	.word	0x08026518

08018994 <_ZN19core_utils_CallbackIv18rgb_color_struct_tEaSEOS1_>:
 8018994:	b5b0      	push	{r4, r5, r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	6039      	str	r1, [r7, #0]
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	683a      	ldr	r2, [r7, #0]
 80189a2:	4611      	mov	r1, r2
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7ff fa13 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	791a      	ldrb	r2, [r3, #4]
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	711a      	strb	r2, [r3, #4]
 80189b2:	687a      	ldr	r2, [r7, #4]
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	f102 0408 	add.w	r4, r2, #8
 80189ba:	f103 0508 	add.w	r5, r3, #8
 80189be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80189c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	4618      	mov	r0, r3
 80189ce:	3708      	adds	r7, #8
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bdb0      	pop	{r4, r5, r7, pc}

080189d4 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b08d      	sub	sp, #52	@ 0x34
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	603b      	str	r3, [r7, #0]
 80189e0:	4613      	mov	r3, r2
 80189e2:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7ff f9e2 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 80189ec:	4a17      	ldr	r2, [pc, #92]	@ (8018a4c <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	601a      	str	r2, [r3, #0]
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	2200      	movs	r2, #0
 80189f6:	609a      	str	r2, [r3, #8]
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	3310      	adds	r3, #16
 80189fc:	4618      	mov	r0, r3
 80189fe:	f000 fd47 	bl	8019490 <_ZN19core_utils_CallbackIv18rgb_color_struct_tEC1Ev>
		this->address = address;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	79fa      	ldrb	r2, [r7, #7]
 8018a06:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	68fa      	ldr	r2, [r7, #12]
 8018a10:	7b11      	ldrb	r1, [r2, #12]
 8018a12:	68fa      	ldr	r2, [r7, #12]
 8018a14:	68b8      	ldr	r0, [r7, #8]
 8018a16:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	f103 0410 	add.w	r4, r3, #16
 8018a1e:	f107 0010 	add.w	r0, r7, #16
 8018a22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018a26:	cb0c      	ldmia	r3, {r2, r3}
 8018a28:	6839      	ldr	r1, [r7, #0]
 8018a2a:	f000 fd4f 	bl	80194cc <_ZN19core_utils_CallbackIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEPT_MS4_FvS0_E>
 8018a2e:	f107 0310 	add.w	r3, r7, #16
 8018a32:	4619      	mov	r1, r3
 8018a34:	4620      	mov	r0, r4
 8018a36:	f7ff ffad 	bl	8018994 <_ZN19core_utils_CallbackIv18rgb_color_struct_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	735a      	strb	r2, [r3, #13]
	}
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	4618      	mov	r0, r3
 8018a44:	3734      	adds	r7, #52	@ 0x34
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd90      	pop	{r4, r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	080264e4 	.word	0x080264e4

08018a50 <_ZN24core_utils_RegisterEntryIhhEC1EP11RegisterMaphPh>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b084      	sub	sp, #16
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	603b      	str	r3, [r7, #0]
 8018a5c:	4613      	mov	r3, r2
 8018a5e:	71fb      	strb	r3, [r7, #7]
			input_type *data) {
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7ff f9a4 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018a68:	4a10      	ldr	r2, [pc, #64]	@ (8018aac <_ZN24core_utils_RegisterEntryIhhEC1EP11RegisterMaphPh+0x5c>)
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	601a      	str	r2, [r3, #0]
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	2200      	movs	r2, #0
 8018a72:	609a      	str	r2, [r3, #8]
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	3310      	adds	r3, #16
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f000 fc29 	bl	80192d0 <_ZN19core_utils_CallbackIhhEC1Ev>
		this->address = address;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	79fa      	ldrb	r2, [r7, #7]
 8018a82:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	68fa      	ldr	r2, [r7, #12]
 8018a8c:	7b11      	ldrb	r1, [r2, #12]
 8018a8e:	68fa      	ldr	r2, [r7, #12]
 8018a90:	68b8      	ldr	r0, [r7, #8]
 8018a92:	4798      	blx	r3
		this->data = data;
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	683a      	ldr	r2, [r7, #0]
 8018a98:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READWRITEABLE;
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	2204      	movs	r2, #4
 8018a9e:	735a      	strb	r2, [r3, #13]
	}
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	3710      	adds	r7, #16
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bd80      	pop	{r7, pc}
 8018aaa:	bf00      	nop
 8018aac:	080265b4 	.word	0x080265b4

08018ab0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvEC1EP11RegisterMaphPS0_>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address,
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b084      	sub	sp, #16
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	60f8      	str	r0, [r7, #12]
 8018ab8:	60b9      	str	r1, [r7, #8]
 8018aba:	603b      	str	r3, [r7, #0]
 8018abc:	4613      	mov	r3, r2
 8018abe:	71fb      	strb	r3, [r7, #7]
			output_type *data) {
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7ff f974 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8018b04 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvEC1EP11RegisterMaphPS0_+0x54>)
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	3310      	adds	r3, #16
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f000 fd2e 	bl	8019534 <_ZN19core_utils_CallbackI20twipr_control_mode_tvEC1Ev>
		this->address = address;
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	79fa      	ldrb	r2, [r7, #7]
 8018adc:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	68fa      	ldr	r2, [r7, #12]
 8018ae6:	7b11      	ldrb	r1, [r2, #12]
 8018ae8:	68fa      	ldr	r2, [r7, #12]
 8018aea:	68b8      	ldr	r0, [r7, #8]
 8018aec:	4798      	blx	r3
		this->data = data;
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	683a      	ldr	r2, [r7, #0]
 8018af2:	609a      	str	r2, [r3, #8]
		this->type = REGISTER_ENTRY_TYPE_READABLE;
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	2203      	movs	r2, #3
 8018af8:	735a      	strb	r2, [r3, #13]
	}
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	4618      	mov	r0, r3
 8018afe:	3710      	adds	r7, #16
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}
 8018b04:	080264b0 	.word	0x080264b0

08018b08 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSEOS1_>:
class core_utils_Callback: public Callback {
 8018b08:	b5b0      	push	{r4, r5, r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	6039      	str	r1, [r7, #0]
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	683a      	ldr	r2, [r7, #0]
 8018b16:	4611      	mov	r1, r2
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7ff f959 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	791a      	ldrb	r2, [r3, #4]
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	711a      	strb	r2, [r3, #4]
 8018b26:	687a      	ldr	r2, [r7, #4]
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	f102 0408 	add.w	r4, r2, #8
 8018b2e:	f103 0508 	add.w	r5, r3, #8
 8018b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018b3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	4618      	mov	r0, r3
 8018b42:	3708      	adds	r7, #8
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bdb0      	pop	{r4, r5, r7, pc}

08018b48 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018b48:	b590      	push	{r4, r7, lr}
 8018b4a:	b08d      	sub	sp, #52	@ 0x34
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	603b      	str	r3, [r7, #0]
 8018b54:	4613      	mov	r3, r2
 8018b56:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7ff f928 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018b60:	4a17      	ldr	r2, [pc, #92]	@ (8018bc0 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhS0_E+0x78>)
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	601a      	str	r2, [r3, #0]
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	2200      	movs	r2, #0
 8018b6a:	609a      	str	r2, [r3, #8]
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	3310      	adds	r3, #16
 8018b70:	4618      	mov	r0, r3
 8018b72:	f000 fcfd 	bl	8019570 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>
		this->address = address;
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	79fa      	ldrb	r2, [r7, #7]
 8018b7a:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	68fa      	ldr	r2, [r7, #12]
 8018b84:	7b11      	ldrb	r1, [r2, #12]
 8018b86:	68fa      	ldr	r2, [r7, #12]
 8018b88:	68b8      	ldr	r0, [r7, #8]
 8018b8a:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	f103 0410 	add.w	r4, r3, #16
 8018b92:	f107 0010 	add.w	r0, r7, #16
 8018b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018b9a:	cb0c      	ldmia	r3, {r2, r3}
 8018b9c:	6839      	ldr	r1, [r7, #0]
 8018b9e:	f000 fd05 	bl	80195ac <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 8018ba2:	f107 0310 	add.w	r3, r7, #16
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	4620      	mov	r0, r4
 8018baa:	f7ff ffad 	bl	8018b08 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	2201      	movs	r2, #1
 8018bb2:	735a      	strb	r2, [r3, #13]
	}
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3734      	adds	r7, #52	@ 0x34
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd90      	pop	{r4, r7, pc}
 8018bbe:	bf00      	nop
 8018bc0:	0802647c 	.word	0x0802647c

08018bc4 <_ZN19core_utils_CallbackIhA8_fEaSEOS1_>:
 8018bc4:	b5b0      	push	{r4, r5, r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	6039      	str	r1, [r7, #0]
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	683a      	ldr	r2, [r7, #0]
 8018bd2:	4611      	mov	r1, r2
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7ff f8fb 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	791a      	ldrb	r2, [r3, #4]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	711a      	strb	r2, [r3, #4]
 8018be2:	687a      	ldr	r2, [r7, #4]
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	f102 0408 	add.w	r4, r2, #8
 8018bea:	f103 0508 	add.w	r5, r3, #8
 8018bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018bf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018bf6:	e884 0003 	stmia.w	r4, {r0, r1}
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	3708      	adds	r7, #8
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bdb0      	pop	{r4, r5, r7, pc}

08018c04 <_ZN24core_utils_RegisterEntryIhA8_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018c04:	b590      	push	{r4, r7, lr}
 8018c06:	b08d      	sub	sp, #52	@ 0x34
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	60f8      	str	r0, [r7, #12]
 8018c0c:	60b9      	str	r1, [r7, #8]
 8018c0e:	603b      	str	r3, [r7, #0]
 8018c10:	4613      	mov	r3, r2
 8018c12:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7ff f8ca 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018c1c:	4a18      	ldr	r2, [pc, #96]	@ (8018c80 <_ZN24core_utils_RegisterEntryIhA8_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE+0x7c>)
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	601a      	str	r2, [r3, #0]
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	2200      	movs	r2, #0
 8018c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	3334      	adds	r3, #52	@ 0x34
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f000 fcf1 	bl	8019614 <_ZN19core_utils_CallbackIhA8_fEC1Ev>
		this->address = address;
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	79fa      	ldrb	r2, [r7, #7]
 8018c36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		map->addEntry(this->address, this);
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	68fa      	ldr	r2, [r7, #12]
 8018c42:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 8018c46:	68fa      	ldr	r2, [r7, #12]
 8018c48:	68b8      	ldr	r0, [r7, #8]
 8018c4a:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8018c52:	f107 0010 	add.w	r0, r7, #16
 8018c56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018c5a:	cb0c      	ldmia	r3, {r2, r3}
 8018c5c:	6839      	ldr	r1, [r7, #0]
 8018c5e:	f000 fcf7 	bl	8019650 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8018c62:	f107 0310 	add.w	r3, r7, #16
 8018c66:	4619      	mov	r1, r3
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f7ff ffab 	bl	8018bc4 <_ZN19core_utils_CallbackIhA8_fEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	2201      	movs	r2, #1
 8018c72:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3734      	adds	r7, #52	@ 0x34
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd90      	pop	{r4, r7, pc}
 8018c80:	08026448 	.word	0x08026448

08018c84 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 8018c84:	b5b0      	push	{r4, r5, r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
 8018c8c:	6039      	str	r1, [r7, #0]
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	683a      	ldr	r2, [r7, #0]
 8018c92:	4611      	mov	r1, r2
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7ff f89b 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	791a      	ldrb	r2, [r3, #4]
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	711a      	strb	r2, [r3, #4]
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	f102 0408 	add.w	r4, r2, #8
 8018caa:	f103 0508 	add.w	r5, r3, #8
 8018cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018cb6:	e884 0003 	stmia.w	r4, {r0, r1}
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	3708      	adds	r7, #8
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	bdb0      	pop	{r4, r5, r7, pc}

08018cc4 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018cc4:	b590      	push	{r4, r7, lr}
 8018cc6:	b08d      	sub	sp, #52	@ 0x34
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	603b      	str	r3, [r7, #0]
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7ff f86a 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018cdc:	4a17      	ldr	r2, [pc, #92]	@ (8018d3c <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	601a      	str	r2, [r3, #0]
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	611a      	str	r2, [r3, #16]
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	3318      	adds	r3, #24
 8018cec:	4618      	mov	r0, r3
 8018cee:	f000 fce3 	bl	80196b8 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1Ev>
		this->address = address;
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	79fa      	ldrb	r2, [r7, #7]
 8018cf6:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	68fa      	ldr	r2, [r7, #12]
 8018d00:	7d11      	ldrb	r1, [r2, #20]
 8018d02:	68fa      	ldr	r2, [r7, #12]
 8018d04:	68b8      	ldr	r0, [r7, #8]
 8018d06:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	f103 0418 	add.w	r4, r3, #24
 8018d0e:	f107 0010 	add.w	r0, r7, #16
 8018d12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018d16:	cb0c      	ldmia	r3, {r2, r3}
 8018d18:	6839      	ldr	r1, [r7, #0]
 8018d1a:	f000 fceb 	bl	80196f4 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8018d1e:	f107 0310 	add.w	r3, r7, #16
 8018d22:	4619      	mov	r1, r3
 8018d24:	4620      	mov	r0, r4
 8018d26:	f7ff ffad 	bl	8018c84 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	2201      	movs	r2, #1
 8018d2e:	755a      	strb	r2, [r3, #21]
	}
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	4618      	mov	r0, r3
 8018d34:	3734      	adds	r7, #52	@ 0x34
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd90      	pop	{r4, r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	08026414 	.word	0x08026414

08018d40 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEaSEOS1_>:
 8018d40:	b5b0      	push	{r4, r5, r7, lr}
 8018d42:	b082      	sub	sp, #8
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
 8018d48:	6039      	str	r1, [r7, #0]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	683a      	ldr	r2, [r7, #0]
 8018d4e:	4611      	mov	r1, r2
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7ff f83d 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	791a      	ldrb	r2, [r3, #4]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	711a      	strb	r2, [r3, #4]
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	f102 0408 	add.w	r4, r2, #8
 8018d66:	f103 0508 	add.w	r5, r3, #8
 8018d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d72:	e884 0003 	stmia.w	r4, {r0, r1}
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	4618      	mov	r0, r3
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bdb0      	pop	{r4, r5, r7, pc}

08018d80 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018d80:	b590      	push	{r4, r7, lr}
 8018d82:	b08d      	sub	sp, #52	@ 0x34
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	603b      	str	r3, [r7, #0]
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7ff f80c 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018d98:	4a17      	ldr	r2, [pc, #92]	@ (8018df8 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	601a      	str	r2, [r3, #0]
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	2200      	movs	r2, #0
 8018da2:	611a      	str	r2, [r3, #16]
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	3318      	adds	r3, #24
 8018da8:	4618      	mov	r0, r3
 8018daa:	f000 fcd7 	bl	801975c <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1Ev>
		this->address = address;
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	79fa      	ldrb	r2, [r7, #7]
 8018db2:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	68fa      	ldr	r2, [r7, #12]
 8018dbc:	7d11      	ldrb	r1, [r2, #20]
 8018dbe:	68fa      	ldr	r2, [r7, #12]
 8018dc0:	68b8      	ldr	r0, [r7, #8]
 8018dc2:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	f103 0418 	add.w	r4, r3, #24
 8018dca:	f107 0010 	add.w	r0, r7, #16
 8018dce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018dd2:	cb0c      	ldmia	r3, {r2, r3}
 8018dd4:	6839      	ldr	r1, [r7, #0]
 8018dd6:	f000 fcdf 	bl	8019798 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8018dda:	f107 0310 	add.w	r3, r7, #16
 8018dde:	4619      	mov	r1, r3
 8018de0:	4620      	mov	r0, r4
 8018de2:	f7ff ffad 	bl	8018d40 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	2201      	movs	r2, #1
 8018dea:	755a      	strb	r2, [r3, #21]
	}
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	4618      	mov	r0, r3
 8018df0:	3734      	adds	r7, #52	@ 0x34
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bd90      	pop	{r4, r7, pc}
 8018df6:	bf00      	nop
 8018df8:	080263e0 	.word	0x080263e0

08018dfc <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEaSEOS1_>:
 8018dfc:	b5b0      	push	{r4, r5, r7, lr}
 8018dfe:	b082      	sub	sp, #8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	6039      	str	r1, [r7, #0]
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	683a      	ldr	r2, [r7, #0]
 8018e0a:	4611      	mov	r1, r2
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7fe ffdf 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018e12:	683b      	ldr	r3, [r7, #0]
 8018e14:	791a      	ldrb	r2, [r3, #4]
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	711a      	strb	r2, [r3, #4]
 8018e1a:	687a      	ldr	r2, [r7, #4]
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	f102 0408 	add.w	r4, r2, #8
 8018e22:	f103 0508 	add.w	r5, r3, #8
 8018e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018e2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	4618      	mov	r0, r3
 8018e36:	3708      	adds	r7, #8
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bdb0      	pop	{r4, r5, r7, pc}

08018e3c <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018e3c:	b590      	push	{r4, r7, lr}
 8018e3e:	b08d      	sub	sp, #52	@ 0x34
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	603b      	str	r3, [r7, #0]
 8018e48:	4613      	mov	r3, r2
 8018e4a:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f7fe ffae 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018e54:	4a17      	ldr	r2, [pc, #92]	@ (8018eb4 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	601a      	str	r2, [r3, #0]
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	611a      	str	r2, [r3, #16]
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	3318      	adds	r3, #24
 8018e64:	4618      	mov	r0, r3
 8018e66:	f000 fccb 	bl	8019800 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1Ev>
		this->address = address;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	79fa      	ldrb	r2, [r7, #7]
 8018e6e:	751a      	strb	r2, [r3, #20]
		map->addEntry(this->address, this);
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	68fa      	ldr	r2, [r7, #12]
 8018e78:	7d11      	ldrb	r1, [r2, #20]
 8018e7a:	68fa      	ldr	r2, [r7, #12]
 8018e7c:	68b8      	ldr	r0, [r7, #8]
 8018e7e:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	f103 0418 	add.w	r4, r3, #24
 8018e86:	f107 0010 	add.w	r0, r7, #16
 8018e8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018e8e:	cb0c      	ldmia	r3, {r2, r3}
 8018e90:	6839      	ldr	r1, [r7, #0]
 8018e92:	f000 fcd3 	bl	801983c <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8018e96:	f107 0310 	add.w	r3, r7, #16
 8018e9a:	4619      	mov	r1, r3
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	f7ff ffad 	bl	8018dfc <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	2201      	movs	r2, #1
 8018ea6:	755a      	strb	r2, [r3, #21]
	}
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3734      	adds	r7, #52	@ 0x34
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd90      	pop	{r4, r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	080263ac 	.word	0x080263ac

08018eb8 <_ZN19core_utils_CallbackIhA3_fEaSEOS1_>:
class core_utils_Callback: public Callback {
 8018eb8:	b5b0      	push	{r4, r5, r7, lr}
 8018eba:	b082      	sub	sp, #8
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
 8018ec0:	6039      	str	r1, [r7, #0]
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	683a      	ldr	r2, [r7, #0]
 8018ec6:	4611      	mov	r1, r2
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7fe ff81 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	791a      	ldrb	r2, [r3, #4]
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	711a      	strb	r2, [r3, #4]
 8018ed6:	687a      	ldr	r2, [r7, #4]
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	f102 0408 	add.w	r4, r2, #8
 8018ede:	f103 0508 	add.w	r5, r3, #8
 8018ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ee6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018eea:	e884 0003 	stmia.w	r4, {r0, r1}
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	3708      	adds	r7, #8
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bdb0      	pop	{r4, r5, r7, pc}

08018ef8 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018ef8:	b590      	push	{r4, r7, lr}
 8018efa:	b08d      	sub	sp, #52	@ 0x34
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	60f8      	str	r0, [r7, #12]
 8018f00:	60b9      	str	r1, [r7, #8]
 8018f02:	603b      	str	r3, [r7, #0]
 8018f04:	4613      	mov	r3, r2
 8018f06:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(input_type)) {
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7fe ff50 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018f10:	4a17      	ldr	r2, [pc, #92]	@ (8018f70 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE+0x78>)
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	601a      	str	r2, [r3, #0]
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	619a      	str	r2, [r3, #24]
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	3320      	adds	r3, #32
 8018f20:	4618      	mov	r0, r3
 8018f22:	f000 fcbf 	bl	80198a4 <_ZN19core_utils_CallbackIhA3_fEC1Ev>
		this->address = address;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	79fa      	ldrb	r2, [r7, #7]
 8018f2a:	771a      	strb	r2, [r3, #28]
		map->addEntry(this->address, this);
 8018f2c:	68bb      	ldr	r3, [r7, #8]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	68fa      	ldr	r2, [r7, #12]
 8018f34:	7f11      	ldrb	r1, [r2, #28]
 8018f36:	68fa      	ldr	r2, [r7, #12]
 8018f38:	68b8      	ldr	r0, [r7, #8]
 8018f3a:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, input_type>(object,
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	f103 0420 	add.w	r4, r3, #32
 8018f42:	f107 0010 	add.w	r0, r7, #16
 8018f46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018f4a:	cb0c      	ldmia	r3, {r2, r3}
 8018f4c:	6839      	ldr	r1, [r7, #0]
 8018f4e:	f000 fcc7 	bl	80198e0 <_ZN19core_utils_CallbackIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8018f52:	f107 0310 	add.w	r3, r7, #16
 8018f56:	4619      	mov	r1, r3
 8018f58:	4620      	mov	r0, r4
 8018f5a:	f7ff ffad 	bl	8018eb8 <_ZN19core_utils_CallbackIhA3_fEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	2201      	movs	r2, #1
 8018f62:	775a      	strb	r2, [r3, #29]
	}
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	4618      	mov	r0, r3
 8018f68:	3734      	adds	r7, #52	@ 0x34
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd90      	pop	{r4, r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	08026378 	.word	0x08026378

08018f74 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEaSEOS1_>:
class core_utils_Callback<output_type, void> : public Callback {
 8018f74:	b5b0      	push	{r4, r5, r7, lr}
 8018f76:	b082      	sub	sp, #8
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
 8018f7c:	6039      	str	r1, [r7, #0]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	683a      	ldr	r2, [r7, #0]
 8018f82:	4611      	mov	r1, r2
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7fe ff23 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	791a      	ldrb	r2, [r3, #4]
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	711a      	strb	r2, [r3, #4]
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	683b      	ldr	r3, [r7, #0]
 8018f96:	f102 0408 	add.w	r4, r2, #8
 8018f9a:	f103 0508 	add.w	r5, r3, #8
 8018f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018fa6:	e884 0003 	stmia.w	r4, {r0, r1}
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	4618      	mov	r0, r3
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bdb0      	pop	{r4, r5, r7, pc}

08018fb4 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FS0_vE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8018fb4:	b590      	push	{r4, r7, lr}
 8018fb6:	b08d      	sub	sp, #52	@ 0x34
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	603b      	str	r3, [r7, #0]
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	71fb      	strb	r3, [r7, #7]
			output_type (cls::*member)(void)) {
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7fe fef2 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8018fcc:	4a17      	ldr	r2, [pc, #92]	@ (801902c <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FS0_vE+0x78>)
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	601a      	str	r2, [r3, #0]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	3348      	adds	r3, #72	@ 0x48
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f000 fcb6 	bl	8019948 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1Ev>
		this->address = address;
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	79fa      	ldrb	r2, [r7, #7]
 8018fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		map->addEntry(this->address, this);
 8018fe4:	68bb      	ldr	r3, [r7, #8]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	68fa      	ldr	r2, [r7, #12]
 8018fec:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8018ff0:	68fa      	ldr	r2, [r7, #12]
 8018ff2:	68b8      	ldr	r0, [r7, #8]
 8018ff4:	4798      	blx	r3
		this->callback = core_utils_Callback<output_type, void>(object, member);
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8018ffc:	f107 0010 	add.w	r0, r7, #16
 8019000:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019004:	cb0c      	ldmia	r3, {r2, r3}
 8019006:	6839      	ldr	r1, [r7, #0]
 8019008:	f000 fcbc 	bl	8019984 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>
 801900c:	f107 0310 	add.w	r3, r7, #16
 8019010:	4619      	mov	r1, r3
 8019012:	4620      	mov	r0, r4
 8019014:	f7ff ffae 	bl	8018f74 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	2201      	movs	r2, #1
 801901c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	4618      	mov	r0, r3
 8019024:	3734      	adds	r7, #52	@ 0x34
 8019026:	46bd      	mov	sp, r7
 8019028:	bd90      	pop	{r4, r7, pc}
 801902a:	bf00      	nop
 801902c:	08026344 	.word	0x08026344

08019030 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 8019030:	b5b0      	push	{r4, r5, r7, lr}
 8019032:	b082      	sub	sp, #8
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	6039      	str	r1, [r7, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	683a      	ldr	r2, [r7, #0]
 801903e:	4611      	mov	r1, r2
 8019040:	4618      	mov	r0, r3
 8019042:	f7fe fec5 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	791a      	ldrb	r2, [r3, #4]
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	711a      	strb	r2, [r3, #4]
 801904e:	687a      	ldr	r2, [r7, #4]
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	f102 0408 	add.w	r4, r2, #8
 8019056:	f103 0508 	add.w	r5, r3, #8
 801905a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801905c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801905e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019062:	e884 0003 	stmia.w	r4, {r0, r1}
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	4618      	mov	r0, r3
 801906a:	3708      	adds	r7, #8
 801906c:	46bd      	mov	sp, r7
 801906e:	bdb0      	pop	{r4, r5, r7, pc}

08019070 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS6_FvS0_E>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 8019070:	b590      	push	{r4, r7, lr}
 8019072:	b08d      	sub	sp, #52	@ 0x34
 8019074:	af00      	add	r7, sp, #0
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	603b      	str	r3, [r7, #0]
 801907c:	4613      	mov	r3, r2
 801907e:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	4618      	mov	r0, r3
 8019084:	f7fe fe94 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8019088:	4a17      	ldr	r2, [pc, #92]	@ (80190e8 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS6_FvS0_E+0x78>)
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	601a      	str	r2, [r3, #0]
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	2200      	movs	r2, #0
 8019092:	615a      	str	r2, [r3, #20]
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	331c      	adds	r3, #28
 8019098:	4618      	mov	r0, r3
 801909a:	f000 fca7 	bl	80199ec <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEC1Ev>
		this->address = address;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	79fa      	ldrb	r2, [r7, #7]
 80190a2:	761a      	strb	r2, [r3, #24]
		map->addEntry(this->address, this);
 80190a4:	68bb      	ldr	r3, [r7, #8]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	68fa      	ldr	r2, [r7, #12]
 80190ac:	7e11      	ldrb	r1, [r2, #24]
 80190ae:	68fa      	ldr	r2, [r7, #12]
 80190b0:	68b8      	ldr	r0, [r7, #8]
 80190b2:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	f103 041c 	add.w	r4, r3, #28
 80190ba:	f107 0010 	add.w	r0, r7, #16
 80190be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80190c2:	cb0c      	ldmia	r3, {r2, r3}
 80190c4:	6839      	ldr	r1, [r7, #0]
 80190c6:	f000 fcaf 	bl	8019a28 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E>
 80190ca:	f107 0310 	add.w	r3, r7, #16
 80190ce:	4619      	mov	r1, r3
 80190d0:	4620      	mov	r0, r4
 80190d2:	f7ff ffad 	bl	8019030 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEaSEOS1_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	2201      	movs	r2, #1
 80190da:	765a      	strb	r2, [r3, #25]
	}
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	4618      	mov	r0, r3
 80190e0:	3734      	adds	r7, #52	@ 0x34
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd90      	pop	{r4, r7, pc}
 80190e6:	bf00      	nop
 80190e8:	08026310 	.word	0x08026310

080190ec <_ZN19core_utils_CallbackIvtEaSEOS0_>:
 80190ec:	b5b0      	push	{r4, r5, r7, lr}
 80190ee:	b082      	sub	sp, #8
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
 80190f4:	6039      	str	r1, [r7, #0]
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	683a      	ldr	r2, [r7, #0]
 80190fa:	4611      	mov	r1, r2
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7fe fe67 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 8019102:	683b      	ldr	r3, [r7, #0]
 8019104:	791a      	ldrb	r2, [r3, #4]
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	711a      	strb	r2, [r3, #4]
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	f102 0408 	add.w	r4, r2, #8
 8019112:	f103 0508 	add.w	r5, r3, #8
 8019116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801911a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801911e:	e884 0003 	stmia.w	r4, {r0, r1}
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	4618      	mov	r0, r3
 8019126:	3708      	adds	r7, #8
 8019128:	46bd      	mov	sp, r7
 801912a:	bdb0      	pop	{r4, r5, r7, pc}

0801912c <_ZN24core_utils_RegisterEntryIvtEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS5_FvtE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 801912c:	b590      	push	{r4, r7, lr}
 801912e:	b08d      	sub	sp, #52	@ 0x34
 8019130:	af00      	add	r7, sp, #0
 8019132:	60f8      	str	r0, [r7, #12]
 8019134:	60b9      	str	r1, [r7, #8]
 8019136:	603b      	str	r3, [r7, #0]
 8019138:	4613      	mov	r3, r2
 801913a:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(input_type)) {
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	4618      	mov	r0, r3
 8019140:	f7fe fe36 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 8019144:	4a17      	ldr	r2, [pc, #92]	@ (80191a4 <_ZN24core_utils_RegisterEntryIvtEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS5_FvtE+0x78>)
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	601a      	str	r2, [r3, #0]
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	2200      	movs	r2, #0
 801914e:	609a      	str	r2, [r3, #8]
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	3310      	adds	r3, #16
 8019154:	4618      	mov	r0, r3
 8019156:	f7f9 fbb9 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
		this->address = address;
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	79fa      	ldrb	r2, [r7, #7]
 801915e:	731a      	strb	r2, [r3, #12]
		map->addEntry(this->address, this);
 8019160:	68bb      	ldr	r3, [r7, #8]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	68fa      	ldr	r2, [r7, #12]
 8019168:	7b11      	ldrb	r1, [r2, #12]
 801916a:	68fa      	ldr	r2, [r7, #12]
 801916c:	68b8      	ldr	r0, [r7, #8]
 801916e:	4798      	blx	r3
		this->callback = core_utils_Callback<void, input_type>(object, member);
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	f103 0410 	add.w	r4, r3, #16
 8019176:	f107 0010 	add.w	r0, r7, #16
 801917a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801917e:	cb0c      	ldmia	r3, {r2, r3}
 8019180:	6839      	ldr	r1, [r7, #0]
 8019182:	f000 fc85 	bl	8019a90 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>
 8019186:	f107 0310 	add.w	r3, r7, #16
 801918a:	4619      	mov	r1, r3
 801918c:	4620      	mov	r0, r4
 801918e:	f7ff ffad 	bl	80190ec <_ZN19core_utils_CallbackIvtEaSEOS0_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	2201      	movs	r2, #1
 8019196:	735a      	strb	r2, [r3, #13]
	}
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	4618      	mov	r0, r3
 801919c:	3734      	adds	r7, #52	@ 0x34
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd90      	pop	{r4, r7, pc}
 80191a2:	bf00      	nop
 80191a4:	080262ec 	.word	0x080262ec

080191a8 <_ZN24core_utils_RegisterEntryIvvEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS5_FvvE>:
	core_utils_RegisterEntry(RegisterMap *map, uint8_t address, cls *object,
 80191a8:	b590      	push	{r4, r7, lr}
 80191aa:	b08d      	sub	sp, #52	@ 0x34
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	60f8      	str	r0, [r7, #12]
 80191b0:	60b9      	str	r1, [r7, #8]
 80191b2:	603b      	str	r3, [r7, #0]
 80191b4:	4613      	mov	r3, r2
 80191b6:	71fb      	strb	r3, [r7, #7]
			void (cls::*member)(void)) {
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	4618      	mov	r0, r3
 80191bc:	f7fe fdf8 	bl	8017db0 <_ZN13RegisterEntryC1Ev>
 80191c0:	4a15      	ldr	r2, [pc, #84]	@ (8019218 <_ZN24core_utils_RegisterEntryIvvEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS5_FvvE+0x70>)
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	601a      	str	r2, [r3, #0]
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	3308      	adds	r3, #8
 80191ca:	4618      	mov	r0, r3
 80191cc:	f7f9 fcc8 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
		this->address = address;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	79fa      	ldrb	r2, [r7, #7]
 80191d4:	715a      	strb	r2, [r3, #5]
		map->addEntry(this->address, this);
 80191d6:	68bb      	ldr	r3, [r7, #8]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	68fa      	ldr	r2, [r7, #12]
 80191de:	7951      	ldrb	r1, [r2, #5]
 80191e0:	68fa      	ldr	r2, [r7, #12]
 80191e2:	68b8      	ldr	r0, [r7, #8]
 80191e4:	4798      	blx	r3
		this->callback = core_utils_Callback<void, void>(object, member);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	f103 0408 	add.w	r4, r3, #8
 80191ec:	f107 0010 	add.w	r0, r7, #16
 80191f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80191f4:	cb0c      	ldmia	r3, {r2, r3}
 80191f6:	6839      	ldr	r1, [r7, #0]
 80191f8:	f000 fc7e 	bl	8019af8 <_ZN19core_utils_CallbackIvvEC1I15TWIPR_SequencerEEPT_MS3_FvvE>
 80191fc:	f107 0310 	add.w	r3, r7, #16
 8019200:	4619      	mov	r1, r3
 8019202:	4620      	mov	r0, r4
 8019204:	f7fe fdf0 	bl	8017de8 <_ZN19core_utils_CallbackIvvEaSEOS0_>
		this->type = REGISTER_ENTRY_TYPE_EXECUTABLE;
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	2201      	movs	r2, #1
 801920c:	719a      	strb	r2, [r3, #6]
	}
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	4618      	mov	r0, r3
 8019212:	3734      	adds	r7, #52	@ 0x34
 8019214:	46bd      	mov	sp, r7
 8019216:	bd90      	pop	{r4, r7, pc}
 8019218:	08026684 	.word	0x08026684

0801921c <_ZN19core_utils_CallbackI22twipr_firmware_state_tvEC1Ev>:
	core_utils_Callback() {
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	4618      	mov	r0, r3
 8019228:	f7f9 f998 	bl	801255c <_ZN8CallbackC1Ev>
 801922c:	4a09      	ldr	r2, [pc, #36]	@ (8019254 <_ZN19core_utils_CallbackI22twipr_firmware_state_tvEC1Ev+0x38>)
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	601a      	str	r2, [r3, #0]
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2200      	movs	r2, #0
 8019236:	711a      	strb	r2, [r3, #4]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	3308      	adds	r3, #8
 801923c:	2100      	movs	r1, #0
 801923e:	4618      	mov	r0, r3
 8019240:	f000 fc8e 	bl	8019b60 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEC1EPFS0_vE>
		this->registered = 0;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	2200      	movs	r2, #0
 8019248:	711a      	strb	r2, [r3, #4]
	}
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	4618      	mov	r0, r3
 801924e:	3708      	adds	r7, #8
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}
 8019254:	08026674 	.word	0x08026674

08019258 <_ZN19core_utils_CallbackImvEC1Ev>:
	core_utils_Callback() {
 8019258:	b580      	push	{r7, lr}
 801925a:	b082      	sub	sp, #8
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	4618      	mov	r0, r3
 8019264:	f7f9 f97a 	bl	801255c <_ZN8CallbackC1Ev>
 8019268:	4a09      	ldr	r2, [pc, #36]	@ (8019290 <_ZN19core_utils_CallbackImvEC1Ev+0x38>)
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	601a      	str	r2, [r3, #0]
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	2200      	movs	r2, #0
 8019272:	711a      	strb	r2, [r3, #4]
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	3308      	adds	r3, #8
 8019278:	2100      	movs	r1, #0
 801927a:	4618      	mov	r0, r3
 801927c:	f000 fc7e 	bl	8019b7c <_ZN26core_utils_FunctionPointerImvEC1EPFmvE>
		this->registered = 0;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2200      	movs	r2, #0
 8019284:	711a      	strb	r2, [r3, #4]
	}
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	4618      	mov	r0, r3
 801928a:	3708      	adds	r7, #8
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}
 8019290:	08026640 	.word	0x08026640

08019294 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvEC1Ev>:
	core_utils_Callback() {
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	4618      	mov	r0, r3
 80192a0:	f7f9 f95c 	bl	801255c <_ZN8CallbackC1Ev>
 80192a4:	4a09      	ldr	r2, [pc, #36]	@ (80192cc <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvEC1Ev+0x38>)
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	601a      	str	r2, [r3, #0]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	2200      	movs	r2, #0
 80192ae:	711a      	strb	r2, [r3, #4]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	3308      	adds	r3, #8
 80192b4:	2100      	movs	r1, #0
 80192b6:	4618      	mov	r0, r3
 80192b8:	f000 fc6e 	bl	8019b98 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEC1EPFS0_vE>
		this->registered = 0;
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	2200      	movs	r2, #0
 80192c0:	711a      	strb	r2, [r3, #4]
	}
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	4618      	mov	r0, r3
 80192c6:	3708      	adds	r7, #8
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}
 80192cc:	0802660c 	.word	0x0802660c

080192d0 <_ZN19core_utils_CallbackIhhEC1Ev>:
	core_utils_Callback() {
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7f9 f93e 	bl	801255c <_ZN8CallbackC1Ev>
 80192e0:	4a09      	ldr	r2, [pc, #36]	@ (8019308 <_ZN19core_utils_CallbackIhhEC1Ev+0x38>)
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	601a      	str	r2, [r3, #0]
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	2200      	movs	r2, #0
 80192ea:	711a      	strb	r2, [r3, #4]
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	3308      	adds	r3, #8
 80192f0:	2100      	movs	r1, #0
 80192f2:	4618      	mov	r0, r3
 80192f4:	f000 fc5e 	bl	8019bb4 <_ZN26core_utils_FunctionPointerIhhEC1EPFhhE>
		this->registered = 0;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2200      	movs	r2, #0
 80192fc:	711a      	strb	r2, [r3, #4]
	}
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	4618      	mov	r0, r3
 8019302:	3708      	adds	r7, #8
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}
 8019308:	080265d8 	.word	0x080265d8

0801930c <_ZN19core_utils_CallbackIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 801930c:	b5b0      	push	{r4, r5, r7, lr}
 801930e:	b08a      	sub	sp, #40	@ 0x28
 8019310:	af00      	add	r7, sp, #0
 8019312:	60f8      	str	r0, [r7, #12]
 8019314:	60b9      	str	r1, [r7, #8]
 8019316:	4639      	mov	r1, r7
 8019318:	e881 000c 	stmia.w	r1, {r2, r3}
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	4618      	mov	r0, r3
 8019320:	f7f9 f91c 	bl	801255c <_ZN8CallbackC1Ev>
 8019324:	4a12      	ldr	r2, [pc, #72]	@ (8019370 <_ZN19core_utils_CallbackIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE+0x64>)
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	601a      	str	r2, [r3, #0]
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	2200      	movs	r2, #0
 801932e:	711a      	strb	r2, [r3, #4]
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	3308      	adds	r3, #8
 8019334:	2100      	movs	r1, #0
 8019336:	4618      	mov	r0, r3
 8019338:	f000 fc3c 	bl	8019bb4 <_ZN26core_utils_FunctionPointerIhhEC1EPFhhE>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 801933c:	f107 0010 	add.w	r0, r7, #16
 8019340:	463b      	mov	r3, r7
 8019342:	cb0c      	ldmia	r3, {r2, r3}
 8019344:	68b9      	ldr	r1, [r7, #8]
 8019346:	f000 fc43 	bl	8019bd0 <_ZN26core_utils_FunctionPointerIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f103 0408 	add.w	r4, r3, #8
 8019350:	f107 0510 	add.w	r5, r7, #16
 8019354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019358:	e895 0003 	ldmia.w	r5, {r0, r1}
 801935c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	2201      	movs	r2, #1
 8019364:	711a      	strb	r2, [r3, #4]
	}
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	4618      	mov	r0, r3
 801936a:	3728      	adds	r7, #40	@ 0x28
 801936c:	46bd      	mov	sp, r7
 801936e:	bdb0      	pop	{r4, r5, r7, pc}
 8019370:	080265d8 	.word	0x080265d8

08019374 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1Ev>:
	core_utils_Callback() {
 8019374:	b580      	push	{r7, lr}
 8019376:	b082      	sub	sp, #8
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	4618      	mov	r0, r3
 8019380:	f7f9 f8ec 	bl	801255c <_ZN8CallbackC1Ev>
 8019384:	4a09      	ldr	r2, [pc, #36]	@ (80193ac <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1Ev+0x38>)
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	601a      	str	r2, [r3, #0]
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2200      	movs	r2, #0
 801938e:	711a      	strb	r2, [r3, #4]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	3308      	adds	r3, #8
 8019394:	2100      	movs	r1, #0
 8019396:	4618      	mov	r0, r3
 8019398:	f000 fc2d 	bl	8019bf6 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1EPFvS0_E>
		this->registered = 0;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	2200      	movs	r2, #0
 80193a0:	711a      	strb	r2, [r3, #4]
	}
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	4618      	mov	r0, r3
 80193a6:	3708      	adds	r7, #8
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}
 80193ac:	080265a4 	.word	0x080265a4

080193b0 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 80193b0:	b5b0      	push	{r4, r5, r7, lr}
 80193b2:	b08a      	sub	sp, #40	@ 0x28
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	60f8      	str	r0, [r7, #12]
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	4639      	mov	r1, r7
 80193bc:	e881 000c 	stmia.w	r1, {r2, r3}
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	4618      	mov	r0, r3
 80193c4:	f7f9 f8ca 	bl	801255c <_ZN8CallbackC1Ev>
 80193c8:	4a12      	ldr	r2, [pc, #72]	@ (8019414 <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E+0x64>)
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	601a      	str	r2, [r3, #0]
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	2200      	movs	r2, #0
 80193d2:	711a      	strb	r2, [r3, #4]
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	3308      	adds	r3, #8
 80193d8:	2100      	movs	r1, #0
 80193da:	4618      	mov	r0, r3
 80193dc:	f000 fc0b 	bl	8019bf6 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 80193e0:	f107 0010 	add.w	r0, r7, #16
 80193e4:	463b      	mov	r3, r7
 80193e6:	cb0c      	ldmia	r3, {r2, r3}
 80193e8:	68b9      	ldr	r1, [r7, #8]
 80193ea:	f000 fc12 	bl	8019c12 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	f103 0408 	add.w	r4, r3, #8
 80193f4:	f107 0510 	add.w	r5, r7, #16
 80193f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019400:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2201      	movs	r2, #1
 8019408:	711a      	strb	r2, [r3, #4]
	}
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	4618      	mov	r0, r3
 801940e:	3728      	adds	r7, #40	@ 0x28
 8019410:	46bd      	mov	sp, r7
 8019412:	bdb0      	pop	{r4, r5, r7, pc}
 8019414:	080265a4 	.word	0x080265a4

08019418 <_ZN19core_utils_CallbackIhvEC1Ev>:
	core_utils_Callback() {
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	4618      	mov	r0, r3
 8019424:	f7f9 f89a 	bl	801255c <_ZN8CallbackC1Ev>
 8019428:	4a09      	ldr	r2, [pc, #36]	@ (8019450 <_ZN19core_utils_CallbackIhvEC1Ev+0x38>)
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	601a      	str	r2, [r3, #0]
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2200      	movs	r2, #0
 8019432:	711a      	strb	r2, [r3, #4]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	3308      	adds	r3, #8
 8019438:	2100      	movs	r1, #0
 801943a:	4618      	mov	r0, r3
 801943c:	f000 fbfc 	bl	8019c38 <_ZN26core_utils_FunctionPointerIhvEC1EPFhvE>
		this->registered = 0;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2200      	movs	r2, #0
 8019444:	711a      	strb	r2, [r3, #4]
	}
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	4618      	mov	r0, r3
 801944a:	3708      	adds	r7, #8
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}
 8019450:	08026570 	.word	0x08026570

08019454 <_ZN19core_utils_CallbackIffEC1Ev>:
	core_utils_Callback() {
 8019454:	b580      	push	{r7, lr}
 8019456:	b082      	sub	sp, #8
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	4618      	mov	r0, r3
 8019460:	f7f9 f87c 	bl	801255c <_ZN8CallbackC1Ev>
 8019464:	4a09      	ldr	r2, [pc, #36]	@ (801948c <_ZN19core_utils_CallbackIffEC1Ev+0x38>)
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	601a      	str	r2, [r3, #0]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	2200      	movs	r2, #0
 801946e:	711a      	strb	r2, [r3, #4]
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	3308      	adds	r3, #8
 8019474:	2100      	movs	r1, #0
 8019476:	4618      	mov	r0, r3
 8019478:	f000 fbec 	bl	8019c54 <_ZN26core_utils_FunctionPointerIffEC1EPFffE>
		this->registered = 0;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	2200      	movs	r2, #0
 8019480:	711a      	strb	r2, [r3, #4]
	}
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	4618      	mov	r0, r3
 8019486:	3708      	adds	r7, #8
 8019488:	46bd      	mov	sp, r7
 801948a:	bd80      	pop	{r7, pc}
 801948c:	0802653c 	.word	0x0802653c

08019490 <_ZN19core_utils_CallbackIv18rgb_color_struct_tEC1Ev>:
	core_utils_Callback() {
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	4618      	mov	r0, r3
 801949c:	f7f9 f85e 	bl	801255c <_ZN8CallbackC1Ev>
 80194a0:	4a09      	ldr	r2, [pc, #36]	@ (80194c8 <_ZN19core_utils_CallbackIv18rgb_color_struct_tEC1Ev+0x38>)
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	601a      	str	r2, [r3, #0]
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	2200      	movs	r2, #0
 80194aa:	711a      	strb	r2, [r3, #4]
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	3308      	adds	r3, #8
 80194b0:	2100      	movs	r1, #0
 80194b2:	4618      	mov	r0, r3
 80194b4:	f000 fbdc 	bl	8019c70 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEC1EPFvS0_E>
		this->registered = 0;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2200      	movs	r2, #0
 80194bc:	711a      	strb	r2, [r3, #4]
	}
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	4618      	mov	r0, r3
 80194c2:	3708      	adds	r7, #8
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}
 80194c8:	08026508 	.word	0x08026508

080194cc <_ZN19core_utils_CallbackIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 80194cc:	b5b0      	push	{r4, r5, r7, lr}
 80194ce:	b08a      	sub	sp, #40	@ 0x28
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	60f8      	str	r0, [r7, #12]
 80194d4:	60b9      	str	r1, [r7, #8]
 80194d6:	4639      	mov	r1, r7
 80194d8:	e881 000c 	stmia.w	r1, {r2, r3}
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	4618      	mov	r0, r3
 80194e0:	f7f9 f83c 	bl	801255c <_ZN8CallbackC1Ev>
 80194e4:	4a12      	ldr	r2, [pc, #72]	@ (8019530 <_ZN19core_utils_CallbackIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEPT_MS4_FvS0_E+0x64>)
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	601a      	str	r2, [r3, #0]
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	2200      	movs	r2, #0
 80194ee:	711a      	strb	r2, [r3, #4]
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	3308      	adds	r3, #8
 80194f4:	2100      	movs	r1, #0
 80194f6:	4618      	mov	r0, r3
 80194f8:	f000 fbba 	bl	8019c70 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 80194fc:	f107 0010 	add.w	r0, r7, #16
 8019500:	463b      	mov	r3, r7
 8019502:	cb0c      	ldmia	r3, {r2, r3}
 8019504:	68b9      	ldr	r1, [r7, #8]
 8019506:	f000 fbc1 	bl	8019c8c <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEPT_MS4_FvS0_E>
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	f103 0408 	add.w	r4, r3, #8
 8019510:	f107 0510 	add.w	r5, r7, #16
 8019514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019518:	e895 0003 	ldmia.w	r5, {r0, r1}
 801951c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	2201      	movs	r2, #1
 8019524:	711a      	strb	r2, [r3, #4]
	}
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	4618      	mov	r0, r3
 801952a:	3728      	adds	r7, #40	@ 0x28
 801952c:	46bd      	mov	sp, r7
 801952e:	bdb0      	pop	{r4, r5, r7, pc}
 8019530:	08026508 	.word	0x08026508

08019534 <_ZN19core_utils_CallbackI20twipr_control_mode_tvEC1Ev>:
	core_utils_Callback() {
 8019534:	b580      	push	{r7, lr}
 8019536:	b082      	sub	sp, #8
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	4618      	mov	r0, r3
 8019540:	f7f9 f80c 	bl	801255c <_ZN8CallbackC1Ev>
 8019544:	4a09      	ldr	r2, [pc, #36]	@ (801956c <_ZN19core_utils_CallbackI20twipr_control_mode_tvEC1Ev+0x38>)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	601a      	str	r2, [r3, #0]
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	2200      	movs	r2, #0
 801954e:	711a      	strb	r2, [r3, #4]
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	3308      	adds	r3, #8
 8019554:	2100      	movs	r1, #0
 8019556:	4618      	mov	r0, r3
 8019558:	f000 fbab 	bl	8019cb2 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEC1EPFS0_vE>
		this->registered = 0;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	2200      	movs	r2, #0
 8019560:	711a      	strb	r2, [r3, #4]
	}
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	4618      	mov	r0, r3
 8019566:	3708      	adds	r7, #8
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}
 801956c:	080264d4 	.word	0x080264d4

08019570 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>:
	core_utils_Callback() {
 8019570:	b580      	push	{r7, lr}
 8019572:	b082      	sub	sp, #8
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	4618      	mov	r0, r3
 801957c:	f7f8 ffee 	bl	801255c <_ZN8CallbackC1Ev>
 8019580:	4a09      	ldr	r2, [pc, #36]	@ (80195a8 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev+0x38>)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	601a      	str	r2, [r3, #0]
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	2200      	movs	r2, #0
 801958a:	711a      	strb	r2, [r3, #4]
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	3308      	adds	r3, #8
 8019590:	2100      	movs	r1, #0
 8019592:	4618      	mov	r0, r3
 8019594:	f000 fb9b 	bl	8019cce <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		this->registered = 0;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2200      	movs	r2, #0
 801959c:	711a      	strb	r2, [r3, #4]
	}
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	4618      	mov	r0, r3
 80195a2:	3708      	adds	r7, #8
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	080264a0 	.word	0x080264a0

080195ac <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 80195ac:	b5b0      	push	{r4, r5, r7, lr}
 80195ae:	b08a      	sub	sp, #40	@ 0x28
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	4639      	mov	r1, r7
 80195b8:	e881 000c 	stmia.w	r1, {r2, r3}
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	4618      	mov	r0, r3
 80195c0:	f7f8 ffcc 	bl	801255c <_ZN8CallbackC1Ev>
 80195c4:	4a12      	ldr	r2, [pc, #72]	@ (8019610 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	601a      	str	r2, [r3, #0]
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	2200      	movs	r2, #0
 80195ce:	711a      	strb	r2, [r3, #4]
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	3308      	adds	r3, #8
 80195d4:	2100      	movs	r1, #0
 80195d6:	4618      	mov	r0, r3
 80195d8:	f000 fb79 	bl	8019cce <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 80195dc:	f107 0010 	add.w	r0, r7, #16
 80195e0:	463b      	mov	r3, r7
 80195e2:	cb0c      	ldmia	r3, {r2, r3}
 80195e4:	68b9      	ldr	r1, [r7, #8]
 80195e6:	f000 fb80 	bl	8019cea <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	f103 0408 	add.w	r4, r3, #8
 80195f0:	f107 0510 	add.w	r5, r7, #16
 80195f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80195fc:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	2201      	movs	r2, #1
 8019604:	711a      	strb	r2, [r3, #4]
	}
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	4618      	mov	r0, r3
 801960a:	3728      	adds	r7, #40	@ 0x28
 801960c:	46bd      	mov	sp, r7
 801960e:	bdb0      	pop	{r4, r5, r7, pc}
 8019610:	080264a0 	.word	0x080264a0

08019614 <_ZN19core_utils_CallbackIhA8_fEC1Ev>:
	core_utils_Callback() {
 8019614:	b580      	push	{r7, lr}
 8019616:	b082      	sub	sp, #8
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	4618      	mov	r0, r3
 8019620:	f7f8 ff9c 	bl	801255c <_ZN8CallbackC1Ev>
 8019624:	4a09      	ldr	r2, [pc, #36]	@ (801964c <_ZN19core_utils_CallbackIhA8_fEC1Ev+0x38>)
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	601a      	str	r2, [r3, #0]
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2200      	movs	r2, #0
 801962e:	711a      	strb	r2, [r3, #4]
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	3308      	adds	r3, #8
 8019634:	2100      	movs	r1, #0
 8019636:	4618      	mov	r0, r3
 8019638:	f000 fb6a 	bl	8019d10 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		this->registered = 0;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2200      	movs	r2, #0
 8019640:	711a      	strb	r2, [r3, #4]
	}
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	4618      	mov	r0, r3
 8019646:	3708      	adds	r7, #8
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}
 801964c:	0802646c 	.word	0x0802646c

08019650 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 8019650:	b5b0      	push	{r4, r5, r7, lr}
 8019652:	b08a      	sub	sp, #40	@ 0x28
 8019654:	af00      	add	r7, sp, #0
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	4639      	mov	r1, r7
 801965c:	e881 000c 	stmia.w	r1, {r2, r3}
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	4618      	mov	r0, r3
 8019664:	f7f8 ff7a 	bl	801255c <_ZN8CallbackC1Ev>
 8019668:	4a12      	ldr	r2, [pc, #72]	@ (80196b4 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	601a      	str	r2, [r3, #0]
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	2200      	movs	r2, #0
 8019672:	711a      	strb	r2, [r3, #4]
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	3308      	adds	r3, #8
 8019678:	2100      	movs	r1, #0
 801967a:	4618      	mov	r0, r3
 801967c:	f000 fb48 	bl	8019d10 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 8019680:	f107 0010 	add.w	r0, r7, #16
 8019684:	463b      	mov	r3, r7
 8019686:	cb0c      	ldmia	r3, {r2, r3}
 8019688:	68b9      	ldr	r1, [r7, #8]
 801968a:	f000 fb4f 	bl	8019d2c <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	f103 0408 	add.w	r4, r3, #8
 8019694:	f107 0510 	add.w	r5, r7, #16
 8019698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801969a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801969c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80196a0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	2201      	movs	r2, #1
 80196a8:	711a      	strb	r2, [r3, #4]
	}
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	4618      	mov	r0, r3
 80196ae:	3728      	adds	r7, #40	@ 0x28
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bdb0      	pop	{r4, r5, r7, pc}
 80196b4:	0802646c 	.word	0x0802646c

080196b8 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1Ev>:
	core_utils_Callback() {
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b082      	sub	sp, #8
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7f8 ff4a 	bl	801255c <_ZN8CallbackC1Ev>
 80196c8:	4a09      	ldr	r2, [pc, #36]	@ (80196f0 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1Ev+0x38>)
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	601a      	str	r2, [r3, #0]
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	2200      	movs	r2, #0
 80196d2:	711a      	strb	r2, [r3, #4]
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	3308      	adds	r3, #8
 80196d8:	2100      	movs	r1, #0
 80196da:	4618      	mov	r0, r3
 80196dc:	f000 fb39 	bl	8019d52 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1EPFvS0_E>
		this->registered = 0;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2200      	movs	r2, #0
 80196e4:	711a      	strb	r2, [r3, #4]
	}
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	4618      	mov	r0, r3
 80196ea:	3708      	adds	r7, #8
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	08026438 	.word	0x08026438

080196f4 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 80196f4:	b5b0      	push	{r4, r5, r7, lr}
 80196f6:	b08a      	sub	sp, #40	@ 0x28
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	60f8      	str	r0, [r7, #12]
 80196fc:	60b9      	str	r1, [r7, #8]
 80196fe:	4639      	mov	r1, r7
 8019700:	e881 000c 	stmia.w	r1, {r2, r3}
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	4618      	mov	r0, r3
 8019708:	f7f8 ff28 	bl	801255c <_ZN8CallbackC1Ev>
 801970c:	4a12      	ldr	r2, [pc, #72]	@ (8019758 <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	601a      	str	r2, [r3, #0]
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	2200      	movs	r2, #0
 8019716:	711a      	strb	r2, [r3, #4]
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	3308      	adds	r3, #8
 801971c:	2100      	movs	r1, #0
 801971e:	4618      	mov	r0, r3
 8019720:	f000 fb17 	bl	8019d52 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8019724:	f107 0010 	add.w	r0, r7, #16
 8019728:	463b      	mov	r3, r7
 801972a:	cb0c      	ldmia	r3, {r2, r3}
 801972c:	68b9      	ldr	r1, [r7, #8]
 801972e:	f000 fb1e 	bl	8019d6e <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	f103 0408 	add.w	r4, r3, #8
 8019738:	f107 0510 	add.w	r5, r7, #16
 801973c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801973e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019740:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019744:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	2201      	movs	r2, #1
 801974c:	711a      	strb	r2, [r3, #4]
	}
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	4618      	mov	r0, r3
 8019752:	3728      	adds	r7, #40	@ 0x28
 8019754:	46bd      	mov	sp, r7
 8019756:	bdb0      	pop	{r4, r5, r7, pc}
 8019758:	08026438 	.word	0x08026438

0801975c <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1Ev>:
	core_utils_Callback() {
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	4618      	mov	r0, r3
 8019768:	f7f8 fef8 	bl	801255c <_ZN8CallbackC1Ev>
 801976c:	4a09      	ldr	r2, [pc, #36]	@ (8019794 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1Ev+0x38>)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	601a      	str	r2, [r3, #0]
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	2200      	movs	r2, #0
 8019776:	711a      	strb	r2, [r3, #4]
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	3308      	adds	r3, #8
 801977c:	2100      	movs	r1, #0
 801977e:	4618      	mov	r0, r3
 8019780:	f000 fb08 	bl	8019d94 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2200      	movs	r2, #0
 8019788:	711a      	strb	r2, [r3, #4]
	}
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	4618      	mov	r0, r3
 801978e:	3708      	adds	r7, #8
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	08026404 	.word	0x08026404

08019798 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8019798:	b5b0      	push	{r4, r5, r7, lr}
 801979a:	b08a      	sub	sp, #40	@ 0x28
 801979c:	af00      	add	r7, sp, #0
 801979e:	60f8      	str	r0, [r7, #12]
 80197a0:	60b9      	str	r1, [r7, #8]
 80197a2:	4639      	mov	r1, r7
 80197a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7f8 fed6 	bl	801255c <_ZN8CallbackC1Ev>
 80197b0:	4a12      	ldr	r2, [pc, #72]	@ (80197fc <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	601a      	str	r2, [r3, #0]
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	2200      	movs	r2, #0
 80197ba:	711a      	strb	r2, [r3, #4]
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	3308      	adds	r3, #8
 80197c0:	2100      	movs	r1, #0
 80197c2:	4618      	mov	r0, r3
 80197c4:	f000 fae6 	bl	8019d94 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 80197c8:	f107 0010 	add.w	r0, r7, #16
 80197cc:	463b      	mov	r3, r7
 80197ce:	cb0c      	ldmia	r3, {r2, r3}
 80197d0:	68b9      	ldr	r1, [r7, #8]
 80197d2:	f000 faed 	bl	8019db0 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	f103 0408 	add.w	r4, r3, #8
 80197dc:	f107 0510 	add.w	r5, r7, #16
 80197e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80197e8:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	2201      	movs	r2, #1
 80197f0:	711a      	strb	r2, [r3, #4]
	}
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	4618      	mov	r0, r3
 80197f6:	3728      	adds	r7, #40	@ 0x28
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bdb0      	pop	{r4, r5, r7, pc}
 80197fc:	08026404 	.word	0x08026404

08019800 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1Ev>:
	core_utils_Callback() {
 8019800:	b580      	push	{r7, lr}
 8019802:	b082      	sub	sp, #8
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	4618      	mov	r0, r3
 801980c:	f7f8 fea6 	bl	801255c <_ZN8CallbackC1Ev>
 8019810:	4a09      	ldr	r2, [pc, #36]	@ (8019838 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1Ev+0x38>)
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	601a      	str	r2, [r3, #0]
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2200      	movs	r2, #0
 801981a:	711a      	strb	r2, [r3, #4]
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	3308      	adds	r3, #8
 8019820:	2100      	movs	r1, #0
 8019822:	4618      	mov	r0, r3
 8019824:	f000 fad7 	bl	8019dd6 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	2200      	movs	r2, #0
 801982c:	711a      	strb	r2, [r3, #4]
	}
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	4618      	mov	r0, r3
 8019832:	3708      	adds	r7, #8
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}
 8019838:	080263d0 	.word	0x080263d0

0801983c <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 801983c:	b5b0      	push	{r4, r5, r7, lr}
 801983e:	b08a      	sub	sp, #40	@ 0x28
 8019840:	af00      	add	r7, sp, #0
 8019842:	60f8      	str	r0, [r7, #12]
 8019844:	60b9      	str	r1, [r7, #8]
 8019846:	4639      	mov	r1, r7
 8019848:	e881 000c 	stmia.w	r1, {r2, r3}
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	4618      	mov	r0, r3
 8019850:	f7f8 fe84 	bl	801255c <_ZN8CallbackC1Ev>
 8019854:	4a12      	ldr	r2, [pc, #72]	@ (80198a0 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	601a      	str	r2, [r3, #0]
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	2200      	movs	r2, #0
 801985e:	711a      	strb	r2, [r3, #4]
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	3308      	adds	r3, #8
 8019864:	2100      	movs	r1, #0
 8019866:	4618      	mov	r0, r3
 8019868:	f000 fab5 	bl	8019dd6 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 801986c:	f107 0010 	add.w	r0, r7, #16
 8019870:	463b      	mov	r3, r7
 8019872:	cb0c      	ldmia	r3, {r2, r3}
 8019874:	68b9      	ldr	r1, [r7, #8]
 8019876:	f000 fabc 	bl	8019df2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	f103 0408 	add.w	r4, r3, #8
 8019880:	f107 0510 	add.w	r5, r7, #16
 8019884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019888:	e895 0003 	ldmia.w	r5, {r0, r1}
 801988c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	2201      	movs	r2, #1
 8019894:	711a      	strb	r2, [r3, #4]
	}
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	4618      	mov	r0, r3
 801989a:	3728      	adds	r7, #40	@ 0x28
 801989c:	46bd      	mov	sp, r7
 801989e:	bdb0      	pop	{r4, r5, r7, pc}
 80198a0:	080263d0 	.word	0x080263d0

080198a4 <_ZN19core_utils_CallbackIhA3_fEC1Ev>:
	core_utils_Callback() {
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b082      	sub	sp, #8
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7f8 fe54 	bl	801255c <_ZN8CallbackC1Ev>
 80198b4:	4a09      	ldr	r2, [pc, #36]	@ (80198dc <_ZN19core_utils_CallbackIhA3_fEC1Ev+0x38>)
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	601a      	str	r2, [r3, #0]
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	711a      	strb	r2, [r3, #4]
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	3308      	adds	r3, #8
 80198c4:	2100      	movs	r1, #0
 80198c6:	4618      	mov	r0, r3
 80198c8:	f000 faa6 	bl	8019e18 <_ZN26core_utils_FunctionPointerIhA3_fEC1EPFhPfE>
		this->registered = 0;
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2200      	movs	r2, #0
 80198d0:	711a      	strb	r2, [r3, #4]
	}
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	4618      	mov	r0, r3
 80198d6:	3708      	adds	r7, #8
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}
 80198dc:	0802639c 	.word	0x0802639c

080198e0 <_ZN19core_utils_CallbackIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(input_type)) {
 80198e0:	b5b0      	push	{r4, r5, r7, lr}
 80198e2:	b08a      	sub	sp, #40	@ 0x28
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	60f8      	str	r0, [r7, #12]
 80198e8:	60b9      	str	r1, [r7, #8]
 80198ea:	4639      	mov	r1, r7
 80198ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	4618      	mov	r0, r3
 80198f4:	f7f8 fe32 	bl	801255c <_ZN8CallbackC1Ev>
 80198f8:	4a12      	ldr	r2, [pc, #72]	@ (8019944 <_ZN19core_utils_CallbackIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	601a      	str	r2, [r3, #0]
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	2200      	movs	r2, #0
 8019902:	711a      	strb	r2, [r3, #4]
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	3308      	adds	r3, #8
 8019908:	2100      	movs	r1, #0
 801990a:	4618      	mov	r0, r3
 801990c:	f000 fa84 	bl	8019e18 <_ZN26core_utils_FunctionPointerIhA3_fEC1EPFhPfE>
		function_pointer = core_utils_FunctionPointer<output_type, input_type>(
 8019910:	f107 0010 	add.w	r0, r7, #16
 8019914:	463b      	mov	r3, r7
 8019916:	cb0c      	ldmia	r3, {r2, r3}
 8019918:	68b9      	ldr	r1, [r7, #8]
 801991a:	f000 fa8b 	bl	8019e34 <_ZN26core_utils_FunctionPointerIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	f103 0408 	add.w	r4, r3, #8
 8019924:	f107 0510 	add.w	r5, r7, #16
 8019928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801992a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801992c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019930:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	2201      	movs	r2, #1
 8019938:	711a      	strb	r2, [r3, #4]
	}
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	4618      	mov	r0, r3
 801993e:	3728      	adds	r7, #40	@ 0x28
 8019940:	46bd      	mov	sp, r7
 8019942:	bdb0      	pop	{r4, r5, r7, pc}
 8019944:	0802639c 	.word	0x0802639c

08019948 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1Ev>:
	core_utils_Callback() {
 8019948:	b580      	push	{r7, lr}
 801994a:	b082      	sub	sp, #8
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	4618      	mov	r0, r3
 8019954:	f7f8 fe02 	bl	801255c <_ZN8CallbackC1Ev>
 8019958:	4a09      	ldr	r2, [pc, #36]	@ (8019980 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1Ev+0x38>)
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	601a      	str	r2, [r3, #0]
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2200      	movs	r2, #0
 8019962:	711a      	strb	r2, [r3, #4]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	3308      	adds	r3, #8
 8019968:	2100      	movs	r1, #0
 801996a:	4618      	mov	r0, r3
 801996c:	f000 fa75 	bl	8019e5a <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1EPFS0_vE>
		this->registered = 0;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	2200      	movs	r2, #0
 8019974:	711a      	strb	r2, [r3, #4]
	}
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	4618      	mov	r0, r3
 801997a:	3708      	adds	r7, #8
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}
 8019980:	08026368 	.word	0x08026368

08019984 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>:
	core_utils_Callback(cls *object, output_type (cls::*member)(void)) {
 8019984:	b5b0      	push	{r4, r5, r7, lr}
 8019986:	b08a      	sub	sp, #40	@ 0x28
 8019988:	af00      	add	r7, sp, #0
 801998a:	60f8      	str	r0, [r7, #12]
 801998c:	60b9      	str	r1, [r7, #8]
 801998e:	4639      	mov	r1, r7
 8019990:	e881 000c 	stmia.w	r1, {r2, r3}
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	4618      	mov	r0, r3
 8019998:	f7f8 fde0 	bl	801255c <_ZN8CallbackC1Ev>
 801999c:	4a12      	ldr	r2, [pc, #72]	@ (80199e8 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE+0x64>)
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	601a      	str	r2, [r3, #0]
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	2200      	movs	r2, #0
 80199a6:	711a      	strb	r2, [r3, #4]
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	3308      	adds	r3, #8
 80199ac:	2100      	movs	r1, #0
 80199ae:	4618      	mov	r0, r3
 80199b0:	f000 fa53 	bl	8019e5a <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1EPFS0_vE>
		_fp = core_utils_FunctionPointer<output_type, void>(object, member);
 80199b4:	f107 0010 	add.w	r0, r7, #16
 80199b8:	463b      	mov	r3, r7
 80199ba:	cb0c      	ldmia	r3, {r2, r3}
 80199bc:	68b9      	ldr	r1, [r7, #8]
 80199be:	f000 fa5a 	bl	8019e76 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	f103 0408 	add.w	r4, r3, #8
 80199c8:	f107 0510 	add.w	r5, r7, #16
 80199cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80199d4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	2201      	movs	r2, #1
 80199dc:	711a      	strb	r2, [r3, #4]
	}
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	4618      	mov	r0, r3
 80199e2:	3728      	adds	r7, #40	@ 0x28
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bdb0      	pop	{r4, r5, r7, pc}
 80199e8:	08026368 	.word	0x08026368

080199ec <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEC1Ev>:
	core_utils_Callback() {
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b082      	sub	sp, #8
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7f8 fdb0 	bl	801255c <_ZN8CallbackC1Ev>
 80199fc:	4a09      	ldr	r2, [pc, #36]	@ (8019a24 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEC1Ev+0x38>)
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	601a      	str	r2, [r3, #0]
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	2200      	movs	r2, #0
 8019a06:	711a      	strb	r2, [r3, #4]
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	3308      	adds	r3, #8
 8019a0c:	2100      	movs	r1, #0
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f000 fa44 	bl	8019e9c <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEC1EPFvS0_E>
		this->registered = 0;
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2200      	movs	r2, #0
 8019a18:	711a      	strb	r2, [r3, #4]
	}
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	3708      	adds	r7, #8
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}
 8019a24:	08026334 	.word	0x08026334

08019a28 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8019a28:	b5b0      	push	{r4, r5, r7, lr}
 8019a2a:	b08a      	sub	sp, #40	@ 0x28
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	60f8      	str	r0, [r7, #12]
 8019a30:	60b9      	str	r1, [r7, #8]
 8019a32:	4639      	mov	r1, r7
 8019a34:	e881 000c 	stmia.w	r1, {r2, r3}
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7f8 fd8e 	bl	801255c <_ZN8CallbackC1Ev>
 8019a40:	4a12      	ldr	r2, [pc, #72]	@ (8019a8c <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E+0x64>)
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	601a      	str	r2, [r3, #0]
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	711a      	strb	r2, [r3, #4]
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	3308      	adds	r3, #8
 8019a50:	2100      	movs	r1, #0
 8019a52:	4618      	mov	r0, r3
 8019a54:	f000 fa22 	bl	8019e9c <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8019a58:	f107 0010 	add.w	r0, r7, #16
 8019a5c:	463b      	mov	r3, r7
 8019a5e:	cb0c      	ldmia	r3, {r2, r3}
 8019a60:	68b9      	ldr	r1, [r7, #8]
 8019a62:	f000 fa29 	bl	8019eb8 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E>
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	f103 0408 	add.w	r4, r3, #8
 8019a6c:	f107 0510 	add.w	r5, r7, #16
 8019a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019a78:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2201      	movs	r2, #1
 8019a80:	711a      	strb	r2, [r3, #4]
	}
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	4618      	mov	r0, r3
 8019a86:	3728      	adds	r7, #40	@ 0x28
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8019a8c:	08026334 	.word	0x08026334

08019a90 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>:
	core_utils_Callback(cls *object, void (cls::*member)(input_type)) {
 8019a90:	b5b0      	push	{r4, r5, r7, lr}
 8019a92:	b08a      	sub	sp, #40	@ 0x28
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	4639      	mov	r1, r7
 8019a9c:	e881 000c 	stmia.w	r1, {r2, r3}
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f7f8 fd5a 	bl	801255c <_ZN8CallbackC1Ev>
 8019aa8:	4a12      	ldr	r2, [pc, #72]	@ (8019af4 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE+0x64>)
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	601a      	str	r2, [r3, #0]
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	711a      	strb	r2, [r3, #4]
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	3308      	adds	r3, #8
 8019ab8:	2100      	movs	r1, #0
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7f8 ff9f 	bl	80129fe <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<void, input_type>(object, member);
 8019ac0:	f107 0010 	add.w	r0, r7, #16
 8019ac4:	463b      	mov	r3, r7
 8019ac6:	cb0c      	ldmia	r3, {r2, r3}
 8019ac8:	68b9      	ldr	r1, [r7, #8]
 8019aca:	f000 fa08 	bl	8019ede <_ZN26core_utils_FunctionPointerIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	f103 0408 	add.w	r4, r3, #8
 8019ad4:	f107 0510 	add.w	r5, r7, #16
 8019ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019adc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019ae0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	2201      	movs	r2, #1
 8019ae8:	711a      	strb	r2, [r3, #4]
	}
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	4618      	mov	r0, r3
 8019aee:	3728      	adds	r7, #40	@ 0x28
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bdb0      	pop	{r4, r5, r7, pc}
 8019af4:	08026128 	.word	0x08026128

08019af8 <_ZN19core_utils_CallbackIvvEC1I15TWIPR_SequencerEEPT_MS3_FvvE>:
	core_utils_Callback(cls *object, void (cls::*member)(void)) {
 8019af8:	b5b0      	push	{r4, r5, r7, lr}
 8019afa:	b08a      	sub	sp, #40	@ 0x28
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	60f8      	str	r0, [r7, #12]
 8019b00:	60b9      	str	r1, [r7, #8]
 8019b02:	4639      	mov	r1, r7
 8019b04:	e881 000c 	stmia.w	r1, {r2, r3}
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7f8 fd26 	bl	801255c <_ZN8CallbackC1Ev>
 8019b10:	4a12      	ldr	r2, [pc, #72]	@ (8019b5c <_ZN19core_utils_CallbackIvvEC1I15TWIPR_SequencerEEPT_MS3_FvvE+0x64>)
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	601a      	str	r2, [r3, #0]
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	2200      	movs	r2, #0
 8019b1a:	711a      	strb	r2, [r3, #4]
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	3308      	adds	r3, #8
 8019b20:	2100      	movs	r1, #0
 8019b22:	4618      	mov	r0, r3
 8019b24:	f7f8 feb9 	bl	801289a <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<void, void>(object, member);
 8019b28:	f107 0010 	add.w	r0, r7, #16
 8019b2c:	463b      	mov	r3, r7
 8019b2e:	cb0c      	ldmia	r3, {r2, r3}
 8019b30:	68b9      	ldr	r1, [r7, #8]
 8019b32:	f000 f9e7 	bl	8019f04 <_ZN26core_utils_FunctionPointerIvvEC1I15TWIPR_SequencerEEPT_MS3_FvvE>
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	f103 0408 	add.w	r4, r3, #8
 8019b3c:	f107 0510 	add.w	r5, r7, #16
 8019b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019b48:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2201      	movs	r2, #1
 8019b50:	711a      	strb	r2, [r3, #4]
	}
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	4618      	mov	r0, r3
 8019b56:	3728      	adds	r7, #40	@ 0x28
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8019b5c:	08026138 	.word	0x08026138

08019b60 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b082      	sub	sp, #8
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	6039      	str	r1, [r7, #0]
        attach(function);
 8019b6a:	6839      	ldr	r1, [r7, #0]
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f000 f9dc 	bl	8019f2a <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE6attachEPFS0_vE>
    }
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	4618      	mov	r0, r3
 8019b76:	3708      	adds	r7, #8
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <_ZN26core_utils_FunctionPointerImvEC1EPFmvE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b082      	sub	sp, #8
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
 8019b84:	6039      	str	r1, [r7, #0]
        attach(function);
 8019b86:	6839      	ldr	r1, [r7, #0]
 8019b88:	6878      	ldr	r0, [r7, #4]
 8019b8a:	f000 f9df 	bl	8019f4c <_ZN26core_utils_FunctionPointerImvE6attachEPFmvE>
    }
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	4618      	mov	r0, r3
 8019b92:	3708      	adds	r7, #8
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}

08019b98 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b082      	sub	sp, #8
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
 8019ba0:	6039      	str	r1, [r7, #0]
        attach(function);
 8019ba2:	6839      	ldr	r1, [r7, #0]
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f000 f9e2 	bl	8019f6e <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE6attachEPFS0_vE>
    }
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	4618      	mov	r0, r3
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}

08019bb4 <_ZN26core_utils_FunctionPointerIhhEC1EPFhhE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b082      	sub	sp, #8
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	6039      	str	r1, [r7, #0]
        attach(function);
 8019bbe:	6839      	ldr	r1, [r7, #0]
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f000 f9e5 	bl	8019f90 <_ZN26core_utils_FunctionPointerIhhE6attachEPFhhE>
    }
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3708      	adds	r7, #8
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}

08019bd0 <_ZN26core_utils_FunctionPointerIhhEC1I14TWIPR_FirmwareEEPT_MS3_FhhE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b084      	sub	sp, #16
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	60f8      	str	r0, [r7, #12]
 8019bd8:	60b9      	str	r1, [r7, #8]
 8019bda:	4639      	mov	r1, r7
 8019bdc:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019be0:	463b      	mov	r3, r7
 8019be2:	cb0c      	ldmia	r3, {r2, r3}
 8019be4:	68b9      	ldr	r1, [r7, #8]
 8019be6:	68f8      	ldr	r0, [r7, #12]
 8019be8:	f000 f9e4 	bl	8019fb4 <_ZN26core_utils_FunctionPointerIhhE6attachI14TWIPR_FirmwareEEvPT_MS3_FhhE>
    }
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	4618      	mov	r0, r3
 8019bf0:	3710      	adds	r7, #16
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}

08019bf6 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019bf6:	b580      	push	{r7, lr}
 8019bf8:	b082      	sub	sp, #8
 8019bfa:	af00      	add	r7, sp, #0
 8019bfc:	6078      	str	r0, [r7, #4]
 8019bfe:	6039      	str	r1, [r7, #0]
        attach(function);
 8019c00:	6839      	ldr	r1, [r7, #0]
 8019c02:	6878      	ldr	r0, [r7, #4]
 8019c04:	f000 f9f4 	bl	8019ff0 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachEPFvS0_E>
    }
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	3708      	adds	r7, #8
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bd80      	pop	{r7, pc}

08019c12 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019c12:	b580      	push	{r7, lr}
 8019c14:	b084      	sub	sp, #16
 8019c16:	af00      	add	r7, sp, #0
 8019c18:	60f8      	str	r0, [r7, #12]
 8019c1a:	60b9      	str	r1, [r7, #8]
 8019c1c:	4639      	mov	r1, r7
 8019c1e:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019c22:	463b      	mov	r3, r7
 8019c24:	cb0c      	ldmia	r3, {r2, r3}
 8019c26:	68b9      	ldr	r1, [r7, #8]
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f000 f9f3 	bl	801a014 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachI19RobotControl_BuzzerEEvPT_MS4_FvS0_E>
    }
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	4618      	mov	r0, r3
 8019c32:	3710      	adds	r7, #16
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}

08019c38 <_ZN26core_utils_FunctionPointerIhvEC1EPFhvE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	6039      	str	r1, [r7, #0]
        attach(function);
 8019c42:	6839      	ldr	r1, [r7, #0]
 8019c44:	6878      	ldr	r0, [r7, #4]
 8019c46:	f000 fa03 	bl	801a050 <_ZN26core_utils_FunctionPointerIhvE6attachEPFhvE>
    }
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3708      	adds	r7, #8
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}

08019c54 <_ZN26core_utils_FunctionPointerIffEC1EPFffE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b082      	sub	sp, #8
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	6039      	str	r1, [r7, #0]
        attach(function);
 8019c5e:	6839      	ldr	r1, [r7, #0]
 8019c60:	6878      	ldr	r0, [r7, #4]
 8019c62:	f000 fa06 	bl	801a072 <_ZN26core_utils_FunctionPointerIffE6attachEPFffE>
    }
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	4618      	mov	r0, r3
 8019c6a:	3708      	adds	r7, #8
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}

08019c70 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
 8019c78:	6039      	str	r1, [r7, #0]
        attach(function);
 8019c7a:	6839      	ldr	r1, [r7, #0]
 8019c7c:	6878      	ldr	r0, [r7, #4]
 8019c7e:	f000 fa09 	bl	801a094 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE6attachEPFvS0_E>
    }
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	4618      	mov	r0, r3
 8019c86:	3708      	adds	r7, #8
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd80      	pop	{r7, pc}

08019c8c <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b084      	sub	sp, #16
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	60f8      	str	r0, [r7, #12]
 8019c94:	60b9      	str	r1, [r7, #8]
 8019c96:	4639      	mov	r1, r7
 8019c98:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019c9c:	463b      	mov	r3, r7
 8019c9e:	cb0c      	ldmia	r3, {r2, r3}
 8019ca0:	68b9      	ldr	r1, [r7, #8]
 8019ca2:	68f8      	ldr	r0, [r7, #12]
 8019ca4:	f000 fa08 	bl	801a0b8 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE6attachI21RobotControl_ExtenderEEvPT_MS4_FvS0_E>
    }
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	4618      	mov	r0, r3
 8019cac:	3710      	adds	r7, #16
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}

08019cb2 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019cb2:	b580      	push	{r7, lr}
 8019cb4:	b082      	sub	sp, #8
 8019cb6:	af00      	add	r7, sp, #0
 8019cb8:	6078      	str	r0, [r7, #4]
 8019cba:	6039      	str	r1, [r7, #0]
        attach(function);
 8019cbc:	6839      	ldr	r1, [r7, #0]
 8019cbe:	6878      	ldr	r0, [r7, #4]
 8019cc0:	f000 fa18 	bl	801a0f4 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE6attachEPFS0_vE>
    }
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	3708      	adds	r7, #8
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}

08019cce <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019cce:	b580      	push	{r7, lr}
 8019cd0:	b082      	sub	sp, #8
 8019cd2:	af00      	add	r7, sp, #0
 8019cd4:	6078      	str	r0, [r7, #4]
 8019cd6:	6039      	str	r1, [r7, #0]
        attach(function);
 8019cd8:	6839      	ldr	r1, [r7, #0]
 8019cda:	6878      	ldr	r0, [r7, #4]
 8019cdc:	f000 fa1b 	bl	801a116 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>
    }
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	3708      	adds	r7, #8
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}

08019cea <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019cea:	b580      	push	{r7, lr}
 8019cec:	b084      	sub	sp, #16
 8019cee:	af00      	add	r7, sp, #0
 8019cf0:	60f8      	str	r0, [r7, #12]
 8019cf2:	60b9      	str	r1, [r7, #8]
 8019cf4:	4639      	mov	r1, r7
 8019cf6:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019cfa:	463b      	mov	r3, r7
 8019cfc:	cb0c      	ldmia	r3, {r2, r3}
 8019cfe:	68b9      	ldr	r1, [r7, #8]
 8019d00:	68f8      	ldr	r0, [r7, #12]
 8019d02:	f000 fa19 	bl	801a138 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3710      	adds	r7, #16
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	6039      	str	r1, [r7, #0]
        attach(function);
 8019d1a:	6839      	ldr	r1, [r7, #0]
 8019d1c:	6878      	ldr	r0, [r7, #4]
 8019d1e:	f000 fa29 	bl	801a174 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>
    }
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	4618      	mov	r0, r3
 8019d26:	3708      	adds	r7, #8
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	bd80      	pop	{r7, pc}

08019d2c <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b084      	sub	sp, #16
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	60f8      	str	r0, [r7, #12]
 8019d34:	60b9      	str	r1, [r7, #8]
 8019d36:	4639      	mov	r1, r7
 8019d38:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019d3c:	463b      	mov	r3, r7
 8019d3e:	cb0c      	ldmia	r3, {r2, r3}
 8019d40:	68b9      	ldr	r1, [r7, #8]
 8019d42:	68f8      	ldr	r0, [r7, #12]
 8019d44:	f000 fa28 	bl	801a198 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	3710      	adds	r7, #16
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	bd80      	pop	{r7, pc}

08019d52 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019d52:	b580      	push	{r7, lr}
 8019d54:	b082      	sub	sp, #8
 8019d56:	af00      	add	r7, sp, #0
 8019d58:	6078      	str	r0, [r7, #4]
 8019d5a:	6039      	str	r1, [r7, #0]
        attach(function);
 8019d5c:	6839      	ldr	r1, [r7, #0]
 8019d5e:	6878      	ldr	r0, [r7, #4]
 8019d60:	f000 fa38 	bl	801a1d4 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachEPFvS0_E>
    }
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	4618      	mov	r0, r3
 8019d68:	3708      	adds	r7, #8
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}

08019d6e <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019d6e:	b580      	push	{r7, lr}
 8019d70:	b084      	sub	sp, #16
 8019d72:	af00      	add	r7, sp, #0
 8019d74:	60f8      	str	r0, [r7, #12]
 8019d76:	60b9      	str	r1, [r7, #8]
 8019d78:	4639      	mov	r1, r7
 8019d7a:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019d7e:	463b      	mov	r3, r7
 8019d80:	cb0c      	ldmia	r3, {r2, r3}
 8019d82:	68b9      	ldr	r1, [r7, #8]
 8019d84:	68f8      	ldr	r0, [r7, #12]
 8019d86:	f000 fa37 	bl	801a1f8 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	3710      	adds	r7, #16
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}

08019d94 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b082      	sub	sp, #8
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	6039      	str	r1, [r7, #0]
        attach(function);
 8019d9e:	6839      	ldr	r1, [r7, #0]
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f000 fa47 	bl	801a234 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachEPFvS0_E>
    }
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	4618      	mov	r0, r3
 8019daa:	3708      	adds	r7, #8
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}

08019db0 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b084      	sub	sp, #16
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	60f8      	str	r0, [r7, #12]
 8019db8:	60b9      	str	r1, [r7, #8]
 8019dba:	4639      	mov	r1, r7
 8019dbc:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019dc0:	463b      	mov	r3, r7
 8019dc2:	cb0c      	ldmia	r3, {r2, r3}
 8019dc4:	68b9      	ldr	r1, [r7, #8]
 8019dc6:	68f8      	ldr	r0, [r7, #12]
 8019dc8:	f000 fa46 	bl	801a258 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	4618      	mov	r0, r3
 8019dd0:	3710      	adds	r7, #16
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}

08019dd6 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019dd6:	b580      	push	{r7, lr}
 8019dd8:	b082      	sub	sp, #8
 8019dda:	af00      	add	r7, sp, #0
 8019ddc:	6078      	str	r0, [r7, #4]
 8019dde:	6039      	str	r1, [r7, #0]
        attach(function);
 8019de0:	6839      	ldr	r1, [r7, #0]
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	f000 fa56 	bl	801a294 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachEPFvS0_E>
    }
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	4618      	mov	r0, r3
 8019dec:	3708      	adds	r7, #8
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}

08019df2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019df2:	b580      	push	{r7, lr}
 8019df4:	b084      	sub	sp, #16
 8019df6:	af00      	add	r7, sp, #0
 8019df8:	60f8      	str	r0, [r7, #12]
 8019dfa:	60b9      	str	r1, [r7, #8]
 8019dfc:	4639      	mov	r1, r7
 8019dfe:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019e02:	463b      	mov	r3, r7
 8019e04:	cb0c      	ldmia	r3, {r2, r3}
 8019e06:	68b9      	ldr	r1, [r7, #8]
 8019e08:	68f8      	ldr	r0, [r7, #12]
 8019e0a:	f000 fa55 	bl	801a2b8 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	4618      	mov	r0, r3
 8019e12:	3710      	adds	r7, #16
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}

08019e18 <_ZN26core_utils_FunctionPointerIhA3_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	b082      	sub	sp, #8
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
 8019e20:	6039      	str	r1, [r7, #0]
        attach(function);
 8019e22:	6839      	ldr	r1, [r7, #0]
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f000 fa65 	bl	801a2f4 <_ZN26core_utils_FunctionPointerIhA3_fE6attachEPFhPfE>
    }
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	3708      	adds	r7, #8
 8019e30:	46bd      	mov	sp, r7
 8019e32:	bd80      	pop	{r7, pc}

08019e34 <_ZN26core_utils_FunctionPointerIhA3_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b084      	sub	sp, #16
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	60b9      	str	r1, [r7, #8]
 8019e3e:	4639      	mov	r1, r7
 8019e40:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019e44:	463b      	mov	r3, r7
 8019e46:	cb0c      	ldmia	r3, {r2, r3}
 8019e48:	68b9      	ldr	r1, [r7, #8]
 8019e4a:	68f8      	ldr	r0, [r7, #12]
 8019e4c:	f000 fa64 	bl	801a318 <_ZN26core_utils_FunctionPointerIhA3_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	4618      	mov	r0, r3
 8019e54:	3710      	adds	r7, #16
 8019e56:	46bd      	mov	sp, r7
 8019e58:	bd80      	pop	{r7, pc}

08019e5a <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1EPFS0_vE>:
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8019e5a:	b580      	push	{r7, lr}
 8019e5c:	b082      	sub	sp, #8
 8019e5e:	af00      	add	r7, sp, #0
 8019e60:	6078      	str	r0, [r7, #4]
 8019e62:	6039      	str	r1, [r7, #0]
        attach(function);
 8019e64:	6839      	ldr	r1, [r7, #0]
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	f000 fa74 	bl	801a354 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachEPFS0_vE>
    }
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3708      	adds	r7, #8
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}

08019e76 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEPT_MS4_FS0_vE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8019e76:	b580      	push	{r7, lr}
 8019e78:	b084      	sub	sp, #16
 8019e7a:	af00      	add	r7, sp, #0
 8019e7c:	60f8      	str	r0, [r7, #12]
 8019e7e:	60b9      	str	r1, [r7, #8]
 8019e80:	4639      	mov	r1, r7
 8019e82:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019e86:	463b      	mov	r3, r7
 8019e88:	cb0c      	ldmia	r3, {r2, r3}
 8019e8a:	68b9      	ldr	r1, [r7, #8]
 8019e8c:	68f8      	ldr	r0, [r7, #12]
 8019e8e:	f000 fa73 	bl	801a378 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachI20TWIPR_ControlManagerEEvPT_MS4_FS0_vE>
    }
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	4618      	mov	r0, r3
 8019e96:	3710      	adds	r7, #16
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}

08019e9c <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b082      	sub	sp, #8
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
 8019ea4:	6039      	str	r1, [r7, #0]
        attach(function);
 8019ea6:	6839      	ldr	r1, [r7, #0]
 8019ea8:	6878      	ldr	r0, [r7, #4]
 8019eaa:	f000 fa83 	bl	801a3b4 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE6attachEPFvS0_E>
    }
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	3708      	adds	r7, #8
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	60f8      	str	r0, [r7, #12]
 8019ec0:	60b9      	str	r1, [r7, #8]
 8019ec2:	4639      	mov	r1, r7
 8019ec4:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019ec8:	463b      	mov	r3, r7
 8019eca:	cb0c      	ldmia	r3, {r2, r3}
 8019ecc:	68b9      	ldr	r1, [r7, #8]
 8019ece:	68f8      	ldr	r0, [r7, #12]
 8019ed0:	f000 fa82 	bl	801a3d8 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE6attachI15TWIPR_SequencerEEvPT_MS4_FvS0_E>
    }
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3710      	adds	r7, #16
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bd80      	pop	{r7, pc}

08019ede <_ZN26core_utils_FunctionPointerIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8019ede:	b580      	push	{r7, lr}
 8019ee0:	b084      	sub	sp, #16
 8019ee2:	af00      	add	r7, sp, #0
 8019ee4:	60f8      	str	r0, [r7, #12]
 8019ee6:	60b9      	str	r1, [r7, #8]
 8019ee8:	4639      	mov	r1, r7
 8019eea:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019eee:	463b      	mov	r3, r7
 8019ef0:	cb0c      	ldmia	r3, {r2, r3}
 8019ef2:	68b9      	ldr	r1, [r7, #8]
 8019ef4:	68f8      	ldr	r0, [r7, #12]
 8019ef6:	f000 fa8d 	bl	801a414 <_ZN26core_utils_FunctionPointerIvtE6attachI15TWIPR_SequencerEEvPT_MS3_FvtE>
    }
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	4618      	mov	r0, r3
 8019efe:	3710      	adds	r7, #16
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}

08019f04 <_ZN26core_utils_FunctionPointerIvvEC1I15TWIPR_SequencerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b084      	sub	sp, #16
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	60f8      	str	r0, [r7, #12]
 8019f0c:	60b9      	str	r1, [r7, #8]
 8019f0e:	4639      	mov	r1, r7
 8019f10:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8019f14:	463b      	mov	r3, r7
 8019f16:	cb0c      	ldmia	r3, {r2, r3}
 8019f18:	68b9      	ldr	r1, [r7, #8]
 8019f1a:	68f8      	ldr	r0, [r7, #12]
 8019f1c:	f000 fa98 	bl	801a450 <_ZN26core_utils_FunctionPointerIvvE6attachI15TWIPR_SequencerEEvPT_MS3_FvvE>
    }
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	4618      	mov	r0, r3
 8019f24:	3710      	adds	r7, #16
 8019f26:	46bd      	mov	sp, r7
 8019f28:	bd80      	pop	{r7, pc}

08019f2a <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 8019f2a:	b480      	push	{r7}
 8019f2c:	b083      	sub	sp, #12
 8019f2e:	af00      	add	r7, sp, #0
 8019f30:	6078      	str	r0, [r7, #4]
 8019f32:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	683a      	ldr	r2, [r7, #0]
 8019f38:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	615a      	str	r2, [r3, #20]
    }
 8019f40:	bf00      	nop
 8019f42:	370c      	adds	r7, #12
 8019f44:	46bd      	mov	sp, r7
 8019f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f4a:	4770      	bx	lr

08019f4c <_ZN26core_utils_FunctionPointerImvE6attachEPFmvE>:
    void attach(R (*function)(void)) {
 8019f4c:	b480      	push	{r7}
 8019f4e:	b083      	sub	sp, #12
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
 8019f54:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	683a      	ldr	r2, [r7, #0]
 8019f5a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	615a      	str	r2, [r3, #20]
    }
 8019f62:	bf00      	nop
 8019f64:	370c      	adds	r7, #12
 8019f66:	46bd      	mov	sp, r7
 8019f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6c:	4770      	bx	lr

08019f6e <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 8019f6e:	b480      	push	{r7}
 8019f70:	b083      	sub	sp, #12
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	6078      	str	r0, [r7, #4]
 8019f76:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	683a      	ldr	r2, [r7, #0]
 8019f7c:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	2200      	movs	r2, #0
 8019f82:	615a      	str	r2, [r3, #20]
    }
 8019f84:	bf00      	nop
 8019f86:	370c      	adds	r7, #12
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8e:	4770      	bx	lr

08019f90 <_ZN26core_utils_FunctionPointerIhhE6attachEPFhhE>:
    void attach(R (*function)(A1)) {
 8019f90:	b480      	push	{r7}
 8019f92:	b083      	sub	sp, #12
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	6078      	str	r0, [r7, #4]
 8019f98:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	683a      	ldr	r2, [r7, #0]
 8019f9e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	615a      	str	r2, [r3, #20]
    }
 8019fa6:	bf00      	nop
 8019fa8:	370c      	adds	r7, #12
 8019faa:	46bd      	mov	sp, r7
 8019fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb0:	4770      	bx	lr
	...

08019fb4 <_ZN26core_utils_FunctionPointerIhhE6attachI14TWIPR_FirmwareEEvPT_MS3_FhhE>:
    void attach(T *object, R (T::*member)(A1)) {
 8019fb4:	b480      	push	{r7}
 8019fb6:	b085      	sub	sp, #20
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	60f8      	str	r0, [r7, #12]
 8019fbc:	60b9      	str	r1, [r7, #8]
 8019fbe:	4639      	mov	r1, r7
 8019fc0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	68ba      	ldr	r2, [r7, #8]
 8019fc8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	3304      	adds	r3, #4
 8019fce:	461a      	mov	r2, r3
 8019fd0:	463b      	mov	r3, r7
 8019fd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019fd6:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	4a03      	ldr	r2, [pc, #12]	@ (8019fec <_ZN26core_utils_FunctionPointerIhhE6attachI14TWIPR_FirmwareEEvPT_MS3_FhhE+0x38>)
 8019fde:	615a      	str	r2, [r3, #20]
    }
 8019fe0:	bf00      	nop
 8019fe2:	3714      	adds	r7, #20
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fea:	4770      	bx	lr
 8019fec:	0801a48d 	.word	0x0801a48d

08019ff0 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 8019ff0:	b480      	push	{r7}
 8019ff2:	b083      	sub	sp, #12
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	683a      	ldr	r2, [r7, #0]
 8019ffe:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	2200      	movs	r2, #0
 801a004:	615a      	str	r2, [r3, #20]
    }
 801a006:	bf00      	nop
 801a008:	370c      	adds	r7, #12
 801a00a:	46bd      	mov	sp, r7
 801a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a010:	4770      	bx	lr
	...

0801a014 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachI19RobotControl_BuzzerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a014:	b480      	push	{r7}
 801a016:	b085      	sub	sp, #20
 801a018:	af00      	add	r7, sp, #0
 801a01a:	60f8      	str	r0, [r7, #12]
 801a01c:	60b9      	str	r1, [r7, #8]
 801a01e:	4639      	mov	r1, r7
 801a020:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	68ba      	ldr	r2, [r7, #8]
 801a028:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	3304      	adds	r3, #4
 801a02e:	461a      	mov	r2, r3
 801a030:	463b      	mov	r3, r7
 801a032:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a036:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	4a03      	ldr	r2, [pc, #12]	@ (801a04c <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE6attachI19RobotControl_BuzzerEEvPT_MS4_FvS0_E+0x38>)
 801a03e:	615a      	str	r2, [r3, #20]
    }
 801a040:	bf00      	nop
 801a042:	3714      	adds	r7, #20
 801a044:	46bd      	mov	sp, r7
 801a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04a:	4770      	bx	lr
 801a04c:	0801a4e7 	.word	0x0801a4e7

0801a050 <_ZN26core_utils_FunctionPointerIhvE6attachEPFhvE>:
    void attach(R (*function)(void)) {
 801a050:	b480      	push	{r7}
 801a052:	b083      	sub	sp, #12
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
 801a058:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	683a      	ldr	r2, [r7, #0]
 801a05e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2200      	movs	r2, #0
 801a064:	615a      	str	r2, [r3, #20]
    }
 801a066:	bf00      	nop
 801a068:	370c      	adds	r7, #12
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr

0801a072 <_ZN26core_utils_FunctionPointerIffE6attachEPFffE>:
    void attach(R (*function)(A1)) {
 801a072:	b480      	push	{r7}
 801a074:	b083      	sub	sp, #12
 801a076:	af00      	add	r7, sp, #0
 801a078:	6078      	str	r0, [r7, #4]
 801a07a:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	683a      	ldr	r2, [r7, #0]
 801a080:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	2200      	movs	r2, #0
 801a086:	615a      	str	r2, [r3, #20]
    }
 801a088:	bf00      	nop
 801a08a:	370c      	adds	r7, #12
 801a08c:	46bd      	mov	sp, r7
 801a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a092:	4770      	bx	lr

0801a094 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801a094:	b480      	push	{r7}
 801a096:	b083      	sub	sp, #12
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
 801a09c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	683a      	ldr	r2, [r7, #0]
 801a0a2:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	615a      	str	r2, [r3, #20]
    }
 801a0aa:	bf00      	nop
 801a0ac:	370c      	adds	r7, #12
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b4:	4770      	bx	lr
	...

0801a0b8 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE6attachI21RobotControl_ExtenderEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a0b8:	b480      	push	{r7}
 801a0ba:	b085      	sub	sp, #20
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	60f8      	str	r0, [r7, #12]
 801a0c0:	60b9      	str	r1, [r7, #8]
 801a0c2:	4639      	mov	r1, r7
 801a0c4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	68ba      	ldr	r2, [r7, #8]
 801a0cc:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	3304      	adds	r3, #4
 801a0d2:	461a      	mov	r2, r3
 801a0d4:	463b      	mov	r3, r7
 801a0d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a0da:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	4a03      	ldr	r2, [pc, #12]	@ (801a0f0 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE6attachI21RobotControl_ExtenderEEvPT_MS4_FvS0_E+0x38>)
 801a0e2:	615a      	str	r2, [r3, #20]
    }
 801a0e4:	bf00      	nop
 801a0e6:	3714      	adds	r7, #20
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ee:	4770      	bx	lr
 801a0f0:	0801a541 	.word	0x0801a541

0801a0f4 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 801a0f4:	b480      	push	{r7}
 801a0f6:	b083      	sub	sp, #12
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	6078      	str	r0, [r7, #4]
 801a0fc:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	683a      	ldr	r2, [r7, #0]
 801a102:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	2200      	movs	r2, #0
 801a108:	615a      	str	r2, [r3, #20]
    }
 801a10a:	bf00      	nop
 801a10c:	370c      	adds	r7, #12
 801a10e:	46bd      	mov	sp, r7
 801a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a114:	4770      	bx	lr

0801a116 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 801a116:	b480      	push	{r7}
 801a118:	b083      	sub	sp, #12
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	6078      	str	r0, [r7, #4]
 801a11e:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	683a      	ldr	r2, [r7, #0]
 801a124:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	2200      	movs	r2, #0
 801a12a:	615a      	str	r2, [r3, #20]
    }
 801a12c:	bf00      	nop
 801a12e:	370c      	adds	r7, #12
 801a130:	46bd      	mov	sp, r7
 801a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a136:	4770      	bx	lr

0801a138 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a138:	b480      	push	{r7}
 801a13a:	b085      	sub	sp, #20
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	60f8      	str	r0, [r7, #12]
 801a140:	60b9      	str	r1, [r7, #8]
 801a142:	4639      	mov	r1, r7
 801a144:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	68ba      	ldr	r2, [r7, #8]
 801a14c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	3304      	adds	r3, #4
 801a152:	461a      	mov	r2, r3
 801a154:	463b      	mov	r3, r7
 801a156:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a15a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	4a03      	ldr	r2, [pc, #12]	@ (801a170 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 801a162:	615a      	str	r2, [r3, #20]
    }
 801a164:	bf00      	nop
 801a166:	3714      	adds	r7, #20
 801a168:	46bd      	mov	sp, r7
 801a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a16e:	4770      	bx	lr
 801a170:	0801a595 	.word	0x0801a595

0801a174 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 801a174:	b480      	push	{r7}
 801a176:	b083      	sub	sp, #12
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
 801a17c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	683a      	ldr	r2, [r7, #0]
 801a182:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2200      	movs	r2, #0
 801a188:	615a      	str	r2, [r3, #20]
    }
 801a18a:	bf00      	nop
 801a18c:	370c      	adds	r7, #12
 801a18e:	46bd      	mov	sp, r7
 801a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a194:	4770      	bx	lr
	...

0801a198 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 801a198:	b480      	push	{r7}
 801a19a:	b085      	sub	sp, #20
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	60f8      	str	r0, [r7, #12]
 801a1a0:	60b9      	str	r1, [r7, #8]
 801a1a2:	4639      	mov	r1, r7
 801a1a4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	68ba      	ldr	r2, [r7, #8]
 801a1ac:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	3304      	adds	r3, #4
 801a1b2:	461a      	mov	r2, r3
 801a1b4:	463b      	mov	r3, r7
 801a1b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1ba:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	4a03      	ldr	r2, [pc, #12]	@ (801a1d0 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 801a1c2:	615a      	str	r2, [r3, #20]
    }
 801a1c4:	bf00      	nop
 801a1c6:	3714      	adds	r7, #20
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ce:	4770      	bx	lr
 801a1d0:	0801a5ef 	.word	0x0801a5ef

0801a1d4 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801a1d4:	b480      	push	{r7}
 801a1d6:	b083      	sub	sp, #12
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
 801a1dc:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	683a      	ldr	r2, [r7, #0]
 801a1e2:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	615a      	str	r2, [r3, #20]
    }
 801a1ea:	bf00      	nop
 801a1ec:	370c      	adds	r7, #12
 801a1ee:	46bd      	mov	sp, r7
 801a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f4:	4770      	bx	lr
	...

0801a1f8 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a1f8:	b480      	push	{r7}
 801a1fa:	b085      	sub	sp, #20
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	60f8      	str	r0, [r7, #12]
 801a200:	60b9      	str	r1, [r7, #8]
 801a202:	4639      	mov	r1, r7
 801a204:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	68ba      	ldr	r2, [r7, #8]
 801a20c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	3304      	adds	r3, #4
 801a212:	461a      	mov	r2, r3
 801a214:	463b      	mov	r3, r7
 801a216:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a21a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	4a03      	ldr	r2, [pc, #12]	@ (801a230 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 801a222:	615a      	str	r2, [r3, #20]
    }
 801a224:	bf00      	nop
 801a226:	3714      	adds	r7, #20
 801a228:	46bd      	mov	sp, r7
 801a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22e:	4770      	bx	lr
 801a230:	0801a645 	.word	0x0801a645

0801a234 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801a234:	b480      	push	{r7}
 801a236:	b083      	sub	sp, #12
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
 801a23c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	683a      	ldr	r2, [r7, #0]
 801a242:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	2200      	movs	r2, #0
 801a248:	615a      	str	r2, [r3, #20]
    }
 801a24a:	bf00      	nop
 801a24c:	370c      	adds	r7, #12
 801a24e:	46bd      	mov	sp, r7
 801a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a254:	4770      	bx	lr
	...

0801a258 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a258:	b480      	push	{r7}
 801a25a:	b085      	sub	sp, #20
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	60f8      	str	r0, [r7, #12]
 801a260:	60b9      	str	r1, [r7, #8]
 801a262:	4639      	mov	r1, r7
 801a264:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	68ba      	ldr	r2, [r7, #8]
 801a26c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	3304      	adds	r3, #4
 801a272:	461a      	mov	r2, r3
 801a274:	463b      	mov	r3, r7
 801a276:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a27a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	4a03      	ldr	r2, [pc, #12]	@ (801a290 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 801a282:	615a      	str	r2, [r3, #20]
    }
 801a284:	bf00      	nop
 801a286:	3714      	adds	r7, #20
 801a288:	46bd      	mov	sp, r7
 801a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28e:	4770      	bx	lr
 801a290:	0801a6b7 	.word	0x0801a6b7

0801a294 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801a294:	b480      	push	{r7}
 801a296:	b083      	sub	sp, #12
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	683a      	ldr	r2, [r7, #0]
 801a2a2:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	615a      	str	r2, [r3, #20]
    }
 801a2aa:	bf00      	nop
 801a2ac:	370c      	adds	r7, #12
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b4:	4770      	bx	lr
	...

0801a2b8 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a2b8:	b480      	push	{r7}
 801a2ba:	b085      	sub	sp, #20
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	4639      	mov	r1, r7
 801a2c4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	68ba      	ldr	r2, [r7, #8]
 801a2cc:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	3304      	adds	r3, #4
 801a2d2:	461a      	mov	r2, r3
 801a2d4:	463b      	mov	r3, r7
 801a2d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a2da:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	4a03      	ldr	r2, [pc, #12]	@ (801a2f0 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 801a2e2:	615a      	str	r2, [r3, #20]
    }
 801a2e4:	bf00      	nop
 801a2e6:	3714      	adds	r7, #20
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ee:	4770      	bx	lr
 801a2f0:	0801a729 	.word	0x0801a729

0801a2f4 <_ZN26core_utils_FunctionPointerIhA3_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 801a2f4:	b480      	push	{r7}
 801a2f6:	b083      	sub	sp, #12
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
 801a2fc:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	683a      	ldr	r2, [r7, #0]
 801a302:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2200      	movs	r2, #0
 801a308:	615a      	str	r2, [r3, #20]
    }
 801a30a:	bf00      	nop
 801a30c:	370c      	adds	r7, #12
 801a30e:	46bd      	mov	sp, r7
 801a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a314:	4770      	bx	lr
	...

0801a318 <_ZN26core_utils_FunctionPointerIhA3_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 801a318:	b480      	push	{r7}
 801a31a:	b085      	sub	sp, #20
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	60f8      	str	r0, [r7, #12]
 801a320:	60b9      	str	r1, [r7, #8]
 801a322:	4639      	mov	r1, r7
 801a324:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	68ba      	ldr	r2, [r7, #8]
 801a32c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	3304      	adds	r3, #4
 801a332:	461a      	mov	r2, r3
 801a334:	463b      	mov	r3, r7
 801a336:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a33a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	4a03      	ldr	r2, [pc, #12]	@ (801a350 <_ZN26core_utils_FunctionPointerIhA3_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 801a342:	615a      	str	r2, [r3, #20]
    }
 801a344:	bf00      	nop
 801a346:	3714      	adds	r7, #20
 801a348:	46bd      	mov	sp, r7
 801a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a34e:	4770      	bx	lr
 801a350:	0801a79b 	.word	0x0801a79b

0801a354 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachEPFS0_vE>:
    void attach(R (*function)(void)) {
 801a354:	b480      	push	{r7}
 801a356:	b083      	sub	sp, #12
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
 801a35c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	683a      	ldr	r2, [r7, #0]
 801a362:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	2200      	movs	r2, #0
 801a368:	615a      	str	r2, [r3, #20]
    }
 801a36a:	bf00      	nop
 801a36c:	370c      	adds	r7, #12
 801a36e:	46bd      	mov	sp, r7
 801a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a374:	4770      	bx	lr
	...

0801a378 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachI20TWIPR_ControlManagerEEvPT_MS4_FS0_vE>:
    void attach(T *object, R (T::*member)(void)) {
 801a378:	b480      	push	{r7}
 801a37a:	b085      	sub	sp, #20
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	60f8      	str	r0, [r7, #12]
 801a380:	60b9      	str	r1, [r7, #8]
 801a382:	4639      	mov	r1, r7
 801a384:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	68ba      	ldr	r2, [r7, #8]
 801a38c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	3304      	adds	r3, #4
 801a392:	461a      	mov	r2, r3
 801a394:	463b      	mov	r3, r7
 801a396:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a39a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	4a03      	ldr	r2, [pc, #12]	@ (801a3b0 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE6attachI20TWIPR_ControlManagerEEvPT_MS4_FS0_vE+0x38>)
 801a3a2:	615a      	str	r2, [r3, #20]
    }
 801a3a4:	bf00      	nop
 801a3a6:	3714      	adds	r7, #20
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ae:	4770      	bx	lr
 801a3b0:	0801a7f1 	.word	0x0801a7f1

0801a3b4 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801a3b4:	b480      	push	{r7}
 801a3b6:	b083      	sub	sp, #12
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
 801a3bc:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	683a      	ldr	r2, [r7, #0]
 801a3c2:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	615a      	str	r2, [r3, #20]
    }
 801a3ca:	bf00      	nop
 801a3cc:	370c      	adds	r7, #12
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d4:	4770      	bx	lr
	...

0801a3d8 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE6attachI15TWIPR_SequencerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801a3d8:	b480      	push	{r7}
 801a3da:	b085      	sub	sp, #20
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	4639      	mov	r1, r7
 801a3e4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	68ba      	ldr	r2, [r7, #8]
 801a3ec:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	3304      	adds	r3, #4
 801a3f2:	461a      	mov	r2, r3
 801a3f4:	463b      	mov	r3, r7
 801a3f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a3fa:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	4a03      	ldr	r2, [pc, #12]	@ (801a410 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE6attachI15TWIPR_SequencerEEvPT_MS4_FvS0_E+0x38>)
 801a402:	615a      	str	r2, [r3, #20]
    }
 801a404:	bf00      	nop
 801a406:	3714      	adds	r7, #20
 801a408:	46bd      	mov	sp, r7
 801a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40e:	4770      	bx	lr
 801a410:	0801a849 	.word	0x0801a849

0801a414 <_ZN26core_utils_FunctionPointerIvtE6attachI15TWIPR_SequencerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 801a414:	b480      	push	{r7}
 801a416:	b085      	sub	sp, #20
 801a418:	af00      	add	r7, sp, #0
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	60b9      	str	r1, [r7, #8]
 801a41e:	4639      	mov	r1, r7
 801a420:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	68ba      	ldr	r2, [r7, #8]
 801a428:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	3304      	adds	r3, #4
 801a42e:	461a      	mov	r2, r3
 801a430:	463b      	mov	r3, r7
 801a432:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a436:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	4a03      	ldr	r2, [pc, #12]	@ (801a44c <_ZN26core_utils_FunctionPointerIvtE6attachI15TWIPR_SequencerEEvPT_MS3_FvtE+0x38>)
 801a43e:	615a      	str	r2, [r3, #20]
    }
 801a440:	bf00      	nop
 801a442:	3714      	adds	r7, #20
 801a444:	46bd      	mov	sp, r7
 801a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44a:	4770      	bx	lr
 801a44c:	0801a8af 	.word	0x0801a8af

0801a450 <_ZN26core_utils_FunctionPointerIvvE6attachI15TWIPR_SequencerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 801a450:	b480      	push	{r7}
 801a452:	b085      	sub	sp, #20
 801a454:	af00      	add	r7, sp, #0
 801a456:	60f8      	str	r0, [r7, #12]
 801a458:	60b9      	str	r1, [r7, #8]
 801a45a:	4639      	mov	r1, r7
 801a45c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	68ba      	ldr	r2, [r7, #8]
 801a464:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	3304      	adds	r3, #4
 801a46a:	461a      	mov	r2, r3
 801a46c:	463b      	mov	r3, r7
 801a46e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a472:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	4a03      	ldr	r2, [pc, #12]	@ (801a488 <_ZN26core_utils_FunctionPointerIvvE6attachI15TWIPR_SequencerEEvPT_MS3_FvvE+0x38>)
 801a47a:	615a      	str	r2, [r3, #20]
    }
 801a47c:	bf00      	nop
 801a47e:	3714      	adds	r7, #20
 801a480:	46bd      	mov	sp, r7
 801a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a486:	4770      	bx	lr
 801a488:	0801a907 	.word	0x0801a907

0801a48c <_ZN26core_utils_FunctionPointerIhhE12membercallerI14TWIPR_FirmwareEEhPvPjh>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b086      	sub	sp, #24
 801a490:	af00      	add	r7, sp, #0
 801a492:	60f8      	str	r0, [r7, #12]
 801a494:	60b9      	str	r1, [r7, #8]
 801a496:	4613      	mov	r3, r2
 801a498:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	105b      	asrs	r3, r3, #1
 801a4a8:	461a      	mov	r2, r3
 801a4aa:	697b      	ldr	r3, [r7, #20]
 801a4ac:	1898      	adds	r0, r3, r2
 801a4ae:	693b      	ldr	r3, [r7, #16]
 801a4b0:	685b      	ldr	r3, [r3, #4]
 801a4b2:	f003 0301 	and.w	r3, r3, #1
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d00b      	beq.n	801a4d2 <_ZN26core_utils_FunctionPointerIhhE12membercallerI14TWIPR_FirmwareEEhPvPjh+0x46>
 801a4ba:	693b      	ldr	r3, [r7, #16]
 801a4bc:	685b      	ldr	r3, [r3, #4]
 801a4be:	105b      	asrs	r3, r3, #1
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	697b      	ldr	r3, [r7, #20]
 801a4c4:	4413      	add	r3, r2
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	693a      	ldr	r2, [r7, #16]
 801a4ca:	6812      	ldr	r2, [r2, #0]
 801a4cc:	4413      	add	r3, r2
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	e001      	b.n	801a4d6 <_ZN26core_utils_FunctionPointerIhhE12membercallerI14TWIPR_FirmwareEEhPvPjh+0x4a>
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	79fa      	ldrb	r2, [r7, #7]
 801a4d8:	4611      	mov	r1, r2
 801a4da:	4798      	blx	r3
 801a4dc:	4603      	mov	r3, r0
    }
 801a4de:	4618      	mov	r0, r3
 801a4e0:	3718      	adds	r7, #24
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bd80      	pop	{r7, pc}

0801a4e6 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE12membercallerI19RobotControl_BuzzerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a4e6:	b580      	push	{r7, lr}
 801a4e8:	b086      	sub	sp, #24
 801a4ea:	af00      	add	r7, sp, #0
 801a4ec:	60f8      	str	r0, [r7, #12]
 801a4ee:	60b9      	str	r1, [r7, #8]
 801a4f0:	4639      	mov	r1, r7
 801a4f2:	e881 000c 	stmia.w	r1, {r2, r3}
        T* o = static_cast<T*>(object);
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a4fa:	68bb      	ldr	r3, [r7, #8]
 801a4fc:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a4fe:	693b      	ldr	r3, [r7, #16]
 801a500:	685b      	ldr	r3, [r3, #4]
 801a502:	105b      	asrs	r3, r3, #1
 801a504:	461a      	mov	r2, r3
 801a506:	697b      	ldr	r3, [r7, #20]
 801a508:	1898      	adds	r0, r3, r2
 801a50a:	693b      	ldr	r3, [r7, #16]
 801a50c:	685b      	ldr	r3, [r3, #4]
 801a50e:	f003 0301 	and.w	r3, r3, #1
 801a512:	2b00      	cmp	r3, #0
 801a514:	d00b      	beq.n	801a52e <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE12membercallerI19RobotControl_BuzzerEEvPvPjS0_+0x48>
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	105b      	asrs	r3, r3, #1
 801a51c:	461a      	mov	r2, r3
 801a51e:	697b      	ldr	r3, [r7, #20]
 801a520:	4413      	add	r3, r2
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	693a      	ldr	r2, [r7, #16]
 801a526:	6812      	ldr	r2, [r2, #0]
 801a528:	4413      	add	r3, r2
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	e001      	b.n	801a532 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE12membercallerI19RobotControl_BuzzerEEvPvPjS0_+0x4c>
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	463a      	mov	r2, r7
 801a534:	ca06      	ldmia	r2, {r1, r2}
 801a536:	4798      	blx	r3
 801a538:	bf00      	nop
    }
 801a53a:	3718      	adds	r7, #24
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}

0801a540 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE12membercallerI21RobotControl_ExtenderEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a540:	b580      	push	{r7, lr}
 801a542:	b086      	sub	sp, #24
 801a544:	af00      	add	r7, sp, #0
 801a546:	60f8      	str	r0, [r7, #12]
 801a548:	60b9      	str	r1, [r7, #8]
 801a54a:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a554:	693b      	ldr	r3, [r7, #16]
 801a556:	685b      	ldr	r3, [r3, #4]
 801a558:	105b      	asrs	r3, r3, #1
 801a55a:	461a      	mov	r2, r3
 801a55c:	697b      	ldr	r3, [r7, #20]
 801a55e:	1898      	adds	r0, r3, r2
 801a560:	693b      	ldr	r3, [r7, #16]
 801a562:	685b      	ldr	r3, [r3, #4]
 801a564:	f003 0301 	and.w	r3, r3, #1
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d00b      	beq.n	801a584 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE12membercallerI21RobotControl_ExtenderEEvPvPjS0_+0x44>
 801a56c:	693b      	ldr	r3, [r7, #16]
 801a56e:	685b      	ldr	r3, [r3, #4]
 801a570:	105b      	asrs	r3, r3, #1
 801a572:	461a      	mov	r2, r3
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	4413      	add	r3, r2
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	693a      	ldr	r2, [r7, #16]
 801a57c:	6812      	ldr	r2, [r2, #0]
 801a57e:	4413      	add	r3, r2
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	e001      	b.n	801a588 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE12membercallerI21RobotControl_ExtenderEEvPvPjS0_+0x48>
 801a584:	693b      	ldr	r3, [r7, #16]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	6879      	ldr	r1, [r7, #4]
 801a58a:	4798      	blx	r3
 801a58c:	bf00      	nop
    }
 801a58e:	3718      	adds	r7, #24
 801a590:	46bd      	mov	sp, r7
 801a592:	bd80      	pop	{r7, pc}

0801a594 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a594:	b580      	push	{r7, lr}
 801a596:	b086      	sub	sp, #24
 801a598:	af00      	add	r7, sp, #0
 801a59a:	60f8      	str	r0, [r7, #12]
 801a59c:	60b9      	str	r1, [r7, #8]
 801a59e:	4613      	mov	r3, r2
 801a5a0:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a5a6:	68bb      	ldr	r3, [r7, #8]
 801a5a8:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	685b      	ldr	r3, [r3, #4]
 801a5ae:	105b      	asrs	r3, r3, #1
 801a5b0:	461a      	mov	r2, r3
 801a5b2:	697b      	ldr	r3, [r7, #20]
 801a5b4:	1898      	adds	r0, r3, r2
 801a5b6:	693b      	ldr	r3, [r7, #16]
 801a5b8:	685b      	ldr	r3, [r3, #4]
 801a5ba:	f003 0301 	and.w	r3, r3, #1
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d00b      	beq.n	801a5da <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x46>
 801a5c2:	693b      	ldr	r3, [r7, #16]
 801a5c4:	685b      	ldr	r3, [r3, #4]
 801a5c6:	105b      	asrs	r3, r3, #1
 801a5c8:	461a      	mov	r2, r3
 801a5ca:	697b      	ldr	r3, [r7, #20]
 801a5cc:	4413      	add	r3, r2
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	693a      	ldr	r2, [r7, #16]
 801a5d2:	6812      	ldr	r2, [r2, #0]
 801a5d4:	4413      	add	r3, r2
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	e001      	b.n	801a5de <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4a>
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	79fa      	ldrb	r2, [r7, #7]
 801a5e0:	4611      	mov	r1, r2
 801a5e2:	4798      	blx	r3
 801a5e4:	4603      	mov	r3, r0
    }
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3718      	adds	r7, #24
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}

0801a5ee <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a5ee:	b580      	push	{r7, lr}
 801a5f0:	b086      	sub	sp, #24
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	60f8      	str	r0, [r7, #12]
 801a5f6:	60b9      	str	r1, [r7, #8]
 801a5f8:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	105b      	asrs	r3, r3, #1
 801a608:	461a      	mov	r2, r3
 801a60a:	697b      	ldr	r3, [r7, #20]
 801a60c:	1898      	adds	r0, r3, r2
 801a60e:	693b      	ldr	r3, [r7, #16]
 801a610:	685b      	ldr	r3, [r3, #4]
 801a612:	f003 0301 	and.w	r3, r3, #1
 801a616:	2b00      	cmp	r3, #0
 801a618:	d00b      	beq.n	801a632 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 801a61a:	693b      	ldr	r3, [r7, #16]
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	105b      	asrs	r3, r3, #1
 801a620:	461a      	mov	r2, r3
 801a622:	697b      	ldr	r3, [r7, #20]
 801a624:	4413      	add	r3, r2
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	693a      	ldr	r2, [r7, #16]
 801a62a:	6812      	ldr	r2, [r2, #0]
 801a62c:	4413      	add	r3, r2
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	e001      	b.n	801a636 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	6879      	ldr	r1, [r7, #4]
 801a638:	4798      	blx	r3
 801a63a:	4603      	mov	r3, r0
    }
 801a63c:	4618      	mov	r0, r3
 801a63e:	3718      	adds	r7, #24
 801a640:	46bd      	mov	sp, r7
 801a642:	bd80      	pop	{r7, pc}

0801a644 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a644:	b580      	push	{r7, lr}
 801a646:	b086      	sub	sp, #24
 801a648:	af00      	add	r7, sp, #0
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	eeb0 7a40 	vmov.f32	s14, s0
 801a652:	eef0 7a60 	vmov.f32	s15, s1
 801a656:	ed87 7a00 	vstr	s14, [r7]
 801a65a:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a662:	68bb      	ldr	r3, [r7, #8]
 801a664:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a666:	693b      	ldr	r3, [r7, #16]
 801a668:	685b      	ldr	r3, [r3, #4]
 801a66a:	105b      	asrs	r3, r3, #1
 801a66c:	461a      	mov	r2, r3
 801a66e:	697b      	ldr	r3, [r7, #20]
 801a670:	1899      	adds	r1, r3, r2
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	f003 0301 	and.w	r3, r3, #1
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d00b      	beq.n	801a696 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	105b      	asrs	r3, r3, #1
 801a684:	461a      	mov	r2, r3
 801a686:	697b      	ldr	r3, [r7, #20]
 801a688:	4413      	add	r3, r2
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	693a      	ldr	r2, [r7, #16]
 801a68e:	6812      	ldr	r2, [r2, #0]
 801a690:	4413      	add	r3, r2
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	e001      	b.n	801a69a <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 801a696:	693b      	ldr	r3, [r7, #16]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	ed97 7a00 	vldr	s14, [r7]
 801a69e:	edd7 7a01 	vldr	s15, [r7, #4]
 801a6a2:	eeb0 0a47 	vmov.f32	s0, s14
 801a6a6:	eef0 0a67 	vmov.f32	s1, s15
 801a6aa:	4608      	mov	r0, r1
 801a6ac:	4798      	blx	r3
 801a6ae:	bf00      	nop
    }
 801a6b0:	3718      	adds	r7, #24
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	bd80      	pop	{r7, pc}

0801a6b6 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a6b6:	b580      	push	{r7, lr}
 801a6b8:	b086      	sub	sp, #24
 801a6ba:	af00      	add	r7, sp, #0
 801a6bc:	60f8      	str	r0, [r7, #12]
 801a6be:	60b9      	str	r1, [r7, #8]
 801a6c0:	eeb0 7a40 	vmov.f32	s14, s0
 801a6c4:	eef0 7a60 	vmov.f32	s15, s1
 801a6c8:	ed87 7a00 	vstr	s14, [r7]
 801a6cc:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a6d4:	68bb      	ldr	r3, [r7, #8]
 801a6d6:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a6d8:	693b      	ldr	r3, [r7, #16]
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	105b      	asrs	r3, r3, #1
 801a6de:	461a      	mov	r2, r3
 801a6e0:	697b      	ldr	r3, [r7, #20]
 801a6e2:	1899      	adds	r1, r3, r2
 801a6e4:	693b      	ldr	r3, [r7, #16]
 801a6e6:	685b      	ldr	r3, [r3, #4]
 801a6e8:	f003 0301 	and.w	r3, r3, #1
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d00b      	beq.n	801a708 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 801a6f0:	693b      	ldr	r3, [r7, #16]
 801a6f2:	685b      	ldr	r3, [r3, #4]
 801a6f4:	105b      	asrs	r3, r3, #1
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	4413      	add	r3, r2
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	693a      	ldr	r2, [r7, #16]
 801a700:	6812      	ldr	r2, [r2, #0]
 801a702:	4413      	add	r3, r2
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	e001      	b.n	801a70c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 801a708:	693b      	ldr	r3, [r7, #16]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	ed97 7a00 	vldr	s14, [r7]
 801a710:	edd7 7a01 	vldr	s15, [r7, #4]
 801a714:	eeb0 0a47 	vmov.f32	s0, s14
 801a718:	eef0 0a67 	vmov.f32	s1, s15
 801a71c:	4608      	mov	r0, r1
 801a71e:	4798      	blx	r3
 801a720:	bf00      	nop
    }
 801a722:	3718      	adds	r7, #24
 801a724:	46bd      	mov	sp, r7
 801a726:	bd80      	pop	{r7, pc}

0801a728 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a728:	b580      	push	{r7, lr}
 801a72a:	b086      	sub	sp, #24
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	60f8      	str	r0, [r7, #12]
 801a730:	60b9      	str	r1, [r7, #8]
 801a732:	eeb0 7a40 	vmov.f32	s14, s0
 801a736:	eef0 7a60 	vmov.f32	s15, s1
 801a73a:	ed87 7a00 	vstr	s14, [r7]
 801a73e:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a74a:	693b      	ldr	r3, [r7, #16]
 801a74c:	685b      	ldr	r3, [r3, #4]
 801a74e:	105b      	asrs	r3, r3, #1
 801a750:	461a      	mov	r2, r3
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	1899      	adds	r1, r3, r2
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	685b      	ldr	r3, [r3, #4]
 801a75a:	f003 0301 	and.w	r3, r3, #1
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d00b      	beq.n	801a77a <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 801a762:	693b      	ldr	r3, [r7, #16]
 801a764:	685b      	ldr	r3, [r3, #4]
 801a766:	105b      	asrs	r3, r3, #1
 801a768:	461a      	mov	r2, r3
 801a76a:	697b      	ldr	r3, [r7, #20]
 801a76c:	4413      	add	r3, r2
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	693a      	ldr	r2, [r7, #16]
 801a772:	6812      	ldr	r2, [r2, #0]
 801a774:	4413      	add	r3, r2
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	e001      	b.n	801a77e <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	ed97 7a00 	vldr	s14, [r7]
 801a782:	edd7 7a01 	vldr	s15, [r7, #4]
 801a786:	eeb0 0a47 	vmov.f32	s0, s14
 801a78a:	eef0 0a67 	vmov.f32	s1, s15
 801a78e:	4608      	mov	r0, r1
 801a790:	4798      	blx	r3
 801a792:	bf00      	nop
    }
 801a794:	3718      	adds	r7, #24
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}

0801a79a <_ZN26core_utils_FunctionPointerIhA3_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a79a:	b580      	push	{r7, lr}
 801a79c:	b086      	sub	sp, #24
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	60f8      	str	r0, [r7, #12]
 801a7a2:	60b9      	str	r1, [r7, #8]
 801a7a4:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a7ae:	693b      	ldr	r3, [r7, #16]
 801a7b0:	685b      	ldr	r3, [r3, #4]
 801a7b2:	105b      	asrs	r3, r3, #1
 801a7b4:	461a      	mov	r2, r3
 801a7b6:	697b      	ldr	r3, [r7, #20]
 801a7b8:	1898      	adds	r0, r3, r2
 801a7ba:	693b      	ldr	r3, [r7, #16]
 801a7bc:	685b      	ldr	r3, [r3, #4]
 801a7be:	f003 0301 	and.w	r3, r3, #1
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d00b      	beq.n	801a7de <_ZN26core_utils_FunctionPointerIhA3_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 801a7c6:	693b      	ldr	r3, [r7, #16]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	105b      	asrs	r3, r3, #1
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	697b      	ldr	r3, [r7, #20]
 801a7d0:	4413      	add	r3, r2
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	693a      	ldr	r2, [r7, #16]
 801a7d6:	6812      	ldr	r2, [r2, #0]
 801a7d8:	4413      	add	r3, r2
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	e001      	b.n	801a7e2 <_ZN26core_utils_FunctionPointerIhA3_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	6879      	ldr	r1, [r7, #4]
 801a7e4:	4798      	blx	r3
 801a7e6:	4603      	mov	r3, r0
    }
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	3718      	adds	r7, #24
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	bd80      	pop	{r7, pc}

0801a7f0 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE12membercallerI20TWIPR_ControlManagerEES0_PvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b086      	sub	sp, #24
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	60f8      	str	r0, [r7, #12]
 801a7f8:	60b9      	str	r1, [r7, #8]
 801a7fa:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801a7fc:	68bb      	ldr	r3, [r7, #8]
 801a7fe:	617b      	str	r3, [r7, #20]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	613b      	str	r3, [r7, #16]
        return (o->**m)();
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	105b      	asrs	r3, r3, #1
 801a80a:	461a      	mov	r2, r3
 801a80c:	697b      	ldr	r3, [r7, #20]
 801a80e:	1899      	adds	r1, r3, r2
 801a810:	693b      	ldr	r3, [r7, #16]
 801a812:	685b      	ldr	r3, [r3, #4]
 801a814:	f003 0301 	and.w	r3, r3, #1
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d00b      	beq.n	801a834 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE12membercallerI20TWIPR_ControlManagerEES0_PvPj+0x44>
 801a81c:	693b      	ldr	r3, [r7, #16]
 801a81e:	685b      	ldr	r3, [r3, #4]
 801a820:	105b      	asrs	r3, r3, #1
 801a822:	461a      	mov	r2, r3
 801a824:	697b      	ldr	r3, [r7, #20]
 801a826:	4413      	add	r3, r2
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	693a      	ldr	r2, [r7, #16]
 801a82c:	6812      	ldr	r2, [r2, #0]
 801a82e:	4413      	add	r3, r2
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	e001      	b.n	801a838 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE12membercallerI20TWIPR_ControlManagerEES0_PvPj+0x48>
 801a834:	693b      	ldr	r3, [r7, #16]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	68fa      	ldr	r2, [r7, #12]
 801a83a:	4610      	mov	r0, r2
 801a83c:	4798      	blx	r3
 801a83e:	bf00      	nop
    }
 801a840:	68f8      	ldr	r0, [r7, #12]
 801a842:	3718      	adds	r7, #24
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}

0801a848 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE12membercallerI15TWIPR_SequencerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a848:	b082      	sub	sp, #8
 801a84a:	b590      	push	{r4, r7, lr}
 801a84c:	b085      	sub	sp, #20
 801a84e:	af00      	add	r7, sp, #0
 801a850:	6078      	str	r0, [r7, #4]
 801a852:	6039      	str	r1, [r7, #0]
 801a854:	f107 0120 	add.w	r1, r7, #32
 801a858:	e881 000c 	stmia.w	r1, {r2, r3}
        T* o = static_cast<T*>(object);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	60fb      	str	r3, [r7, #12]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	60bb      	str	r3, [r7, #8]
        return (o->**m)(a);
 801a864:	68bb      	ldr	r3, [r7, #8]
 801a866:	685b      	ldr	r3, [r3, #4]
 801a868:	105b      	asrs	r3, r3, #1
 801a86a:	461a      	mov	r2, r3
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	1898      	adds	r0, r3, r2
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	685b      	ldr	r3, [r3, #4]
 801a874:	f003 0301 	and.w	r3, r3, #1
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d00b      	beq.n	801a894 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE12membercallerI15TWIPR_SequencerEEvPvPjS0_+0x4c>
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	685b      	ldr	r3, [r3, #4]
 801a880:	105b      	asrs	r3, r3, #1
 801a882:	461a      	mov	r2, r3
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	4413      	add	r3, r2
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	68ba      	ldr	r2, [r7, #8]
 801a88c:	6812      	ldr	r2, [r2, #0]
 801a88e:	4413      	add	r3, r2
 801a890:	681c      	ldr	r4, [r3, #0]
 801a892:	e001      	b.n	801a898 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE12membercallerI15TWIPR_SequencerEEvPvPjS0_+0x50>
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	681c      	ldr	r4, [r3, #0]
 801a898:	f107 0320 	add.w	r3, r7, #32
 801a89c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a89e:	47a0      	blx	r4
 801a8a0:	bf00      	nop
    }
 801a8a2:	3714      	adds	r7, #20
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801a8aa:	b002      	add	sp, #8
 801a8ac:	4770      	bx	lr

0801a8ae <_ZN26core_utils_FunctionPointerIvtE12membercallerI15TWIPR_SequencerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801a8ae:	b580      	push	{r7, lr}
 801a8b0:	b086      	sub	sp, #24
 801a8b2:	af00      	add	r7, sp, #0
 801a8b4:	60f8      	str	r0, [r7, #12]
 801a8b6:	60b9      	str	r1, [r7, #8]
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801a8c0:	68bb      	ldr	r3, [r7, #8]
 801a8c2:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801a8c4:	693b      	ldr	r3, [r7, #16]
 801a8c6:	685b      	ldr	r3, [r3, #4]
 801a8c8:	105b      	asrs	r3, r3, #1
 801a8ca:	461a      	mov	r2, r3
 801a8cc:	697b      	ldr	r3, [r7, #20]
 801a8ce:	1898      	adds	r0, r3, r2
 801a8d0:	693b      	ldr	r3, [r7, #16]
 801a8d2:	685b      	ldr	r3, [r3, #4]
 801a8d4:	f003 0301 	and.w	r3, r3, #1
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d00b      	beq.n	801a8f4 <_ZN26core_utils_FunctionPointerIvtE12membercallerI15TWIPR_SequencerEEvPvPjt+0x46>
 801a8dc:	693b      	ldr	r3, [r7, #16]
 801a8de:	685b      	ldr	r3, [r3, #4]
 801a8e0:	105b      	asrs	r3, r3, #1
 801a8e2:	461a      	mov	r2, r3
 801a8e4:	697b      	ldr	r3, [r7, #20]
 801a8e6:	4413      	add	r3, r2
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	693a      	ldr	r2, [r7, #16]
 801a8ec:	6812      	ldr	r2, [r2, #0]
 801a8ee:	4413      	add	r3, r2
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	e001      	b.n	801a8f8 <_ZN26core_utils_FunctionPointerIvtE12membercallerI15TWIPR_SequencerEEvPvPjt+0x4a>
 801a8f4:	693b      	ldr	r3, [r7, #16]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	88fa      	ldrh	r2, [r7, #6]
 801a8fa:	4611      	mov	r1, r2
 801a8fc:	4798      	blx	r3
 801a8fe:	bf00      	nop
    }
 801a900:	3718      	adds	r7, #24
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}

0801a906 <_ZN26core_utils_FunctionPointerIvvE12membercallerI15TWIPR_SequencerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 801a906:	b580      	push	{r7, lr}
 801a908:	b084      	sub	sp, #16
 801a90a:	af00      	add	r7, sp, #0
 801a90c:	6078      	str	r0, [r7, #4]
 801a90e:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 801a918:	68bb      	ldr	r3, [r7, #8]
 801a91a:	685b      	ldr	r3, [r3, #4]
 801a91c:	105b      	asrs	r3, r3, #1
 801a91e:	461a      	mov	r2, r3
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	1899      	adds	r1, r3, r2
 801a924:	68bb      	ldr	r3, [r7, #8]
 801a926:	685b      	ldr	r3, [r3, #4]
 801a928:	f003 0301 	and.w	r3, r3, #1
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d00b      	beq.n	801a948 <_ZN26core_utils_FunctionPointerIvvE12membercallerI15TWIPR_SequencerEEvPvPj+0x42>
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	685b      	ldr	r3, [r3, #4]
 801a934:	105b      	asrs	r3, r3, #1
 801a936:	461a      	mov	r2, r3
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	4413      	add	r3, r2
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	68ba      	ldr	r2, [r7, #8]
 801a940:	6812      	ldr	r2, [r2, #0]
 801a942:	4413      	add	r3, r2
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	e001      	b.n	801a94c <_ZN26core_utils_FunctionPointerIvvE12membercallerI15TWIPR_SequencerEEvPvPj+0x46>
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	4608      	mov	r0, r1
 801a94e:	4798      	blx	r3
 801a950:	bf00      	nop
    }
 801a952:	3710      	adds	r7, #16
 801a954:	46bd      	mov	sp, r7
 801a956:	bd80      	pop	{r7, pc}

0801a958 <_ZN14TWIPR_FirmwareD1Ev>:
typedef struct test_struct_t {
	float a;
	uint8_t b;
}test_struct_t;

class TWIPR_Firmware {
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	3358      	adds	r3, #88	@ 0x58
 801a964:	4618      	mov	r0, r3
 801a966:	f7fd fac2 	bl	8017eee <_ZN26TWIPR_CommunicationManagerD1Ev>
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	4618      	mov	r0, r3
 801a96e:	3708      	adds	r7, #8
 801a970:	46bd      	mov	sp, r7
 801a972:	bd80      	pop	{r7, pc}

0801a974 <_Z41__static_initialization_and_destruction_0ii>:
 801a974:	b580      	push	{r7, lr}
 801a976:	b0a0      	sub	sp, #128	@ 0x80
 801a978:	af02      	add	r7, sp, #8
 801a97a:	6078      	str	r0, [r7, #4]
 801a97c:	6039      	str	r1, [r7, #0]
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2b01      	cmp	r3, #1
 801a982:	f040 8124 	bne.w	801abce <_Z41__static_initialization_and_destruction_0ii+0x25a>
 801a986:	683b      	ldr	r3, [r7, #0]
 801a988:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a98c:	4293      	cmp	r3, r2
 801a98e:	f040 811e 	bne.w	801abce <_Z41__static_initialization_and_destruction_0ii+0x25a>
TWIPR_Firmware twipr_firmware;
 801a992:	4896      	ldr	r0, [pc, #600]	@ (801abec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 801a994:	f7fd fabc 	bl	8017f10 <_ZN14TWIPR_FirmwareC1Ev>
core_utils_RegisterEntry<twipr_firmware_state_t, void> regentry_read_firmware_state(&register_map, REG_ADDRESS_R_FIRMWARE_STATE, &twipr_firmware.firmware_state);
 801a998:	4b94      	ldr	r3, [pc, #592]	@ (801abec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 801a99a:	2201      	movs	r2, #1
 801a99c:	4994      	ldr	r1, [pc, #592]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801a99e:	4895      	ldr	r0, [pc, #596]	@ (801abf4 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 801a9a0:	f7fd fe5c 	bl	801865c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvEC1EP11RegisterMaphPS0_>
core_utils_RegisterEntry<uint32_t, void> regentry_read_firmware_tick(&register_map, REG_ADDRESS_R_FIRMWARE_TICK, &twipr_firmware.tick);
 801a9a4:	4b94      	ldr	r3, [pc, #592]	@ (801abf8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 801a9a6:	2202      	movs	r2, #2
 801a9a8:	4991      	ldr	r1, [pc, #580]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801a9aa:	4894      	ldr	r0, [pc, #592]	@ (801abfc <_Z41__static_initialization_and_destruction_0ii+0x288>)
 801a9ac:	f7fd fe82 	bl	80186b4 <_ZN24core_utils_RegisterEntryImvEC1EP11RegisterMaphPm>
core_utils_RegisterEntry<twipr_firmware_revision_t, void> regentry_read_firmware_revision(&register_map, REG_ADDRESS_R_FIRMWARE_REVISION, &twipr_firmware.revision);
 801a9b0:	4b93      	ldr	r3, [pc, #588]	@ (801ac00 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 801a9b2:	2203      	movs	r2, #3
 801a9b4:	498e      	ldr	r1, [pc, #568]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801a9b6:	4893      	ldr	r0, [pc, #588]	@ (801ac04 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 801a9b8:	f7fd fea8 	bl	801870c <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvEC1EP11RegisterMaphPS0_>
core_utils_RegisterEntry<uint8_t, uint8_t>regentry_f_firmware_debug(&register_map, REG_ADDRESS_F_FIRMWARE_DEBUGFUNCTION, &twipr_firmware, &TWIPR_Firmware::debug);
 801a9bc:	4b92      	ldr	r3, [pc, #584]	@ (801ac08 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 801a9be:	60bb      	str	r3, [r7, #8]
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	60fb      	str	r3, [r7, #12]
 801a9c4:	466a      	mov	r2, sp
 801a9c6:	f107 0308 	add.w	r3, r7, #8
 801a9ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a9ce:	e882 0003 	stmia.w	r2, {r0, r1}
 801a9d2:	4b86      	ldr	r3, [pc, #536]	@ (801abec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 801a9d4:	2204      	movs	r2, #4
 801a9d6:	4986      	ldr	r1, [pc, #536]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801a9d8:	488c      	ldr	r0, [pc, #560]	@ (801ac0c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 801a9da:	f7fd fee3 	bl	80187a4 <_ZN24core_utils_RegisterEntryIhhEC1I14TWIPR_FirmwareEEP11RegisterMaphPT_MS5_FhhE>
core_utils_RegisterEntry<void, buzzer_beep_struct_t>regentry_f_firmware_beep(&register_map, REG_ADDRESS_F_FIRMWARE_BEEP, &rc_buzzer, &RobotControl_Buzzer::beep);
 801a9de:	4b8c      	ldr	r3, [pc, #560]	@ (801ac10 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 801a9e0:	613b      	str	r3, [r7, #16]
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	617b      	str	r3, [r7, #20]
 801a9e6:	466a      	mov	r2, sp
 801a9e8:	f107 0310 	add.w	r3, r7, #16
 801a9ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a9f0:	e882 0003 	stmia.w	r2, {r0, r1}
 801a9f4:	4b87      	ldr	r3, [pc, #540]	@ (801ac14 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 801a9f6:	2205      	movs	r2, #5
 801a9f8:	497d      	ldr	r1, [pc, #500]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801a9fa:	4887      	ldr	r0, [pc, #540]	@ (801ac18 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 801a9fc:	f7fd ff30 	bl	8018860 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tEC1I19RobotControl_BuzzerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<uint8_t, void>regentry_r_board_revision(&register_map, REG_ADDRESS_R_BOARD_REVISION, &board_revision);
 801aa00:	4b86      	ldr	r3, [pc, #536]	@ (801ac1c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 801aa02:	2206      	movs	r2, #6
 801aa04:	497a      	ldr	r1, [pc, #488]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa06:	4886      	ldr	r0, [pc, #536]	@ (801ac20 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 801aa08:	f7fd ff68 	bl	80188dc <_ZN24core_utils_RegisterEntryIhvEC1EP11RegisterMaphPh>
core_utils_RegisterEntry<float, float>regentry_rw_max_wheel_speed(&register_map, REG_ADDRESS_RW_MAX_WHEEL_SPEED, &twipr_firmware.supervisor.config.max_wheel_speed);
 801aa0c:	4b85      	ldr	r3, [pc, #532]	@ (801ac24 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 801aa0e:	2220      	movs	r2, #32
 801aa10:	4977      	ldr	r1, [pc, #476]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa12:	4885      	ldr	r0, [pc, #532]	@ (801ac28 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 801aa14:	f7fd ff8e 	bl	8018934 <_ZN24core_utils_RegisterEntryIffEC1EP11RegisterMaphPf>
core_utils_RegisterEntry<void, rgb_color_struct_t>regentry_function_setExternalLED(&register_map, REG_ADDRESS_F_EXTERNAL_LED, &extender, &RobotControl_Extender::rgbLEDStrip_extern_setColor);
 801aa18:	4b84      	ldr	r3, [pc, #528]	@ (801ac2c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 801aa1a:	61bb      	str	r3, [r7, #24]
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	61fb      	str	r3, [r7, #28]
 801aa20:	466a      	mov	r2, sp
 801aa22:	f107 0318 	add.w	r3, r7, #24
 801aa26:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa2a:	e882 0003 	stmia.w	r2, {r0, r1}
 801aa2e:	4b80      	ldr	r3, [pc, #512]	@ (801ac30 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 801aa30:	2207      	movs	r2, #7
 801aa32:	496f      	ldr	r1, [pc, #444]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa34:	487f      	ldr	r0, [pc, #508]	@ (801ac34 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 801aa36:	f7fd ffcd 	bl	80189d4 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tEC1I21RobotControl_ExtenderEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<uint8_t, uint8_t>regentry_debug1_rw(&register_map, REG_ADDRESS_RW_DEBUG_1, &twipr_firmware.debugData.debug1);
 801aa3a:	4b7f      	ldr	r3, [pc, #508]	@ (801ac38 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 801aa3c:	2208      	movs	r2, #8
 801aa3e:	496c      	ldr	r1, [pc, #432]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa40:	487e      	ldr	r0, [pc, #504]	@ (801ac3c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 801aa42:	f7fe f805 	bl	8018a50 <_ZN24core_utils_RegisterEntryIhhEC1EP11RegisterMaphPh>
core_utils_RegisterEntry<twipr_control_mode_t, void> regentry_read_control_mode(&register_map, REG_ADDRESS_R_CONTROL_MODE, &twipr_firmware.control.mode);
 801aa46:	4b7e      	ldr	r3, [pc, #504]	@ (801ac40 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 801aa48:	2210      	movs	r2, #16
 801aa4a:	4969      	ldr	r1, [pc, #420]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa4c:	487d      	ldr	r0, [pc, #500]	@ (801ac44 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 801aa4e:	f7fe f82f 	bl	8018ab0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvEC1EP11RegisterMaphPS0_>
core_utils_RegisterEntry<uint8_t, twipr_control_mode_t> regentry_function_control_setMode(&register_map, REG_ADDRESS_F_CONTROL_SET_MODE, &twipr_firmware.control, &TWIPR_ControlManager::setMode);
 801aa52:	4b7d      	ldr	r3, [pc, #500]	@ (801ac48 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 801aa54:	623b      	str	r3, [r7, #32]
 801aa56:	2300      	movs	r3, #0
 801aa58:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa5a:	466a      	mov	r2, sp
 801aa5c:	f107 0320 	add.w	r3, r7, #32
 801aa60:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa64:	e882 0003 	stmia.w	r2, {r0, r1}
 801aa68:	4b78      	ldr	r3, [pc, #480]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801aa6a:	2211      	movs	r2, #17
 801aa6c:	4960      	ldr	r1, [pc, #384]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa6e:	4878      	ldr	r0, [pc, #480]	@ (801ac50 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 801aa70:	f7fe f86a 	bl	8018b48 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhS0_E>
core_utils_RegisterEntry<uint8_t, float[8]> regentry_function_control_setK(&register_map, REG_ADDRESS_F_CONTROL_SET_K, &twipr_firmware.control, &TWIPR_ControlManager::setBalancingGain);
 801aa74:	4b77      	ldr	r3, [pc, #476]	@ (801ac54 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 801aa76:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aa78:	2300      	movs	r3, #0
 801aa7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aa7c:	466a      	mov	r2, sp
 801aa7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801aa82:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa86:	e882 0003 	stmia.w	r2, {r0, r1}
 801aa8a:	4b70      	ldr	r3, [pc, #448]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801aa8c:	2212      	movs	r2, #18
 801aa8e:	4958      	ldr	r1, [pc, #352]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aa90:	4871      	ldr	r0, [pc, #452]	@ (801ac58 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 801aa92:	f7fe f8b7 	bl	8018c04 <_ZN24core_utils_RegisterEntryIhA8_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>
core_utils_RegisterEntry<void, twipr_control_direct_input_t> regentry_function_control_setDirectInput(&register_map, REG_ADDRESS_F_CONTROL_SET_DIRECT_INPUT, &twipr_firmware.control, &TWIPR_ControlManager::setDirectInput);
 801aa96:	4b71      	ldr	r3, [pc, #452]	@ (801ac5c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 801aa98:	633b      	str	r3, [r7, #48]	@ 0x30
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
 801aa9e:	466a      	mov	r2, sp
 801aaa0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801aaa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aaa8:	e882 0003 	stmia.w	r2, {r0, r1}
 801aaac:	4b67      	ldr	r3, [pc, #412]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801aaae:	2215      	movs	r2, #21
 801aab0:	494f      	ldr	r1, [pc, #316]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aab2:	486b      	ldr	r0, [pc, #428]	@ (801ac60 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 801aab4:	f7fe f906 	bl	8018cc4 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<void, twipr_balancing_control_input_t> regentry_function_control_setBalancingInput(&register_map, REG_ADDRESS_F_CONTROL_SET_BALANCING_INPUT, &twipr_firmware.control, &TWIPR_ControlManager::setBalancingInput);
 801aab8:	4b6a      	ldr	r3, [pc, #424]	@ (801ac64 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 801aaba:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aabc:	2300      	movs	r3, #0
 801aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aac0:	466a      	mov	r2, sp
 801aac2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801aac6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aaca:	e882 0003 	stmia.w	r2, {r0, r1}
 801aace:	4b5f      	ldr	r3, [pc, #380]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801aad0:	2216      	movs	r2, #22
 801aad2:	4947      	ldr	r1, [pc, #284]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aad4:	4864      	ldr	r0, [pc, #400]	@ (801ac68 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 801aad6:	f7fe f953 	bl	8018d80 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<void, twipr_speed_control_input_t> regentry_function_control_setSpeedInput(&register_map, REG_ADDRESS_F_CONTROL_SET_SPEED_INPUT, &twipr_firmware.control, &TWIPR_ControlManager::setSpeed);
 801aada:	4b64      	ldr	r3, [pc, #400]	@ (801ac6c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 801aadc:	643b      	str	r3, [r7, #64]	@ 0x40
 801aade:	2300      	movs	r3, #0
 801aae0:	647b      	str	r3, [r7, #68]	@ 0x44
 801aae2:	466a      	mov	r2, sp
 801aae4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801aae8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aaec:	e882 0003 	stmia.w	r2, {r0, r1}
 801aaf0:	4b56      	ldr	r3, [pc, #344]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801aaf2:	2217      	movs	r2, #23
 801aaf4:	493e      	ldr	r1, [pc, #248]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aaf6:	485e      	ldr	r0, [pc, #376]	@ (801ac70 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 801aaf8:	f7fe f9a0 	bl	8018e3c <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<uint8_t, float[3]> regentry_function_control_setPIDForward(&register_map, REG_ADDRESS_F_CONTROL_SET_FORWARD_PID, &twipr_firmware.control, &TWIPR_ControlManager::setVelocityControlForwardPID);
 801aafc:	4b5d      	ldr	r3, [pc, #372]	@ (801ac74 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 801aafe:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab00:	2300      	movs	r3, #0
 801ab02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ab04:	466a      	mov	r2, sp
 801ab06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801ab0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab0e:	e882 0003 	stmia.w	r2, {r0, r1}
 801ab12:	4b4e      	ldr	r3, [pc, #312]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801ab14:	2213      	movs	r2, #19
 801ab16:	4936      	ldr	r1, [pc, #216]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801ab18:	4857      	ldr	r0, [pc, #348]	@ (801ac78 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 801ab1a:	f7fe f9ed 	bl	8018ef8 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>
core_utils_RegisterEntry<uint8_t, float[3]> regentry_function_control_setPIDTurn(&register_map, REG_ADDRESS_F_CONTROL_SET_TURN_PID, &twipr_firmware.control, &TWIPR_ControlManager::setVelocityControlTurnPID);
 801ab1e:	4b57      	ldr	r3, [pc, #348]	@ (801ac7c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 801ab20:	653b      	str	r3, [r7, #80]	@ 0x50
 801ab22:	2300      	movs	r3, #0
 801ab24:	657b      	str	r3, [r7, #84]	@ 0x54
 801ab26:	466a      	mov	r2, sp
 801ab28:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801ab2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab30:	e882 0003 	stmia.w	r2, {r0, r1}
 801ab34:	4b45      	ldr	r3, [pc, #276]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801ab36:	2214      	movs	r2, #20
 801ab38:	492d      	ldr	r1, [pc, #180]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801ab3a:	4851      	ldr	r0, [pc, #324]	@ (801ac80 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 801ab3c:	f7fe f9dc 	bl	8018ef8 <_ZN24core_utils_RegisterEntryIhA3_fEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FhPfE>
core_utils_RegisterEntry<twipr_control_configuration_t, void> regentry_function_control_getControlConfiguration(&register_map, REG_ADDRESS_F_CONTROL_GET_CONFIGURATION, &twipr_firmware.control, &TWIPR_ControlManager::getControlConfiguration);
 801ab40:	4b50      	ldr	r3, [pc, #320]	@ (801ac84 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 801ab42:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ab44:	2300      	movs	r3, #0
 801ab46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ab48:	466a      	mov	r2, sp
 801ab4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ab4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab52:	e882 0003 	stmia.w	r2, {r0, r1}
 801ab56:	4b3d      	ldr	r3, [pc, #244]	@ (801ac4c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801ab58:	2218      	movs	r2, #24
 801ab5a:	4925      	ldr	r1, [pc, #148]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801ab5c:	484a      	ldr	r0, [pc, #296]	@ (801ac88 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 801ab5e:	f7fe fa29 	bl	8018fb4 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvEC1I20TWIPR_ControlManagerEEP11RegisterMaphPT_MS6_FS0_vE>
core_utils_RegisterEntry<void, twipr_sequencer_sequence_data_t> regentry_function_sequencer_loadSequence(&register_map, REG_ADDRESS_F_SEQUENCE_LOAD, &twipr_firmware.sequencer, &TWIPR_Sequencer::loadSequence);
 801ab62:	4b4a      	ldr	r3, [pc, #296]	@ (801ac8c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 801ab64:	663b      	str	r3, [r7, #96]	@ 0x60
 801ab66:	2300      	movs	r3, #0
 801ab68:	667b      	str	r3, [r7, #100]	@ 0x64
 801ab6a:	466a      	mov	r2, sp
 801ab6c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801ab70:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab74:	e882 0003 	stmia.w	r2, {r0, r1}
 801ab78:	4b45      	ldr	r3, [pc, #276]	@ (801ac90 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 801ab7a:	2221      	movs	r2, #33	@ 0x21
 801ab7c:	491c      	ldr	r1, [pc, #112]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801ab7e:	4845      	ldr	r0, [pc, #276]	@ (801ac94 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 801ab80:	f7fe fa76 	bl	8019070 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS6_FvS0_E>
core_utils_RegisterEntry<void, uint16_t> regentry_function_sequencer_startSequence(&register_map,REG_ADDRESS_F_SEQUENCE_START ,&twipr_firmware.sequencer, &TWIPR_Sequencer::startSequence);
 801ab84:	4b44      	ldr	r3, [pc, #272]	@ (801ac98 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 801ab86:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ab88:	2300      	movs	r3, #0
 801ab8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ab8c:	466a      	mov	r2, sp
 801ab8e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801ab92:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab96:	e882 0003 	stmia.w	r2, {r0, r1}
 801ab9a:	4b3d      	ldr	r3, [pc, #244]	@ (801ac90 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 801ab9c:	2222      	movs	r2, #34	@ 0x22
 801ab9e:	4914      	ldr	r1, [pc, #80]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801aba0:	483e      	ldr	r0, [pc, #248]	@ (801ac9c <_Z41__static_initialization_and_destruction_0ii+0x328>)
 801aba2:	f7fe fac3 	bl	801912c <_ZN24core_utils_RegisterEntryIvtEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS5_FvtE>
core_utils_RegisterEntry<void, void> regentry_function_sequencer_abortSequence(&register_map,REG_ADDRESS_F_SEQUENCE_STOP, &twipr_firmware.sequencer, &TWIPR_Sequencer::abortSequence);
 801aba6:	4b3e      	ldr	r3, [pc, #248]	@ (801aca0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 801aba8:	673b      	str	r3, [r7, #112]	@ 0x70
 801abaa:	2300      	movs	r3, #0
 801abac:	677b      	str	r3, [r7, #116]	@ 0x74
 801abae:	466a      	mov	r2, sp
 801abb0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801abb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801abb8:	e882 0003 	stmia.w	r2, {r0, r1}
 801abbc:	4b34      	ldr	r3, [pc, #208]	@ (801ac90 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 801abbe:	2223      	movs	r2, #35	@ 0x23
 801abc0:	490b      	ldr	r1, [pc, #44]	@ (801abf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 801abc2:	4838      	ldr	r0, [pc, #224]	@ (801aca4 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 801abc4:	f7fe faf0 	bl	80191a8 <_ZN24core_utils_RegisterEntryIvvEC1I15TWIPR_SequencerEEP11RegisterMaphPT_MS5_FvvE>
elapsedMillis activityTimer;
 801abc8:	4837      	ldr	r0, [pc, #220]	@ (801aca8 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 801abca:	f7fb ff03 	bl	80169d4 <_ZN13elapsedMillisC1Ev>
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d107      	bne.n	801abe4 <_Z41__static_initialization_and_destruction_0ii+0x270>
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801abda:	4293      	cmp	r3, r2
 801abdc:	d102      	bne.n	801abe4 <_Z41__static_initialization_and_destruction_0ii+0x270>
TWIPR_Firmware twipr_firmware;
 801abde:	4803      	ldr	r0, [pc, #12]	@ (801abec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 801abe0:	f7ff feba 	bl	801a958 <_ZN14TWIPR_FirmwareD1Ev>
}
 801abe4:	bf00      	nop
 801abe6:	3778      	adds	r7, #120	@ 0x78
 801abe8:	46bd      	mov	sp, r7
 801abea:	bd80      	pop	{r7, pc}
 801abec:	2401f3c8 	.word	0x2401f3c8
 801abf0:	2401ef90 	.word	0x2401ef90
 801abf4:	24022760 	.word	0x24022760
 801abf8:	2401f3cc 	.word	0x2401f3cc
 801abfc:	24022790 	.word	0x24022790
 801ac00:	2401f3ca 	.word	0x2401f3ca
 801ac04:	240227c4 	.word	0x240227c4
 801ac08:	0801863d 	.word	0x0801863d
 801ac0c:	240227f4 	.word	0x240227f4
 801ac10:	0801da71 	.word	0x0801da71
 801ac14:	24022cbc 	.word	0x24022cbc
 801ac18:	24022824 	.word	0x24022824
 801ac1c:	24000030 	.word	0x24000030
 801ac20:	2402285c 	.word	0x2402285c
 801ac24:	240220b4 	.word	0x240220b4
 801ac28:	2402288c 	.word	0x2402288c
 801ac2c:	0801d823 	.word	0x0801d823
 801ac30:	24022cac 	.word	0x24022cac
 801ac34:	240228c4 	.word	0x240228c4
 801ac38:	24022748 	.word	0x24022748
 801ac3c:	240228f4 	.word	0x240228f4
 801ac40:	2402139d 	.word	0x2402139d
 801ac44:	24022924 	.word	0x24022924
 801ac48:	08015a2d 	.word	0x08015a2d
 801ac4c:	2402139c 	.word	0x2402139c
 801ac50:	24022954 	.word	0x24022954
 801ac54:	08015c39 	.word	0x08015c39
 801ac58:	24022984 	.word	0x24022984
 801ac5c:	08015ba9 	.word	0x08015ba9
 801ac60:	240229d8 	.word	0x240229d8
 801ac64:	08015af9 	.word	0x08015af9
 801ac68:	24022a10 	.word	0x24022a10
 801ac6c:	08015b51 	.word	0x08015b51
 801ac70:	24022a48 	.word	0x24022a48
 801ac74:	08015c75 	.word	0x08015c75
 801ac78:	24022a80 	.word	0x24022a80
 801ac7c:	08015cb7 	.word	0x08015cb7
 801ac80:	24022ac0 	.word	0x24022ac0
 801ac84:	08015cf9 	.word	0x08015cf9
 801ac88:	24022b00 	.word	0x24022b00
 801ac8c:	0801d401 	.word	0x0801d401
 801ac90:	240216d4 	.word	0x240216d4
 801ac94:	24022b68 	.word	0x24022b68
 801ac98:	0801d311 	.word	0x0801d311
 801ac9c:	24022ba4 	.word	0x24022ba4
 801aca0:	0801d3a9 	.word	0x0801d3a9
 801aca4:	24022bd4 	.word	0x24022bd4
 801aca8:	24022bfc 	.word	0x24022bfc

0801acac <_ZN24core_utils_RegisterEntryIvtE12getInputSizeEv>:
	uint16_t getInputSize() {
 801acac:	b480      	push	{r7}
 801acae:	b083      	sub	sp, #12
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801acb4:	2302      	movs	r3, #2
	}
 801acb6:	4618      	mov	r0, r3
 801acb8:	370c      	adds	r7, #12
 801acba:	46bd      	mov	sp, r7
 801acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc0:	4770      	bx	lr

0801acc2 <_ZN24core_utils_RegisterEntryIvtE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801acc2:	b480      	push	{r7}
 801acc4:	b083      	sub	sp, #12
 801acc6:	af00      	add	r7, sp, #0
 801acc8:	6078      	str	r0, [r7, #4]
		return 0;
 801acca:	2300      	movs	r3, #0
	}
 801accc:	4618      	mov	r0, r3
 801acce:	370c      	adds	r7, #12
 801acd0:	46bd      	mov	sp, r7
 801acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd6:	4770      	bx	lr

0801acd8 <_ZN24core_utils_RegisterEntryIvtE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801acd8:	b580      	push	{r7, lr}
 801acda:	b086      	sub	sp, #24
 801acdc:	af00      	add	r7, sp, #0
 801acde:	60f8      	str	r0, [r7, #12]
 801ace0:	60b9      	str	r1, [r7, #8]
 801ace2:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ace4:	2300      	movs	r3, #0
 801ace6:	75fb      	strb	r3, [r7, #23]
 801ace8:	e00b      	b.n	801ad02 <_ZN24core_utils_RegisterEntryIvtE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801acea:	7dfb      	ldrb	r3, [r7, #23]
 801acec:	68ba      	ldr	r2, [r7, #8]
 801acee:	441a      	add	r2, r3
 801acf0:	7dfb      	ldrb	r3, [r7, #23]
 801acf2:	7811      	ldrb	r1, [r2, #0]
 801acf4:	68fa      	ldr	r2, [r7, #12]
 801acf6:	4413      	add	r3, r2
 801acf8:	460a      	mov	r2, r1
 801acfa:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801acfc:	7dfb      	ldrb	r3, [r7, #23]
 801acfe:	3301      	adds	r3, #1
 801ad00:	75fb      	strb	r3, [r7, #23]
 801ad02:	7dfb      	ldrb	r3, [r7, #23]
 801ad04:	2b01      	cmp	r3, #1
 801ad06:	d9f0      	bls.n	801acea <_ZN24core_utils_RegisterEntryIvtE7executeEPhS1_+0x12>
		this->callback.call(this->input_data_union.data);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	f103 0210 	add.w	r2, r3, #16
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	88db      	ldrh	r3, [r3, #6]
 801ad12:	4619      	mov	r1, r3
 801ad14:	4610      	mov	r0, r2
 801ad16:	f7f7 fe2b 	bl	8012970 <_ZN19core_utils_CallbackIvtE4callEt>
		return this->getOutputSize();
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	3304      	adds	r3, #4
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	68f8      	ldr	r0, [r7, #12]
 801ad24:	4798      	blx	r3
 801ad26:	4603      	mov	r3, r0
	}
 801ad28:	4618      	mov	r0, r3
 801ad2a:	3718      	adds	r7, #24
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	bd80      	pop	{r7, pc}

0801ad30 <_ZN24core_utils_RegisterEntryIvtE5writeEPh>:
	void write(uint8_t *input) {
 801ad30:	b480      	push	{r7}
 801ad32:	b085      	sub	sp, #20
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	6078      	str	r0, [r7, #4]
 801ad38:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	7b5b      	ldrb	r3, [r3, #13]
 801ad3e:	2b02      	cmp	r3, #2
 801ad40:	d113      	bne.n	801ad6a <_ZN24core_utils_RegisterEntryIvtE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	689b      	ldr	r3, [r3, #8]
 801ad46:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ad48:	2300      	movs	r3, #0
 801ad4a:	73fb      	strb	r3, [r7, #15]
 801ad4c:	e00a      	b.n	801ad64 <_ZN24core_utils_RegisterEntryIvtE5writeEPh+0x34>
				target_address[i] = input[i];
 801ad4e:	7bfb      	ldrb	r3, [r7, #15]
 801ad50:	683a      	ldr	r2, [r7, #0]
 801ad52:	441a      	add	r2, r3
 801ad54:	7bfb      	ldrb	r3, [r7, #15]
 801ad56:	68b9      	ldr	r1, [r7, #8]
 801ad58:	440b      	add	r3, r1
 801ad5a:	7812      	ldrb	r2, [r2, #0]
 801ad5c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ad5e:	7bfb      	ldrb	r3, [r7, #15]
 801ad60:	3301      	adds	r3, #1
 801ad62:	73fb      	strb	r3, [r7, #15]
 801ad64:	7bfb      	ldrb	r3, [r7, #15]
 801ad66:	2b01      	cmp	r3, #1
 801ad68:	d9f1      	bls.n	801ad4e <_ZN24core_utils_RegisterEntryIvtE5writeEPh+0x1e>
	}
 801ad6a:	bf00      	nop
 801ad6c:	3714      	adds	r7, #20
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad74:	4770      	bx	lr

0801ad76 <_ZN24core_utils_RegisterEntryIvtE7getTypeEv>:
	register_entry_type_t getType() {
 801ad76:	b480      	push	{r7}
 801ad78:	b083      	sub	sp, #12
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
		return this->type;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	7b5b      	ldrb	r3, [r3, #13]
	}
 801ad82:	4618      	mov	r0, r3
 801ad84:	370c      	adds	r7, #12
 801ad86:	46bd      	mov	sp, r7
 801ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8c:	4770      	bx	lr

0801ad8e <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ad8e:	b480      	push	{r7}
 801ad90:	b083      	sub	sp, #12
 801ad92:	af00      	add	r7, sp, #0
 801ad94:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801ad96:	230c      	movs	r3, #12
	}
 801ad98:	4618      	mov	r0, r3
 801ad9a:	370c      	adds	r7, #12
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada2:	4770      	bx	lr

0801ada4 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801ada4:	b480      	push	{r7}
 801ada6:	b083      	sub	sp, #12
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	6078      	str	r0, [r7, #4]
		return 0;
 801adac:	2300      	movs	r3, #0
	}
 801adae:	4618      	mov	r0, r3
 801adb0:	370c      	adds	r7, #12
 801adb2:	46bd      	mov	sp, r7
 801adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb8:	4770      	bx	lr

0801adba <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801adba:	b590      	push	{r4, r7, lr}
 801adbc:	b087      	sub	sp, #28
 801adbe:	af00      	add	r7, sp, #0
 801adc0:	60f8      	str	r0, [r7, #12]
 801adc2:	60b9      	str	r1, [r7, #8]
 801adc4:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801adc6:	2300      	movs	r3, #0
 801adc8:	75fb      	strb	r3, [r7, #23]
 801adca:	e00b      	b.n	801ade4 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801adcc:	7dfb      	ldrb	r3, [r7, #23]
 801adce:	68ba      	ldr	r2, [r7, #8]
 801add0:	441a      	add	r2, r3
 801add2:	7dfb      	ldrb	r3, [r7, #23]
 801add4:	7811      	ldrb	r1, [r2, #0]
 801add6:	68fa      	ldr	r2, [r7, #12]
 801add8:	4413      	add	r3, r2
 801adda:	460a      	mov	r2, r1
 801addc:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801adde:	7dfb      	ldrb	r3, [r7, #23]
 801ade0:	3301      	adds	r3, #1
 801ade2:	75fb      	strb	r3, [r7, #23]
 801ade4:	7dfb      	ldrb	r3, [r7, #23]
 801ade6:	2b0b      	cmp	r3, #11
 801ade8:	d9f0      	bls.n	801adcc <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	f103 001c 	add.w	r0, r3, #28
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	f8d3 2006 	ldr.w	r2, [r3, #6]
 801adf6:	4611      	mov	r1, r2
 801adf8:	f8d3 400a 	ldr.w	r4, [r3, #10]
 801adfc:	4622      	mov	r2, r4
 801adfe:	f8d3 400e 	ldr.w	r4, [r3, #14]
 801ae02:	4623      	mov	r3, r4
 801ae04:	f001 f894 	bl	801bf30 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tE4callES0_>
		return this->getOutputSize();
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	3304      	adds	r3, #4
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	68f8      	ldr	r0, [r7, #12]
 801ae12:	4798      	blx	r3
 801ae14:	4603      	mov	r3, r0
	}
 801ae16:	4618      	mov	r0, r3
 801ae18:	371c      	adds	r7, #28
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bd90      	pop	{r4, r7, pc}

0801ae1e <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE5writeEPh>:
	void write(uint8_t *input) {
 801ae1e:	b480      	push	{r7}
 801ae20:	b085      	sub	sp, #20
 801ae22:	af00      	add	r7, sp, #0
 801ae24:	6078      	str	r0, [r7, #4]
 801ae26:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	7e5b      	ldrb	r3, [r3, #25]
 801ae2c:	2b02      	cmp	r3, #2
 801ae2e:	d113      	bne.n	801ae58 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	695b      	ldr	r3, [r3, #20]
 801ae34:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ae36:	2300      	movs	r3, #0
 801ae38:	73fb      	strb	r3, [r7, #15]
 801ae3a:	e00a      	b.n	801ae52 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801ae3c:	7bfb      	ldrb	r3, [r7, #15]
 801ae3e:	683a      	ldr	r2, [r7, #0]
 801ae40:	441a      	add	r2, r3
 801ae42:	7bfb      	ldrb	r3, [r7, #15]
 801ae44:	68b9      	ldr	r1, [r7, #8]
 801ae46:	440b      	add	r3, r1
 801ae48:	7812      	ldrb	r2, [r2, #0]
 801ae4a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ae4c:	7bfb      	ldrb	r3, [r7, #15]
 801ae4e:	3301      	adds	r3, #1
 801ae50:	73fb      	strb	r3, [r7, #15]
 801ae52:	7bfb      	ldrb	r3, [r7, #15]
 801ae54:	2b0b      	cmp	r3, #11
 801ae56:	d9f1      	bls.n	801ae3c <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE5writeEPh+0x1e>
	}
 801ae58:	bf00      	nop
 801ae5a:	3714      	adds	r7, #20
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae62:	4770      	bx	lr

0801ae64 <_ZN24core_utils_RegisterEntryIv31twipr_sequencer_sequence_data_tE7getTypeEv>:
	register_entry_type_t getType() {
 801ae64:	b480      	push	{r7}
 801ae66:	b083      	sub	sp, #12
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
		return this->type;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	7e5b      	ldrb	r3, [r3, #25]
	}
 801ae70:	4618      	mov	r0, r3
 801ae72:	370c      	adds	r7, #12
 801ae74:	46bd      	mov	sp, r7
 801ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7a:	4770      	bx	lr

0801ae7c <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ae7c:	b480      	push	{r7}
 801ae7e:	b083      	sub	sp, #12
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
		return 0;
 801ae84:	2300      	movs	r3, #0
	}
 801ae86:	4618      	mov	r0, r3
 801ae88:	370c      	adds	r7, #12
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae90:	4770      	bx	lr

0801ae92 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801ae92:	b480      	push	{r7}
 801ae94:	b083      	sub	sp, #12
 801ae96:	af00      	add	r7, sp, #0
 801ae98:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801ae9a:	2338      	movs	r3, #56	@ 0x38
	}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	370c      	adds	r7, #12
 801aea0:	46bd      	mov	sp, r7
 801aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea6:	4770      	bx	lr

0801aea8 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801aea8:	b580      	push	{r7, lr}
 801aeaa:	b086      	sub	sp, #24
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	60f8      	str	r0, [r7, #12]
 801aeb0:	60b9      	str	r1, [r7, #8]
 801aeb2:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	3308      	adds	r3, #8
 801aebe:	4619      	mov	r1, r3
 801aec0:	4610      	mov	r0, r2
 801aec2:	f001 f847 	bl	801bf54 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aec6:	2300      	movs	r3, #0
 801aec8:	75fb      	strb	r3, [r7, #23]
 801aeca:	e00a      	b.n	801aee2 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801aecc:	7dfa      	ldrb	r2, [r7, #23]
 801aece:	7dfb      	ldrb	r3, [r7, #23]
 801aed0:	6879      	ldr	r1, [r7, #4]
 801aed2:	440b      	add	r3, r1
 801aed4:	68f9      	ldr	r1, [r7, #12]
 801aed6:	440a      	add	r2, r1
 801aed8:	7a12      	ldrb	r2, [r2, #8]
 801aeda:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801aedc:	7dfb      	ldrb	r3, [r7, #23]
 801aede:	3301      	adds	r3, #1
 801aee0:	75fb      	strb	r3, [r7, #23]
 801aee2:	7dfb      	ldrb	r3, [r7, #23]
 801aee4:	2b37      	cmp	r3, #55	@ 0x37
 801aee6:	d9f1      	bls.n	801aecc <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	3304      	adds	r3, #4
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	68f8      	ldr	r0, [r7, #12]
 801aef2:	4798      	blx	r3
 801aef4:	4603      	mov	r3, r0
	}
 801aef6:	4618      	mov	r0, r3
 801aef8:	3718      	adds	r7, #24
 801aefa:	46bd      	mov	sp, r7
 801aefc:	bd80      	pop	{r7, pc}

0801aefe <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801aefe:	b480      	push	{r7}
 801af00:	b085      	sub	sp, #20
 801af02:	af00      	add	r7, sp, #0
 801af04:	6078      	str	r0, [r7, #4]
 801af06:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801af0e:	2b03      	cmp	r3, #3
 801af10:	d115      	bne.n	801af3e <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x40>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af16:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801af18:	2300      	movs	r3, #0
 801af1a:	73fb      	strb	r3, [r7, #15]
 801af1c:	e00a      	b.n	801af34 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x36>
				output[i] = target_address[i];
 801af1e:	7bfb      	ldrb	r3, [r7, #15]
 801af20:	68ba      	ldr	r2, [r7, #8]
 801af22:	441a      	add	r2, r3
 801af24:	7bfb      	ldrb	r3, [r7, #15]
 801af26:	6839      	ldr	r1, [r7, #0]
 801af28:	440b      	add	r3, r1
 801af2a:	7812      	ldrb	r2, [r2, #0]
 801af2c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801af2e:	7bfb      	ldrb	r3, [r7, #15]
 801af30:	3301      	adds	r3, #1
 801af32:	73fb      	strb	r3, [r7, #15]
 801af34:	7bfb      	ldrb	r3, [r7, #15]
 801af36:	2b37      	cmp	r3, #55	@ 0x37
 801af38:	d9f1      	bls.n	801af1e <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x20>
			return sizeof(output_type);
 801af3a:	2338      	movs	r3, #56	@ 0x38
 801af3c:	e000      	b.n	801af40 <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE4readEPh+0x42>
		return 0;
 801af3e:	2300      	movs	r3, #0
	}
 801af40:	4618      	mov	r0, r3
 801af42:	3714      	adds	r7, #20
 801af44:	46bd      	mov	sp, r7
 801af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4a:	4770      	bx	lr

0801af4c <_ZN24core_utils_RegisterEntryI29twipr_control_configuration_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801af4c:	b480      	push	{r7}
 801af4e:	b083      	sub	sp, #12
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
		return this->type;
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
	}
 801af5a:	4618      	mov	r0, r3
 801af5c:	370c      	adds	r7, #12
 801af5e:	46bd      	mov	sp, r7
 801af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af64:	4770      	bx	lr

0801af66 <_ZN24core_utils_RegisterEntryIhA3_fE12getInputSizeEv>:
	uint16_t getInputSize() {
 801af66:	b480      	push	{r7}
 801af68:	b083      	sub	sp, #12
 801af6a:	af00      	add	r7, sp, #0
 801af6c:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801af6e:	230c      	movs	r3, #12
	}
 801af70:	4618      	mov	r0, r3
 801af72:	370c      	adds	r7, #12
 801af74:	46bd      	mov	sp, r7
 801af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7a:	4770      	bx	lr

0801af7c <_ZN24core_utils_RegisterEntryIhA3_fE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801af7c:	b480      	push	{r7}
 801af7e:	b083      	sub	sp, #12
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801af84:	2301      	movs	r3, #1
	}
 801af86:	4618      	mov	r0, r3
 801af88:	370c      	adds	r7, #12
 801af8a:	46bd      	mov	sp, r7
 801af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af90:	4770      	bx	lr

0801af92 <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801af92:	b580      	push	{r7, lr}
 801af94:	b086      	sub	sp, #24
 801af96:	af00      	add	r7, sp, #0
 801af98:	60f8      	str	r0, [r7, #12]
 801af9a:	60b9      	str	r1, [r7, #8]
 801af9c:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801af9e:	2300      	movs	r3, #0
 801afa0:	75fb      	strb	r3, [r7, #23]
 801afa2:	e00b      	b.n	801afbc <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801afa4:	7dfb      	ldrb	r3, [r7, #23]
 801afa6:	68ba      	ldr	r2, [r7, #8]
 801afa8:	441a      	add	r2, r3
 801afaa:	7dfb      	ldrb	r3, [r7, #23]
 801afac:	7811      	ldrb	r1, [r2, #0]
 801afae:	68fa      	ldr	r2, [r7, #12]
 801afb0:	4413      	add	r3, r2
 801afb2:	460a      	mov	r2, r1
 801afb4:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801afb6:	7dfb      	ldrb	r3, [r7, #23]
 801afb8:	3301      	adds	r3, #1
 801afba:	75fb      	strb	r3, [r7, #23]
 801afbc:	7dfb      	ldrb	r3, [r7, #23]
 801afbe:	2b0b      	cmp	r3, #11
 801afc0:	d9f0      	bls.n	801afa4 <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data,
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	f103 0020 	add.w	r0, r3, #32
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	f103 0108 	add.w	r1, r3, #8
				this->output_data_union_t.data);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	3314      	adds	r3, #20
		this->callback.call(this->input_data_union.data,
 801afd2:	461a      	mov	r2, r3
 801afd4:	f000 ffdc 	bl	801bf90 <_ZN19core_utils_CallbackIhA3_fE4callEPfRh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801afd8:	2300      	movs	r3, #0
 801afda:	75bb      	strb	r3, [r7, #22]
 801afdc:	e00a      	b.n	801aff4 <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x62>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801afde:	7dba      	ldrb	r2, [r7, #22]
 801afe0:	7dbb      	ldrb	r3, [r7, #22]
 801afe2:	6879      	ldr	r1, [r7, #4]
 801afe4:	440b      	add	r3, r1
 801afe6:	68f9      	ldr	r1, [r7, #12]
 801afe8:	440a      	add	r2, r1
 801afea:	7d12      	ldrb	r2, [r2, #20]
 801afec:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801afee:	7dbb      	ldrb	r3, [r7, #22]
 801aff0:	3301      	adds	r3, #1
 801aff2:	75bb      	strb	r3, [r7, #22]
 801aff4:	7dbb      	ldrb	r3, [r7, #22]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d0f1      	beq.n	801afde <_ZN24core_utils_RegisterEntryIhA3_fE7executeEPhS2_+0x4c>
		return this->getOutputSize();
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	3304      	adds	r3, #4
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	68f8      	ldr	r0, [r7, #12]
 801b004:	4798      	blx	r3
 801b006:	4603      	mov	r3, r0
	}
 801b008:	4618      	mov	r0, r3
 801b00a:	3718      	adds	r7, #24
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bd80      	pop	{r7, pc}

0801b010 <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh>:
	void write(uint8_t *input) {
 801b010:	b480      	push	{r7}
 801b012:	b085      	sub	sp, #20
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
 801b018:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	7f5b      	ldrb	r3, [r3, #29]
 801b01e:	2b04      	cmp	r3, #4
 801b020:	d113      	bne.n	801b04a <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	699b      	ldr	r3, [r3, #24]
 801b026:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b028:	2300      	movs	r3, #0
 801b02a:	73fb      	strb	r3, [r7, #15]
 801b02c:	e00a      	b.n	801b044 <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh+0x34>
				target_address[i] = input[i];
 801b02e:	7bfb      	ldrb	r3, [r7, #15]
 801b030:	683a      	ldr	r2, [r7, #0]
 801b032:	441a      	add	r2, r3
 801b034:	7bfb      	ldrb	r3, [r7, #15]
 801b036:	68b9      	ldr	r1, [r7, #8]
 801b038:	440b      	add	r3, r1
 801b03a:	7812      	ldrb	r2, [r2, #0]
 801b03c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b03e:	7bfb      	ldrb	r3, [r7, #15]
 801b040:	3301      	adds	r3, #1
 801b042:	73fb      	strb	r3, [r7, #15]
 801b044:	7bfb      	ldrb	r3, [r7, #15]
 801b046:	2b0b      	cmp	r3, #11
 801b048:	d9f1      	bls.n	801b02e <_ZN24core_utils_RegisterEntryIhA3_fE5writeEPh+0x1e>
	}
 801b04a:	bf00      	nop
 801b04c:	3714      	adds	r7, #20
 801b04e:	46bd      	mov	sp, r7
 801b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b054:	4770      	bx	lr

0801b056 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh>:
	uint16_t read(uint8_t *output) {
 801b056:	b480      	push	{r7}
 801b058:	b085      	sub	sp, #20
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	6078      	str	r0, [r7, #4]
 801b05e:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	7f5b      	ldrb	r3, [r3, #29]
 801b064:	2b04      	cmp	r3, #4
 801b066:	d115      	bne.n	801b094 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	699b      	ldr	r3, [r3, #24]
 801b06c:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b06e:	2300      	movs	r3, #0
 801b070:	73fb      	strb	r3, [r7, #15]
 801b072:	e00a      	b.n	801b08a <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x34>
				output[i] = target_address[i];
 801b074:	7bfb      	ldrb	r3, [r7, #15]
 801b076:	68ba      	ldr	r2, [r7, #8]
 801b078:	441a      	add	r2, r3
 801b07a:	7bfb      	ldrb	r3, [r7, #15]
 801b07c:	6839      	ldr	r1, [r7, #0]
 801b07e:	440b      	add	r3, r1
 801b080:	7812      	ldrb	r2, [r2, #0]
 801b082:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b084:	7bfb      	ldrb	r3, [r7, #15]
 801b086:	3301      	adds	r3, #1
 801b088:	73fb      	strb	r3, [r7, #15]
 801b08a:	7bfb      	ldrb	r3, [r7, #15]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d0f1      	beq.n	801b074 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x1e>
			return sizeof(output_type);
 801b090:	2301      	movs	r3, #1
 801b092:	e000      	b.n	801b096 <_ZN24core_utils_RegisterEntryIhA3_fE4readEPh+0x40>
		return 0;
 801b094:	2300      	movs	r3, #0
	}
 801b096:	4618      	mov	r0, r3
 801b098:	3714      	adds	r7, #20
 801b09a:	46bd      	mov	sp, r7
 801b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a0:	4770      	bx	lr

0801b0a2 <_ZN24core_utils_RegisterEntryIhA3_fE7getTypeEv>:
	register_entry_type_t getType() {
 801b0a2:	b480      	push	{r7}
 801b0a4:	b083      	sub	sp, #12
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	6078      	str	r0, [r7, #4]
		return this->type;
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	7f5b      	ldrb	r3, [r3, #29]
	}
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	370c      	adds	r7, #12
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b8:	4770      	bx	lr

0801b0ba <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b0ba:	b480      	push	{r7}
 801b0bc:	b083      	sub	sp, #12
 801b0be:	af00      	add	r7, sp, #0
 801b0c0:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b0c2:	2308      	movs	r3, #8
	}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	370c      	adds	r7, #12
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ce:	4770      	bx	lr

0801b0d0 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b0d0:	b480      	push	{r7}
 801b0d2:	b083      	sub	sp, #12
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	6078      	str	r0, [r7, #4]
		return 0;
 801b0d8:	2300      	movs	r3, #0
	}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	370c      	adds	r7, #12
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e4:	4770      	bx	lr

0801b0e6 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b0e6:	b580      	push	{r7, lr}
 801b0e8:	b086      	sub	sp, #24
 801b0ea:	af00      	add	r7, sp, #0
 801b0ec:	60f8      	str	r0, [r7, #12]
 801b0ee:	60b9      	str	r1, [r7, #8]
 801b0f0:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	75fb      	strb	r3, [r7, #23]
 801b0f6:	e00b      	b.n	801b110 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b0f8:	7dfb      	ldrb	r3, [r7, #23]
 801b0fa:	68ba      	ldr	r2, [r7, #8]
 801b0fc:	441a      	add	r2, r3
 801b0fe:	7dfb      	ldrb	r3, [r7, #23]
 801b100:	7811      	ldrb	r1, [r2, #0]
 801b102:	68fa      	ldr	r2, [r7, #12]
 801b104:	4413      	add	r3, r2
 801b106:	460a      	mov	r2, r1
 801b108:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b10a:	7dfb      	ldrb	r3, [r7, #23]
 801b10c:	3301      	adds	r3, #1
 801b10e:	75fb      	strb	r3, [r7, #23]
 801b110:	7dfb      	ldrb	r3, [r7, #23]
 801b112:	2b07      	cmp	r3, #7
 801b114:	d9f0      	bls.n	801b0f8 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	f103 0218 	add.w	r2, r3, #24
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	ed93 7a02 	vldr	s14, [r3, #8]
 801b122:	edd3 7a03 	vldr	s15, [r3, #12]
 801b126:	eeb0 0a47 	vmov.f32	s0, s14
 801b12a:	eef0 0a67 	vmov.f32	s1, s15
 801b12e:	4610      	mov	r0, r2
 801b130:	f000 ff42 	bl	801bfb8 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tE4callES0_>
		return this->getOutputSize();
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	3304      	adds	r3, #4
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	68f8      	ldr	r0, [r7, #12]
 801b13e:	4798      	blx	r3
 801b140:	4603      	mov	r3, r0
	}
 801b142:	4618      	mov	r0, r3
 801b144:	3718      	adds	r7, #24
 801b146:	46bd      	mov	sp, r7
 801b148:	bd80      	pop	{r7, pc}

0801b14a <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh>:
	void write(uint8_t *input) {
 801b14a:	b480      	push	{r7}
 801b14c:	b085      	sub	sp, #20
 801b14e:	af00      	add	r7, sp, #0
 801b150:	6078      	str	r0, [r7, #4]
 801b152:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	7d5b      	ldrb	r3, [r3, #21]
 801b158:	2b02      	cmp	r3, #2
 801b15a:	d113      	bne.n	801b184 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	691b      	ldr	r3, [r3, #16]
 801b160:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b162:	2300      	movs	r3, #0
 801b164:	73fb      	strb	r3, [r7, #15]
 801b166:	e00a      	b.n	801b17e <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801b168:	7bfb      	ldrb	r3, [r7, #15]
 801b16a:	683a      	ldr	r2, [r7, #0]
 801b16c:	441a      	add	r2, r3
 801b16e:	7bfb      	ldrb	r3, [r7, #15]
 801b170:	68b9      	ldr	r1, [r7, #8]
 801b172:	440b      	add	r3, r1
 801b174:	7812      	ldrb	r2, [r2, #0]
 801b176:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b178:	7bfb      	ldrb	r3, [r7, #15]
 801b17a:	3301      	adds	r3, #1
 801b17c:	73fb      	strb	r3, [r7, #15]
 801b17e:	7bfb      	ldrb	r3, [r7, #15]
 801b180:	2b07      	cmp	r3, #7
 801b182:	d9f1      	bls.n	801b168 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE5writeEPh+0x1e>
	}
 801b184:	bf00      	nop
 801b186:	3714      	adds	r7, #20
 801b188:	46bd      	mov	sp, r7
 801b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18e:	4770      	bx	lr

0801b190 <_ZN24core_utils_RegisterEntryIv27twipr_speed_control_input_tE7getTypeEv>:
	register_entry_type_t getType() {
 801b190:	b480      	push	{r7}
 801b192:	b083      	sub	sp, #12
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
		return this->type;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	7d5b      	ldrb	r3, [r3, #21]
	}
 801b19c:	4618      	mov	r0, r3
 801b19e:	370c      	adds	r7, #12
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a6:	4770      	bx	lr

0801b1a8 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b1a8:	b480      	push	{r7}
 801b1aa:	b083      	sub	sp, #12
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b1b0:	2308      	movs	r3, #8
	}
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	370c      	adds	r7, #12
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1bc:	4770      	bx	lr

0801b1be <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b1be:	b480      	push	{r7}
 801b1c0:	b083      	sub	sp, #12
 801b1c2:	af00      	add	r7, sp, #0
 801b1c4:	6078      	str	r0, [r7, #4]
		return 0;
 801b1c6:	2300      	movs	r3, #0
	}
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	370c      	adds	r7, #12
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d2:	4770      	bx	lr

0801b1d4 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b086      	sub	sp, #24
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	60f8      	str	r0, [r7, #12]
 801b1dc:	60b9      	str	r1, [r7, #8]
 801b1de:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	75fb      	strb	r3, [r7, #23]
 801b1e4:	e00b      	b.n	801b1fe <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b1e6:	7dfb      	ldrb	r3, [r7, #23]
 801b1e8:	68ba      	ldr	r2, [r7, #8]
 801b1ea:	441a      	add	r2, r3
 801b1ec:	7dfb      	ldrb	r3, [r7, #23]
 801b1ee:	7811      	ldrb	r1, [r2, #0]
 801b1f0:	68fa      	ldr	r2, [r7, #12]
 801b1f2:	4413      	add	r3, r2
 801b1f4:	460a      	mov	r2, r1
 801b1f6:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b1f8:	7dfb      	ldrb	r3, [r7, #23]
 801b1fa:	3301      	adds	r3, #1
 801b1fc:	75fb      	strb	r3, [r7, #23]
 801b1fe:	7dfb      	ldrb	r3, [r7, #23]
 801b200:	2b07      	cmp	r3, #7
 801b202:	d9f0      	bls.n	801b1e6 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	f103 0218 	add.w	r2, r3, #24
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	ed93 7a02 	vldr	s14, [r3, #8]
 801b210:	edd3 7a03 	vldr	s15, [r3, #12]
 801b214:	eeb0 0a47 	vmov.f32	s0, s14
 801b218:	eef0 0a67 	vmov.f32	s1, s15
 801b21c:	4610      	mov	r0, r2
 801b21e:	f000 fee8 	bl	801bff2 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tE4callES0_>
		return this->getOutputSize();
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	3304      	adds	r3, #4
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	68f8      	ldr	r0, [r7, #12]
 801b22c:	4798      	blx	r3
 801b22e:	4603      	mov	r3, r0
	}
 801b230:	4618      	mov	r0, r3
 801b232:	3718      	adds	r7, #24
 801b234:	46bd      	mov	sp, r7
 801b236:	bd80      	pop	{r7, pc}

0801b238 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh>:
	void write(uint8_t *input) {
 801b238:	b480      	push	{r7}
 801b23a:	b085      	sub	sp, #20
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
 801b240:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	7d5b      	ldrb	r3, [r3, #21]
 801b246:	2b02      	cmp	r3, #2
 801b248:	d113      	bne.n	801b272 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	691b      	ldr	r3, [r3, #16]
 801b24e:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b250:	2300      	movs	r3, #0
 801b252:	73fb      	strb	r3, [r7, #15]
 801b254:	e00a      	b.n	801b26c <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801b256:	7bfb      	ldrb	r3, [r7, #15]
 801b258:	683a      	ldr	r2, [r7, #0]
 801b25a:	441a      	add	r2, r3
 801b25c:	7bfb      	ldrb	r3, [r7, #15]
 801b25e:	68b9      	ldr	r1, [r7, #8]
 801b260:	440b      	add	r3, r1
 801b262:	7812      	ldrb	r2, [r2, #0]
 801b264:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b266:	7bfb      	ldrb	r3, [r7, #15]
 801b268:	3301      	adds	r3, #1
 801b26a:	73fb      	strb	r3, [r7, #15]
 801b26c:	7bfb      	ldrb	r3, [r7, #15]
 801b26e:	2b07      	cmp	r3, #7
 801b270:	d9f1      	bls.n	801b256 <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE5writeEPh+0x1e>
	}
 801b272:	bf00      	nop
 801b274:	3714      	adds	r7, #20
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr

0801b27e <_ZN24core_utils_RegisterEntryIv31twipr_balancing_control_input_tE7getTypeEv>:
	register_entry_type_t getType() {
 801b27e:	b480      	push	{r7}
 801b280:	b083      	sub	sp, #12
 801b282:	af00      	add	r7, sp, #0
 801b284:	6078      	str	r0, [r7, #4]
		return this->type;
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	7d5b      	ldrb	r3, [r3, #21]
	}
 801b28a:	4618      	mov	r0, r3
 801b28c:	370c      	adds	r7, #12
 801b28e:	46bd      	mov	sp, r7
 801b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b294:	4770      	bx	lr

0801b296 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b296:	b480      	push	{r7}
 801b298:	b083      	sub	sp, #12
 801b29a:	af00      	add	r7, sp, #0
 801b29c:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b29e:	2308      	movs	r3, #8
	}
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	370c      	adds	r7, #12
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2aa:	4770      	bx	lr

0801b2ac <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b2ac:	b480      	push	{r7}
 801b2ae:	b083      	sub	sp, #12
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
		return 0;
 801b2b4:	2300      	movs	r3, #0
	}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	370c      	adds	r7, #12
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c0:	4770      	bx	lr

0801b2c2 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b2c2:	b580      	push	{r7, lr}
 801b2c4:	b086      	sub	sp, #24
 801b2c6:	af00      	add	r7, sp, #0
 801b2c8:	60f8      	str	r0, [r7, #12]
 801b2ca:	60b9      	str	r1, [r7, #8]
 801b2cc:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	75fb      	strb	r3, [r7, #23]
 801b2d2:	e00b      	b.n	801b2ec <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b2d4:	7dfb      	ldrb	r3, [r7, #23]
 801b2d6:	68ba      	ldr	r2, [r7, #8]
 801b2d8:	441a      	add	r2, r3
 801b2da:	7dfb      	ldrb	r3, [r7, #23]
 801b2dc:	7811      	ldrb	r1, [r2, #0]
 801b2de:	68fa      	ldr	r2, [r7, #12]
 801b2e0:	4413      	add	r3, r2
 801b2e2:	460a      	mov	r2, r1
 801b2e4:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b2e6:	7dfb      	ldrb	r3, [r7, #23]
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	75fb      	strb	r3, [r7, #23]
 801b2ec:	7dfb      	ldrb	r3, [r7, #23]
 801b2ee:	2b07      	cmp	r3, #7
 801b2f0:	d9f0      	bls.n	801b2d4 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	f103 0218 	add.w	r2, r3, #24
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	ed93 7a02 	vldr	s14, [r3, #8]
 801b2fe:	edd3 7a03 	vldr	s15, [r3, #12]
 801b302:	eeb0 0a47 	vmov.f32	s0, s14
 801b306:	eef0 0a67 	vmov.f32	s1, s15
 801b30a:	4610      	mov	r0, r2
 801b30c:	f000 fe8e 	bl	801c02c <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tE4callES0_>
		return this->getOutputSize();
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	3304      	adds	r3, #4
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	68f8      	ldr	r0, [r7, #12]
 801b31a:	4798      	blx	r3
 801b31c:	4603      	mov	r3, r0
	}
 801b31e:	4618      	mov	r0, r3
 801b320:	3718      	adds	r7, #24
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}

0801b326 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh>:
	void write(uint8_t *input) {
 801b326:	b480      	push	{r7}
 801b328:	b085      	sub	sp, #20
 801b32a:	af00      	add	r7, sp, #0
 801b32c:	6078      	str	r0, [r7, #4]
 801b32e:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	7d5b      	ldrb	r3, [r3, #21]
 801b334:	2b02      	cmp	r3, #2
 801b336:	d113      	bne.n	801b360 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	691b      	ldr	r3, [r3, #16]
 801b33c:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b33e:	2300      	movs	r3, #0
 801b340:	73fb      	strb	r3, [r7, #15]
 801b342:	e00a      	b.n	801b35a <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801b344:	7bfb      	ldrb	r3, [r7, #15]
 801b346:	683a      	ldr	r2, [r7, #0]
 801b348:	441a      	add	r2, r3
 801b34a:	7bfb      	ldrb	r3, [r7, #15]
 801b34c:	68b9      	ldr	r1, [r7, #8]
 801b34e:	440b      	add	r3, r1
 801b350:	7812      	ldrb	r2, [r2, #0]
 801b352:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b354:	7bfb      	ldrb	r3, [r7, #15]
 801b356:	3301      	adds	r3, #1
 801b358:	73fb      	strb	r3, [r7, #15]
 801b35a:	7bfb      	ldrb	r3, [r7, #15]
 801b35c:	2b07      	cmp	r3, #7
 801b35e:	d9f1      	bls.n	801b344 <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE5writeEPh+0x1e>
	}
 801b360:	bf00      	nop
 801b362:	3714      	adds	r7, #20
 801b364:	46bd      	mov	sp, r7
 801b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36a:	4770      	bx	lr

0801b36c <_ZN24core_utils_RegisterEntryIv28twipr_control_direct_input_tE7getTypeEv>:
	register_entry_type_t getType() {
 801b36c:	b480      	push	{r7}
 801b36e:	b083      	sub	sp, #12
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
		return this->type;
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	7d5b      	ldrb	r3, [r3, #21]
	}
 801b378:	4618      	mov	r0, r3
 801b37a:	370c      	adds	r7, #12
 801b37c:	46bd      	mov	sp, r7
 801b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b382:	4770      	bx	lr

0801b384 <_ZN24core_utils_RegisterEntryIhA8_fE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b384:	b480      	push	{r7}
 801b386:	b083      	sub	sp, #12
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b38c:	2320      	movs	r3, #32
	}
 801b38e:	4618      	mov	r0, r3
 801b390:	370c      	adds	r7, #12
 801b392:	46bd      	mov	sp, r7
 801b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b398:	4770      	bx	lr

0801b39a <_ZN24core_utils_RegisterEntryIhA8_fE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b39a:	b480      	push	{r7}
 801b39c:	b083      	sub	sp, #12
 801b39e:	af00      	add	r7, sp, #0
 801b3a0:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801b3a2:	2301      	movs	r3, #1
	}
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	370c      	adds	r7, #12
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ae:	4770      	bx	lr

0801b3b0 <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b086      	sub	sp, #24
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	60f8      	str	r0, [r7, #12]
 801b3b8:	60b9      	str	r1, [r7, #8]
 801b3ba:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b3bc:	2300      	movs	r3, #0
 801b3be:	75fb      	strb	r3, [r7, #23]
 801b3c0:	e00b      	b.n	801b3da <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b3c2:	7dfb      	ldrb	r3, [r7, #23]
 801b3c4:	68ba      	ldr	r2, [r7, #8]
 801b3c6:	441a      	add	r2, r3
 801b3c8:	7dfb      	ldrb	r3, [r7, #23]
 801b3ca:	7811      	ldrb	r1, [r2, #0]
 801b3cc:	68fa      	ldr	r2, [r7, #12]
 801b3ce:	4413      	add	r3, r2
 801b3d0:	460a      	mov	r2, r1
 801b3d2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b3d4:	7dfb      	ldrb	r3, [r7, #23]
 801b3d6:	3301      	adds	r3, #1
 801b3d8:	75fb      	strb	r3, [r7, #23]
 801b3da:	7dfb      	ldrb	r3, [r7, #23]
 801b3dc:	2b1f      	cmp	r3, #31
 801b3de:	d9f0      	bls.n	801b3c2 <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data,
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	f103 0108 	add.w	r1, r3, #8
				this->output_data_union_t.data);
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	3328      	adds	r3, #40	@ 0x28
		this->callback.call(this->input_data_union.data,
 801b3f0:	461a      	mov	r2, r3
 801b3f2:	f000 fe38 	bl	801c066 <_ZN19core_utils_CallbackIhA8_fE4callEPfRh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b3f6:	2300      	movs	r3, #0
 801b3f8:	75bb      	strb	r3, [r7, #22]
 801b3fa:	e00b      	b.n	801b414 <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x64>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801b3fc:	7dba      	ldrb	r2, [r7, #22]
 801b3fe:	7dbb      	ldrb	r3, [r7, #22]
 801b400:	6879      	ldr	r1, [r7, #4]
 801b402:	440b      	add	r3, r1
 801b404:	68f9      	ldr	r1, [r7, #12]
 801b406:	440a      	add	r2, r1
 801b408:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801b40c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b40e:	7dbb      	ldrb	r3, [r7, #22]
 801b410:	3301      	adds	r3, #1
 801b412:	75bb      	strb	r3, [r7, #22]
 801b414:	7dbb      	ldrb	r3, [r7, #22]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d0f0      	beq.n	801b3fc <_ZN24core_utils_RegisterEntryIhA8_fE7executeEPhS2_+0x4c>
		return this->getOutputSize();
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	3304      	adds	r3, #4
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	68f8      	ldr	r0, [r7, #12]
 801b424:	4798      	blx	r3
 801b426:	4603      	mov	r3, r0
	}
 801b428:	4618      	mov	r0, r3
 801b42a:	3718      	adds	r7, #24
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd80      	pop	{r7, pc}

0801b430 <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh>:
	void write(uint8_t *input) {
 801b430:	b480      	push	{r7}
 801b432:	b085      	sub	sp, #20
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
 801b438:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b440:	2b04      	cmp	r3, #4
 801b442:	d113      	bne.n	801b46c <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh+0x3c>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b448:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b44a:	2300      	movs	r3, #0
 801b44c:	73fb      	strb	r3, [r7, #15]
 801b44e:	e00a      	b.n	801b466 <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh+0x36>
				target_address[i] = input[i];
 801b450:	7bfb      	ldrb	r3, [r7, #15]
 801b452:	683a      	ldr	r2, [r7, #0]
 801b454:	441a      	add	r2, r3
 801b456:	7bfb      	ldrb	r3, [r7, #15]
 801b458:	68b9      	ldr	r1, [r7, #8]
 801b45a:	440b      	add	r3, r1
 801b45c:	7812      	ldrb	r2, [r2, #0]
 801b45e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b460:	7bfb      	ldrb	r3, [r7, #15]
 801b462:	3301      	adds	r3, #1
 801b464:	73fb      	strb	r3, [r7, #15]
 801b466:	7bfb      	ldrb	r3, [r7, #15]
 801b468:	2b1f      	cmp	r3, #31
 801b46a:	d9f1      	bls.n	801b450 <_ZN24core_utils_RegisterEntryIhA8_fE5writeEPh+0x20>
	}
 801b46c:	bf00      	nop
 801b46e:	3714      	adds	r7, #20
 801b470:	46bd      	mov	sp, r7
 801b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b476:	4770      	bx	lr

0801b478 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh>:
	uint16_t read(uint8_t *output) {
 801b478:	b480      	push	{r7}
 801b47a:	b085      	sub	sp, #20
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
 801b480:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b488:	2b04      	cmp	r3, #4
 801b48a:	d115      	bne.n	801b4b8 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x40>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b490:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b492:	2300      	movs	r3, #0
 801b494:	73fb      	strb	r3, [r7, #15]
 801b496:	e00a      	b.n	801b4ae <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x36>
				output[i] = target_address[i];
 801b498:	7bfb      	ldrb	r3, [r7, #15]
 801b49a:	68ba      	ldr	r2, [r7, #8]
 801b49c:	441a      	add	r2, r3
 801b49e:	7bfb      	ldrb	r3, [r7, #15]
 801b4a0:	6839      	ldr	r1, [r7, #0]
 801b4a2:	440b      	add	r3, r1
 801b4a4:	7812      	ldrb	r2, [r2, #0]
 801b4a6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b4a8:	7bfb      	ldrb	r3, [r7, #15]
 801b4aa:	3301      	adds	r3, #1
 801b4ac:	73fb      	strb	r3, [r7, #15]
 801b4ae:	7bfb      	ldrb	r3, [r7, #15]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d0f1      	beq.n	801b498 <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x20>
			return sizeof(output_type);
 801b4b4:	2301      	movs	r3, #1
 801b4b6:	e000      	b.n	801b4ba <_ZN24core_utils_RegisterEntryIhA8_fE4readEPh+0x42>
		return 0;
 801b4b8:	2300      	movs	r3, #0
	}
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	3714      	adds	r7, #20
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c4:	4770      	bx	lr

0801b4c6 <_ZN24core_utils_RegisterEntryIhA8_fE7getTypeEv>:
	register_entry_type_t getType() {
 801b4c6:	b480      	push	{r7}
 801b4c8:	b083      	sub	sp, #12
 801b4ca:	af00      	add	r7, sp, #0
 801b4cc:	6078      	str	r0, [r7, #4]
		return this->type;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
	}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	370c      	adds	r7, #12
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4de:	4770      	bx	lr

0801b4e0 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b4e0:	b480      	push	{r7}
 801b4e2:	b083      	sub	sp, #12
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b4e8:	2301      	movs	r3, #1
	}
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	370c      	adds	r7, #12
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f4:	4770      	bx	lr

0801b4f6 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b4f6:	b480      	push	{r7}
 801b4f8:	b083      	sub	sp, #12
 801b4fa:	af00      	add	r7, sp, #0
 801b4fc:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801b4fe:	2301      	movs	r3, #1
	}
 801b500:	4618      	mov	r0, r3
 801b502:	370c      	adds	r7, #12
 801b504:	46bd      	mov	sp, r7
 801b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b50a:	4770      	bx	lr

0801b50c <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b086      	sub	sp, #24
 801b510:	af00      	add	r7, sp, #0
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	60b9      	str	r1, [r7, #8]
 801b516:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b518:	2300      	movs	r3, #0
 801b51a:	75fb      	strb	r3, [r7, #23]
 801b51c:	e00b      	b.n	801b536 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b51e:	7dfb      	ldrb	r3, [r7, #23]
 801b520:	68ba      	ldr	r2, [r7, #8]
 801b522:	441a      	add	r2, r3
 801b524:	7dfb      	ldrb	r3, [r7, #23]
 801b526:	7811      	ldrb	r1, [r2, #0]
 801b528:	68fa      	ldr	r2, [r7, #12]
 801b52a:	4413      	add	r3, r2
 801b52c:	460a      	mov	r2, r1
 801b52e:	715a      	strb	r2, [r3, #5]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b530:	7dfb      	ldrb	r3, [r7, #23]
 801b532:	3301      	adds	r3, #1
 801b534:	75fb      	strb	r3, [r7, #23]
 801b536:	7dfb      	ldrb	r3, [r7, #23]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d0f0      	beq.n	801b51e <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data,
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	f103 0010 	add.w	r0, r3, #16
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	7959      	ldrb	r1, [r3, #5]
				this->output_data_union_t.data);
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	3306      	adds	r3, #6
		this->callback.call(this->input_data_union.data,
 801b54a:	461a      	mov	r2, r3
 801b54c:	f000 fd9f 	bl	801c08e <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_Rh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b550:	2300      	movs	r3, #0
 801b552:	75bb      	strb	r3, [r7, #22]
 801b554:	e00a      	b.n	801b56c <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x60>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801b556:	7dba      	ldrb	r2, [r7, #22]
 801b558:	7dbb      	ldrb	r3, [r7, #22]
 801b55a:	6879      	ldr	r1, [r7, #4]
 801b55c:	440b      	add	r3, r1
 801b55e:	68f9      	ldr	r1, [r7, #12]
 801b560:	440a      	add	r2, r1
 801b562:	7992      	ldrb	r2, [r2, #6]
 801b564:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b566:	7dbb      	ldrb	r3, [r7, #22]
 801b568:	3301      	adds	r3, #1
 801b56a:	75bb      	strb	r3, [r7, #22]
 801b56c:	7dbb      	ldrb	r3, [r7, #22]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d0f1      	beq.n	801b556 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7executeEPhS2_+0x4a>
		return this->getOutputSize();
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	3304      	adds	r3, #4
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	68f8      	ldr	r0, [r7, #12]
 801b57c:	4798      	blx	r3
 801b57e:	4603      	mov	r3, r0
	}
 801b580:	4618      	mov	r0, r3
 801b582:	3718      	adds	r7, #24
 801b584:	46bd      	mov	sp, r7
 801b586:	bd80      	pop	{r7, pc}

0801b588 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh>:
	void write(uint8_t *input) {
 801b588:	b480      	push	{r7}
 801b58a:	b085      	sub	sp, #20
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
 801b590:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	7b5b      	ldrb	r3, [r3, #13]
 801b596:	2b04      	cmp	r3, #4
 801b598:	d113      	bne.n	801b5c2 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	689b      	ldr	r3, [r3, #8]
 801b59e:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	73fb      	strb	r3, [r7, #15]
 801b5a4:	e00a      	b.n	801b5bc <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801b5a6:	7bfb      	ldrb	r3, [r7, #15]
 801b5a8:	683a      	ldr	r2, [r7, #0]
 801b5aa:	441a      	add	r2, r3
 801b5ac:	7bfb      	ldrb	r3, [r7, #15]
 801b5ae:	68b9      	ldr	r1, [r7, #8]
 801b5b0:	440b      	add	r3, r1
 801b5b2:	7812      	ldrb	r2, [r2, #0]
 801b5b4:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b5b6:	7bfb      	ldrb	r3, [r7, #15]
 801b5b8:	3301      	adds	r3, #1
 801b5ba:	73fb      	strb	r3, [r7, #15]
 801b5bc:	7bfb      	ldrb	r3, [r7, #15]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d0f1      	beq.n	801b5a6 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE5writeEPh+0x1e>
	}
 801b5c2:	bf00      	nop
 801b5c4:	3714      	adds	r7, #20
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5cc:	4770      	bx	lr

0801b5ce <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh>:
	uint16_t read(uint8_t *output) {
 801b5ce:	b480      	push	{r7}
 801b5d0:	b085      	sub	sp, #20
 801b5d2:	af00      	add	r7, sp, #0
 801b5d4:	6078      	str	r0, [r7, #4]
 801b5d6:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	7b5b      	ldrb	r3, [r3, #13]
 801b5dc:	2b04      	cmp	r3, #4
 801b5de:	d115      	bne.n	801b60c <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	689b      	ldr	r3, [r3, #8]
 801b5e4:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	73fb      	strb	r3, [r7, #15]
 801b5ea:	e00a      	b.n	801b602 <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x34>
				output[i] = target_address[i];
 801b5ec:	7bfb      	ldrb	r3, [r7, #15]
 801b5ee:	68ba      	ldr	r2, [r7, #8]
 801b5f0:	441a      	add	r2, r3
 801b5f2:	7bfb      	ldrb	r3, [r7, #15]
 801b5f4:	6839      	ldr	r1, [r7, #0]
 801b5f6:	440b      	add	r3, r1
 801b5f8:	7812      	ldrb	r2, [r2, #0]
 801b5fa:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b5fc:	7bfb      	ldrb	r3, [r7, #15]
 801b5fe:	3301      	adds	r3, #1
 801b600:	73fb      	strb	r3, [r7, #15]
 801b602:	7bfb      	ldrb	r3, [r7, #15]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d0f1      	beq.n	801b5ec <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x1e>
			return sizeof(output_type);
 801b608:	2301      	movs	r3, #1
 801b60a:	e000      	b.n	801b60e <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE4readEPh+0x40>
		return 0;
 801b60c:	2300      	movs	r3, #0
	}
 801b60e:	4618      	mov	r0, r3
 801b610:	3714      	adds	r7, #20
 801b612:	46bd      	mov	sp, r7
 801b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b618:	4770      	bx	lr

0801b61a <_ZN24core_utils_RegisterEntryIh20twipr_control_mode_tE7getTypeEv>:
	register_entry_type_t getType() {
 801b61a:	b480      	push	{r7}
 801b61c:	b083      	sub	sp, #12
 801b61e:	af00      	add	r7, sp, #0
 801b620:	6078      	str	r0, [r7, #4]
		return this->type;
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	7b5b      	ldrb	r3, [r3, #13]
	}
 801b626:	4618      	mov	r0, r3
 801b628:	370c      	adds	r7, #12
 801b62a:	46bd      	mov	sp, r7
 801b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b630:	4770      	bx	lr

0801b632 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b632:	b480      	push	{r7}
 801b634:	b083      	sub	sp, #12
 801b636:	af00      	add	r7, sp, #0
 801b638:	6078      	str	r0, [r7, #4]
		return 0;
 801b63a:	2300      	movs	r3, #0
	}
 801b63c:	4618      	mov	r0, r3
 801b63e:	370c      	adds	r7, #12
 801b640:	46bd      	mov	sp, r7
 801b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b646:	4770      	bx	lr

0801b648 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b648:	b480      	push	{r7}
 801b64a:	b083      	sub	sp, #12
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801b650:	2301      	movs	r3, #1
	}
 801b652:	4618      	mov	r0, r3
 801b654:	370c      	adds	r7, #12
 801b656:	46bd      	mov	sp, r7
 801b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65c:	4770      	bx	lr

0801b65e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b65e:	b580      	push	{r7, lr}
 801b660:	b086      	sub	sp, #24
 801b662:	af00      	add	r7, sp, #0
 801b664:	60f8      	str	r0, [r7, #12]
 801b666:	60b9      	str	r1, [r7, #8]
 801b668:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	f103 0210 	add.w	r2, r3, #16
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	3305      	adds	r3, #5
 801b674:	4619      	mov	r1, r3
 801b676:	4610      	mov	r0, r2
 801b678:	f000 fd1f 	bl	801c0ba <_ZN19core_utils_CallbackI20twipr_control_mode_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b67c:	2300      	movs	r3, #0
 801b67e:	75fb      	strb	r3, [r7, #23]
 801b680:	e00a      	b.n	801b698 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801b682:	7dfa      	ldrb	r2, [r7, #23]
 801b684:	7dfb      	ldrb	r3, [r7, #23]
 801b686:	6879      	ldr	r1, [r7, #4]
 801b688:	440b      	add	r3, r1
 801b68a:	68f9      	ldr	r1, [r7, #12]
 801b68c:	440a      	add	r2, r1
 801b68e:	7952      	ldrb	r2, [r2, #5]
 801b690:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b692:	7dfb      	ldrb	r3, [r7, #23]
 801b694:	3301      	adds	r3, #1
 801b696:	75fb      	strb	r3, [r7, #23]
 801b698:	7dfb      	ldrb	r3, [r7, #23]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d0f1      	beq.n	801b682 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	3304      	adds	r3, #4
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	68f8      	ldr	r0, [r7, #12]
 801b6a8:	4798      	blx	r3
 801b6aa:	4603      	mov	r3, r0
	}
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	3718      	adds	r7, #24
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	bd80      	pop	{r7, pc}

0801b6b4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801b6b4:	b480      	push	{r7}
 801b6b6:	b085      	sub	sp, #20
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
 801b6bc:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	7b5b      	ldrb	r3, [r3, #13]
 801b6c2:	2b03      	cmp	r3, #3
 801b6c4:	d115      	bne.n	801b6f2 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	689b      	ldr	r3, [r3, #8]
 801b6ca:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	73fb      	strb	r3, [r7, #15]
 801b6d0:	e00a      	b.n	801b6e8 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x34>
				output[i] = target_address[i];
 801b6d2:	7bfb      	ldrb	r3, [r7, #15]
 801b6d4:	68ba      	ldr	r2, [r7, #8]
 801b6d6:	441a      	add	r2, r3
 801b6d8:	7bfb      	ldrb	r3, [r7, #15]
 801b6da:	6839      	ldr	r1, [r7, #0]
 801b6dc:	440b      	add	r3, r1
 801b6de:	7812      	ldrb	r2, [r2, #0]
 801b6e0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b6e2:	7bfb      	ldrb	r3, [r7, #15]
 801b6e4:	3301      	adds	r3, #1
 801b6e6:	73fb      	strb	r3, [r7, #15]
 801b6e8:	7bfb      	ldrb	r3, [r7, #15]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d0f1      	beq.n	801b6d2 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x1e>
			return sizeof(output_type);
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	e000      	b.n	801b6f4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE4readEPh+0x40>
		return 0;
 801b6f2:	2300      	movs	r3, #0
	}
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	3714      	adds	r7, #20
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fe:	4770      	bx	lr

0801b700 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801b700:	b480      	push	{r7}
 801b702:	b083      	sub	sp, #12
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
		return this->type;
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	7b5b      	ldrb	r3, [r3, #13]
	}
 801b70c:	4618      	mov	r0, r3
 801b70e:	370c      	adds	r7, #12
 801b710:	46bd      	mov	sp, r7
 801b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b716:	4770      	bx	lr

0801b718 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b718:	b480      	push	{r7}
 801b71a:	b083      	sub	sp, #12
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b720:	2303      	movs	r3, #3
	}
 801b722:	4618      	mov	r0, r3
 801b724:	370c      	adds	r7, #12
 801b726:	46bd      	mov	sp, r7
 801b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72c:	4770      	bx	lr

0801b72e <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b72e:	b480      	push	{r7}
 801b730:	b083      	sub	sp, #12
 801b732:	af00      	add	r7, sp, #0
 801b734:	6078      	str	r0, [r7, #4]
		return 0;
 801b736:	2300      	movs	r3, #0
	}
 801b738:	4618      	mov	r0, r3
 801b73a:	370c      	adds	r7, #12
 801b73c:	46bd      	mov	sp, r7
 801b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b742:	4770      	bx	lr

0801b744 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b744:	b580      	push	{r7, lr}
 801b746:	b086      	sub	sp, #24
 801b748:	af00      	add	r7, sp, #0
 801b74a:	60f8      	str	r0, [r7, #12]
 801b74c:	60b9      	str	r1, [r7, #8]
 801b74e:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b750:	2300      	movs	r3, #0
 801b752:	75fb      	strb	r3, [r7, #23]
 801b754:	e00b      	b.n	801b76e <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b756:	7dfb      	ldrb	r3, [r7, #23]
 801b758:	68ba      	ldr	r2, [r7, #8]
 801b75a:	441a      	add	r2, r3
 801b75c:	7dfb      	ldrb	r3, [r7, #23]
 801b75e:	7811      	ldrb	r1, [r2, #0]
 801b760:	68fa      	ldr	r2, [r7, #12]
 801b762:	4413      	add	r3, r2
 801b764:	460a      	mov	r2, r1
 801b766:	715a      	strb	r2, [r3, #5]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b768:	7dfb      	ldrb	r3, [r7, #23]
 801b76a:	3301      	adds	r3, #1
 801b76c:	75fb      	strb	r3, [r7, #23]
 801b76e:	7dfb      	ldrb	r3, [r7, #23]
 801b770:	2b02      	cmp	r3, #2
 801b772:	d9f0      	bls.n	801b756 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	f103 0010 	add.w	r0, r3, #16
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	795a      	ldrb	r2, [r3, #5]
 801b77e:	7999      	ldrb	r1, [r3, #6]
 801b780:	0209      	lsls	r1, r1, #8
 801b782:	430a      	orrs	r2, r1
 801b784:	79db      	ldrb	r3, [r3, #7]
 801b786:	041b      	lsls	r3, r3, #16
 801b788:	431a      	orrs	r2, r3
 801b78a:	2300      	movs	r3, #0
 801b78c:	f362 0317 	bfi	r3, r2, #0, #24
 801b790:	4619      	mov	r1, r3
 801b792:	f000 fca4 	bl	801c0de <_ZN19core_utils_CallbackIv18rgb_color_struct_tE4callES0_>
		return this->getOutputSize();
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	3304      	adds	r3, #4
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	68f8      	ldr	r0, [r7, #12]
 801b7a0:	4798      	blx	r3
 801b7a2:	4603      	mov	r3, r0
	}
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	3718      	adds	r7, #24
 801b7a8:	46bd      	mov	sp, r7
 801b7aa:	bd80      	pop	{r7, pc}

0801b7ac <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE5writeEPh>:
	void write(uint8_t *input) {
 801b7ac:	b480      	push	{r7}
 801b7ae:	b085      	sub	sp, #20
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
 801b7b4:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	7b5b      	ldrb	r3, [r3, #13]
 801b7ba:	2b02      	cmp	r3, #2
 801b7bc:	d113      	bne.n	801b7e6 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	689b      	ldr	r3, [r3, #8]
 801b7c2:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	73fb      	strb	r3, [r7, #15]
 801b7c8:	e00a      	b.n	801b7e0 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801b7ca:	7bfb      	ldrb	r3, [r7, #15]
 801b7cc:	683a      	ldr	r2, [r7, #0]
 801b7ce:	441a      	add	r2, r3
 801b7d0:	7bfb      	ldrb	r3, [r7, #15]
 801b7d2:	68b9      	ldr	r1, [r7, #8]
 801b7d4:	440b      	add	r3, r1
 801b7d6:	7812      	ldrb	r2, [r2, #0]
 801b7d8:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b7da:	7bfb      	ldrb	r3, [r7, #15]
 801b7dc:	3301      	adds	r3, #1
 801b7de:	73fb      	strb	r3, [r7, #15]
 801b7e0:	7bfb      	ldrb	r3, [r7, #15]
 801b7e2:	2b02      	cmp	r3, #2
 801b7e4:	d9f1      	bls.n	801b7ca <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE5writeEPh+0x1e>
	}
 801b7e6:	bf00      	nop
 801b7e8:	3714      	adds	r7, #20
 801b7ea:	46bd      	mov	sp, r7
 801b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f0:	4770      	bx	lr

0801b7f2 <_ZN24core_utils_RegisterEntryIv18rgb_color_struct_tE7getTypeEv>:
	register_entry_type_t getType() {
 801b7f2:	b480      	push	{r7}
 801b7f4:	b083      	sub	sp, #12
 801b7f6:	af00      	add	r7, sp, #0
 801b7f8:	6078      	str	r0, [r7, #4]
		return this->type;
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	7b5b      	ldrb	r3, [r3, #13]
	}
 801b7fe:	4618      	mov	r0, r3
 801b800:	370c      	adds	r7, #12
 801b802:	46bd      	mov	sp, r7
 801b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b808:	4770      	bx	lr

0801b80a <_ZN24core_utils_RegisterEntryIffE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b80a:	b480      	push	{r7}
 801b80c:	b083      	sub	sp, #12
 801b80e:	af00      	add	r7, sp, #0
 801b810:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801b812:	2304      	movs	r3, #4
	}
 801b814:	4618      	mov	r0, r3
 801b816:	370c      	adds	r7, #12
 801b818:	46bd      	mov	sp, r7
 801b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b81e:	4770      	bx	lr

0801b820 <_ZN24core_utils_RegisterEntryIffE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b820:	b480      	push	{r7}
 801b822:	b083      	sub	sp, #12
 801b824:	af00      	add	r7, sp, #0
 801b826:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801b828:	2304      	movs	r3, #4
	}
 801b82a:	4618      	mov	r0, r3
 801b82c:	370c      	adds	r7, #12
 801b82e:	46bd      	mov	sp, r7
 801b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b834:	4770      	bx	lr

0801b836 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b836:	b580      	push	{r7, lr}
 801b838:	b086      	sub	sp, #24
 801b83a:	af00      	add	r7, sp, #0
 801b83c:	60f8      	str	r0, [r7, #12]
 801b83e:	60b9      	str	r1, [r7, #8]
 801b840:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b842:	2300      	movs	r3, #0
 801b844:	75fb      	strb	r3, [r7, #23]
 801b846:	e00b      	b.n	801b860 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b848:	7dfb      	ldrb	r3, [r7, #23]
 801b84a:	68ba      	ldr	r2, [r7, #8]
 801b84c:	441a      	add	r2, r3
 801b84e:	7dfb      	ldrb	r3, [r7, #23]
 801b850:	7811      	ldrb	r1, [r2, #0]
 801b852:	68fa      	ldr	r2, [r7, #12]
 801b854:	4413      	add	r3, r2
 801b856:	460a      	mov	r2, r1
 801b858:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b85a:	7dfb      	ldrb	r3, [r7, #23]
 801b85c:	3301      	adds	r3, #1
 801b85e:	75fb      	strb	r3, [r7, #23]
 801b860:	7dfb      	ldrb	r3, [r7, #23]
 801b862:	2b03      	cmp	r3, #3
 801b864:	d9f0      	bls.n	801b848 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x12>
		this->callback.call(this->input_data_union.data,
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	f103 0218 	add.w	r2, r3, #24
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	edd3 7a02 	vldr	s15, [r3, #8]
				this->output_data_union_t.data);
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	330c      	adds	r3, #12
		this->callback.call(this->input_data_union.data,
 801b876:	4619      	mov	r1, r3
 801b878:	eeb0 0a67 	vmov.f32	s0, s15
 801b87c:	4610      	mov	r0, r2
 801b87e:	f000 fc3d 	bl	801c0fc <_ZN19core_utils_CallbackIffE4callEfRf>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b882:	2300      	movs	r3, #0
 801b884:	75bb      	strb	r3, [r7, #22]
 801b886:	e00a      	b.n	801b89e <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x68>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801b888:	7dba      	ldrb	r2, [r7, #22]
 801b88a:	7dbb      	ldrb	r3, [r7, #22]
 801b88c:	6879      	ldr	r1, [r7, #4]
 801b88e:	440b      	add	r3, r1
 801b890:	68f9      	ldr	r1, [r7, #12]
 801b892:	440a      	add	r2, r1
 801b894:	7b12      	ldrb	r2, [r2, #12]
 801b896:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b898:	7dbb      	ldrb	r3, [r7, #22]
 801b89a:	3301      	adds	r3, #1
 801b89c:	75bb      	strb	r3, [r7, #22]
 801b89e:	7dbb      	ldrb	r3, [r7, #22]
 801b8a0:	2b03      	cmp	r3, #3
 801b8a2:	d9f1      	bls.n	801b888 <_ZN24core_utils_RegisterEntryIffE7executeEPhS1_+0x52>
		return this->getOutputSize();
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	3304      	adds	r3, #4
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	68f8      	ldr	r0, [r7, #12]
 801b8ae:	4798      	blx	r3
 801b8b0:	4603      	mov	r3, r0
	}
 801b8b2:	4618      	mov	r0, r3
 801b8b4:	3718      	adds	r7, #24
 801b8b6:	46bd      	mov	sp, r7
 801b8b8:	bd80      	pop	{r7, pc}

0801b8ba <_ZN24core_utils_RegisterEntryIffE5writeEPh>:
	void write(uint8_t *input) {
 801b8ba:	b480      	push	{r7}
 801b8bc:	b085      	sub	sp, #20
 801b8be:	af00      	add	r7, sp, #0
 801b8c0:	6078      	str	r0, [r7, #4]
 801b8c2:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	7d5b      	ldrb	r3, [r3, #21]
 801b8c8:	2b04      	cmp	r3, #4
 801b8ca:	d113      	bne.n	801b8f4 <_ZN24core_utils_RegisterEntryIffE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	691b      	ldr	r3, [r3, #16]
 801b8d0:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	73fb      	strb	r3, [r7, #15]
 801b8d6:	e00a      	b.n	801b8ee <_ZN24core_utils_RegisterEntryIffE5writeEPh+0x34>
				target_address[i] = input[i];
 801b8d8:	7bfb      	ldrb	r3, [r7, #15]
 801b8da:	683a      	ldr	r2, [r7, #0]
 801b8dc:	441a      	add	r2, r3
 801b8de:	7bfb      	ldrb	r3, [r7, #15]
 801b8e0:	68b9      	ldr	r1, [r7, #8]
 801b8e2:	440b      	add	r3, r1
 801b8e4:	7812      	ldrb	r2, [r2, #0]
 801b8e6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801b8e8:	7bfb      	ldrb	r3, [r7, #15]
 801b8ea:	3301      	adds	r3, #1
 801b8ec:	73fb      	strb	r3, [r7, #15]
 801b8ee:	7bfb      	ldrb	r3, [r7, #15]
 801b8f0:	2b03      	cmp	r3, #3
 801b8f2:	d9f1      	bls.n	801b8d8 <_ZN24core_utils_RegisterEntryIffE5writeEPh+0x1e>
	}
 801b8f4:	bf00      	nop
 801b8f6:	3714      	adds	r7, #20
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8fe:	4770      	bx	lr

0801b900 <_ZN24core_utils_RegisterEntryIffE4readEPh>:
	uint16_t read(uint8_t *output) {
 801b900:	b480      	push	{r7}
 801b902:	b085      	sub	sp, #20
 801b904:	af00      	add	r7, sp, #0
 801b906:	6078      	str	r0, [r7, #4]
 801b908:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	7d5b      	ldrb	r3, [r3, #21]
 801b90e:	2b04      	cmp	r3, #4
 801b910:	d115      	bne.n	801b93e <_ZN24core_utils_RegisterEntryIffE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	691b      	ldr	r3, [r3, #16]
 801b916:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b918:	2300      	movs	r3, #0
 801b91a:	73fb      	strb	r3, [r7, #15]
 801b91c:	e00a      	b.n	801b934 <_ZN24core_utils_RegisterEntryIffE4readEPh+0x34>
				output[i] = target_address[i];
 801b91e:	7bfb      	ldrb	r3, [r7, #15]
 801b920:	68ba      	ldr	r2, [r7, #8]
 801b922:	441a      	add	r2, r3
 801b924:	7bfb      	ldrb	r3, [r7, #15]
 801b926:	6839      	ldr	r1, [r7, #0]
 801b928:	440b      	add	r3, r1
 801b92a:	7812      	ldrb	r2, [r2, #0]
 801b92c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b92e:	7bfb      	ldrb	r3, [r7, #15]
 801b930:	3301      	adds	r3, #1
 801b932:	73fb      	strb	r3, [r7, #15]
 801b934:	7bfb      	ldrb	r3, [r7, #15]
 801b936:	2b03      	cmp	r3, #3
 801b938:	d9f1      	bls.n	801b91e <_ZN24core_utils_RegisterEntryIffE4readEPh+0x1e>
			return sizeof(output_type);
 801b93a:	2304      	movs	r3, #4
 801b93c:	e000      	b.n	801b940 <_ZN24core_utils_RegisterEntryIffE4readEPh+0x40>
		return 0;
 801b93e:	2300      	movs	r3, #0
	}
 801b940:	4618      	mov	r0, r3
 801b942:	3714      	adds	r7, #20
 801b944:	46bd      	mov	sp, r7
 801b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b94a:	4770      	bx	lr

0801b94c <_ZN24core_utils_RegisterEntryIffE7getTypeEv>:
	register_entry_type_t getType() {
 801b94c:	b480      	push	{r7}
 801b94e:	b083      	sub	sp, #12
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
		return this->type;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	7d5b      	ldrb	r3, [r3, #21]
	}
 801b958:	4618      	mov	r0, r3
 801b95a:	370c      	adds	r7, #12
 801b95c:	46bd      	mov	sp, r7
 801b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b962:	4770      	bx	lr

0801b964 <_ZN24core_utils_RegisterEntryIhvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801b964:	b480      	push	{r7}
 801b966:	b083      	sub	sp, #12
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
		return 0;
 801b96c:	2300      	movs	r3, #0
	}
 801b96e:	4618      	mov	r0, r3
 801b970:	370c      	adds	r7, #12
 801b972:	46bd      	mov	sp, r7
 801b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b978:	4770      	bx	lr

0801b97a <_ZN24core_utils_RegisterEntryIhvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801b97a:	b480      	push	{r7}
 801b97c:	b083      	sub	sp, #12
 801b97e:	af00      	add	r7, sp, #0
 801b980:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801b982:	2301      	movs	r3, #1
	}
 801b984:	4618      	mov	r0, r3
 801b986:	370c      	adds	r7, #12
 801b988:	46bd      	mov	sp, r7
 801b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b98e:	4770      	bx	lr

0801b990 <_ZN24core_utils_RegisterEntryIhvE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b990:	b580      	push	{r7, lr}
 801b992:	b086      	sub	sp, #24
 801b994:	af00      	add	r7, sp, #0
 801b996:	60f8      	str	r0, [r7, #12]
 801b998:	60b9      	str	r1, [r7, #8]
 801b99a:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	f103 0210 	add.w	r2, r3, #16
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	3305      	adds	r3, #5
 801b9a6:	4619      	mov	r1, r3
 801b9a8:	4610      	mov	r0, r2
 801b9aa:	f000 fbbe 	bl	801c12a <_ZN19core_utils_CallbackIhvE4callERh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	75fb      	strb	r3, [r7, #23]
 801b9b2:	e00a      	b.n	801b9ca <_ZN24core_utils_RegisterEntryIhvE7executeEPhS1_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801b9b4:	7dfa      	ldrb	r2, [r7, #23]
 801b9b6:	7dfb      	ldrb	r3, [r7, #23]
 801b9b8:	6879      	ldr	r1, [r7, #4]
 801b9ba:	440b      	add	r3, r1
 801b9bc:	68f9      	ldr	r1, [r7, #12]
 801b9be:	440a      	add	r2, r1
 801b9c0:	7952      	ldrb	r2, [r2, #5]
 801b9c2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b9c4:	7dfb      	ldrb	r3, [r7, #23]
 801b9c6:	3301      	adds	r3, #1
 801b9c8:	75fb      	strb	r3, [r7, #23]
 801b9ca:	7dfb      	ldrb	r3, [r7, #23]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d0f1      	beq.n	801b9b4 <_ZN24core_utils_RegisterEntryIhvE7executeEPhS1_+0x24>
		return this->getOutputSize();
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	3304      	adds	r3, #4
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	68f8      	ldr	r0, [r7, #12]
 801b9da:	4798      	blx	r3
 801b9dc:	4603      	mov	r3, r0
	}
 801b9de:	4618      	mov	r0, r3
 801b9e0:	3718      	adds	r7, #24
 801b9e2:	46bd      	mov	sp, r7
 801b9e4:	bd80      	pop	{r7, pc}

0801b9e6 <_ZN24core_utils_RegisterEntryIhvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801b9e6:	b480      	push	{r7}
 801b9e8:	b085      	sub	sp, #20
 801b9ea:	af00      	add	r7, sp, #0
 801b9ec:	6078      	str	r0, [r7, #4]
 801b9ee:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	7b5b      	ldrb	r3, [r3, #13]
 801b9f4:	2b03      	cmp	r3, #3
 801b9f6:	d115      	bne.n	801ba24 <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801b9fe:	2300      	movs	r3, #0
 801ba00:	73fb      	strb	r3, [r7, #15]
 801ba02:	e00a      	b.n	801ba1a <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x34>
				output[i] = target_address[i];
 801ba04:	7bfb      	ldrb	r3, [r7, #15]
 801ba06:	68ba      	ldr	r2, [r7, #8]
 801ba08:	441a      	add	r2, r3
 801ba0a:	7bfb      	ldrb	r3, [r7, #15]
 801ba0c:	6839      	ldr	r1, [r7, #0]
 801ba0e:	440b      	add	r3, r1
 801ba10:	7812      	ldrb	r2, [r2, #0]
 801ba12:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801ba14:	7bfb      	ldrb	r3, [r7, #15]
 801ba16:	3301      	adds	r3, #1
 801ba18:	73fb      	strb	r3, [r7, #15]
 801ba1a:	7bfb      	ldrb	r3, [r7, #15]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d0f1      	beq.n	801ba04 <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x1e>
			return sizeof(output_type);
 801ba20:	2301      	movs	r3, #1
 801ba22:	e000      	b.n	801ba26 <_ZN24core_utils_RegisterEntryIhvE4readEPh+0x40>
		return 0;
 801ba24:	2300      	movs	r3, #0
	}
 801ba26:	4618      	mov	r0, r3
 801ba28:	3714      	adds	r7, #20
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba30:	4770      	bx	lr

0801ba32 <_ZN24core_utils_RegisterEntryIhvE7getTypeEv>:
	register_entry_type_t getType() {
 801ba32:	b480      	push	{r7}
 801ba34:	b083      	sub	sp, #12
 801ba36:	af00      	add	r7, sp, #0
 801ba38:	6078      	str	r0, [r7, #4]
		return this->type;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	7b5b      	ldrb	r3, [r3, #13]
	}
 801ba3e:	4618      	mov	r0, r3
 801ba40:	370c      	adds	r7, #12
 801ba42:	46bd      	mov	sp, r7
 801ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba48:	4770      	bx	lr

0801ba4a <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE12getInputSizeEv>:
	uint16_t getInputSize() {
 801ba4a:	b480      	push	{r7}
 801ba4c:	b083      	sub	sp, #12
 801ba4e:	af00      	add	r7, sp, #0
 801ba50:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801ba52:	2308      	movs	r3, #8
	}
 801ba54:	4618      	mov	r0, r3
 801ba56:	370c      	adds	r7, #12
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5e:	4770      	bx	lr

0801ba60 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801ba60:	b480      	push	{r7}
 801ba62:	b083      	sub	sp, #12
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
		return 0;
 801ba68:	2300      	movs	r3, #0
	}
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	370c      	adds	r7, #12
 801ba6e:	46bd      	mov	sp, r7
 801ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba74:	4770      	bx	lr

0801ba76 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801ba76:	b580      	push	{r7, lr}
 801ba78:	b086      	sub	sp, #24
 801ba7a:	af00      	add	r7, sp, #0
 801ba7c:	60f8      	str	r0, [r7, #12]
 801ba7e:	60b9      	str	r1, [r7, #8]
 801ba80:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ba82:	2300      	movs	r3, #0
 801ba84:	75fb      	strb	r3, [r7, #23]
 801ba86:	e00b      	b.n	801baa0 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801ba88:	7dfb      	ldrb	r3, [r7, #23]
 801ba8a:	68ba      	ldr	r2, [r7, #8]
 801ba8c:	441a      	add	r2, r3
 801ba8e:	7dfb      	ldrb	r3, [r7, #23]
 801ba90:	7811      	ldrb	r1, [r2, #0]
 801ba92:	68fa      	ldr	r2, [r7, #12]
 801ba94:	4413      	add	r3, r2
 801ba96:	460a      	mov	r2, r1
 801ba98:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801ba9a:	7dfb      	ldrb	r3, [r7, #23]
 801ba9c:	3301      	adds	r3, #1
 801ba9e:	75fb      	strb	r3, [r7, #23]
 801baa0:	7dfb      	ldrb	r3, [r7, #23]
 801baa2:	2b07      	cmp	r3, #7
 801baa4:	d9f0      	bls.n	801ba88 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7executeEPhS2_+0x12>
		this->callback.call(this->input_data_union.data);
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	f103 0018 	add.w	r0, r3, #24
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	3308      	adds	r3, #8
 801bab0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bab4:	f000 fb4b 	bl	801c14e <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tE4callES0_>
		return this->getOutputSize();
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	3304      	adds	r3, #4
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	68f8      	ldr	r0, [r7, #12]
 801bac2:	4798      	blx	r3
 801bac4:	4603      	mov	r3, r0
	}
 801bac6:	4618      	mov	r0, r3
 801bac8:	3718      	adds	r7, #24
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd80      	pop	{r7, pc}

0801bace <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh>:
	void write(uint8_t *input) {
 801bace:	b480      	push	{r7}
 801bad0:	b085      	sub	sp, #20
 801bad2:	af00      	add	r7, sp, #0
 801bad4:	6078      	str	r0, [r7, #4]
 801bad6:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_WRITABLE) {
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	7d5b      	ldrb	r3, [r3, #21]
 801badc:	2b02      	cmp	r3, #2
 801bade:	d113      	bne.n	801bb08 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	691b      	ldr	r3, [r3, #16]
 801bae4:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801bae6:	2300      	movs	r3, #0
 801bae8:	73fb      	strb	r3, [r7, #15]
 801baea:	e00a      	b.n	801bb02 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh+0x34>
				target_address[i] = input[i];
 801baec:	7bfb      	ldrb	r3, [r7, #15]
 801baee:	683a      	ldr	r2, [r7, #0]
 801baf0:	441a      	add	r2, r3
 801baf2:	7bfb      	ldrb	r3, [r7, #15]
 801baf4:	68b9      	ldr	r1, [r7, #8]
 801baf6:	440b      	add	r3, r1
 801baf8:	7812      	ldrb	r2, [r2, #0]
 801bafa:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801bafc:	7bfb      	ldrb	r3, [r7, #15]
 801bafe:	3301      	adds	r3, #1
 801bb00:	73fb      	strb	r3, [r7, #15]
 801bb02:	7bfb      	ldrb	r3, [r7, #15]
 801bb04:	2b07      	cmp	r3, #7
 801bb06:	d9f1      	bls.n	801baec <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE5writeEPh+0x1e>
	}
 801bb08:	bf00      	nop
 801bb0a:	3714      	adds	r7, #20
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb12:	4770      	bx	lr

0801bb14 <_ZN24core_utils_RegisterEntryIv20buzzer_beep_struct_tE7getTypeEv>:
	register_entry_type_t getType() {
 801bb14:	b480      	push	{r7}
 801bb16:	b083      	sub	sp, #12
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
		return this->type;
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	7d5b      	ldrb	r3, [r3, #21]
	}
 801bb20:	4618      	mov	r0, r3
 801bb22:	370c      	adds	r7, #12
 801bb24:	46bd      	mov	sp, r7
 801bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb2a:	4770      	bx	lr

0801bb2c <_ZN24core_utils_RegisterEntryIhhE12getInputSizeEv>:
	uint16_t getInputSize() {
 801bb2c:	b480      	push	{r7}
 801bb2e:	b083      	sub	sp, #12
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
		return sizeof(input_type);
 801bb34:	2301      	movs	r3, #1
	}
 801bb36:	4618      	mov	r0, r3
 801bb38:	370c      	adds	r7, #12
 801bb3a:	46bd      	mov	sp, r7
 801bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb40:	4770      	bx	lr

0801bb42 <_ZN24core_utils_RegisterEntryIhhE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801bb42:	b480      	push	{r7}
 801bb44:	b083      	sub	sp, #12
 801bb46:	af00      	add	r7, sp, #0
 801bb48:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801bb4a:	2301      	movs	r3, #1
	}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	370c      	adds	r7, #12
 801bb50:	46bd      	mov	sp, r7
 801bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb56:	4770      	bx	lr

0801bb58 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b086      	sub	sp, #24
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	60f8      	str	r0, [r7, #12]
 801bb60:	60b9      	str	r1, [r7, #8]
 801bb62:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801bb64:	2300      	movs	r3, #0
 801bb66:	75fb      	strb	r3, [r7, #23]
 801bb68:	e00b      	b.n	801bb82 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801bb6a:	7dfb      	ldrb	r3, [r7, #23]
 801bb6c:	68ba      	ldr	r2, [r7, #8]
 801bb6e:	441a      	add	r2, r3
 801bb70:	7dfb      	ldrb	r3, [r7, #23]
 801bb72:	7811      	ldrb	r1, [r2, #0]
 801bb74:	68fa      	ldr	r2, [r7, #12]
 801bb76:	4413      	add	r3, r2
 801bb78:	460a      	mov	r2, r1
 801bb7a:	715a      	strb	r2, [r3, #5]
		for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801bb7c:	7dfb      	ldrb	r3, [r7, #23]
 801bb7e:	3301      	adds	r3, #1
 801bb80:	75fb      	strb	r3, [r7, #23]
 801bb82:	7dfb      	ldrb	r3, [r7, #23]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d0f0      	beq.n	801bb6a <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x12>
		this->callback.call(this->input_data_union.data,
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	f103 0010 	add.w	r0, r3, #16
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	7959      	ldrb	r1, [r3, #5]
				this->output_data_union_t.data);
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	3306      	adds	r3, #6
		this->callback.call(this->input_data_union.data,
 801bb96:	461a      	mov	r2, r3
 801bb98:	f000 faec 	bl	801c174 <_ZN19core_utils_CallbackIhhE4callEhRh>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	75bb      	strb	r3, [r7, #22]
 801bba0:	e00a      	b.n	801bbb8 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x60>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801bba2:	7dba      	ldrb	r2, [r7, #22]
 801bba4:	7dbb      	ldrb	r3, [r7, #22]
 801bba6:	6879      	ldr	r1, [r7, #4]
 801bba8:	440b      	add	r3, r1
 801bbaa:	68f9      	ldr	r1, [r7, #12]
 801bbac:	440a      	add	r2, r1
 801bbae:	7992      	ldrb	r2, [r2, #6]
 801bbb0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bbb2:	7dbb      	ldrb	r3, [r7, #22]
 801bbb4:	3301      	adds	r3, #1
 801bbb6:	75bb      	strb	r3, [r7, #22]
 801bbb8:	7dbb      	ldrb	r3, [r7, #22]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d0f1      	beq.n	801bba2 <_ZN24core_utils_RegisterEntryIhhE7executeEPhS1_+0x4a>
		return this->getOutputSize();
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	3304      	adds	r3, #4
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	68f8      	ldr	r0, [r7, #12]
 801bbc8:	4798      	blx	r3
 801bbca:	4603      	mov	r3, r0
	}
 801bbcc:	4618      	mov	r0, r3
 801bbce:	3718      	adds	r7, #24
 801bbd0:	46bd      	mov	sp, r7
 801bbd2:	bd80      	pop	{r7, pc}

0801bbd4 <_ZN24core_utils_RegisterEntryIhhE5writeEPh>:
	void write(uint8_t *input) {
 801bbd4:	b480      	push	{r7}
 801bbd6:	b085      	sub	sp, #20
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
 801bbdc:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	7b5b      	ldrb	r3, [r3, #13]
 801bbe2:	2b04      	cmp	r3, #4
 801bbe4:	d113      	bne.n	801bc0e <_ZN24core_utils_RegisterEntryIhhE5writeEPh+0x3a>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	689b      	ldr	r3, [r3, #8]
 801bbea:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801bbec:	2300      	movs	r3, #0
 801bbee:	73fb      	strb	r3, [r7, #15]
 801bbf0:	e00a      	b.n	801bc08 <_ZN24core_utils_RegisterEntryIhhE5writeEPh+0x34>
				target_address[i] = input[i];
 801bbf2:	7bfb      	ldrb	r3, [r7, #15]
 801bbf4:	683a      	ldr	r2, [r7, #0]
 801bbf6:	441a      	add	r2, r3
 801bbf8:	7bfb      	ldrb	r3, [r7, #15]
 801bbfa:	68b9      	ldr	r1, [r7, #8]
 801bbfc:	440b      	add	r3, r1
 801bbfe:	7812      	ldrb	r2, [r2, #0]
 801bc00:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(input_type); i++) {
 801bc02:	7bfb      	ldrb	r3, [r7, #15]
 801bc04:	3301      	adds	r3, #1
 801bc06:	73fb      	strb	r3, [r7, #15]
 801bc08:	7bfb      	ldrb	r3, [r7, #15]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d0f1      	beq.n	801bbf2 <_ZN24core_utils_RegisterEntryIhhE5writeEPh+0x1e>
	}
 801bc0e:	bf00      	nop
 801bc10:	3714      	adds	r7, #20
 801bc12:	46bd      	mov	sp, r7
 801bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc18:	4770      	bx	lr

0801bc1a <_ZN24core_utils_RegisterEntryIhhE4readEPh>:
	uint16_t read(uint8_t *output) {
 801bc1a:	b480      	push	{r7}
 801bc1c:	b085      	sub	sp, #20
 801bc1e:	af00      	add	r7, sp, #0
 801bc20:	6078      	str	r0, [r7, #4]
 801bc22:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READWRITEABLE) {
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	7b5b      	ldrb	r3, [r3, #13]
 801bc28:	2b04      	cmp	r3, #4
 801bc2a:	d115      	bne.n	801bc58 <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	689b      	ldr	r3, [r3, #8]
 801bc30:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bc32:	2300      	movs	r3, #0
 801bc34:	73fb      	strb	r3, [r7, #15]
 801bc36:	e00a      	b.n	801bc4e <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x34>
				output[i] = target_address[i];
 801bc38:	7bfb      	ldrb	r3, [r7, #15]
 801bc3a:	68ba      	ldr	r2, [r7, #8]
 801bc3c:	441a      	add	r2, r3
 801bc3e:	7bfb      	ldrb	r3, [r7, #15]
 801bc40:	6839      	ldr	r1, [r7, #0]
 801bc42:	440b      	add	r3, r1
 801bc44:	7812      	ldrb	r2, [r2, #0]
 801bc46:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bc48:	7bfb      	ldrb	r3, [r7, #15]
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	73fb      	strb	r3, [r7, #15]
 801bc4e:	7bfb      	ldrb	r3, [r7, #15]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d0f1      	beq.n	801bc38 <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x1e>
			return sizeof(output_type);
 801bc54:	2301      	movs	r3, #1
 801bc56:	e000      	b.n	801bc5a <_ZN24core_utils_RegisterEntryIhhE4readEPh+0x40>
		return 0;
 801bc58:	2300      	movs	r3, #0
	}
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	3714      	adds	r7, #20
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc64:	4770      	bx	lr

0801bc66 <_ZN24core_utils_RegisterEntryIhhE7getTypeEv>:
	register_entry_type_t getType() {
 801bc66:	b480      	push	{r7}
 801bc68:	b083      	sub	sp, #12
 801bc6a:	af00      	add	r7, sp, #0
 801bc6c:	6078      	str	r0, [r7, #4]
		return this->type;
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	7b5b      	ldrb	r3, [r3, #13]
	}
 801bc72:	4618      	mov	r0, r3
 801bc74:	370c      	adds	r7, #12
 801bc76:	46bd      	mov	sp, r7
 801bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7c:	4770      	bx	lr

0801bc7e <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801bc7e:	b480      	push	{r7}
 801bc80:	b083      	sub	sp, #12
 801bc82:	af00      	add	r7, sp, #0
 801bc84:	6078      	str	r0, [r7, #4]
		return 0;
 801bc86:	2300      	movs	r3, #0
	}
 801bc88:	4618      	mov	r0, r3
 801bc8a:	370c      	adds	r7, #12
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc92:	4770      	bx	lr

0801bc94 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801bc94:	b480      	push	{r7}
 801bc96:	b083      	sub	sp, #12
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801bc9c:	2302      	movs	r3, #2
	}
 801bc9e:	4618      	mov	r0, r3
 801bca0:	370c      	adds	r7, #12
 801bca2:	46bd      	mov	sp, r7
 801bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bca8:	4770      	bx	lr

0801bcaa <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801bcaa:	b580      	push	{r7, lr}
 801bcac:	b086      	sub	sp, #24
 801bcae:	af00      	add	r7, sp, #0
 801bcb0:	60f8      	str	r0, [r7, #12]
 801bcb2:	60b9      	str	r1, [r7, #8]
 801bcb4:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	f103 0210 	add.w	r2, r3, #16
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	3305      	adds	r3, #5
 801bcc0:	4619      	mov	r1, r3
 801bcc2:	4610      	mov	r0, r2
 801bcc4:	f000 fa6c 	bl	801c1a0 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bcc8:	2300      	movs	r3, #0
 801bcca:	75fb      	strb	r3, [r7, #23]
 801bccc:	e00a      	b.n	801bce4 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801bcce:	7dfa      	ldrb	r2, [r7, #23]
 801bcd0:	7dfb      	ldrb	r3, [r7, #23]
 801bcd2:	6879      	ldr	r1, [r7, #4]
 801bcd4:	440b      	add	r3, r1
 801bcd6:	68f9      	ldr	r1, [r7, #12]
 801bcd8:	440a      	add	r2, r1
 801bcda:	7952      	ldrb	r2, [r2, #5]
 801bcdc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bcde:	7dfb      	ldrb	r3, [r7, #23]
 801bce0:	3301      	adds	r3, #1
 801bce2:	75fb      	strb	r3, [r7, #23]
 801bce4:	7dfb      	ldrb	r3, [r7, #23]
 801bce6:	2b01      	cmp	r3, #1
 801bce8:	d9f1      	bls.n	801bcce <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	3304      	adds	r3, #4
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	68f8      	ldr	r0, [r7, #12]
 801bcf4:	4798      	blx	r3
 801bcf6:	4603      	mov	r3, r0
	}
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	3718      	adds	r7, #24
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd80      	pop	{r7, pc}

0801bd00 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801bd00:	b480      	push	{r7}
 801bd02:	b085      	sub	sp, #20
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
 801bd08:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	7b5b      	ldrb	r3, [r3, #13]
 801bd0e:	2b03      	cmp	r3, #3
 801bd10:	d115      	bne.n	801bd3e <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	689b      	ldr	r3, [r3, #8]
 801bd16:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bd18:	2300      	movs	r3, #0
 801bd1a:	73fb      	strb	r3, [r7, #15]
 801bd1c:	e00a      	b.n	801bd34 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x34>
				output[i] = target_address[i];
 801bd1e:	7bfb      	ldrb	r3, [r7, #15]
 801bd20:	68ba      	ldr	r2, [r7, #8]
 801bd22:	441a      	add	r2, r3
 801bd24:	7bfb      	ldrb	r3, [r7, #15]
 801bd26:	6839      	ldr	r1, [r7, #0]
 801bd28:	440b      	add	r3, r1
 801bd2a:	7812      	ldrb	r2, [r2, #0]
 801bd2c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bd2e:	7bfb      	ldrb	r3, [r7, #15]
 801bd30:	3301      	adds	r3, #1
 801bd32:	73fb      	strb	r3, [r7, #15]
 801bd34:	7bfb      	ldrb	r3, [r7, #15]
 801bd36:	2b01      	cmp	r3, #1
 801bd38:	d9f1      	bls.n	801bd1e <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x1e>
			return sizeof(output_type);
 801bd3a:	2302      	movs	r3, #2
 801bd3c:	e000      	b.n	801bd40 <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE4readEPh+0x40>
		return 0;
 801bd3e:	2300      	movs	r3, #0
	}
 801bd40:	4618      	mov	r0, r3
 801bd42:	3714      	adds	r7, #20
 801bd44:	46bd      	mov	sp, r7
 801bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd4a:	4770      	bx	lr

0801bd4c <_ZN24core_utils_RegisterEntryI25twipr_firmware_revision_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801bd4c:	b480      	push	{r7}
 801bd4e:	b083      	sub	sp, #12
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
		return this->type;
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	7b5b      	ldrb	r3, [r3, #13]
	}
 801bd58:	4618      	mov	r0, r3
 801bd5a:	370c      	adds	r7, #12
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd62:	4770      	bx	lr

0801bd64 <_ZN24core_utils_RegisterEntryImvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801bd64:	b480      	push	{r7}
 801bd66:	b083      	sub	sp, #12
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
		return 0;
 801bd6c:	2300      	movs	r3, #0
	}
 801bd6e:	4618      	mov	r0, r3
 801bd70:	370c      	adds	r7, #12
 801bd72:	46bd      	mov	sp, r7
 801bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd78:	4770      	bx	lr

0801bd7a <_ZN24core_utils_RegisterEntryImvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801bd7a:	b480      	push	{r7}
 801bd7c:	b083      	sub	sp, #12
 801bd7e:	af00      	add	r7, sp, #0
 801bd80:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801bd82:	2304      	movs	r3, #4
	}
 801bd84:	4618      	mov	r0, r3
 801bd86:	370c      	adds	r7, #12
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8e:	4770      	bx	lr

0801bd90 <_ZN24core_utils_RegisterEntryImvE7executeEPhS1_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b086      	sub	sp, #24
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	60f8      	str	r0, [r7, #12]
 801bd98:	60b9      	str	r1, [r7, #8]
 801bd9a:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	f103 0214 	add.w	r2, r3, #20
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	3308      	adds	r3, #8
 801bda6:	4619      	mov	r1, r3
 801bda8:	4610      	mov	r0, r2
 801bdaa:	f000 fa0f 	bl	801c1cc <_ZN19core_utils_CallbackImvE4callERm>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bdae:	2300      	movs	r3, #0
 801bdb0:	75fb      	strb	r3, [r7, #23]
 801bdb2:	e00a      	b.n	801bdca <_ZN24core_utils_RegisterEntryImvE7executeEPhS1_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801bdb4:	7dfa      	ldrb	r2, [r7, #23]
 801bdb6:	7dfb      	ldrb	r3, [r7, #23]
 801bdb8:	6879      	ldr	r1, [r7, #4]
 801bdba:	440b      	add	r3, r1
 801bdbc:	68f9      	ldr	r1, [r7, #12]
 801bdbe:	440a      	add	r2, r1
 801bdc0:	7a12      	ldrb	r2, [r2, #8]
 801bdc2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bdc4:	7dfb      	ldrb	r3, [r7, #23]
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	75fb      	strb	r3, [r7, #23]
 801bdca:	7dfb      	ldrb	r3, [r7, #23]
 801bdcc:	2b03      	cmp	r3, #3
 801bdce:	d9f1      	bls.n	801bdb4 <_ZN24core_utils_RegisterEntryImvE7executeEPhS1_+0x24>
		return this->getOutputSize();
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	3304      	adds	r3, #4
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	68f8      	ldr	r0, [r7, #12]
 801bdda:	4798      	blx	r3
 801bddc:	4603      	mov	r3, r0
	}
 801bdde:	4618      	mov	r0, r3
 801bde0:	3718      	adds	r7, #24
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}

0801bde6 <_ZN24core_utils_RegisterEntryImvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801bde6:	b480      	push	{r7}
 801bde8:	b085      	sub	sp, #20
 801bdea:	af00      	add	r7, sp, #0
 801bdec:	6078      	str	r0, [r7, #4]
 801bdee:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	7c5b      	ldrb	r3, [r3, #17]
 801bdf4:	2b03      	cmp	r3, #3
 801bdf6:	d115      	bne.n	801be24 <_ZN24core_utils_RegisterEntryImvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	68db      	ldr	r3, [r3, #12]
 801bdfc:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bdfe:	2300      	movs	r3, #0
 801be00:	73fb      	strb	r3, [r7, #15]
 801be02:	e00a      	b.n	801be1a <_ZN24core_utils_RegisterEntryImvE4readEPh+0x34>
				output[i] = target_address[i];
 801be04:	7bfb      	ldrb	r3, [r7, #15]
 801be06:	68ba      	ldr	r2, [r7, #8]
 801be08:	441a      	add	r2, r3
 801be0a:	7bfb      	ldrb	r3, [r7, #15]
 801be0c:	6839      	ldr	r1, [r7, #0]
 801be0e:	440b      	add	r3, r1
 801be10:	7812      	ldrb	r2, [r2, #0]
 801be12:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801be14:	7bfb      	ldrb	r3, [r7, #15]
 801be16:	3301      	adds	r3, #1
 801be18:	73fb      	strb	r3, [r7, #15]
 801be1a:	7bfb      	ldrb	r3, [r7, #15]
 801be1c:	2b03      	cmp	r3, #3
 801be1e:	d9f1      	bls.n	801be04 <_ZN24core_utils_RegisterEntryImvE4readEPh+0x1e>
			return sizeof(output_type);
 801be20:	2304      	movs	r3, #4
 801be22:	e000      	b.n	801be26 <_ZN24core_utils_RegisterEntryImvE4readEPh+0x40>
		return 0;
 801be24:	2300      	movs	r3, #0
	}
 801be26:	4618      	mov	r0, r3
 801be28:	3714      	adds	r7, #20
 801be2a:	46bd      	mov	sp, r7
 801be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be30:	4770      	bx	lr

0801be32 <_ZN24core_utils_RegisterEntryImvE7getTypeEv>:
	register_entry_type_t getType() {
 801be32:	b480      	push	{r7}
 801be34:	b083      	sub	sp, #12
 801be36:	af00      	add	r7, sp, #0
 801be38:	6078      	str	r0, [r7, #4]
		return this->type;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	7c5b      	ldrb	r3, [r3, #17]
	}
 801be3e:	4618      	mov	r0, r3
 801be40:	370c      	adds	r7, #12
 801be42:	46bd      	mov	sp, r7
 801be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be48:	4770      	bx	lr

0801be4a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE12getInputSizeEv>:
	uint16_t getInputSize() {
 801be4a:	b480      	push	{r7}
 801be4c:	b083      	sub	sp, #12
 801be4e:	af00      	add	r7, sp, #0
 801be50:	6078      	str	r0, [r7, #4]
		return 0;
 801be52:	2300      	movs	r3, #0
	}
 801be54:	4618      	mov	r0, r3
 801be56:	370c      	adds	r7, #12
 801be58:	46bd      	mov	sp, r7
 801be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5e:	4770      	bx	lr

0801be60 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE13getOutputSizeEv>:
	uint16_t getOutputSize() {
 801be60:	b480      	push	{r7}
 801be62:	b083      	sub	sp, #12
 801be64:	af00      	add	r7, sp, #0
 801be66:	6078      	str	r0, [r7, #4]
		return sizeof(output_type);
 801be68:	2301      	movs	r3, #1
	}
 801be6a:	4618      	mov	r0, r3
 801be6c:	370c      	adds	r7, #12
 801be6e:	46bd      	mov	sp, r7
 801be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be74:	4770      	bx	lr

0801be76 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7executeEPhS2_>:
	uint16_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801be76:	b580      	push	{r7, lr}
 801be78:	b086      	sub	sp, #24
 801be7a:	af00      	add	r7, sp, #0
 801be7c:	60f8      	str	r0, [r7, #12]
 801be7e:	60b9      	str	r1, [r7, #8]
 801be80:	607a      	str	r2, [r7, #4]
		this->callback.call(this->output_data_union_t.data);
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	f103 0210 	add.w	r2, r3, #16
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	3305      	adds	r3, #5
 801be8c:	4619      	mov	r1, r3
 801be8e:	4610      	mov	r0, r2
 801be90:	f000 f9ad 	bl	801c1ee <_ZN19core_utils_CallbackI22twipr_firmware_state_tvE4callERS0_>
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801be94:	2300      	movs	r3, #0
 801be96:	75fb      	strb	r3, [r7, #23]
 801be98:	e00a      	b.n	801beb0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7executeEPhS2_+0x3a>
			output_buffer[i] = this->output_data_union_t.data_bytes[i];
 801be9a:	7dfa      	ldrb	r2, [r7, #23]
 801be9c:	7dfb      	ldrb	r3, [r7, #23]
 801be9e:	6879      	ldr	r1, [r7, #4]
 801bea0:	440b      	add	r3, r1
 801bea2:	68f9      	ldr	r1, [r7, #12]
 801bea4:	440a      	add	r2, r1
 801bea6:	7952      	ldrb	r2, [r2, #5]
 801bea8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801beaa:	7dfb      	ldrb	r3, [r7, #23]
 801beac:	3301      	adds	r3, #1
 801beae:	75fb      	strb	r3, [r7, #23]
 801beb0:	7dfb      	ldrb	r3, [r7, #23]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d0f1      	beq.n	801be9a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7executeEPhS2_+0x24>
		return this->getOutputSize();
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	3304      	adds	r3, #4
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	68f8      	ldr	r0, [r7, #12]
 801bec0:	4798      	blx	r3
 801bec2:	4603      	mov	r3, r0
	}
 801bec4:	4618      	mov	r0, r3
 801bec6:	3718      	adds	r7, #24
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd80      	pop	{r7, pc}

0801becc <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh>:
	uint16_t read(uint8_t *output) {
 801becc:	b480      	push	{r7}
 801bece:	b085      	sub	sp, #20
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
 801bed4:	6039      	str	r1, [r7, #0]
		if (this->type == REGISTER_ENTRY_TYPE_READABLE) {
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	7b5b      	ldrb	r3, [r3, #13]
 801beda:	2b03      	cmp	r3, #3
 801bedc:	d115      	bne.n	801bf0a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x3e>
			uint8_t *target_address = reinterpret_cast<uint8_t*>(this->data);
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	689b      	ldr	r3, [r3, #8]
 801bee2:	60bb      	str	r3, [r7, #8]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801bee4:	2300      	movs	r3, #0
 801bee6:	73fb      	strb	r3, [r7, #15]
 801bee8:	e00a      	b.n	801bf00 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x34>
				output[i] = target_address[i];
 801beea:	7bfb      	ldrb	r3, [r7, #15]
 801beec:	68ba      	ldr	r2, [r7, #8]
 801beee:	441a      	add	r2, r3
 801bef0:	7bfb      	ldrb	r3, [r7, #15]
 801bef2:	6839      	ldr	r1, [r7, #0]
 801bef4:	440b      	add	r3, r1
 801bef6:	7812      	ldrb	r2, [r2, #0]
 801bef8:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < sizeof(output_type); i++) {
 801befa:	7bfb      	ldrb	r3, [r7, #15]
 801befc:	3301      	adds	r3, #1
 801befe:	73fb      	strb	r3, [r7, #15]
 801bf00:	7bfb      	ldrb	r3, [r7, #15]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d0f1      	beq.n	801beea <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x1e>
			return sizeof(output_type);
 801bf06:	2301      	movs	r3, #1
 801bf08:	e000      	b.n	801bf0c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE4readEPh+0x40>
		return 0;
 801bf0a:	2300      	movs	r3, #0
	}
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	3714      	adds	r7, #20
 801bf10:	46bd      	mov	sp, r7
 801bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf16:	4770      	bx	lr

0801bf18 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tvE7getTypeEv>:
	register_entry_type_t getType() {
 801bf18:	b480      	push	{r7}
 801bf1a:	b083      	sub	sp, #12
 801bf1c:	af00      	add	r7, sp, #0
 801bf1e:	6078      	str	r0, [r7, #4]
		return this->type;
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	7b5b      	ldrb	r3, [r3, #13]
	}
 801bf24:	4618      	mov	r0, r3
 801bf26:	370c      	adds	r7, #12
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf2e:	4770      	bx	lr

0801bf30 <_ZN19core_utils_CallbackIv31twipr_sequencer_sequence_data_tE4callES0_>:
	void call(input_type input) {
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b084      	sub	sp, #16
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	60f8      	str	r0, [r7, #12]
 801bf38:	4638      	mov	r0, r7
 801bf3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		this->_fp(input);
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	f103 0008 	add.w	r0, r3, #8
 801bf44:	463b      	mov	r3, r7
 801bf46:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bf48:	f000 f963 	bl	801c212 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEclES0_>
	}
 801bf4c:	bf00      	nop
 801bf4e:	3710      	adds	r7, #16
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}

0801bf54 <_ZN19core_utils_CallbackI29twipr_control_configuration_tvE4callERS0_>:
	void call(output_type &output) {
 801bf54:	b5b0      	push	{r4, r5, r7, lr}
 801bf56:	b090      	sub	sp, #64	@ 0x40
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801bf5c:	63b9      	str	r1, [r7, #56]	@ 0x38
		output = this->_fp();
 801bf5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf60:	f103 0208 	add.w	r2, r3, #8
 801bf64:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801bf66:	463b      	mov	r3, r7
 801bf68:	4611      	mov	r1, r2
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f000 f961 	bl	801c232 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEclEv>
 801bf70:	4625      	mov	r5, r4
 801bf72:	463c      	mov	r4, r7
 801bf74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf80:	e894 0003 	ldmia.w	r4, {r0, r1}
 801bf84:	e885 0003 	stmia.w	r5, {r0, r1}
	}
 801bf88:	bf00      	nop
 801bf8a:	3740      	adds	r7, #64	@ 0x40
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	bdb0      	pop	{r4, r5, r7, pc}

0801bf90 <_ZN19core_utils_CallbackIhA3_fE4callEPfRh>:
	void call(input_type argument, output_type &output) {
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b084      	sub	sp, #16
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	60f8      	str	r0, [r7, #12]
 801bf98:	60b9      	str	r1, [r7, #8]
 801bf9a:	607a      	str	r2, [r7, #4]
		output = this->function_pointer(argument);
 801bf9c:	68fb      	ldr	r3, [r7, #12]
 801bf9e:	3308      	adds	r3, #8
 801bfa0:	68b9      	ldr	r1, [r7, #8]
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	f000 f954 	bl	801c250 <_ZN26core_utils_FunctionPointerIhA3_fEclEPf>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	461a      	mov	r2, r3
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	701a      	strb	r2, [r3, #0]
	}
 801bfb0:	bf00      	nop
 801bfb2:	3710      	adds	r7, #16
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}

0801bfb8 <_ZN19core_utils_CallbackIv27twipr_speed_control_input_tE4callES0_>:
	void call(input_type input) {
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b084      	sub	sp, #16
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	60f8      	str	r0, [r7, #12]
 801bfc0:	eeb0 7a40 	vmov.f32	s14, s0
 801bfc4:	eef0 7a60 	vmov.f32	s15, s1
 801bfc8:	ed87 7a01 	vstr	s14, [r7, #4]
 801bfcc:	edc7 7a02 	vstr	s15, [r7, #8]
		this->_fp(input);
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	3308      	adds	r3, #8
 801bfd4:	ed97 7a01 	vldr	s14, [r7, #4]
 801bfd8:	edd7 7a02 	vldr	s15, [r7, #8]
 801bfdc:	eeb0 0a47 	vmov.f32	s0, s14
 801bfe0:	eef0 0a67 	vmov.f32	s1, s15
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	f000 f941 	bl	801c26c <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEclES0_>
	}
 801bfea:	bf00      	nop
 801bfec:	3710      	adds	r7, #16
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bd80      	pop	{r7, pc}

0801bff2 <_ZN19core_utils_CallbackIv31twipr_balancing_control_input_tE4callES0_>:
	void call(input_type input) {
 801bff2:	b580      	push	{r7, lr}
 801bff4:	b084      	sub	sp, #16
 801bff6:	af00      	add	r7, sp, #0
 801bff8:	60f8      	str	r0, [r7, #12]
 801bffa:	eeb0 7a40 	vmov.f32	s14, s0
 801bffe:	eef0 7a60 	vmov.f32	s15, s1
 801c002:	ed87 7a01 	vstr	s14, [r7, #4]
 801c006:	edc7 7a02 	vstr	s15, [r7, #8]
		this->_fp(input);
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	3308      	adds	r3, #8
 801c00e:	ed97 7a01 	vldr	s14, [r7, #4]
 801c012:	edd7 7a02 	vldr	s15, [r7, #8]
 801c016:	eeb0 0a47 	vmov.f32	s0, s14
 801c01a:	eef0 0a67 	vmov.f32	s1, s15
 801c01e:	4618      	mov	r0, r3
 801c020:	f000 f93f 	bl	801c2a2 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEclES0_>
	}
 801c024:	bf00      	nop
 801c026:	3710      	adds	r7, #16
 801c028:	46bd      	mov	sp, r7
 801c02a:	bd80      	pop	{r7, pc}

0801c02c <_ZN19core_utils_CallbackIv28twipr_control_direct_input_tE4callES0_>:
	void call(input_type input) {
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b084      	sub	sp, #16
 801c030:	af00      	add	r7, sp, #0
 801c032:	60f8      	str	r0, [r7, #12]
 801c034:	eeb0 7a40 	vmov.f32	s14, s0
 801c038:	eef0 7a60 	vmov.f32	s15, s1
 801c03c:	ed87 7a01 	vstr	s14, [r7, #4]
 801c040:	edc7 7a02 	vstr	s15, [r7, #8]
		this->_fp(input);
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	3308      	adds	r3, #8
 801c048:	ed97 7a01 	vldr	s14, [r7, #4]
 801c04c:	edd7 7a02 	vldr	s15, [r7, #8]
 801c050:	eeb0 0a47 	vmov.f32	s0, s14
 801c054:	eef0 0a67 	vmov.f32	s1, s15
 801c058:	4618      	mov	r0, r3
 801c05a:	f000 f93d 	bl	801c2d8 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEclES0_>
	}
 801c05e:	bf00      	nop
 801c060:	3710      	adds	r7, #16
 801c062:	46bd      	mov	sp, r7
 801c064:	bd80      	pop	{r7, pc}

0801c066 <_ZN19core_utils_CallbackIhA8_fE4callEPfRh>:
	void call(input_type argument, output_type &output) {
 801c066:	b580      	push	{r7, lr}
 801c068:	b084      	sub	sp, #16
 801c06a:	af00      	add	r7, sp, #0
 801c06c:	60f8      	str	r0, [r7, #12]
 801c06e:	60b9      	str	r1, [r7, #8]
 801c070:	607a      	str	r2, [r7, #4]
		output = this->function_pointer(argument);
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	3308      	adds	r3, #8
 801c076:	68b9      	ldr	r1, [r7, #8]
 801c078:	4618      	mov	r0, r3
 801c07a:	f000 f948 	bl	801c30e <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>
 801c07e:	4603      	mov	r3, r0
 801c080:	461a      	mov	r2, r3
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	701a      	strb	r2, [r3, #0]
	}
 801c086:	bf00      	nop
 801c088:	3710      	adds	r7, #16
 801c08a:	46bd      	mov	sp, r7
 801c08c:	bd80      	pop	{r7, pc}

0801c08e <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_Rh>:
	void call(input_type argument, output_type &output) {
 801c08e:	b580      	push	{r7, lr}
 801c090:	b084      	sub	sp, #16
 801c092:	af00      	add	r7, sp, #0
 801c094:	60f8      	str	r0, [r7, #12]
 801c096:	460b      	mov	r3, r1
 801c098:	607a      	str	r2, [r7, #4]
 801c09a:	72fb      	strb	r3, [r7, #11]
		output = this->function_pointer(argument);
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	3308      	adds	r3, #8
 801c0a0:	7afa      	ldrb	r2, [r7, #11]
 801c0a2:	4611      	mov	r1, r2
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f000 f940 	bl	801c32a <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	461a      	mov	r2, r3
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	701a      	strb	r2, [r3, #0]
	}
 801c0b2:	bf00      	nop
 801c0b4:	3710      	adds	r7, #16
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}

0801c0ba <_ZN19core_utils_CallbackI20twipr_control_mode_tvE4callERS0_>:
	void call(output_type &output) {
 801c0ba:	b580      	push	{r7, lr}
 801c0bc:	b082      	sub	sp, #8
 801c0be:	af00      	add	r7, sp, #0
 801c0c0:	6078      	str	r0, [r7, #4]
 801c0c2:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	3308      	adds	r3, #8
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f000 f93e 	bl	801c34a <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEclEv>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	461a      	mov	r2, r3
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	701a      	strb	r2, [r3, #0]
	}
 801c0d6:	bf00      	nop
 801c0d8:	3708      	adds	r7, #8
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}

0801c0de <_ZN19core_utils_CallbackIv18rgb_color_struct_tE4callES0_>:
	void call(input_type input) {
 801c0de:	b580      	push	{r7, lr}
 801c0e0:	b082      	sub	sp, #8
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	6078      	str	r0, [r7, #4]
 801c0e6:	6039      	str	r1, [r7, #0]
		this->_fp(input);
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	3308      	adds	r3, #8
 801c0ec:	6839      	ldr	r1, [r7, #0]
 801c0ee:	4618      	mov	r0, r3
 801c0f0:	f000 f937 	bl	801c362 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEclES0_>
	}
 801c0f4:	bf00      	nop
 801c0f6:	3708      	adds	r7, #8
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	bd80      	pop	{r7, pc}

0801c0fc <_ZN19core_utils_CallbackIffE4callEfRf>:
	void call(input_type argument, output_type &output) {
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b084      	sub	sp, #16
 801c100:	af00      	add	r7, sp, #0
 801c102:	60f8      	str	r0, [r7, #12]
 801c104:	ed87 0a02 	vstr	s0, [r7, #8]
 801c108:	6079      	str	r1, [r7, #4]
		output = this->function_pointer(argument);
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	3308      	adds	r3, #8
 801c10e:	ed97 0a02 	vldr	s0, [r7, #8]
 801c112:	4618      	mov	r0, r3
 801c114:	f000 f932 	bl	801c37c <_ZN26core_utils_FunctionPointerIffEclEf>
 801c118:	eef0 7a40 	vmov.f32	s15, s0
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	edc3 7a00 	vstr	s15, [r3]
	}
 801c122:	bf00      	nop
 801c124:	3710      	adds	r7, #16
 801c126:	46bd      	mov	sp, r7
 801c128:	bd80      	pop	{r7, pc}

0801c12a <_ZN19core_utils_CallbackIhvE4callERh>:
	void call(output_type &output) {
 801c12a:	b580      	push	{r7, lr}
 801c12c:	b082      	sub	sp, #8
 801c12e:	af00      	add	r7, sp, #0
 801c130:	6078      	str	r0, [r7, #4]
 801c132:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	3308      	adds	r3, #8
 801c138:	4618      	mov	r0, r3
 801c13a:	f000 f931 	bl	801c3a0 <_ZN26core_utils_FunctionPointerIhvEclEv>
 801c13e:	4603      	mov	r3, r0
 801c140:	461a      	mov	r2, r3
 801c142:	683b      	ldr	r3, [r7, #0]
 801c144:	701a      	strb	r2, [r3, #0]
	}
 801c146:	bf00      	nop
 801c148:	3708      	adds	r7, #8
 801c14a:	46bd      	mov	sp, r7
 801c14c:	bd80      	pop	{r7, pc}

0801c14e <_ZN19core_utils_CallbackIv20buzzer_beep_struct_tE4callES0_>:
	void call(input_type input) {
 801c14e:	b580      	push	{r7, lr}
 801c150:	b084      	sub	sp, #16
 801c152:	af00      	add	r7, sp, #0
 801c154:	60f8      	str	r0, [r7, #12]
 801c156:	1d3b      	adds	r3, r7, #4
 801c158:	e883 0006 	stmia.w	r3, {r1, r2}
		this->_fp(input);
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	f103 0008 	add.w	r0, r3, #8
 801c162:	1d3b      	adds	r3, r7, #4
 801c164:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c168:	f000 f926 	bl	801c3b8 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEclES0_>
	}
 801c16c:	bf00      	nop
 801c16e:	3710      	adds	r7, #16
 801c170:	46bd      	mov	sp, r7
 801c172:	bd80      	pop	{r7, pc}

0801c174 <_ZN19core_utils_CallbackIhhE4callEhRh>:
	void call(input_type argument, output_type &output) {
 801c174:	b580      	push	{r7, lr}
 801c176:	b084      	sub	sp, #16
 801c178:	af00      	add	r7, sp, #0
 801c17a:	60f8      	str	r0, [r7, #12]
 801c17c:	460b      	mov	r3, r1
 801c17e:	607a      	str	r2, [r7, #4]
 801c180:	72fb      	strb	r3, [r7, #11]
		output = this->function_pointer(argument);
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	3308      	adds	r3, #8
 801c186:	7afa      	ldrb	r2, [r7, #11]
 801c188:	4611      	mov	r1, r2
 801c18a:	4618      	mov	r0, r3
 801c18c:	f000 f925 	bl	801c3da <_ZN26core_utils_FunctionPointerIhhEclEh>
 801c190:	4603      	mov	r3, r0
 801c192:	461a      	mov	r2, r3
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	701a      	strb	r2, [r3, #0]
	}
 801c198:	bf00      	nop
 801c19a:	3710      	adds	r7, #16
 801c19c:	46bd      	mov	sp, r7
 801c19e:	bd80      	pop	{r7, pc}

0801c1a0 <_ZN19core_utils_CallbackI25twipr_firmware_revision_tvE4callERS0_>:
	void call(output_type &output) {
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b082      	sub	sp, #8
 801c1a4:	af00      	add	r7, sp, #0
 801c1a6:	6078      	str	r0, [r7, #4]
 801c1a8:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	3308      	adds	r3, #8
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	f000 f923 	bl	801c3fa <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEclEv>
 801c1b4:	4602      	mov	r2, r0
 801c1b6:	683b      	ldr	r3, [r7, #0]
 801c1b8:	b212      	sxth	r2, r2
 801c1ba:	4611      	mov	r1, r2
 801c1bc:	7019      	strb	r1, [r3, #0]
 801c1be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c1c2:	705a      	strb	r2, [r3, #1]
	}
 801c1c4:	bf00      	nop
 801c1c6:	3708      	adds	r7, #8
 801c1c8:	46bd      	mov	sp, r7
 801c1ca:	bd80      	pop	{r7, pc}

0801c1cc <_ZN19core_utils_CallbackImvE4callERm>:
	void call(output_type &output) {
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
 801c1d4:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	3308      	adds	r3, #8
 801c1da:	4618      	mov	r0, r3
 801c1dc:	f000 f921 	bl	801c422 <_ZN26core_utils_FunctionPointerImvEclEv>
 801c1e0:	4602      	mov	r2, r0
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	601a      	str	r2, [r3, #0]
	}
 801c1e6:	bf00      	nop
 801c1e8:	3708      	adds	r7, #8
 801c1ea:	46bd      	mov	sp, r7
 801c1ec:	bd80      	pop	{r7, pc}

0801c1ee <_ZN19core_utils_CallbackI22twipr_firmware_state_tvE4callERS0_>:
	void call(output_type &output) {
 801c1ee:	b580      	push	{r7, lr}
 801c1f0:	b082      	sub	sp, #8
 801c1f2:	af00      	add	r7, sp, #0
 801c1f4:	6078      	str	r0, [r7, #4]
 801c1f6:	6039      	str	r1, [r7, #0]
		output = this->_fp();
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	3308      	adds	r3, #8
 801c1fc:	4618      	mov	r0, r3
 801c1fe:	f000 f91c 	bl	801c43a <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEclEv>
 801c202:	4603      	mov	r3, r0
 801c204:	461a      	mov	r2, r3
 801c206:	683b      	ldr	r3, [r7, #0]
 801c208:	701a      	strb	r2, [r3, #0]
	}
 801c20a:	bf00      	nop
 801c20c:	3708      	adds	r7, #8
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}

0801c212 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tEclES0_>:
    R operator ()(A1 a) {
 801c212:	b580      	push	{r7, lr}
 801c214:	b084      	sub	sp, #16
 801c216:	af00      	add	r7, sp, #0
 801c218:	60f8      	str	r0, [r7, #12]
 801c21a:	4638      	mov	r0, r7
 801c21c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        return call(a);
 801c220:	463b      	mov	r3, r7
 801c222:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c224:	68f8      	ldr	r0, [r7, #12]
 801c226:	f000 f914 	bl	801c452 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_>
 801c22a:	bf00      	nop
    }
 801c22c:	3710      	adds	r7, #16
 801c22e:	46bd      	mov	sp, r7
 801c230:	bd80      	pop	{r7, pc}

0801c232 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvEclEv>:
    R operator ()(void) {
 801c232:	b580      	push	{r7, lr}
 801c234:	b082      	sub	sp, #8
 801c236:	af00      	add	r7, sp, #0
 801c238:	6078      	str	r0, [r7, #4]
 801c23a:	6039      	str	r1, [r7, #0]
        return call();
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	6839      	ldr	r1, [r7, #0]
 801c240:	4618      	mov	r0, r3
 801c242:	f000 f934 	bl	801c4ae <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv>
 801c246:	bf00      	nop
    }
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	3708      	adds	r7, #8
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bd80      	pop	{r7, pc}

0801c250 <_ZN26core_utils_FunctionPointerIhA3_fEclEPf>:
    R operator ()(A1 a) {
 801c250:	b580      	push	{r7, lr}
 801c252:	b082      	sub	sp, #8
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
 801c258:	6039      	str	r1, [r7, #0]
        return call(a);
 801c25a:	6839      	ldr	r1, [r7, #0]
 801c25c:	6878      	ldr	r0, [r7, #4]
 801c25e:	f000 f955 	bl	801c50c <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf>
 801c262:	4603      	mov	r3, r0
    }
 801c264:	4618      	mov	r0, r3
 801c266:	3708      	adds	r7, #8
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}

0801c26c <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tEclES0_>:
    R operator ()(A1 a) {
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b084      	sub	sp, #16
 801c270:	af00      	add	r7, sp, #0
 801c272:	60f8      	str	r0, [r7, #12]
 801c274:	eeb0 7a40 	vmov.f32	s14, s0
 801c278:	eef0 7a60 	vmov.f32	s15, s1
 801c27c:	ed87 7a01 	vstr	s14, [r7, #4]
 801c280:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 801c284:	ed97 7a01 	vldr	s14, [r7, #4]
 801c288:	edd7 7a02 	vldr	s15, [r7, #8]
 801c28c:	eeb0 0a47 	vmov.f32	s0, s14
 801c290:	eef0 0a67 	vmov.f32	s1, s15
 801c294:	68f8      	ldr	r0, [r7, #12]
 801c296:	f000 f963 	bl	801c560 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_>
 801c29a:	bf00      	nop
    }
 801c29c:	3710      	adds	r7, #16
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	bd80      	pop	{r7, pc}

0801c2a2 <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tEclES0_>:
    R operator ()(A1 a) {
 801c2a2:	b580      	push	{r7, lr}
 801c2a4:	b084      	sub	sp, #16
 801c2a6:	af00      	add	r7, sp, #0
 801c2a8:	60f8      	str	r0, [r7, #12]
 801c2aa:	eeb0 7a40 	vmov.f32	s14, s0
 801c2ae:	eef0 7a60 	vmov.f32	s15, s1
 801c2b2:	ed87 7a01 	vstr	s14, [r7, #4]
 801c2b6:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 801c2ba:	ed97 7a01 	vldr	s14, [r7, #4]
 801c2be:	edd7 7a02 	vldr	s15, [r7, #8]
 801c2c2:	eeb0 0a47 	vmov.f32	s0, s14
 801c2c6:	eef0 0a67 	vmov.f32	s1, s15
 801c2ca:	68f8      	ldr	r0, [r7, #12]
 801c2cc:	f000 f985 	bl	801c5da <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_>
 801c2d0:	bf00      	nop
    }
 801c2d2:	3710      	adds	r7, #16
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	bd80      	pop	{r7, pc}

0801c2d8 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tEclES0_>:
    R operator ()(A1 a) {
 801c2d8:	b580      	push	{r7, lr}
 801c2da:	b084      	sub	sp, #16
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	60f8      	str	r0, [r7, #12]
 801c2e0:	eeb0 7a40 	vmov.f32	s14, s0
 801c2e4:	eef0 7a60 	vmov.f32	s15, s1
 801c2e8:	ed87 7a01 	vstr	s14, [r7, #4]
 801c2ec:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 801c2f0:	ed97 7a01 	vldr	s14, [r7, #4]
 801c2f4:	edd7 7a02 	vldr	s15, [r7, #8]
 801c2f8:	eeb0 0a47 	vmov.f32	s0, s14
 801c2fc:	eef0 0a67 	vmov.f32	s1, s15
 801c300:	68f8      	ldr	r0, [r7, #12]
 801c302:	f000 f9a7 	bl	801c654 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_>
 801c306:	bf00      	nop
    }
 801c308:	3710      	adds	r7, #16
 801c30a:	46bd      	mov	sp, r7
 801c30c:	bd80      	pop	{r7, pc}

0801c30e <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>:
    R operator ()(A1 a) {
 801c30e:	b580      	push	{r7, lr}
 801c310:	b082      	sub	sp, #8
 801c312:	af00      	add	r7, sp, #0
 801c314:	6078      	str	r0, [r7, #4]
 801c316:	6039      	str	r1, [r7, #0]
        return call(a);
 801c318:	6839      	ldr	r1, [r7, #0]
 801c31a:	6878      	ldr	r0, [r7, #4]
 801c31c:	f000 f9d7 	bl	801c6ce <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>
 801c320:	4603      	mov	r3, r0
    }
 801c322:	4618      	mov	r0, r3
 801c324:	3708      	adds	r7, #8
 801c326:	46bd      	mov	sp, r7
 801c328:	bd80      	pop	{r7, pc}

0801c32a <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>:
    R operator ()(A1 a) {
 801c32a:	b580      	push	{r7, lr}
 801c32c:	b082      	sub	sp, #8
 801c32e:	af00      	add	r7, sp, #0
 801c330:	6078      	str	r0, [r7, #4]
 801c332:	460b      	mov	r3, r1
 801c334:	70fb      	strb	r3, [r7, #3]
        return call(a);
 801c336:	78fb      	ldrb	r3, [r7, #3]
 801c338:	4619      	mov	r1, r3
 801c33a:	6878      	ldr	r0, [r7, #4]
 801c33c:	f000 f9f1 	bl	801c722 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>
 801c340:	4603      	mov	r3, r0
    }
 801c342:	4618      	mov	r0, r3
 801c344:	3708      	adds	r7, #8
 801c346:	46bd      	mov	sp, r7
 801c348:	bd80      	pop	{r7, pc}

0801c34a <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvEclEv>:
    R operator ()(void) {
 801c34a:	b580      	push	{r7, lr}
 801c34c:	b082      	sub	sp, #8
 801c34e:	af00      	add	r7, sp, #0
 801c350:	6078      	str	r0, [r7, #4]
        return call();
 801c352:	6878      	ldr	r0, [r7, #4]
 801c354:	f000 fa11 	bl	801c77a <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv>
 801c358:	4603      	mov	r3, r0
    }
 801c35a:	4618      	mov	r0, r3
 801c35c:	3708      	adds	r7, #8
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}

0801c362 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tEclES0_>:
    R operator ()(A1 a) {
 801c362:	b580      	push	{r7, lr}
 801c364:	b082      	sub	sp, #8
 801c366:	af00      	add	r7, sp, #0
 801c368:	6078      	str	r0, [r7, #4]
 801c36a:	6039      	str	r1, [r7, #0]
        return call(a);
 801c36c:	6839      	ldr	r1, [r7, #0]
 801c36e:	6878      	ldr	r0, [r7, #4]
 801c370:	f000 fa2b 	bl	801c7ca <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_>
 801c374:	bf00      	nop
    }
 801c376:	3708      	adds	r7, #8
 801c378:	46bd      	mov	sp, r7
 801c37a:	bd80      	pop	{r7, pc}

0801c37c <_ZN26core_utils_FunctionPointerIffEclEf>:
    R operator ()(A1 a) {
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b082      	sub	sp, #8
 801c380:	af00      	add	r7, sp, #0
 801c382:	6078      	str	r0, [r7, #4]
 801c384:	ed87 0a00 	vstr	s0, [r7]
        return call(a);
 801c388:	ed97 0a00 	vldr	s0, [r7]
 801c38c:	6878      	ldr	r0, [r7, #4]
 801c38e:	f000 fa43 	bl	801c818 <_ZN26core_utils_FunctionPointerIffE4callEf>
 801c392:	eef0 7a40 	vmov.f32	s15, s0
    }
 801c396:	eeb0 0a67 	vmov.f32	s0, s15
 801c39a:	3708      	adds	r7, #8
 801c39c:	46bd      	mov	sp, r7
 801c39e:	bd80      	pop	{r7, pc}

0801c3a0 <_ZN26core_utils_FunctionPointerIhvEclEv>:
    R operator ()(void) {
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
        return call();
 801c3a8:	6878      	ldr	r0, [r7, #4]
 801c3aa:	f000 fa69 	bl	801c880 <_ZN26core_utils_FunctionPointerIhvE4callEv>
 801c3ae:	4603      	mov	r3, r0
    }
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	3708      	adds	r7, #8
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd80      	pop	{r7, pc}

0801c3b8 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tEclES0_>:
    R operator ()(A1 a) {
 801c3b8:	b580      	push	{r7, lr}
 801c3ba:	b084      	sub	sp, #16
 801c3bc:	af00      	add	r7, sp, #0
 801c3be:	60f8      	str	r0, [r7, #12]
 801c3c0:	1d3b      	adds	r3, r7, #4
 801c3c2:	e883 0006 	stmia.w	r3, {r1, r2}
        return call(a);
 801c3c6:	1d3b      	adds	r3, r7, #4
 801c3c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c3cc:	68f8      	ldr	r0, [r7, #12]
 801c3ce:	f000 fa7f 	bl	801c8d0 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_>
 801c3d2:	bf00      	nop
    }
 801c3d4:	3710      	adds	r7, #16
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bd80      	pop	{r7, pc}

0801c3da <_ZN26core_utils_FunctionPointerIhhEclEh>:
    R operator ()(A1 a) {
 801c3da:	b580      	push	{r7, lr}
 801c3dc:	b082      	sub	sp, #8
 801c3de:	af00      	add	r7, sp, #0
 801c3e0:	6078      	str	r0, [r7, #4]
 801c3e2:	460b      	mov	r3, r1
 801c3e4:	70fb      	strb	r3, [r7, #3]
        return call(a);
 801c3e6:	78fb      	ldrb	r3, [r7, #3]
 801c3e8:	4619      	mov	r1, r3
 801c3ea:	6878      	ldr	r0, [r7, #4]
 801c3ec:	f000 fa9c 	bl	801c928 <_ZN26core_utils_FunctionPointerIhhE4callEh>
 801c3f0:	4603      	mov	r3, r0
    }
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	3708      	adds	r7, #8
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd80      	pop	{r7, pc}

0801c3fa <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvEclEv>:
    R operator ()(void) {
 801c3fa:	b580      	push	{r7, lr}
 801c3fc:	b084      	sub	sp, #16
 801c3fe:	af00      	add	r7, sp, #0
 801c400:	6078      	str	r0, [r7, #4]
        return call();
 801c402:	6878      	ldr	r0, [r7, #4]
 801c404:	f000 fabc 	bl	801c980 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv>
 801c408:	4603      	mov	r3, r0
 801c40a:	81bb      	strh	r3, [r7, #12]
 801c40c:	2300      	movs	r3, #0
 801c40e:	7b3a      	ldrb	r2, [r7, #12]
 801c410:	f362 0307 	bfi	r3, r2, #0, #8
 801c414:	7b7a      	ldrb	r2, [r7, #13]
 801c416:	f362 230f 	bfi	r3, r2, #8, #8
    }
 801c41a:	4618      	mov	r0, r3
 801c41c:	3710      	adds	r7, #16
 801c41e:	46bd      	mov	sp, r7
 801c420:	bd80      	pop	{r7, pc}

0801c422 <_ZN26core_utils_FunctionPointerImvEclEv>:
    R operator ()(void) {
 801c422:	b580      	push	{r7, lr}
 801c424:	b082      	sub	sp, #8
 801c426:	af00      	add	r7, sp, #0
 801c428:	6078      	str	r0, [r7, #4]
        return call();
 801c42a:	6878      	ldr	r0, [r7, #4]
 801c42c:	f000 fadc 	bl	801c9e8 <_ZN26core_utils_FunctionPointerImvE4callEv>
 801c430:	4603      	mov	r3, r0
    }
 801c432:	4618      	mov	r0, r3
 801c434:	3708      	adds	r7, #8
 801c436:	46bd      	mov	sp, r7
 801c438:	bd80      	pop	{r7, pc}

0801c43a <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvEclEv>:
    R operator ()(void) {
 801c43a:	b580      	push	{r7, lr}
 801c43c:	b082      	sub	sp, #8
 801c43e:	af00      	add	r7, sp, #0
 801c440:	6078      	str	r0, [r7, #4]
        return call();
 801c442:	6878      	ldr	r0, [r7, #4]
 801c444:	f000 faf8 	bl	801ca38 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv>
 801c448:	4603      	mov	r3, r0
    }
 801c44a:	4618      	mov	r0, r3
 801c44c:	3708      	adds	r7, #8
 801c44e:	46bd      	mov	sp, r7
 801c450:	bd80      	pop	{r7, pc}

0801c452 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_>:
    R call(A1 a) {
 801c452:	b590      	push	{r4, r7, lr}
 801c454:	b087      	sub	sp, #28
 801c456:	af02      	add	r7, sp, #8
 801c458:	60f8      	str	r0, [r7, #12]
 801c45a:	4638      	mov	r0, r7
 801c45c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        if (_membercaller == 0 && _p.function) {
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	695b      	ldr	r3, [r3, #20]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d10a      	bne.n	801c47e <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_+0x2c>
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d006      	beq.n	801c47e <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_+0x2c>
           return _p.function(a);
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	681c      	ldr	r4, [r3, #0]
 801c474:	463b      	mov	r3, r7
 801c476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c47a:	47a0      	blx	r4
 801c47c:	e014      	b.n	801c4a8 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_+0x56>
        } else if (_membercaller && _p.object) {
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	695b      	ldr	r3, [r3, #20]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d00f      	beq.n	801c4a6 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_+0x54>
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d00b      	beq.n	801c4a6 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_+0x54>
           return _membercaller(_p.object, _member, a);
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	695c      	ldr	r4, [r3, #20]
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	6818      	ldr	r0, [r3, #0]
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	1d19      	adds	r1, r3, #4
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	9300      	str	r3, [sp, #0]
 801c49e:	463b      	mov	r3, r7
 801c4a0:	cb0c      	ldmia	r3, {r2, r3}
 801c4a2:	47a0      	blx	r4
 801c4a4:	e000      	b.n	801c4a8 <_ZN26core_utils_FunctionPointerIv31twipr_sequencer_sequence_data_tE4callES0_+0x56>
        return R();
 801c4a6:	bf00      	nop
    }
 801c4a8:	3714      	adds	r7, #20
 801c4aa:	46bd      	mov	sp, r7
 801c4ac:	bd90      	pop	{r4, r7, pc}

0801c4ae <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv>:
    R call(){
 801c4ae:	b580      	push	{r7, lr}
 801c4b0:	b082      	sub	sp, #8
 801c4b2:	af00      	add	r7, sp, #0
 801c4b4:	6078      	str	r0, [r7, #4]
 801c4b6:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801c4b8:	683b      	ldr	r3, [r7, #0]
 801c4ba:	695b      	ldr	r3, [r3, #20]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d109      	bne.n	801c4d4 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x26>
 801c4c0:	683b      	ldr	r3, [r7, #0]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d005      	beq.n	801c4d4 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x26>
            return _p.function();
 801c4c8:	683b      	ldr	r3, [r7, #0]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	687a      	ldr	r2, [r7, #4]
 801c4ce:	4610      	mov	r0, r2
 801c4d0:	4798      	blx	r3
 801c4d2:	e017      	b.n	801c504 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x56>
        } else if (_membercaller && _p.object) {
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	695b      	ldr	r3, [r3, #20]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d00c      	beq.n	801c4f6 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x48>
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d008      	beq.n	801c4f6 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x48>
            return _membercaller(_p.object, _member);
 801c4e4:	683b      	ldr	r3, [r7, #0]
 801c4e6:	695b      	ldr	r3, [r3, #20]
 801c4e8:	683a      	ldr	r2, [r7, #0]
 801c4ea:	6811      	ldr	r1, [r2, #0]
 801c4ec:	683a      	ldr	r2, [r7, #0]
 801c4ee:	3204      	adds	r2, #4
 801c4f0:	6878      	ldr	r0, [r7, #4]
 801c4f2:	4798      	blx	r3
 801c4f4:	e006      	b.n	801c504 <_ZN26core_utils_FunctionPointerI29twipr_control_configuration_tvE4callEv+0x56>
        return R();
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	2338      	movs	r3, #56	@ 0x38
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	2100      	movs	r1, #0
 801c500:	f007 fce3 	bl	8023eca <memset>
    }
 801c504:	6878      	ldr	r0, [r7, #4]
 801c506:	3708      	adds	r7, #8
 801c508:	46bd      	mov	sp, r7
 801c50a:	bd80      	pop	{r7, pc}

0801c50c <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf>:
    R call(A1 a) {
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b082      	sub	sp, #8
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
 801c514:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	695b      	ldr	r3, [r3, #20]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d109      	bne.n	801c532 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x26>
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d005      	beq.n	801c532 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x26>
           return _p.function(a);
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	6838      	ldr	r0, [r7, #0]
 801c52c:	4798      	blx	r3
 801c52e:	4603      	mov	r3, r0
 801c530:	e012      	b.n	801c558 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	695b      	ldr	r3, [r3, #20]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d00d      	beq.n	801c556 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4a>
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d009      	beq.n	801c556 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	695b      	ldr	r3, [r3, #20]
 801c546:	687a      	ldr	r2, [r7, #4]
 801c548:	6810      	ldr	r0, [r2, #0]
 801c54a:	687a      	ldr	r2, [r7, #4]
 801c54c:	1d11      	adds	r1, r2, #4
 801c54e:	683a      	ldr	r2, [r7, #0]
 801c550:	4798      	blx	r3
 801c552:	4603      	mov	r3, r0
 801c554:	e000      	b.n	801c558 <_ZN26core_utils_FunctionPointerIhA3_fE4callEPf+0x4c>
        return R();
 801c556:	2300      	movs	r3, #0
    }
 801c558:	4618      	mov	r0, r3
 801c55a:	3708      	adds	r7, #8
 801c55c:	46bd      	mov	sp, r7
 801c55e:	bd80      	pop	{r7, pc}

0801c560 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_>:
    R call(A1 a) {
 801c560:	b580      	push	{r7, lr}
 801c562:	b084      	sub	sp, #16
 801c564:	af00      	add	r7, sp, #0
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	eeb0 7a40 	vmov.f32	s14, s0
 801c56c:	eef0 7a60 	vmov.f32	s15, s1
 801c570:	ed87 7a01 	vstr	s14, [r7, #4]
 801c574:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	695b      	ldr	r3, [r3, #20]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d10f      	bne.n	801c5a0 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x40>
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	2b00      	cmp	r3, #0
 801c586:	d00b      	beq.n	801c5a0 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x40>
           return _p.function(a);
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	ed97 7a01 	vldr	s14, [r7, #4]
 801c590:	edd7 7a02 	vldr	s15, [r7, #8]
 801c594:	eeb0 0a47 	vmov.f32	s0, s14
 801c598:	eef0 0a67 	vmov.f32	s1, s15
 801c59c:	4798      	blx	r3
 801c59e:	e019      	b.n	801c5d4 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	695b      	ldr	r3, [r3, #20]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d014      	beq.n	801c5d2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x72>
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d010      	beq.n	801c5d2 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	695b      	ldr	r3, [r3, #20]
 801c5b4:	68fa      	ldr	r2, [r7, #12]
 801c5b6:	6810      	ldr	r0, [r2, #0]
 801c5b8:	68fa      	ldr	r2, [r7, #12]
 801c5ba:	3204      	adds	r2, #4
 801c5bc:	ed97 7a01 	vldr	s14, [r7, #4]
 801c5c0:	edd7 7a02 	vldr	s15, [r7, #8]
 801c5c4:	eeb0 0a47 	vmov.f32	s0, s14
 801c5c8:	eef0 0a67 	vmov.f32	s1, s15
 801c5cc:	4611      	mov	r1, r2
 801c5ce:	4798      	blx	r3
 801c5d0:	e000      	b.n	801c5d4 <_ZN26core_utils_FunctionPointerIv27twipr_speed_control_input_tE4callES0_+0x74>
        return R();
 801c5d2:	bf00      	nop
    }
 801c5d4:	3710      	adds	r7, #16
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}

0801c5da <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_>:
    R call(A1 a) {
 801c5da:	b580      	push	{r7, lr}
 801c5dc:	b084      	sub	sp, #16
 801c5de:	af00      	add	r7, sp, #0
 801c5e0:	60f8      	str	r0, [r7, #12]
 801c5e2:	eeb0 7a40 	vmov.f32	s14, s0
 801c5e6:	eef0 7a60 	vmov.f32	s15, s1
 801c5ea:	ed87 7a01 	vstr	s14, [r7, #4]
 801c5ee:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	695b      	ldr	r3, [r3, #20]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d10f      	bne.n	801c61a <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x40>
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d00b      	beq.n	801c61a <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x40>
           return _p.function(a);
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	ed97 7a01 	vldr	s14, [r7, #4]
 801c60a:	edd7 7a02 	vldr	s15, [r7, #8]
 801c60e:	eeb0 0a47 	vmov.f32	s0, s14
 801c612:	eef0 0a67 	vmov.f32	s1, s15
 801c616:	4798      	blx	r3
 801c618:	e019      	b.n	801c64e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	695b      	ldr	r3, [r3, #20]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d014      	beq.n	801c64c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x72>
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d010      	beq.n	801c64c <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	695b      	ldr	r3, [r3, #20]
 801c62e:	68fa      	ldr	r2, [r7, #12]
 801c630:	6810      	ldr	r0, [r2, #0]
 801c632:	68fa      	ldr	r2, [r7, #12]
 801c634:	3204      	adds	r2, #4
 801c636:	ed97 7a01 	vldr	s14, [r7, #4]
 801c63a:	edd7 7a02 	vldr	s15, [r7, #8]
 801c63e:	eeb0 0a47 	vmov.f32	s0, s14
 801c642:	eef0 0a67 	vmov.f32	s1, s15
 801c646:	4611      	mov	r1, r2
 801c648:	4798      	blx	r3
 801c64a:	e000      	b.n	801c64e <_ZN26core_utils_FunctionPointerIv31twipr_balancing_control_input_tE4callES0_+0x74>
        return R();
 801c64c:	bf00      	nop
    }
 801c64e:	3710      	adds	r7, #16
 801c650:	46bd      	mov	sp, r7
 801c652:	bd80      	pop	{r7, pc}

0801c654 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_>:
    R call(A1 a) {
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	eeb0 7a40 	vmov.f32	s14, s0
 801c660:	eef0 7a60 	vmov.f32	s15, s1
 801c664:	ed87 7a01 	vstr	s14, [r7, #4]
 801c668:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	695b      	ldr	r3, [r3, #20]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d10f      	bne.n	801c694 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x40>
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d00b      	beq.n	801c694 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x40>
           return _p.function(a);
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	ed97 7a01 	vldr	s14, [r7, #4]
 801c684:	edd7 7a02 	vldr	s15, [r7, #8]
 801c688:	eeb0 0a47 	vmov.f32	s0, s14
 801c68c:	eef0 0a67 	vmov.f32	s1, s15
 801c690:	4798      	blx	r3
 801c692:	e019      	b.n	801c6c8 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	695b      	ldr	r3, [r3, #20]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d014      	beq.n	801c6c6 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x72>
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d010      	beq.n	801c6c6 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	695b      	ldr	r3, [r3, #20]
 801c6a8:	68fa      	ldr	r2, [r7, #12]
 801c6aa:	6810      	ldr	r0, [r2, #0]
 801c6ac:	68fa      	ldr	r2, [r7, #12]
 801c6ae:	3204      	adds	r2, #4
 801c6b0:	ed97 7a01 	vldr	s14, [r7, #4]
 801c6b4:	edd7 7a02 	vldr	s15, [r7, #8]
 801c6b8:	eeb0 0a47 	vmov.f32	s0, s14
 801c6bc:	eef0 0a67 	vmov.f32	s1, s15
 801c6c0:	4611      	mov	r1, r2
 801c6c2:	4798      	blx	r3
 801c6c4:	e000      	b.n	801c6c8 <_ZN26core_utils_FunctionPointerIv28twipr_control_direct_input_tE4callES0_+0x74>
        return R();
 801c6c6:	bf00      	nop
    }
 801c6c8:	3710      	adds	r7, #16
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}

0801c6ce <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>:
    R call(A1 a) {
 801c6ce:	b580      	push	{r7, lr}
 801c6d0:	b082      	sub	sp, #8
 801c6d2:	af00      	add	r7, sp, #0
 801c6d4:	6078      	str	r0, [r7, #4]
 801c6d6:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	695b      	ldr	r3, [r3, #20]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d109      	bne.n	801c6f4 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d005      	beq.n	801c6f4 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
           return _p.function(a);
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	6838      	ldr	r0, [r7, #0]
 801c6ee:	4798      	blx	r3
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	e012      	b.n	801c71a <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	695b      	ldr	r3, [r3, #20]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d00d      	beq.n	801c718 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d009      	beq.n	801c718 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	695b      	ldr	r3, [r3, #20]
 801c708:	687a      	ldr	r2, [r7, #4]
 801c70a:	6810      	ldr	r0, [r2, #0]
 801c70c:	687a      	ldr	r2, [r7, #4]
 801c70e:	1d11      	adds	r1, r2, #4
 801c710:	683a      	ldr	r2, [r7, #0]
 801c712:	4798      	blx	r3
 801c714:	4603      	mov	r3, r0
 801c716:	e000      	b.n	801c71a <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        return R();
 801c718:	2300      	movs	r3, #0
    }
 801c71a:	4618      	mov	r0, r3
 801c71c:	3708      	adds	r7, #8
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}

0801c722 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>:
    R call(A1 a) {
 801c722:	b580      	push	{r7, lr}
 801c724:	b082      	sub	sp, #8
 801c726:	af00      	add	r7, sp, #0
 801c728:	6078      	str	r0, [r7, #4]
 801c72a:	460b      	mov	r3, r1
 801c72c:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	695b      	ldr	r3, [r3, #20]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d10a      	bne.n	801c74c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d006      	beq.n	801c74c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
           return _p.function(a);
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	78fa      	ldrb	r2, [r7, #3]
 801c744:	4610      	mov	r0, r2
 801c746:	4798      	blx	r3
 801c748:	4603      	mov	r3, r0
 801c74a:	e012      	b.n	801c772 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        } else if (_membercaller && _p.object) {
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	695b      	ldr	r3, [r3, #20]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d00d      	beq.n	801c770 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d009      	beq.n	801c770 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
           return _membercaller(_p.object, _member, a);
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	695b      	ldr	r3, [r3, #20]
 801c760:	687a      	ldr	r2, [r7, #4]
 801c762:	6810      	ldr	r0, [r2, #0]
 801c764:	687a      	ldr	r2, [r7, #4]
 801c766:	1d11      	adds	r1, r2, #4
 801c768:	78fa      	ldrb	r2, [r7, #3]
 801c76a:	4798      	blx	r3
 801c76c:	4603      	mov	r3, r0
 801c76e:	e000      	b.n	801c772 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        return R();
 801c770:	2300      	movs	r3, #0
    }
 801c772:	4618      	mov	r0, r3
 801c774:	3708      	adds	r7, #8
 801c776:	46bd      	mov	sp, r7
 801c778:	bd80      	pop	{r7, pc}

0801c77a <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv>:
    R call(){
 801c77a:	b580      	push	{r7, lr}
 801c77c:	b082      	sub	sp, #8
 801c77e:	af00      	add	r7, sp, #0
 801c780:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	695b      	ldr	r3, [r3, #20]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d108      	bne.n	801c79c <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x22>
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d004      	beq.n	801c79c <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x22>
            return _p.function();
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	4798      	blx	r3
 801c798:	4603      	mov	r3, r0
 801c79a:	e012      	b.n	801c7c2 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	695b      	ldr	r3, [r3, #20]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d00d      	beq.n	801c7c0 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x46>
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d009      	beq.n	801c7c0 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	695b      	ldr	r3, [r3, #20]
 801c7b0:	687a      	ldr	r2, [r7, #4]
 801c7b2:	6810      	ldr	r0, [r2, #0]
 801c7b4:	687a      	ldr	r2, [r7, #4]
 801c7b6:	3204      	adds	r2, #4
 801c7b8:	4611      	mov	r1, r2
 801c7ba:	4798      	blx	r3
 801c7bc:	4603      	mov	r3, r0
 801c7be:	e000      	b.n	801c7c2 <_ZN26core_utils_FunctionPointerI20twipr_control_mode_tvE4callEv+0x48>
        return R();
 801c7c0:	2300      	movs	r3, #0
    }
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	3708      	adds	r7, #8
 801c7c6:	46bd      	mov	sp, r7
 801c7c8:	bd80      	pop	{r7, pc}

0801c7ca <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_>:
    R call(A1 a) {
 801c7ca:	b580      	push	{r7, lr}
 801c7cc:	b082      	sub	sp, #8
 801c7ce:	af00      	add	r7, sp, #0
 801c7d0:	6078      	str	r0, [r7, #4]
 801c7d2:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	695b      	ldr	r3, [r3, #20]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d108      	bne.n	801c7ee <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_+0x24>
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d004      	beq.n	801c7ee <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_+0x24>
           return _p.function(a);
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	6838      	ldr	r0, [r7, #0]
 801c7ea:	4798      	blx	r3
 801c7ec:	e011      	b.n	801c812 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_+0x48>
        } else if (_membercaller && _p.object) {
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	695b      	ldr	r3, [r3, #20]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d00c      	beq.n	801c810 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_+0x46>
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d008      	beq.n	801c810 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_+0x46>
           return _membercaller(_p.object, _member, a);
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	695b      	ldr	r3, [r3, #20]
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	6810      	ldr	r0, [r2, #0]
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	1d11      	adds	r1, r2, #4
 801c80a:	683a      	ldr	r2, [r7, #0]
 801c80c:	4798      	blx	r3
 801c80e:	e000      	b.n	801c812 <_ZN26core_utils_FunctionPointerIv18rgb_color_struct_tE4callES0_+0x48>
        return R();
 801c810:	bf00      	nop
    }
 801c812:	3708      	adds	r7, #8
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}

0801c818 <_ZN26core_utils_FunctionPointerIffE4callEf>:
    R call(A1 a) {
 801c818:	b580      	push	{r7, lr}
 801c81a:	b082      	sub	sp, #8
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
 801c820:	ed87 0a00 	vstr	s0, [r7]
        if (_membercaller == 0 && _p.function) {
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	695b      	ldr	r3, [r3, #20]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d10b      	bne.n	801c844 <_ZN26core_utils_FunctionPointerIffE4callEf+0x2c>
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d007      	beq.n	801c844 <_ZN26core_utils_FunctionPointerIffE4callEf+0x2c>
           return _p.function(a);
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	ed97 0a00 	vldr	s0, [r7]
 801c83c:	4798      	blx	r3
 801c83e:	eef0 7a40 	vmov.f32	s15, s0
 801c842:	e016      	b.n	801c872 <_ZN26core_utils_FunctionPointerIffE4callEf+0x5a>
        } else if (_membercaller && _p.object) {
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	695b      	ldr	r3, [r3, #20]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d010      	beq.n	801c86e <_ZN26core_utils_FunctionPointerIffE4callEf+0x56>
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	2b00      	cmp	r3, #0
 801c852:	d00c      	beq.n	801c86e <_ZN26core_utils_FunctionPointerIffE4callEf+0x56>
           return _membercaller(_p.object, _member, a);
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	695b      	ldr	r3, [r3, #20]
 801c858:	687a      	ldr	r2, [r7, #4]
 801c85a:	6810      	ldr	r0, [r2, #0]
 801c85c:	687a      	ldr	r2, [r7, #4]
 801c85e:	3204      	adds	r2, #4
 801c860:	ed97 0a00 	vldr	s0, [r7]
 801c864:	4611      	mov	r1, r2
 801c866:	4798      	blx	r3
 801c868:	eef0 7a40 	vmov.f32	s15, s0
 801c86c:	e001      	b.n	801c872 <_ZN26core_utils_FunctionPointerIffE4callEf+0x5a>
        return R();
 801c86e:	eddf 7a03 	vldr	s15, [pc, #12]	@ 801c87c <_ZN26core_utils_FunctionPointerIffE4callEf+0x64>
    }
 801c872:	eeb0 0a67 	vmov.f32	s0, s15
 801c876:	3708      	adds	r7, #8
 801c878:	46bd      	mov	sp, r7
 801c87a:	bd80      	pop	{r7, pc}
 801c87c:	00000000 	.word	0x00000000

0801c880 <_ZN26core_utils_FunctionPointerIhvE4callEv>:
    R call(){
 801c880:	b580      	push	{r7, lr}
 801c882:	b082      	sub	sp, #8
 801c884:	af00      	add	r7, sp, #0
 801c886:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	695b      	ldr	r3, [r3, #20]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d108      	bne.n	801c8a2 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x22>
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d004      	beq.n	801c8a2 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x22>
            return _p.function();
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	4798      	blx	r3
 801c89e:	4603      	mov	r3, r0
 801c8a0:	e012      	b.n	801c8c8 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	695b      	ldr	r3, [r3, #20]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d00d      	beq.n	801c8c6 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x46>
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d009      	beq.n	801c8c6 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	695b      	ldr	r3, [r3, #20]
 801c8b6:	687a      	ldr	r2, [r7, #4]
 801c8b8:	6810      	ldr	r0, [r2, #0]
 801c8ba:	687a      	ldr	r2, [r7, #4]
 801c8bc:	3204      	adds	r2, #4
 801c8be:	4611      	mov	r1, r2
 801c8c0:	4798      	blx	r3
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	e000      	b.n	801c8c8 <_ZN26core_utils_FunctionPointerIhvE4callEv+0x48>
        return R();
 801c8c6:	2300      	movs	r3, #0
    }
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	3708      	adds	r7, #8
 801c8cc:	46bd      	mov	sp, r7
 801c8ce:	bd80      	pop	{r7, pc}

0801c8d0 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_>:
    R call(A1 a) {
 801c8d0:	b590      	push	{r4, r7, lr}
 801c8d2:	b085      	sub	sp, #20
 801c8d4:	af00      	add	r7, sp, #0
 801c8d6:	60f8      	str	r0, [r7, #12]
 801c8d8:	1d3b      	adds	r3, r7, #4
 801c8da:	e883 0006 	stmia.w	r3, {r1, r2}
        if (_membercaller == 0 && _p.function) {
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	695b      	ldr	r3, [r3, #20]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d10a      	bne.n	801c8fc <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x2c>
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d006      	beq.n	801c8fc <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x2c>
           return _p.function(a);
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	1d3a      	adds	r2, r7, #4
 801c8f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c8f8:	4798      	blx	r3
 801c8fa:	e012      	b.n	801c922 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x52>
        } else if (_membercaller && _p.object) {
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	695b      	ldr	r3, [r3, #20]
 801c900:	2b00      	cmp	r3, #0
 801c902:	d00d      	beq.n	801c920 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x50>
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d009      	beq.n	801c920 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x50>
           return _membercaller(_p.object, _member, a);
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	695c      	ldr	r4, [r3, #20]
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	6818      	ldr	r0, [r3, #0]
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	1d19      	adds	r1, r3, #4
 801c918:	1d3b      	adds	r3, r7, #4
 801c91a:	cb0c      	ldmia	r3, {r2, r3}
 801c91c:	47a0      	blx	r4
 801c91e:	e000      	b.n	801c922 <_ZN26core_utils_FunctionPointerIv20buzzer_beep_struct_tE4callES0_+0x52>
        return R();
 801c920:	bf00      	nop
    }
 801c922:	3714      	adds	r7, #20
 801c924:	46bd      	mov	sp, r7
 801c926:	bd90      	pop	{r4, r7, pc}

0801c928 <_ZN26core_utils_FunctionPointerIhhE4callEh>:
    R call(A1 a) {
 801c928:	b580      	push	{r7, lr}
 801c92a:	b082      	sub	sp, #8
 801c92c:	af00      	add	r7, sp, #0
 801c92e:	6078      	str	r0, [r7, #4]
 801c930:	460b      	mov	r3, r1
 801c932:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	695b      	ldr	r3, [r3, #20]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d10a      	bne.n	801c952 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x2a>
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	2b00      	cmp	r3, #0
 801c942:	d006      	beq.n	801c952 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x2a>
           return _p.function(a);
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	78fa      	ldrb	r2, [r7, #3]
 801c94a:	4610      	mov	r0, r2
 801c94c:	4798      	blx	r3
 801c94e:	4603      	mov	r3, r0
 801c950:	e012      	b.n	801c978 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x50>
        } else if (_membercaller && _p.object) {
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	695b      	ldr	r3, [r3, #20]
 801c956:	2b00      	cmp	r3, #0
 801c958:	d00d      	beq.n	801c976 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x4e>
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d009      	beq.n	801c976 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x4e>
           return _membercaller(_p.object, _member, a);
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	695b      	ldr	r3, [r3, #20]
 801c966:	687a      	ldr	r2, [r7, #4]
 801c968:	6810      	ldr	r0, [r2, #0]
 801c96a:	687a      	ldr	r2, [r7, #4]
 801c96c:	1d11      	adds	r1, r2, #4
 801c96e:	78fa      	ldrb	r2, [r7, #3]
 801c970:	4798      	blx	r3
 801c972:	4603      	mov	r3, r0
 801c974:	e000      	b.n	801c978 <_ZN26core_utils_FunctionPointerIhhE4callEh+0x50>
        return R();
 801c976:	2300      	movs	r3, #0
    }
 801c978:	4618      	mov	r0, r3
 801c97a:	3708      	adds	r7, #8
 801c97c:	46bd      	mov	sp, r7
 801c97e:	bd80      	pop	{r7, pc}

0801c980 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv>:
    R call(){
 801c980:	b580      	push	{r7, lr}
 801c982:	b084      	sub	sp, #16
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	695b      	ldr	r3, [r3, #20]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d109      	bne.n	801c9a4 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x24>
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d005      	beq.n	801c9a4 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x24>
            return _p.function();
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	4798      	blx	r3
 801c99e:	4603      	mov	r3, r0
 801c9a0:	81bb      	strh	r3, [r7, #12]
 801c9a2:	e016      	b.n	801c9d2 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x52>
        } else if (_membercaller && _p.object) {
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	695b      	ldr	r3, [r3, #20]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d00e      	beq.n	801c9ca <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x4a>
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d00a      	beq.n	801c9ca <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x4a>
            return _membercaller(_p.object, _member);
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	695b      	ldr	r3, [r3, #20]
 801c9b8:	687a      	ldr	r2, [r7, #4]
 801c9ba:	6810      	ldr	r0, [r2, #0]
 801c9bc:	687a      	ldr	r2, [r7, #4]
 801c9be:	3204      	adds	r2, #4
 801c9c0:	4611      	mov	r1, r2
 801c9c2:	4798      	blx	r3
 801c9c4:	4603      	mov	r3, r0
 801c9c6:	81bb      	strh	r3, [r7, #12]
 801c9c8:	e003      	b.n	801c9d2 <_ZN26core_utils_FunctionPointerI25twipr_firmware_revision_tvE4callEv+0x52>
        return R();
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	733b      	strb	r3, [r7, #12]
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	737b      	strb	r3, [r7, #13]
    }
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	7b3a      	ldrb	r2, [r7, #12]
 801c9d6:	f362 0307 	bfi	r3, r2, #0, #8
 801c9da:	7b7a      	ldrb	r2, [r7, #13]
 801c9dc:	f362 230f 	bfi	r3, r2, #8, #8
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	3710      	adds	r7, #16
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	bd80      	pop	{r7, pc}

0801c9e8 <_ZN26core_utils_FunctionPointerImvE4callEv>:
    R call(){
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	b082      	sub	sp, #8
 801c9ec:	af00      	add	r7, sp, #0
 801c9ee:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	695b      	ldr	r3, [r3, #20]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d108      	bne.n	801ca0a <_ZN26core_utils_FunctionPointerImvE4callEv+0x22>
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d004      	beq.n	801ca0a <_ZN26core_utils_FunctionPointerImvE4callEv+0x22>
            return _p.function();
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	4798      	blx	r3
 801ca06:	4603      	mov	r3, r0
 801ca08:	e012      	b.n	801ca30 <_ZN26core_utils_FunctionPointerImvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	695b      	ldr	r3, [r3, #20]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d00d      	beq.n	801ca2e <_ZN26core_utils_FunctionPointerImvE4callEv+0x46>
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d009      	beq.n	801ca2e <_ZN26core_utils_FunctionPointerImvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	695b      	ldr	r3, [r3, #20]
 801ca1e:	687a      	ldr	r2, [r7, #4]
 801ca20:	6810      	ldr	r0, [r2, #0]
 801ca22:	687a      	ldr	r2, [r7, #4]
 801ca24:	3204      	adds	r2, #4
 801ca26:	4611      	mov	r1, r2
 801ca28:	4798      	blx	r3
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	e000      	b.n	801ca30 <_ZN26core_utils_FunctionPointerImvE4callEv+0x48>
        return R();
 801ca2e:	2300      	movs	r3, #0
    }
 801ca30:	4618      	mov	r0, r3
 801ca32:	3708      	adds	r7, #8
 801ca34:	46bd      	mov	sp, r7
 801ca36:	bd80      	pop	{r7, pc}

0801ca38 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv>:
    R call(){
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b082      	sub	sp, #8
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	695b      	ldr	r3, [r3, #20]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d108      	bne.n	801ca5a <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x22>
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d004      	beq.n	801ca5a <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x22>
            return _p.function();
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	4798      	blx	r3
 801ca56:	4603      	mov	r3, r0
 801ca58:	e012      	b.n	801ca80 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x48>
        } else if (_membercaller && _p.object) {
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	695b      	ldr	r3, [r3, #20]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d00d      	beq.n	801ca7e <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x46>
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d009      	beq.n	801ca7e <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x46>
            return _membercaller(_p.object, _member);
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	695b      	ldr	r3, [r3, #20]
 801ca6e:	687a      	ldr	r2, [r7, #4]
 801ca70:	6810      	ldr	r0, [r2, #0]
 801ca72:	687a      	ldr	r2, [r7, #4]
 801ca74:	3204      	adds	r2, #4
 801ca76:	4611      	mov	r1, r2
 801ca78:	4798      	blx	r3
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	e000      	b.n	801ca80 <_ZN26core_utils_FunctionPointerI22twipr_firmware_state_tvE4callEv+0x48>
        return R();
 801ca7e:	2300      	movs	r3, #0
    }
 801ca80:	4618      	mov	r0, r3
 801ca82:	3708      	adds	r7, #8
 801ca84:	46bd      	mov	sp, r7
 801ca86:	bd80      	pop	{r7, pc}

0801ca88 <_GLOBAL__sub_I_twipr_firmware>:
 801ca88:	b580      	push	{r7, lr}
 801ca8a:	af00      	add	r7, sp, #0
 801ca8c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ca90:	2001      	movs	r0, #1
 801ca92:	f7fd ff6f 	bl	801a974 <_Z41__static_initialization_and_destruction_0ii>
 801ca96:	bd80      	pop	{r7, pc}

0801ca98 <_GLOBAL__sub_D_twipr_firmware>:
 801ca98:	b580      	push	{r7, lr}
 801ca9a:	af00      	add	r7, sp, #0
 801ca9c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801caa0:	2000      	movs	r0, #0
 801caa2:	f7fd ff67 	bl	801a974 <_Z41__static_initialization_and_destruction_0ii>
 801caa6:	bd80      	pop	{r7, pc}

0801caa8 <_Z8io_startv>:
core_hardware_LED rc_button_led_2(GPIOA, GPIO_PIN_1);
core_hardware_Button side_button(GPIOC, GPIO_PIN_1);
core_hardware_Button off_button(GPIOC, GPIO_PIN_0);


void io_start() {
 801caa8:	b580      	push	{r7, lr}
 801caaa:	af00      	add	r7, sp, #0
rc_button_led_1.on();
 801caac:	4803      	ldr	r0, [pc, #12]	@ (801cabc <_Z8io_startv+0x14>)
 801caae:	f003 fea2 	bl	80207f6 <_ZN17core_hardware_LED2onEv>
rc_button_led_2.on();
 801cab2:	4803      	ldr	r0, [pc, #12]	@ (801cac0 <_Z8io_startv+0x18>)
 801cab4:	f003 fe9f 	bl	80207f6 <_ZN17core_hardware_LED2onEv>
}
 801cab8:	bf00      	nop
 801caba:	bd80      	pop	{r7, pc}
 801cabc:	24022c00 	.word	0x24022c00
 801cac0:	24022c08 	.word	0x24022c08

0801cac4 <_Z41__static_initialization_and_destruction_0ii>:
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b082      	sub	sp, #8
 801cac8:	af00      	add	r7, sp, #0
 801caca:	6078      	str	r0, [r7, #4]
 801cacc:	6039      	str	r1, [r7, #0]
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	2b01      	cmp	r3, #1
 801cad2:	d118      	bne.n	801cb06 <_Z41__static_initialization_and_destruction_0ii+0x42>
 801cad4:	683b      	ldr	r3, [r7, #0]
 801cad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cada:	4293      	cmp	r3, r2
 801cadc:	d113      	bne.n	801cb06 <_Z41__static_initialization_and_destruction_0ii+0x42>
core_hardware_LED rc_button_led_1(GPIOA, GPIO_PIN_0);
 801cade:	2201      	movs	r2, #1
 801cae0:	490b      	ldr	r1, [pc, #44]	@ (801cb10 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801cae2:	480c      	ldr	r0, [pc, #48]	@ (801cb14 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801cae4:	f003 fe73 	bl	80207ce <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_2(GPIOA, GPIO_PIN_1);
 801cae8:	2202      	movs	r2, #2
 801caea:	4909      	ldr	r1, [pc, #36]	@ (801cb10 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801caec:	480a      	ldr	r0, [pc, #40]	@ (801cb18 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801caee:	f003 fe6e 	bl	80207ce <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_Button side_button(GPIOC, GPIO_PIN_1);
 801caf2:	2202      	movs	r2, #2
 801caf4:	4909      	ldr	r1, [pc, #36]	@ (801cb1c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801caf6:	480a      	ldr	r0, [pc, #40]	@ (801cb20 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801caf8:	f003 fe44 	bl	8020784 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_Button off_button(GPIOC, GPIO_PIN_0);
 801cafc:	2201      	movs	r2, #1
 801cafe:	4907      	ldr	r1, [pc, #28]	@ (801cb1c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801cb00:	4808      	ldr	r0, [pc, #32]	@ (801cb24 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801cb02:	f003 fe3f 	bl	8020784 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
}
 801cb06:	bf00      	nop
 801cb08:	3708      	adds	r7, #8
 801cb0a:	46bd      	mov	sp, r7
 801cb0c:	bd80      	pop	{r7, pc}
 801cb0e:	bf00      	nop
 801cb10:	58020000 	.word	0x58020000
 801cb14:	24022c00 	.word	0x24022c00
 801cb18:	24022c08 	.word	0x24022c08
 801cb1c:	58020800 	.word	0x58020800
 801cb20:	24022c10 	.word	0x24022c10
 801cb24:	24022c18 	.word	0x24022c18

0801cb28 <_GLOBAL__sub_I_rc_button_led_1>:
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801cb30:	2001      	movs	r0, #1
 801cb32:	f7ff ffc7 	bl	801cac4 <_Z41__static_initialization_and_destruction_0ii>
 801cb36:	bd80      	pop	{r7, pc}

0801cb38 <_ZN13TWIPR_LoggingC1Ev>:


#include "twipr_logging.h"
#include "firmware.hpp"

TWIPR_Logging::TWIPR_Logging(){
 801cb38:	b480      	push	{r7}
 801cb3a:	b083      	sub	sp, #12
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	2200      	movs	r2, #0
 801cb44:	f8c3 25dc 	str.w	r2, [r3, #1500]	@ 0x5dc

}
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	370c      	adds	r7, #12
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb54:	4770      	bx	lr

0801cb56 <_ZN13TWIPR_Logging4initE22twipr_logging_config_t>:


void TWIPR_Logging::init(twipr_logging_config_t config){
 801cb56:	b084      	sub	sp, #16
 801cb58:	b4b0      	push	{r4, r5, r7}
 801cb5a:	b083      	sub	sp, #12
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	6078      	str	r0, [r7, #4]
 801cb60:	f107 001c 	add.w	r0, r7, #28
 801cb64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	f503 64b9 	add.w	r4, r3, #1480	@ 0x5c8
 801cb6e:	f107 051c 	add.w	r5, r7, #28
 801cb72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cb74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cb76:	682b      	ldr	r3, [r5, #0]
 801cb78:	6023      	str	r3, [r4, #0]
	this->sample_index = 0;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	2200      	movs	r2, #0
 801cb7e:	f8c3 25dc 	str.w	r2, [r3, #1500]	@ 0x5dc
}
 801cb82:	bf00      	nop
 801cb84:	370c      	adds	r7, #12
 801cb86:	46bd      	mov	sp, r7
 801cb88:	bcb0      	pop	{r4, r5, r7}
 801cb8a:	b004      	add	sp, #16
 801cb8c:	4770      	bx	lr

0801cb8e <_ZN13TWIPR_Logging14collectSamplesEv>:

}



twipr_logging_buffer_status_t TWIPR_Logging::collectSamples(){
 801cb8e:	b5b0      	push	{r4, r5, r7, lr}
 801cb90:	b094      	sub	sp, #80	@ 0x50
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	64f8      	str	r0, [r7, #76]	@ 0x4c
	this->sample_buffer[this->sample_index].general = this->config.firmware->getSample();
 801cb96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cb98:	f8d3 15c8 	ldr.w	r1, [r3, #1480]	@ 0x5c8
 801cb9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cb9e:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801cba2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cba4:	2094      	movs	r0, #148	@ 0x94
 801cba6:	fb00 f303 	mul.w	r3, r0, r3
 801cbaa:	18d4      	adds	r4, r2, r3
 801cbac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cbb0:	4618      	mov	r0, r3
 801cbb2:	f7fb fcf5 	bl	80185a0 <_ZN14TWIPR_Firmware9getSampleEv>
 801cbb6:	4622      	mov	r2, r4
 801cbb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cbbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cbc0:	e882 0003 	stmia.w	r2, {r0, r1}
	this->sample_buffer[this->sample_index].control = this->config.control->getSample();
 801cbc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbc6:	f8d3 15cc 	ldr.w	r1, [r3, #1484]	@ 0x5cc
 801cbca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbcc:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801cbd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cbd2:	2094      	movs	r0, #148	@ 0x94
 801cbd4:	fb00 f303 	mul.w	r3, r0, r3
 801cbd8:	4413      	add	r3, r2
 801cbda:	f103 0408 	add.w	r4, r3, #8
 801cbde:	463b      	mov	r3, r7
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	f7f9 fadb 	bl	801619c <_ZN20TWIPR_ControlManager9getSampleEv>
 801cbe6:	4625      	mov	r5, r4
 801cbe8:	463c      	mov	r4, r7
 801cbea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cbec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cbee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cbf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cbf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cbf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cbf6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801cbfa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	this->sample_buffer[this->sample_index].estimation = this->config.estimation->getSample();
 801cbfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc00:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 801cc04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc06:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801cc0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cc0c:	2094      	movs	r0, #148	@ 0x94
 801cc0e:	fb00 f303 	mul.w	r3, r0, r3
 801cc12:	4413      	add	r3, r2
 801cc14:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801cc18:	463b      	mov	r3, r7
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	f7fa ff72 	bl	8017b04 <_ZN16TWIPR_Estimation9getSampleEv>
 801cc20:	3404      	adds	r4, #4
 801cc22:	463d      	mov	r5, r7
 801cc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cc26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cc28:	682b      	ldr	r3, [r5, #0]
 801cc2a:	6023      	str	r3, [r4, #0]
	this->sample_buffer[this->sample_index].sensors = this->config.sensors->getData();
 801cc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc2e:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	@ 0x5d4
 801cc32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc34:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801cc38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cc3a:	2094      	movs	r0, #148	@ 0x94
 801cc3c:	fb00 f303 	mul.w	r3, r0, r3
 801cc40:	4413      	add	r3, r2
 801cc42:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 801cc46:	463b      	mov	r3, r7
 801cc48:	4618      	mov	r0, r3
 801cc4a:	f7fa ffff 	bl	8017c4c <_ZN13TWIPR_Sensors7getDataEv>
 801cc4e:	4625      	mov	r5, r4
 801cc50:	463c      	mov	r4, r7
 801cc52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cc54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cc56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cc58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cc5a:	6823      	ldr	r3, [r4, #0]
 801cc5c:	602b      	str	r3, [r5, #0]
	this->sample_buffer[this->sample_index].sequence = this->config.sequencer->getSample();
 801cc5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc60:	f8d3 15d8 	ldr.w	r1, [r3, #1496]	@ 0x5d8
 801cc64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc66:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801cc6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cc6c:	2094      	movs	r0, #148	@ 0x94
 801cc6e:	fb00 f303 	mul.w	r3, r0, r3
 801cc72:	4413      	add	r3, r2
 801cc74:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 801cc78:	463b      	mov	r3, r7
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f000 fbda 	bl	801d434 <_ZN15TWIPR_Sequencer9getSampleEv>
 801cc80:	1d23      	adds	r3, r4, #4
 801cc82:	463a      	mov	r2, r7
 801cc84:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cc88:	e883 0003 	stmia.w	r3, {r0, r1}
	this->sample_buffer[this->sample_index].debug = this->config.firmware->debugData;
 801cc8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc8e:	f8d3 25c8 	ldr.w	r2, [r3, #1480]	@ 0x5c8
 801cc92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc94:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801cc98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801cc9a:	2094      	movs	r0, #148	@ 0x94
 801cc9c:	fb00 f303 	mul.w	r3, r0, r3
 801cca0:	440b      	add	r3, r1
 801cca2:	3380      	adds	r3, #128	@ 0x80
 801cca4:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 801cca8:	1d1c      	adds	r4, r3, #4
 801ccaa:	f502 7360 	add.w	r3, r2, #896	@ 0x380
 801ccae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ccb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	this->sample_index++;
 801ccb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccb6:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801ccba:	1c5a      	adds	r2, r3, #1
 801ccbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccbe:	f8c3 25dc 	str.w	r2, [r3, #1500]	@ 0x5dc

	if (this->sample_index == TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE){
 801ccc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccc4:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	@ 0x5dc
 801ccc8:	2b0a      	cmp	r3, #10
 801ccca:	d105      	bne.n	801ccd8 <_ZN13TWIPR_Logging14collectSamplesEv+0x14a>
		this->sample_index = 0;
 801cccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccce:	2200      	movs	r2, #0
 801ccd0:	f8c3 25dc 	str.w	r2, [r3, #1500]	@ 0x5dc
		return TWIPR_LOGGING_BUFFER_FULL;
 801ccd4:	2301      	movs	r3, #1
 801ccd6:	e000      	b.n	801ccda <_ZN13TWIPR_Logging14collectSamplesEv+0x14c>
	}

	return TWIPR_LOGGING_BUFFER_NOT_FULL;
 801ccd8:	2300      	movs	r3, #0
}
 801ccda:	4618      	mov	r0, r3
 801ccdc:	3750      	adds	r7, #80	@ 0x50
 801ccde:	46bd      	mov	sp, r7
 801cce0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801cce4 <_ZN31twipr_supervisor_stuck_config_tC1Ev>:
//#include "twipr_drive.h"
#include "twipr_drive_can.h"
#include "twipr_control.h"
#include "twipr_communication.h"

typedef struct twipr_supervisor_stuck_config_t {
 801cce4:	b480      	push	{r7}
 801cce6:	b083      	sub	sp, #12
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	4a07      	ldr	r2, [pc, #28]	@ (801cd0c <_ZN31twipr_supervisor_stuck_config_tC1Ev+0x28>)
 801ccf0:	601a      	str	r2, [r3, #0]
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	4a06      	ldr	r2, [pc, #24]	@ (801cd10 <_ZN31twipr_supervisor_stuck_config_tC1Ev+0x2c>)
 801ccf6:	605a      	str	r2, [r3, #4]
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	2232      	movs	r2, #50	@ 0x32
 801ccfc:	609a      	str	r2, [r3, #8]
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	4618      	mov	r0, r3
 801cd02:	370c      	adds	r7, #12
 801cd04:	46bd      	mov	sp, r7
 801cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd0a:	4770      	bx	lr
 801cd0c:	3dcccccd 	.word	0x3dcccccd
 801cd10:	3d4ccccd 	.word	0x3d4ccccd

0801cd14 <_ZN36twipr_supervisor_controller_config_tC1Ev>:
	float last_velocity_error = 0;
	float last_pitch_angle = 0;
	float error_count = 0;
} twipr_supervisor_stuck_data_t;

typedef struct twipr_supervisor_controller_config_t {
 801cd14:	b480      	push	{r7}
 801cd16:	b083      	sub	sp, #12
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	6078      	str	r0, [r7, #4]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	4a06      	ldr	r2, [pc, #24]	@ (801cd38 <_ZN36twipr_supervisor_controller_config_tC1Ev+0x24>)
 801cd20:	601a      	str	r2, [r3, #0]
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	4a04      	ldr	r2, [pc, #16]	@ (801cd38 <_ZN36twipr_supervisor_controller_config_tC1Ev+0x24>)
 801cd26:	605a      	str	r2, [r3, #4]
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	370c      	adds	r7, #12
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd34:	4770      	bx	lr
 801cd36:	bf00      	nop
 801cd38:	3e4ccccd 	.word	0x3e4ccccd

0801cd3c <_ZN25twipr_supervisor_config_tC1Ev>:
	float max_forward_pid_integrator = 0.2;
	float max_turn_pid_integrator = 0.2;
} twipr_supervisor_controller_config_t;

typedef struct twipr_supervisor_config_t {
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b082      	sub	sp, #8
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	6078      	str	r0, [r7, #4]
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	3318      	adds	r3, #24
 801cd48:	4618      	mov	r0, r3
 801cd4a:	f7ff ffcb 	bl	801cce4 <_ZN31twipr_supervisor_stuck_config_tC1Ev>
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	3324      	adds	r3, #36	@ 0x24
 801cd52:	4618      	mov	r0, r3
 801cd54:	f7ff ffde 	bl	801cd14 <_ZN36twipr_supervisor_controller_config_tC1Ev>
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	4618      	mov	r0, r3
 801cd5c:	3708      	adds	r7, #8
 801cd5e:	46bd      	mov	sp, r7
 801cd60:	bd80      	pop	{r7, pc}

0801cd62 <_ZN29twipr_supervisor_stuck_data_tC1Ev>:
typedef struct twipr_supervisor_stuck_data_t {
 801cd62:	b480      	push	{r7}
 801cd64:	b083      	sub	sp, #12
 801cd66:	af00      	add	r7, sp, #0
 801cd68:	6078      	str	r0, [r7, #4]
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	701a      	strb	r2, [r3, #0]
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	f04f 0200 	mov.w	r2, #0
 801cd76:	605a      	str	r2, [r3, #4]
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	f04f 0200 	mov.w	r2, #0
 801cd7e:	609a      	str	r2, [r3, #8]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	f04f 0200 	mov.w	r2, #0
 801cd86:	60da      	str	r2, [r3, #12]
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	370c      	adds	r7, #12
 801cd8e:	46bd      	mov	sp, r7
 801cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd94:	4770      	bx	lr

0801cd96 <_ZN16TWIPR_SupervisorC1Ev>:
elapsedMillis timerDriveTick;

BILBO_Message_Warning warning_message;

/* ============================================================================= */
TWIPR_Supervisor::TWIPR_Supervisor() {
 801cd96:	b580      	push	{r7, lr}
 801cd98:	b082      	sub	sp, #8
 801cd9a:	af00      	add	r7, sp, #0
 801cd9c:	6078      	str	r0, [r7, #4]
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7ff ffcb 	bl	801cd3c <_ZN25twipr_supervisor_config_tC1Ev>
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	2200      	movs	r2, #0
 801cdaa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	631a      	str	r2, [r3, #48]	@ 0x30
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	3340      	adds	r3, #64	@ 0x40
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f7ff ffd2 	bl	801cd62 <_ZN29twipr_supervisor_stuck_data_tC1Ev>

}
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	3708      	adds	r7, #8
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bd80      	pop	{r7, pc}

0801cdc8 <_ZN16TWIPR_Supervisor4initE25twipr_supervisor_config_t>:

/* ============================================================================= */
void TWIPR_Supervisor::init(twipr_supervisor_config_t config) {
 801cdc8:	b084      	sub	sp, #16
 801cdca:	b4b0      	push	{r4, r5, r7}
 801cdcc:	b083      	sub	sp, #12
 801cdce:	af00      	add	r7, sp, #0
 801cdd0:	6078      	str	r0, [r7, #4]
 801cdd2:	f107 001c 	add.w	r0, r7, #28
 801cdd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	461d      	mov	r5, r3
 801cdde:	f107 041c 	add.w	r4, r7, #28
 801cde2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cde4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cde6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cde8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cdea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801cdee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801cdf2:	bf00      	nop
 801cdf4:	370c      	adds	r7, #12
 801cdf6:	46bd      	mov	sp, r7
 801cdf8:	bcb0      	pop	{r4, r5, r7}
 801cdfa:	b004      	add	sp, #16
 801cdfc:	4770      	bx	lr
	...

0801ce00 <_ZN16TWIPR_Supervisor5startEv>:

/* ============================================================================= */
void TWIPR_Supervisor::start() {
 801ce00:	b580      	push	{r7, lr}
 801ce02:	b082      	sub	sp, #8
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
	osThreadNew(startTwiprSupervisorTask, (void*) this,
 801ce08:	4a04      	ldr	r2, [pc, #16]	@ (801ce1c <_ZN16TWIPR_Supervisor5startEv+0x1c>)
 801ce0a:	6879      	ldr	r1, [r7, #4]
 801ce0c:	4804      	ldr	r0, [pc, #16]	@ (801ce20 <_ZN16TWIPR_Supervisor5startEv+0x20>)
 801ce0e:	f7f1 fdb6 	bl	800e97e <osThreadNew>
			&safety_task_attributes);
}
 801ce12:	bf00      	nop
 801ce14:	3708      	adds	r7, #8
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}
 801ce1a:	bf00      	nop
 801ce1c:	080266c4 	.word	0x080266c4
 801ce20:	0801d111 	.word	0x0801d111

0801ce24 <_ZN16TWIPR_Supervisor4taskEv>:

/* ============================================================================= */
void TWIPR_Supervisor::task() {
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b086      	sub	sp, #24
 801ce28:	af02      	add	r7, sp, #8
 801ce2a:	6078      	str	r0, [r7, #4]
	timerDriveTick.reset();
 801ce2c:	483b      	ldr	r0, [pc, #236]	@ (801cf1c <_ZN16TWIPR_Supervisor4taskEv+0xf8>)
 801ce2e:	f7f9 fdc4 	bl	80169ba <_ZN13elapsedMillis5resetEv>
	while (true) {
		twipr_supervisor_error_t error;

		// Check the motors
		error = this->checkMotors();
 801ce32:	6878      	ldr	r0, [r7, #4]
 801ce34:	f000 f87c 	bl	801cf30 <_ZN16TWIPR_Supervisor11checkMotorsEv>
 801ce38:	4603      	mov	r3, r0
 801ce3a:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_MOTOR_TIMEOUT) {
 801ce3c:	7bfb      	ldrb	r3, [r7, #15]
 801ce3e:	2b04      	cmp	r3, #4
 801ce40:	d110      	bne.n	801ce64 <_ZN16TWIPR_Supervisor4taskEv+0x40>

			// Stop the control module
			this->config.control->stop();
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	689b      	ldr	r3, [r3, #8]
 801ce46:	4618      	mov	r0, r3
 801ce48:	f7f8 fcde 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_CRITICAL);
 801ce4c:	2101      	movs	r1, #1
 801ce4e:	6878      	ldr	r0, [r7, #4]
 801ce50:	f000 f948 	bl	801d0e4 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_CRITICAL, "Motor Timeout", 13);
 801ce54:	7bf9      	ldrb	r1, [r7, #15]
 801ce56:	230d      	movs	r3, #13
 801ce58:	9300      	str	r3, [sp, #0]
 801ce5a:	4b31      	ldr	r3, [pc, #196]	@ (801cf20 <_ZN16TWIPR_Supervisor4taskEv+0xfc>)
 801ce5c:	2201      	movs	r2, #1
 801ce5e:	6878      	ldr	r0, [r7, #4]
 801ce60:	f000 f918 	bl	801d094 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>
		}
		if (error == TWIPR_SUPERVISOR_MOTOR_RACECONDITION_RESETS){
 801ce64:	7bfb      	ldrb	r3, [r7, #15]
 801ce66:	2b07      	cmp	r3, #7
 801ce68:	d110      	bne.n	801ce8c <_ZN16TWIPR_Supervisor4taskEv+0x68>
			this->config.control->stop();
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	689b      	ldr	r3, [r3, #8]
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f7f8 fcca 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_CRITICAL);
 801ce74:	2101      	movs	r1, #1
 801ce76:	6878      	ldr	r0, [r7, #4]
 801ce78:	f000 f934 	bl	801d0e4 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_CRITICAL, "Motor Race Conditions", 21);
 801ce7c:	7bf9      	ldrb	r1, [r7, #15]
 801ce7e:	2315      	movs	r3, #21
 801ce80:	9300      	str	r3, [sp, #0]
 801ce82:	4b28      	ldr	r3, [pc, #160]	@ (801cf24 <_ZN16TWIPR_Supervisor4taskEv+0x100>)
 801ce84:	2201      	movs	r2, #1
 801ce86:	6878      	ldr	r0, [r7, #4]
 801ce88:	f000 f904 	bl	801d094 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>
		}

		// Check the motor speed
		error = this->checkMotorSpeed();
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f000 f87f 	bl	801cf90 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv>
 801ce92:	4603      	mov	r3, r0
 801ce94:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_WHEEL_SPEED) {
 801ce96:	7bfb      	ldrb	r3, [r7, #15]
 801ce98:	2b02      	cmp	r3, #2
 801ce9a:	d110      	bne.n	801cebe <_ZN16TWIPR_Supervisor4taskEv+0x9a>
			// Stop the control module
			this->config.control->stop();
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	689b      	ldr	r3, [r3, #8]
 801cea0:	4618      	mov	r0, r3
 801cea2:	f7f8 fcb1 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_WARNING);
 801cea6:	2102      	movs	r1, #2
 801cea8:	6878      	ldr	r0, [r7, #4]
 801ceaa:	f000 f91b 	bl	801d0e4 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_WARNING, "Motor Speed Warning", 19);
 801ceae:	7bf9      	ldrb	r1, [r7, #15]
 801ceb0:	2313      	movs	r3, #19
 801ceb2:	9300      	str	r3, [sp, #0]
 801ceb4:	4b1c      	ldr	r3, [pc, #112]	@ (801cf28 <_ZN16TWIPR_Supervisor4taskEv+0x104>)
 801ceb6:	2202      	movs	r2, #2
 801ceb8:	6878      	ldr	r0, [r7, #4]
 801ceba:	f000 f8eb 	bl	801d094 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>

		}

		// Check the button
		error = this->checkButton();
 801cebe:	6878      	ldr	r0, [r7, #4]
 801cec0:	f000 f8aa 	bl	801d018 <_ZN16TWIPR_Supervisor11checkButtonEv>
 801cec4:	4603      	mov	r3, r0
 801cec6:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_MANUAL_STOP) {
 801cec8:	7bfb      	ldrb	r3, [r7, #15]
 801ceca:	2b03      	cmp	r3, #3
 801cecc:	d110      	bne.n	801cef0 <_ZN16TWIPR_Supervisor4taskEv+0xcc>
			// Stop the control module
			this->config.control->stop();
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	689b      	ldr	r3, [r3, #8]
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7f8 fc98 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_WARNING);
 801ced8:	2102      	movs	r1, #2
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f000 f902 	bl	801d0e4 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
			this->sendWarning(error, TWIPR_ERROR_WARNING, "Manual Stop", 11);
 801cee0:	7bf9      	ldrb	r1, [r7, #15]
 801cee2:	230b      	movs	r3, #11
 801cee4:	9300      	str	r3, [sp, #0]
 801cee6:	4b11      	ldr	r3, [pc, #68]	@ (801cf2c <_ZN16TWIPR_Supervisor4taskEv+0x108>)
 801cee8:	2202      	movs	r2, #2
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f000 f8d2 	bl	801d094 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>
//			this->config.control->stop();
//			this->setError(TWIPR_ERROR_WARNING);
//		}

// Check the controllers
		error = this->checkControllers();
 801cef0:	6878      	ldr	r0, [r7, #4]
 801cef2:	f000 f8b0 	bl	801d056 <_ZN16TWIPR_Supervisor16checkControllersEv>
 801cef6:	4603      	mov	r3, r0
 801cef8:	73fb      	strb	r3, [r7, #15]
		if (error == TWIPR_SUPERVISOR_ERROR_INTEGRATOR_OVERRUN) {
 801cefa:	7bfb      	ldrb	r3, [r7, #15]
 801cefc:	2b06      	cmp	r3, #6
 801cefe:	d108      	bne.n	801cf12 <_ZN16TWIPR_Supervisor4taskEv+0xee>
			// Stop the control module
			this->config.control->stop();
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	689b      	ldr	r3, [r3, #8]
 801cf04:	4618      	mov	r0, r3
 801cf06:	f7f8 fc7f 	bl	8015808 <_ZN20TWIPR_ControlManager4stopEv>
			this->setError(TWIPR_ERROR_WARNING);
 801cf0a:	2102      	movs	r1, #2
 801cf0c:	6878      	ldr	r0, [r7, #4]
 801cf0e:	f000 f8e9 	bl	801d0e4 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>
		}
		osDelay(10);
 801cf12:	200a      	movs	r0, #10
 801cf14:	f7f1 fdc5 	bl	800eaa2 <osDelay>
	}
 801cf18:	e78b      	b.n	801ce32 <_ZN16TWIPR_Supervisor4taskEv+0xe>
 801cf1a:	bf00      	nop
 801cf1c:	24022c20 	.word	0x24022c20
 801cf20:	08025e44 	.word	0x08025e44
 801cf24:	08025e54 	.word	0x08025e54
 801cf28:	08025e6c 	.word	0x08025e6c
 801cf2c:	08025e80 	.word	0x08025e80

0801cf30 <_ZN16TWIPR_Supervisor11checkMotorsEv>:
}

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkMotors() {
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b082      	sub	sp, #8
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]

	if (timerDriveTick > 1000) {
 801cf38:	4814      	ldr	r0, [pc, #80]	@ (801cf8c <_ZN16TWIPR_Supervisor11checkMotorsEv+0x5c>)
 801cf3a:	f7f9 fd59 	bl	80169f0 <_ZNK13elapsedMilliscvmEv>
 801cf3e:	4603      	mov	r3, r0
 801cf40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801cf44:	bf8c      	ite	hi
 801cf46:	2301      	movhi	r3, #1
 801cf48:	2300      	movls	r3, #0
 801cf4a:	b2db      	uxtb	r3, r3
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d017      	beq.n	801cf80 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x50>
		timerDriveTick.reset();
 801cf50:	480e      	ldr	r0, [pc, #56]	@ (801cf8c <_ZN16TWIPR_Supervisor11checkMotorsEv+0x5c>)
 801cf52:	f7f9 fd32 	bl	80169ba <_ZN13elapsedMillis5resetEv>
		if (!(this->config.drive->tick > this->lastDriveTick)) {
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	685b      	ldr	r3, [r3, #4]
 801cf5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf60:	429a      	cmp	r2, r3
 801cf62:	d806      	bhi.n	801cf72 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x42>

			this->lastDriveTick = this->config.drive->tick;
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	685b      	ldr	r3, [r3, #4]
 801cf68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	631a      	str	r2, [r3, #48]	@ 0x30
			return TWIPR_SUPERVISOR_MOTOR_TIMEOUT;
 801cf6e:	2304      	movs	r3, #4
 801cf70:	e007      	b.n	801cf82 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x52>
		} else {
			this->lastDriveTick = this->config.drive->tick;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	685b      	ldr	r3, [r3, #4]
 801cf76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	631a      	str	r2, [r3, #48]	@ 0x30
			return TWIPR_SUPERVISOR_NONE;
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	e000      	b.n	801cf82 <_ZN16TWIPR_Supervisor11checkMotorsEv+0x52>
	}
//	if (this->config.drive->race_conditions >=10){
//		return TWIPR_SUPERVISOR_MOTOR_RACECONDITION_RESETS;
//	}

	return TWIPR_SUPERVISOR_NONE;
 801cf80:	2300      	movs	r3, #0
}
 801cf82:	4618      	mov	r0, r3
 801cf84:	3708      	adds	r7, #8
 801cf86:	46bd      	mov	sp, r7
 801cf88:	bd80      	pop	{r7, pc}
 801cf8a:	bf00      	nop
 801cf8c:	24022c20 	.word	0x24022c20

0801cf90 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv>:

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkMotorSpeed() {
 801cf90:	b580      	push	{r7, lr}
 801cf92:	b084      	sub	sp, #16
 801cf94:	af00      	add	r7, sp, #0
 801cf96:	6078      	str	r0, [r7, #4]

	if (this->config.control->mode == TWIPR_CONTROL_MODE_OFF) {
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	689b      	ldr	r3, [r3, #8]
 801cf9c:	785b      	ldrb	r3, [r3, #1]
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d101      	bne.n	801cfa6 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x16>
		return TWIPR_SUPERVISOR_NONE;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	e034      	b.n	801d010 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x80>
	}

	twipr_drive_can_speed_t speed = this->config.drive->getSpeed();
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	685b      	ldr	r3, [r3, #4]
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f7fa fa18 	bl	80173e0 <_ZN15TWIPR_Drive_CAN8getSpeedEv>
 801cfb0:	eeb0 7a40 	vmov.f32	s14, s0
 801cfb4:	eef0 7a60 	vmov.f32	s15, s1
 801cfb8:	ed87 7a02 	vstr	s14, [r7, #8]
 801cfbc:	edc7 7a03 	vstr	s15, [r7, #12]
	if (abs(speed.speed_left) > this->config.max_wheel_speed
 801cfc0:	edd7 7a02 	vldr	s15, [r7, #8]
 801cfc4:	eeb0 0a67 	vmov.f32	s0, s15
 801cfc8:	f7f9 fce7 	bl	801699a <_ZSt3absf>
 801cfcc:	eeb0 7a40 	vmov.f32	s14, s0
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	edd3 7a05 	vldr	s15, [r3, #20]
			|| abs(speed.speed_right) > this->config.max_wheel_speed) {
 801cfd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfde:	dc0f      	bgt.n	801d000 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x70>
 801cfe0:	edd7 7a03 	vldr	s15, [r7, #12]
 801cfe4:	eeb0 0a67 	vmov.f32	s0, s15
 801cfe8:	f7f9 fcd7 	bl	801699a <_ZSt3absf>
 801cfec:	eeb0 7a40 	vmov.f32	s14, s0
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	edd3 7a05 	vldr	s15, [r3, #20]
 801cff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cffe:	dd01      	ble.n	801d004 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x74>
 801d000:	2301      	movs	r3, #1
 801d002:	e000      	b.n	801d006 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x76>
 801d004:	2300      	movs	r3, #0
	if (abs(speed.speed_left) > this->config.max_wheel_speed
 801d006:	2b00      	cmp	r3, #0
 801d008:	d001      	beq.n	801d00e <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x7e>
		return TWIPR_SUPERVISOR_WHEEL_SPEED;
 801d00a:	2302      	movs	r3, #2
 801d00c:	e000      	b.n	801d010 <_ZN16TWIPR_Supervisor15checkMotorSpeedEv+0x80>
	}
	return TWIPR_SUPERVISOR_NONE;
 801d00e:	2300      	movs	r3, #0
}
 801d010:	4618      	mov	r0, r3
 801d012:	3710      	adds	r7, #16
 801d014:	46bd      	mov	sp, r7
 801d016:	bd80      	pop	{r7, pc}

0801d018 <_ZN16TWIPR_Supervisor11checkButtonEv>:

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkButton() {
 801d018:	b580      	push	{r7, lr}
 801d01a:	b082      	sub	sp, #8
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]

	if (this->config.control->mode == TWIPR_CONTROL_MODE_OFF) {
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	689b      	ldr	r3, [r3, #8]
 801d024:	785b      	ldrb	r3, [r3, #1]
 801d026:	2b00      	cmp	r3, #0
 801d028:	d101      	bne.n	801d02e <_ZN16TWIPR_Supervisor11checkButtonEv+0x16>
		return TWIPR_SUPERVISOR_NONE;
 801d02a:	2300      	movs	r3, #0
 801d02c:	e00f      	b.n	801d04e <_ZN16TWIPR_Supervisor11checkButtonEv+0x36>
	}

	if (this->config.off_button->check() == 0) {
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	691b      	ldr	r3, [r3, #16]
 801d032:	4618      	mov	r0, r3
 801d034:	f003 fbba 	bl	80207ac <_ZN20core_hardware_Button5checkEv>
 801d038:	4603      	mov	r3, r0
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	bf0c      	ite	eq
 801d03e:	2301      	moveq	r3, #1
 801d040:	2300      	movne	r3, #0
 801d042:	b2db      	uxtb	r3, r3
 801d044:	2b00      	cmp	r3, #0
 801d046:	d001      	beq.n	801d04c <_ZN16TWIPR_Supervisor11checkButtonEv+0x34>
		return TWIPR_SUPERVISOR_MANUAL_STOP;
 801d048:	2303      	movs	r3, #3
 801d04a:	e000      	b.n	801d04e <_ZN16TWIPR_Supervisor11checkButtonEv+0x36>
	} else {
		return TWIPR_SUPERVISOR_NONE;
 801d04c:	2300      	movs	r3, #0
	}
}
 801d04e:	4618      	mov	r0, r3
 801d050:	3708      	adds	r7, #8
 801d052:	46bd      	mov	sp, r7
 801d054:	bd80      	pop	{r7, pc}

0801d056 <_ZN16TWIPR_Supervisor16checkControllersEv>:
	return TWIPR_SUPERVISOR_NONE;

}

/* ============================================================================= */
twipr_supervisor_error_t TWIPR_Supervisor::checkControllers() {
 801d056:	b480      	push	{r7}
 801d058:	b083      	sub	sp, #12
 801d05a:	af00      	add	r7, sp, #0
 801d05c:	6078      	str	r0, [r7, #4]

	return TWIPR_SUPERVISOR_NONE;
 801d05e:	2300      	movs	r3, #0

}
 801d060:	4618      	mov	r0, r3
 801d062:	370c      	adds	r7, #12
 801d064:	46bd      	mov	sp, r7
 801d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d06a:	4770      	bx	lr

0801d06c <_ZN16TWIPR_Supervisor5checkEv>:

/* ============================================================================= */
twipr_error_t TWIPR_Supervisor::check() {
 801d06c:	b480      	push	{r7}
 801d06e:	b085      	sub	sp, #20
 801d070:	af00      	add	r7, sp, #0
 801d072:	6078      	str	r0, [r7, #4]
	twipr_error_t output = this->error;
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d07a:	73fb      	strb	r3, [r7, #15]
	this->error = TWIPR_ERROR_NONE;
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	2200      	movs	r2, #0
 801d080:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	return output;
 801d084:	7bfb      	ldrb	r3, [r7, #15]
}
 801d086:	4618      	mov	r0, r3
 801d088:	3714      	adds	r7, #20
 801d08a:	46bd      	mov	sp, r7
 801d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d090:	4770      	bx	lr
	...

0801d094 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch>:
/* ============================================================================= */
void TWIPR_Supervisor::sendWarning(twipr_supervisor_error_t id,
		twipr_error_t error, const char *message, uint8_t len) {
 801d094:	b580      	push	{r7, lr}
 801d096:	b084      	sub	sp, #16
 801d098:	af00      	add	r7, sp, #0
 801d09a:	60f8      	str	r0, [r7, #12]
 801d09c:	607b      	str	r3, [r7, #4]
 801d09e:	460b      	mov	r3, r1
 801d0a0:	72fb      	strb	r3, [r7, #11]
 801d0a2:	4613      	mov	r3, r2
 801d0a4:	72bb      	strb	r3, [r7, #10]

	warning_message.data->error = error;
 801d0a6:	4b0e      	ldr	r3, [pc, #56]	@ (801d0e0 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x4c>)
 801d0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d0aa:	7aba      	ldrb	r2, [r7, #10]
 801d0ac:	701a      	strb	r2, [r3, #0]
	strncpy(warning_message.data->text, message, len);
 801d0ae:	4b0c      	ldr	r3, [pc, #48]	@ (801d0e0 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x4c>)
 801d0b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d0b2:	3301      	adds	r3, #1
 801d0b4:	7e3a      	ldrb	r2, [r7, #24]
 801d0b6:	6879      	ldr	r1, [r7, #4]
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f006 fed9 	bl	8023e70 <strncpy>
	warning_message.data->text[len + 1] = '\0';
 801d0be:	4b08      	ldr	r3, [pc, #32]	@ (801d0e0 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x4c>)
 801d0c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d0c2:	7e3b      	ldrb	r3, [r7, #24]
 801d0c4:	3301      	adds	r3, #1
 801d0c6:	4413      	add	r3, r2
 801d0c8:	2200      	movs	r2, #0
 801d0ca:	705a      	strb	r2, [r3, #1]
	this->config.communication->sendMessage(warning_message);
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	68db      	ldr	r3, [r3, #12]
 801d0d0:	4903      	ldr	r1, [pc, #12]	@ (801d0e0 <_ZN16TWIPR_Supervisor11sendWarningE24twipr_supervisor_error_t13twipr_error_tPKch+0x4c>)
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	f7f7 fdcc 	bl	8014c70 <_ZN26TWIPR_CommunicationManager11sendMessageER15BILBO_Message_t>
}
 801d0d8:	bf00      	nop
 801d0da:	3710      	adds	r7, #16
 801d0dc:	46bd      	mov	sp, r7
 801d0de:	bd80      	pop	{r7, pc}
 801d0e0:	24022c24 	.word	0x24022c24

0801d0e4 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t>:

/* ============================================================================= */
void TWIPR_Supervisor::setError(twipr_error_t error) {
 801d0e4:	b480      	push	{r7}
 801d0e6:	b083      	sub	sp, #12
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
 801d0ec:	460b      	mov	r3, r1
 801d0ee:	70fb      	strb	r3, [r7, #3]
	if (error > this->error) {
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d0f6:	78fa      	ldrb	r2, [r7, #3]
 801d0f8:	429a      	cmp	r2, r3
 801d0fa:	d903      	bls.n	801d104 <_ZN16TWIPR_Supervisor8setErrorE13twipr_error_t+0x20>
		this->error = error;
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	78fa      	ldrb	r2, [r7, #3]
 801d100:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}
}
 801d104:	bf00      	nop
 801d106:	370c      	adds	r7, #12
 801d108:	46bd      	mov	sp, r7
 801d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d10e:	4770      	bx	lr

0801d110 <_Z24startTwiprSupervisorTaskPv>:

/* ============================================================================= */
void startTwiprSupervisorTask(void *args) {
 801d110:	b580      	push	{r7, lr}
 801d112:	b084      	sub	sp, #16
 801d114:	af00      	add	r7, sp, #0
 801d116:	6078      	str	r0, [r7, #4]

	TWIPR_Supervisor *argument = (TWIPR_Supervisor*) args;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	60fb      	str	r3, [r7, #12]
	argument->task();
 801d11c:	68f8      	ldr	r0, [r7, #12]
 801d11e:	f7ff fe81 	bl	801ce24 <_ZN16TWIPR_Supervisor4taskEv>

}
 801d122:	bf00      	nop
 801d124:	3710      	adds	r7, #16
 801d126:	46bd      	mov	sp, r7
 801d128:	bd80      	pop	{r7, pc}
	...

0801d12c <_ZN13BILBO_MessageI24warning_message_struct_tL21serial_message_type_t5ELh16EEC1Ev>:
	BILBO_Message() {
 801d12c:	b580      	push	{r7, lr}
 801d12e:	b082      	sub	sp, #8
 801d130:	af00      	add	r7, sp, #0
 801d132:	6078      	str	r0, [r7, #4]
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	4618      	mov	r0, r3
 801d138:	f7f7 f974 	bl	8014424 <_ZN15BILBO_Message_tC1Ev>
 801d13c:	4a0a      	ldr	r2, [pc, #40]	@ (801d168 <_ZN13BILBO_MessageI24warning_message_struct_tL21serial_message_type_t5ELh16EEC1Ev+0x3c>)
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	601a      	str	r2, [r3, #0]
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	2265      	movs	r2, #101	@ 0x65
 801d146:	809a      	strh	r2, [r3, #4]
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	2205      	movs	r2, #5
 801d14c:	719a      	strb	r2, [r3, #6]
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	2210      	movs	r2, #16
 801d152:	71da      	strb	r2, [r3, #7]
		this->data = &this->data_union.data;
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	f103 0208 	add.w	r2, r3, #8
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	671a      	str	r2, [r3, #112]	@ 0x70
	}
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	4618      	mov	r0, r3
 801d162:	3708      	adds	r7, #8
 801d164:	46bd      	mov	sp, r7
 801d166:	bd80      	pop	{r7, pc}
 801d168:	080266f0 	.word	0x080266f0

0801d16c <_Z41__static_initialization_and_destruction_0ii>:
 801d16c:	b580      	push	{r7, lr}
 801d16e:	b082      	sub	sp, #8
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
 801d174:	6039      	str	r1, [r7, #0]
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	2b01      	cmp	r3, #1
 801d17a:	d10a      	bne.n	801d192 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801d17c:	683b      	ldr	r3, [r7, #0]
 801d17e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d182:	4293      	cmp	r3, r2
 801d184:	d105      	bne.n	801d192 <_Z41__static_initialization_and_destruction_0ii+0x26>
elapsedMillis timerDriveTick;
 801d186:	4805      	ldr	r0, [pc, #20]	@ (801d19c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801d188:	f7f9 fc24 	bl	80169d4 <_ZN13elapsedMillisC1Ev>
BILBO_Message_Warning warning_message;
 801d18c:	4804      	ldr	r0, [pc, #16]	@ (801d1a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801d18e:	f7ff ffcd 	bl	801d12c <_ZN13BILBO_MessageI24warning_message_struct_tL21serial_message_type_t5ELh16EEC1Ev>
}
 801d192:	bf00      	nop
 801d194:	3708      	adds	r7, #8
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
 801d19a:	bf00      	nop
 801d19c:	24022c20 	.word	0x24022c20
 801d1a0:	24022c24 	.word	0x24022c24

0801d1a4 <_ZN13BILBO_MessageI24warning_message_struct_tL21serial_message_type_t5ELh16EE6encodeEv>:
	core_comm_SerialMessage encode() override {
 801d1a4:	b480      	push	{r7}
 801d1a6:	b083      	sub	sp, #12
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	6078      	str	r0, [r7, #4]
 801d1ac:	6039      	str	r1, [r7, #0]
		msg.cmd = this->type;
 801d1ae:	683b      	ldr	r3, [r7, #0]
 801d1b0:	799a      	ldrb	r2, [r3, #6]
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	701a      	strb	r2, [r3, #0]
		msg.address_1 = 0x01;
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	2201      	movs	r2, #1
 801d1ba:	705a      	strb	r2, [r3, #1]
		msg.address_2 = this->id >> 8;
 801d1bc:	683b      	ldr	r3, [r7, #0]
 801d1be:	79db      	ldrb	r3, [r3, #7]
 801d1c0:	121b      	asrs	r3, r3, #8
 801d1c2:	b2da      	uxtb	r2, r3
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	709a      	strb	r2, [r3, #2]
		msg.address_3 = this->id;
 801d1c8:	683b      	ldr	r3, [r7, #0]
 801d1ca:	79da      	ldrb	r2, [r3, #7]
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	70da      	strb	r2, [r3, #3]
		msg.flag = 0x00;
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	711a      	strb	r2, [r3, #4]
		msg.data_ptr = this->data_union.data_buffer;
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	f103 0208 	add.w	r2, r3, #8
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	609a      	str	r2, [r3, #8]
		msg.len = this->len;
 801d1e0:	683b      	ldr	r3, [r7, #0]
 801d1e2:	889a      	ldrh	r2, [r3, #4]
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	819a      	strh	r2, [r3, #12]
		return msg;
 801d1e8:	bf00      	nop
	}
 801d1ea:	6878      	ldr	r0, [r7, #4]
 801d1ec:	370c      	adds	r7, #12
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1f4:	4770      	bx	lr

0801d1f6 <_GLOBAL__sub_I_timerDriveTick>:
 801d1f6:	b580      	push	{r7, lr}
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801d1fe:	2001      	movs	r0, #1
 801d200:	f7ff ffb4 	bl	801d16c <_Z41__static_initialization_and_destruction_0ii>
 801d204:	bd80      	pop	{r7, pc}

0801d206 <_ZN27twipr_sequencer_callbacks_tC1Ev>:
typedef struct twipr_sequencer_sample_t {
	uint16_t sequence_id;
	uint32_t sequence_tick;
} twipr_sequencer_sample_t;

typedef struct twipr_sequencer_callbacks_t {
 801d206:	b580      	push	{r7, lr}
 801d208:	b082      	sub	sp, #8
 801d20a:	af00      	add	r7, sp, #0
 801d20c:	6078      	str	r0, [r7, #4]
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	4618      	mov	r0, r3
 801d212:	f7f5 fb5b 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	3320      	adds	r3, #32
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7f5 fb56 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	3340      	adds	r3, #64	@ 0x40
 801d224:	4618      	mov	r0, r3
 801d226:	f7f5 fb51 	bl	80128cc <_ZN19core_utils_CallbackIvtEC1Ev>
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	4618      	mov	r0, r3
 801d22e:	3708      	adds	r7, #8
 801d230:	46bd      	mov	sp, r7
 801d232:	bd80      	pop	{r7, pc}

0801d234 <_ZN15TWIPR_SequencerC1Ev>:


_RAM_D2 twipr_sequence_input_t rx_sequence_buffer[TWIPR_SEQUENCE_BUFFER_SIZE];
_RAM_D2 twipr_sequence_input_t sequence_buffer[TWIPR_SEQUENCE_BUFFER_SIZE];

TWIPR_Sequencer::TWIPR_Sequencer() {
 801d234:	b580      	push	{r7, lr}
 801d236:	b082      	sub	sp, #8
 801d238:	af00      	add	r7, sp, #0
 801d23a:	6078      	str	r0, [r7, #4]
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	4a07      	ldr	r2, [pc, #28]	@ (801d25c <_ZN15TWIPR_SequencerC1Ev+0x28>)
 801d240:	61da      	str	r2, [r3, #28]
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	4a06      	ldr	r2, [pc, #24]	@ (801d260 <_ZN15TWIPR_SequencerC1Ev+0x2c>)
 801d246:	621a      	str	r2, [r3, #32]
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	3328      	adds	r3, #40	@ 0x28
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7ff ffda 	bl	801d206 <_ZN27twipr_sequencer_callbacks_tC1Ev>

}
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	4618      	mov	r0, r3
 801d256:	3708      	adds	r7, #8
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd80      	pop	{r7, pc}
 801d25c:	30000000 	.word	0x30000000
 801d260:	30011940 	.word	0x30011940

0801d264 <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t>:

/* =============================================================== */
void TWIPR_Sequencer::init(twipr_sequencer_config_t config) {
 801d264:	b590      	push	{r4, r7, lr}
 801d266:	b091      	sub	sp, #68	@ 0x44
 801d268:	af00      	add	r7, sp, #0
 801d26a:	60f8      	str	r0, [r7, #12]
 801d26c:	1d3b      	adds	r3, r7, #4
 801d26e:	e883 0006 	stmia.w	r3, {r1, r2}
	this->config = config;
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	3308      	adds	r3, #8
 801d276:	1d3a      	adds	r2, r7, #4
 801d278:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d27c:	e883 0003 	stmia.w	r3, {r0, r1}
	this->sequence_tick = 0;
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	2200      	movs	r2, #0
 801d284:	605a      	str	r2, [r3, #4]
	this->mode = TWIPR_SEQUENCER_MODE_IDLE;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	2200      	movs	r2, #0
 801d28a:	701a      	strb	r2, [r3, #0]

	this->config.comm->registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	68dc      	ldr	r4, [r3, #12]
			core_utils_Callback<void, uint16_t>(this,
 801d290:	4b12      	ldr	r3, [pc, #72]	@ (801d2dc <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t+0x78>)
 801d292:	633b      	str	r3, [r7, #48]	@ 0x30
 801d294:	2300      	movs	r3, #0
 801d296:	637b      	str	r3, [r7, #52]	@ 0x34
 801d298:	f107 0010 	add.w	r0, r7, #16
 801d29c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801d2a0:	cb0c      	ldmia	r3, {r2, r3}
 801d2a2:	68f9      	ldr	r1, [r7, #12]
 801d2a4:	f7fc fbf4 	bl	8019a90 <_ZN19core_utils_CallbackIvtEC1I15TWIPR_SequencerEEPT_MS3_FvtE>
	this->config.comm->registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
 801d2a8:	f107 0310 	add.w	r3, r7, #16
 801d2ac:	461a      	mov	r2, r3
 801d2ae:	2100      	movs	r1, #0
 801d2b0:	4620      	mov	r0, r4
 801d2b2:	f7f7 faa8 	bl	8014806 <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_Sequencer::spiSequenceReceived_callback));

	this->config.control->callbacks.mode_change.registerFunction(this, &TWIPR_Sequencer::modeChange_callback);
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	689b      	ldr	r3, [r3, #8]
 801d2ba:	f503 708e 	add.w	r0, r3, #284	@ 0x11c
 801d2be:	4b08      	ldr	r3, [pc, #32]	@ (801d2e0 <_ZN15TWIPR_Sequencer4initE24twipr_sequencer_config_t+0x7c>)
 801d2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d2c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801d2ca:	cb0c      	ldmia	r3, {r2, r3}
 801d2cc:	68f9      	ldr	r1, [r7, #12]
 801d2ce:	f000 f8f7 	bl	801d4c0 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE16registerFunctionI15TWIPR_SequencerEEbPT_MS4_FvS0_E>
}
 801d2d2:	bf00      	nop
 801d2d4:	3744      	adds	r7, #68	@ 0x44
 801d2d6:	46bd      	mov	sp, r7
 801d2d8:	bd90      	pop	{r4, r7, pc}
 801d2da:	bf00      	nop
 801d2dc:	0801d475 	.word	0x0801d475
 801d2e0:	0801d4a5 	.word	0x0801d4a5

0801d2e4 <_ZN15TWIPR_Sequencer5startEv>:
/* =============================================================== */
void TWIPR_Sequencer::start() {
 801d2e4:	b480      	push	{r7}
 801d2e6:	b083      	sub	sp, #12
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]

}
 801d2ec:	bf00      	nop
 801d2ee:	370c      	adds	r7, #12
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2f6:	4770      	bx	lr

0801d2f8 <_ZN15TWIPR_Sequencer6updateEv>:

/* =============================================================== */
void TWIPR_Sequencer::update() {
 801d2f8:	b480      	push	{r7}
 801d2fa:	b083      	sub	sp, #12
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]

	if (this->mode == TWIPR_SEQUENCER_MODE_IDLE) {
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	781b      	ldrb	r3, [r3, #0]
 801d304:	2b00      	cmp	r3, #0
	}

	// Do the Update


}
 801d306:	370c      	adds	r7, #12
 801d308:	46bd      	mov	sp, r7
 801d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d30e:	4770      	bx	lr

0801d310 <_ZN15TWIPR_Sequencer13startSequenceEt>:
/* =============================================================== */
void TWIPR_Sequencer::startSequence(uint16_t id) {
 801d310:	b580      	push	{r7, lr}
 801d312:	b082      	sub	sp, #8
 801d314:	af00      	add	r7, sp, #0
 801d316:	6078      	str	r0, [r7, #4]
 801d318:	460b      	mov	r3, r1
 801d31a:	807b      	strh	r3, [r7, #2]
	this->sequence_tick = 0;
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	2200      	movs	r2, #0
 801d320:	605a      	str	r2, [r3, #4]

	// Check the requirements
	if (!this->_sequence_received){
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801d328:	f083 0301 	eor.w	r3, r3, #1
 801d32c:	b2db      	uxtb	r3, r3
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d12d      	bne.n	801d38e <_ZN15TWIPR_Sequencer13startSequenceEt+0x7e>
		return;
	}

	// Check the control mode
	if (this->config.control->mode != this->loaded_sequence.control_mode){
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	689b      	ldr	r3, [r3, #8]
 801d336:	785a      	ldrb	r2, [r3, #1]
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	7e9b      	ldrb	r3, [r3, #26]
 801d33c:	429a      	cmp	r2, r3
 801d33e:	d128      	bne.n	801d392 <_ZN15TWIPR_Sequencer13startSequenceEt+0x82>
		return;
	}

	// Check if the loaded sequence has the same id
	if (this->loaded_sequence.sequence_id !=  id){
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	8a1b      	ldrh	r3, [r3, #16]
 801d344:	887a      	ldrh	r2, [r7, #2]
 801d346:	429a      	cmp	r2, r3
 801d348:	d125      	bne.n	801d396 <_ZN15TWIPR_Sequencer13startSequenceEt+0x86>
		return;
	}


	this->mode = TWIPR_SEQUENCER_MODE_RUNNING;
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	2201      	movs	r2, #1
 801d34e:	701a      	strb	r2, [r3, #0]

	// Disable External Inputs to the controller
	this->config.control->disableExternalInput();
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	689b      	ldr	r3, [r3, #8]
 801d354:	4618      	mov	r0, r3
 801d356:	f7f8 fc53 	bl	8015c00 <_ZN20TWIPR_ControlManager20disableExternalInputEv>

	// Give an audio queue
	rc_buzzer.setConfig(900, 250, this->loaded_sequence.sequence_id);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	8a1b      	ldrh	r3, [r3, #16]
 801d35e:	b2db      	uxtb	r3, r3
 801d360:	461a      	mov	r2, r3
 801d362:	21fa      	movs	r1, #250	@ 0xfa
 801d364:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 801d3a0 <_ZN15TWIPR_Sequencer13startSequenceEt+0x90>
 801d368:	480e      	ldr	r0, [pc, #56]	@ (801d3a4 <_ZN15TWIPR_Sequencer13startSequenceEt+0x94>)
 801d36a:	f000 fb41 	bl	801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801d36e:	480d      	ldr	r0, [pc, #52]	@ (801d3a4 <_ZN15TWIPR_Sequencer13startSequenceEt+0x94>)
 801d370:	f000 fb56 	bl	801da20 <_ZN19RobotControl_Buzzer5startEv>

	// Call the callback(s)
	if (this->_callbacks.started.registered) {
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d00c      	beq.n	801d398 <_ZN15TWIPR_Sequencer13startSequenceEt+0x88>
		this->_callbacks.started.call((uint16_t) id);
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	3328      	adds	r3, #40	@ 0x28
 801d382:	887a      	ldrh	r2, [r7, #2]
 801d384:	4611      	mov	r1, r2
 801d386:	4618      	mov	r0, r3
 801d388:	f7f5 faf2 	bl	8012970 <_ZN19core_utils_CallbackIvtE4callEt>
 801d38c:	e004      	b.n	801d398 <_ZN15TWIPR_Sequencer13startSequenceEt+0x88>
		return;
 801d38e:	bf00      	nop
 801d390:	e002      	b.n	801d398 <_ZN15TWIPR_Sequencer13startSequenceEt+0x88>
		return;
 801d392:	bf00      	nop
 801d394:	e000      	b.n	801d398 <_ZN15TWIPR_Sequencer13startSequenceEt+0x88>
		return;
 801d396:	bf00      	nop
	}
}
 801d398:	3708      	adds	r7, #8
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	44610000 	.word	0x44610000
 801d3a4:	24022cbc 	.word	0x24022cbc

0801d3a8 <_ZN15TWIPR_Sequencer13abortSequenceEv>:

/* =============================================================== */
void TWIPR_Sequencer::abortSequence() {
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b082      	sub	sp, #8
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	6078      	str	r0, [r7, #4]

	// TODO: I need to reflect in the sample if the sequence was finished or aborted

	// Enable external inputs to the controller
	this->config.control->enableExternalInput();
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	689b      	ldr	r3, [r3, #8]
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	f7f8 fc31 	bl	8015c1c <_ZN20TWIPR_ControlManager19enableExternalInputEv>

	// Set the mode
	this->mode = TWIPR_SEQUENCER_MODE_ERROR;
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	2202      	movs	r2, #2
 801d3be:	701a      	strb	r2, [r3, #0]

	// Give an audio queue
	rc_buzzer.setConfig(900, 100, 3);
 801d3c0:	2203      	movs	r2, #3
 801d3c2:	2164      	movs	r1, #100	@ 0x64
 801d3c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801d3f8 <_ZN15TWIPR_Sequencer13abortSequenceEv+0x50>
 801d3c8:	480c      	ldr	r0, [pc, #48]	@ (801d3fc <_ZN15TWIPR_Sequencer13abortSequenceEv+0x54>)
 801d3ca:	f000 fb11 	bl	801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801d3ce:	480b      	ldr	r0, [pc, #44]	@ (801d3fc <_ZN15TWIPR_Sequencer13abortSequenceEv+0x54>)
 801d3d0:	f000 fb26 	bl	801da20 <_ZN19RobotControl_Buzzer5startEv>

	// TODO: Send Data to Host

	//
	if (this->_callbacks.aborted.registered) {
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d008      	beq.n	801d3f0 <_ZN15TWIPR_Sequencer13abortSequenceEv+0x48>
		this->_callbacks.aborted.call(
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
				(uint16_t) this->loaded_sequence.sequence_id);
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	8a1b      	ldrh	r3, [r3, #16]
		this->_callbacks.aborted.call(
 801d3e8:	4619      	mov	r1, r3
 801d3ea:	4610      	mov	r0, r2
 801d3ec:	f7f5 fac0 	bl	8012970 <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 801d3f0:	bf00      	nop
 801d3f2:	3708      	adds	r7, #8
 801d3f4:	46bd      	mov	sp, r7
 801d3f6:	bd80      	pop	{r7, pc}
 801d3f8:	44610000 	.word	0x44610000
 801d3fc:	24022cbc 	.word	0x24022cbc

0801d400 <_ZN15TWIPR_Sequencer12loadSequenceE31twipr_sequencer_sequence_data_t>:
				(uint16_t) this->loaded_sequence.sequence_id);
	}
}
/* =============================================================== */
void TWIPR_Sequencer::loadSequence(
		twipr_sequencer_sequence_data_t sequence_data) {
 801d400:	b580      	push	{r7, lr}
 801d402:	b084      	sub	sp, #16
 801d404:	af00      	add	r7, sp, #0
 801d406:	60f8      	str	r0, [r7, #12]
 801d408:	4638      	mov	r0, r7
 801d40a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->loaded_sequence = sequence_data;
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	3310      	adds	r3, #16
 801d412:	463a      	mov	r2, r7
 801d414:	ca07      	ldmia	r2, {r0, r1, r2}
 801d416:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	this->_sequence_received = false;
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	2200      	movs	r2, #0
 801d41e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	this->config.comm->receiveTrajectory();
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	68db      	ldr	r3, [r3, #12]
 801d426:	4618      	mov	r0, r3
 801d428:	f7f7 fbe6 	bl	8014bf8 <_ZN26TWIPR_CommunicationManager17receiveTrajectoryEv>
}
 801d42c:	bf00      	nop
 801d42e:	3710      	adds	r7, #16
 801d430:	46bd      	mov	sp, r7
 801d432:	bd80      	pop	{r7, pc}

0801d434 <_ZN15TWIPR_Sequencer9getSampleEv>:
void TWIPR_Sequencer::resetSequenceData() {

}

/* =============================================================== */
twipr_sequencer_sample_t TWIPR_Sequencer::getSample() {
 801d434:	b480      	push	{r7}
 801d436:	b083      	sub	sp, #12
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]
 801d43c:	6039      	str	r1, [r7, #0]
	twipr_sequencer_sample_t sample;

	if (this->mode == TWIPR_SEQUENCER_MODE_RUNNING) {
 801d43e:	683b      	ldr	r3, [r7, #0]
 801d440:	781b      	ldrb	r3, [r3, #0]
 801d442:	2b01      	cmp	r3, #1
 801d444:	d108      	bne.n	801d458 <_ZN15TWIPR_Sequencer9getSampleEv+0x24>
		sample.sequence_id = this->loaded_sequence.sequence_id;
 801d446:	683b      	ldr	r3, [r7, #0]
 801d448:	8a1a      	ldrh	r2, [r3, #16]
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	801a      	strh	r2, [r3, #0]
		sample.sequence_tick = this->sequence_tick;
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	685a      	ldr	r2, [r3, #4]
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	605a      	str	r2, [r3, #4]
	} else {
		sample.sequence_id = 0;
		sample.sequence_tick = 0;
	}

	return sample;
 801d456:	e005      	b.n	801d464 <_ZN15TWIPR_Sequencer9getSampleEv+0x30>
		sample.sequence_id = 0;
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	2200      	movs	r2, #0
 801d45c:	801a      	strh	r2, [r3, #0]
		sample.sequence_tick = 0;
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	2200      	movs	r2, #0
 801d462:	605a      	str	r2, [r3, #4]
	return sample;
 801d464:	bf00      	nop
}
 801d466:	6878      	ldr	r0, [r7, #4]
 801d468:	370c      	adds	r7, #12
 801d46a:	46bd      	mov	sp, r7
 801d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d470:	4770      	bx	lr
	...

0801d474 <_ZN15TWIPR_Sequencer28spiSequenceReceived_callbackEt>:

/* =============================================================== */
void TWIPR_Sequencer::spiSequenceReceived_callback(uint16_t trajectory_length) {
 801d474:	b580      	push	{r7, lr}
 801d476:	b082      	sub	sp, #8
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
 801d47c:	460b      	mov	r3, r1
 801d47e:	807b      	strh	r3, [r7, #2]
	// Copy the trajectory into the buffer
	memcpy((uint8_t*) this->buffer,
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	6a18      	ldr	r0, [r3, #32]
			(uint8_t*) this->rx_buffer,
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	69db      	ldr	r3, [r3, #28]
	memcpy((uint8_t*) this->buffer,
 801d488:	4a05      	ldr	r2, [pc, #20]	@ (801d4a0 <_ZN15TWIPR_Sequencer28spiSequenceReceived_callbackEt+0x2c>)
 801d48a:	4619      	mov	r1, r3
 801d48c:	f006 fdad 	bl	8023fea <memcpy>
			sizeof(twipr_sequence_input_t) * TWIPR_SEQUENCE_BUFFER_SIZE);

	this->_sequence_received = true;
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	2201      	movs	r2, #1
 801d494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 801d498:	bf00      	nop
 801d49a:	3708      	adds	r7, #8
 801d49c:	46bd      	mov	sp, r7
 801d49e:	bd80      	pop	{r7, pc}
 801d4a0:	00011940 	.word	0x00011940

0801d4a4 <_ZN15TWIPR_Sequencer19modeChange_callbackE20twipr_control_mode_t>:

/* =============================================================== */
void TWIPR_Sequencer::modeChange_callback(twipr_control_mode_t mode){
 801d4a4:	b480      	push	{r7}
 801d4a6:	b083      	sub	sp, #12
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	6078      	str	r0, [r7, #4]
 801d4ac:	460b      	mov	r3, r1
 801d4ae:	70fb      	strb	r3, [r7, #3]
	// TODO
	if (this->mode != TWIPR_SEQUENCER_MODE_RUNNING){
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	781b      	ldrb	r3, [r3, #0]
 801d4b4:	2b01      	cmp	r3, #1
		return;
	}


}
 801d4b6:	370c      	adds	r7, #12
 801d4b8:	46bd      	mov	sp, r7
 801d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4be:	4770      	bx	lr

0801d4c0 <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE16registerFunctionI15TWIPR_SequencerEEbPT_MS4_FvS0_E>:
	bool registerFunction(cls *object, void (cls::*member)(input_type)) {
 801d4c0:	b580      	push	{r7, lr}
 801d4c2:	b084      	sub	sp, #16
 801d4c4:	af00      	add	r7, sp, #0
 801d4c6:	60f8      	str	r0, [r7, #12]
 801d4c8:	60b9      	str	r1, [r7, #8]
 801d4ca:	4639      	mov	r1, r7
 801d4cc:	e881 000c 	stmia.w	r1, {r2, r3}
		if (this->callback_index < num_callbacks) {
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	2b03      	cmp	r3, #3
 801d4d6:	dc11      	bgt.n	801d4fc <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE16registerFunctionI15TWIPR_SequencerEEbPT_MS4_FvS0_E+0x3c>
			this->callbacks[this->callback_index].set(object, member);
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	015b      	lsls	r3, r3, #5
 801d4de:	68fa      	ldr	r2, [r7, #12]
 801d4e0:	4413      	add	r3, r2
 801d4e2:	1d18      	adds	r0, r3, #4
 801d4e4:	463b      	mov	r3, r7
 801d4e6:	cb0c      	ldmia	r3, {r2, r3}
 801d4e8:	68b9      	ldr	r1, [r7, #8]
 801d4ea:	f000 f80c 	bl	801d506 <_ZN19core_utils_CallbackIv20twipr_control_mode_tE3setI15TWIPR_SequencerEEvPT_MS4_FvS0_E>
			this->callback_index++;
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	1c5a      	adds	r2, r3, #1
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	601a      	str	r2, [r3, #0]
			return true;
 801d4f8:	2301      	movs	r3, #1
 801d4fa:	e000      	b.n	801d4fe <_ZN28core_utils_CallbackContainerILi4E20twipr_control_mode_tE16registerFunctionI15TWIPR_SequencerEEbPT_MS4_FvS0_E+0x3e>
			return false;
 801d4fc:	2300      	movs	r3, #0
	}
 801d4fe:	4618      	mov	r0, r3
 801d500:	3710      	adds	r7, #16
 801d502:	46bd      	mov	sp, r7
 801d504:	bd80      	pop	{r7, pc}

0801d506 <_ZN19core_utils_CallbackIv20twipr_control_mode_tE3setI15TWIPR_SequencerEEvPT_MS4_FvS0_E>:
	void set(cls *object, void (cls::*member)(input_type)) {
 801d506:	b5b0      	push	{r4, r5, r7, lr}
 801d508:	b08a      	sub	sp, #40	@ 0x28
 801d50a:	af00      	add	r7, sp, #0
 801d50c:	60f8      	str	r0, [r7, #12]
 801d50e:	60b9      	str	r1, [r7, #8]
 801d510:	4639      	mov	r1, r7
 801d512:	e881 000c 	stmia.w	r1, {r2, r3}
		this->_fp = core_utils_FunctionPointer<void, input_type>(object,
 801d516:	f107 0010 	add.w	r0, r7, #16
 801d51a:	463b      	mov	r3, r7
 801d51c:	cb0c      	ldmia	r3, {r2, r3}
 801d51e:	68b9      	ldr	r1, [r7, #8]
 801d520:	f000 f812 	bl	801d548 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E>
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	f103 0408 	add.w	r4, r3, #8
 801d52a:	f107 0510 	add.w	r5, r7, #16
 801d52e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d532:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d536:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	2201      	movs	r2, #1
 801d53e:	711a      	strb	r2, [r3, #4]
	}
 801d540:	bf00      	nop
 801d542:	3728      	adds	r7, #40	@ 0x28
 801d544:	46bd      	mov	sp, r7
 801d546:	bdb0      	pop	{r4, r5, r7, pc}

0801d548 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tEC1I15TWIPR_SequencerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801d548:	b580      	push	{r7, lr}
 801d54a:	b084      	sub	sp, #16
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	60f8      	str	r0, [r7, #12]
 801d550:	60b9      	str	r1, [r7, #8]
 801d552:	4639      	mov	r1, r7
 801d554:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801d558:	463b      	mov	r3, r7
 801d55a:	cb0c      	ldmia	r3, {r2, r3}
 801d55c:	68b9      	ldr	r1, [r7, #8]
 801d55e:	68f8      	ldr	r0, [r7, #12]
 801d560:	f000 f806 	bl	801d570 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE6attachI15TWIPR_SequencerEEvPT_MS4_FvS0_E>
    }
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	4618      	mov	r0, r3
 801d568:	3710      	adds	r7, #16
 801d56a:	46bd      	mov	sp, r7
 801d56c:	bd80      	pop	{r7, pc}
	...

0801d570 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE6attachI15TWIPR_SequencerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801d570:	b480      	push	{r7}
 801d572:	b085      	sub	sp, #20
 801d574:	af00      	add	r7, sp, #0
 801d576:	60f8      	str	r0, [r7, #12]
 801d578:	60b9      	str	r1, [r7, #8]
 801d57a:	4639      	mov	r1, r7
 801d57c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	68ba      	ldr	r2, [r7, #8]
 801d584:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	3304      	adds	r3, #4
 801d58a:	461a      	mov	r2, r3
 801d58c:	463b      	mov	r3, r7
 801d58e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d592:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	4a03      	ldr	r2, [pc, #12]	@ (801d5a8 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE6attachI15TWIPR_SequencerEEvPT_MS4_FvS0_E+0x38>)
 801d59a:	615a      	str	r2, [r3, #20]
    }
 801d59c:	bf00      	nop
 801d59e:	3714      	adds	r7, #20
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5a6:	4770      	bx	lr
 801d5a8:	0801d5ad 	.word	0x0801d5ad

0801d5ac <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE12membercallerI15TWIPR_SequencerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801d5ac:	b580      	push	{r7, lr}
 801d5ae:	b086      	sub	sp, #24
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	60f8      	str	r0, [r7, #12]
 801d5b4:	60b9      	str	r1, [r7, #8]
 801d5b6:	4613      	mov	r3, r2
 801d5b8:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801d5be:	68bb      	ldr	r3, [r7, #8]
 801d5c0:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801d5c2:	693b      	ldr	r3, [r7, #16]
 801d5c4:	685b      	ldr	r3, [r3, #4]
 801d5c6:	105b      	asrs	r3, r3, #1
 801d5c8:	461a      	mov	r2, r3
 801d5ca:	697b      	ldr	r3, [r7, #20]
 801d5cc:	1898      	adds	r0, r3, r2
 801d5ce:	693b      	ldr	r3, [r7, #16]
 801d5d0:	685b      	ldr	r3, [r3, #4]
 801d5d2:	f003 0301 	and.w	r3, r3, #1
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d00b      	beq.n	801d5f2 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE12membercallerI15TWIPR_SequencerEEvPvPjS0_+0x46>
 801d5da:	693b      	ldr	r3, [r7, #16]
 801d5dc:	685b      	ldr	r3, [r3, #4]
 801d5de:	105b      	asrs	r3, r3, #1
 801d5e0:	461a      	mov	r2, r3
 801d5e2:	697b      	ldr	r3, [r7, #20]
 801d5e4:	4413      	add	r3, r2
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	693a      	ldr	r2, [r7, #16]
 801d5ea:	6812      	ldr	r2, [r2, #0]
 801d5ec:	4413      	add	r3, r2
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	e001      	b.n	801d5f6 <_ZN26core_utils_FunctionPointerIv20twipr_control_mode_tE12membercallerI15TWIPR_SequencerEEvPvPjS0_+0x4a>
 801d5f2:	693b      	ldr	r3, [r7, #16]
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	79fa      	ldrb	r2, [r7, #7]
 801d5f8:	4611      	mov	r1, r2
 801d5fa:	4798      	blx	r3
 801d5fc:	bf00      	nop
    }
 801d5fe:	3718      	adds	r7, #24
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}

0801d604 <_ZN21RobotControl_ExtenderC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "robot-control_extender.h"

RobotControl_Extender::RobotControl_Extender() {
 801d604:	b480      	push	{r7}
 801d606:	b083      	sub	sp, #12
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]

}
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	4618      	mov	r0, r3
 801d610:	370c      	adds	r7, #12
 801d612:	46bd      	mov	sp, r7
 801d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d618:	4770      	bx	lr

0801d61a <_ZN21RobotControl_Extender4initE24extender_config_struct_t>:

void RobotControl_Extender::init(extender_config_struct_t config) {
 801d61a:	b480      	push	{r7}
 801d61c:	b083      	sub	sp, #12
 801d61e:	af00      	add	r7, sp, #0
 801d620:	6078      	str	r0, [r7, #4]
 801d622:	6039      	str	r1, [r7, #0]

	this->config = config;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	683a      	ldr	r2, [r7, #0]
 801d628:	601a      	str	r2, [r3, #0]

}
 801d62a:	bf00      	nop
 801d62c:	370c      	adds	r7, #12
 801d62e:	46bd      	mov	sp, r7
 801d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d634:	4770      	bx	lr

0801d636 <_ZN21RobotControl_Extender12setStatusLEDEa>:

void RobotControl_Extender::start() {

}

void RobotControl_Extender::setStatusLED(int8_t status) {
 801d636:	b580      	push	{r7, lr}
 801d638:	b088      	sub	sp, #32
 801d63a:	af04      	add	r7, sp, #16
 801d63c:	6078      	str	r0, [r7, #4]
 801d63e:	460b      	mov	r3, r1
 801d640:	70fb      	strb	r3, [r7, #3]

	uint8_t data = (uint8_t) status;
 801d642:	78fb      	ldrb	r3, [r7, #3]
 801d644:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c,
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	6818      	ldr	r0, [r3, #0]
 801d64a:	2364      	movs	r3, #100	@ 0x64
 801d64c:	9302      	str	r3, [sp, #8]
 801d64e:	2301      	movs	r3, #1
 801d650:	9301      	str	r3, [sp, #4]
 801d652:	f107 030f 	add.w	r3, r7, #15
 801d656:	9300      	str	r3, [sp, #0]
 801d658:	2301      	movs	r3, #1
 801d65a:	221c      	movs	r2, #28
 801d65c:	2102      	movs	r1, #2
 801d65e:	f7e9 f8f5 	bl	800684c <HAL_I2C_Mem_Write>
	EXTENDER_ADDRESS, REG_ERROR_LED_CONFIG, 1, &data, 1, 100);
}
 801d662:	bf00      	nop
 801d664:	3710      	adds	r7, #16
 801d666:	46bd      	mov	sp, r7
 801d668:	bd80      	pop	{r7, pc}

0801d66a <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>:

void RobotControl_Extender::rgbLED_intern_setState(uint8_t position,
		uint8_t state) {
 801d66a:	b580      	push	{r7, lr}
 801d66c:	b086      	sub	sp, #24
 801d66e:	af04      	add	r7, sp, #16
 801d670:	6078      	str	r0, [r7, #4]
 801d672:	460b      	mov	r3, r1
 801d674:	70fb      	strb	r3, [r7, #3]
 801d676:	4613      	mov	r3, r2
 801d678:	70bb      	strb	r3, [r7, #2]

	state = (state << 7) + 0;
 801d67a:	78bb      	ldrb	r3, [r7, #2]
 801d67c:	01db      	lsls	r3, r3, #7
 801d67e:	b2db      	uxtb	r3, r3
 801d680:	70bb      	strb	r3, [r7, #2]

	switch (position) {
 801d682:	78fb      	ldrb	r3, [r7, #3]
 801d684:	2b02      	cmp	r3, #2
 801d686:	d022      	beq.n	801d6ce <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x64>
 801d688:	2b02      	cmp	r3, #2
 801d68a:	dc2e      	bgt.n	801d6ea <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d002      	beq.n	801d696 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x2c>
 801d690:	2b01      	cmp	r3, #1
 801d692:	d00e      	beq.n	801d6b2 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x48>
	case 2:
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_CONFIG, 1, &state, 1, 10);
		break;
	default:
		break;
 801d694:	e029      	b.n	801d6ea <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6818      	ldr	r0, [r3, #0]
 801d69a:	230a      	movs	r3, #10
 801d69c:	9302      	str	r3, [sp, #8]
 801d69e:	2301      	movs	r3, #1
 801d6a0:	9301      	str	r3, [sp, #4]
 801d6a2:	1cbb      	adds	r3, r7, #2
 801d6a4:	9300      	str	r3, [sp, #0]
 801d6a6:	2301      	movs	r3, #1
 801d6a8:	2220      	movs	r2, #32
 801d6aa:	2102      	movs	r1, #2
 801d6ac:	f7e9 f8ce 	bl	800684c <HAL_I2C_Mem_Write>
		break;
 801d6b0:	e01c      	b.n	801d6ec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	6818      	ldr	r0, [r3, #0]
 801d6b6:	230a      	movs	r3, #10
 801d6b8:	9302      	str	r3, [sp, #8]
 801d6ba:	2301      	movs	r3, #1
 801d6bc:	9301      	str	r3, [sp, #4]
 801d6be:	1cbb      	adds	r3, r7, #2
 801d6c0:	9300      	str	r3, [sp, #0]
 801d6c2:	2301      	movs	r3, #1
 801d6c4:	2226      	movs	r2, #38	@ 0x26
 801d6c6:	2102      	movs	r1, #2
 801d6c8:	f7e9 f8c0 	bl	800684c <HAL_I2C_Mem_Write>
		break;
 801d6cc:	e00e      	b.n	801d6ec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	6818      	ldr	r0, [r3, #0]
 801d6d2:	230a      	movs	r3, #10
 801d6d4:	9302      	str	r3, [sp, #8]
 801d6d6:	2301      	movs	r3, #1
 801d6d8:	9301      	str	r3, [sp, #4]
 801d6da:	1cbb      	adds	r3, r7, #2
 801d6dc:	9300      	str	r3, [sp, #0]
 801d6de:	2301      	movs	r3, #1
 801d6e0:	222c      	movs	r2, #44	@ 0x2c
 801d6e2:	2102      	movs	r1, #2
 801d6e4:	f7e9 f8b2 	bl	800684c <HAL_I2C_Mem_Write>
		break;
 801d6e8:	e000      	b.n	801d6ec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		break;
 801d6ea:	bf00      	nop
	}
}
 801d6ec:	bf00      	nop
 801d6ee:	3708      	adds	r7, #8
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	bd80      	pop	{r7, pc}

0801d6f4 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>:

void RobotControl_Extender::rgbLED_intern_setColor(uint8_t position,
		uint8_t red, uint8_t green, uint8_t blue) {
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b086      	sub	sp, #24
 801d6f8:	af04      	add	r7, sp, #16
 801d6fa:	6078      	str	r0, [r7, #4]
 801d6fc:	4608      	mov	r0, r1
 801d6fe:	4611      	mov	r1, r2
 801d700:	461a      	mov	r2, r3
 801d702:	4603      	mov	r3, r0
 801d704:	70fb      	strb	r3, [r7, #3]
 801d706:	460b      	mov	r3, r1
 801d708:	70bb      	strb	r3, [r7, #2]
 801d70a:	4613      	mov	r3, r2
 801d70c:	707b      	strb	r3, [r7, #1]
	switch (position) {
 801d70e:	78fb      	ldrb	r3, [r7, #3]
 801d710:	2b02      	cmp	r3, #2
 801d712:	d058      	beq.n	801d7c6 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0xd2>
 801d714:	2b02      	cmp	r3, #2
 801d716:	dc7f      	bgt.n	801d818 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d002      	beq.n	801d722 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x2e>
 801d71c:	2b01      	cmp	r3, #1
 801d71e:	d029      	beq.n	801d774 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x80>
		REG_STATUS_RGB_LED_3_GREEN, 1, &green, 1, 10);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_BLUE, 1, &blue, 1, 10);
		break;
	default:
		break;
 801d720:	e07a      	b.n	801d818 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	6818      	ldr	r0, [r3, #0]
 801d726:	230a      	movs	r3, #10
 801d728:	9302      	str	r3, [sp, #8]
 801d72a:	2301      	movs	r3, #1
 801d72c:	9301      	str	r3, [sp, #4]
 801d72e:	1cbb      	adds	r3, r7, #2
 801d730:	9300      	str	r3, [sp, #0]
 801d732:	2301      	movs	r3, #1
 801d734:	2221      	movs	r2, #33	@ 0x21
 801d736:	2102      	movs	r1, #2
 801d738:	f7e9 f888 	bl	800684c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	6818      	ldr	r0, [r3, #0]
 801d740:	230a      	movs	r3, #10
 801d742:	9302      	str	r3, [sp, #8]
 801d744:	2301      	movs	r3, #1
 801d746:	9301      	str	r3, [sp, #4]
 801d748:	1c7b      	adds	r3, r7, #1
 801d74a:	9300      	str	r3, [sp, #0]
 801d74c:	2301      	movs	r3, #1
 801d74e:	2222      	movs	r2, #34	@ 0x22
 801d750:	2102      	movs	r1, #2
 801d752:	f7e9 f87b 	bl	800684c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	6818      	ldr	r0, [r3, #0]
 801d75a:	230a      	movs	r3, #10
 801d75c:	9302      	str	r3, [sp, #8]
 801d75e:	2301      	movs	r3, #1
 801d760:	9301      	str	r3, [sp, #4]
 801d762:	f107 0310 	add.w	r3, r7, #16
 801d766:	9300      	str	r3, [sp, #0]
 801d768:	2301      	movs	r3, #1
 801d76a:	2223      	movs	r2, #35	@ 0x23
 801d76c:	2102      	movs	r1, #2
 801d76e:	f7e9 f86d 	bl	800684c <HAL_I2C_Mem_Write>
		break;
 801d772:	e052      	b.n	801d81a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	6818      	ldr	r0, [r3, #0]
 801d778:	230a      	movs	r3, #10
 801d77a:	9302      	str	r3, [sp, #8]
 801d77c:	2301      	movs	r3, #1
 801d77e:	9301      	str	r3, [sp, #4]
 801d780:	1cbb      	adds	r3, r7, #2
 801d782:	9300      	str	r3, [sp, #0]
 801d784:	2301      	movs	r3, #1
 801d786:	2227      	movs	r2, #39	@ 0x27
 801d788:	2102      	movs	r1, #2
 801d78a:	f7e9 f85f 	bl	800684c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	6818      	ldr	r0, [r3, #0]
 801d792:	230a      	movs	r3, #10
 801d794:	9302      	str	r3, [sp, #8]
 801d796:	2301      	movs	r3, #1
 801d798:	9301      	str	r3, [sp, #4]
 801d79a:	1c7b      	adds	r3, r7, #1
 801d79c:	9300      	str	r3, [sp, #0]
 801d79e:	2301      	movs	r3, #1
 801d7a0:	2228      	movs	r2, #40	@ 0x28
 801d7a2:	2102      	movs	r1, #2
 801d7a4:	f7e9 f852 	bl	800684c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	6818      	ldr	r0, [r3, #0]
 801d7ac:	230a      	movs	r3, #10
 801d7ae:	9302      	str	r3, [sp, #8]
 801d7b0:	2301      	movs	r3, #1
 801d7b2:	9301      	str	r3, [sp, #4]
 801d7b4:	f107 0310 	add.w	r3, r7, #16
 801d7b8:	9300      	str	r3, [sp, #0]
 801d7ba:	2301      	movs	r3, #1
 801d7bc:	2229      	movs	r2, #41	@ 0x29
 801d7be:	2102      	movs	r1, #2
 801d7c0:	f7e9 f844 	bl	800684c <HAL_I2C_Mem_Write>
		break;
 801d7c4:	e029      	b.n	801d81a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	6818      	ldr	r0, [r3, #0]
 801d7ca:	230a      	movs	r3, #10
 801d7cc:	9302      	str	r3, [sp, #8]
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	9301      	str	r3, [sp, #4]
 801d7d2:	1cbb      	adds	r3, r7, #2
 801d7d4:	9300      	str	r3, [sp, #0]
 801d7d6:	2301      	movs	r3, #1
 801d7d8:	222d      	movs	r2, #45	@ 0x2d
 801d7da:	2102      	movs	r1, #2
 801d7dc:	f7e9 f836 	bl	800684c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	6818      	ldr	r0, [r3, #0]
 801d7e4:	230a      	movs	r3, #10
 801d7e6:	9302      	str	r3, [sp, #8]
 801d7e8:	2301      	movs	r3, #1
 801d7ea:	9301      	str	r3, [sp, #4]
 801d7ec:	1c7b      	adds	r3, r7, #1
 801d7ee:	9300      	str	r3, [sp, #0]
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	222e      	movs	r2, #46	@ 0x2e
 801d7f4:	2102      	movs	r1, #2
 801d7f6:	f7e9 f829 	bl	800684c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	6818      	ldr	r0, [r3, #0]
 801d7fe:	230a      	movs	r3, #10
 801d800:	9302      	str	r3, [sp, #8]
 801d802:	2301      	movs	r3, #1
 801d804:	9301      	str	r3, [sp, #4]
 801d806:	f107 0310 	add.w	r3, r7, #16
 801d80a:	9300      	str	r3, [sp, #0]
 801d80c:	2301      	movs	r3, #1
 801d80e:	222f      	movs	r2, #47	@ 0x2f
 801d810:	2102      	movs	r1, #2
 801d812:	f7e9 f81b 	bl	800684c <HAL_I2C_Mem_Write>
		break;
 801d816:	e000      	b.n	801d81a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		break;
 801d818:	bf00      	nop
	}
}
 801d81a:	bf00      	nop
 801d81c:	3708      	adds	r7, #8
 801d81e:	46bd      	mov	sp, r7
 801d820:	bd80      	pop	{r7, pc}

0801d822 <_ZN21RobotControl_Extender27rgbLEDStrip_extern_setColorE18rgb_color_struct_t>:
//	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
//	REG_EXTERNAL_RGB_GLOBAL_BLUE, 1, &blue, 1, 10);
//}


void RobotControl_Extender::rgbLEDStrip_extern_setColor(rgb_color_struct_t color) {
 801d822:	b580      	push	{r7, lr}
 801d824:	b086      	sub	sp, #24
 801d826:	af04      	add	r7, sp, #16
 801d828:	6078      	str	r0, [r7, #4]
 801d82a:	6039      	str	r1, [r7, #0]

//	this->rgbLEDStrip_extern_setColor(color[0], color[1], color[2]);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	6818      	ldr	r0, [r3, #0]
 801d830:	230a      	movs	r3, #10
 801d832:	9302      	str	r3, [sp, #8]
 801d834:	2301      	movs	r3, #1
 801d836:	9301      	str	r3, [sp, #4]
 801d838:	463b      	mov	r3, r7
 801d83a:	9300      	str	r3, [sp, #0]
 801d83c:	2301      	movs	r3, #1
 801d83e:	2241      	movs	r2, #65	@ 0x41
 801d840:	2102      	movs	r1, #2
 801d842:	f7e9 f803 	bl	800684c <HAL_I2C_Mem_Write>
		REG_EXTERNAL_RGB_GLOBAL_RED, 1, &color.red, 1, 10);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	6818      	ldr	r0, [r3, #0]
 801d84a:	230a      	movs	r3, #10
 801d84c:	9302      	str	r3, [sp, #8]
 801d84e:	2301      	movs	r3, #1
 801d850:	9301      	str	r3, [sp, #4]
 801d852:	463b      	mov	r3, r7
 801d854:	3301      	adds	r3, #1
 801d856:	9300      	str	r3, [sp, #0]
 801d858:	2301      	movs	r3, #1
 801d85a:	2242      	movs	r2, #66	@ 0x42
 801d85c:	2102      	movs	r1, #2
 801d85e:	f7e8 fff5 	bl	800684c <HAL_I2C_Mem_Write>
		REG_EXTERNAL_RGB_GLOBAL_GREEN, 1, &color.green, 1, 10);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	6818      	ldr	r0, [r3, #0]
 801d866:	230a      	movs	r3, #10
 801d868:	9302      	str	r3, [sp, #8]
 801d86a:	2301      	movs	r3, #1
 801d86c:	9301      	str	r3, [sp, #4]
 801d86e:	463b      	mov	r3, r7
 801d870:	3302      	adds	r3, #2
 801d872:	9300      	str	r3, [sp, #0]
 801d874:	2301      	movs	r3, #1
 801d876:	2243      	movs	r2, #67	@ 0x43
 801d878:	2102      	movs	r1, #2
 801d87a:	f7e8 ffe7 	bl	800684c <HAL_I2C_Mem_Write>
		REG_EXTERNAL_RGB_GLOBAL_BLUE, 1, &color.blue, 1, 10);
}
 801d87e:	bf00      	nop
 801d880:	3708      	adds	r7, #8
 801d882:	46bd      	mov	sp, r7
 801d884:	bd80      	pop	{r7, pc}
	...

0801d888 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>:
		break;
	}
}

void RobotControl_Extender::buzzer_setConfig(float frequency, uint16_t on_time,
		uint8_t repeats) {
 801d888:	b580      	push	{r7, lr}
 801d88a:	b08a      	sub	sp, #40	@ 0x28
 801d88c:	af04      	add	r7, sp, #16
 801d88e:	60f8      	str	r0, [r7, #12]
 801d890:	ed87 0a02 	vstr	s0, [r7, #8]
 801d894:	460b      	mov	r3, r1
 801d896:	80fb      	strh	r3, [r7, #6]
 801d898:	4613      	mov	r3, r2
 801d89a:	717b      	strb	r3, [r7, #5]

	uint8_t freq = (uint8_t)(frequency / 10);
 801d89c:	ed97 7a02 	vldr	s14, [r7, #8]
 801d8a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 801d8a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801d8a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8ac:	edc7 7a00 	vstr	s15, [r7]
 801d8b0:	783b      	ldrb	r3, [r7, #0]
 801d8b2:	b2db      	uxtb	r3, r3
 801d8b4:	75fb      	strb	r3, [r7, #23]
	uint8_t time = (uint8_t)(on_time / 10);
 801d8b6:	88fb      	ldrh	r3, [r7, #6]
 801d8b8:	4a19      	ldr	r2, [pc, #100]	@ (801d920 <_ZN21RobotControl_Extender16buzzer_setConfigEfth+0x98>)
 801d8ba:	fba2 2303 	umull	r2, r3, r2, r3
 801d8be:	08db      	lsrs	r3, r3, #3
 801d8c0:	b29b      	uxth	r3, r3
 801d8c2:	b2db      	uxtb	r3, r3
 801d8c4:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	6818      	ldr	r0, [r3, #0]
 801d8ca:	230a      	movs	r3, #10
 801d8cc:	9302      	str	r3, [sp, #8]
 801d8ce:	2301      	movs	r3, #1
 801d8d0:	9301      	str	r3, [sp, #4]
 801d8d2:	f107 0317 	add.w	r3, r7, #23
 801d8d6:	9300      	str	r3, [sp, #0]
 801d8d8:	2301      	movs	r3, #1
 801d8da:	2235      	movs	r2, #53	@ 0x35
 801d8dc:	2102      	movs	r1, #2
 801d8de:	f7e8 ffb5 	bl	800684c <HAL_I2C_Mem_Write>
	REG_BUZZER_FREQ, 1, &freq, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	6818      	ldr	r0, [r3, #0]
 801d8e6:	230a      	movs	r3, #10
 801d8e8:	9302      	str	r3, [sp, #8]
 801d8ea:	2301      	movs	r3, #1
 801d8ec:	9301      	str	r3, [sp, #4]
 801d8ee:	f107 0316 	add.w	r3, r7, #22
 801d8f2:	9300      	str	r3, [sp, #0]
 801d8f4:	2301      	movs	r3, #1
 801d8f6:	2237      	movs	r2, #55	@ 0x37
 801d8f8:	2102      	movs	r1, #2
 801d8fa:	f7e8 ffa7 	bl	800684c <HAL_I2C_Mem_Write>
	REG_BUZZER_BLINK_TIME, 1, &time, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	6818      	ldr	r0, [r3, #0]
 801d902:	230a      	movs	r3, #10
 801d904:	9302      	str	r3, [sp, #8]
 801d906:	2301      	movs	r3, #1
 801d908:	9301      	str	r3, [sp, #4]
 801d90a:	1d7b      	adds	r3, r7, #5
 801d90c:	9300      	str	r3, [sp, #0]
 801d90e:	2301      	movs	r3, #1
 801d910:	2238      	movs	r2, #56	@ 0x38
 801d912:	2102      	movs	r1, #2
 801d914:	f7e8 ff9a 	bl	800684c <HAL_I2C_Mem_Write>
	REG_BUZZER_BLINK_COUNTER, 1, &repeats, 1, 10);

}
 801d918:	bf00      	nop
 801d91a:	3718      	adds	r7, #24
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd80      	pop	{r7, pc}
 801d920:	cccccccd 	.word	0xcccccccd

0801d924 <_ZN21RobotControl_Extender12buzzer_startEv>:
void RobotControl_Extender::buzzer_start() {
 801d924:	b580      	push	{r7, lr}
 801d926:	b088      	sub	sp, #32
 801d928:	af04      	add	r7, sp, #16
 801d92a:	6078      	str	r0, [r7, #4]
	uint8_t data = 1;
 801d92c:	2301      	movs	r3, #1
 801d92e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	6818      	ldr	r0, [r3, #0]
 801d934:	230a      	movs	r3, #10
 801d936:	9302      	str	r3, [sp, #8]
 801d938:	2301      	movs	r3, #1
 801d93a:	9301      	str	r3, [sp, #4]
 801d93c:	f107 030f 	add.w	r3, r7, #15
 801d940:	9300      	str	r3, [sp, #0]
 801d942:	2301      	movs	r3, #1
 801d944:	2234      	movs	r2, #52	@ 0x34
 801d946:	2102      	movs	r1, #2
 801d948:	f7e8 ff80 	bl	800684c <HAL_I2C_Mem_Write>
	REG_BUZZER_DATA, 1, &data, 1, 10);
}
 801d94c:	bf00      	nop
 801d94e:	3710      	adds	r7, #16
 801d950:	46bd      	mov	sp, r7
 801d952:	bd80      	pop	{r7, pc}

0801d954 <_ZN19RobotControl_RGBLEDC1Eh>:

#include "robot-control_indicators.h"

extern RobotControl_Extender extender;

RobotControl_RGBLED::RobotControl_RGBLED(uint8_t position) {
 801d954:	b480      	push	{r7}
 801d956:	b083      	sub	sp, #12
 801d958:	af00      	add	r7, sp, #0
 801d95a:	6078      	str	r0, [r7, #4]
 801d95c:	460b      	mov	r3, r1
 801d95e:	70fb      	strb	r3, [r7, #3]
	this->position = position;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	78fa      	ldrb	r2, [r7, #3]
 801d964:	701a      	strb	r2, [r3, #0]
}
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	4618      	mov	r0, r3
 801d96a:	370c      	adds	r7, #12
 801d96c:	46bd      	mov	sp, r7
 801d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d972:	4770      	bx	lr

0801d974 <_ZN19RobotControl_RGBLED8setColorEhhh>:

void RobotControl_RGBLED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 801d974:	b580      	push	{r7, lr}
 801d976:	b084      	sub	sp, #16
 801d978:	af02      	add	r7, sp, #8
 801d97a:	6078      	str	r0, [r7, #4]
 801d97c:	4608      	mov	r0, r1
 801d97e:	4611      	mov	r1, r2
 801d980:	461a      	mov	r2, r3
 801d982:	4603      	mov	r3, r0
 801d984:	70fb      	strb	r3, [r7, #3]
 801d986:	460b      	mov	r3, r1
 801d988:	70bb      	strb	r3, [r7, #2]
 801d98a:	4613      	mov	r3, r2
 801d98c:	707b      	strb	r3, [r7, #1]
	extender.rgbLED_intern_setColor(position, red, green, blue);
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	7819      	ldrb	r1, [r3, #0]
 801d992:	78b8      	ldrb	r0, [r7, #2]
 801d994:	78fa      	ldrb	r2, [r7, #3]
 801d996:	787b      	ldrb	r3, [r7, #1]
 801d998:	9300      	str	r3, [sp, #0]
 801d99a:	4603      	mov	r3, r0
 801d99c:	4803      	ldr	r0, [pc, #12]	@ (801d9ac <_ZN19RobotControl_RGBLED8setColorEhhh+0x38>)
 801d99e:	f7ff fea9 	bl	801d6f4 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>

}
 801d9a2:	bf00      	nop
 801d9a4:	3708      	adds	r7, #8
 801d9a6:	46bd      	mov	sp, r7
 801d9a8:	bd80      	pop	{r7, pc}
 801d9aa:	bf00      	nop
 801d9ac:	24022cac 	.word	0x24022cac

0801d9b0 <_ZN19RobotControl_RGBLED5stateEh>:
void RobotControl_RGBLED::blink(uint16_t on_time) {
	extender.rgbLED_intern_blink(position, on_time);
}
void RobotControl_RGBLED::state(uint8_t state) {
 801d9b0:	b580      	push	{r7, lr}
 801d9b2:	b082      	sub	sp, #8
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	6078      	str	r0, [r7, #4]
 801d9b8:	460b      	mov	r3, r1
 801d9ba:	70fb      	strb	r3, [r7, #3]
	extender.rgbLED_intern_setState(position, state);
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	781b      	ldrb	r3, [r3, #0]
 801d9c0:	78fa      	ldrb	r2, [r7, #3]
 801d9c2:	4619      	mov	r1, r3
 801d9c4:	4803      	ldr	r0, [pc, #12]	@ (801d9d4 <_ZN19RobotControl_RGBLED5stateEh+0x24>)
 801d9c6:	f7ff fe50 	bl	801d66a <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>
}
 801d9ca:	bf00      	nop
 801d9cc:	3708      	adds	r7, #8
 801d9ce:	46bd      	mov	sp, r7
 801d9d0:	bd80      	pop	{r7, pc}
 801d9d2:	bf00      	nop
 801d9d4:	24022cac 	.word	0x24022cac

0801d9d8 <_ZN19RobotControl_BuzzerC1Ev>:

RobotControl_Buzzer::RobotControl_Buzzer() {
 801d9d8:	b480      	push	{r7}
 801d9da:	b083      	sub	sp, #12
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]

}
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	370c      	adds	r7, #12
 801d9e6:	46bd      	mov	sp, r7
 801d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9ec:	4770      	bx	lr
	...

0801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>:

void RobotControl_Buzzer::setConfig(float freq, uint16_t on_time,
		uint8_t repeats) {
 801d9f0:	b580      	push	{r7, lr}
 801d9f2:	b084      	sub	sp, #16
 801d9f4:	af00      	add	r7, sp, #0
 801d9f6:	60f8      	str	r0, [r7, #12]
 801d9f8:	ed87 0a02 	vstr	s0, [r7, #8]
 801d9fc:	460b      	mov	r3, r1
 801d9fe:	80fb      	strh	r3, [r7, #6]
 801da00:	4613      	mov	r3, r2
 801da02:	717b      	strb	r3, [r7, #5]
	extender.buzzer_setConfig(freq, on_time, repeats);
 801da04:	797a      	ldrb	r2, [r7, #5]
 801da06:	88fb      	ldrh	r3, [r7, #6]
 801da08:	4619      	mov	r1, r3
 801da0a:	ed97 0a02 	vldr	s0, [r7, #8]
 801da0e:	4803      	ldr	r0, [pc, #12]	@ (801da1c <_ZN19RobotControl_Buzzer9setConfigEfth+0x2c>)
 801da10:	f7ff ff3a 	bl	801d888 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>
}
 801da14:	bf00      	nop
 801da16:	3710      	adds	r7, #16
 801da18:	46bd      	mov	sp, r7
 801da1a:	bd80      	pop	{r7, pc}
 801da1c:	24022cac 	.word	0x24022cac

0801da20 <_ZN19RobotControl_Buzzer5startEv>:
void RobotControl_Buzzer::start() {
 801da20:	b580      	push	{r7, lr}
 801da22:	b082      	sub	sp, #8
 801da24:	af00      	add	r7, sp, #0
 801da26:	6078      	str	r0, [r7, #4]
	extender.buzzer_start();
 801da28:	4803      	ldr	r0, [pc, #12]	@ (801da38 <_ZN19RobotControl_Buzzer5startEv+0x18>)
 801da2a:	f7ff ff7b 	bl	801d924 <_ZN21RobotControl_Extender12buzzer_startEv>
}
 801da2e:	bf00      	nop
 801da30:	3708      	adds	r7, #8
 801da32:	46bd      	mov	sp, r7
 801da34:	bd80      	pop	{r7, pc}
 801da36:	bf00      	nop
 801da38:	24022cac 	.word	0x24022cac

0801da3c <_ZN19RobotControl_Buzzer4beepEfth>:

void RobotControl_Buzzer::beep(float freq, uint16_t on_time, uint8_t repeats){
 801da3c:	b580      	push	{r7, lr}
 801da3e:	b084      	sub	sp, #16
 801da40:	af00      	add	r7, sp, #0
 801da42:	60f8      	str	r0, [r7, #12]
 801da44:	ed87 0a02 	vstr	s0, [r7, #8]
 801da48:	460b      	mov	r3, r1
 801da4a:	80fb      	strh	r3, [r7, #6]
 801da4c:	4613      	mov	r3, r2
 801da4e:	717b      	strb	r3, [r7, #5]
	this->setConfig(freq, on_time, repeats);
 801da50:	797a      	ldrb	r2, [r7, #5]
 801da52:	88fb      	ldrh	r3, [r7, #6]
 801da54:	4619      	mov	r1, r3
 801da56:	ed97 0a02 	vldr	s0, [r7, #8]
 801da5a:	68f8      	ldr	r0, [r7, #12]
 801da5c:	f7ff ffc8 	bl	801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>
	this->start();
 801da60:	68f8      	ldr	r0, [r7, #12]
 801da62:	f7ff ffdd 	bl	801da20 <_ZN19RobotControl_Buzzer5startEv>
}
 801da66:	bf00      	nop
 801da68:	3710      	adds	r7, #16
 801da6a:	46bd      	mov	sp, r7
 801da6c:	bd80      	pop	{r7, pc}
	...

0801da70 <_ZN19RobotControl_Buzzer4beepE20buzzer_beep_struct_t>:
void RobotControl_Buzzer::beep(buzzer_beep_struct_t data){
 801da70:	b580      	push	{r7, lr}
 801da72:	b084      	sub	sp, #16
 801da74:	af00      	add	r7, sp, #0
 801da76:	60f8      	str	r0, [r7, #12]
 801da78:	1d3b      	adds	r3, r7, #4
 801da7a:	e883 0006 	stmia.w	r3, {r1, r2}
	this->setConfig(data.freq, data.on_time, data.repeats);
 801da7e:	edd7 7a01 	vldr	s15, [r7, #4]
 801da82:	893b      	ldrh	r3, [r7, #8]
 801da84:	7aba      	ldrb	r2, [r7, #10]
 801da86:	4619      	mov	r1, r3
 801da88:	eeb0 0a67 	vmov.f32	s0, s15
 801da8c:	68f8      	ldr	r0, [r7, #12]
 801da8e:	f7ff ffaf 	bl	801d9f0 <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_status_led_2.toggle();
 801da92:	4805      	ldr	r0, [pc, #20]	@ (801daa8 <_ZN19RobotControl_Buzzer4beepE20buzzer_beep_struct_t+0x38>)
 801da94:	f002 fecf 	bl	8020836 <_ZN17core_hardware_LED6toggleEv>
	this->start();
 801da98:	68f8      	ldr	r0, [r7, #12]
 801da9a:	f7ff ffc1 	bl	801da20 <_ZN19RobotControl_Buzzer5startEv>
}
 801da9e:	bf00      	nop
 801daa0:	3710      	adds	r7, #16
 801daa2:	46bd      	mov	sp, r7
 801daa4:	bd80      	pop	{r7, pc}
 801daa6:	bf00      	nop
 801daa8:	24022c98 	.word	0x24022c98

0801daac <_ZN22RobotControl_StatusLEDC1Ev>:

RobotControl_StatusLED::RobotControl_StatusLED() {
 801daac:	b480      	push	{r7}
 801daae:	b083      	sub	sp, #12
 801dab0:	af00      	add	r7, sp, #0
 801dab2:	6078      	str	r0, [r7, #4]

}
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	4618      	mov	r0, r3
 801dab8:	370c      	adds	r7, #12
 801daba:	46bd      	mov	sp, r7
 801dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac0:	4770      	bx	lr
	...

0801dac4 <_ZN22RobotControl_StatusLED8setStateEa>:
void RobotControl_StatusLED::setState(int8_t state) {
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b082      	sub	sp, #8
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
 801dacc:	460b      	mov	r3, r1
 801dace:	70fb      	strb	r3, [r7, #3]
	extender.setStatusLED(state);
 801dad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dad4:	4619      	mov	r1, r3
 801dad6:	4803      	ldr	r0, [pc, #12]	@ (801dae4 <_ZN22RobotControl_StatusLED8setStateEa+0x20>)
 801dad8:	f7ff fdad 	bl	801d636 <_ZN21RobotControl_Extender12setStatusLEDEa>
}
 801dadc:	bf00      	nop
 801dade:	3708      	adds	r7, #8
 801dae0:	46bd      	mov	sp, r7
 801dae2:	bd80      	pop	{r7, pc}
 801dae4:	24022cac 	.word	0x24022cac

0801dae8 <_Z18robot_control_initv>:
void robot_control_task(void *argument);



// ------------------------------------------------------------------------------------------------------------
void robot_control_init(){
 801dae8:	b580      	push	{r7, lr}
 801daea:	b082      	sub	sp, #8
 801daec:	af00      	add	r7, sp, #0
	extender_config_struct_t extender_config = {
 801daee:	4b05      	ldr	r3, [pc, #20]	@ (801db04 <_Z18robot_control_initv+0x1c>)
 801daf0:	607b      	str	r3, [r7, #4]
			.hi2c = BOARD_I2C_INTERN,
	};
	extender.init(extender_config);
 801daf2:	6879      	ldr	r1, [r7, #4]
 801daf4:	4804      	ldr	r0, [pc, #16]	@ (801db08 <_Z18robot_control_initv+0x20>)
 801daf6:	f7ff fd90 	bl	801d61a <_ZN21RobotControl_Extender4initE24extender_config_struct_t>
//	debug_uart.init();
//	debug_uart.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX, uart_rx_fun, NULL);

}
 801dafa:	bf00      	nop
 801dafc:	3708      	adds	r7, #8
 801dafe:	46bd      	mov	sp, r7
 801db00:	bd80      	pop	{r7, pc}
 801db02:	bf00      	nop
 801db04:	240002c4 	.word	0x240002c4
 801db08:	24022cac 	.word	0x24022cac

0801db0c <_Z19robot_control_startv>:
// ------------------------------------------------------------------------------------------------------------
void robot_control_start(){
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b082      	sub	sp, #8
 801db10:	af00      	add	r7, sp, #0
	rc_error_led.setState(0);
 801db12:	2100      	movs	r1, #0
 801db14:	4808      	ldr	r0, [pc, #32]	@ (801db38 <_Z19robot_control_startv+0x2c>)
 801db16:	f7ff ffd5 	bl	801dac4 <_ZN22RobotControl_StatusLED8setStateEa>

    rgb_color_struct_t color = {
 801db1a:	2300      	movs	r3, #0
 801db1c:	713b      	strb	r3, [r7, #4]
 801db1e:	2300      	movs	r3, #0
 801db20:	717b      	strb	r3, [r7, #5]
 801db22:	2300      	movs	r3, #0
 801db24:	71bb      	strb	r3, [r7, #6]
    		.red = 0,
			.green = 0,
			.blue = 0,
    };
    extender.rgbLEDStrip_extern_setColor(color);
 801db26:	6879      	ldr	r1, [r7, #4]
 801db28:	4804      	ldr	r0, [pc, #16]	@ (801db3c <_Z19robot_control_startv+0x30>)
 801db2a:	f7ff fe7a 	bl	801d822 <_ZN21RobotControl_Extender27rgbLEDStrip_extern_setColorE18rgb_color_struct_t>

//	debug_uart.start();
//	osThreadNew(robot_control_task, NULL, &rc_task_attributes);
}
 801db2e:	bf00      	nop
 801db30:	3708      	adds	r7, #8
 801db32:	46bd      	mov	sp, r7
 801db34:	bd80      	pop	{r7, pc}
 801db36:	bf00      	nop
 801db38:	24022ca8 	.word	0x24022ca8
 801db3c:	24022cac 	.word	0x24022cac

0801db40 <_Z41__static_initialization_and_destruction_0ii>:
	while (true){
			kernel_ticks = osKernelGetTickCount();
//			rc_activity_led.toggle();
			osDelayUntil(kernel_ticks + (uint32_t) 250);
	}
}
 801db40:	b580      	push	{r7, lr}
 801db42:	b082      	sub	sp, #8
 801db44:	af00      	add	r7, sp, #0
 801db46:	6078      	str	r0, [r7, #4]
 801db48:	6039      	str	r1, [r7, #0]
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	2b01      	cmp	r3, #1
 801db4e:	d127      	bne.n	801dba0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 801db50:	683b      	ldr	r3, [r7, #0]
 801db52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801db56:	4293      	cmp	r3, r2
 801db58:	d122      	bne.n	801dba0 <_Z41__static_initialization_and_destruction_0ii+0x60>
core_hardware_LED rc_status_led_2(BOARD_LED_2_PORT, BOARD_LED_2_PIN);
 801db5a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801db5e:	4912      	ldr	r1, [pc, #72]	@ (801dba8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801db60:	4812      	ldr	r0, [pc, #72]	@ (801dbac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801db62:	f002 fe34 	bl	80207ce <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_activity_led(BOARD_LED_ACT_PORT, BOARD_LED_ACT_PIN);
 801db66:	2208      	movs	r2, #8
 801db68:	490f      	ldr	r1, [pc, #60]	@ (801dba8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801db6a:	4811      	ldr	r0, [pc, #68]	@ (801dbb0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801db6c:	f002 fe2f 	bl	80207ce <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
RobotControl_StatusLED rc_error_led;
 801db70:	4810      	ldr	r0, [pc, #64]	@ (801dbb4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801db72:	f7ff ff9b 	bl	801daac <_ZN22RobotControl_StatusLEDC1Ev>
RobotControl_Extender extender;
 801db76:	4810      	ldr	r0, [pc, #64]	@ (801dbb8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801db78:	f7ff fd44 	bl	801d604 <_ZN21RobotControl_ExtenderC1Ev>
RobotControl_RGBLED rc_rgb_led_status(0);
 801db7c:	2100      	movs	r1, #0
 801db7e:	480f      	ldr	r0, [pc, #60]	@ (801dbbc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801db80:	f7ff fee8 	bl	801d954 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_1(1);
 801db84:	2101      	movs	r1, #1
 801db86:	480e      	ldr	r0, [pc, #56]	@ (801dbc0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801db88:	f7ff fee4 	bl	801d954 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_2(2);
 801db8c:	2102      	movs	r1, #2
 801db8e:	480d      	ldr	r0, [pc, #52]	@ (801dbc4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801db90:	f7ff fee0 	bl	801d954 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_Buzzer rc_buzzer;
 801db94:	480c      	ldr	r0, [pc, #48]	@ (801dbc8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801db96:	f7ff ff1f 	bl	801d9d8 <_ZN19RobotControl_BuzzerC1Ev>
Madgwick sensor_fusion;
 801db9a:	480c      	ldr	r0, [pc, #48]	@ (801dbcc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801db9c:	f002 fa64 	bl	8020068 <_ZN8MadgwickC1Ev>
}
 801dba0:	bf00      	nop
 801dba2:	3708      	adds	r7, #8
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}
 801dba8:	58021000 	.word	0x58021000
 801dbac:	24022c98 	.word	0x24022c98
 801dbb0:	24022ca0 	.word	0x24022ca0
 801dbb4:	24022ca8 	.word	0x24022ca8
 801dbb8:	24022cac 	.word	0x24022cac
 801dbbc:	24022cb0 	.word	0x24022cb0
 801dbc0:	24022cb4 	.word	0x24022cb4
 801dbc4:	24022cb8 	.word	0x24022cb8
 801dbc8:	24022cbc 	.word	0x24022cbc
 801dbcc:	24022cc0 	.word	0x24022cc0

0801dbd0 <_GLOBAL__sub_I_rc_status_led_2>:
 801dbd0:	b580      	push	{r7, lr}
 801dbd2:	af00      	add	r7, sp, #0
 801dbd4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801dbd8:	2001      	movs	r0, #1
 801dbda:	f7ff ffb1 	bl	801db40 <_Z41__static_initialization_and_destruction_0ii>
 801dbde:	bd80      	pop	{r7, pc}

0801dbe0 <_ZN13CallbackEntryC1Ev>:
	uint8_t length;
} can_frame_callback_input_t;

typedef core_utils_Callback<void, can_frame_callback_input_t> can_frame_callback;

struct CallbackEntry {
 801dbe0:	b580      	push	{r7, lr}
 801dbe2:	b082      	sub	sp, #8
 801dbe4:	af00      	add	r7, sp, #0
 801dbe6:	6078      	str	r0, [r7, #4]
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	4618      	mov	r0, r3
 801dbec:	f000 fd2e 	bl	801e64c <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1Ev>
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	3708      	adds	r7, #8
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	bd80      	pop	{r7, pc}

0801dbfa <_ZN3CANC1Ev>:

CAN *can;

uint32_t mapDLC(uint8_t dataLength);

CAN::CAN() {
 801dbfa:	b5b0      	push	{r4, r5, r7, lr}
 801dbfc:	b082      	sub	sp, #8
 801dbfe:	af00      	add	r7, sp, #0
 801dc00:	6078      	str	r0, [r7, #4]
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 801dc08:	2407      	movs	r4, #7
 801dc0a:	461d      	mov	r5, r3
 801dc0c:	e004      	b.n	801dc18 <_ZN3CANC1Ev+0x1e>
 801dc0e:	4628      	mov	r0, r5
 801dc10:	f7ff ffe6 	bl	801dbe0 <_ZN13CallbackEntryC1Ev>
 801dc14:	3c01      	subs	r4, #1
 801dc16:	3528      	adds	r5, #40	@ 0x28
 801dc18:	2c00      	cmp	r4, #0
 801dc1a:	daf8      	bge.n	801dc0e <_ZN3CANC1Ev+0x14>
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 801dc22:	2407      	movs	r4, #7
 801dc24:	461d      	mov	r5, r3
 801dc26:	e004      	b.n	801dc32 <_ZN3CANC1Ev+0x38>
 801dc28:	4628      	mov	r0, r5
 801dc2a:	f7ff ffd9 	bl	801dbe0 <_ZN13CallbackEntryC1Ev>
 801dc2e:	3c01      	subs	r4, #1
 801dc30:	3528      	adds	r5, #40	@ 0x28
 801dc32:	2c00      	cmp	r4, #0
 801dc34:	daf8      	bge.n	801dc28 <_ZN3CANC1Ev+0x2e>
    this->mapMutex = xSemaphoreCreateMutex(); // Use a mutex for task-level synchronization
 801dc36:	2001      	movs	r0, #1
 801dc38:	f7f1 fb73 	bl	800f322 <xQueueCreateMutex>
 801dc3c:	4602      	mov	r2, r0
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
}
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	4618      	mov	r0, r3
 801dc48:	3708      	adds	r7, #8
 801dc4a:	46bd      	mov	sp, r7
 801dc4c:	bdb0      	pop	{r4, r5, r7, pc}

0801dc4e <_ZN3CAND1Ev>:

CAN::~CAN() {
 801dc4e:	b580      	push	{r7, lr}
 801dc50:	b084      	sub	sp, #16
 801dc52:	af00      	add	r7, sp, #0
 801dc54:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(this->mapMutex, portMAX_DELAY);
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801dc5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801dc60:	4618      	mov	r0, r3
 801dc62:	f7f1 fef7 	bl	800fa54 <xQueueSemaphoreTake>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801dc66:	2300      	movs	r3, #0
 801dc68:	60fb      	str	r3, [r7, #12]
 801dc6a:	e017      	b.n	801dc9c <_ZN3CAND1Ev+0x4e>
        if (readRequests[i].isOpen) {
 801dc6c:	6879      	ldr	r1, [r7, #4]
 801dc6e:	68fa      	ldr	r2, [r7, #12]
 801dc70:	4613      	mov	r3, r2
 801dc72:	005b      	lsls	r3, r3, #1
 801dc74:	4413      	add	r3, r2
 801dc76:	00db      	lsls	r3, r3, #3
 801dc78:	440b      	add	r3, r1
 801dc7a:	3318      	adds	r3, #24
 801dc7c:	781b      	ldrb	r3, [r3, #0]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d009      	beq.n	801dc96 <_ZN3CAND1Ev+0x48>
            // No need to delete task notifications
            readRequests[i].isOpen = false;
 801dc82:	6879      	ldr	r1, [r7, #4]
 801dc84:	68fa      	ldr	r2, [r7, #12]
 801dc86:	4613      	mov	r3, r2
 801dc88:	005b      	lsls	r3, r3, #1
 801dc8a:	4413      	add	r3, r2
 801dc8c:	00db      	lsls	r3, r3, #3
 801dc8e:	440b      	add	r3, r1
 801dc90:	3318      	adds	r3, #24
 801dc92:	2200      	movs	r2, #0
 801dc94:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	3301      	adds	r3, #1
 801dc9a:	60fb      	str	r3, [r7, #12]
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	2b0f      	cmp	r3, #15
 801dca0:	dde4      	ble.n	801dc6c <_ZN3CAND1Ev+0x1e>
        }
    }
    xSemaphoreGive(this->mapMutex);
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801dca8:	2300      	movs	r3, #0
 801dcaa:	2200      	movs	r2, #0
 801dcac:	2100      	movs	r1, #0
 801dcae:	f7f1 fbbf 	bl	800f430 <xQueueGenericSend>
    vSemaphoreDelete(this->mapMutex);
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801dcb8:	4618      	mov	r0, r3
 801dcba:	f7f2 f85d 	bl	800fd78 <vQueueDelete>
}
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	3710      	adds	r7, #16
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd80      	pop	{r7, pc}

0801dcc8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEaSEOS1_>:
class core_utils_Callback<void, input_type> : public Callback {
 801dcc8:	b5b0      	push	{r4, r5, r7, lr}
 801dcca:	b082      	sub	sp, #8
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	6039      	str	r1, [r7, #0]
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	683a      	ldr	r2, [r7, #0]
 801dcd6:	4611      	mov	r1, r2
 801dcd8:	4618      	mov	r0, r3
 801dcda:	f7fa f879 	bl	8017dd0 <_ZN8CallbackaSEOS_>
 801dcde:	683b      	ldr	r3, [r7, #0]
 801dce0:	791a      	ldrb	r2, [r3, #4]
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	711a      	strb	r2, [r3, #4]
 801dce6:	687a      	ldr	r2, [r7, #4]
 801dce8:	683b      	ldr	r3, [r7, #0]
 801dcea:	f102 0408 	add.w	r4, r2, #8
 801dcee:	f103 0508 	add.w	r5, r3, #8
 801dcf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dcf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dcf6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801dcfa:	e884 0003 	stmia.w	r4, {r0, r1}
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	4618      	mov	r0, r3
 801dd02:	3708      	adds	r7, #8
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bdb0      	pop	{r4, r5, r7, pc}

0801dd08 <_ZN3CAN4initE12can_config_t>:

HAL_StatusTypeDef CAN::init(can_config_t config) {
 801dd08:	b590      	push	{r4, r7, lr}
 801dd0a:	b097      	sub	sp, #92	@ 0x5c
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	6078      	str	r0, [r7, #4]
 801dd10:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    can = this;
 801dd12:	4a74      	ldr	r2, [pc, #464]	@ (801dee4 <_ZN3CAN4initE12can_config_t+0x1dc>)
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	6013      	str	r3, [r2, #0]
    this->config = config;
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	683a      	ldr	r2, [r7, #0]
 801dd1c:	601a      	str	r2, [r3, #0]

    // Initialize read requests
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801dd1e:	2300      	movs	r3, #0
 801dd20:	657b      	str	r3, [r7, #84]	@ 0x54
 801dd22:	e020      	b.n	801dd66 <_ZN3CAN4initE12can_config_t+0x5e>
        readRequests[i].id = 0;
 801dd24:	6879      	ldr	r1, [r7, #4]
 801dd26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dd28:	4613      	mov	r3, r2
 801dd2a:	005b      	lsls	r3, r3, #1
 801dd2c:	4413      	add	r3, r2
 801dd2e:	00db      	lsls	r3, r3, #3
 801dd30:	440b      	add	r3, r1
 801dd32:	3304      	adds	r3, #4
 801dd34:	2200      	movs	r2, #0
 801dd36:	601a      	str	r2, [r3, #0]
        readRequests[i].taskHandle = nullptr;
 801dd38:	6879      	ldr	r1, [r7, #4]
 801dd3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dd3c:	4613      	mov	r3, r2
 801dd3e:	005b      	lsls	r3, r3, #1
 801dd40:	4413      	add	r3, r2
 801dd42:	00db      	lsls	r3, r3, #3
 801dd44:	440b      	add	r3, r1
 801dd46:	3314      	adds	r3, #20
 801dd48:	2200      	movs	r2, #0
 801dd4a:	601a      	str	r2, [r3, #0]
        readRequests[i].isOpen = false;
 801dd4c:	6879      	ldr	r1, [r7, #4]
 801dd4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dd50:	4613      	mov	r3, r2
 801dd52:	005b      	lsls	r3, r3, #1
 801dd54:	4413      	add	r3, r2
 801dd56:	00db      	lsls	r3, r3, #3
 801dd58:	440b      	add	r3, r1
 801dd5a:	3318      	adds	r3, #24
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801dd60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd62:	3301      	adds	r3, #1
 801dd64:	657b      	str	r3, [r7, #84]	@ 0x54
 801dd66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd68:	2b0f      	cmp	r3, #15
 801dd6a:	dddb      	ble.n	801dd24 <_ZN3CAN4initE12can_config_t+0x1c>
    }

    for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801dd6c:	2300      	movs	r3, #0
 801dd6e:	653b      	str	r3, [r7, #80]	@ 0x50
 801dd70:	e05c      	b.n	801de2c <_ZN3CAN4initE12can_config_t+0x124>
        standardIDCallbacks[i].FilterID1 = 0x000;
 801dd72:	6879      	ldr	r1, [r7, #4]
 801dd74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801dd76:	4613      	mov	r3, r2
 801dd78:	009b      	lsls	r3, r3, #2
 801dd7a:	4413      	add	r3, r2
 801dd7c:	00db      	lsls	r3, r3, #3
 801dd7e:	440b      	add	r3, r1
 801dd80:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 801dd84:	2200      	movs	r2, #0
 801dd86:	601a      	str	r2, [r3, #0]
        standardIDCallbacks[i].FilterID2 = 0x7FF; // Default: match all 11-bit IDs
 801dd88:	6879      	ldr	r1, [r7, #4]
 801dd8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801dd8c:	4613      	mov	r3, r2
 801dd8e:	009b      	lsls	r3, r3, #2
 801dd90:	4413      	add	r3, r2
 801dd92:	00db      	lsls	r3, r3, #3
 801dd94:	440b      	add	r3, r1
 801dd96:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 801dd9a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801dd9e:	601a      	str	r2, [r3, #0]
        standardIDCallbacks[i].callback.registered = false;
 801dda0:	6879      	ldr	r1, [r7, #4]
 801dda2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801dda4:	4613      	mov	r3, r2
 801dda6:	009b      	lsls	r3, r3, #2
 801dda8:	4413      	add	r3, r2
 801ddaa:	00db      	lsls	r3, r3, #3
 801ddac:	440b      	add	r3, r1
 801ddae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 801ddb2:	2200      	movs	r2, #0
 801ddb4:	701a      	strb	r2, [r3, #0]

        extendedIDCallbacks[i].callback = nullptr;
 801ddb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ddb8:	4613      	mov	r3, r2
 801ddba:	009b      	lsls	r3, r3, #2
 801ddbc:	4413      	add	r3, r2
 801ddbe:	00db      	lsls	r3, r3, #3
 801ddc0:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 801ddc4:	687a      	ldr	r2, [r7, #4]
 801ddc6:	4413      	add	r3, r2
 801ddc8:	1d1c      	adds	r4, r3, #4
 801ddca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ddce:	2100      	movs	r1, #0
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	f000 fc59 	bl	801e688 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1EPFvS0_E>
 801ddd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ddda:	4619      	mov	r1, r3
 801dddc:	4620      	mov	r0, r4
 801ddde:	f7ff ff73 	bl	801dcc8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEaSEOS1_>
        extendedIDCallbacks[i].FilterID1 = 0x00000000;
 801dde2:	6879      	ldr	r1, [r7, #4]
 801dde4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801dde6:	4613      	mov	r3, r2
 801dde8:	009b      	lsls	r3, r3, #2
 801ddea:	4413      	add	r3, r2
 801ddec:	00db      	lsls	r3, r3, #3
 801ddee:	440b      	add	r3, r1
 801ddf0:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 801ddf4:	2200      	movs	r2, #0
 801ddf6:	601a      	str	r2, [r3, #0]
        extendedIDCallbacks[i].FilterID2 = 0x1FFFFFFF; // Default: match all 29-bit IDs
 801ddf8:	6879      	ldr	r1, [r7, #4]
 801ddfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ddfc:	4613      	mov	r3, r2
 801ddfe:	009b      	lsls	r3, r3, #2
 801de00:	4413      	add	r3, r2
 801de02:	00db      	lsls	r3, r3, #3
 801de04:	440b      	add	r3, r1
 801de06:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 801de0a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 801de0e:	601a      	str	r2, [r3, #0]
        extendedIDCallbacks[i].callback.registered = false;
 801de10:	6879      	ldr	r1, [r7, #4]
 801de12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801de14:	4613      	mov	r3, r2
 801de16:	009b      	lsls	r3, r3, #2
 801de18:	4413      	add	r3, r2
 801de1a:	00db      	lsls	r3, r3, #3
 801de1c:	440b      	add	r3, r1
 801de1e:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 801de22:	2200      	movs	r2, #0
 801de24:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801de26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801de28:	3301      	adds	r3, #1
 801de2a:	653b      	str	r3, [r7, #80]	@ 0x50
 801de2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801de2e:	2b07      	cmp	r3, #7
 801de30:	dd9f      	ble.n	801dd72 <_ZN3CAN4initE12can_config_t+0x6a>

    // Configure filters (same as original)
    FDCAN_FilterTypeDef filterConfig;

    // Filter for 11-bit frames -> FIFO 1
    filterConfig.IdType = FDCAN_STANDARD_ID;
 801de32:	2300      	movs	r3, #0
 801de34:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterIndex = 0; // First filter
 801de36:	2300      	movs	r3, #0
 801de38:	613b      	str	r3, [r7, #16]
    filterConfig.FilterType = FDCAN_FILTER_RANGE;
 801de3a:	2300      	movs	r3, #0
 801de3c:	617b      	str	r3, [r7, #20]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1; // Route to FIFO 1
 801de3e:	2302      	movs	r3, #2
 801de40:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterID1 = 0x000; // Match all 11-bit IDs (0x000 to 0x7FF)
 801de42:	2300      	movs	r3, #0
 801de44:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterID2 = 0x7FF;
 801de46:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801de4a:	623b      	str	r3, [r7, #32]
    status = HAL_FDCAN_ConfigFilter(this->config.hfdcan, &filterConfig);
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	f107 020c 	add.w	r2, r7, #12
 801de54:	4611      	mov	r1, r2
 801de56:	4618      	mov	r0, r3
 801de58:	f7e7 fa74 	bl	8005344 <HAL_FDCAN_ConfigFilter>
 801de5c:	4603      	mov	r3, r0
 801de5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (status != HAL_OK) {
 801de62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801de66:	2b00      	cmp	r3, #0
 801de68:	d002      	beq.n	801de70 <_ZN3CAN4initE12can_config_t+0x168>
        return status;
 801de6a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801de6e:	e035      	b.n	801dedc <_ZN3CAN4initE12can_config_t+0x1d4>
    }

    // Filter for 29-bit frames -> FIFO 0
    filterConfig.IdType = FDCAN_EXTENDED_ID;
 801de70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801de74:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterIndex = 1; // Second filter
 801de76:	2301      	movs	r3, #1
 801de78:	613b      	str	r3, [r7, #16]
    filterConfig.FilterType = FDCAN_FILTER_RANGE;
 801de7a:	2300      	movs	r3, #0
 801de7c:	617b      	str	r3, [r7, #20]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; // Route to FIFO 0
 801de7e:	2301      	movs	r3, #1
 801de80:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterID1 = 0x00000000; // Match all 29-bit IDs (0x00000000 to 0x1FFFFFFF)
 801de82:	2300      	movs	r3, #0
 801de84:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterID2 = 0x1FFFFFFF;
 801de86:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 801de8a:	623b      	str	r3, [r7, #32]
    status = HAL_FDCAN_ConfigFilter(this->config.hfdcan, &filterConfig);
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	f107 020c 	add.w	r2, r7, #12
 801de94:	4611      	mov	r1, r2
 801de96:	4618      	mov	r0, r3
 801de98:	f7e7 fa54 	bl	8005344 <HAL_FDCAN_ConfigFilter>
 801de9c:	4603      	mov	r3, r0
 801de9e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (status != HAL_OK) {
 801dea2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d002      	beq.n	801deb0 <_ZN3CAN4initE12can_config_t+0x1a8>
        return status;
 801deaa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801deae:	e015      	b.n	801dedc <_ZN3CAN4initE12can_config_t+0x1d4>
    }

    // Enable Notifications
    status = HAL_FDCAN_ActivateNotification(this->config.hfdcan,
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	2200      	movs	r2, #0
 801deb6:	2101      	movs	r1, #1
 801deb8:	4618      	mov	r0, r3
 801deba:	f7e7 fcab 	bl	8005814 <HAL_FDCAN_ActivateNotification>
 801debe:	4603      	mov	r3, r0
 801dec0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

    status = HAL_FDCAN_ActivateNotification(this->config.hfdcan,
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	2200      	movs	r2, #0
 801deca:	2110      	movs	r1, #16
 801decc:	4618      	mov	r0, r3
 801dece:	f7e7 fca1 	bl	8005814 <HAL_FDCAN_ActivateNotification>
 801ded2:	4603      	mov	r3, r0
 801ded4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);

    return status;
 801ded8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801dedc:	4618      	mov	r0, r3
 801dede:	375c      	adds	r7, #92	@ 0x5c
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd90      	pop	{r4, r7, pc}
 801dee4:	24022ce8 	.word	0x24022ce8

0801dee8 <_ZN3CAN5startEv>:

HAL_StatusTypeDef CAN::start() {
 801dee8:	b580      	push	{r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
    return HAL_FDCAN_Start(this->config.hfdcan);
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	4618      	mov	r0, r3
 801def6:	f7e7 fa9b 	bl	8005430 <HAL_FDCAN_Start>
 801defa:	4603      	mov	r3, r0
}
 801defc:	4618      	mov	r0, r3
 801defe:	3708      	adds	r7, #8
 801df00:	46bd      	mov	sp, r7
 801df02:	bd80      	pop	{r7, pc}

0801df04 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock>:

bool CAN::addReadRequest(uint32_t id, TaskHandle_t taskHandle) {
 801df04:	b580      	push	{r7, lr}
 801df06:	b086      	sub	sp, #24
 801df08:	af00      	add	r7, sp, #0
 801df0a:	60f8      	str	r0, [r7, #12]
 801df0c:	60b9      	str	r1, [r7, #8]
 801df0e:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(this->mapMutex, portMAX_DELAY);
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801df16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801df1a:	4618      	mov	r0, r3
 801df1c:	f7f1 fd9a 	bl	800fa54 <xQueueSemaphoreTake>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801df20:	2300      	movs	r3, #0
 801df22:	617b      	str	r3, [r7, #20]
 801df24:	e038      	b.n	801df98 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0x94>
        if (!readRequests[i].isOpen) {
 801df26:	68f9      	ldr	r1, [r7, #12]
 801df28:	697a      	ldr	r2, [r7, #20]
 801df2a:	4613      	mov	r3, r2
 801df2c:	005b      	lsls	r3, r3, #1
 801df2e:	4413      	add	r3, r2
 801df30:	00db      	lsls	r3, r3, #3
 801df32:	440b      	add	r3, r1
 801df34:	3318      	adds	r3, #24
 801df36:	781b      	ldrb	r3, [r3, #0]
 801df38:	f083 0301 	eor.w	r3, r3, #1
 801df3c:	b2db      	uxtb	r3, r3
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d027      	beq.n	801df92 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0x8e>
            readRequests[i].id = id;
 801df42:	68f9      	ldr	r1, [r7, #12]
 801df44:	697a      	ldr	r2, [r7, #20]
 801df46:	4613      	mov	r3, r2
 801df48:	005b      	lsls	r3, r3, #1
 801df4a:	4413      	add	r3, r2
 801df4c:	00db      	lsls	r3, r3, #3
 801df4e:	440b      	add	r3, r1
 801df50:	3304      	adds	r3, #4
 801df52:	68ba      	ldr	r2, [r7, #8]
 801df54:	601a      	str	r2, [r3, #0]
            readRequests[i].taskHandle = taskHandle;
 801df56:	68f9      	ldr	r1, [r7, #12]
 801df58:	697a      	ldr	r2, [r7, #20]
 801df5a:	4613      	mov	r3, r2
 801df5c:	005b      	lsls	r3, r3, #1
 801df5e:	4413      	add	r3, r2
 801df60:	00db      	lsls	r3, r3, #3
 801df62:	440b      	add	r3, r1
 801df64:	3314      	adds	r3, #20
 801df66:	687a      	ldr	r2, [r7, #4]
 801df68:	601a      	str	r2, [r3, #0]
            readRequests[i].isOpen = true;
 801df6a:	68f9      	ldr	r1, [r7, #12]
 801df6c:	697a      	ldr	r2, [r7, #20]
 801df6e:	4613      	mov	r3, r2
 801df70:	005b      	lsls	r3, r3, #1
 801df72:	4413      	add	r3, r2
 801df74:	00db      	lsls	r3, r3, #3
 801df76:	440b      	add	r3, r1
 801df78:	3318      	adds	r3, #24
 801df7a:	2201      	movs	r2, #1
 801df7c:	701a      	strb	r2, [r3, #0]
            xSemaphoreGive(this->mapMutex);
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801df84:	2300      	movs	r3, #0
 801df86:	2200      	movs	r2, #0
 801df88:	2100      	movs	r1, #0
 801df8a:	f7f1 fa51 	bl	800f430 <xQueueGenericSend>
            return true;
 801df8e:	2301      	movs	r3, #1
 801df90:	e00e      	b.n	801dfb0 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0xac>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801df92:	697b      	ldr	r3, [r7, #20]
 801df94:	3301      	adds	r3, #1
 801df96:	617b      	str	r3, [r7, #20]
 801df98:	697b      	ldr	r3, [r7, #20]
 801df9a:	2b0f      	cmp	r3, #15
 801df9c:	ddc3      	ble.n	801df26 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock+0x22>
        }
    }
    xSemaphoreGive(this->mapMutex);
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	2200      	movs	r2, #0
 801dfa8:	2100      	movs	r1, #0
 801dfaa:	f7f1 fa41 	bl	800f430 <xQueueGenericSend>
    return false;
 801dfae:	2300      	movs	r3, #0
}
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	3718      	adds	r7, #24
 801dfb4:	46bd      	mov	sp, r7
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <_ZN3CAN17removeReadRequestEm>:

void CAN::removeReadRequest(uint32_t id) {
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b084      	sub	sp, #16
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
 801dfc0:	6039      	str	r1, [r7, #0]
    xSemaphoreTake(this->mapMutex, portMAX_DELAY);
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801dfc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801dfcc:	4618      	mov	r0, r3
 801dfce:	f7f1 fd41 	bl	800fa54 <xQueueSemaphoreTake>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	60fb      	str	r3, [r7, #12]
 801dfd6:	e02e      	b.n	801e036 <_ZN3CAN17removeReadRequestEm+0x7e>
        if (readRequests[i].isOpen && readRequests[i].id == id) {
 801dfd8:	6879      	ldr	r1, [r7, #4]
 801dfda:	68fa      	ldr	r2, [r7, #12]
 801dfdc:	4613      	mov	r3, r2
 801dfde:	005b      	lsls	r3, r3, #1
 801dfe0:	4413      	add	r3, r2
 801dfe2:	00db      	lsls	r3, r3, #3
 801dfe4:	440b      	add	r3, r1
 801dfe6:	3318      	adds	r3, #24
 801dfe8:	781b      	ldrb	r3, [r3, #0]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d020      	beq.n	801e030 <_ZN3CAN17removeReadRequestEm+0x78>
 801dfee:	6879      	ldr	r1, [r7, #4]
 801dff0:	68fa      	ldr	r2, [r7, #12]
 801dff2:	4613      	mov	r3, r2
 801dff4:	005b      	lsls	r3, r3, #1
 801dff6:	4413      	add	r3, r2
 801dff8:	00db      	lsls	r3, r3, #3
 801dffa:	440b      	add	r3, r1
 801dffc:	3304      	adds	r3, #4
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	683a      	ldr	r2, [r7, #0]
 801e002:	429a      	cmp	r2, r3
 801e004:	d114      	bne.n	801e030 <_ZN3CAN17removeReadRequestEm+0x78>
            readRequests[i].isOpen = false;
 801e006:	6879      	ldr	r1, [r7, #4]
 801e008:	68fa      	ldr	r2, [r7, #12]
 801e00a:	4613      	mov	r3, r2
 801e00c:	005b      	lsls	r3, r3, #1
 801e00e:	4413      	add	r3, r2
 801e010:	00db      	lsls	r3, r3, #3
 801e012:	440b      	add	r3, r1
 801e014:	3318      	adds	r3, #24
 801e016:	2200      	movs	r2, #0
 801e018:	701a      	strb	r2, [r3, #0]
            readRequests[i].taskHandle = nullptr;
 801e01a:	6879      	ldr	r1, [r7, #4]
 801e01c:	68fa      	ldr	r2, [r7, #12]
 801e01e:	4613      	mov	r3, r2
 801e020:	005b      	lsls	r3, r3, #1
 801e022:	4413      	add	r3, r2
 801e024:	00db      	lsls	r3, r3, #3
 801e026:	440b      	add	r3, r1
 801e028:	3314      	adds	r3, #20
 801e02a:	2200      	movs	r2, #0
 801e02c:	601a      	str	r2, [r3, #0]
            break;
 801e02e:	e005      	b.n	801e03c <_ZN3CAN17removeReadRequestEm+0x84>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	3301      	adds	r3, #1
 801e034:	60fb      	str	r3, [r7, #12]
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	2b0f      	cmp	r3, #15
 801e03a:	ddcd      	ble.n	801dfd8 <_ZN3CAN17removeReadRequestEm+0x20>
        }
    }
    xSemaphoreGive(this->mapMutex);
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801e042:	2300      	movs	r3, #0
 801e044:	2200      	movs	r2, #0
 801e046:	2100      	movs	r1, #0
 801e048:	f7f1 f9f2 	bl	800f430 <xQueueGenericSend>
}
 801e04c:	bf00      	nop
 801e04e:	3710      	adds	r7, #16
 801e050:	46bd      	mov	sp, r7
 801e052:	bd80      	pop	{r7, pc}

0801e054 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh>:

void CAN::onMessageReceived(const FDCAN_RxHeaderTypeDef &header, uint8_t *data) {
 801e054:	b580      	push	{r7, lr}
 801e056:	b090      	sub	sp, #64	@ 0x40
 801e058:	af00      	add	r7, sp, #0
 801e05a:	60f8      	str	r0, [r7, #12]
 801e05c:	60b9      	str	r1, [r7, #8]
 801e05e:	607a      	str	r2, [r7, #4]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 801e060:	2300      	movs	r3, #0
 801e062:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Check for matching read request
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801e064:	2300      	movs	r3, #0
 801e066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e068:	e05c      	b.n	801e124 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xd0>
        if (readRequests[i].isOpen && readRequests[i].id == header.Identifier) {
 801e06a:	68f9      	ldr	r1, [r7, #12]
 801e06c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e06e:	4613      	mov	r3, r2
 801e070:	005b      	lsls	r3, r3, #1
 801e072:	4413      	add	r3, r2
 801e074:	00db      	lsls	r3, r3, #3
 801e076:	440b      	add	r3, r1
 801e078:	3318      	adds	r3, #24
 801e07a:	781b      	ldrb	r3, [r3, #0]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d04e      	beq.n	801e11e <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xca>
 801e080:	68f9      	ldr	r1, [r7, #12]
 801e082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e084:	4613      	mov	r3, r2
 801e086:	005b      	lsls	r3, r3, #1
 801e088:	4413      	add	r3, r2
 801e08a:	00db      	lsls	r3, r3, #3
 801e08c:	440b      	add	r3, r1
 801e08e:	3304      	adds	r3, #4
 801e090:	681a      	ldr	r2, [r3, #0]
 801e092:	68bb      	ldr	r3, [r7, #8]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	429a      	cmp	r2, r3
 801e098:	d141      	bne.n	801e11e <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xca>
            uint8_t actualLength = (uint8_t) header.DataLength;
 801e09a:	68bb      	ldr	r3, [r7, #8]
 801e09c:	68db      	ldr	r3, [r3, #12]
 801e09e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            // Store response data
            memcpy(readRequests[i].responseData, data, actualLength);
 801e0a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e0a4:	4613      	mov	r3, r2
 801e0a6:	005b      	lsls	r3, r3, #1
 801e0a8:	4413      	add	r3, r2
 801e0aa:	00db      	lsls	r3, r3, #3
 801e0ac:	68fa      	ldr	r2, [r7, #12]
 801e0ae:	4413      	add	r3, r2
 801e0b0:	3308      	adds	r3, #8
 801e0b2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801e0b6:	6879      	ldr	r1, [r7, #4]
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	f005 ff96 	bl	8023fea <memcpy>
            readRequests[i].responseLength = actualLength;
 801e0be:	68f9      	ldr	r1, [r7, #12]
 801e0c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e0c2:	4613      	mov	r3, r2
 801e0c4:	005b      	lsls	r3, r3, #1
 801e0c6:	4413      	add	r3, r2
 801e0c8:	00db      	lsls	r3, r3, #3
 801e0ca:	440b      	add	r3, r1
 801e0cc:	3310      	adds	r3, #16
 801e0ce:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801e0d2:	701a      	strb	r2, [r3, #0]
            readRequests[i].isOpen = false;
 801e0d4:	68f9      	ldr	r1, [r7, #12]
 801e0d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e0d8:	4613      	mov	r3, r2
 801e0da:	005b      	lsls	r3, r3, #1
 801e0dc:	4413      	add	r3, r2
 801e0de:	00db      	lsls	r3, r3, #3
 801e0e0:	440b      	add	r3, r1
 801e0e2:	3318      	adds	r3, #24
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	701a      	strb	r2, [r3, #0]

            // Notify the task
            vTaskNotifyGiveFromISR(readRequests[i].taskHandle, &higherPriorityTaskWoken);
 801e0e8:	68f9      	ldr	r1, [r7, #12]
 801e0ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e0ec:	4613      	mov	r3, r2
 801e0ee:	005b      	lsls	r3, r3, #1
 801e0f0:	4413      	add	r3, r2
 801e0f2:	00db      	lsls	r3, r3, #3
 801e0f4:	440b      	add	r3, r1
 801e0f6:	3314      	adds	r3, #20
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801e0fe:	4611      	mov	r1, r2
 801e100:	4618      	mov	r0, r3
 801e102:	f7f3 f8e1 	bl	80112c8 <vTaskNotifyGiveFromISR>
            portYIELD_FROM_ISR(higherPriorityTaskWoken);
 801e106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d00f      	beq.n	801e12c <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xd8>
 801e10c:	4b58      	ldr	r3, [pc, #352]	@ (801e270 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x21c>)
 801e10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801e112:	601a      	str	r2, [r3, #0]
 801e114:	f3bf 8f4f 	dsb	sy
 801e118:	f3bf 8f6f 	isb	sy
            break;
 801e11c:	e006      	b.n	801e12c <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xd8>
    for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801e11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e120:	3301      	adds	r3, #1
 801e122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e126:	2b0f      	cmp	r3, #15
 801e128:	dd9f      	ble.n	801e06a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16>
 801e12a:	e000      	b.n	801e12e <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xda>
            break;
 801e12c:	bf00      	nop
        }
    }

    // Process callbacks (same as original)
    if (header.IdType == FDCAN_STANDARD_ID) {
 801e12e:	68bb      	ldr	r3, [r7, #8]
 801e130:	685b      	ldr	r3, [r3, #4]
 801e132:	2b00      	cmp	r3, #0
 801e134:	d149      	bne.n	801e1ca <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x176>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801e136:	2300      	movs	r3, #0
 801e138:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e13a:	e043      	b.n	801e1c4 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x170>
            if (standardIDCallbacks[i].callback.registered &&
 801e13c:	68f9      	ldr	r1, [r7, #12]
 801e13e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e140:	4613      	mov	r3, r2
 801e142:	009b      	lsls	r3, r3, #2
 801e144:	4413      	add	r3, r2
 801e146:	00db      	lsls	r3, r3, #3
 801e148:	440b      	add	r3, r1
 801e14a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 801e14e:	781b      	ldrb	r3, [r3, #0]
 801e150:	2b00      	cmp	r3, #0
 801e152:	d034      	beq.n	801e1be <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16a>
                header.Identifier >= standardIDCallbacks[i].FilterID1 &&
 801e154:	68bb      	ldr	r3, [r7, #8]
 801e156:	6819      	ldr	r1, [r3, #0]
 801e158:	68f8      	ldr	r0, [r7, #12]
 801e15a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e15c:	4613      	mov	r3, r2
 801e15e:	009b      	lsls	r3, r3, #2
 801e160:	4413      	add	r3, r2
 801e162:	00db      	lsls	r3, r3, #3
 801e164:	4403      	add	r3, r0
 801e166:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 801e16a:	681b      	ldr	r3, [r3, #0]
            if (standardIDCallbacks[i].callback.registered &&
 801e16c:	4299      	cmp	r1, r3
 801e16e:	d326      	bcc.n	801e1be <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16a>
                header.Identifier <= standardIDCallbacks[i].FilterID2) {
 801e170:	68bb      	ldr	r3, [r7, #8]
 801e172:	6819      	ldr	r1, [r3, #0]
 801e174:	68f8      	ldr	r0, [r7, #12]
 801e176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e178:	4613      	mov	r3, r2
 801e17a:	009b      	lsls	r3, r3, #2
 801e17c:	4413      	add	r3, r2
 801e17e:	00db      	lsls	r3, r3, #3
 801e180:	4403      	add	r3, r0
 801e182:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 801e186:	681b      	ldr	r3, [r3, #0]
                header.Identifier >= standardIDCallbacks[i].FilterID1 &&
 801e188:	4299      	cmp	r1, r3
 801e18a:	d818      	bhi.n	801e1be <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x16a>

                can_frame_callback_input_t callback_input = {
                    .id = header.Identifier,
 801e18c:	68bb      	ldr	r3, [r7, #8]
 801e18e:	681b      	ldr	r3, [r3, #0]
                    .data = data,
                    .length = (uint8_t) header.DataLength
                };
 801e190:	623b      	str	r3, [r7, #32]
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	627b      	str	r3, [r7, #36]	@ 0x24
                    .length = (uint8_t) header.DataLength
 801e196:	68bb      	ldr	r3, [r7, #8]
 801e198:	68db      	ldr	r3, [r3, #12]
                };
 801e19a:	b2db      	uxtb	r3, r3
 801e19c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                standardIDCallbacks[i].callback.call(callback_input);
 801e1a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e1a2:	4613      	mov	r3, r2
 801e1a4:	009b      	lsls	r3, r3, #2
 801e1a6:	4413      	add	r3, r2
 801e1a8:	00db      	lsls	r3, r3, #3
 801e1aa:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801e1ae:	68fa      	ldr	r2, [r7, #12]
 801e1b0:	4413      	add	r3, r2
 801e1b2:	1d18      	adds	r0, r3, #4
 801e1b4:	f107 0320 	add.w	r3, r7, #32
 801e1b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e1ba:	f000 fa95 	bl	801e6e8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tE4callES0_>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801e1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1c0:	3301      	adds	r3, #1
 801e1c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1c6:	2b07      	cmp	r3, #7
 801e1c8:	ddb8      	ble.n	801e13c <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0xe8>
            }
        }
    }

    if (header.IdType == FDCAN_EXTENDED_ID) {
 801e1ca:	68bb      	ldr	r3, [r7, #8]
 801e1cc:	685b      	ldr	r3, [r3, #4]
 801e1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e1d2:	d148      	bne.n	801e266 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x212>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 801e1d8:	e042      	b.n	801e260 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x20c>
            if (extendedIDCallbacks[i].callback.registered &&
 801e1da:	68f9      	ldr	r1, [r7, #12]
 801e1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1de:	4613      	mov	r3, r2
 801e1e0:	009b      	lsls	r3, r3, #2
 801e1e2:	4413      	add	r3, r2
 801e1e4:	00db      	lsls	r3, r3, #3
 801e1e6:	440b      	add	r3, r1
 801e1e8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 801e1ec:	781b      	ldrb	r3, [r3, #0]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d033      	beq.n	801e25a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x206>
                header.Identifier >= extendedIDCallbacks[i].FilterID1 &&
 801e1f2:	68bb      	ldr	r3, [r7, #8]
 801e1f4:	6819      	ldr	r1, [r3, #0]
 801e1f6:	68f8      	ldr	r0, [r7, #12]
 801e1f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1fa:	4613      	mov	r3, r2
 801e1fc:	009b      	lsls	r3, r3, #2
 801e1fe:	4413      	add	r3, r2
 801e200:	00db      	lsls	r3, r3, #3
 801e202:	4403      	add	r3, r0
 801e204:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 801e208:	681b      	ldr	r3, [r3, #0]
            if (extendedIDCallbacks[i].callback.registered &&
 801e20a:	4299      	cmp	r1, r3
 801e20c:	d325      	bcc.n	801e25a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x206>
                header.Identifier <= extendedIDCallbacks[i].FilterID2) {
 801e20e:	68bb      	ldr	r3, [r7, #8]
 801e210:	6819      	ldr	r1, [r3, #0]
 801e212:	68f8      	ldr	r0, [r7, #12]
 801e214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e216:	4613      	mov	r3, r2
 801e218:	009b      	lsls	r3, r3, #2
 801e21a:	4413      	add	r3, r2
 801e21c:	00db      	lsls	r3, r3, #3
 801e21e:	4403      	add	r3, r0
 801e220:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 801e224:	681b      	ldr	r3, [r3, #0]
                header.Identifier >= extendedIDCallbacks[i].FilterID1 &&
 801e226:	4299      	cmp	r1, r3
 801e228:	d817      	bhi.n	801e25a <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x206>

                can_frame_callback_input_t callback_input = {
                    .id = header.Identifier,
 801e22a:	68bb      	ldr	r3, [r7, #8]
 801e22c:	681b      	ldr	r3, [r3, #0]
                    .data = data,
                    .length = (uint8_t) header.DataLength
                };
 801e22e:	617b      	str	r3, [r7, #20]
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	61bb      	str	r3, [r7, #24]
                    .length = (uint8_t) header.DataLength
 801e234:	68bb      	ldr	r3, [r7, #8]
 801e236:	68db      	ldr	r3, [r3, #12]
                };
 801e238:	b2db      	uxtb	r3, r3
 801e23a:	773b      	strb	r3, [r7, #28]
                extendedIDCallbacks[i].callback.call(callback_input);
 801e23c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e23e:	4613      	mov	r3, r2
 801e240:	009b      	lsls	r3, r3, #2
 801e242:	4413      	add	r3, r2
 801e244:	00db      	lsls	r3, r3, #3
 801e246:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 801e24a:	68fa      	ldr	r2, [r7, #12]
 801e24c:	4413      	add	r3, r2
 801e24e:	1d18      	adds	r0, r3, #4
 801e250:	f107 0314 	add.w	r3, r7, #20
 801e254:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e256:	f000 fa47 	bl	801e6e8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tE4callES0_>
        for (int i = 0; i < CAN_NUMBER_CALLBACKS; i++) {
 801e25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e25c:	3301      	adds	r3, #1
 801e25e:	637b      	str	r3, [r7, #52]	@ 0x34
 801e260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e262:	2b07      	cmp	r3, #7
 801e264:	ddb9      	ble.n	801e1da <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh+0x186>
            }
        }
    }
}
 801e266:	bf00      	nop
 801e268:	3740      	adds	r7, #64	@ 0x40
 801e26a:	46bd      	mov	sp, r7
 801e26c:	bd80      	pop	{r7, pc}
 801e26e:	bf00      	nop
 801e270:	e000ed04 	.word	0xe000ed04

0801e274 <_ZN3CAN11sendMessageEmPhhb>:

HAL_StatusTypeDef CAN::sendMessage(uint32_t id, uint8_t *data, uint8_t length, bool isExtendedID) {
 801e274:	b580      	push	{r7, lr}
 801e276:	b090      	sub	sp, #64	@ 0x40
 801e278:	af00      	add	r7, sp, #0
 801e27a:	60f8      	str	r0, [r7, #12]
 801e27c:	60b9      	str	r1, [r7, #8]
 801e27e:	607a      	str	r2, [r7, #4]
 801e280:	70fb      	strb	r3, [r7, #3]
    // Map the length
    uint32_t can_dlc = mapDLC(length);
 801e282:	78fb      	ldrb	r3, [r7, #3]
 801e284:	4618      	mov	r0, r3
 801e286:	f000 f92b 	bl	801e4e0 <_Z6mapDLCh>
 801e28a:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (can_dlc == 0xFFFFFFFF) {
 801e28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e28e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e292:	d101      	bne.n	801e298 <_ZN3CAN11sendMessageEmPhhb+0x24>
        return HAL_ERROR;
 801e294:	2301      	movs	r3, #1
 801e296:	e026      	b.n	801e2e6 <_ZN3CAN11sendMessageEmPhhb+0x72>
    }

    FDCAN_TxHeaderTypeDef TxHeader = {
 801e298:	f107 0314 	add.w	r3, r7, #20
 801e29c:	2224      	movs	r2, #36	@ 0x24
 801e29e:	2100      	movs	r1, #0
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	f005 fe12 	bl	8023eca <memset>
        .ErrorStateIndicator = FDCAN_ESI_ACTIVE,
        .BitRateSwitch = FDCAN_BRS_OFF,
        .FDFormat = FDCAN_CLASSIC_CAN,
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };
 801e2a6:	68bb      	ldr	r3, [r7, #8]
 801e2a8:	617b      	str	r3, [r7, #20]
        .IdType = isExtendedID ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID,
 801e2aa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d002      	beq.n	801e2b8 <_ZN3CAN11sendMessageEmPhhb+0x44>
 801e2b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e2b6:	e000      	b.n	801e2ba <_ZN3CAN11sendMessageEmPhhb+0x46>
 801e2b8:	2300      	movs	r3, #0
    };
 801e2ba:	61bb      	str	r3, [r7, #24]
 801e2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e2be:	623b      	str	r3, [r7, #32]

    HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(this->config.hfdcan, &TxHeader, data);
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	f107 0114 	add.w	r1, r7, #20
 801e2c8:	687a      	ldr	r2, [r7, #4]
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f7e7 f8db 	bl	8005486 <HAL_FDCAN_AddMessageToTxFifoQ>
 801e2d0:	4603      	mov	r3, r0
 801e2d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (status) {
 801e2d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d001      	beq.n	801e2e2 <_ZN3CAN11sendMessageEmPhhb+0x6e>
        nop(); // Placeholder for additional logic if needed
 801e2de:	f7f4 fc6b 	bl	8012bb8 <_Z3nopv>
    }

    return status;
 801e2e2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 801e2e6:	4618      	mov	r0, r3
 801e2e8:	3740      	adds	r7, #64	@ 0x40
 801e2ea:	46bd      	mov	sp, r7
 801e2ec:	bd80      	pop	{r7, pc}
	...

0801e2f0 <_ZN3CAN15sendRemoteFrameEmmPhhRh>:

CAN_Status CAN::sendRemoteFrame(uint32_t id, uint32_t timeoutMs,
    uint8_t *responseData, uint8_t requestLength, uint8_t &responseLength) {
 801e2f0:	b580      	push	{r7, lr}
 801e2f2:	b090      	sub	sp, #64	@ 0x40
 801e2f4:	af00      	add	r7, sp, #0
 801e2f6:	60f8      	str	r0, [r7, #12]
 801e2f8:	60b9      	str	r1, [r7, #8]
 801e2fa:	607a      	str	r2, [r7, #4]
 801e2fc:	603b      	str	r3, [r7, #0]

    TaskHandle_t currentTask = xTaskGetCurrentTaskHandle();
 801e2fe:	f7f2 fdf9 	bl	8010ef4 <xTaskGetCurrentTaskHandle>
 801e302:	63b8      	str	r0, [r7, #56]	@ 0x38

    if (!addReadRequest(id, currentTask)) {
 801e304:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e306:	68b9      	ldr	r1, [r7, #8]
 801e308:	68f8      	ldr	r0, [r7, #12]
 801e30a:	f7ff fdfb 	bl	801df04 <_ZN3CAN14addReadRequestEmP19tskTaskControlBlock>
 801e30e:	4603      	mov	r3, r0
 801e310:	f083 0301 	eor.w	r3, r3, #1
 801e314:	b2db      	uxtb	r3, r3
 801e316:	2b00      	cmp	r3, #0
 801e318:	d001      	beq.n	801e31e <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x2e>
        return CAN_RR_FULL;
 801e31a:	2302      	movs	r3, #2
 801e31c:	e091      	b.n	801e442 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x152>
    }

    // Send Remote Frame
    FDCAN_TxHeaderTypeDef TxHeader = {
 801e31e:	f107 0314 	add.w	r3, r7, #20
 801e322:	2224      	movs	r2, #36	@ 0x24
 801e324:	2100      	movs	r1, #0
 801e326:	4618      	mov	r0, r3
 801e328:	f005 fdcf 	bl	8023eca <memset>
 801e32c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e330:	61bb      	str	r3, [r7, #24]
 801e332:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801e336:	61fb      	str	r3, [r7, #28]
        .ErrorStateIndicator = FDCAN_ESI_ACTIVE,
        .BitRateSwitch = FDCAN_BRS_OFF,
        .FDFormat = FDCAN_CLASSIC_CAN,
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };
 801e338:	68bb      	ldr	r3, [r7, #8]
 801e33a:	617b      	str	r3, [r7, #20]
        .DataLength = mapDLC(requestLength),
 801e33c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801e340:	4618      	mov	r0, r3
 801e342:	f000 f8cd 	bl	801e4e0 <_Z6mapDLCh>
 801e346:	4603      	mov	r3, r0
    };
 801e348:	623b      	str	r3, [r7, #32]

    if (HAL_FDCAN_AddMessageToTxFifoQ(this->config.hfdcan, &TxHeader, nullptr) != HAL_OK) {
 801e34a:	68fb      	ldr	r3, [r7, #12]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	f107 0114 	add.w	r1, r7, #20
 801e352:	2200      	movs	r2, #0
 801e354:	4618      	mov	r0, r3
 801e356:	f7e7 f896 	bl	8005486 <HAL_FDCAN_AddMessageToTxFifoQ>
 801e35a:	4603      	mov	r3, r0
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	bf14      	ite	ne
 801e360:	2301      	movne	r3, #1
 801e362:	2300      	moveq	r3, #0
 801e364:	b2db      	uxtb	r3, r3
 801e366:	2b00      	cmp	r3, #0
 801e368:	d005      	beq.n	801e376 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x86>
        removeReadRequest(id);
 801e36a:	68b9      	ldr	r1, [r7, #8]
 801e36c:	68f8      	ldr	r0, [r7, #12]
 801e36e:	f7ff fe23 	bl	801dfb8 <_ZN3CAN17removeReadRequestEm>
        return CAN_READING_ERROR;
 801e372:	2301      	movs	r3, #1
 801e374:	e065      	b.n	801e442 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x152>
    }

    // Wait for response or timeout
    if (ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(timeoutMs)) > 0) {
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e37c:	fb02 f303 	mul.w	r3, r2, r3
 801e380:	4a32      	ldr	r2, [pc, #200]	@ (801e44c <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x15c>)
 801e382:	fba2 2303 	umull	r2, r3, r2, r3
 801e386:	099b      	lsrs	r3, r3, #6
 801e388:	4619      	mov	r1, r3
 801e38a:	2001      	movs	r0, #1
 801e38c:	f7f2 ff50 	bl	8011230 <ulTaskNotifyTake>
 801e390:	4603      	mov	r3, r0
 801e392:	2b00      	cmp	r3, #0
 801e394:	bf14      	ite	ne
 801e396:	2301      	movne	r3, #1
 801e398:	2300      	moveq	r3, #0
 801e39a:	b2db      	uxtb	r3, r3
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d04b      	beq.n	801e438 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x148>
        for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e3a4:	e03f      	b.n	801e426 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x136>
            if (readRequests[i].id == id && !readRequests[i].isOpen) {
 801e3a6:	68f9      	ldr	r1, [r7, #12]
 801e3a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e3aa:	4613      	mov	r3, r2
 801e3ac:	005b      	lsls	r3, r3, #1
 801e3ae:	4413      	add	r3, r2
 801e3b0:	00db      	lsls	r3, r3, #3
 801e3b2:	440b      	add	r3, r1
 801e3b4:	3304      	adds	r3, #4
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	68ba      	ldr	r2, [r7, #8]
 801e3ba:	429a      	cmp	r2, r3
 801e3bc:	d130      	bne.n	801e420 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x130>
 801e3be:	68f9      	ldr	r1, [r7, #12]
 801e3c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e3c2:	4613      	mov	r3, r2
 801e3c4:	005b      	lsls	r3, r3, #1
 801e3c6:	4413      	add	r3, r2
 801e3c8:	00db      	lsls	r3, r3, #3
 801e3ca:	440b      	add	r3, r1
 801e3cc:	3318      	adds	r3, #24
 801e3ce:	781b      	ldrb	r3, [r3, #0]
 801e3d0:	f083 0301 	eor.w	r3, r3, #1
 801e3d4:	b2db      	uxtb	r3, r3
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d022      	beq.n	801e420 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x130>
                memcpy(responseData, readRequests[i].responseData, readRequests[i].responseLength);
 801e3da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e3dc:	4613      	mov	r3, r2
 801e3de:	005b      	lsls	r3, r3, #1
 801e3e0:	4413      	add	r3, r2
 801e3e2:	00db      	lsls	r3, r3, #3
 801e3e4:	68fa      	ldr	r2, [r7, #12]
 801e3e6:	4413      	add	r3, r2
 801e3e8:	f103 0008 	add.w	r0, r3, #8
 801e3ec:	68f9      	ldr	r1, [r7, #12]
 801e3ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e3f0:	4613      	mov	r3, r2
 801e3f2:	005b      	lsls	r3, r3, #1
 801e3f4:	4413      	add	r3, r2
 801e3f6:	00db      	lsls	r3, r3, #3
 801e3f8:	440b      	add	r3, r1
 801e3fa:	3310      	adds	r3, #16
 801e3fc:	781b      	ldrb	r3, [r3, #0]
 801e3fe:	461a      	mov	r2, r3
 801e400:	4601      	mov	r1, r0
 801e402:	6838      	ldr	r0, [r7, #0]
 801e404:	f005 fdf1 	bl	8023fea <memcpy>
                responseLength = readRequests[i].responseLength;
 801e408:	68f9      	ldr	r1, [r7, #12]
 801e40a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e40c:	4613      	mov	r3, r2
 801e40e:	005b      	lsls	r3, r3, #1
 801e410:	4413      	add	r3, r2
 801e412:	00db      	lsls	r3, r3, #3
 801e414:	440b      	add	r3, r1
 801e416:	3310      	adds	r3, #16
 801e418:	781a      	ldrb	r2, [r3, #0]
 801e41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e41c:	701a      	strb	r2, [r3, #0]
                break;
 801e41e:	e005      	b.n	801e42c <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x13c>
        for (int i = 0; i < CAN_NUMBER_RR; i++) {
 801e420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e422:	3301      	adds	r3, #1
 801e424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e428:	2b0f      	cmp	r3, #15
 801e42a:	ddbc      	ble.n	801e3a6 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0xb6>
            }
        }
        removeReadRequest(id);
 801e42c:	68b9      	ldr	r1, [r7, #8]
 801e42e:	68f8      	ldr	r0, [r7, #12]
 801e430:	f7ff fdc2 	bl	801dfb8 <_ZN3CAN17removeReadRequestEm>
        return CAN_SUCCESS;
 801e434:	2300      	movs	r3, #0
 801e436:	e004      	b.n	801e442 <_ZN3CAN15sendRemoteFrameEmmPhhRh+0x152>
    } else {
        removeReadRequest(id);
 801e438:	68b9      	ldr	r1, [r7, #8]
 801e43a:	68f8      	ldr	r0, [r7, #12]
 801e43c:	f7ff fdbc 	bl	801dfb8 <_ZN3CAN17removeReadRequestEm>
        return CAN_READING_ERROR;
 801e440:	2301      	movs	r3, #1
    }
}
 801e442:	4618      	mov	r0, r3
 801e444:	3740      	adds	r7, #64	@ 0x40
 801e446:	46bd      	mov	sp, r7
 801e448:	bd80      	pop	{r7, pc}
 801e44a:	bf00      	nop
 801e44c:	10624dd3 	.word	0x10624dd3

0801e450 <HAL_FDCAN_RxFifo0Callback>:

/* ---------------------------------------------------------------------------- */
// IRQ Callback Integration for FIFO 0 (29-bit IDs)
extern "C" void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t RxFifo0ITs) {
 801e450:	b580      	push	{r7, lr}
 801e452:	b08e      	sub	sp, #56	@ 0x38
 801e454:	af00      	add	r7, sp, #0
 801e456:	6078      	str	r0, [r7, #4]
 801e458:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData)
 801e45a:	f107 0308 	add.w	r3, r7, #8
 801e45e:	f107 0210 	add.w	r2, r7, #16
 801e462:	2140      	movs	r1, #64	@ 0x40
 801e464:	6878      	ldr	r0, [r7, #4]
 801e466:	f7e7 f869 	bl	800553c <HAL_FDCAN_GetRxMessage>
 801e46a:	4603      	mov	r3, r0
			== HAL_OK) {
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	bf0c      	ite	eq
 801e470:	2301      	moveq	r3, #1
 801e472:	2300      	movne	r3, #0
 801e474:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData)
 801e476:	2b00      	cmp	r3, #0
 801e478:	d008      	beq.n	801e48c <HAL_FDCAN_RxFifo0Callback+0x3c>
		can->onMessageReceived(rxHeader, rxData);
 801e47a:	4b06      	ldr	r3, [pc, #24]	@ (801e494 <HAL_FDCAN_RxFifo0Callback+0x44>)
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	f107 0208 	add.w	r2, r7, #8
 801e482:	f107 0110 	add.w	r1, r7, #16
 801e486:	4618      	mov	r0, r3
 801e488:	f7ff fde4 	bl	801e054 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh>
	}
}
 801e48c:	bf00      	nop
 801e48e:	3738      	adds	r7, #56	@ 0x38
 801e490:	46bd      	mov	sp, r7
 801e492:	bd80      	pop	{r7, pc}
 801e494:	24022ce8 	.word	0x24022ce8

0801e498 <HAL_FDCAN_RxFifo1Callback>:

// IRQ Callback Integration for FIFO 1 (11-bit IDs)
extern "C" void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t RxFifo1ITs) {
 801e498:	b580      	push	{r7, lr}
 801e49a:	b08e      	sub	sp, #56	@ 0x38
 801e49c:	af00      	add	r7, sp, #0
 801e49e:	6078      	str	r0, [r7, #4]
 801e4a0:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &rxHeader, rxData)
 801e4a2:	f107 0308 	add.w	r3, r7, #8
 801e4a6:	f107 0210 	add.w	r2, r7, #16
 801e4aa:	2141      	movs	r1, #65	@ 0x41
 801e4ac:	6878      	ldr	r0, [r7, #4]
 801e4ae:	f7e7 f845 	bl	800553c <HAL_FDCAN_GetRxMessage>
 801e4b2:	4603      	mov	r3, r0
			== HAL_OK) {
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	bf0c      	ite	eq
 801e4b8:	2301      	moveq	r3, #1
 801e4ba:	2300      	movne	r3, #0
 801e4bc:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &rxHeader, rxData)
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d008      	beq.n	801e4d4 <HAL_FDCAN_RxFifo1Callback+0x3c>
		can->onMessageReceived(rxHeader, rxData);
 801e4c2:	4b06      	ldr	r3, [pc, #24]	@ (801e4dc <HAL_FDCAN_RxFifo1Callback+0x44>)
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	f107 0208 	add.w	r2, r7, #8
 801e4ca:	f107 0110 	add.w	r1, r7, #16
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	f7ff fdc0 	bl	801e054 <_ZN3CAN17onMessageReceivedERK21FDCAN_RxHeaderTypeDefPh>
	}
}
 801e4d4:	bf00      	nop
 801e4d6:	3738      	adds	r7, #56	@ 0x38
 801e4d8:	46bd      	mov	sp, r7
 801e4da:	bd80      	pop	{r7, pc}
 801e4dc:	24022ce8 	.word	0x24022ce8

0801e4e0 <_Z6mapDLCh>:

/* ---------------------------------------------------------------------------- */
uint32_t mapDLC(uint8_t dataLength) {
 801e4e0:	b480      	push	{r7}
 801e4e2:	b083      	sub	sp, #12
 801e4e4:	af00      	add	r7, sp, #0
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	71fb      	strb	r3, [r7, #7]
	switch (dataLength) {
 801e4ea:	79fb      	ldrb	r3, [r7, #7]
 801e4ec:	2b40      	cmp	r3, #64	@ 0x40
 801e4ee:	f200 80a5 	bhi.w	801e63c <_Z6mapDLCh+0x15c>
 801e4f2:	a201      	add	r2, pc, #4	@ (adr r2, 801e4f8 <_Z6mapDLCh+0x18>)
 801e4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4f8:	0801e5fd 	.word	0x0801e5fd
 801e4fc:	0801e601 	.word	0x0801e601
 801e500:	0801e605 	.word	0x0801e605
 801e504:	0801e609 	.word	0x0801e609
 801e508:	0801e60d 	.word	0x0801e60d
 801e50c:	0801e611 	.word	0x0801e611
 801e510:	0801e615 	.word	0x0801e615
 801e514:	0801e619 	.word	0x0801e619
 801e518:	0801e61d 	.word	0x0801e61d
 801e51c:	0801e63d 	.word	0x0801e63d
 801e520:	0801e63d 	.word	0x0801e63d
 801e524:	0801e63d 	.word	0x0801e63d
 801e528:	0801e621 	.word	0x0801e621
 801e52c:	0801e63d 	.word	0x0801e63d
 801e530:	0801e63d 	.word	0x0801e63d
 801e534:	0801e63d 	.word	0x0801e63d
 801e538:	0801e625 	.word	0x0801e625
 801e53c:	0801e63d 	.word	0x0801e63d
 801e540:	0801e63d 	.word	0x0801e63d
 801e544:	0801e63d 	.word	0x0801e63d
 801e548:	0801e629 	.word	0x0801e629
 801e54c:	0801e63d 	.word	0x0801e63d
 801e550:	0801e63d 	.word	0x0801e63d
 801e554:	0801e63d 	.word	0x0801e63d
 801e558:	0801e62d 	.word	0x0801e62d
 801e55c:	0801e63d 	.word	0x0801e63d
 801e560:	0801e63d 	.word	0x0801e63d
 801e564:	0801e63d 	.word	0x0801e63d
 801e568:	0801e63d 	.word	0x0801e63d
 801e56c:	0801e63d 	.word	0x0801e63d
 801e570:	0801e63d 	.word	0x0801e63d
 801e574:	0801e63d 	.word	0x0801e63d
 801e578:	0801e631 	.word	0x0801e631
 801e57c:	0801e63d 	.word	0x0801e63d
 801e580:	0801e63d 	.word	0x0801e63d
 801e584:	0801e63d 	.word	0x0801e63d
 801e588:	0801e63d 	.word	0x0801e63d
 801e58c:	0801e63d 	.word	0x0801e63d
 801e590:	0801e63d 	.word	0x0801e63d
 801e594:	0801e63d 	.word	0x0801e63d
 801e598:	0801e63d 	.word	0x0801e63d
 801e59c:	0801e63d 	.word	0x0801e63d
 801e5a0:	0801e63d 	.word	0x0801e63d
 801e5a4:	0801e63d 	.word	0x0801e63d
 801e5a8:	0801e63d 	.word	0x0801e63d
 801e5ac:	0801e63d 	.word	0x0801e63d
 801e5b0:	0801e63d 	.word	0x0801e63d
 801e5b4:	0801e63d 	.word	0x0801e63d
 801e5b8:	0801e635 	.word	0x0801e635
 801e5bc:	0801e63d 	.word	0x0801e63d
 801e5c0:	0801e63d 	.word	0x0801e63d
 801e5c4:	0801e63d 	.word	0x0801e63d
 801e5c8:	0801e63d 	.word	0x0801e63d
 801e5cc:	0801e63d 	.word	0x0801e63d
 801e5d0:	0801e63d 	.word	0x0801e63d
 801e5d4:	0801e63d 	.word	0x0801e63d
 801e5d8:	0801e63d 	.word	0x0801e63d
 801e5dc:	0801e63d 	.word	0x0801e63d
 801e5e0:	0801e63d 	.word	0x0801e63d
 801e5e4:	0801e63d 	.word	0x0801e63d
 801e5e8:	0801e63d 	.word	0x0801e63d
 801e5ec:	0801e63d 	.word	0x0801e63d
 801e5f0:	0801e63d 	.word	0x0801e63d
 801e5f4:	0801e63d 	.word	0x0801e63d
 801e5f8:	0801e639 	.word	0x0801e639
	case 0:
		return FDCAN_DLC_BYTES_0;
 801e5fc:	2300      	movs	r3, #0
 801e5fe:	e01f      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 1:
		return FDCAN_DLC_BYTES_1;
 801e600:	2301      	movs	r3, #1
 801e602:	e01d      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 2:
		return FDCAN_DLC_BYTES_2;
 801e604:	2302      	movs	r3, #2
 801e606:	e01b      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 3:
		return FDCAN_DLC_BYTES_3;
 801e608:	2303      	movs	r3, #3
 801e60a:	e019      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 4:
		return FDCAN_DLC_BYTES_4;
 801e60c:	2304      	movs	r3, #4
 801e60e:	e017      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 5:
		return FDCAN_DLC_BYTES_5;
 801e610:	2305      	movs	r3, #5
 801e612:	e015      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 6:
		return FDCAN_DLC_BYTES_6;
 801e614:	2306      	movs	r3, #6
 801e616:	e013      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 7:
		return FDCAN_DLC_BYTES_7;
 801e618:	2307      	movs	r3, #7
 801e61a:	e011      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 8:
		return FDCAN_DLC_BYTES_8;
 801e61c:	2308      	movs	r3, #8
 801e61e:	e00f      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 12:
		return FDCAN_DLC_BYTES_12;
 801e620:	2309      	movs	r3, #9
 801e622:	e00d      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 16:
		return FDCAN_DLC_BYTES_16;
 801e624:	230a      	movs	r3, #10
 801e626:	e00b      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 20:
		return FDCAN_DLC_BYTES_20;
 801e628:	230b      	movs	r3, #11
 801e62a:	e009      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 24:
		return FDCAN_DLC_BYTES_24;
 801e62c:	230c      	movs	r3, #12
 801e62e:	e007      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 32:
		return FDCAN_DLC_BYTES_32;
 801e630:	230d      	movs	r3, #13
 801e632:	e005      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 48:
		return FDCAN_DLC_BYTES_48;
 801e634:	230e      	movs	r3, #14
 801e636:	e003      	b.n	801e640 <_Z6mapDLCh+0x160>
	case 64:
		return FDCAN_DLC_BYTES_64;
 801e638:	230f      	movs	r3, #15
 801e63a:	e001      	b.n	801e640 <_Z6mapDLCh+0x160>
	default:
		return 0xFFFFFFFF; // Invalid DLC value
 801e63c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 801e640:	4618      	mov	r0, r3
 801e642:	370c      	adds	r7, #12
 801e644:	46bd      	mov	sp, r7
 801e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e64a:	4770      	bx	lr

0801e64c <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1Ev>:
	core_utils_Callback() {
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b082      	sub	sp, #8
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	4618      	mov	r0, r3
 801e658:	f7f3 ff80 	bl	801255c <_ZN8CallbackC1Ev>
 801e65c:	4a09      	ldr	r2, [pc, #36]	@ (801e684 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1Ev+0x38>)
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	601a      	str	r2, [r3, #0]
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	2200      	movs	r2, #0
 801e666:	711a      	strb	r2, [r3, #4]
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	3308      	adds	r3, #8
 801e66c:	2100      	movs	r1, #0
 801e66e:	4618      	mov	r0, r3
 801e670:	f000 f84c 	bl	801e70c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>
		this->registered = 0;
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	2200      	movs	r2, #0
 801e678:	711a      	strb	r2, [r3, #4]
	}
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	4618      	mov	r0, r3
 801e67e:	3708      	adds	r7, #8
 801e680:	46bd      	mov	sp, r7
 801e682:	bd80      	pop	{r7, pc}
 801e684:	080266fc 	.word	0x080266fc

0801e688 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1EPFvS0_E>:
	core_utils_Callback(void (*function)(input_type)) {
 801e688:	b5b0      	push	{r4, r5, r7, lr}
 801e68a:	b088      	sub	sp, #32
 801e68c:	af00      	add	r7, sp, #0
 801e68e:	6078      	str	r0, [r7, #4]
 801e690:	6039      	str	r1, [r7, #0]
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	4618      	mov	r0, r3
 801e696:	f7f3 ff61 	bl	801255c <_ZN8CallbackC1Ev>
 801e69a:	4a12      	ldr	r2, [pc, #72]	@ (801e6e4 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tEC1EPFvS0_E+0x5c>)
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	601a      	str	r2, [r3, #0]
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	711a      	strb	r2, [r3, #4]
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	3308      	adds	r3, #8
 801e6aa:	2100      	movs	r1, #0
 801e6ac:	4618      	mov	r0, r3
 801e6ae:	f000 f82d 	bl	801e70c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<void, input_type>(function);
 801e6b2:	f107 0308 	add.w	r3, r7, #8
 801e6b6:	6839      	ldr	r1, [r7, #0]
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	f000 f827 	bl	801e70c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	f103 0408 	add.w	r4, r3, #8
 801e6c4:	f107 0508 	add.w	r5, r7, #8
 801e6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e6cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e6d0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	2201      	movs	r2, #1
 801e6d8:	711a      	strb	r2, [r3, #4]
	}
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	4618      	mov	r0, r3
 801e6de:	3720      	adds	r7, #32
 801e6e0:	46bd      	mov	sp, r7
 801e6e2:	bdb0      	pop	{r4, r5, r7, pc}
 801e6e4:	080266fc 	.word	0x080266fc

0801e6e8 <_ZN19core_utils_CallbackIv26can_frame_callback_input_tE4callES0_>:
	void call(input_type input) {
 801e6e8:	b580      	push	{r7, lr}
 801e6ea:	b084      	sub	sp, #16
 801e6ec:	af00      	add	r7, sp, #0
 801e6ee:	60f8      	str	r0, [r7, #12]
 801e6f0:	4638      	mov	r0, r7
 801e6f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		this->_fp(input);
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	f103 0008 	add.w	r0, r3, #8
 801e6fc:	463b      	mov	r3, r7
 801e6fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e700:	f000 f812 	bl	801e728 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEclES0_>
	}
 801e704:	bf00      	nop
 801e706:	3710      	adds	r7, #16
 801e708:	46bd      	mov	sp, r7
 801e70a:	bd80      	pop	{r7, pc}

0801e70c <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b082      	sub	sp, #8
 801e710:	af00      	add	r7, sp, #0
 801e712:	6078      	str	r0, [r7, #4]
 801e714:	6039      	str	r1, [r7, #0]
        attach(function);
 801e716:	6839      	ldr	r1, [r7, #0]
 801e718:	6878      	ldr	r0, [r7, #4]
 801e71a:	f000 f815 	bl	801e748 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE6attachEPFvS0_E>
    }
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	4618      	mov	r0, r3
 801e722:	3708      	adds	r7, #8
 801e724:	46bd      	mov	sp, r7
 801e726:	bd80      	pop	{r7, pc}

0801e728 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tEclES0_>:
    R operator ()(A1 a) {
 801e728:	b580      	push	{r7, lr}
 801e72a:	b084      	sub	sp, #16
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	60f8      	str	r0, [r7, #12]
 801e730:	4638      	mov	r0, r7
 801e732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        return call(a);
 801e736:	463b      	mov	r3, r7
 801e738:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e73a:	68f8      	ldr	r0, [r7, #12]
 801e73c:	f000 f815 	bl	801e76a <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_>
 801e740:	bf00      	nop
    }
 801e742:	3710      	adds	r7, #16
 801e744:	46bd      	mov	sp, r7
 801e746:	bd80      	pop	{r7, pc}

0801e748 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801e748:	b480      	push	{r7}
 801e74a:	b083      	sub	sp, #12
 801e74c:	af00      	add	r7, sp, #0
 801e74e:	6078      	str	r0, [r7, #4]
 801e750:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	683a      	ldr	r2, [r7, #0]
 801e756:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	2200      	movs	r2, #0
 801e75c:	615a      	str	r2, [r3, #20]
    }
 801e75e:	bf00      	nop
 801e760:	370c      	adds	r7, #12
 801e762:	46bd      	mov	sp, r7
 801e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e768:	4770      	bx	lr

0801e76a <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_>:
    R call(A1 a) {
 801e76a:	b590      	push	{r4, r7, lr}
 801e76c:	b087      	sub	sp, #28
 801e76e:	af02      	add	r7, sp, #8
 801e770:	60f8      	str	r0, [r7, #12]
 801e772:	4638      	mov	r0, r7
 801e774:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        if (_membercaller == 0 && _p.function) {
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	695b      	ldr	r3, [r3, #20]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d10a      	bne.n	801e796 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x2c>
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	2b00      	cmp	r3, #0
 801e786:	d006      	beq.n	801e796 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x2c>
           return _p.function(a);
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	681c      	ldr	r4, [r3, #0]
 801e78c:	463b      	mov	r3, r7
 801e78e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e792:	47a0      	blx	r4
 801e794:	e014      	b.n	801e7c0 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x56>
        } else if (_membercaller && _p.object) {
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	695b      	ldr	r3, [r3, #20]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d00f      	beq.n	801e7be <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x54>
 801e79e:	68fb      	ldr	r3, [r7, #12]
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d00b      	beq.n	801e7be <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x54>
           return _membercaller(_p.object, _member, a);
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	695c      	ldr	r4, [r3, #20]
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	6818      	ldr	r0, [r3, #0]
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	1d19      	adds	r1, r3, #4
 801e7b2:	68bb      	ldr	r3, [r7, #8]
 801e7b4:	9300      	str	r3, [sp, #0]
 801e7b6:	463b      	mov	r3, r7
 801e7b8:	cb0c      	ldmia	r3, {r2, r3}
 801e7ba:	47a0      	blx	r4
 801e7bc:	e000      	b.n	801e7c0 <_ZN26core_utils_FunctionPointerIv26can_frame_callback_input_tE4callES0_+0x56>
        return R();
 801e7be:	bf00      	nop
    }
 801e7c0:	3714      	adds	r7, #20
 801e7c2:	46bd      	mov	sp, r7
 801e7c4:	bd90      	pop	{r4, r7, pc}

0801e7c6 <_ZN23core_comm_SerialMessage6copyToEPS_>:
 *      Author: Dustin Lehmann
 */

#include "core_comm_SerialProtocol.h"

void core_comm_SerialMessage::copyTo(core_comm_SerialMessage *msg) {
 801e7c6:	b480      	push	{r7}
 801e7c8:	b085      	sub	sp, #20
 801e7ca:	af00      	add	r7, sp, #0
 801e7cc:	6078      	str	r0, [r7, #4]
 801e7ce:	6039      	str	r1, [r7, #0]
	msg->address_1 = this->address_1;
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	785a      	ldrb	r2, [r3, #1]
 801e7d4:	683b      	ldr	r3, [r7, #0]
 801e7d6:	705a      	strb	r2, [r3, #1]
	msg->address_2 = this->address_2;
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	789a      	ldrb	r2, [r3, #2]
 801e7dc:	683b      	ldr	r3, [r7, #0]
 801e7de:	709a      	strb	r2, [r3, #2]
	msg->address_3 = this->address_3;
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	78da      	ldrb	r2, [r3, #3]
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	70da      	strb	r2, [r3, #3]
	msg->cmd = this->cmd;
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	781a      	ldrb	r2, [r3, #0]
 801e7ec:	683b      	ldr	r3, [r7, #0]
 801e7ee:	701a      	strb	r2, [r3, #0]
	msg->len = this->len;
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	899a      	ldrh	r2, [r3, #12]
 801e7f4:	683b      	ldr	r3, [r7, #0]
 801e7f6:	819a      	strh	r2, [r3, #12]

	for (int i = 0; i < len; i++) {
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	60fb      	str	r3, [r7, #12]
 801e7fc:	e00c      	b.n	801e818 <_ZN23core_comm_SerialMessage6copyToEPS_+0x52>
		msg->data_ptr[i] = this->data_ptr[i];
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	689a      	ldr	r2, [r3, #8]
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	441a      	add	r2, r3
 801e806:	683b      	ldr	r3, [r7, #0]
 801e808:	6899      	ldr	r1, [r3, #8]
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	440b      	add	r3, r1
 801e80e:	7812      	ldrb	r2, [r2, #0]
 801e810:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	3301      	adds	r3, #1
 801e816:	60fb      	str	r3, [r7, #12]
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	899b      	ldrh	r3, [r3, #12]
 801e81c:	461a      	mov	r2, r3
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	4293      	cmp	r3, r2
 801e822:	dbec      	blt.n	801e7fe <_ZN23core_comm_SerialMessage6copyToEPS_+0x38>
	}
}
 801e824:	bf00      	nop
 801e826:	bf00      	nop
 801e828:	3714      	adds	r7, #20
 801e82a:	46bd      	mov	sp, r7
 801e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e830:	4770      	bx	lr

0801e832 <_ZN23core_comm_SerialMessage6encodeEPh>:

uint8_t core_comm_SerialMessage::encode(uint8_t *buffer) {
 801e832:	b480      	push	{r7}
 801e834:	b085      	sub	sp, #20
 801e836:	af00      	add	r7, sp, #0
 801e838:	6078      	str	r0, [r7, #4]
 801e83a:	6039      	str	r1, [r7, #0]
	buffer[0] = CORE_SERIAL_MESSAGE_HEADER;
 801e83c:	683b      	ldr	r3, [r7, #0]
 801e83e:	2255      	movs	r2, #85	@ 0x55
 801e840:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->cmd;
 801e842:	683b      	ldr	r3, [r7, #0]
 801e844:	3301      	adds	r3, #1
 801e846:	687a      	ldr	r2, [r7, #4]
 801e848:	7812      	ldrb	r2, [r2, #0]
 801e84a:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->address_1;
 801e84c:	683b      	ldr	r3, [r7, #0]
 801e84e:	3302      	adds	r3, #2
 801e850:	687a      	ldr	r2, [r7, #4]
 801e852:	7852      	ldrb	r2, [r2, #1]
 801e854:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->address_2;
 801e856:	683b      	ldr	r3, [r7, #0]
 801e858:	3303      	adds	r3, #3
 801e85a:	687a      	ldr	r2, [r7, #4]
 801e85c:	7892      	ldrb	r2, [r2, #2]
 801e85e:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->address_3;
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	3304      	adds	r3, #4
 801e864:	687a      	ldr	r2, [r7, #4]
 801e866:	78d2      	ldrb	r2, [r2, #3]
 801e868:	701a      	strb	r2, [r3, #0]
	buffer[5] = this->flag;
 801e86a:	683b      	ldr	r3, [r7, #0]
 801e86c:	3305      	adds	r3, #5
 801e86e:	687a      	ldr	r2, [r7, #4]
 801e870:	7912      	ldrb	r2, [r2, #4]
 801e872:	701a      	strb	r2, [r3, #0]
	buffer[6] = this->len >> 8;
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	899b      	ldrh	r3, [r3, #12]
 801e878:	0a1b      	lsrs	r3, r3, #8
 801e87a:	b29a      	uxth	r2, r3
 801e87c:	683b      	ldr	r3, [r7, #0]
 801e87e:	3306      	adds	r3, #6
 801e880:	b2d2      	uxtb	r2, r2
 801e882:	701a      	strb	r2, [r3, #0]
	buffer[7] = this->len & 0xFF;
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	899a      	ldrh	r2, [r3, #12]
 801e888:	683b      	ldr	r3, [r7, #0]
 801e88a:	3307      	adds	r3, #7
 801e88c:	b2d2      	uxtb	r2, r2
 801e88e:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < this->len; i++) {
 801e890:	2300      	movs	r3, #0
 801e892:	73fb      	strb	r3, [r7, #15]
 801e894:	e00d      	b.n	801e8b2 <_ZN23core_comm_SerialMessage6encodeEPh+0x80>
		buffer[8 + i] = this->data_ptr[i];
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	689a      	ldr	r2, [r3, #8]
 801e89a:	7bfb      	ldrb	r3, [r7, #15]
 801e89c:	441a      	add	r2, r3
 801e89e:	7bfb      	ldrb	r3, [r7, #15]
 801e8a0:	3308      	adds	r3, #8
 801e8a2:	4619      	mov	r1, r3
 801e8a4:	683b      	ldr	r3, [r7, #0]
 801e8a6:	440b      	add	r3, r1
 801e8a8:	7812      	ldrb	r2, [r2, #0]
 801e8aa:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801e8ac:	7bfb      	ldrb	r3, [r7, #15]
 801e8ae:	3301      	adds	r3, #1
 801e8b0:	73fb      	strb	r3, [r7, #15]
 801e8b2:	7bfb      	ldrb	r3, [r7, #15]
 801e8b4:	687a      	ldr	r2, [r7, #4]
 801e8b6:	8992      	ldrh	r2, [r2, #12]
 801e8b8:	4293      	cmp	r3, r2
 801e8ba:	dbec      	blt.n	801e896 <_ZN23core_comm_SerialMessage6encodeEPh+0x64>
	}
	buffer[8 + this->len] = 0; // CRC8
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	899b      	ldrh	r3, [r3, #12]
 801e8c0:	3308      	adds	r3, #8
 801e8c2:	461a      	mov	r2, r3
 801e8c4:	683b      	ldr	r3, [r7, #0]
 801e8c6:	4413      	add	r3, r2
 801e8c8:	2200      	movs	r2, #0
 801e8ca:	701a      	strb	r2, [r3, #0]
	return CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	899b      	ldrh	r3, [r3, #12]
 801e8d0:	b2db      	uxtb	r3, r3
 801e8d2:	3309      	adds	r3, #9
 801e8d4:	b2db      	uxtb	r3, r3
//	CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
}
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	3714      	adds	r7, #20
 801e8da:	46bd      	mov	sp, r7
 801e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8e0:	4770      	bx	lr

0801e8e2 <_ZN23core_comm_SerialMessage5checkEPht>:
	}
	buffer->data_ptr[8 + this->len] = 0; // CRC8
	buffer->len = this->len;
}

uint8_t core_comm_SerialMessage::check(uint8_t *buffer, uint16_t len) {
 801e8e2:	b580      	push	{r7, lr}
 801e8e4:	b086      	sub	sp, #24
 801e8e6:	af00      	add	r7, sp, #0
 801e8e8:	60f8      	str	r0, [r7, #12]
 801e8ea:	60b9      	str	r1, [r7, #8]
 801e8ec:	4613      	mov	r3, r2
 801e8ee:	80fb      	strh	r3, [r7, #6]

	if (len < CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801e8f0:	88fb      	ldrh	r3, [r7, #6]
 801e8f2:	2b08      	cmp	r3, #8
 801e8f4:	d801      	bhi.n	801e8fa <_ZN23core_comm_SerialMessage5checkEPht+0x18>
		return CORE_ERROR;
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	e019      	b.n	801e92e <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	/* Check for the header */
	if (!(buffer[0] == CORE_SERIAL_MESSAGE_HEADER)) {
 801e8fa:	68bb      	ldr	r3, [r7, #8]
 801e8fc:	781b      	ldrb	r3, [r3, #0]
 801e8fe:	2b55      	cmp	r3, #85	@ 0x55
 801e900:	d001      	beq.n	801e906 <_ZN23core_comm_SerialMessage5checkEPht+0x24>
		return CORE_ERROR;
 801e902:	2300      	movs	r3, #0
 801e904:	e013      	b.n	801e92e <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
//		return CORE_ERROR;
//	}

	/* Extract the data length */
	// Check if the data length matches with the length of the message
	uint16_t data_len = uint8_to_uint16(buffer[6], buffer[7]);
 801e906:	68bb      	ldr	r3, [r7, #8]
 801e908:	3306      	adds	r3, #6
 801e90a:	781a      	ldrb	r2, [r3, #0]
 801e90c:	68bb      	ldr	r3, [r7, #8]
 801e90e:	3307      	adds	r3, #7
 801e910:	781b      	ldrb	r3, [r3, #0]
 801e912:	4619      	mov	r1, r3
 801e914:	4610      	mov	r0, r2
 801e916:	f002 fff5 	bl	8021904 <_Z15uint8_to_uint16hh>
 801e91a:	4603      	mov	r3, r0
 801e91c:	82fb      	strh	r3, [r7, #22]
	if ((len - data_len) == CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801e91e:	88fa      	ldrh	r2, [r7, #6]
 801e920:	8afb      	ldrh	r3, [r7, #22]
 801e922:	1ad3      	subs	r3, r2, r3
 801e924:	2b09      	cmp	r3, #9
 801e926:	d001      	beq.n	801e92c <_ZN23core_comm_SerialMessage5checkEPht+0x4a>
	} else {
		return CORE_ERROR;
 801e928:	2300      	movs	r3, #0
 801e92a:	e000      	b.n	801e92e <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	return CORE_OK;
 801e92c:	2301      	movs	r3, #1

}
 801e92e:	4618      	mov	r0, r3
 801e930:	3718      	adds	r7, #24
 801e932:	46bd      	mov	sp, r7
 801e934:	bd80      	pop	{r7, pc}

0801e936 <_ZN23core_comm_SerialMessage6decodeEPht>:
uint8_t core_comm_SerialMessage::check(Buffer *buffer) {
	return this->check(buffer->data_ptr, buffer->len);
}

uint8_t core_comm_SerialMessage::decode(uint8_t *buffer, uint16_t len) {
 801e936:	b580      	push	{r7, lr}
 801e938:	b086      	sub	sp, #24
 801e93a:	af00      	add	r7, sp, #0
 801e93c:	60f8      	str	r0, [r7, #12]
 801e93e:	60b9      	str	r1, [r7, #8]
 801e940:	4613      	mov	r3, r2
 801e942:	80fb      	strh	r3, [r7, #6]
	if (this->check(buffer, len) == CORE_ERROR) {
 801e944:	88fb      	ldrh	r3, [r7, #6]
 801e946:	461a      	mov	r2, r3
 801e948:	68b9      	ldr	r1, [r7, #8]
 801e94a:	68f8      	ldr	r0, [r7, #12]
 801e94c:	f7ff ffc9 	bl	801e8e2 <_ZN23core_comm_SerialMessage5checkEPht>
 801e950:	4603      	mov	r3, r0
 801e952:	2b00      	cmp	r3, #0
 801e954:	bf0c      	ite	eq
 801e956:	2301      	moveq	r3, #1
 801e958:	2300      	movne	r3, #0
 801e95a:	b2db      	uxtb	r3, r3
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d001      	beq.n	801e964 <_ZN23core_comm_SerialMessage6decodeEPht+0x2e>
		return CORE_ERROR;
 801e960:	2300      	movs	r3, #0
 801e962:	e037      	b.n	801e9d4 <_ZN23core_comm_SerialMessage6decodeEPht+0x9e>
	}

	/* Extract the command */
	this->cmd = buffer[1];
 801e964:	68bb      	ldr	r3, [r7, #8]
 801e966:	785a      	ldrb	r2, [r3, #1]
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	701a      	strb	r2, [r3, #0]

	/* Extract the address */
	this->address_1 = buffer[2];
 801e96c:	68bb      	ldr	r3, [r7, #8]
 801e96e:	789a      	ldrb	r2, [r3, #2]
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	705a      	strb	r2, [r3, #1]
	this->address_2 = buffer[3];
 801e974:	68bb      	ldr	r3, [r7, #8]
 801e976:	78da      	ldrb	r2, [r3, #3]
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	709a      	strb	r2, [r3, #2]
	this->address_3 = buffer[4];
 801e97c:	68bb      	ldr	r3, [r7, #8]
 801e97e:	791a      	ldrb	r2, [r3, #4]
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	70da      	strb	r2, [r3, #3]

	/* Flag */
	this->flag = buffer[5];
 801e984:	68bb      	ldr	r3, [r7, #8]
 801e986:	795a      	ldrb	r2, [r3, #5]
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	711a      	strb	r2, [r3, #4]

	/* Extract the data length */
	this->len = uint8_to_uint16(buffer[6], buffer[7]);
 801e98c:	68bb      	ldr	r3, [r7, #8]
 801e98e:	3306      	adds	r3, #6
 801e990:	781a      	ldrb	r2, [r3, #0]
 801e992:	68bb      	ldr	r3, [r7, #8]
 801e994:	3307      	adds	r3, #7
 801e996:	781b      	ldrb	r3, [r3, #0]
 801e998:	4619      	mov	r1, r3
 801e99a:	4610      	mov	r0, r2
 801e99c:	f002 ffb2 	bl	8021904 <_Z15uint8_to_uint16hh>
 801e9a0:	4603      	mov	r3, r0
 801e9a2:	461a      	mov	r2, r3
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	819a      	strh	r2, [r3, #12]

	/* Extract the data */
	for (uint8_t i = 0; i < this->len; i++) {
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	75fb      	strb	r3, [r7, #23]
 801e9ac:	e00c      	b.n	801e9c8 <_ZN23core_comm_SerialMessage6decodeEPht+0x92>
		this->data_ptr[i] = buffer[i + 8];
 801e9ae:	7dfb      	ldrb	r3, [r7, #23]
 801e9b0:	3308      	adds	r3, #8
 801e9b2:	68ba      	ldr	r2, [r7, #8]
 801e9b4:	441a      	add	r2, r3
 801e9b6:	68fb      	ldr	r3, [r7, #12]
 801e9b8:	6899      	ldr	r1, [r3, #8]
 801e9ba:	7dfb      	ldrb	r3, [r7, #23]
 801e9bc:	440b      	add	r3, r1
 801e9be:	7812      	ldrb	r2, [r2, #0]
 801e9c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801e9c2:	7dfb      	ldrb	r3, [r7, #23]
 801e9c4:	3301      	adds	r3, #1
 801e9c6:	75fb      	strb	r3, [r7, #23]
 801e9c8:	7dfb      	ldrb	r3, [r7, #23]
 801e9ca:	68fa      	ldr	r2, [r7, #12]
 801e9cc:	8992      	ldrh	r2, [r2, #12]
 801e9ce:	4293      	cmp	r3, r2
 801e9d0:	dbed      	blt.n	801e9ae <_ZN23core_comm_SerialMessage6decodeEPht+0x78>
	}

	return CORE_OK;
 801e9d2:	2301      	movs	r3, #1
}
 801e9d4:	4618      	mov	r0, r3
 801e9d6:	3718      	adds	r7, #24
 801e9d8:	46bd      	mov	sp, r7
 801e9da:	bd80      	pop	{r7, pc}

0801e9dc <_ZN23core_comm_SerialMessage6decodeEP6Buffer>:

uint8_t core_comm_SerialMessage::decode(Buffer *buffer) {
 801e9dc:	b580      	push	{r7, lr}
 801e9de:	b082      	sub	sp, #8
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	6078      	str	r0, [r7, #4]
 801e9e4:	6039      	str	r1, [r7, #0]
	return this->decode(buffer->data_ptr, buffer->len);
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	6819      	ldr	r1, [r3, #0]
 801e9ea:	683b      	ldr	r3, [r7, #0]
 801e9ec:	889b      	ldrh	r3, [r3, #4]
 801e9ee:	461a      	mov	r2, r3
 801e9f0:	6878      	ldr	r0, [r7, #4]
 801e9f2:	f7ff ffa0 	bl	801e936 <_ZN23core_comm_SerialMessage6decodeEPht>
 801e9f6:	4603      	mov	r3, r0
}
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	3708      	adds	r7, #8
 801e9fc:	46bd      	mov	sp, r7
 801e9fe:	bd80      	pop	{r7, pc}

0801ea00 <_Z41__static_initialization_and_destruction_0ii>:
			socket->rx_function();
		}

	}
	vTaskDelete(socket->getTaskID());
}
 801ea00:	b480      	push	{r7}
 801ea02:	b083      	sub	sp, #12
 801ea04:	af00      	add	r7, sp, #0
 801ea06:	6078      	str	r0, [r7, #4]
 801ea08:	6039      	str	r1, [r7, #0]
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2b01      	cmp	r3, #1
 801ea0e:	d108      	bne.n	801ea22 <_Z41__static_initialization_and_destruction_0ii+0x22>
 801ea10:	683b      	ldr	r3, [r7, #0]
 801ea12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ea16:	4293      	cmp	r3, r2
 801ea18:	d103      	bne.n	801ea22 <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 801ea1a:	4a05      	ldr	r2, [pc, #20]	@ (801ea30 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801ea1c:	4b05      	ldr	r3, [pc, #20]	@ (801ea34 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	6013      	str	r3, [r2, #0]
}
 801ea22:	bf00      	nop
 801ea24:	370c      	adds	r7, #12
 801ea26:	46bd      	mov	sp, r7
 801ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea2c:	4770      	bx	lr
 801ea2e:	bf00      	nop
 801ea30:	24000038 	.word	0x24000038
 801ea34:	24000034 	.word	0x24000034

0801ea38 <_GLOBAL__sub_I_std_hardware_uart_config>:
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	af00      	add	r7, sp, #0
 801ea3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ea40:	2001      	movs	r0, #1
 801ea42:	f7ff ffdd 	bl	801ea00 <_Z41__static_initialization_and_destruction_0ii>
 801ea46:	bd80      	pop	{r7, pc}

0801ea48 <_Z3sgnf>:
 */

#include "pid.h"
#include "math.h"

float sgn(float input) {
 801ea48:	b480      	push	{r7}
 801ea4a:	b083      	sub	sp, #12
 801ea4c:	af00      	add	r7, sp, #0
 801ea4e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (input >= 0) {
 801ea52:	edd7 7a01 	vldr	s15, [r7, #4]
 801ea56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ea5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea5e:	db02      	blt.n	801ea66 <_Z3sgnf+0x1e>
		return 1;
 801ea60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801ea64:	e000      	b.n	801ea68 <_Z3sgnf+0x20>
	} else {
		return -1;
 801ea66:	4b05      	ldr	r3, [pc, #20]	@ (801ea7c <_Z3sgnf+0x34>)
	}
}
 801ea68:	ee07 3a90 	vmov	s15, r3
 801ea6c:	eeb0 0a67 	vmov.f32	s0, s15
 801ea70:	370c      	adds	r7, #12
 801ea72:	46bd      	mov	sp, r7
 801ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea78:	4770      	bx	lr
 801ea7a:	bf00      	nop
 801ea7c:	bf800000 	.word	0xbf800000

0801ea80 <_ZN20pid_control_config_tC1Ev>:
 */

#ifndef CONTROL_PID_PID_H_
#define CONTROL_PID_PID_H_

typedef struct pid_control_config_t {
 801ea80:	b480      	push	{r7}
 801ea82:	b083      	sub	sp, #12
 801ea84:	af00      	add	r7, sp, #0
 801ea86:	6078      	str	r0, [r7, #4]
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	2200      	movs	r2, #0
 801ea8c:	741a      	strb	r2, [r3, #16]
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	f04f 0200 	mov.w	r2, #0
 801ea94:	615a      	str	r2, [r3, #20]
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	2200      	movs	r2, #0
 801ea9a:	761a      	strb	r2, [r3, #24]
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	f04f 0200 	mov.w	r2, #0
 801eaa2:	61da      	str	r2, [r3, #28]
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	f04f 0200 	mov.w	r2, #0
 801eaaa:	621a      	str	r2, [r3, #32]
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	2200      	movs	r2, #0
 801eab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	f04f 0200 	mov.w	r2, #0
 801eaba:	629a      	str	r2, [r3, #40]	@ 0x28
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	f04f 0200 	mov.w	r2, #0
 801eac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	4618      	mov	r0, r3
 801eac8:	370c      	adds	r7, #12
 801eaca:	46bd      	mov	sp, r7
 801eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ead0:	4770      	bx	lr

0801ead2 <_ZN11PID_ControlC1Ev>:

PID_Control::PID_Control() {
 801ead2:	b580      	push	{r7, lr}
 801ead4:	b082      	sub	sp, #8
 801ead6:	af00      	add	r7, sp, #0
 801ead8:	6078      	str	r0, [r7, #4]
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	4618      	mov	r0, r3
 801eade:	f7ff ffcf 	bl	801ea80 <_ZN20pid_control_config_tC1Ev>

}
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	4618      	mov	r0, r3
 801eae6:	3708      	adds	r7, #8
 801eae8:	46bd      	mov	sp, r7
 801eaea:	bd80      	pop	{r7, pc}

0801eaec <_ZN11PID_Control4initE20pid_control_config_t>:

void PID_Control::init(pid_control_config_t config) {
 801eaec:	b084      	sub	sp, #16
 801eaee:	b5b0      	push	{r4, r5, r7, lr}
 801eaf0:	b082      	sub	sp, #8
 801eaf2:	af00      	add	r7, sp, #0
 801eaf4:	6078      	str	r0, [r7, #4]
 801eaf6:	f107 001c 	add.w	r0, r7, #28
 801eafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	461d      	mov	r5, r3
 801eb02:	f107 041c 	add.w	r4, r7, #28
 801eb06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801eb08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801eb0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801eb0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801eb0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801eb12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	this->reset();
 801eb16:	6878      	ldr	r0, [r7, #4]
 801eb18:	f000 f807 	bl	801eb2a <_ZN11PID_Control5resetEv>
}
 801eb1c:	bf00      	nop
 801eb1e:	3708      	adds	r7, #8
 801eb20:	46bd      	mov	sp, r7
 801eb22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801eb26:	b004      	add	sp, #16
 801eb28:	4770      	bx	lr

0801eb2a <_ZN11PID_Control5resetEv>:

void PID_Control::reset() {
 801eb2a:	b480      	push	{r7}
 801eb2c:	b083      	sub	sp, #12
 801eb2e:	af00      	add	r7, sp, #0
 801eb30:	6078      	str	r0, [r7, #4]
	this->error_integral = 0;
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	f04f 0200 	mov.w	r2, #0
 801eb38:	631a      	str	r2, [r3, #48]	@ 0x30
	this->error_last = 0;
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	f04f 0200 	mov.w	r2, #0
 801eb40:	639a      	str	r2, [r3, #56]	@ 0x38
	this->last_output = 0;
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	f04f 0200 	mov.w	r2, #0
 801eb48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801eb4a:	bf00      	nop
 801eb4c:	370c      	adds	r7, #12
 801eb4e:	46bd      	mov	sp, r7
 801eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb54:	4770      	bx	lr

0801eb56 <_ZN11PID_Control6updateEf>:

float PID_Control::update(float error) {
 801eb56:	b580      	push	{r7, lr}
 801eb58:	b084      	sub	sp, #16
 801eb5a:	af00      	add	r7, sp, #0
 801eb5c:	6078      	str	r0, [r7, #4]
 801eb5e:	ed87 0a00 	vstr	s0, [r7]
	float output = this->config.Kp * error
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	ed93 7a00 	vldr	s14, [r3]
 801eb68:	edd7 7a00 	vldr	s15, [r7]
 801eb6c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ this->config.Ki * this->error_integral
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	edd3 6a01 	vldr	s13, [r3, #4]
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801eb7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801eb80:	ee77 7a27 	vadd.f32	s15, s14, s15
 801eb84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			+ this->config.Kd * 1.0 / this->config.Ts
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	edd3 7a02 	vldr	s15, [r3, #8]
 801eb8e:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	edd3 7a03 	vldr	s15, [r3, #12]
 801eb98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801eb9c:	ee84 5b07 	vdiv.f64	d5, d4, d7
					* (error - this->error_last);
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 801eba6:	ed97 7a00 	vldr	s14, [r7]
 801ebaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ebae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801ebb2:	ee25 7b07 	vmul.f64	d7, d5, d7
			+ this->config.Kd * 1.0 / this->config.Ts
 801ebb6:	ee36 7b07 	vadd.f64	d7, d6, d7
	float output = this->config.Kp * error
 801ebba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ebbe:	edc7 7a03 	vstr	s15, [r7, #12]

	this->error_last = error;
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	683a      	ldr	r2, [r7, #0]
 801ebc6:	639a      	str	r2, [r3, #56]	@ 0x38

	this->error_integral = this->error_integral + this->config.Ts * error;
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	edd3 6a03 	vldr	s13, [r3, #12]
 801ebd4:	edd7 7a00 	vldr	s15, [r7]
 801ebd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ebdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if (this->config.enable_integral_limit && abs(this->error_integral) > this->config.error_integral_limit) {
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	7c1b      	ldrb	r3, [r3, #16]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d012      	beq.n	801ec14 <_ZN11PID_Control6updateEf+0xbe>
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801ebf4:	eeb0 0a67 	vmov.f32	s0, s15
 801ebf8:	f7f7 fecf 	bl	801699a <_ZSt3absf>
 801ebfc:	eeb0 7a40 	vmov.f32	s14, s0
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	edd3 7a05 	vldr	s15, [r3, #20]
 801ec06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec0e:	dd01      	ble.n	801ec14 <_ZN11PID_Control6updateEf+0xbe>
 801ec10:	2301      	movs	r3, #1
 801ec12:	e000      	b.n	801ec16 <_ZN11PID_Control6updateEf+0xc0>
 801ec14:	2300      	movs	r3, #0
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d010      	beq.n	801ec3c <_ZN11PID_Control6updateEf+0xe6>
		this->error_integral = sgn(this->error_integral)
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801ec20:	eeb0 0a67 	vmov.f32	s0, s15
 801ec24:	f7ff ff10 	bl	801ea48 <_Z3sgnf>
 801ec28:	eeb0 7a40 	vmov.f32	s14, s0
				* this->config.error_integral_limit;
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	edd3 7a05 	vldr	s15, [r3, #20]
 801ec32:	ee67 7a27 	vmul.f32	s15, s14, s15
		this->error_integral = sgn(this->error_integral)
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	}

	if (this->config.enable_output_limit) {
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	7e1b      	ldrb	r3, [r3, #24]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d019      	beq.n	801ec78 <_ZN11PID_Control6updateEf+0x122>
		if (output > this->config.output_limit_max) {
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	edd3 7a07 	vldr	s15, [r3, #28]
 801ec4a:	ed97 7a03 	vldr	s14, [r7, #12]
 801ec4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ec52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec56:	dd02      	ble.n	801ec5e <_ZN11PID_Control6updateEf+0x108>
			output = this->config.output_limit_max;
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	69db      	ldr	r3, [r3, #28]
 801ec5c:	60fb      	str	r3, [r7, #12]
		}
		if (output < this->config.output_limit_min) {
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	edd3 7a08 	vldr	s15, [r3, #32]
 801ec64:	ed97 7a03 	vldr	s14, [r7, #12]
 801ec68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ec6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec70:	d502      	bpl.n	801ec78 <_ZN11PID_Control6updateEf+0x122>
			output = this->config.output_limit_min;
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	6a1b      	ldr	r3, [r3, #32]
 801ec76:	60fb      	str	r3, [r7, #12]
		}
	}

	if (this->config.enable_rate_limit){
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d040      	beq.n	801ed04 <_ZN11PID_Control6updateEf+0x1ae>
		float d_u = (output-this->last_output)/this->config.Ts;
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801ec88:	ed97 7a03 	vldr	s14, [r7, #12]
 801ec8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	ed93 7a03 	vldr	s14, [r3, #12]
 801ec96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ec9a:	edc7 7a02 	vstr	s15, [r7, #8]

		if(d_u > this->config.rate_limit_max){
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801eca4:	ed97 7a02 	vldr	s14, [r7, #8]
 801eca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ecac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecb0:	dd0f      	ble.n	801ecd2 <_ZN11PID_Control6updateEf+0x17c>
			output = this->last_output + this->config.rate_limit_max * this->config.Ts;
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	edd3 7a03 	vldr	s15, [r3, #12]
 801ecc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ecc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801eccc:	edc7 7a03 	vstr	s15, [r7, #12]
 801ecd0:	e018      	b.n	801ed04 <_ZN11PID_Control6updateEf+0x1ae>
		}
		else if (d_u < this->config.rate_limit_min){
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801ecd8:	ed97 7a02 	vldr	s14, [r7, #8]
 801ecdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ece0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ece4:	d50e      	bpl.n	801ed04 <_ZN11PID_Control6updateEf+0x1ae>
			output = this->last_output + this->config.rate_limit_min * this->config.Ts;
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	edd3 7a03 	vldr	s15, [r3, #12]
 801ecf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ecfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ed00:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	this->last_output = output;
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	68fa      	ldr	r2, [r7, #12]
 801ed08:	635a      	str	r2, [r3, #52]	@ 0x34

	return output;
 801ed0a:	68fb      	ldr	r3, [r7, #12]
 801ed0c:	ee07 3a90 	vmov	s15, r3
}
 801ed10:	eeb0 0a67 	vmov.f32	s0, s15
 801ed14:	3710      	adds	r7, #16
 801ed16:	46bd      	mov	sp, r7
 801ed18:	bd80      	pop	{r7, pc}
	...

0801ed1c <_ZNSt14numeric_limitsIdE7epsilonEv>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR double
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __DBL_EPSILON__; }
 801ed1c:	b480      	push	{r7}
 801ed1e:	af00      	add	r7, sp, #0
 801ed20:	f04f 0200 	mov.w	r2, #0
 801ed24:	4b04      	ldr	r3, [pc, #16]	@ (801ed38 <_ZNSt14numeric_limitsIdE7epsilonEv+0x1c>)
 801ed26:	ec43 2b17 	vmov	d7, r2, r3
 801ed2a:	eeb0 0b47 	vmov.f64	d0, d7
 801ed2e:	46bd      	mov	sp, r7
 801ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed34:	4770      	bx	lr
 801ed36:	bf00      	nop
 801ed38:	3cb00000 	.word	0x3cb00000

0801ed3c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>:

      static _GLIBCXX_CONSTEXPR double
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_val(); }

      static _GLIBCXX_CONSTEXPR double
      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nan(""); }
 801ed3c:	b480      	push	{r7}
 801ed3e:	af00      	add	r7, sp, #0
 801ed40:	f04f 0200 	mov.w	r2, #0
 801ed44:	4b04      	ldr	r3, [pc, #16]	@ (801ed58 <_ZNSt14numeric_limitsIdE9quiet_NaNEv+0x1c>)
 801ed46:	ec43 2b17 	vmov	d7, r2, r3
 801ed4a:	eeb0 0b47 	vmov.f64	d0, d7
 801ed4e:	46bd      	mov	sp, r7
 801ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed54:	4770      	bx	lr
 801ed56:	bf00      	nop
 801ed58:	7ff80000 	.word	0x7ff80000

0801ed5c <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 801ed5c:	b480      	push	{r7}
 801ed5e:	b083      	sub	sp, #12
 801ed60:	af00      	add	r7, sp, #0
 801ed62:	ed87 0b00 	vstr	d0, [r7]
 801ed66:	ed97 6b00 	vldr	d6, [r7]
 801ed6a:	ed97 7b00 	vldr	d7, [r7]
 801ed6e:	eeb4 6b47 	vcmp.f64	d6, d7
 801ed72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed76:	bf6c      	ite	vs
 801ed78:	2301      	movvs	r3, #1
 801ed7a:	2300      	movvc	r3, #0
 801ed7c:	b2db      	uxtb	r3, r3
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	bf14      	ite	ne
 801ed82:	2301      	movne	r3, #1
 801ed84:	2300      	moveq	r3, #0
 801ed86:	b2db      	uxtb	r3, r3
 801ed88:	4618      	mov	r0, r3
 801ed8a:	370c      	adds	r7, #12
 801ed8c:	46bd      	mov	sp, r7
 801ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed92:	4770      	bx	lr

0801ed94 <_ZN14BasicVQFParamsC1Ev>:
#define EPS std::numeric_limits<vqf_real_t>::epsilon()
#define NaN std::numeric_limits<vqf_real_t>::quiet_NaN()

inline vqf_real_t square(vqf_real_t x) { return x*x; }

BasicVQFParams::BasicVQFParams()
 801ed94:	b480      	push	{r7}
 801ed96:	b083      	sub	sp, #12
 801ed98:	af00      	add	r7, sp, #0
 801ed9a:	6078      	str	r0, [r7, #4]
    : tauAcc(3.0)
 801ed9c:	6879      	ldr	r1, [r7, #4]
 801ed9e:	f04f 0200 	mov.w	r2, #0
 801eda2:	4b08      	ldr	r3, [pc, #32]	@ (801edc4 <_ZN14BasicVQFParamsC1Ev+0x30>)
 801eda4:	e9c1 2300 	strd	r2, r3, [r1]
    , tauMag(9.0)
 801eda8:	6879      	ldr	r1, [r7, #4]
 801edaa:	f04f 0200 	mov.w	r2, #0
 801edae:	4b06      	ldr	r3, [pc, #24]	@ (801edc8 <_ZN14BasicVQFParamsC1Ev+0x34>)
 801edb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
{

}
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	4618      	mov	r0, r3
 801edb8:	370c      	adds	r7, #12
 801edba:	46bd      	mov	sp, r7
 801edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edc0:	4770      	bx	lr
 801edc2:	bf00      	nop
 801edc4:	40080000 	.word	0x40080000
 801edc8:	40220000 	.word	0x40220000

0801edcc <_ZN8BasicVQFC1Eddd>:

BasicVQF::BasicVQF(vqf_real_t gyrTs, vqf_real_t accTs, vqf_real_t magTs)
 801edcc:	b580      	push	{r7, lr}
 801edce:	b088      	sub	sp, #32
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	61f8      	str	r0, [r7, #28]
 801edd4:	ed87 0b04 	vstr	d0, [r7, #16]
 801edd8:	ed87 1b02 	vstr	d1, [r7, #8]
 801eddc:	ed87 2b00 	vstr	d2, [r7]
 801ede0:	69fb      	ldr	r3, [r7, #28]
 801ede2:	4618      	mov	r0, r3
 801ede4:	f7ff ffd6 	bl	801ed94 <_ZN14BasicVQFParamsC1Ev>
{
    coeffs.gyrTs = gyrTs;
 801ede8:	69f9      	ldr	r1, [r7, #28]
 801edea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801edee:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    coeffs.accTs = accTs > 0 ? accTs : gyrTs;
 801edf2:	ed97 7b02 	vldr	d7, [r7, #8]
 801edf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801edfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edfe:	dd02      	ble.n	801ee06 <_ZN8BasicVQFC1Eddd+0x3a>
 801ee00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ee04:	e001      	b.n	801ee0a <_ZN8BasicVQFC1Eddd+0x3e>
 801ee06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ee0a:	69f9      	ldr	r1, [r7, #28]
 801ee0c:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    coeffs.magTs = magTs > 0 ? magTs : gyrTs;
 801ee10:	ed97 7b00 	vldr	d7, [r7]
 801ee14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee1c:	dd02      	ble.n	801ee24 <_ZN8BasicVQFC1Eddd+0x58>
 801ee1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ee22:	e001      	b.n	801ee28 <_ZN8BasicVQFC1Eddd+0x5c>
 801ee24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ee28:	69f9      	ldr	r1, [r7, #28]
 801ee2a:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

    setup();
 801ee2e:	69f8      	ldr	r0, [r7, #28]
 801ee30:	f000 ff9e 	bl	801fd70 <_ZN8BasicVQF5setupEv>
}
 801ee34:	69fb      	ldr	r3, [r7, #28]
 801ee36:	4618      	mov	r0, r3
 801ee38:	3720      	adds	r7, #32
 801ee3a:	46bd      	mov	sp, r7
 801ee3c:	bd80      	pop	{r7, pc}

0801ee3e <_ZN8BasicVQF9updateGyrEPKd>:

    setup();
}

void BasicVQF::updateGyr(const vqf_real_t gyr[3])
{
 801ee3e:	b580      	push	{r7, lr}
 801ee40:	b092      	sub	sp, #72	@ 0x48
 801ee42:	af00      	add	r7, sp, #0
 801ee44:	6078      	str	r0, [r7, #4]
 801ee46:	6039      	str	r1, [r7, #0]
    // gyroscope prediction step
    vqf_real_t gyrNorm = norm(gyr, 3);
 801ee48:	2103      	movs	r1, #3
 801ee4a:	6838      	ldr	r0, [r7, #0]
 801ee4c:	f000 fc46 	bl	801f6dc <_ZN8BasicVQF4normEPKdj>
 801ee50:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    vqf_real_t angle = gyrNorm * coeffs.gyrTs;
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	ed93 7b2a 	vldr	d7, [r3, #168]	@ 0xa8
 801ee5a:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801ee5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ee62:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    if (gyrNorm > EPS) {
 801ee66:	f7ff ff59 	bl	801ed1c <_ZNSt14numeric_limitsIdE7epsilonEv>
 801ee6a:	eeb0 6b40 	vmov.f64	d6, d0
 801ee6e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 801ee72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ee76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee7a:	bfcc      	ite	gt
 801ee7c:	2301      	movgt	r3, #1
 801ee7e:	2300      	movle	r3, #0
 801ee80:	b2db      	uxtb	r3, r3
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d04f      	beq.n	801ef26 <_ZN8BasicVQF9updateGyrEPKd+0xe8>
        vqf_real_t c = cos(angle/2);
 801ee86:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 801ee8a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 801ee8e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801ee92:	eeb0 0b46 	vmov.f64	d0, d6
 801ee96:	f003 f9e3 	bl	8022260 <cos>
 801ee9a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
        vqf_real_t s = sin(angle/2)/gyrNorm;
 801ee9e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 801eea2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 801eea6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801eeaa:	eeb0 0b46 	vmov.f64	d0, d6
 801eeae:	f003 fa2b 	bl	8022308 <sin>
 801eeb2:	eeb0 5b40 	vmov.f64	d5, d0
 801eeb6:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801eeba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801eebe:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
        vqf_real_t gyrStepQuat[4] = {c, s*gyr[0], s*gyr[1], s*gyr[2]};
 801eec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801eec6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 801eeca:	683b      	ldr	r3, [r7, #0]
 801eecc:	ed93 6b00 	vldr	d6, [r3]
 801eed0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801eed4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801eed8:	ed87 7b04 	vstr	d7, [r7, #16]
 801eedc:	683b      	ldr	r3, [r7, #0]
 801eede:	3308      	adds	r3, #8
 801eee0:	ed93 6b00 	vldr	d6, [r3]
 801eee4:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801eee8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801eeec:	ed87 7b06 	vstr	d7, [r7, #24]
 801eef0:	683b      	ldr	r3, [r7, #0]
 801eef2:	3310      	adds	r3, #16
 801eef4:	ed93 6b00 	vldr	d6, [r3]
 801eef8:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801eefc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ef00:	ed87 7b08 	vstr	d7, [r7, #32]
        quatMultiply(state.gyrQuat, gyrStepQuat, state.gyrQuat);
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	f103 0010 	add.w	r0, r3, #16
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	f103 0210 	add.w	r2, r3, #16
 801ef10:	f107 0308 	add.w	r3, r7, #8
 801ef14:	4619      	mov	r1, r3
 801ef16:	f000 f98d 	bl	801f234 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
        normalize(state.gyrQuat, 4);
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	3310      	adds	r3, #16
 801ef1e:	2104      	movs	r1, #4
 801ef20:	4618      	mov	r0, r3
 801ef22:	f000 fc0f 	bl	801f744 <_ZN8BasicVQF9normalizeEPdj>
    }
}
 801ef26:	bf00      	nop
 801ef28:	3748      	adds	r7, #72	@ 0x48
 801ef2a:	46bd      	mov	sp, r7
 801ef2c:	bd80      	pop	{r7, pc}
	...

0801ef30 <_ZN8BasicVQF9updateAccEPKd>:

void BasicVQF::updateAcc(const vqf_real_t acc[3])
{
 801ef30:	b590      	push	{r4, r7, lr}
 801ef32:	b095      	sub	sp, #84	@ 0x54
 801ef34:	af02      	add	r7, sp, #8
 801ef36:	6078      	str	r0, [r7, #4]
 801ef38:	6039      	str	r1, [r7, #0]
    // ignore [0 0 0] samples
    if (acc[0] == vqf_real_t(0.0) && acc[1] == vqf_real_t(0.0) && acc[2] == vqf_real_t(0.0)) {
 801ef3a:	683b      	ldr	r3, [r7, #0]
 801ef3c:	ed93 7b00 	vldr	d7, [r3]
 801ef40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ef44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef48:	d112      	bne.n	801ef70 <_ZN8BasicVQF9updateAccEPKd+0x40>
 801ef4a:	683b      	ldr	r3, [r7, #0]
 801ef4c:	3308      	adds	r3, #8
 801ef4e:	ed93 7b00 	vldr	d7, [r3]
 801ef52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ef56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef5a:	d109      	bne.n	801ef70 <_ZN8BasicVQF9updateAccEPKd+0x40>
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	3310      	adds	r3, #16
 801ef60:	ed93 7b00 	vldr	d7, [r3]
 801ef64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef6c:	f000 809a 	beq.w	801f0a4 <_ZN8BasicVQF9updateAccEPKd+0x174>
    }

    vqf_real_t accEarth[3];

    // filter acc in inertial frame
    quatRotate(state.gyrQuat, acc, accEarth);
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	3310      	adds	r3, #16
 801ef74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801ef78:	6839      	ldr	r1, [r7, #0]
 801ef7a:	4618      	mov	r0, r3
 801ef7c:	f000 fa66 	bl	801f44c <_ZN8BasicVQF10quatRotateEPKdS1_Pd>
    filterVec(accEarth, 3, params.tauAcc, coeffs.accTs, coeffs.accLpB, coeffs.accLpA, state.accLpState, state.lastAccLp);
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	ed93 7b00 	vldr	d7, [r3]
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	f103 04d8 	add.w	r4, r3, #216	@ 0xd8
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	3370      	adds	r3, #112	@ 0x70
 801ef9c:	687a      	ldr	r2, [r7, #4]
 801ef9e:	3258      	adds	r2, #88	@ 0x58
 801efa0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801efa4:	9201      	str	r2, [sp, #4]
 801efa6:	9300      	str	r3, [sp, #0]
 801efa8:	4623      	mov	r3, r4
 801efaa:	460a      	mov	r2, r1
 801efac:	eeb0 1b46 	vmov.f64	d1, d6
 801efb0:	eeb0 0b47 	vmov.f64	d0, d7
 801efb4:	2103      	movs	r1, #3
 801efb6:	f000 fdfd 	bl	801fbb4 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_>

    // transform to 6D earth frame and normalize
    quatRotate(state.accQuat, state.lastAccLp, accEarth);
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	3358      	adds	r3, #88	@ 0x58
 801efc4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801efc8:	4619      	mov	r1, r3
 801efca:	f000 fa3f 	bl	801f44c <_ZN8BasicVQF10quatRotateEPKdS1_Pd>
    normalize(accEarth, 3);
 801efce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801efd2:	2103      	movs	r1, #3
 801efd4:	4618      	mov	r0, r3
 801efd6:	f000 fbb5 	bl	801f744 <_ZN8BasicVQF9normalizeEPdj>

    // inclination correction
    vqf_real_t accCorrQuat[4];
    vqf_real_t q_w = sqrt((accEarth[2]+1)/2);
 801efda:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 801efde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801efe2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801efe6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 801efea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801efee:	eeb0 0b46 	vmov.f64	d0, d6
 801eff2:	f003 f90d 	bl	8022210 <sqrt>
 801eff6:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    if (q_w > 1e-6) {
 801effa:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 801effe:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 801f0b0 <_ZN8BasicVQF9updateAccEPKd+0x180>
 801f002:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f00a:	dd22      	ble.n	801f052 <_ZN8BasicVQF9updateAccEPKd+0x122>
        accCorrQuat[0] = q_w;
 801f00c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801f010:	e9c7 2302 	strd	r2, r3, [r7, #8]
        accCorrQuat[1] = 0.5*accEarth[1]/q_w;
 801f014:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 801f018:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 801f01c:	ee27 5b06 	vmul.f64	d5, d7, d6
 801f020:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801f024:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f028:	ed87 7b04 	vstr	d7, [r7, #16]
        accCorrQuat[2] = -0.5*accEarth[0]/q_w;
 801f02c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f030:	eebe 6b00 	vmov.f64	d6, #224	@ 0xbf000000 -0.5
 801f034:	ee27 5b06 	vmul.f64	d5, d7, d6
 801f038:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 801f03c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f040:	ed87 7b06 	vstr	d7, [r7, #24]
        accCorrQuat[3] = 0;
 801f044:	f04f 0200 	mov.w	r2, #0
 801f048:	f04f 0300 	mov.w	r3, #0
 801f04c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801f050:	e016      	b.n	801f080 <_ZN8BasicVQF9updateAccEPKd+0x150>
    } else {
        // to avoid numeric issues when acc is close to [0 0 -1], i.e. the correction step is close (<= 0.00011°) to 180°:
        accCorrQuat[0] = 0;
 801f052:	f04f 0200 	mov.w	r2, #0
 801f056:	f04f 0300 	mov.w	r3, #0
 801f05a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        accCorrQuat[1] = 1;
 801f05e:	f04f 0200 	mov.w	r2, #0
 801f062:	4b15      	ldr	r3, [pc, #84]	@ (801f0b8 <_ZN8BasicVQF9updateAccEPKd+0x188>)
 801f064:	e9c7 2304 	strd	r2, r3, [r7, #16]
        accCorrQuat[2] = 0;
 801f068:	f04f 0200 	mov.w	r2, #0
 801f06c:	f04f 0300 	mov.w	r3, #0
 801f070:	e9c7 2306 	strd	r2, r3, [r7, #24]
        accCorrQuat[3] = 0;
 801f074:	f04f 0200 	mov.w	r2, #0
 801f078:	f04f 0300 	mov.w	r3, #0
 801f07c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    quatMultiply(accCorrQuat, state.accQuat, state.accQuat);
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f08c:	f107 0308 	add.w	r3, r7, #8
 801f090:	4618      	mov	r0, r3
 801f092:	f000 f8cf 	bl	801f234 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
    normalize(state.accQuat, 4);
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	3330      	adds	r3, #48	@ 0x30
 801f09a:	2104      	movs	r1, #4
 801f09c:	4618      	mov	r0, r3
 801f09e:	f000 fb51 	bl	801f744 <_ZN8BasicVQF9normalizeEPdj>
 801f0a2:	e000      	b.n	801f0a6 <_ZN8BasicVQF9updateAccEPKd+0x176>
        return;
 801f0a4:	bf00      	nop
}
 801f0a6:	374c      	adds	r7, #76	@ 0x4c
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd90      	pop	{r4, r7, pc}
 801f0ac:	f3af 8000 	nop.w
 801f0b0:	a0b5ed8d 	.word	0xa0b5ed8d
 801f0b4:	3eb0c6f7 	.word	0x3eb0c6f7
 801f0b8:	3ff00000 	.word	0x3ff00000

0801f0bc <_ZN8BasicVQF6updateEPKdS1_>:
        state.delta += vqf_real_t(2*M_PI);
    }
}

void BasicVQF::update(const vqf_real_t gyr[3], const vqf_real_t acc[3])
{
 801f0bc:	b580      	push	{r7, lr}
 801f0be:	b084      	sub	sp, #16
 801f0c0:	af00      	add	r7, sp, #0
 801f0c2:	60f8      	str	r0, [r7, #12]
 801f0c4:	60b9      	str	r1, [r7, #8]
 801f0c6:	607a      	str	r2, [r7, #4]
    updateGyr(gyr);
 801f0c8:	68b9      	ldr	r1, [r7, #8]
 801f0ca:	68f8      	ldr	r0, [r7, #12]
 801f0cc:	f7ff feb7 	bl	801ee3e <_ZN8BasicVQF9updateGyrEPKd>
    updateAcc(acc);
 801f0d0:	6879      	ldr	r1, [r7, #4]
 801f0d2:	68f8      	ldr	r0, [r7, #12]
 801f0d4:	f7ff ff2c 	bl	801ef30 <_ZN8BasicVQF9updateAccEPKd>
}
 801f0d8:	bf00      	nop
 801f0da:	3710      	adds	r7, #16
 801f0dc:	46bd      	mov	sp, r7
 801f0de:	bd80      	pop	{r7, pc}

0801f0e0 <_ZNK8BasicVQF9getQuat6DEPd>:
{
    std::copy(state.gyrQuat, state.gyrQuat+4, out);
}

void BasicVQF::getQuat6D(vqf_real_t out[4]) const
{
 801f0e0:	b580      	push	{r7, lr}
 801f0e2:	b082      	sub	sp, #8
 801f0e4:	af00      	add	r7, sp, #0
 801f0e6:	6078      	str	r0, [r7, #4]
 801f0e8:	6039      	str	r1, [r7, #0]
    quatMultiply(state.accQuat, state.gyrQuat, out);
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	3310      	adds	r3, #16
 801f0f4:	683a      	ldr	r2, [r7, #0]
 801f0f6:	4619      	mov	r1, r3
 801f0f8:	f000 f89c 	bl	801f234 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
}
 801f0fc:	bf00      	nop
 801f0fe:	3708      	adds	r7, #8
 801f100:	46bd      	mov	sp, r7
 801f102:	bd80      	pop	{r7, pc}

0801f104 <_ZN8BasicVQF9setTauAccEd>:
{
    return state.delta;
}

void BasicVQF::setTauAcc(vqf_real_t tauAcc)
{
 801f104:	b580      	push	{r7, lr}
 801f106:	b094      	sub	sp, #80	@ 0x50
 801f108:	af04      	add	r7, sp, #16
 801f10a:	60f8      	str	r0, [r7, #12]
 801f10c:	ed87 0b00 	vstr	d0, [r7]
    if (params.tauAcc == tauAcc) {
 801f110:	68fb      	ldr	r3, [r7, #12]
 801f112:	ed93 7b00 	vldr	d7, [r3]
 801f116:	ed97 6b00 	vldr	d6, [r7]
 801f11a:	eeb4 6b47 	vcmp.f64	d6, d7
 801f11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f122:	d041      	beq.n	801f1a8 <_ZN8BasicVQF9setTauAccEd+0xa4>
        return;
    }
    params.tauAcc = tauAcc;
 801f124:	68f9      	ldr	r1, [r7, #12]
 801f126:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f12a:	e9c1 2300 	strd	r2, r3, [r1]
    double newB[3];
    double newA[3];

    filterCoeffs(params.tauAcc, coeffs.accTs, newB, newA);
 801f12e:	68fb      	ldr	r3, [r7, #12]
 801f130:	ed93 7b00 	vldr	d7, [r3]
 801f134:	68fb      	ldr	r3, [r7, #12]
 801f136:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 801f13a:	f107 0210 	add.w	r2, r7, #16
 801f13e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801f142:	4611      	mov	r1, r2
 801f144:	4618      	mov	r0, r3
 801f146:	eeb0 1b46 	vmov.f64	d1, d6
 801f14a:	eeb0 0b47 	vmov.f64	d0, d7
 801f14e:	f000 fb93 	bl	801f878 <_ZN8BasicVQF12filterCoeffsEddPdS0_>
    filterAdaptStateForCoeffChange(state.lastAccLp, 3, coeffs.accLpB, coeffs.accLpA, newB, newA, state.accLpState);
 801f152:	68fb      	ldr	r3, [r7, #12]
 801f154:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	3370      	adds	r3, #112	@ 0x70
 801f168:	9302      	str	r3, [sp, #8]
 801f16a:	f107 0310 	add.w	r3, r7, #16
 801f16e:	9301      	str	r3, [sp, #4]
 801f170:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801f174:	9300      	str	r3, [sp, #0]
 801f176:	460b      	mov	r3, r1
 801f178:	2103      	movs	r1, #3
 801f17a:	f000 fc5f 	bl	801fa3c <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_>

    std::copy(newB, newB+3, coeffs.accLpB);
 801f17e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801f182:	3318      	adds	r3, #24
 801f184:	68fa      	ldr	r2, [r7, #12]
 801f186:	32c0      	adds	r2, #192	@ 0xc0
 801f188:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801f18c:	4619      	mov	r1, r3
 801f18e:	f000 fe55 	bl	801fe3c <_ZSt4copyIPdS0_ET0_T_S2_S1_>
    std::copy(newA, newA+2, coeffs.accLpA);
 801f192:	f107 0310 	add.w	r3, r7, #16
 801f196:	3310      	adds	r3, #16
 801f198:	68fa      	ldr	r2, [r7, #12]
 801f19a:	32d8      	adds	r2, #216	@ 0xd8
 801f19c:	f107 0010 	add.w	r0, r7, #16
 801f1a0:	4619      	mov	r1, r3
 801f1a2:	f000 fe4b 	bl	801fe3c <_ZSt4copyIPdS0_ET0_T_S2_S1_>
 801f1a6:	e000      	b.n	801f1aa <_ZN8BasicVQF9setTauAccEd+0xa6>
        return;
 801f1a8:	bf00      	nop
}
 801f1aa:	3740      	adds	r7, #64	@ 0x40
 801f1ac:	46bd      	mov	sp, r7
 801f1ae:	bd80      	pop	{r7, pc}

0801f1b0 <_ZN8BasicVQF10resetStateEv>:
{
    this->state = state;
}

void BasicVQF::resetState()
{
 801f1b0:	b5b0      	push	{r4, r5, r7, lr}
 801f1b2:	b086      	sub	sp, #24
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	6078      	str	r0, [r7, #4]
    quatSetToIdentity(state.gyrQuat);
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	3310      	adds	r3, #16
 801f1bc:	4618      	mov	r0, r3
 801f1be:	f000 f917 	bl	801f3f0 <_ZN8BasicVQF17quatSetToIdentityEPd>
    quatSetToIdentity(state.accQuat);
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	3330      	adds	r3, #48	@ 0x30
 801f1c6:	4618      	mov	r0, r3
 801f1c8:	f000 f912 	bl	801f3f0 <_ZN8BasicVQF17quatSetToIdentityEPd>
    state.delta = 0.0;
 801f1cc:	6879      	ldr	r1, [r7, #4]
 801f1ce:	f04f 0200 	mov.w	r2, #0
 801f1d2:	f04f 0300 	mov.w	r3, #0
 801f1d6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

    std::fill(state.lastAccLp, state.lastAccLp+3, 0);
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	3358      	adds	r3, #88	@ 0x58
 801f1e4:	3318      	adds	r3, #24
 801f1e6:	2200      	movs	r2, #0
 801f1e8:	60fa      	str	r2, [r7, #12]
 801f1ea:	f107 020c 	add.w	r2, r7, #12
 801f1ee:	4619      	mov	r1, r3
 801f1f0:	f000 fe3c 	bl	801fe6c <_ZSt4fillIPdiEvT_S1_RKT0_>
    std::fill(state.accLpState, state.accLpState + 3*2, NaN);
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	3370      	adds	r3, #112	@ 0x70
 801f1fe:	f103 0530 	add.w	r5, r3, #48	@ 0x30
 801f202:	f7ff fd9b 	bl	801ed3c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 801f206:	eeb0 7b40 	vmov.f64	d7, d0
 801f20a:	ed87 7b04 	vstr	d7, [r7, #16]
 801f20e:	f107 0310 	add.w	r3, r7, #16
 801f212:	461a      	mov	r2, r3
 801f214:	4629      	mov	r1, r5
 801f216:	4620      	mov	r0, r4
 801f218:	f000 fe37 	bl	801fe8a <_ZSt4fillIPddEvT_S1_RKT0_>

    state.kMagInit = 1.0;
 801f21c:	6879      	ldr	r1, [r7, #4]
 801f21e:	f04f 0200 	mov.w	r2, #0
 801f222:	4b03      	ldr	r3, [pc, #12]	@ (801f230 <_ZN8BasicVQF10resetStateEv+0x80>)
 801f224:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
}
 801f228:	bf00      	nop
 801f22a:	3718      	adds	r7, #24
 801f22c:	46bd      	mov	sp, r7
 801f22e:	bdb0      	pop	{r4, r5, r7, pc}
 801f230:	3ff00000 	.word	0x3ff00000

0801f234 <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>:

void BasicVQF::quatMultiply(const vqf_real_t q1[4], const vqf_real_t q2[4], vqf_real_t out[4])
{
 801f234:	b480      	push	{r7}
 801f236:	b08d      	sub	sp, #52	@ 0x34
 801f238:	af00      	add	r7, sp, #0
 801f23a:	60f8      	str	r0, [r7, #12]
 801f23c:	60b9      	str	r1, [r7, #8]
 801f23e:	607a      	str	r2, [r7, #4]
    vqf_real_t w = q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3];
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	ed93 6b00 	vldr	d6, [r3]
 801f246:	68bb      	ldr	r3, [r7, #8]
 801f248:	ed93 7b00 	vldr	d7, [r3]
 801f24c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	3308      	adds	r3, #8
 801f254:	ed93 5b00 	vldr	d5, [r3]
 801f258:	68bb      	ldr	r3, [r7, #8]
 801f25a:	3308      	adds	r3, #8
 801f25c:	ed93 7b00 	vldr	d7, [r3]
 801f260:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f264:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f268:	68fb      	ldr	r3, [r7, #12]
 801f26a:	3310      	adds	r3, #16
 801f26c:	ed93 5b00 	vldr	d5, [r3]
 801f270:	68bb      	ldr	r3, [r7, #8]
 801f272:	3310      	adds	r3, #16
 801f274:	ed93 7b00 	vldr	d7, [r3]
 801f278:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f27c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f280:	68fb      	ldr	r3, [r7, #12]
 801f282:	3318      	adds	r3, #24
 801f284:	ed93 5b00 	vldr	d5, [r3]
 801f288:	68bb      	ldr	r3, [r7, #8]
 801f28a:	3318      	adds	r3, #24
 801f28c:	ed93 7b00 	vldr	d7, [r3]
 801f290:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f294:	ee36 7b47 	vsub.f64	d7, d6, d7
 801f298:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vqf_real_t x = q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2];
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	ed93 6b00 	vldr	d6, [r3]
 801f2a2:	68bb      	ldr	r3, [r7, #8]
 801f2a4:	3308      	adds	r3, #8
 801f2a6:	ed93 7b00 	vldr	d7, [r3]
 801f2aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	3308      	adds	r3, #8
 801f2b2:	ed93 5b00 	vldr	d5, [r3]
 801f2b6:	68bb      	ldr	r3, [r7, #8]
 801f2b8:	ed93 7b00 	vldr	d7, [r3]
 801f2bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f2c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	3310      	adds	r3, #16
 801f2c8:	ed93 5b00 	vldr	d5, [r3]
 801f2cc:	68bb      	ldr	r3, [r7, #8]
 801f2ce:	3318      	adds	r3, #24
 801f2d0:	ed93 7b00 	vldr	d7, [r3]
 801f2d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f2d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	3318      	adds	r3, #24
 801f2e0:	ed93 5b00 	vldr	d5, [r3]
 801f2e4:	68bb      	ldr	r3, [r7, #8]
 801f2e6:	3310      	adds	r3, #16
 801f2e8:	ed93 7b00 	vldr	d7, [r3]
 801f2ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f2f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 801f2f4:	ed87 7b08 	vstr	d7, [r7, #32]
    vqf_real_t y = q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1];
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	ed93 6b00 	vldr	d6, [r3]
 801f2fe:	68bb      	ldr	r3, [r7, #8]
 801f300:	3310      	adds	r3, #16
 801f302:	ed93 7b00 	vldr	d7, [r3]
 801f306:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f30a:	68fb      	ldr	r3, [r7, #12]
 801f30c:	3308      	adds	r3, #8
 801f30e:	ed93 5b00 	vldr	d5, [r3]
 801f312:	68bb      	ldr	r3, [r7, #8]
 801f314:	3318      	adds	r3, #24
 801f316:	ed93 7b00 	vldr	d7, [r3]
 801f31a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f31e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	3310      	adds	r3, #16
 801f326:	ed93 5b00 	vldr	d5, [r3]
 801f32a:	68bb      	ldr	r3, [r7, #8]
 801f32c:	ed93 7b00 	vldr	d7, [r3]
 801f330:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f334:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	3318      	adds	r3, #24
 801f33c:	ed93 5b00 	vldr	d5, [r3]
 801f340:	68bb      	ldr	r3, [r7, #8]
 801f342:	3308      	adds	r3, #8
 801f344:	ed93 7b00 	vldr	d7, [r3]
 801f348:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f34c:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f350:	ed87 7b06 	vstr	d7, [r7, #24]
    vqf_real_t z = q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0];
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	ed93 6b00 	vldr	d6, [r3]
 801f35a:	68bb      	ldr	r3, [r7, #8]
 801f35c:	3318      	adds	r3, #24
 801f35e:	ed93 7b00 	vldr	d7, [r3]
 801f362:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	3308      	adds	r3, #8
 801f36a:	ed93 5b00 	vldr	d5, [r3]
 801f36e:	68bb      	ldr	r3, [r7, #8]
 801f370:	3310      	adds	r3, #16
 801f372:	ed93 7b00 	vldr	d7, [r3]
 801f376:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f37a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	3310      	adds	r3, #16
 801f382:	ed93 5b00 	vldr	d5, [r3]
 801f386:	68bb      	ldr	r3, [r7, #8]
 801f388:	3308      	adds	r3, #8
 801f38a:	ed93 7b00 	vldr	d7, [r3]
 801f38e:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f392:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	3318      	adds	r3, #24
 801f39a:	ed93 5b00 	vldr	d5, [r3]
 801f39e:	68bb      	ldr	r3, [r7, #8]
 801f3a0:	ed93 7b00 	vldr	d7, [r3]
 801f3a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f3a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f3ac:	ed87 7b04 	vstr	d7, [r7, #16]
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
 801f3b0:	6879      	ldr	r1, [r7, #4]
 801f3b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801f3b6:	e9c1 2300 	strd	r2, r3, [r1]
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	f103 0108 	add.w	r1, r3, #8
 801f3c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f3c4:	e9c1 2300 	strd	r2, r3, [r1]
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	f103 0110 	add.w	r1, r3, #16
 801f3ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f3d2:	e9c1 2300 	strd	r2, r3, [r1]
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	f103 0118 	add.w	r1, r3, #24
 801f3dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f3e0:	e9c1 2300 	strd	r2, r3, [r1]
}
 801f3e4:	bf00      	nop
 801f3e6:	3734      	adds	r7, #52	@ 0x34
 801f3e8:	46bd      	mov	sp, r7
 801f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ee:	4770      	bx	lr

0801f3f0 <_ZN8BasicVQF17quatSetToIdentityEPd>:
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
}


void BasicVQF::quatSetToIdentity(vqf_real_t out[4])
{
 801f3f0:	b480      	push	{r7}
 801f3f2:	b083      	sub	sp, #12
 801f3f4:	af00      	add	r7, sp, #0
 801f3f6:	6078      	str	r0, [r7, #4]
    out[0] = 1;
 801f3f8:	6879      	ldr	r1, [r7, #4]
 801f3fa:	f04f 0200 	mov.w	r2, #0
 801f3fe:	4b12      	ldr	r3, [pc, #72]	@ (801f448 <_ZN8BasicVQF17quatSetToIdentityEPd+0x58>)
 801f400:	e9c1 2300 	strd	r2, r3, [r1]
    out[1] = 0;
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	f103 0108 	add.w	r1, r3, #8
 801f40a:	f04f 0200 	mov.w	r2, #0
 801f40e:	f04f 0300 	mov.w	r3, #0
 801f412:	e9c1 2300 	strd	r2, r3, [r1]
    out[2] = 0;
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	f103 0110 	add.w	r1, r3, #16
 801f41c:	f04f 0200 	mov.w	r2, #0
 801f420:	f04f 0300 	mov.w	r3, #0
 801f424:	e9c1 2300 	strd	r2, r3, [r1]
    out[3] = 0;
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	f103 0118 	add.w	r1, r3, #24
 801f42e:	f04f 0200 	mov.w	r2, #0
 801f432:	f04f 0300 	mov.w	r3, #0
 801f436:	e9c1 2300 	strd	r2, r3, [r1]
}
 801f43a:	bf00      	nop
 801f43c:	370c      	adds	r7, #12
 801f43e:	46bd      	mov	sp, r7
 801f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f444:	4770      	bx	lr
 801f446:	bf00      	nop
 801f448:	3ff00000 	.word	0x3ff00000

0801f44c <_ZN8BasicVQF10quatRotateEPKdS1_Pd>:
    vqf_real_t z = c * q[3] + s * q[0];
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
}

void BasicVQF::quatRotate(const vqf_real_t q[4], const vqf_real_t v[3], vqf_real_t out[3])
{
 801f44c:	b480      	push	{r7}
 801f44e:	b08b      	sub	sp, #44	@ 0x2c
 801f450:	af00      	add	r7, sp, #0
 801f452:	60f8      	str	r0, [r7, #12]
 801f454:	60b9      	str	r1, [r7, #8]
 801f456:	607a      	str	r2, [r7, #4]
    vqf_real_t x = (1 - 2*q[2]*q[2] - 2*q[3]*q[3])*v[0] + 2*v[1]*(q[2]*q[1] - q[0]*q[3]) + 2*v[2]*(q[0]*q[2] + q[3]*q[1]);
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	3310      	adds	r3, #16
 801f45c:	ed93 7b00 	vldr	d7, [r3]
 801f460:	ee37 6b07 	vadd.f64	d6, d7, d7
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	3310      	adds	r3, #16
 801f468:	ed93 7b00 	vldr	d7, [r3]
 801f46c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f470:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801f474:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f478:	68fb      	ldr	r3, [r7, #12]
 801f47a:	3318      	adds	r3, #24
 801f47c:	ed93 7b00 	vldr	d7, [r3]
 801f480:	ee37 5b07 	vadd.f64	d5, d7, d7
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	3318      	adds	r3, #24
 801f488:	ed93 7b00 	vldr	d7, [r3]
 801f48c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f490:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f494:	68bb      	ldr	r3, [r7, #8]
 801f496:	ed93 7b00 	vldr	d7, [r3]
 801f49a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f49e:	68bb      	ldr	r3, [r7, #8]
 801f4a0:	3308      	adds	r3, #8
 801f4a2:	ed93 7b00 	vldr	d7, [r3]
 801f4a6:	ee37 5b07 	vadd.f64	d5, d7, d7
 801f4aa:	68fb      	ldr	r3, [r7, #12]
 801f4ac:	3310      	adds	r3, #16
 801f4ae:	ed93 4b00 	vldr	d4, [r3]
 801f4b2:	68fb      	ldr	r3, [r7, #12]
 801f4b4:	3308      	adds	r3, #8
 801f4b6:	ed93 7b00 	vldr	d7, [r3]
 801f4ba:	ee24 4b07 	vmul.f64	d4, d4, d7
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	ed93 3b00 	vldr	d3, [r3]
 801f4c4:	68fb      	ldr	r3, [r7, #12]
 801f4c6:	3318      	adds	r3, #24
 801f4c8:	ed93 7b00 	vldr	d7, [r3]
 801f4cc:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f4d0:	ee34 7b47 	vsub.f64	d7, d4, d7
 801f4d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f4d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f4dc:	68bb      	ldr	r3, [r7, #8]
 801f4de:	3310      	adds	r3, #16
 801f4e0:	ed93 7b00 	vldr	d7, [r3]
 801f4e4:	ee37 5b07 	vadd.f64	d5, d7, d7
 801f4e8:	68fb      	ldr	r3, [r7, #12]
 801f4ea:	ed93 4b00 	vldr	d4, [r3]
 801f4ee:	68fb      	ldr	r3, [r7, #12]
 801f4f0:	3310      	adds	r3, #16
 801f4f2:	ed93 7b00 	vldr	d7, [r3]
 801f4f6:	ee24 4b07 	vmul.f64	d4, d4, d7
 801f4fa:	68fb      	ldr	r3, [r7, #12]
 801f4fc:	3318      	adds	r3, #24
 801f4fe:	ed93 3b00 	vldr	d3, [r3]
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	3308      	adds	r3, #8
 801f506:	ed93 7b00 	vldr	d7, [r3]
 801f50a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f50e:	ee34 7b07 	vadd.f64	d7, d4, d7
 801f512:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f516:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f51a:	ed87 7b08 	vstr	d7, [r7, #32]
    vqf_real_t y = 2*v[0]*(q[0]*q[3] + q[2]*q[1]) + v[1]*(1 - 2*q[1]*q[1] - 2*q[3]*q[3]) + 2*v[2]*(q[2]*q[3] - q[1]*q[0]);
 801f51e:	68bb      	ldr	r3, [r7, #8]
 801f520:	ed93 7b00 	vldr	d7, [r3]
 801f524:	ee37 6b07 	vadd.f64	d6, d7, d7
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	ed93 5b00 	vldr	d5, [r3]
 801f52e:	68fb      	ldr	r3, [r7, #12]
 801f530:	3318      	adds	r3, #24
 801f532:	ed93 7b00 	vldr	d7, [r3]
 801f536:	ee25 5b07 	vmul.f64	d5, d5, d7
 801f53a:	68fb      	ldr	r3, [r7, #12]
 801f53c:	3310      	adds	r3, #16
 801f53e:	ed93 4b00 	vldr	d4, [r3]
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	3308      	adds	r3, #8
 801f546:	ed93 7b00 	vldr	d7, [r3]
 801f54a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f54e:	ee35 7b07 	vadd.f64	d7, d5, d7
 801f552:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f556:	68bb      	ldr	r3, [r7, #8]
 801f558:	3308      	adds	r3, #8
 801f55a:	ed93 5b00 	vldr	d5, [r3]
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	3308      	adds	r3, #8
 801f562:	ed93 7b00 	vldr	d7, [r3]
 801f566:	ee37 4b07 	vadd.f64	d4, d7, d7
 801f56a:	68fb      	ldr	r3, [r7, #12]
 801f56c:	3308      	adds	r3, #8
 801f56e:	ed93 7b00 	vldr	d7, [r3]
 801f572:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f576:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 801f57a:	ee34 4b47 	vsub.f64	d4, d4, d7
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	3318      	adds	r3, #24
 801f582:	ed93 7b00 	vldr	d7, [r3]
 801f586:	ee37 3b07 	vadd.f64	d3, d7, d7
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	3318      	adds	r3, #24
 801f58e:	ed93 7b00 	vldr	d7, [r3]
 801f592:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f596:	ee34 7b47 	vsub.f64	d7, d4, d7
 801f59a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f59e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f5a2:	68bb      	ldr	r3, [r7, #8]
 801f5a4:	3310      	adds	r3, #16
 801f5a6:	ed93 7b00 	vldr	d7, [r3]
 801f5aa:	ee37 5b07 	vadd.f64	d5, d7, d7
 801f5ae:	68fb      	ldr	r3, [r7, #12]
 801f5b0:	3310      	adds	r3, #16
 801f5b2:	ed93 4b00 	vldr	d4, [r3]
 801f5b6:	68fb      	ldr	r3, [r7, #12]
 801f5b8:	3318      	adds	r3, #24
 801f5ba:	ed93 7b00 	vldr	d7, [r3]
 801f5be:	ee24 4b07 	vmul.f64	d4, d4, d7
 801f5c2:	68fb      	ldr	r3, [r7, #12]
 801f5c4:	3308      	adds	r3, #8
 801f5c6:	ed93 3b00 	vldr	d3, [r3]
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	ed93 7b00 	vldr	d7, [r3]
 801f5d0:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f5d4:	ee34 7b47 	vsub.f64	d7, d4, d7
 801f5d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f5dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f5e0:	ed87 7b06 	vstr	d7, [r7, #24]
    vqf_real_t z = 2*v[0]*(q[3]*q[1] - q[0]*q[2]) + 2*v[1]*(q[0]*q[1] + q[3]*q[2]) + v[2]*(1 - 2*q[1]*q[1] - 2*q[2]*q[2]);
 801f5e4:	68bb      	ldr	r3, [r7, #8]
 801f5e6:	ed93 7b00 	vldr	d7, [r3]
 801f5ea:	ee37 6b07 	vadd.f64	d6, d7, d7
 801f5ee:	68fb      	ldr	r3, [r7, #12]
 801f5f0:	3318      	adds	r3, #24
 801f5f2:	ed93 5b00 	vldr	d5, [r3]
 801f5f6:	68fb      	ldr	r3, [r7, #12]
 801f5f8:	3308      	adds	r3, #8
 801f5fa:	ed93 7b00 	vldr	d7, [r3]
 801f5fe:	ee25 5b07 	vmul.f64	d5, d5, d7
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	ed93 4b00 	vldr	d4, [r3]
 801f608:	68fb      	ldr	r3, [r7, #12]
 801f60a:	3310      	adds	r3, #16
 801f60c:	ed93 7b00 	vldr	d7, [r3]
 801f610:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f614:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f618:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f61c:	68bb      	ldr	r3, [r7, #8]
 801f61e:	3308      	adds	r3, #8
 801f620:	ed93 7b00 	vldr	d7, [r3]
 801f624:	ee37 5b07 	vadd.f64	d5, d7, d7
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	ed93 4b00 	vldr	d4, [r3]
 801f62e:	68fb      	ldr	r3, [r7, #12]
 801f630:	3308      	adds	r3, #8
 801f632:	ed93 7b00 	vldr	d7, [r3]
 801f636:	ee24 4b07 	vmul.f64	d4, d4, d7
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	3318      	adds	r3, #24
 801f63e:	ed93 3b00 	vldr	d3, [r3]
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	3310      	adds	r3, #16
 801f646:	ed93 7b00 	vldr	d7, [r3]
 801f64a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f64e:	ee34 7b07 	vadd.f64	d7, d4, d7
 801f652:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f656:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f65a:	68bb      	ldr	r3, [r7, #8]
 801f65c:	3310      	adds	r3, #16
 801f65e:	ed93 5b00 	vldr	d5, [r3]
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	3308      	adds	r3, #8
 801f666:	ed93 7b00 	vldr	d7, [r3]
 801f66a:	ee37 4b07 	vadd.f64	d4, d7, d7
 801f66e:	68fb      	ldr	r3, [r7, #12]
 801f670:	3308      	adds	r3, #8
 801f672:	ed93 7b00 	vldr	d7, [r3]
 801f676:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f67a:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 801f67e:	ee34 4b47 	vsub.f64	d4, d4, d7
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	3310      	adds	r3, #16
 801f686:	ed93 7b00 	vldr	d7, [r3]
 801f68a:	ee37 3b07 	vadd.f64	d3, d7, d7
 801f68e:	68fb      	ldr	r3, [r7, #12]
 801f690:	3310      	adds	r3, #16
 801f692:	ed93 7b00 	vldr	d7, [r3]
 801f696:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f69a:	ee34 7b47 	vsub.f64	d7, d4, d7
 801f69e:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f6a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f6a6:	ed87 7b04 	vstr	d7, [r7, #16]
    out[0] = x; out[1] = y; out[2] = z;
 801f6aa:	6879      	ldr	r1, [r7, #4]
 801f6ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f6b0:	e9c1 2300 	strd	r2, r3, [r1]
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	f103 0108 	add.w	r1, r3, #8
 801f6ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f6be:	e9c1 2300 	strd	r2, r3, [r1]
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	f103 0110 	add.w	r1, r3, #16
 801f6c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f6cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 801f6d0:	bf00      	nop
 801f6d2:	372c      	adds	r7, #44	@ 0x2c
 801f6d4:	46bd      	mov	sp, r7
 801f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6da:	4770      	bx	lr

0801f6dc <_ZN8BasicVQF4normEPKdj>:

vqf_real_t BasicVQF::norm(const vqf_real_t vec[], size_t N)
{
 801f6dc:	b580      	push	{r7, lr}
 801f6de:	b086      	sub	sp, #24
 801f6e0:	af00      	add	r7, sp, #0
 801f6e2:	6078      	str	r0, [r7, #4]
 801f6e4:	6039      	str	r1, [r7, #0]
    vqf_real_t s = 0;
 801f6e6:	f04f 0200 	mov.w	r2, #0
 801f6ea:	f04f 0300 	mov.w	r3, #0
 801f6ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(size_t i = 0; i < N; i++) {
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	60fb      	str	r3, [r7, #12]
 801f6f6:	e016      	b.n	801f726 <_ZN8BasicVQF4normEPKdj+0x4a>
        s += vec[i]*vec[i];
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	00db      	lsls	r3, r3, #3
 801f6fc:	687a      	ldr	r2, [r7, #4]
 801f6fe:	4413      	add	r3, r2
 801f700:	ed93 6b00 	vldr	d6, [r3]
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	00db      	lsls	r3, r3, #3
 801f708:	687a      	ldr	r2, [r7, #4]
 801f70a:	4413      	add	r3, r2
 801f70c:	ed93 7b00 	vldr	d7, [r3]
 801f710:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f714:	ed97 6b04 	vldr	d6, [r7, #16]
 801f718:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f71c:	ed87 7b04 	vstr	d7, [r7, #16]
    for(size_t i = 0; i < N; i++) {
 801f720:	68fb      	ldr	r3, [r7, #12]
 801f722:	3301      	adds	r3, #1
 801f724:	60fb      	str	r3, [r7, #12]
 801f726:	68fa      	ldr	r2, [r7, #12]
 801f728:	683b      	ldr	r3, [r7, #0]
 801f72a:	429a      	cmp	r2, r3
 801f72c:	d3e4      	bcc.n	801f6f8 <_ZN8BasicVQF4normEPKdj+0x1c>
    }
    return sqrt(s);
 801f72e:	ed97 0b04 	vldr	d0, [r7, #16]
 801f732:	f002 fd6d 	bl	8022210 <sqrt>
 801f736:	eeb0 7b40 	vmov.f64	d7, d0
}
 801f73a:	eeb0 0b47 	vmov.f64	d0, d7
 801f73e:	3718      	adds	r7, #24
 801f740:	46bd      	mov	sp, r7
 801f742:	bd80      	pop	{r7, pc}

0801f744 <_ZN8BasicVQF9normalizeEPdj>:

void BasicVQF::normalize(vqf_real_t vec[], size_t N)
{
 801f744:	b580      	push	{r7, lr}
 801f746:	b086      	sub	sp, #24
 801f748:	af00      	add	r7, sp, #0
 801f74a:	6078      	str	r0, [r7, #4]
 801f74c:	6039      	str	r1, [r7, #0]
    vqf_real_t n = norm(vec, N);
 801f74e:	6839      	ldr	r1, [r7, #0]
 801f750:	6878      	ldr	r0, [r7, #4]
 801f752:	f7ff ffc3 	bl	801f6dc <_ZN8BasicVQF4normEPKdj>
 801f756:	ed87 0b02 	vstr	d0, [r7, #8]
    if (n < EPS) {
 801f75a:	f7ff fadf 	bl	801ed1c <_ZNSt14numeric_limitsIdE7epsilonEv>
 801f75e:	eeb0 6b40 	vmov.f64	d6, d0
 801f762:	ed97 7b02 	vldr	d7, [r7, #8]
 801f766:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f76e:	bf4c      	ite	mi
 801f770:	2301      	movmi	r3, #1
 801f772:	2300      	movpl	r3, #0
 801f774:	b2db      	uxtb	r3, r3
 801f776:	2b00      	cmp	r3, #0
 801f778:	d11a      	bne.n	801f7b0 <_ZN8BasicVQF9normalizeEPdj+0x6c>
        return;
    }
    for(size_t i = 0; i < N; i++) {
 801f77a:	2300      	movs	r3, #0
 801f77c:	617b      	str	r3, [r7, #20]
 801f77e:	e012      	b.n	801f7a6 <_ZN8BasicVQF9normalizeEPdj+0x62>
        vec[i] /= n;
 801f780:	697b      	ldr	r3, [r7, #20]
 801f782:	00db      	lsls	r3, r3, #3
 801f784:	687a      	ldr	r2, [r7, #4]
 801f786:	4413      	add	r3, r2
 801f788:	ed93 5b00 	vldr	d5, [r3]
 801f78c:	697b      	ldr	r3, [r7, #20]
 801f78e:	00db      	lsls	r3, r3, #3
 801f790:	687a      	ldr	r2, [r7, #4]
 801f792:	4413      	add	r3, r2
 801f794:	ed97 6b02 	vldr	d6, [r7, #8]
 801f798:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f79c:	ed83 7b00 	vstr	d7, [r3]
    for(size_t i = 0; i < N; i++) {
 801f7a0:	697b      	ldr	r3, [r7, #20]
 801f7a2:	3301      	adds	r3, #1
 801f7a4:	617b      	str	r3, [r7, #20]
 801f7a6:	697a      	ldr	r2, [r7, #20]
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	429a      	cmp	r2, r3
 801f7ac:	d3e8      	bcc.n	801f780 <_ZN8BasicVQF9normalizeEPdj+0x3c>
 801f7ae:	e000      	b.n	801f7b2 <_ZN8BasicVQF9normalizeEPdj+0x6e>
        return;
 801f7b0:	bf00      	nop
    }
}
 801f7b2:	3718      	adds	r7, #24
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd80      	pop	{r7, pc}

0801f7b8 <_ZN8BasicVQF11gainFromTauEdd>:
        }
    }
}

vqf_real_t BasicVQF::gainFromTau(vqf_real_t tau, vqf_real_t Ts)
{
 801f7b8:	b580      	push	{r7, lr}
 801f7ba:	b084      	sub	sp, #16
 801f7bc:	af00      	add	r7, sp, #0
 801f7be:	ed87 0b02 	vstr	d0, [r7, #8]
 801f7c2:	ed87 1b00 	vstr	d1, [r7]
    assert(Ts > 0);
 801f7c6:	ed97 7b00 	vldr	d7, [r7]
 801f7ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7d2:	dc06      	bgt.n	801f7e2 <_ZN8BasicVQF11gainFromTauEdd+0x2a>
 801f7d4:	4b1a      	ldr	r3, [pc, #104]	@ (801f840 <_ZN8BasicVQF11gainFromTauEdd+0x88>)
 801f7d6:	4a1b      	ldr	r2, [pc, #108]	@ (801f844 <_ZN8BasicVQF11gainFromTauEdd+0x8c>)
 801f7d8:	f240 1151 	movw	r1, #337	@ 0x151
 801f7dc:	481a      	ldr	r0, [pc, #104]	@ (801f848 <_ZN8BasicVQF11gainFromTauEdd+0x90>)
 801f7de:	f003 fe1f 	bl	8023420 <__assert_func>
    if (tau < vqf_real_t(0.0)) {
 801f7e2:	ed97 7b02 	vldr	d7, [r7, #8]
 801f7e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ee:	d502      	bpl.n	801f7f6 <_ZN8BasicVQF11gainFromTauEdd+0x3e>
        return 0; // k=0 for negative tau (disable update)
 801f7f0:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 801f838 <_ZN8BasicVQF11gainFromTauEdd+0x80>
 801f7f4:	e01b      	b.n	801f82e <_ZN8BasicVQF11gainFromTauEdd+0x76>
    } else if (tau == vqf_real_t(0.0)) {
 801f7f6:	ed97 7b02 	vldr	d7, [r7, #8]
 801f7fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f802:	d102      	bne.n	801f80a <_ZN8BasicVQF11gainFromTauEdd+0x52>
        return 1; // k=1 for tau=0
 801f804:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801f808:	e011      	b.n	801f82e <_ZN8BasicVQF11gainFromTauEdd+0x76>
    } else {
        return 1 - exp(-Ts/tau);  // fc = 1/(2*pi*tau)
 801f80a:	ed97 7b00 	vldr	d7, [r7]
 801f80e:	eeb1 6b47 	vneg.f64	d6, d7
 801f812:	ed97 7b02 	vldr	d7, [r7, #8]
 801f816:	ee86 5b07 	vdiv.f64	d5, d6, d7
 801f81a:	eeb0 0b45 	vmov.f64	d0, d5
 801f81e:	f002 fbd3 	bl	8021fc8 <exp>
 801f822:	eeb0 7b40 	vmov.f64	d7, d0
 801f826:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801f82a:	ee36 7b47 	vsub.f64	d7, d6, d7
    }
}
 801f82e:	eeb0 0b47 	vmov.f64	d0, d7
 801f832:	3710      	adds	r7, #16
 801f834:	46bd      	mov	sp, r7
 801f836:	bd80      	pop	{r7, pc}
	...
 801f840:	08025e8c 	.word	0x08025e8c
 801f844:	08025e94 	.word	0x08025e94
 801f848:	08025ed4 	.word	0x08025ed4

0801f84c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 801f84c:	b580      	push	{r7, lr}
 801f84e:	b082      	sub	sp, #8
 801f850:	af00      	add	r7, sp, #0
 801f852:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	ee07 3a90 	vmov	s15, r3
 801f85a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f85e:	eeb0 0b47 	vmov.f64	d0, d7
 801f862:	f002 fcd5 	bl	8022210 <sqrt>
 801f866:	eeb0 7b40 	vmov.f64	d7, d0
 801f86a:	eeb0 0b47 	vmov.f64	d0, d7
 801f86e:	3708      	adds	r7, #8
 801f870:	46bd      	mov	sp, r7
 801f872:	bd80      	pop	{r7, pc}
 801f874:	0000      	movs	r0, r0
	...

0801f878 <_ZN8BasicVQF12filterCoeffsEddPdS0_>:

void BasicVQF::filterCoeffs(vqf_real_t tau, vqf_real_t Ts, double outB[], double outA[])
{
 801f878:	b580      	push	{r7, lr}
 801f87a:	ed2d 8b02 	vpush	{d8}
 801f87e:	b08e      	sub	sp, #56	@ 0x38
 801f880:	af00      	add	r7, sp, #0
 801f882:	ed87 0b04 	vstr	d0, [r7, #16]
 801f886:	ed87 1b02 	vstr	d1, [r7, #8]
 801f88a:	6078      	str	r0, [r7, #4]
 801f88c:	6039      	str	r1, [r7, #0]
    assert(tau > 0);
 801f88e:	ed97 7b04 	vldr	d7, [r7, #16]
 801f892:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f89a:	dc06      	bgt.n	801f8aa <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x32>
 801f89c:	4b4c      	ldr	r3, [pc, #304]	@ (801f9d0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x158>)
 801f89e:	4a4d      	ldr	r2, [pc, #308]	@ (801f9d4 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x15c>)
 801f8a0:	f240 115d 	movw	r1, #349	@ 0x15d
 801f8a4:	484c      	ldr	r0, [pc, #304]	@ (801f9d8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x160>)
 801f8a6:	f003 fdbb 	bl	8023420 <__assert_func>
    assert(Ts > 0);
 801f8aa:	ed97 7b02 	vldr	d7, [r7, #8]
 801f8ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8b6:	dc06      	bgt.n	801f8c6 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x4e>
 801f8b8:	4b48      	ldr	r3, [pc, #288]	@ (801f9dc <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x164>)
 801f8ba:	4a46      	ldr	r2, [pc, #280]	@ (801f9d4 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x15c>)
 801f8bc:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 801f8c0:	4845      	ldr	r0, [pc, #276]	@ (801f9d8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x160>)
 801f8c2:	f003 fdad 	bl	8023420 <__assert_func>
    // second order Butterworth filter based on https://stackoverflow.com/a/52764064
    double fc = (M_SQRT2 / (2.0*M_PI))/double(tau); // time constant of dampened, non-oscillating part of step response
 801f8c6:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 801f9c0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x148>
 801f8ca:	ed97 6b04 	vldr	d6, [r7, #16]
 801f8ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f8d2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    double C = tan(M_PI*fc*double(Ts));
 801f8d6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 801f8da:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801f9c8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x150>
 801f8de:	ee27 6b06 	vmul.f64	d6, d7, d6
 801f8e2:	ed97 7b02 	vldr	d7, [r7, #8]
 801f8e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f8ea:	eeb0 0b47 	vmov.f64	d0, d7
 801f8ee:	f002 fd57 	bl	80223a0 <tan>
 801f8f2:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    double D = C*C + sqrt(2)*C + 1;
 801f8f6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f8fa:	ee27 8b07 	vmul.f64	d8, d7, d7
 801f8fe:	2002      	movs	r0, #2
 801f900:	f7ff ffa4 	bl	801f84c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 801f904:	eeb0 6b40 	vmov.f64	d6, d0
 801f908:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f90c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f910:	ee38 7b07 	vadd.f64	d7, d8, d7
 801f914:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801f918:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f91c:	ed87 7b08 	vstr	d7, [r7, #32]
    double b0 = C*C/D;
 801f920:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f924:	ee27 5b07 	vmul.f64	d5, d7, d7
 801f928:	ed97 6b08 	vldr	d6, [r7, #32]
 801f92c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f930:	ed87 7b06 	vstr	d7, [r7, #24]
    outB[0] = b0;
 801f934:	6879      	ldr	r1, [r7, #4]
 801f936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f93a:	e9c1 2300 	strd	r2, r3, [r1]
    outB[1] = 2*b0;
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	3308      	adds	r3, #8
 801f942:	ed97 7b06 	vldr	d7, [r7, #24]
 801f946:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f94a:	ed83 7b00 	vstr	d7, [r3]
    outB[2] = b0;
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	f103 0110 	add.w	r1, r3, #16
 801f954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f958:	e9c1 2300 	strd	r2, r3, [r1]
    // a0 = 1.0
    outA[0] = 2*(C*C-1)/D; // a1
 801f95c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f960:	ee27 7b07 	vmul.f64	d7, d7, d7
 801f964:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801f968:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f96c:	ee37 5b07 	vadd.f64	d5, d7, d7
 801f970:	ed97 6b08 	vldr	d6, [r7, #32]
 801f974:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f978:	683b      	ldr	r3, [r7, #0]
 801f97a:	ed83 7b00 	vstr	d7, [r3]
    outA[1] = (1-sqrt(2)*C+C*C)/D; // a2
 801f97e:	2002      	movs	r0, #2
 801f980:	f7ff ff64 	bl	801f84c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 801f984:	eeb0 6b40 	vmov.f64	d6, d0
 801f988:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f98c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f990:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801f994:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f998:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 801f99c:	ee27 7b07 	vmul.f64	d7, d7, d7
 801f9a0:	ee36 5b07 	vadd.f64	d5, d6, d7
 801f9a4:	683b      	ldr	r3, [r7, #0]
 801f9a6:	3308      	adds	r3, #8
 801f9a8:	ed97 6b08 	vldr	d6, [r7, #32]
 801f9ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f9b0:	ed83 7b00 	vstr	d7, [r3]
}
 801f9b4:	bf00      	nop
 801f9b6:	3738      	adds	r7, #56	@ 0x38
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	ecbd 8b02 	vpop	{d8}
 801f9be:	bd80      	pop	{r7, pc}
 801f9c0:	29be6622 	.word	0x29be6622
 801f9c4:	3fcccf64 	.word	0x3fcccf64
 801f9c8:	54442d18 	.word	0x54442d18
 801f9cc:	400921fb 	.word	0x400921fb
 801f9d0:	08025f60 	.word	0x08025f60
 801f9d4:	08025f68 	.word	0x08025f68
 801f9d8:	08025ed4 	.word	0x08025ed4
 801f9dc:	08025e8c 	.word	0x08025e8c

0801f9e0 <_ZN8BasicVQF18filterInitialStateEdPKdS1_Pd>:

void BasicVQF::filterInitialState(vqf_real_t x0, const double b[3], const double a[2], double out[])
{
 801f9e0:	b480      	push	{r7}
 801f9e2:	b087      	sub	sp, #28
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	ed87 0b04 	vstr	d0, [r7, #16]
 801f9ea:	60f8      	str	r0, [r7, #12]
 801f9ec:	60b9      	str	r1, [r7, #8]
 801f9ee:	607a      	str	r2, [r7, #4]
    // initial state for steady state (equivalent to scipy.signal.lfilter_zi, obtained by setting y=x=x0 in the filter
    // update equation)
    out[0] = x0*(1 - b[0]);
 801f9f0:	68fb      	ldr	r3, [r7, #12]
 801f9f2:	ed93 7b00 	vldr	d7, [r3]
 801f9f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801f9fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f9fe:	ed97 7b04 	vldr	d7, [r7, #16]
 801fa02:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	ed83 7b00 	vstr	d7, [r3]
    out[1] = x0*(b[2] - a[1]);
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	3310      	adds	r3, #16
 801fa10:	ed93 6b00 	vldr	d6, [r3]
 801fa14:	68bb      	ldr	r3, [r7, #8]
 801fa16:	3308      	adds	r3, #8
 801fa18:	ed93 7b00 	vldr	d7, [r3]
 801fa1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	3308      	adds	r3, #8
 801fa24:	ed97 7b04 	vldr	d7, [r7, #16]
 801fa28:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fa2c:	ed83 7b00 	vstr	d7, [r3]
}
 801fa30:	bf00      	nop
 801fa32:	371c      	adds	r7, #28
 801fa34:	46bd      	mov	sp, r7
 801fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa3a:	4770      	bx	lr

0801fa3c <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_>:

void BasicVQF::filterAdaptStateForCoeffChange(vqf_real_t last_y[], size_t N, const double b_old[],
                                              const double a_old[], const double b_new[],
                                              const double a_new[], double state[])
{
 801fa3c:	b580      	push	{r7, lr}
 801fa3e:	b086      	sub	sp, #24
 801fa40:	af00      	add	r7, sp, #0
 801fa42:	60f8      	str	r0, [r7, #12]
 801fa44:	60b9      	str	r1, [r7, #8]
 801fa46:	607a      	str	r2, [r7, #4]
 801fa48:	603b      	str	r3, [r7, #0]
    if (isnan(state[0])) {
 801fa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fa4c:	ed93 7b00 	vldr	d7, [r3]
 801fa50:	eeb0 0b47 	vmov.f64	d0, d7
 801fa54:	f7ff f982 	bl	801ed5c <_ZSt5isnand>
 801fa58:	4603      	mov	r3, r0
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d154      	bne.n	801fb08 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xcc>
        return;
    }
    for (size_t i = 0; i < N; i++) {
 801fa5e:	2300      	movs	r3, #0
 801fa60:	617b      	str	r3, [r7, #20]
 801fa62:	e04c      	b.n	801fafe <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xc2>
        state[0+2*i] = state[0+2*i] + (b_old[0] - b_new[0])*last_y[i];
 801fa64:	697b      	ldr	r3, [r7, #20]
 801fa66:	011b      	lsls	r3, r3, #4
 801fa68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fa6a:	4413      	add	r3, r2
 801fa6c:	ed93 6b00 	vldr	d6, [r3]
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	ed93 5b00 	vldr	d5, [r3]
 801fa76:	6a3b      	ldr	r3, [r7, #32]
 801fa78:	ed93 7b00 	vldr	d7, [r3]
 801fa7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801fa80:	697b      	ldr	r3, [r7, #20]
 801fa82:	00db      	lsls	r3, r3, #3
 801fa84:	68fa      	ldr	r2, [r7, #12]
 801fa86:	4413      	add	r3, r2
 801fa88:	ed93 7b00 	vldr	d7, [r3]
 801fa8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801fa90:	697b      	ldr	r3, [r7, #20]
 801fa92:	011b      	lsls	r3, r3, #4
 801fa94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fa96:	4413      	add	r3, r2
 801fa98:	ee36 7b07 	vadd.f64	d7, d6, d7
 801fa9c:	ed83 7b00 	vstr	d7, [r3]
        state[1+2*i] = state[1+2*i] + (b_old[1] - b_new[1] - a_old[0] + a_new[0])*last_y[i];
 801faa0:	697b      	ldr	r3, [r7, #20]
 801faa2:	011b      	lsls	r3, r3, #4
 801faa4:	3308      	adds	r3, #8
 801faa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801faa8:	4413      	add	r3, r2
 801faaa:	ed93 6b00 	vldr	d6, [r3]
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	3308      	adds	r3, #8
 801fab2:	ed93 5b00 	vldr	d5, [r3]
 801fab6:	6a3b      	ldr	r3, [r7, #32]
 801fab8:	3308      	adds	r3, #8
 801faba:	ed93 7b00 	vldr	d7, [r3]
 801fabe:	ee35 5b47 	vsub.f64	d5, d5, d7
 801fac2:	683b      	ldr	r3, [r7, #0]
 801fac4:	ed93 7b00 	vldr	d7, [r3]
 801fac8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801facc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801face:	ed93 7b00 	vldr	d7, [r3]
 801fad2:	ee35 5b07 	vadd.f64	d5, d5, d7
 801fad6:	697b      	ldr	r3, [r7, #20]
 801fad8:	00db      	lsls	r3, r3, #3
 801fada:	68fa      	ldr	r2, [r7, #12]
 801fadc:	4413      	add	r3, r2
 801fade:	ed93 7b00 	vldr	d7, [r3]
 801fae2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801fae6:	697b      	ldr	r3, [r7, #20]
 801fae8:	011b      	lsls	r3, r3, #4
 801faea:	3308      	adds	r3, #8
 801faec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801faee:	4413      	add	r3, r2
 801faf0:	ee36 7b07 	vadd.f64	d7, d6, d7
 801faf4:	ed83 7b00 	vstr	d7, [r3]
    for (size_t i = 0; i < N; i++) {
 801faf8:	697b      	ldr	r3, [r7, #20]
 801fafa:	3301      	adds	r3, #1
 801fafc:	617b      	str	r3, [r7, #20]
 801fafe:	697a      	ldr	r2, [r7, #20]
 801fb00:	68bb      	ldr	r3, [r7, #8]
 801fb02:	429a      	cmp	r2, r3
 801fb04:	d3ae      	bcc.n	801fa64 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0x28>
 801fb06:	e000      	b.n	801fb0a <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xce>
        return;
 801fb08:	bf00      	nop
    }
}
 801fb0a:	3718      	adds	r7, #24
 801fb0c:	46bd      	mov	sp, r7
 801fb0e:	bd80      	pop	{r7, pc}

0801fb10 <_ZN8BasicVQF10filterStepEdPKdS1_Pd>:

vqf_real_t BasicVQF::filterStep(vqf_real_t x, const double b[3], const double a[2], double state[2])
{
 801fb10:	b480      	push	{r7}
 801fb12:	b089      	sub	sp, #36	@ 0x24
 801fb14:	af00      	add	r7, sp, #0
 801fb16:	ed87 0b04 	vstr	d0, [r7, #16]
 801fb1a:	60f8      	str	r0, [r7, #12]
 801fb1c:	60b9      	str	r1, [r7, #8]
 801fb1e:	607a      	str	r2, [r7, #4]
    // difference equations based on scipy.signal.lfilter documentation
    // assumes that a0 == 1.0
    double y = b[0]*x + state[0];
 801fb20:	68fb      	ldr	r3, [r7, #12]
 801fb22:	ed93 6b00 	vldr	d6, [r3]
 801fb26:	ed97 7b04 	vldr	d7, [r7, #16]
 801fb2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	ed93 7b00 	vldr	d7, [r3]
 801fb34:	ee36 7b07 	vadd.f64	d7, d6, d7
 801fb38:	ed87 7b06 	vstr	d7, [r7, #24]
    state[0] = b[1]*x - a[0]*y + state[1];
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	3308      	adds	r3, #8
 801fb40:	ed93 6b00 	vldr	d6, [r3]
 801fb44:	ed97 7b04 	vldr	d7, [r7, #16]
 801fb48:	ee26 6b07 	vmul.f64	d6, d6, d7
 801fb4c:	68bb      	ldr	r3, [r7, #8]
 801fb4e:	ed93 5b00 	vldr	d5, [r3]
 801fb52:	ed97 7b06 	vldr	d7, [r7, #24]
 801fb56:	ee25 7b07 	vmul.f64	d7, d5, d7
 801fb5a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	3308      	adds	r3, #8
 801fb62:	ed93 7b00 	vldr	d7, [r3]
 801fb66:	ee36 7b07 	vadd.f64	d7, d6, d7
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	ed83 7b00 	vstr	d7, [r3]
    state[1] = b[2]*x - a[1]*y;
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	3310      	adds	r3, #16
 801fb74:	ed93 6b00 	vldr	d6, [r3]
 801fb78:	ed97 7b04 	vldr	d7, [r7, #16]
 801fb7c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801fb80:	68bb      	ldr	r3, [r7, #8]
 801fb82:	3308      	adds	r3, #8
 801fb84:	ed93 5b00 	vldr	d5, [r3]
 801fb88:	ed97 7b06 	vldr	d7, [r7, #24]
 801fb8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	3308      	adds	r3, #8
 801fb94:	ee36 7b47 	vsub.f64	d7, d6, d7
 801fb98:	ed83 7b00 	vstr	d7, [r3]
    return y;
 801fb9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fba0:	ec43 2b17 	vmov	d7, r2, r3
}
 801fba4:	eeb0 0b47 	vmov.f64	d0, d7
 801fba8:	3724      	adds	r7, #36	@ 0x24
 801fbaa:	46bd      	mov	sp, r7
 801fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbb0:	4770      	bx	lr
	...

0801fbb4 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_>:

void BasicVQF::filterVec(const vqf_real_t x[], size_t N, vqf_real_t tau, vqf_real_t Ts, const double b[3],
                         const double a[2], double state[], vqf_real_t out[])
{
 801fbb4:	b590      	push	{r4, r7, lr}
 801fbb6:	b08d      	sub	sp, #52	@ 0x34
 801fbb8:	af00      	add	r7, sp, #0
 801fbba:	61f8      	str	r0, [r7, #28]
 801fbbc:	61b9      	str	r1, [r7, #24]
 801fbbe:	ed87 0b04 	vstr	d0, [r7, #16]
 801fbc2:	ed87 1b02 	vstr	d1, [r7, #8]
 801fbc6:	607a      	str	r2, [r7, #4]
 801fbc8:	603b      	str	r3, [r7, #0]
    assert(N>=2);
 801fbca:	69bb      	ldr	r3, [r7, #24]
 801fbcc:	2b01      	cmp	r3, #1
 801fbce:	d806      	bhi.n	801fbde <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x2a>
 801fbd0:	4b64      	ldr	r3, [pc, #400]	@ (801fd64 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b0>)
 801fbd2:	4a65      	ldr	r2, [pc, #404]	@ (801fd68 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b4>)
 801fbd4:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 801fbd8:	4864      	ldr	r0, [pc, #400]	@ (801fd6c <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b8>)
 801fbda:	f003 fc21 	bl	8023420 <__assert_func>

    // to avoid depending on a single sample, average the first samples (for duration tau)
    // and then use this average to calculate the filter initial state
    if (isnan(state[0])) { // initialization phase
 801fbde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbe0:	ed93 7b00 	vldr	d7, [r3]
 801fbe4:	eeb0 0b47 	vmov.f64	d0, d7
 801fbe8:	f7ff f8b8 	bl	801ed5c <_ZSt5isnand>
 801fbec:	4603      	mov	r3, r0
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	f000 8092 	beq.w	801fd18 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x164>
        if (isnan(state[1])) { // first sample
 801fbf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbf6:	3308      	adds	r3, #8
 801fbf8:	ed93 7b00 	vldr	d7, [r3]
 801fbfc:	eeb0 0b47 	vmov.f64	d0, d7
 801fc00:	f7ff f8ac 	bl	801ed5c <_ZSt5isnand>
 801fc04:	4603      	mov	r3, r0
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d01d      	beq.n	801fc46 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x92>
            state[1] = 0; // state[1] is used to store the sample count
 801fc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc0c:	f103 0108 	add.w	r1, r3, #8
 801fc10:	f04f 0200 	mov.w	r2, #0
 801fc14:	f04f 0300 	mov.w	r3, #0
 801fc18:	e9c1 2300 	strd	r2, r3, [r1]
            for(size_t i = 0; i < N; i++) {
 801fc1c:	2300      	movs	r3, #0
 801fc1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fc20:	e00d      	b.n	801fc3e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x8a>
                state[2+i] = 0; // state[2+i] is used to store the sum
 801fc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc24:	3302      	adds	r3, #2
 801fc26:	00db      	lsls	r3, r3, #3
 801fc28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc2a:	18d1      	adds	r1, r2, r3
 801fc2c:	f04f 0200 	mov.w	r2, #0
 801fc30:	f04f 0300 	mov.w	r3, #0
 801fc34:	e9c1 2300 	strd	r2, r3, [r1]
            for(size_t i = 0; i < N; i++) {
 801fc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc3a:	3301      	adds	r3, #1
 801fc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fc40:	69bb      	ldr	r3, [r7, #24]
 801fc42:	429a      	cmp	r2, r3
 801fc44:	d3ed      	bcc.n	801fc22 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x6e>
            }
        }
        state[1]++;
 801fc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc48:	3308      	adds	r3, #8
 801fc4a:	ed93 7b00 	vldr	d7, [r3]
 801fc4e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801fc52:	ee37 7b06 	vadd.f64	d7, d7, d6
 801fc56:	ed83 7b00 	vstr	d7, [r3]
        for (size_t i = 0; i < N; i++) {
 801fc5a:	2300      	movs	r3, #0
 801fc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fc5e:	e02b      	b.n	801fcb8 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x104>
            state[2+i] += x[i];
 801fc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc62:	3302      	adds	r3, #2
 801fc64:	00db      	lsls	r3, r3, #3
 801fc66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc68:	4413      	add	r3, r2
 801fc6a:	ed93 6b00 	vldr	d6, [r3]
 801fc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc70:	00db      	lsls	r3, r3, #3
 801fc72:	69fa      	ldr	r2, [r7, #28]
 801fc74:	4413      	add	r3, r2
 801fc76:	ed93 7b00 	vldr	d7, [r3]
 801fc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc7c:	3302      	adds	r3, #2
 801fc7e:	00db      	lsls	r3, r3, #3
 801fc80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc82:	4413      	add	r3, r2
 801fc84:	ee36 7b07 	vadd.f64	d7, d6, d7
 801fc88:	ed83 7b00 	vstr	d7, [r3]
            out[i] = state[2+i]/state[1];
 801fc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc8e:	3302      	adds	r3, #2
 801fc90:	00db      	lsls	r3, r3, #3
 801fc92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc94:	4413      	add	r3, r2
 801fc96:	ed93 5b00 	vldr	d5, [r3]
 801fc9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc9c:	3308      	adds	r3, #8
 801fc9e:	ed93 6b00 	vldr	d6, [r3]
 801fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fca4:	00db      	lsls	r3, r3, #3
 801fca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fca8:	4413      	add	r3, r2
 801fcaa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801fcae:	ed83 7b00 	vstr	d7, [r3]
        for (size_t i = 0; i < N; i++) {
 801fcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcb4:	3301      	adds	r3, #1
 801fcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fcb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fcba:	69bb      	ldr	r3, [r7, #24]
 801fcbc:	429a      	cmp	r2, r3
 801fcbe:	d3cf      	bcc.n	801fc60 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0xac>
        }
        if (state[1]*Ts >= tau) {
 801fcc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fcc2:	3308      	adds	r3, #8
 801fcc4:	ed93 6b00 	vldr	d6, [r3]
 801fcc8:	ed97 7b02 	vldr	d7, [r7, #8]
 801fccc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fcd0:	ed97 6b04 	vldr	d6, [r7, #16]
 801fcd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcdc:	d900      	bls.n	801fce0 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x12c>
            for(size_t i = 0; i < N; i++) {
               filterInitialState(out[i], b, a, state+2*i);
            }
        }
        return;
 801fcde:	e03e      	b.n	801fd5e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1aa>
            for(size_t i = 0; i < N; i++) {
 801fce0:	2300      	movs	r3, #0
 801fce2:	627b      	str	r3, [r7, #36]	@ 0x24
 801fce4:	e013      	b.n	801fd0e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x15a>
               filterInitialState(out[i], b, a, state+2*i);
 801fce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fce8:	00db      	lsls	r3, r3, #3
 801fcea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fcec:	4413      	add	r3, r2
 801fcee:	ed93 7b00 	vldr	d7, [r3]
 801fcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fcf4:	011b      	lsls	r3, r3, #4
 801fcf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fcf8:	4413      	add	r3, r2
 801fcfa:	461a      	mov	r2, r3
 801fcfc:	6839      	ldr	r1, [r7, #0]
 801fcfe:	6878      	ldr	r0, [r7, #4]
 801fd00:	eeb0 0b47 	vmov.f64	d0, d7
 801fd04:	f7ff fe6c 	bl	801f9e0 <_ZN8BasicVQF18filterInitialStateEdPKdS1_Pd>
            for(size_t i = 0; i < N; i++) {
 801fd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd0a:	3301      	adds	r3, #1
 801fd0c:	627b      	str	r3, [r7, #36]	@ 0x24
 801fd0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fd10:	69bb      	ldr	r3, [r7, #24]
 801fd12:	429a      	cmp	r2, r3
 801fd14:	d3e7      	bcc.n	801fce6 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x132>
        return;
 801fd16:	e022      	b.n	801fd5e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1aa>
    }

    for (size_t i = 0; i < N; i++) {
 801fd18:	2300      	movs	r3, #0
 801fd1a:	623b      	str	r3, [r7, #32]
 801fd1c:	e01b      	b.n	801fd56 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1a2>
        out[i] = filterStep(x[i], b, a, state+2*i);
 801fd1e:	6a3b      	ldr	r3, [r7, #32]
 801fd20:	00db      	lsls	r3, r3, #3
 801fd22:	69fa      	ldr	r2, [r7, #28]
 801fd24:	4413      	add	r3, r2
 801fd26:	ed93 7b00 	vldr	d7, [r3]
 801fd2a:	6a3b      	ldr	r3, [r7, #32]
 801fd2c:	011b      	lsls	r3, r3, #4
 801fd2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fd30:	18d1      	adds	r1, r2, r3
 801fd32:	6a3b      	ldr	r3, [r7, #32]
 801fd34:	00db      	lsls	r3, r3, #3
 801fd36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fd38:	18d4      	adds	r4, r2, r3
 801fd3a:	460a      	mov	r2, r1
 801fd3c:	6839      	ldr	r1, [r7, #0]
 801fd3e:	6878      	ldr	r0, [r7, #4]
 801fd40:	eeb0 0b47 	vmov.f64	d0, d7
 801fd44:	f7ff fee4 	bl	801fb10 <_ZN8BasicVQF10filterStepEdPKdS1_Pd>
 801fd48:	eeb0 7b40 	vmov.f64	d7, d0
 801fd4c:	ed84 7b00 	vstr	d7, [r4]
    for (size_t i = 0; i < N; i++) {
 801fd50:	6a3b      	ldr	r3, [r7, #32]
 801fd52:	3301      	adds	r3, #1
 801fd54:	623b      	str	r3, [r7, #32]
 801fd56:	6a3a      	ldr	r2, [r7, #32]
 801fd58:	69bb      	ldr	r3, [r7, #24]
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	d3df      	bcc.n	801fd1e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x16a>
    }
}
 801fd5e:	3734      	adds	r7, #52	@ 0x34
 801fd60:	46bd      	mov	sp, r7
 801fd62:	bd90      	pop	{r4, r7, pc}
 801fd64:	08025fb8 	.word	0x08025fb8
 801fd68:	08025fc0 	.word	0x08025fc0
 801fd6c:	08025ed4 	.word	0x08025ed4

0801fd70 <_ZN8BasicVQF5setupEv>:

void BasicVQF::setup()
{
 801fd70:	b580      	push	{r7, lr}
 801fd72:	b082      	sub	sp, #8
 801fd74:	af00      	add	r7, sp, #0
 801fd76:	6078      	str	r0, [r7, #4]
    assert(coeffs.gyrTs > 0);
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	ed93 7b2a 	vldr	d7, [r3, #168]	@ 0xa8
 801fd7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd86:	dc06      	bgt.n	801fd96 <_ZN8BasicVQF5setupEv+0x26>
 801fd88:	4b27      	ldr	r3, [pc, #156]	@ (801fe28 <_ZN8BasicVQF5setupEv+0xb8>)
 801fd8a:	4a28      	ldr	r2, [pc, #160]	@ (801fe2c <_ZN8BasicVQF5setupEv+0xbc>)
 801fd8c:	f240 11ad 	movw	r1, #429	@ 0x1ad
 801fd90:	4827      	ldr	r0, [pc, #156]	@ (801fe30 <_ZN8BasicVQF5setupEv+0xc0>)
 801fd92:	f003 fb45 	bl	8023420 <__assert_func>
    assert(coeffs.accTs > 0);
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 801fd9c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801fda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fda4:	dc06      	bgt.n	801fdb4 <_ZN8BasicVQF5setupEv+0x44>
 801fda6:	4b23      	ldr	r3, [pc, #140]	@ (801fe34 <_ZN8BasicVQF5setupEv+0xc4>)
 801fda8:	4a20      	ldr	r2, [pc, #128]	@ (801fe2c <_ZN8BasicVQF5setupEv+0xbc>)
 801fdaa:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 801fdae:	4820      	ldr	r0, [pc, #128]	@ (801fe30 <_ZN8BasicVQF5setupEv+0xc0>)
 801fdb0:	f003 fb36 	bl	8023420 <__assert_func>
    assert(coeffs.magTs > 0);
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	ed93 7b2e 	vldr	d7, [r3, #184]	@ 0xb8
 801fdba:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801fdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdc2:	dc06      	bgt.n	801fdd2 <_ZN8BasicVQF5setupEv+0x62>
 801fdc4:	4b1c      	ldr	r3, [pc, #112]	@ (801fe38 <_ZN8BasicVQF5setupEv+0xc8>)
 801fdc6:	4a19      	ldr	r2, [pc, #100]	@ (801fe2c <_ZN8BasicVQF5setupEv+0xbc>)
 801fdc8:	f240 11af 	movw	r1, #431	@ 0x1af
 801fdcc:	4818      	ldr	r0, [pc, #96]	@ (801fe30 <_ZN8BasicVQF5setupEv+0xc0>)
 801fdce:	f003 fb27 	bl	8023420 <__assert_func>

    filterCoeffs(params.tauAcc, coeffs.accTs, coeffs.accLpB, coeffs.accLpA);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	ed93 7b00 	vldr	d7, [r3]
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	33d8      	adds	r3, #216	@ 0xd8
 801fde8:	4619      	mov	r1, r3
 801fdea:	4610      	mov	r0, r2
 801fdec:	eeb0 1b46 	vmov.f64	d1, d6
 801fdf0:	eeb0 0b47 	vmov.f64	d0, d7
 801fdf4:	f7ff fd40 	bl	801f878 <_ZN8BasicVQF12filterCoeffsEddPdS0_>

    coeffs.kMag = gainFromTau(params.tauMag, coeffs.magTs);
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	ed93 7b02 	vldr	d7, [r3, #8]
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	ed93 6b2e 	vldr	d6, [r3, #184]	@ 0xb8
 801fe04:	eeb0 1b46 	vmov.f64	d1, d6
 801fe08:	eeb0 0b47 	vmov.f64	d0, d7
 801fe0c:	f7ff fcd4 	bl	801f7b8 <_ZN8BasicVQF11gainFromTauEdd>
 801fe10:	eeb0 7b40 	vmov.f64	d7, d0
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8

    resetState();
 801fe1a:	6878      	ldr	r0, [r7, #4]
 801fe1c:	f7ff f9c8 	bl	801f1b0 <_ZN8BasicVQF10resetStateEv>
}
 801fe20:	bf00      	nop
 801fe22:	3708      	adds	r7, #8
 801fe24:	46bd      	mov	sp, r7
 801fe26:	bd80      	pop	{r7, pc}
 801fe28:	08026048 	.word	0x08026048
 801fe2c:	0802605c 	.word	0x0802605c
 801fe30:	08025ed4 	.word	0x08025ed4
 801fe34:	08026074 	.word	0x08026074
 801fe38:	08026088 	.word	0x08026088

0801fe3c <_ZSt4copyIPdS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 801fe3c:	b590      	push	{r4, r7, lr}
 801fe3e:	b085      	sub	sp, #20
 801fe40:	af00      	add	r7, sp, #0
 801fe42:	60f8      	str	r0, [r7, #12]
 801fe44:	60b9      	str	r1, [r7, #8]
 801fe46:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801fe48:	68f8      	ldr	r0, [r7, #12]
 801fe4a:	f000 f82d 	bl	801fea8 <_ZSt12__miter_baseIPdET_S1_>
 801fe4e:	4604      	mov	r4, r0
 801fe50:	68b8      	ldr	r0, [r7, #8]
 801fe52:	f000 f829 	bl	801fea8 <_ZSt12__miter_baseIPdET_S1_>
 801fe56:	4603      	mov	r3, r0
 801fe58:	687a      	ldr	r2, [r7, #4]
 801fe5a:	4619      	mov	r1, r3
 801fe5c:	4620      	mov	r0, r4
 801fe5e:	f000 f82e 	bl	801febe <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>
 801fe62:	4603      	mov	r3, r0
    }
 801fe64:	4618      	mov	r0, r3
 801fe66:	3714      	adds	r7, #20
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	bd90      	pop	{r4, r7, pc}

0801fe6c <_ZSt4fillIPdiEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 801fe6c:	b580      	push	{r7, lr}
 801fe6e:	b084      	sub	sp, #16
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	60f8      	str	r0, [r7, #12]
 801fe74:	60b9      	str	r1, [r7, #8]
 801fe76:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 801fe78:	687a      	ldr	r2, [r7, #4]
 801fe7a:	68b9      	ldr	r1, [r7, #8]
 801fe7c:	68f8      	ldr	r0, [r7, #12]
 801fe7e:	f000 f841 	bl	801ff04 <_ZSt8__fill_aIPdiEvT_S1_RKT0_>
    }
 801fe82:	bf00      	nop
 801fe84:	3710      	adds	r7, #16
 801fe86:	46bd      	mov	sp, r7
 801fe88:	bd80      	pop	{r7, pc}

0801fe8a <_ZSt4fillIPddEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 801fe8a:	b580      	push	{r7, lr}
 801fe8c:	b084      	sub	sp, #16
 801fe8e:	af00      	add	r7, sp, #0
 801fe90:	60f8      	str	r0, [r7, #12]
 801fe92:	60b9      	str	r1, [r7, #8]
 801fe94:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 801fe96:	687a      	ldr	r2, [r7, #4]
 801fe98:	68b9      	ldr	r1, [r7, #8]
 801fe9a:	68f8      	ldr	r0, [r7, #12]
 801fe9c:	f000 f841 	bl	801ff22 <_ZSt8__fill_aIPddEvT_S1_RKT0_>
    }
 801fea0:	bf00      	nop
 801fea2:	3710      	adds	r7, #16
 801fea4:	46bd      	mov	sp, r7
 801fea6:	bd80      	pop	{r7, pc}

0801fea8 <_ZSt12__miter_baseIPdET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801fea8:	b480      	push	{r7}
 801feaa:	b083      	sub	sp, #12
 801feac:	af00      	add	r7, sp, #0
 801feae:	6078      	str	r0, [r7, #4]
    { return __it; }
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	4618      	mov	r0, r3
 801feb4:	370c      	adds	r7, #12
 801feb6:	46bd      	mov	sp, r7
 801feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801febc:	4770      	bx	lr

0801febe <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801febe:	b5b0      	push	{r4, r5, r7, lr}
 801fec0:	b084      	sub	sp, #16
 801fec2:	af00      	add	r7, sp, #0
 801fec4:	60f8      	str	r0, [r7, #12]
 801fec6:	60b9      	str	r1, [r7, #8]
 801fec8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801feca:	68f8      	ldr	r0, [r7, #12]
 801fecc:	f000 f838 	bl	801ff40 <_ZSt12__niter_baseIPdET_S1_>
 801fed0:	4604      	mov	r4, r0
 801fed2:	68b8      	ldr	r0, [r7, #8]
 801fed4:	f000 f834 	bl	801ff40 <_ZSt12__niter_baseIPdET_S1_>
 801fed8:	4605      	mov	r5, r0
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	4618      	mov	r0, r3
 801fede:	f000 f82f 	bl	801ff40 <_ZSt12__niter_baseIPdET_S1_>
 801fee2:	4603      	mov	r3, r0
 801fee4:	461a      	mov	r2, r3
 801fee6:	4629      	mov	r1, r5
 801fee8:	4620      	mov	r0, r4
 801feea:	f000 f840 	bl	801ff6e <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>
 801feee:	4602      	mov	r2, r0
 801fef0:	1d3b      	adds	r3, r7, #4
 801fef2:	4611      	mov	r1, r2
 801fef4:	4618      	mov	r0, r3
 801fef6:	f000 f82e 	bl	801ff56 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 801fefa:	4603      	mov	r3, r0
    }
 801fefc:	4618      	mov	r0, r3
 801fefe:	3710      	adds	r7, #16
 801ff00:	46bd      	mov	sp, r7
 801ff02:	bdb0      	pop	{r4, r5, r7, pc}

0801ff04 <_ZSt8__fill_aIPdiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b084      	sub	sp, #16
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	60f8      	str	r0, [r7, #12]
 801ff0c:	60b9      	str	r1, [r7, #8]
 801ff0e:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 801ff10:	687a      	ldr	r2, [r7, #4]
 801ff12:	68b9      	ldr	r1, [r7, #8]
 801ff14:	68f8      	ldr	r0, [r7, #12]
 801ff16:	f000 f83a 	bl	801ff8e <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 801ff1a:	bf00      	nop
 801ff1c:	3710      	adds	r7, #16
 801ff1e:	46bd      	mov	sp, r7
 801ff20:	bd80      	pop	{r7, pc}

0801ff22 <_ZSt8__fill_aIPddEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 801ff22:	b580      	push	{r7, lr}
 801ff24:	b084      	sub	sp, #16
 801ff26:	af00      	add	r7, sp, #0
 801ff28:	60f8      	str	r0, [r7, #12]
 801ff2a:	60b9      	str	r1, [r7, #8]
 801ff2c:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 801ff2e:	687a      	ldr	r2, [r7, #4]
 801ff30:	68b9      	ldr	r1, [r7, #8]
 801ff32:	68f8      	ldr	r0, [r7, #12]
 801ff34:	f000 f84b 	bl	801ffce <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 801ff38:	bf00      	nop
 801ff3a:	3710      	adds	r7, #16
 801ff3c:	46bd      	mov	sp, r7
 801ff3e:	bd80      	pop	{r7, pc}

0801ff40 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 801ff40:	b480      	push	{r7}
 801ff42:	b083      	sub	sp, #12
 801ff44:	af00      	add	r7, sp, #0
 801ff46:	6078      	str	r0, [r7, #4]
    { return __it; }
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	4618      	mov	r0, r3
 801ff4c:	370c      	adds	r7, #12
 801ff4e:	46bd      	mov	sp, r7
 801ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff54:	4770      	bx	lr

0801ff56 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801ff56:	b480      	push	{r7}
 801ff58:	b083      	sub	sp, #12
 801ff5a:	af00      	add	r7, sp, #0
 801ff5c:	6078      	str	r0, [r7, #4]
 801ff5e:	6039      	str	r1, [r7, #0]
    { return __res; }
 801ff60:	683b      	ldr	r3, [r7, #0]
 801ff62:	4618      	mov	r0, r3
 801ff64:	370c      	adds	r7, #12
 801ff66:	46bd      	mov	sp, r7
 801ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff6c:	4770      	bx	lr

0801ff6e <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801ff6e:	b580      	push	{r7, lr}
 801ff70:	b084      	sub	sp, #16
 801ff72:	af00      	add	r7, sp, #0
 801ff74:	60f8      	str	r0, [r7, #12]
 801ff76:	60b9      	str	r1, [r7, #8]
 801ff78:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801ff7a:	687a      	ldr	r2, [r7, #4]
 801ff7c:	68b9      	ldr	r1, [r7, #8]
 801ff7e:	68f8      	ldr	r0, [r7, #12]
 801ff80:	f000 f844 	bl	802000c <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>
 801ff84:	4603      	mov	r3, r0
 801ff86:	4618      	mov	r0, r3
 801ff88:	3710      	adds	r7, #16
 801ff8a:	46bd      	mov	sp, r7
 801ff8c:	bd80      	pop	{r7, pc}

0801ff8e <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801ff8e:	b480      	push	{r7}
 801ff90:	b087      	sub	sp, #28
 801ff92:	af00      	add	r7, sp, #0
 801ff94:	60f8      	str	r0, [r7, #12]
 801ff96:	60b9      	str	r1, [r7, #8]
 801ff98:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 801ffa0:	e00a      	b.n	801ffb8 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x2a>
	*__first = __tmp;
 801ffa2:	697b      	ldr	r3, [r7, #20]
 801ffa4:	ee07 3a90 	vmov	s15, r3
 801ffa8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ffac:	68fb      	ldr	r3, [r7, #12]
 801ffae:	ed83 7b00 	vstr	d7, [r3]
      for (; __first != __last; ++__first)
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	3308      	adds	r3, #8
 801ffb6:	60fb      	str	r3, [r7, #12]
 801ffb8:	68fa      	ldr	r2, [r7, #12]
 801ffba:	68bb      	ldr	r3, [r7, #8]
 801ffbc:	429a      	cmp	r2, r3
 801ffbe:	d1f0      	bne.n	801ffa2 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 801ffc0:	bf00      	nop
 801ffc2:	bf00      	nop
 801ffc4:	371c      	adds	r7, #28
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffcc:	4770      	bx	lr

0801ffce <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801ffce:	b480      	push	{r7}
 801ffd0:	b087      	sub	sp, #28
 801ffd2:	af00      	add	r7, sp, #0
 801ffd4:	60f8      	str	r0, [r7, #12]
 801ffd6:	60b9      	str	r1, [r7, #8]
 801ffd8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffe0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (; __first != __last; ++__first)
 801ffe4:	e007      	b.n	801fff6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 801ffe6:	68f9      	ldr	r1, [r7, #12]
 801ffe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ffec:	e9c1 2300 	strd	r2, r3, [r1]
      for (; __first != __last; ++__first)
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	3308      	adds	r3, #8
 801fff4:	60fb      	str	r3, [r7, #12]
 801fff6:	68fa      	ldr	r2, [r7, #12]
 801fff8:	68bb      	ldr	r3, [r7, #8]
 801fffa:	429a      	cmp	r2, r3
 801fffc:	d1f3      	bne.n	801ffe6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x18>
    }
 801fffe:	bf00      	nop
 8020000:	bf00      	nop
 8020002:	371c      	adds	r7, #28
 8020004:	46bd      	mov	sp, r7
 8020006:	f85d 7b04 	ldr.w	r7, [sp], #4
 802000a:	4770      	bx	lr

0802000c <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802000c:	b580      	push	{r7, lr}
 802000e:	b084      	sub	sp, #16
 8020010:	af00      	add	r7, sp, #0
 8020012:	60f8      	str	r0, [r7, #12]
 8020014:	60b9      	str	r1, [r7, #8]
 8020016:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8020018:	687a      	ldr	r2, [r7, #4]
 802001a:	68b9      	ldr	r1, [r7, #8]
 802001c:	68f8      	ldr	r0, [r7, #12]
 802001e:	f000 f805 	bl	802002c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8020022:	4603      	mov	r3, r0
    }
 8020024:	4618      	mov	r0, r3
 8020026:	3710      	adds	r7, #16
 8020028:	46bd      	mov	sp, r7
 802002a:	bd80      	pop	{r7, pc}

0802002c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802002c:	b580      	push	{r7, lr}
 802002e:	b086      	sub	sp, #24
 8020030:	af00      	add	r7, sp, #0
 8020032:	60f8      	str	r0, [r7, #12]
 8020034:	60b9      	str	r1, [r7, #8]
 8020036:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8020038:	68ba      	ldr	r2, [r7, #8]
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	1ad3      	subs	r3, r2, r3
 802003e:	10db      	asrs	r3, r3, #3
 8020040:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8020042:	697b      	ldr	r3, [r7, #20]
 8020044:	2b00      	cmp	r3, #0
 8020046:	d006      	beq.n	8020056 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8020048:	697b      	ldr	r3, [r7, #20]
 802004a:	00db      	lsls	r3, r3, #3
 802004c:	461a      	mov	r2, r3
 802004e:	68f9      	ldr	r1, [r7, #12]
 8020050:	6878      	ldr	r0, [r7, #4]
 8020052:	f003 ff20 	bl	8023e96 <memmove>
	  return __result + _Num;
 8020056:	697b      	ldr	r3, [r7, #20]
 8020058:	00db      	lsls	r3, r3, #3
 802005a:	687a      	ldr	r2, [r7, #4]
 802005c:	4413      	add	r3, r2
	}
 802005e:	4618      	mov	r0, r3
 8020060:	3718      	adds	r7, #24
 8020062:	46bd      	mov	sp, r7
 8020064:	bd80      	pop	{r7, pc}
	...

08020068 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 8020068:	b480      	push	{r7}
 802006a:	b083      	sub	sp, #12
 802006c:	af00      	add	r7, sp, #0
 802006e:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8020076:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 802007e:	619a      	str	r2, [r3, #24]
	q1 = 0.0f;
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	f04f 0200 	mov.w	r2, #0
 8020086:	61da      	str	r2, [r3, #28]
	q2 = 0.0f;
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	f04f 0200 	mov.w	r2, #0
 802008e:	621a      	str	r2, [r3, #32]
	q3 = 0.0f;
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	f04f 0200 	mov.w	r2, #0
 8020096:	625a      	str	r2, [r3, #36]	@ 0x24
	invSampleFreq = 1.0f / sampleFreqDef;
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	4a06      	ldr	r2, [pc, #24]	@ (80200b4 <_ZN8MadgwickC1Ev+0x4c>)
 802009c:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	2200      	movs	r2, #0
 80200a2:	751a      	strb	r2, [r3, #20]
}
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	4618      	mov	r0, r3
 80200a8:	370c      	adds	r7, #12
 80200aa:	46bd      	mov	sp, r7
 80200ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200b0:	4770      	bx	lr
 80200b2:	bf00      	nop
 80200b4:	3c23d70a 	.word	0x3c23d70a

080200b8 <_ZN8Madgwick9updateIMUEffffff>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80200b8:	b580      	push	{r7, lr}
 80200ba:	b09e      	sub	sp, #120	@ 0x78
 80200bc:	af00      	add	r7, sp, #0
 80200be:	61f8      	str	r0, [r7, #28]
 80200c0:	ed87 0a06 	vstr	s0, [r7, #24]
 80200c4:	edc7 0a05 	vstr	s1, [r7, #20]
 80200c8:	ed87 1a04 	vstr	s2, [r7, #16]
 80200cc:	edc7 1a03 	vstr	s3, [r7, #12]
 80200d0:	ed87 2a02 	vstr	s4, [r7, #8]
 80200d4:	edc7 2a01 	vstr	s5, [r7, #4]
//	gx *= 0.0174533f;
//	gy *= 0.0174533f;
//	gz *= 0.0174533f;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80200d8:	69fb      	ldr	r3, [r7, #28]
 80200da:	edd3 7a07 	vldr	s15, [r3, #28]
 80200de:	eeb1 7a67 	vneg.f32	s14, s15
 80200e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80200e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80200ea:	69fb      	ldr	r3, [r7, #28]
 80200ec:	edd3 6a08 	vldr	s13, [r3, #32]
 80200f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80200f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80200f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80200fc:	69fb      	ldr	r3, [r7, #28]
 80200fe:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8020102:	edd7 7a04 	vldr	s15, [r7, #16]
 8020106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802010a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802010e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8020112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020116:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 802011a:	69fb      	ldr	r3, [r7, #28]
 802011c:	ed93 7a06 	vldr	s14, [r3, #24]
 8020120:	edd7 7a06 	vldr	s15, [r7, #24]
 8020124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020128:	69fb      	ldr	r3, [r7, #28]
 802012a:	edd3 6a08 	vldr	s13, [r3, #32]
 802012e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020136:	ee37 7a27 	vadd.f32	s14, s14, s15
 802013a:	69fb      	ldr	r3, [r7, #28]
 802013c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8020140:	edd7 7a05 	vldr	s15, [r7, #20]
 8020144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020148:	ee77 7a67 	vsub.f32	s15, s14, s15
 802014c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8020150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020154:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8020158:	69fb      	ldr	r3, [r7, #28]
 802015a:	ed93 7a06 	vldr	s14, [r3, #24]
 802015e:	edd7 7a05 	vldr	s15, [r7, #20]
 8020162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020166:	69fb      	ldr	r3, [r7, #28]
 8020168:	edd3 6a07 	vldr	s13, [r3, #28]
 802016c:	edd7 7a04 	vldr	s15, [r7, #16]
 8020170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020178:	69fb      	ldr	r3, [r7, #28]
 802017a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 802017e:	edd7 7a06 	vldr	s15, [r7, #24]
 8020182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020186:	ee77 7a27 	vadd.f32	s15, s14, s15
 802018a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802018e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020192:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8020196:	69fb      	ldr	r3, [r7, #28]
 8020198:	ed93 7a06 	vldr	s14, [r3, #24]
 802019c:	edd7 7a04 	vldr	s15, [r7, #16]
 80201a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80201a4:	69fb      	ldr	r3, [r7, #28]
 80201a6:	edd3 6a07 	vldr	s13, [r3, #28]
 80201aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80201ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80201b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80201b6:	69fb      	ldr	r3, [r7, #28]
 80201b8:	edd3 6a08 	vldr	s13, [r3, #32]
 80201bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80201c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80201c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80201c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80201cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80201d0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80201d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80201d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80201dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201e0:	d10e      	bne.n	8020200 <_ZN8Madgwick9updateIMUEffffff+0x148>
 80201e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80201e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80201ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201ee:	d107      	bne.n	8020200 <_ZN8Madgwick9updateIMUEffffff+0x148>
 80201f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80201f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80201f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201fc:	f000 81db 	beq.w	80205b6 <_ZN8Madgwick9updateIMUEffffff+0x4fe>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8020200:	edd7 7a03 	vldr	s15, [r7, #12]
 8020204:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8020208:	edd7 7a02 	vldr	s15, [r7, #8]
 802020c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020214:	edd7 7a01 	vldr	s15, [r7, #4]
 8020218:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802021c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020220:	eeb0 0a67 	vmov.f32	s0, s15
 8020224:	f000 fa5e 	bl	80206e4 <_ZN8Madgwick7invSqrtEf>
 8020228:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 802022c:	ed97 7a03 	vldr	s14, [r7, #12]
 8020230:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020238:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 802023c:	ed97 7a02 	vldr	s14, [r7, #8]
 8020240:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020248:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 802024c:	ed97 7a01 	vldr	s14, [r7, #4]
 8020250:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020258:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 802025c:	69fb      	ldr	r3, [r7, #28]
 802025e:	edd3 7a06 	vldr	s15, [r3, #24]
 8020262:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020266:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 802026a:	69fb      	ldr	r3, [r7, #28]
 802026c:	edd3 7a07 	vldr	s15, [r3, #28]
 8020270:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020274:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 8020278:	69fb      	ldr	r3, [r7, #28]
 802027a:	edd3 7a08 	vldr	s15, [r3, #32]
 802027e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020282:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 8020286:	69fb      	ldr	r3, [r7, #28]
 8020288:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 802028c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020290:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 8020294:	69fb      	ldr	r3, [r7, #28]
 8020296:	edd3 7a06 	vldr	s15, [r3, #24]
 802029a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 802029e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202a2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 80202a6:	69fb      	ldr	r3, [r7, #28]
 80202a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80202ac:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80202b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202b4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 80202b8:	69fb      	ldr	r3, [r7, #28]
 80202ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80202be:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80202c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202c6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 80202ca:	69fb      	ldr	r3, [r7, #28]
 80202cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80202d0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80202d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202d8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 80202dc:	69fb      	ldr	r3, [r7, #28]
 80202de:	edd3 7a08 	vldr	s15, [r3, #32]
 80202e2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80202e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202ea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 80202ee:	69fb      	ldr	r3, [r7, #28]
 80202f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80202f4:	69fb      	ldr	r3, [r7, #28]
 80202f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80202fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80202fe:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 8020302:	69fb      	ldr	r3, [r7, #28]
 8020304:	ed93 7a07 	vldr	s14, [r3, #28]
 8020308:	69fb      	ldr	r3, [r7, #28]
 802030a:	edd3 7a07 	vldr	s15, [r3, #28]
 802030e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020312:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 8020316:	69fb      	ldr	r3, [r7, #28]
 8020318:	ed93 7a08 	vldr	s14, [r3, #32]
 802031c:	69fb      	ldr	r3, [r7, #28]
 802031e:	edd3 7a08 	vldr	s15, [r3, #32]
 8020322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020326:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 802032a:	69fb      	ldr	r3, [r7, #28]
 802032c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8020330:	69fb      	ldr	r3, [r7, #28]
 8020332:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8020336:	ee67 7a27 	vmul.f32	s15, s14, s15
 802033a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 802033e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8020342:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8020346:	ee27 7a27 	vmul.f32	s14, s14, s15
 802034a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 802034e:	edd7 7a03 	vldr	s15, [r7, #12]
 8020352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020356:	ee37 7a27 	vadd.f32	s14, s14, s15
 802035a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 802035e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8020362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020366:	ee37 7a27 	vadd.f32	s14, s14, s15
 802036a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 802036e:	edd7 7a02 	vldr	s15, [r7, #8]
 8020372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020376:	ee77 7a67 	vsub.f32	s15, s14, s15
 802037a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 802037e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8020382:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8020386:	ee27 7a27 	vmul.f32	s14, s14, s15
 802038a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 802038e:	edd7 7a03 	vldr	s15, [r7, #12]
 8020392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020396:	ee37 7a67 	vsub.f32	s14, s14, s15
 802039a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 802039e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80203a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80203a6:	69fb      	ldr	r3, [r7, #28]
 80203a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80203ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80203b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80203b4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80203b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80203bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80203c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80203c4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80203c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80203cc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80203d0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80203d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80203d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80203dc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80203e0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80203e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80203e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80203ec:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80203f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80203f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80203f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80203fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8020400:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8020404:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8020408:	ee27 7a87 	vmul.f32	s14, s15, s14
 802040c:	69fb      	ldr	r3, [r7, #28]
 802040e:	edd3 7a08 	vldr	s15, [r3, #32]
 8020412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020416:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 802041a:	edd7 7a03 	vldr	s15, [r7, #12]
 802041e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020426:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 802042a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 802042e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020436:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 802043a:	edd7 7a02 	vldr	s15, [r7, #8]
 802043e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020446:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 802044a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802044e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8020452:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8020456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802045a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802045e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8020462:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8020466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802046a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802046e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8020472:	edd7 7a01 	vldr	s15, [r7, #4]
 8020476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802047a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802047e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8020482:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8020486:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 802048a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802048e:	69fb      	ldr	r3, [r7, #28]
 8020490:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8020494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020498:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 802049c:	edd7 7a03 	vldr	s15, [r7, #12]
 80204a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80204a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80204a8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80204ac:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80204b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80204b4:	69fb      	ldr	r3, [r7, #28]
 80204b6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80204ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80204be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80204c2:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80204c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80204ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80204ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80204d2:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80204d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80204da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80204de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80204e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80204e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80204ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80204ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80204f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80204f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80204fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80204fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020502:	eeb0 0a67 	vmov.f32	s0, s15
 8020506:	f000 f8ed 	bl	80206e4 <_ZN8Madgwick7invSqrtEf>
 802050a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 802050e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8020512:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020516:	ee67 7a27 	vmul.f32	s15, s14, s15
 802051a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 802051e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8020522:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020526:	ee67 7a27 	vmul.f32	s15, s14, s15
 802052a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 802052e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8020532:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020536:	ee67 7a27 	vmul.f32	s15, s14, s15
 802053a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 802053e:	ed97 7a08 	vldr	s14, [r7, #32]
 8020542:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020546:	ee67 7a27 	vmul.f32	s15, s14, s15
 802054a:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 802054e:	69fb      	ldr	r3, [r7, #28]
 8020550:	ed93 7a00 	vldr	s14, [r3]
 8020554:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8020558:	ee67 7a27 	vmul.f32	s15, s14, s15
 802055c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8020560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020564:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 8020568:	69fb      	ldr	r3, [r7, #28]
 802056a:	ed93 7a00 	vldr	s14, [r3]
 802056e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8020572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020576:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 802057a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802057e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 8020582:	69fb      	ldr	r3, [r7, #28]
 8020584:	ed93 7a00 	vldr	s14, [r3]
 8020588:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 802058c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020590:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8020594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020598:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 802059c:	69fb      	ldr	r3, [r7, #28]
 802059e:	ed93 7a00 	vldr	s14, [r3]
 80205a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80205a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80205aa:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80205ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80205b2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 80205b6:	69fb      	ldr	r3, [r7, #28]
 80205b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80205bc:	69fb      	ldr	r3, [r7, #28]
 80205be:	edd3 6a04 	vldr	s13, [r3, #16]
 80205c2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80205c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80205ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80205ce:	69fb      	ldr	r3, [r7, #28]
 80205d0:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 += qDot2 * invSampleFreq;
 80205d4:	69fb      	ldr	r3, [r7, #28]
 80205d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80205da:	69fb      	ldr	r3, [r7, #28]
 80205dc:	edd3 6a04 	vldr	s13, [r3, #16]
 80205e0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80205e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80205e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80205ec:	69fb      	ldr	r3, [r7, #28]
 80205ee:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 += qDot3 * invSampleFreq;
 80205f2:	69fb      	ldr	r3, [r7, #28]
 80205f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80205f8:	69fb      	ldr	r3, [r7, #28]
 80205fa:	edd3 6a04 	vldr	s13, [r3, #16]
 80205fe:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8020602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020606:	ee77 7a27 	vadd.f32	s15, s14, s15
 802060a:	69fb      	ldr	r3, [r7, #28]
 802060c:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 += qDot4 * invSampleFreq;
 8020610:	69fb      	ldr	r3, [r7, #28]
 8020612:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8020616:	69fb      	ldr	r3, [r7, #28]
 8020618:	edd3 6a04 	vldr	s13, [r3, #16]
 802061c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8020620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020628:	69fb      	ldr	r3, [r7, #28]
 802062a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 802062e:	69fb      	ldr	r3, [r7, #28]
 8020630:	ed93 7a06 	vldr	s14, [r3, #24]
 8020634:	69fb      	ldr	r3, [r7, #28]
 8020636:	edd3 7a06 	vldr	s15, [r3, #24]
 802063a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802063e:	69fb      	ldr	r3, [r7, #28]
 8020640:	edd3 6a07 	vldr	s13, [r3, #28]
 8020644:	69fb      	ldr	r3, [r7, #28]
 8020646:	edd3 7a07 	vldr	s15, [r3, #28]
 802064a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802064e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020652:	69fb      	ldr	r3, [r7, #28]
 8020654:	edd3 6a08 	vldr	s13, [r3, #32]
 8020658:	69fb      	ldr	r3, [r7, #28]
 802065a:	edd3 7a08 	vldr	s15, [r3, #32]
 802065e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020666:	69fb      	ldr	r3, [r7, #28]
 8020668:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 802066c:	69fb      	ldr	r3, [r7, #28]
 802066e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8020672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020676:	ee77 7a27 	vadd.f32	s15, s14, s15
 802067a:	eeb0 0a67 	vmov.f32	s0, s15
 802067e:	f000 f831 	bl	80206e4 <_ZN8Madgwick7invSqrtEf>
 8020682:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 8020686:	69fb      	ldr	r3, [r7, #28]
 8020688:	ed93 7a06 	vldr	s14, [r3, #24]
 802068c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8020690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020694:	69fb      	ldr	r3, [r7, #28]
 8020696:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 *= recipNorm;
 802069a:	69fb      	ldr	r3, [r7, #28]
 802069c:	ed93 7a07 	vldr	s14, [r3, #28]
 80206a0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80206a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80206a8:	69fb      	ldr	r3, [r7, #28]
 80206aa:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 *= recipNorm;
 80206ae:	69fb      	ldr	r3, [r7, #28]
 80206b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80206b4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80206b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80206bc:	69fb      	ldr	r3, [r7, #28]
 80206be:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 *= recipNorm;
 80206c2:	69fb      	ldr	r3, [r7, #28]
 80206c4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80206c8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80206cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80206d0:	69fb      	ldr	r3, [r7, #28]
 80206d2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	anglesComputed = 0;
 80206d6:	69fb      	ldr	r3, [r7, #28]
 80206d8:	2200      	movs	r2, #0
 80206da:	751a      	strb	r2, [r3, #20]
}
 80206dc:	bf00      	nop
 80206de:	3778      	adds	r7, #120	@ 0x78
 80206e0:	46bd      	mov	sp, r7
 80206e2:	bd80      	pop	{r7, pc}

080206e4 <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 80206e4:	b480      	push	{r7}
 80206e6:	b087      	sub	sp, #28
 80206e8:	af00      	add	r7, sp, #0
 80206ea:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80206ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80206f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80206f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80206fa:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8020702:	f107 0310 	add.w	r3, r7, #16
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	105a      	asrs	r2, r3, #1
 802070e:	4b1c      	ldr	r3, [pc, #112]	@ (8020780 <_ZN8Madgwick7invSqrtEf+0x9c>)
 8020710:	1a9b      	subs	r3, r3, r2
 8020712:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8020714:	f107 030c 	add.w	r3, r7, #12
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 802071c:	ed97 7a04 	vldr	s14, [r7, #16]
 8020720:	edd7 7a05 	vldr	s15, [r7, #20]
 8020724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020728:	edd7 7a04 	vldr	s15, [r7, #16]
 802072c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020730:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8020734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020738:	edd7 7a04 	vldr	s15, [r7, #16]
 802073c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020740:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8020744:	ed97 7a04 	vldr	s14, [r7, #16]
 8020748:	edd7 7a05 	vldr	s15, [r7, #20]
 802074c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020750:	edd7 7a04 	vldr	s15, [r7, #16]
 8020754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020758:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 802075c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020760:	edd7 7a04 	vldr	s15, [r7, #16]
 8020764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020768:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 802076c:	693b      	ldr	r3, [r7, #16]
 802076e:	ee07 3a90 	vmov	s15, r3
}
 8020772:	eeb0 0a67 	vmov.f32	s0, s15
 8020776:	371c      	adds	r7, #28
 8020778:	46bd      	mov	sp, r7
 802077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802077e:	4770      	bx	lr
 8020780:	5f3759df 	.word	0x5f3759df

08020784 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>:

#include "core_hardware_button.h"



core_hardware_Button::core_hardware_Button(GPIO_TypeDef* port, uint16_t pin) {
 8020784:	b480      	push	{r7}
 8020786:	b085      	sub	sp, #20
 8020788:	af00      	add	r7, sp, #0
 802078a:	60f8      	str	r0, [r7, #12]
 802078c:	60b9      	str	r1, [r7, #8]
 802078e:	4613      	mov	r3, r2
 8020790:	80fb      	strh	r3, [r7, #6]
	this->port = port;
 8020792:	68fb      	ldr	r3, [r7, #12]
 8020794:	68ba      	ldr	r2, [r7, #8]
 8020796:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	88fa      	ldrh	r2, [r7, #6]
 802079c:	809a      	strh	r2, [r3, #4]
}
 802079e:	68fb      	ldr	r3, [r7, #12]
 80207a0:	4618      	mov	r0, r3
 80207a2:	3714      	adds	r7, #20
 80207a4:	46bd      	mov	sp, r7
 80207a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207aa:	4770      	bx	lr

080207ac <_ZN20core_hardware_Button5checkEv>:


uint8_t core_hardware_Button::check() {
 80207ac:	b580      	push	{r7, lr}
 80207ae:	b082      	sub	sp, #8
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	681a      	ldr	r2, [r3, #0]
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	889b      	ldrh	r3, [r3, #4]
 80207bc:	4619      	mov	r1, r3
 80207be:	4610      	mov	r0, r2
 80207c0:	f7e5 ff42 	bl	8006648 <HAL_GPIO_ReadPin>
 80207c4:	4603      	mov	r3, r0
}
 80207c6:	4618      	mov	r0, r3
 80207c8:	3708      	adds	r7, #8
 80207ca:	46bd      	mov	sp, r7
 80207cc:	bd80      	pop	{r7, pc}

080207ce <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>:
 */


#include "core_hardware_led.h"

core_hardware_LED::core_hardware_LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 80207ce:	b480      	push	{r7}
 80207d0:	b085      	sub	sp, #20
 80207d2:	af00      	add	r7, sp, #0
 80207d4:	60f8      	str	r0, [r7, #12]
 80207d6:	60b9      	str	r1, [r7, #8]
 80207d8:	4613      	mov	r3, r2
 80207da:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 80207dc:	68fb      	ldr	r3, [r7, #12]
 80207de:	68ba      	ldr	r2, [r7, #8]
 80207e0:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 80207e2:	68fb      	ldr	r3, [r7, #12]
 80207e4:	88fa      	ldrh	r2, [r7, #6]
 80207e6:	809a      	strh	r2, [r3, #4]
}
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	4618      	mov	r0, r3
 80207ec:	3714      	adds	r7, #20
 80207ee:	46bd      	mov	sp, r7
 80207f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207f4:	4770      	bx	lr

080207f6 <_ZN17core_hardware_LED2onEv>:

void core_hardware_LED::on() {
 80207f6:	b580      	push	{r7, lr}
 80207f8:	b082      	sub	sp, #8
 80207fa:	af00      	add	r7, sp, #0
 80207fc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	6818      	ldr	r0, [r3, #0]
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	889b      	ldrh	r3, [r3, #4]
 8020806:	2201      	movs	r2, #1
 8020808:	4619      	mov	r1, r3
 802080a:	f7e5 ff35 	bl	8006678 <HAL_GPIO_WritePin>
}
 802080e:	bf00      	nop
 8020810:	3708      	adds	r7, #8
 8020812:	46bd      	mov	sp, r7
 8020814:	bd80      	pop	{r7, pc}

08020816 <_ZN17core_hardware_LED3offEv>:


void core_hardware_LED::off() {
 8020816:	b580      	push	{r7, lr}
 8020818:	b082      	sub	sp, #8
 802081a:	af00      	add	r7, sp, #0
 802081c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	6818      	ldr	r0, [r3, #0]
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	889b      	ldrh	r3, [r3, #4]
 8020826:	2200      	movs	r2, #0
 8020828:	4619      	mov	r1, r3
 802082a:	f7e5 ff25 	bl	8006678 <HAL_GPIO_WritePin>
}
 802082e:	bf00      	nop
 8020830:	3708      	adds	r7, #8
 8020832:	46bd      	mov	sp, r7
 8020834:	bd80      	pop	{r7, pc}

08020836 <_ZN17core_hardware_LED6toggleEv>:

void core_hardware_LED::toggle() {
 8020836:	b580      	push	{r7, lr}
 8020838:	b082      	sub	sp, #8
 802083a:	af00      	add	r7, sp, #0
 802083c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	681a      	ldr	r2, [r3, #0]
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	889b      	ldrh	r3, [r3, #4]
 8020846:	4619      	mov	r1, r3
 8020848:	4610      	mov	r0, r2
 802084a:	f7e5 ff2e 	bl	80066aa <HAL_GPIO_TogglePin>
}
 802084e:	bf00      	nop
 8020850:	3708      	adds	r7, #8
 8020852:	46bd      	mov	sp, r7
 8020854:	bd80      	pop	{r7, pc}
	...

08020858 <_Z15spi_callback_rxP19__SPI_HandleTypeDef>:
#include "core_hardware_spi.h"

core_hardware_SPI_slave *active_spi_slave = NULL;

/* ====================================================== */
void spi_callback_rx(SPI_HandleTypeDef *hspi) {
 8020858:	b580      	push	{r7, lr}
 802085a:	b082      	sub	sp, #8
 802085c:	af00      	add	r7, sp, #0
 802085e:	6078      	str	r0, [r7, #4]

	if (active_spi_slave != NULL) {
 8020860:	4b06      	ldr	r3, [pc, #24]	@ (802087c <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 8020862:	681b      	ldr	r3, [r3, #0]
 8020864:	2b00      	cmp	r3, #0
 8020866:	d004      	beq.n	8020872 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rx_cmplt_function();
 8020868:	4b04      	ldr	r3, [pc, #16]	@ (802087c <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	4618      	mov	r0, r3
 802086e:	f000 f8eb 	bl	8020a48 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>
	}
}
 8020872:	bf00      	nop
 8020874:	3708      	adds	r7, #8
 8020876:	46bd      	mov	sp, r7
 8020878:	bd80      	pop	{r7, pc}
 802087a:	bf00      	nop
 802087c:	24022cec 	.word	0x24022cec

08020880 <_Z15spi_callback_txP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_tx(SPI_HandleTypeDef *hspi) {
 8020880:	b580      	push	{r7, lr}
 8020882:	b082      	sub	sp, #8
 8020884:	af00      	add	r7, sp, #0
 8020886:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 8020888:	4b06      	ldr	r3, [pc, #24]	@ (80208a4 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	2b00      	cmp	r3, #0
 802088e:	d004      	beq.n	802089a <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->tx_cmplt_function();
 8020890:	4b04      	ldr	r3, [pc, #16]	@ (80208a4 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	4618      	mov	r0, r3
 8020896:	f000 f8e8 	bl	8020a6a <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>
	}
}
 802089a:	bf00      	nop
 802089c:	3708      	adds	r7, #8
 802089e:	46bd      	mov	sp, r7
 80208a0:	bd80      	pop	{r7, pc}
 80208a2:	bf00      	nop
 80208a4:	24022cec 	.word	0x24022cec

080208a8 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_rxtx(SPI_HandleTypeDef *hspi) {
 80208a8:	b580      	push	{r7, lr}
 80208aa:	b082      	sub	sp, #8
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 80208b0:	4b06      	ldr	r3, [pc, #24]	@ (80208cc <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d004      	beq.n	80208c2 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rxtx_cmplt_function();
 80208b8:	4b04      	ldr	r3, [pc, #16]	@ (80208cc <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 80208ba:	681b      	ldr	r3, [r3, #0]
 80208bc:	4618      	mov	r0, r3
 80208be:	f000 f8e6 	bl	8020a8e <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>
	}
}
 80208c2:	bf00      	nop
 80208c4:	3708      	adds	r7, #8
 80208c6:	46bd      	mov	sp, r7
 80208c8:	bd80      	pop	{r7, pc}
 80208ca:	bf00      	nop
 80208cc:	24022cec 	.word	0x24022cec

080208d0 <_ZN29core_hardware_spi_callbacks_tC1Ev>:
	SPI_HandleTypeDef *hspi;
	uint8_t *rx_buffer;
	uint8_t *tx_buffer;
} core_hardware_spi_config_t;

typedef struct core_hardware_spi_callbacks_t {
 80208d0:	b580      	push	{r7, lr}
 80208d2:	b082      	sub	sp, #8
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	6078      	str	r0, [r7, #4]
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	4618      	mov	r0, r3
 80208dc:	f7f2 f940 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	3320      	adds	r3, #32
 80208e4:	4618      	mov	r0, r3
 80208e6:	f7f2 f93b 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	3340      	adds	r3, #64	@ 0x40
 80208ee:	4618      	mov	r0, r3
 80208f0:	f7f2 f936 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	4618      	mov	r0, r3
 80208f8:	3708      	adds	r7, #8
 80208fa:	46bd      	mov	sp, r7
 80208fc:	bd80      	pop	{r7, pc}

080208fe <_ZN23core_hardware_SPI_slaveC1Ev>:

/* ====================================================== */
core_hardware_SPI_slave::core_hardware_SPI_slave() {
 80208fe:	b580      	push	{r7, lr}
 8020900:	b082      	sub	sp, #8
 8020902:	af00      	add	r7, sp, #0
 8020904:	6078      	str	r0, [r7, #4]
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	330c      	adds	r3, #12
 802090a:	4618      	mov	r0, r3
 802090c:	f7ff ffe0 	bl	80208d0 <_ZN29core_hardware_spi_callbacks_tC1Ev>

}
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	4618      	mov	r0, r3
 8020914:	3708      	adds	r7, #8
 8020916:	46bd      	mov	sp, r7
 8020918:	bd80      	pop	{r7, pc}
	...

0802091c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>:

/* ====================================================== */
void core_hardware_SPI_slave::init(core_hardware_spi_config_t config) {
 802091c:	b590      	push	{r4, r7, lr}
 802091e:	b085      	sub	sp, #20
 8020920:	af00      	add	r7, sp, #0
 8020922:	60f8      	str	r0, [r7, #12]
 8020924:	4638      	mov	r0, r7
 8020926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	461c      	mov	r4, r3
 802092e:	463b      	mov	r3, r7
 8020930:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	active_spi_slave = this;
 8020938:	4a13      	ldr	r2, [pc, #76]	@ (8020988 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x6c>)
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	6013      	str	r3, [r2, #0]

	this->callbacks.rx_callback.registered = 0;
 802093e:	68fb      	ldr	r3, [r7, #12]
 8020940:	2200      	movs	r2, #0
 8020942:	741a      	strb	r2, [r3, #16]
	this->callbacks.tx_callback.registered = 0;
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	2200      	movs	r2, #0
 8020948:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	this->callbacks.rxtx_callback.registered = 0;
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	2200      	movs	r2, #0
 8020950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_RX_COMPLETE_CB_ID,
 8020954:	68fb      	ldr	r3, [r7, #12]
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	4a0c      	ldr	r2, [pc, #48]	@ (802098c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x70>)
 802095a:	2101      	movs	r1, #1
 802095c:	4618      	mov	r0, r3
 802095e:	f7e9 fb83 	bl	800a068 <HAL_SPI_RegisterCallback>
			spi_callback_rx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_COMPLETE_CB_ID,
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	4a0a      	ldr	r2, [pc, #40]	@ (8020990 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x74>)
 8020968:	2100      	movs	r1, #0
 802096a:	4618      	mov	r0, r3
 802096c:	f7e9 fb7c 	bl	800a068 <HAL_SPI_RegisterCallback>
			spi_callback_tx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_RX_COMPLETE_CB_ID,
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	4a07      	ldr	r2, [pc, #28]	@ (8020994 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x78>)
 8020976:	2102      	movs	r1, #2
 8020978:	4618      	mov	r0, r3
 802097a:	f7e9 fb75 	bl	800a068 <HAL_SPI_RegisterCallback>
			spi_callback_rxtx);
}
 802097e:	bf00      	nop
 8020980:	3714      	adds	r7, #20
 8020982:	46bd      	mov	sp, r7
 8020984:	bd90      	pop	{r4, r7, pc}
 8020986:	bf00      	nop
 8020988:	24022cec 	.word	0x24022cec
 802098c:	08020859 	.word	0x08020859
 8020990:	08020881 	.word	0x08020881
 8020994:	080208a9 	.word	0x080208a9

08020998 <_ZN23core_hardware_SPI_slave5startEv>:
/* ====================================================== */
void core_hardware_SPI_slave::start() {
 8020998:	b480      	push	{r7}
 802099a:	b083      	sub	sp, #12
 802099c:	af00      	add	r7, sp, #0
 802099e:	6078      	str	r0, [r7, #4]

}
 80209a0:	bf00      	nop
 80209a2:	370c      	adds	r7, #12
 80209a4:	46bd      	mov	sp, r7
 80209a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209aa:	4770      	bx	lr

080209ac <_ZN23core_hardware_SPI_slave11receiveDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::receiveData(uint16_t len) {
	HAL_SPI_Receive_DMA(this->config.hspi, this->config.rx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::receiveData(uint8_t *data, uint16_t len) {
 80209ac:	b580      	push	{r7, lr}
 80209ae:	b084      	sub	sp, #16
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	60f8      	str	r0, [r7, #12]
 80209b4:	60b9      	str	r1, [r7, #8]
 80209b6:	4613      	mov	r3, r2
 80209b8:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive_DMA(this->config.hspi, data, len);
 80209ba:	68fb      	ldr	r3, [r7, #12]
 80209bc:	681b      	ldr	r3, [r3, #0]
 80209be:	88fa      	ldrh	r2, [r7, #6]
 80209c0:	68b9      	ldr	r1, [r7, #8]
 80209c2:	4618      	mov	r0, r3
 80209c4:	f7ea f99e 	bl	800ad04 <HAL_SPI_Receive_DMA>
}
 80209c8:	bf00      	nop
 80209ca:	3710      	adds	r7, #16
 80209cc:	46bd      	mov	sp, r7
 80209ce:	bd80      	pop	{r7, pc}

080209d0 <_ZN23core_hardware_SPI_slave11provideDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint16_t len) {
	HAL_SPI_Transmit_DMA(this->config.hspi, this->config.tx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint8_t *data, uint16_t len) {
 80209d0:	b580      	push	{r7, lr}
 80209d2:	b084      	sub	sp, #16
 80209d4:	af00      	add	r7, sp, #0
 80209d6:	60f8      	str	r0, [r7, #12]
 80209d8:	60b9      	str	r1, [r7, #8]
 80209da:	4613      	mov	r3, r2
 80209dc:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit_DMA(this->config.hspi, data, len);
 80209de:	68fb      	ldr	r3, [r7, #12]
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	88fa      	ldrh	r2, [r7, #6]
 80209e4:	68b9      	ldr	r1, [r7, #8]
 80209e6:	4618      	mov	r0, r3
 80209e8:	f7ea f84a 	bl	800aa80 <HAL_SPI_Transmit_DMA>
}
 80209ec:	bf00      	nop
 80209ee:	3710      	adds	r7, #16
 80209f0:	46bd      	mov	sp, r7
 80209f2:	bd80      	pop	{r7, pc}

080209f4 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>:
	HAL_SPI_TransmitReceive_DMA(this->config.hspi, tx_buf, rx_buf, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::registerCallback(
		core_hardware_spi_callback_id_t callback_id,
		core_utils_Callback<void, void> callback) {
 80209f4:	b580      	push	{r7, lr}
 80209f6:	b084      	sub	sp, #16
 80209f8:	af00      	add	r7, sp, #0
 80209fa:	60f8      	str	r0, [r7, #12]
 80209fc:	460b      	mov	r3, r1
 80209fe:	607a      	str	r2, [r7, #4]
 8020a00:	72fb      	strb	r3, [r7, #11]

	switch (callback_id) {
 8020a02:	7afb      	ldrb	r3, [r7, #11]
 8020a04:	2b02      	cmp	r3, #2
 8020a06:	d014      	beq.n	8020a32 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x3e>
 8020a08:	2b02      	cmp	r3, #2
 8020a0a:	dc19      	bgt.n	8020a40 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d002      	beq.n	8020a16 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x22>
 8020a10:	2b01      	cmp	r3, #1
 8020a12:	d007      	beq.n	8020a24 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x30>
	case CORE_HARDWARE_SPI_CALLBACK_RXTX: {
		this->callbacks.rxtx_callback = callback;
		break;
	}
	}
}
 8020a14:	e014      	b.n	8020a40 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rx_callback = callback;
 8020a16:	68fb      	ldr	r3, [r7, #12]
 8020a18:	330c      	adds	r3, #12
 8020a1a:	6879      	ldr	r1, [r7, #4]
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	f7f2 fc0d 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020a22:	e00d      	b.n	8020a40 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.tx_callback = callback;
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	332c      	adds	r3, #44	@ 0x2c
 8020a28:	6879      	ldr	r1, [r7, #4]
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	f7f2 fc06 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020a30:	e006      	b.n	8020a40 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rxtx_callback = callback;
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	334c      	adds	r3, #76	@ 0x4c
 8020a36:	6879      	ldr	r1, [r7, #4]
 8020a38:	4618      	mov	r0, r3
 8020a3a:	f7f2 fbff 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020a3e:	bf00      	nop
}
 8020a40:	bf00      	nop
 8020a42:	3710      	adds	r7, #16
 8020a44:	46bd      	mov	sp, r7
 8020a46:	bd80      	pop	{r7, pc}

08020a48 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>:

/* ====================================================== */
void core_hardware_SPI_slave::rx_cmplt_function() {
 8020a48:	b580      	push	{r7, lr}
 8020a4a:	b082      	sub	sp, #8
 8020a4c:	af00      	add	r7, sp, #0
 8020a4e:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rx_callback.registered) {
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	7c1b      	ldrb	r3, [r3, #16]
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d004      	beq.n	8020a62 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv+0x1a>
		this->callbacks.rx_callback.call();
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	330c      	adds	r3, #12
 8020a5c:	4618      	mov	r0, r3
 8020a5e:	f7f1 fda2 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 8020a62:	bf00      	nop
 8020a64:	3708      	adds	r7, #8
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bd80      	pop	{r7, pc}

08020a6a <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::tx_cmplt_function() {
 8020a6a:	b580      	push	{r7, lr}
 8020a6c:	b082      	sub	sp, #8
 8020a6e:	af00      	add	r7, sp, #0
 8020a70:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.tx_callback.registered) {
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d004      	beq.n	8020a86 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv+0x1c>
		this->callbacks.tx_callback.call();
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	332c      	adds	r3, #44	@ 0x2c
 8020a80:	4618      	mov	r0, r3
 8020a82:	f7f1 fd90 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 8020a86:	bf00      	nop
 8020a88:	3708      	adds	r7, #8
 8020a8a:	46bd      	mov	sp, r7
 8020a8c:	bd80      	pop	{r7, pc}

08020a8e <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::rxtx_cmplt_function() {
 8020a8e:	b580      	push	{r7, lr}
 8020a90:	b082      	sub	sp, #8
 8020a92:	af00      	add	r7, sp, #0
 8020a94:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rxtx_callback.registered) {
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d004      	beq.n	8020aaa <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv+0x1c>
		this->callbacks.rxtx_callback.call();
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	334c      	adds	r3, #76	@ 0x4c
 8020aa4:	4618      	mov	r0, r3
 8020aa6:	f7f1 fd7e 	bl	80125a6 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 8020aaa:	bf00      	nop
 8020aac:	3708      	adds	r7, #8
 8020aae:	46bd      	mov	sp, r7
 8020ab0:	bd80      	pop	{r7, pc}
	...

08020ab4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft>:
		CORE_HARDWARE_UART_MODE_DMA, .cobs_encode_rx = 1, .cobs_encode_tx = 1,
		.queues = 1, };


/* ============================================================================= */
void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 8020ab4:	b580      	push	{r7, lr}
 8020ab6:	b084      	sub	sp, #16
 8020ab8:	af00      	add	r7, sp, #0
 8020aba:	6078      	str	r0, [r7, #4]
 8020abc:	460b      	mov	r3, r1
 8020abe:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < num_uarts; i++) {
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	60fb      	str	r3, [r7, #12]
 8020ac4:	e02b      	b.n	8020b1e <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x6a>
		if (!(uarts[i] == NULL) && (uarts[i]->get_huart() == huart)) {
 8020ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8020b34 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 8020ac8:	68fb      	ldr	r3, [r7, #12]
 8020aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d012      	beq.n	8020af8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 8020ad2:	4a18      	ldr	r2, [pc, #96]	@ (8020b34 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 8020ad4:	68fb      	ldr	r3, [r7, #12]
 8020ad6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020ada:	4916      	ldr	r1, [pc, #88]	@ (8020b34 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 8020adc:	68fb      	ldr	r3, [r7, #12]
 8020ade:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	3304      	adds	r3, #4
 8020ae6:	681b      	ldr	r3, [r3, #0]
 8020ae8:	4610      	mov	r0, r2
 8020aea:	4798      	blx	r3
 8020aec:	4602      	mov	r2, r0
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	4293      	cmp	r3, r2
 8020af2:	d101      	bne.n	8020af8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 8020af4:	2301      	movs	r3, #1
 8020af6:	e000      	b.n	8020afa <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x46>
 8020af8:	2300      	movs	r3, #0
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d00c      	beq.n	8020b18 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x64>
			uarts[i]->rxFunction(size);
 8020afe:	4a0d      	ldr	r2, [pc, #52]	@ (8020b34 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020b06:	490b      	ldr	r1, [pc, #44]	@ (8020b34 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 8020b08:	68fb      	ldr	r3, [r7, #12]
 8020b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	8879      	ldrh	r1, [r7, #2]
 8020b14:	4610      	mov	r0, r2
 8020b16:	4798      	blx	r3
	for (int i = 0; i < num_uarts; i++) {
 8020b18:	68fb      	ldr	r3, [r7, #12]
 8020b1a:	3301      	adds	r3, #1
 8020b1c:	60fb      	str	r3, [r7, #12]
 8020b1e:	4b06      	ldr	r3, [pc, #24]	@ (8020b38 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 8020b20:	781b      	ldrb	r3, [r3, #0]
 8020b22:	461a      	mov	r2, r3
 8020b24:	68fb      	ldr	r3, [r7, #12]
 8020b26:	4293      	cmp	r3, r2
 8020b28:	dbcd      	blt.n	8020ac6 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x12>
		}
	}
}
 8020b2a:	bf00      	nop
 8020b2c:	bf00      	nop
 8020b2e:	3710      	adds	r7, #16
 8020b30:	46bd      	mov	sp, r7
 8020b32:	bd80      	pop	{r7, pc}
 8020b34:	24022cf0 	.word	0x24022cf0
 8020b38:	24022d04 	.word	0x24022d04

08020b3c <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 8020b3c:	b480      	push	{r7}
 8020b3e:	b083      	sub	sp, #12
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 8020b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8020b4a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8020b6c <_Z7deg2radf+0x30>
 8020b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020b52:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8020b70 <_Z7deg2radf+0x34>
 8020b56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8020b5a:	eef0 7a66 	vmov.f32	s15, s13
}
 8020b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8020b62:	370c      	adds	r7, #12
 8020b64:	46bd      	mov	sp, r7
 8020b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b6a:	4770      	bx	lr
 8020b6c:	40490fdb 	.word	0x40490fdb
 8020b70:	43340000 	.word	0x43340000

08020b74 <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 8020b74:	b480      	push	{r7}
 8020b76:	b083      	sub	sp, #12
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	6078      	str	r0, [r7, #4]
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	f04f 0200 	mov.w	r2, #0
 8020b82:	601a      	str	r2, [r3, #0]
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	f04f 0200 	mov.w	r2, #0
 8020b8a:	605a      	str	r2, [r3, #4]
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	f04f 0200 	mov.w	r2, #0
 8020b92:	609a      	str	r2, [r3, #8]
 8020b94:	687b      	ldr	r3, [r7, #4]
 8020b96:	4618      	mov	r0, r3
 8020b98:	370c      	adds	r7, #12
 8020b9a:	46bd      	mov	sp, r7
 8020b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ba0:	4770      	bx	lr

08020ba2 <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 8020ba2:	b480      	push	{r7}
 8020ba4:	b083      	sub	sp, #12
 8020ba6:	af00      	add	r7, sp, #0
 8020ba8:	6078      	str	r0, [r7, #4]
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	220b      	movs	r2, #11
 8020bae:	701a      	strb	r2, [r3, #0]
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	2220      	movs	r2, #32
 8020bb4:	705a      	strb	r2, [r3, #1]
 8020bb6:	687b      	ldr	r3, [r7, #4]
 8020bb8:	2200      	movs	r2, #0
 8020bba:	709a      	strb	r2, [r3, #2]
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	2201      	movs	r2, #1
 8020bc0:	70da      	strb	r2, [r3, #3]
 8020bc2:	687b      	ldr	r3, [r7, #4]
 8020bc4:	4618      	mov	r0, r3
 8020bc6:	370c      	adds	r7, #12
 8020bc8:	46bd      	mov	sp, r7
 8020bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bce:	4770      	bx	lr

08020bd0 <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 8020bd0:	b480      	push	{r7}
 8020bd2:	b083      	sub	sp, #12
 8020bd4:	af00      	add	r7, sp, #0
 8020bd6:	6078      	str	r0, [r7, #4]
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	220a      	movs	r2, #10
 8020bdc:	701a      	strb	r2, [r3, #0]
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	2220      	movs	r2, #32
 8020be2:	705a      	strb	r2, [r3, #1]
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	2208      	movs	r2, #8
 8020be8:	709a      	strb	r2, [r3, #2]
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	2200      	movs	r2, #0
 8020bee:	70da      	strb	r2, [r3, #3]
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	370c      	adds	r7, #12
 8020bf6:	46bd      	mov	sp, r7
 8020bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bfc:	4770      	bx	lr

08020bfe <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_2000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 8020bfe:	b580      	push	{r7, lr}
 8020c00:	b082      	sub	sp, #8
 8020c02:	af00      	add	r7, sp, #0
 8020c04:	6078      	str	r0, [r7, #4]
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	330a      	adds	r3, #10
 8020c0a:	4618      	mov	r0, r3
 8020c0c:	f7ff ffc9 	bl	8020ba2 <_ZN19bmi160_gyr_config_tC1Ev>
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	330e      	adds	r3, #14
 8020c14:	4618      	mov	r0, r3
 8020c16:	f7ff ffdb 	bl	8020bd0 <_ZN19bmi160_acc_config_tC1Ev>
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	4618      	mov	r0, r3
 8020c1e:	3708      	adds	r7, #8
 8020c20:	46bd      	mov	sp, r7
 8020c22:	bd80      	pop	{r7, pc}

08020c24 <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 8020c24:	b580      	push	{r7, lr}
 8020c26:	b082      	sub	sp, #8
 8020c28:	af00      	add	r7, sp, #0
 8020c2a:	6078      	str	r0, [r7, #4]
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	332c      	adds	r3, #44	@ 0x2c
 8020c30:	4618      	mov	r0, r3
 8020c32:	f7ff ff9f 	bl	8020b74 <_ZN18bmi160_gyr_calib_tC1Ev>
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	3338      	adds	r3, #56	@ 0x38
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	f7ff ffdf 	bl	8020bfe <_ZN15bmi160_config_tC1Ev>

}
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	4618      	mov	r0, r3
 8020c44:	3708      	adds	r7, #8
 8020c46:	46bd      	mov	sp, r7
 8020c48:	bd80      	pop	{r7, pc}

08020c4a <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 8020c4a:	b580      	push	{r7, lr}
 8020c4c:	b082      	sub	sp, #8
 8020c4e:	af00      	add	r7, sp, #0
 8020c50:	6078      	str	r0, [r7, #4]
 8020c52:	460b      	mov	r3, r1
 8020c54:	70fb      	strb	r3, [r7, #3]
 8020c56:	4613      	mov	r3, r2
 8020c58:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020c64:	2200      	movs	r2, #0
 8020c66:	4619      	mov	r1, r3
 8020c68:	f7e5 fd06 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8020c70:	1cf9      	adds	r1, r7, #3
 8020c72:	2301      	movs	r3, #1
 8020c74:	2201      	movs	r2, #1
 8020c76:	f7e9 faa3 	bl	800a1c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 8020c7a:	687b      	ldr	r3, [r7, #4]
 8020c7c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8020c7e:	1cb9      	adds	r1, r7, #2
 8020c80:	2301      	movs	r3, #1
 8020c82:	2201      	movs	r2, #1
 8020c84:	f7e9 fa9c 	bl	800a1c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020c92:	2201      	movs	r2, #1
 8020c94:	4619      	mov	r1, r3
 8020c96:	f7e5 fcef 	bl	8006678 <HAL_GPIO_WritePin>

	return CORE_OK;
 8020c9a:	2301      	movs	r3, #1
}
 8020c9c:	4618      	mov	r0, r3
 8020c9e:	3708      	adds	r7, #8
 8020ca0:	46bd      	mov	sp, r7
 8020ca2:	bd80      	pop	{r7, pc}

08020ca4 <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 8020ca4:	b084      	sub	sp, #16
 8020ca6:	b5b0      	push	{r4, r5, r7, lr}
 8020ca8:	b084      	sub	sp, #16
 8020caa:	af00      	add	r7, sp, #0
 8020cac:	6078      	str	r0, [r7, #4]
 8020cae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8020cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	f103 0538 	add.w	r5, r3, #56	@ 0x38
 8020cbc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8020cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020cc2:	6028      	str	r0, [r5, #0]
 8020cc4:	6069      	str	r1, [r5, #4]
 8020cc6:	60aa      	str	r2, [r5, #8]
 8020cc8:	60eb      	str	r3, [r5, #12]
 8020cca:	8823      	ldrh	r3, [r4, #0]
 8020ccc:	822b      	strh	r3, [r5, #16]
	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020cd2:	687b      	ldr	r3, [r7, #4]
 8020cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020cd8:	2201      	movs	r2, #1
 8020cda:	4619      	mov	r1, r3
 8020cdc:	f7e5 fccc 	bl	8006678 <HAL_GPIO_WritePin>
	delay(250);
 8020ce0:	20fa      	movs	r0, #250	@ 0xfa
 8020ce2:	f7f6 fc0c 	bl	80174fe <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 8020ce6:	6878      	ldr	r0, [r7, #4]
 8020ce8:	f000 f8ed 	bl	8020ec6 <_ZN6BMI1605checkEv>
 8020cec:	4603      	mov	r3, r0
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	bf0c      	ite	eq
 8020cf2:	2301      	moveq	r3, #1
 8020cf4:	2300      	movne	r3, #0
 8020cf6:	b2db      	uxtb	r3, r3
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d001      	beq.n	8020d00 <_ZN6BMI1604initE15bmi160_config_t+0x5c>
		return 0;
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	e072      	b.n	8020de6 <_ZN6BMI1604initE15bmi160_config_t+0x142>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 8020d00:	6878      	ldr	r0, [r7, #4]
 8020d02:	f000 fd32 	bl	802176a <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 8020d06:	20fa      	movs	r0, #250	@ 0xfa
 8020d08:	f7f6 fbf9 	bl	80174fe <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 8020d0c:	217f      	movs	r1, #127	@ 0x7f
 8020d0e:	6878      	ldr	r0, [r7, #4]
 8020d10:	f000 f870 	bl	8020df4 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 8020d14:	2100      	movs	r1, #0
 8020d16:	6878      	ldr	r0, [r7, #4]
 8020d18:	f000 fcf2 	bl	8021700 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8020d28:	4313      	orrs	r3, r2
 8020d2a:	b2d9      	uxtb	r1, r3
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8020d32:	461a      	mov	r2, r3
 8020d34:	6878      	ldr	r0, [r7, #4]
 8020d36:	f000 fcca 	bl	80216ce <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8020d46:	4313      	orrs	r3, r2
 8020d48:	b2d9      	uxtb	r1, r3
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020d50:	461a      	mov	r2, r3
 8020d52:	6878      	ldr	r0, [r7, #4]
 8020d54:	f000 fca2 	bl	802169c <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 8020d58:	2140      	movs	r1, #64	@ 0x40
 8020d5a:	6878      	ldr	r0, [r7, #4]
 8020d5c:	f000 f84a 	bl	8020df4 <_ZN6BMI16012readRegisterEh>
 8020d60:	4603      	mov	r3, r0
 8020d62:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 8020d64:	2141      	movs	r1, #65	@ 0x41
 8020d66:	6878      	ldr	r0, [r7, #4]
 8020d68:	f000 f844 	bl	8020df4 <_ZN6BMI16012readRegisterEh>
 8020d6c:	4603      	mov	r3, r0
 8020d6e:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 8020d70:	2142      	movs	r1, #66	@ 0x42
 8020d72:	6878      	ldr	r0, [r7, #4]
 8020d74:	f000 f83e 	bl	8020df4 <_ZN6BMI16012readRegisterEh>
 8020d78:	4603      	mov	r3, r0
 8020d7a:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 8020d7c:	2143      	movs	r1, #67	@ 0x43
 8020d7e:	6878      	ldr	r0, [r7, #4]
 8020d80:	f000 f838 	bl	8020df4 <_ZN6BMI16012readRegisterEh>
 8020d84:	4603      	mov	r3, r0
 8020d86:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8020d8e:	687b      	ldr	r3, [r7, #4]
 8020d90:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8020d94:	4313      	orrs	r3, r2
 8020d96:	b2db      	uxtb	r3, r3
 8020d98:	7bfa      	ldrb	r2, [r7, #15]
 8020d9a:	429a      	cmp	r2, r3
 8020d9c:	d002      	beq.n	8020da4 <_ZN6BMI1604initE15bmi160_config_t+0x100>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8020d9e:	2008      	movs	r0, #8
 8020da0:	f000 fe2b 	bl	80219fa <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8020daa:	7bba      	ldrb	r2, [r7, #14]
 8020dac:	429a      	cmp	r2, r3
 8020dae:	d002      	beq.n	8020db6 <_ZN6BMI1604initE15bmi160_config_t+0x112>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8020db0:	2008      	movs	r0, #8
 8020db2:	f000 fe22 	bl	80219fa <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8020dbc:	687b      	ldr	r3, [r7, #4]
 8020dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8020dc2:	4313      	orrs	r3, r2
 8020dc4:	b2db      	uxtb	r3, r3
 8020dc6:	7b7a      	ldrb	r2, [r7, #13]
 8020dc8:	429a      	cmp	r2, r3
 8020dca:	d002      	beq.n	8020dd2 <_ZN6BMI1604initE15bmi160_config_t+0x12e>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8020dcc:	2008      	movs	r0, #8
 8020dce:	f000 fe14 	bl	80219fa <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020dd8:	7b3a      	ldrb	r2, [r7, #12]
 8020dda:	429a      	cmp	r2, r3
 8020ddc:	d002      	beq.n	8020de4 <_ZN6BMI1604initE15bmi160_config_t+0x140>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8020dde:	2008      	movs	r0, #8
 8020de0:	f000 fe0b 	bl	80219fa <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 8020de4:	2301      	movs	r3, #1
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	3710      	adds	r7, #16
 8020dea:	46bd      	mov	sp, r7
 8020dec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8020df0:	b004      	add	sp, #16
 8020df2:	4770      	bx	lr

08020df4 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 8020df4:	b580      	push	{r7, lr}
 8020df6:	b084      	sub	sp, #16
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	6078      	str	r0, [r7, #4]
 8020dfc:	460b      	mov	r3, r1
 8020dfe:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8020e00:	2300      	movs	r3, #0
 8020e02:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 8020e04:	78fb      	ldrb	r3, [r7, #3]
 8020e06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8020e0a:	b2db      	uxtb	r3, r3
 8020e0c:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020e18:	2200      	movs	r2, #0
 8020e1a:	4619      	mov	r1, r3
 8020e1c:	f7e5 fc2c 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8020e24:	1cf9      	adds	r1, r7, #3
 8020e26:	230a      	movs	r3, #10
 8020e28:	2201      	movs	r2, #1
 8020e2a:	f7e9 f9c9 	bl	800a1c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 10);
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8020e32:	f107 010f 	add.w	r1, r7, #15
 8020e36:	230a      	movs	r3, #10
 8020e38:	2201      	movs	r2, #1
 8020e3a:	f7e9 fbaf 	bl	800a59c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020e48:	2201      	movs	r2, #1
 8020e4a:	4619      	mov	r1, r3
 8020e4c:	f7e5 fc14 	bl	8006678 <HAL_GPIO_WritePin>

	return ret;
 8020e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8020e52:	4618      	mov	r0, r3
 8020e54:	3710      	adds	r7, #16
 8020e56:	46bd      	mov	sp, r7
 8020e58:	bd80      	pop	{r7, pc}

08020e5a <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 8020e5a:	b580      	push	{r7, lr}
 8020e5c:	b084      	sub	sp, #16
 8020e5e:	af00      	add	r7, sp, #0
 8020e60:	60f8      	str	r0, [r7, #12]
 8020e62:	607a      	str	r2, [r7, #4]
 8020e64:	461a      	mov	r2, r3
 8020e66:	460b      	mov	r3, r1
 8020e68:	72fb      	strb	r3, [r7, #11]
 8020e6a:	4613      	mov	r3, r2
 8020e6c:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 8020e6e:	7afb      	ldrb	r3, [r7, #11]
 8020e70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8020e74:	b2db      	uxtb	r3, r3
 8020e76:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8020e78:	68fb      	ldr	r3, [r7, #12]
 8020e7a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020e7c:	68fb      	ldr	r3, [r7, #12]
 8020e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020e82:	2200      	movs	r2, #0
 8020e84:	4619      	mov	r1, r3
 8020e86:	f7e5 fbf7 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 8020e8a:	68fb      	ldr	r3, [r7, #12]
 8020e8c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8020e8e:	f107 010b 	add.w	r1, r7, #11
 8020e92:	230a      	movs	r3, #10
 8020e94:	2201      	movs	r2, #1
 8020e96:	f7e9 f993 	bl	800a1c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 10);
 8020e9a:	68fb      	ldr	r3, [r7, #12]
 8020e9c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8020e9e:	7abb      	ldrb	r3, [r7, #10]
 8020ea0:	b29a      	uxth	r2, r3
 8020ea2:	230a      	movs	r3, #10
 8020ea4:	6879      	ldr	r1, [r7, #4]
 8020ea6:	f7e9 fb79 	bl	800a59c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8020eaa:	68fb      	ldr	r3, [r7, #12]
 8020eac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8020eae:	68fb      	ldr	r3, [r7, #12]
 8020eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8020eb4:	2201      	movs	r2, #1
 8020eb6:	4619      	mov	r1, r3
 8020eb8:	f7e5 fbde 	bl	8006678 <HAL_GPIO_WritePin>

	return CORE_OK;
 8020ebc:	2301      	movs	r3, #1
}
 8020ebe:	4618      	mov	r0, r3
 8020ec0:	3710      	adds	r7, #16
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	bd80      	pop	{r7, pc}

08020ec6 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 8020ec6:	b580      	push	{r7, lr}
 8020ec8:	b084      	sub	sp, #16
 8020eca:	af00      	add	r7, sp, #0
 8020ecc:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 8020ece:	6878      	ldr	r0, [r7, #4]
 8020ed0:	f000 f80c 	bl	8020eec <_ZN6BMI1606readIDEv>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 8020ed8:	7bfb      	ldrb	r3, [r7, #15]
 8020eda:	2bd1      	cmp	r3, #209	@ 0xd1
 8020edc:	d001      	beq.n	8020ee2 <_ZN6BMI1605checkEv+0x1c>
		return 0;
 8020ede:	2300      	movs	r3, #0
 8020ee0:	e000      	b.n	8020ee4 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 8020ee2:	2301      	movs	r3, #1
}
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	3710      	adds	r7, #16
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	bd80      	pop	{r7, pc}

08020eec <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 8020eec:	b580      	push	{r7, lr}
 8020eee:	b082      	sub	sp, #8
 8020ef0:	af00      	add	r7, sp, #0
 8020ef2:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 8020ef4:	2100      	movs	r1, #0
 8020ef6:	6878      	ldr	r0, [r7, #4]
 8020ef8:	f7ff ff7c 	bl	8020df4 <_ZN6BMI16012readRegisterEh>
 8020efc:	4603      	mov	r3, r0
}
 8020efe:	4618      	mov	r0, r3
 8020f00:	3708      	adds	r7, #8
 8020f02:	46bd      	mov	sp, r7
 8020f04:	bd80      	pop	{r7, pc}

08020f06 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 8020f06:	b580      	push	{r7, lr}
 8020f08:	b082      	sub	sp, #8
 8020f0a:	af00      	add	r7, sp, #0
 8020f0c:	6078      	str	r0, [r7, #4]
	this->fetchData();
 8020f0e:	6878      	ldr	r0, [r7, #4]
 8020f10:	f000 f807 	bl	8020f22 <_ZN6BMI1609fetchDataEv>
	this->processData();
 8020f14:	6878      	ldr	r0, [r7, #4]
 8020f16:	f000 f813 	bl	8020f40 <_ZN6BMI16011processDataEv>
}
 8020f1a:	bf00      	nop
 8020f1c:	3708      	adds	r7, #8
 8020f1e:	46bd      	mov	sp, r7
 8020f20:	bd80      	pop	{r7, pc}

08020f22 <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 8020f22:	b580      	push	{r7, lr}
 8020f24:	b082      	sub	sp, #8
 8020f26:	af00      	add	r7, sp, #0
 8020f28:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 8020f2a:	6878      	ldr	r0, [r7, #4]
 8020f2c:	f000 fb54 	bl	80215d8 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 8020f30:	6878      	ldr	r0, [r7, #4]
 8020f32:	f000 fb82 	bl	802163a <_ZN6BMI1607readAccEv>

	return 1;
 8020f36:	2301      	movs	r3, #1
}
 8020f38:	4618      	mov	r0, r3
 8020f3a:	3708      	adds	r7, #8
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd80      	pop	{r7, pc}

08020f40 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 8020f40:	b580      	push	{r7, lr}
 8020f42:	b082      	sub	sp, #8
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020f4e:	2b04      	cmp	r3, #4
 8020f50:	f200 8200 	bhi.w	8021354 <_ZN6BMI16011processDataEv+0x414>
 8020f54:	a201      	add	r2, pc, #4	@ (adr r2, 8020f5c <_ZN6BMI16011processDataEv+0x1c>)
 8020f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f5a:	bf00      	nop
 8020f5c:	08021299 	.word	0x08021299
 8020f60:	080211a5 	.word	0x080211a5
 8020f64:	080210e9 	.word	0x080210e9
 8020f68:	0802102d 	.word	0x0802102d
 8020f6c:	08020f71 	.word	0x08020f71
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8020f70:	687b      	ldr	r3, [r7, #4]
 8020f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f76:	ee07 3a90 	vmov	s15, r3
 8020f7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020f7e:	ed9f 5bc2 	vldr	d5, [pc, #776]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8020f82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020f86:	ed9f 6bb6 	vldr	d6, [pc, #728]	@ 8021260 <_ZN6BMI16011processDataEv+0x320>
 8020f8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020f8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020f92:	eeb0 0a67 	vmov.f32	s0, s15
 8020f96:	f7ff fdd1 	bl	8020b3c <_Z7deg2radf>
 8020f9a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8020fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020fb4:	ee07 3a90 	vmov	s15, r3
 8020fb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020fbc:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8020fc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020fc4:	ed9f 6ba6 	vldr	d6, [pc, #664]	@ 8021260 <_ZN6BMI16011processDataEv+0x320>
 8020fc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020fcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8020fd4:	f7ff fdb2 	bl	8020b3c <_Z7deg2radf>
 8020fd8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8020fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020ff2:	ee07 3a90 	vmov	s15, r3
 8020ff6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020ffa:	ed9f 5ba3 	vldr	d5, [pc, #652]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8020ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8021002:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8021260 <_ZN6BMI16011processDataEv+0x320>
 8021006:	ee27 7b06 	vmul.f64	d7, d7, d6
 802100a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802100e:	eeb0 0a67 	vmov.f32	s0, s15
 8021012:	f7ff fd93 	bl	8020b3c <_Z7deg2radf>
 8021016:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 802101a:	687b      	ldr	r3, [r7, #4]
 802101c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8021020:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 802102a:	e193      	b.n	8021354 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021032:	ee07 3a90 	vmov	s15, r3
 8021036:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802103a:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 802103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8021042:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8021268 <_ZN6BMI16011processDataEv+0x328>
 8021046:	ee27 7b06 	vmul.f64	d7, d7, d6
 802104a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802104e:	eeb0 0a67 	vmov.f32	s0, s15
 8021052:	f7ff fd73 	bl	8020b3c <_Z7deg2radf>
 8021056:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8021060:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021070:	ee07 3a90 	vmov	s15, r3
 8021074:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021078:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 802107c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8021080:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 8021268 <_ZN6BMI16011processDataEv+0x328>
 8021084:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021088:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802108c:	eeb0 0a67 	vmov.f32	s0, s15
 8021090:	f7ff fd54 	bl	8020b3c <_Z7deg2radf>
 8021094:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 802109e:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80210ae:	ee07 3a90 	vmov	s15, r3
 80210b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80210b6:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80210ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80210be:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8021268 <_ZN6BMI16011processDataEv+0x328>
 80210c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80210c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80210ca:	eeb0 0a67 	vmov.f32	s0, s15
 80210ce:	f7ff fd35 	bl	8020b3c <_Z7deg2radf>
 80210d2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80210dc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 80210e6:	e135      	b.n	8021354 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80210ee:	ee07 3a90 	vmov	s15, r3
 80210f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80210f6:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80210fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80210fe:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8021270 <_ZN6BMI16011processDataEv+0x330>
 8021102:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021106:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802110a:	eeb0 0a67 	vmov.f32	s0, s15
 802110e:	f7ff fd15 	bl	8020b3c <_Z7deg2radf>
 8021112:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 802111c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802112c:	ee07 3a90 	vmov	s15, r3
 8021130:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021134:	ed9f 5b54 	vldr	d5, [pc, #336]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021138:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802113c:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8021270 <_ZN6BMI16011processDataEv+0x330>
 8021140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021148:	eeb0 0a67 	vmov.f32	s0, s15
 802114c:	f7ff fcf6 	bl	8020b3c <_Z7deg2radf>
 8021150:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 802115a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802116a:	ee07 3a90 	vmov	s15, r3
 802116e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021172:	ed9f 5b45 	vldr	d5, [pc, #276]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021176:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802117a:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 8021270 <_ZN6BMI16011processDataEv+0x330>
 802117e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021182:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021186:	eeb0 0a67 	vmov.f32	s0, s15
 802118a:	f7ff fcd7 	bl	8020b3c <_Z7deg2radf>
 802118e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8021198:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 80211a2:	e0d7      	b.n	8021354 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80211aa:	ee07 3a90 	vmov	s15, r3
 80211ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80211b2:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80211b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80211ba:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8021278 <_ZN6BMI16011processDataEv+0x338>
 80211be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80211c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80211c6:	eeb0 0a67 	vmov.f32	s0, s15
 80211ca:	f7ff fcb7 	bl	8020b3c <_Z7deg2radf>
 80211ce:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80211d8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80211e8:	ee07 3a90 	vmov	s15, r3
 80211ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80211f0:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80211f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80211f8:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8021278 <_ZN6BMI16011processDataEv+0x338>
 80211fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021200:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021204:	eeb0 0a67 	vmov.f32	s0, s15
 8021208:	f7ff fc98 	bl	8020b3c <_Z7deg2radf>
 802120c:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8021216:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021226:	ee07 3a90 	vmov	s15, r3
 802122a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802122e:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021232:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8021236:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8021278 <_ZN6BMI16011processDataEv+0x338>
 802123a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802123e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021242:	eeb0 0a67 	vmov.f32	s0, s15
 8021246:	f7ff fc79 	bl	8020b3c <_Z7deg2radf>
 802124a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8021254:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 802125e:	e079      	b.n	8021354 <_ZN6BMI16011processDataEv+0x414>
 8021260:	00000000 	.word	0x00000000
 8021264:	405f4000 	.word	0x405f4000
 8021268:	00000000 	.word	0x00000000
 802126c:	406f4000 	.word	0x406f4000
 8021270:	00000000 	.word	0x00000000
 8021274:	407f4000 	.word	0x407f4000
 8021278:	00000000 	.word	0x00000000
 802127c:	408f4000 	.word	0x408f4000
 8021280:	00000000 	.word	0x00000000
 8021284:	409f4000 	.word	0x409f4000
 8021288:	00000000 	.word	0x00000000
 802128c:	40e00000 	.word	0x40e00000
 8021290:	51eb851f 	.word	0x51eb851f
 8021294:	40239eb8 	.word	0x40239eb8
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802129e:	ee07 3a90 	vmov	s15, r3
 80212a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80212a6:	ed1f 5b08 	vldr	d5, [pc, #-32]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80212aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80212ae:	ed1f 6b0c 	vldr	d6, [pc, #-48]	@ 8021280 <_ZN6BMI16011processDataEv+0x340>
 80212b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80212b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80212ba:	eeb0 0a67 	vmov.f32	s0, s15
 80212be:	f7ff fc3d 	bl	8020b3c <_Z7deg2radf>
 80212c2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80212cc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80212dc:	ee07 3a90 	vmov	s15, r3
 80212e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80212e4:	ed1f 5b18 	vldr	d5, [pc, #-96]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80212e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80212ec:	ed1f 6b1c 	vldr	d6, [pc, #-112]	@ 8021280 <_ZN6BMI16011processDataEv+0x340>
 80212f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80212f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80212f8:	eeb0 0a67 	vmov.f32	s0, s15
 80212fc:	f7ff fc1e 	bl	8020b3c <_Z7deg2radf>
 8021300:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 802130a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802131a:	ee07 3a90 	vmov	s15, r3
 802131e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021322:	ed1f 5b27 	vldr	d5, [pc, #-156]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021326:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802132a:	ed1f 6b2b 	vldr	d6, [pc, #-172]	@ 8021280 <_ZN6BMI16011processDataEv+0x340>
 802132e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021336:	eeb0 0a67 	vmov.f32	s0, s15
 802133a:	f7ff fbff 	bl	8020b3c <_Z7deg2radf>
 802133e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8021348:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8021352:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 802135a:	3b03      	subs	r3, #3
 802135c:	2b09      	cmp	r3, #9
 802135e:	f200 8135 	bhi.w	80215cc <_ZN6BMI16011processDataEv+0x68c>
 8021362:	a201      	add	r2, pc, #4	@ (adr r2, 8021368 <_ZN6BMI16011processDataEv+0x428>)
 8021364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021368:	08021391 	.word	0x08021391
 802136c:	080215cd 	.word	0x080215cd
 8021370:	08021417 	.word	0x08021417
 8021374:	080215cd 	.word	0x080215cd
 8021378:	080215cd 	.word	0x080215cd
 802137c:	080214a9 	.word	0x080214a9
 8021380:	080215cd 	.word	0x080215cd
 8021384:	080215cd 	.word	0x080215cd
 8021388:	080215cd 	.word	0x080215cd
 802138c:	0802153b 	.word	0x0802153b
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8021396:	ee07 3a90 	vmov	s15, r3
 802139a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802139e:	ed1f 5b46 	vldr	d5, [pc, #-280]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80213a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80213a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80213aa:	ed1f 6b47 	vldr	d6, [pc, #-284]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 80213ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80213b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 80213bc:	687b      	ldr	r3, [r7, #4]
 80213be:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80213c2:	ee07 3a90 	vmov	s15, r3
 80213c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80213ca:	ed1f 5b51 	vldr	d5, [pc, #-324]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80213ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80213d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80213d6:	ed1f 6b52 	vldr	d6, [pc, #-328]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 80213da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80213de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 80213e8:	687b      	ldr	r3, [r7, #4]
 80213ea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80213ee:	ee07 3a90 	vmov	s15, r3
 80213f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80213f6:	ed1f 5b5c 	vldr	d5, [pc, #-368]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80213fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80213fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021402:	ed1f 6b5d 	vldr	d6, [pc, #-372]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 8021406:	ee27 7b06 	vmul.f64	d7, d7, d6
 802140a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 8021414:	e0da      	b.n	80215cc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 802141c:	ee07 3a90 	vmov	s15, r3
 8021420:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021424:	ed1f 5b68 	vldr	d5, [pc, #-416]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021428:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802142c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8021430:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021434:	ed1f 6b6a 	vldr	d6, [pc, #-424]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 8021438:	ee27 7b06 	vmul.f64	d7, d7, d6
 802143c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 802144c:	ee07 3a90 	vmov	s15, r3
 8021450:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021454:	ed1f 5b74 	vldr	d5, [pc, #-464]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021458:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802145c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8021460:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021464:	ed1f 6b76 	vldr	d6, [pc, #-472]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 8021468:	ee27 7b06 	vmul.f64	d7, d7, d6
 802146c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802147c:	ee07 3a90 	vmov	s15, r3
 8021480:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021484:	ed1f 5b80 	vldr	d5, [pc, #-512]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 8021488:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802148c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8021490:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021494:	ed1f 6b82 	vldr	d6, [pc, #-520]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 8021498:	ee27 7b06 	vmul.f64	d7, d7, d6
 802149c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 80214a6:	e091      	b.n	80215cc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80214ae:	ee07 3a90 	vmov	s15, r3
 80214b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80214b6:	ed1f 5b8c 	vldr	d5, [pc, #-560]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80214ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80214be:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80214c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214c6:	ed1f 6b8e 	vldr	d6, [pc, #-568]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 80214ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80214de:	ee07 3a90 	vmov	s15, r3
 80214e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80214e6:	ed1f 5b98 	vldr	d5, [pc, #-608]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80214ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80214ee:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80214f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214f6:	ed1f 6b9a 	vldr	d6, [pc, #-616]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 80214fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802150e:	ee07 3a90 	vmov	s15, r3
 8021512:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021516:	ed1f 5ba4 	vldr	d5, [pc, #-656]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 802151a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802151e:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 8021522:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021526:	ed1f 6ba6 	vldr	d6, [pc, #-664]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 802152a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802152e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 8021538:	e048      	b.n	80215cc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8021540:	ee07 3a90 	vmov	s15, r3
 8021544:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021548:	ed1f 5bb1 	vldr	d5, [pc, #-708]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 802154c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8021550:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 8021554:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021558:	ed1f 6bb3 	vldr	d6, [pc, #-716]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 802155c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021560:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8021570:	ee07 3a90 	vmov	s15, r3
 8021574:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021578:	ed1f 5bbd 	vldr	d5, [pc, #-756]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 802157c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8021580:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 8021584:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021588:	ed1f 6bbf 	vldr	d6, [pc, #-764]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 802158c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021590:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80215a0:	ee07 3a90 	vmov	s15, r3
 80215a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80215a8:	ed1f 5bc9 	vldr	d5, [pc, #-804]	@ 8021288 <_ZN6BMI16011processDataEv+0x348>
 80215ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80215b0:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 80215b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80215b8:	ed1f 6bcb 	vldr	d6, [pc, #-812]	@ 8021290 <_ZN6BMI16011processDataEv+0x350>
 80215bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80215c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 80215ca:	bf00      	nop
	}
	}

	return 1;
 80215cc:	2301      	movs	r3, #1
}
 80215ce:	4618      	mov	r0, r3
 80215d0:	3708      	adds	r7, #8
 80215d2:	46bd      	mov	sp, r7
 80215d4:	bd80      	pop	{r7, pc}
 80215d6:	bf00      	nop

080215d8 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 80215d8:	b580      	push	{r7, lr}
 80215da:	b084      	sub	sp, #16
 80215dc:	af00      	add	r7, sp, #0
 80215de:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 80215e0:	2300      	movs	r3, #0
 80215e2:	60bb      	str	r3, [r7, #8]
 80215e4:	2300      	movs	r3, #0
 80215e6:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 80215e8:	f107 0208 	add.w	r2, r7, #8
 80215ec:	2306      	movs	r3, #6
 80215ee:	210c      	movs	r1, #12
 80215f0:	6878      	ldr	r0, [r7, #4]
 80215f2:	f7ff fc32 	bl	8020e5a <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 80215f6:	f107 0308 	add.w	r3, r7, #8
 80215fa:	4618      	mov	r0, r3
 80215fc:	f000 f9af 	bl	802195e <_Z18bytearray_to_int16Ph>
 8021600:	4603      	mov	r3, r0
 8021602:	461a      	mov	r2, r3
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 8021608:	f107 0308 	add.w	r3, r7, #8
 802160c:	3302      	adds	r3, #2
 802160e:	4618      	mov	r0, r3
 8021610:	f000 f9a5 	bl	802195e <_Z18bytearray_to_int16Ph>
 8021614:	4603      	mov	r3, r0
 8021616:	461a      	mov	r2, r3
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 802161c:	f107 0308 	add.w	r3, r7, #8
 8021620:	3304      	adds	r3, #4
 8021622:	4618      	mov	r0, r3
 8021624:	f000 f99b 	bl	802195e <_Z18bytearray_to_int16Ph>
 8021628:	4603      	mov	r3, r0
 802162a:	461a      	mov	r2, r3
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	809a      	strh	r2, [r3, #4]

	return 1;
 8021630:	2301      	movs	r3, #1
}
 8021632:	4618      	mov	r0, r3
 8021634:	3710      	adds	r7, #16
 8021636:	46bd      	mov	sp, r7
 8021638:	bd80      	pop	{r7, pc}

0802163a <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 802163a:	b580      	push	{r7, lr}
 802163c:	b084      	sub	sp, #16
 802163e:	af00      	add	r7, sp, #0
 8021640:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 8021642:	2300      	movs	r3, #0
 8021644:	60bb      	str	r3, [r7, #8]
 8021646:	2300      	movs	r3, #0
 8021648:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 802164a:	f107 0208 	add.w	r2, r7, #8
 802164e:	2306      	movs	r3, #6
 8021650:	2112      	movs	r1, #18
 8021652:	6878      	ldr	r0, [r7, #4]
 8021654:	f7ff fc01 	bl	8020e5a <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 8021658:	f107 0308 	add.w	r3, r7, #8
 802165c:	4618      	mov	r0, r3
 802165e:	f000 f97e 	bl	802195e <_Z18bytearray_to_int16Ph>
 8021662:	4603      	mov	r3, r0
 8021664:	461a      	mov	r2, r3
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 802166a:	f107 0308 	add.w	r3, r7, #8
 802166e:	3302      	adds	r3, #2
 8021670:	4618      	mov	r0, r3
 8021672:	f000 f974 	bl	802195e <_Z18bytearray_to_int16Ph>
 8021676:	4603      	mov	r3, r0
 8021678:	461a      	mov	r2, r3
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 802167e:	f107 0308 	add.w	r3, r7, #8
 8021682:	3304      	adds	r3, #4
 8021684:	4618      	mov	r0, r3
 8021686:	f000 f96a 	bl	802195e <_Z18bytearray_to_int16Ph>
 802168a:	4603      	mov	r3, r0
 802168c:	461a      	mov	r2, r3
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	831a      	strh	r2, [r3, #24]

	return 1;
 8021692:	2301      	movs	r3, #1
}
 8021694:	4618      	mov	r0, r3
 8021696:	3710      	adds	r7, #16
 8021698:	46bd      	mov	sp, r7
 802169a:	bd80      	pop	{r7, pc}

0802169c <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 802169c:	b580      	push	{r7, lr}
 802169e:	b082      	sub	sp, #8
 80216a0:	af00      	add	r7, sp, #0
 80216a2:	6078      	str	r0, [r7, #4]
 80216a4:	460b      	mov	r3, r1
 80216a6:	70fb      	strb	r3, [r7, #3]
 80216a8:	4613      	mov	r3, r2
 80216aa:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 80216ac:	78bb      	ldrb	r3, [r7, #2]
 80216ae:	461a      	mov	r2, r3
 80216b0:	2143      	movs	r1, #67	@ 0x43
 80216b2:	6878      	ldr	r0, [r7, #4]
 80216b4:	f7ff fac9 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 80216b8:	78fb      	ldrb	r3, [r7, #3]
 80216ba:	461a      	mov	r2, r3
 80216bc:	2142      	movs	r1, #66	@ 0x42
 80216be:	6878      	ldr	r0, [r7, #4]
 80216c0:	f7ff fac3 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 80216c4:	2301      	movs	r3, #1
}
 80216c6:	4618      	mov	r0, r3
 80216c8:	3708      	adds	r7, #8
 80216ca:	46bd      	mov	sp, r7
 80216cc:	bd80      	pop	{r7, pc}

080216ce <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 80216ce:	b580      	push	{r7, lr}
 80216d0:	b082      	sub	sp, #8
 80216d2:	af00      	add	r7, sp, #0
 80216d4:	6078      	str	r0, [r7, #4]
 80216d6:	460b      	mov	r3, r1
 80216d8:	70fb      	strb	r3, [r7, #3]
 80216da:	4613      	mov	r3, r2
 80216dc:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 80216de:	78fb      	ldrb	r3, [r7, #3]
 80216e0:	461a      	mov	r2, r3
 80216e2:	2140      	movs	r1, #64	@ 0x40
 80216e4:	6878      	ldr	r0, [r7, #4]
 80216e6:	f7ff fab0 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 80216ea:	78bb      	ldrb	r3, [r7, #2]
 80216ec:	461a      	mov	r2, r3
 80216ee:	2141      	movs	r1, #65	@ 0x41
 80216f0:	6878      	ldr	r0, [r7, #4]
 80216f2:	f7ff faaa 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 80216f6:	2301      	movs	r3, #1
}
 80216f8:	4618      	mov	r0, r3
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bd80      	pop	{r7, pc}

08021700 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 8021700:	b580      	push	{r7, lr}
 8021702:	b082      	sub	sp, #8
 8021704:	af00      	add	r7, sp, #0
 8021706:	6078      	str	r0, [r7, #4]
 8021708:	460b      	mov	r3, r1
 802170a:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 802170c:	78fb      	ldrb	r3, [r7, #3]
 802170e:	2b00      	cmp	r3, #0
 8021710:	d113      	bne.n	802173a <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 8021712:	2064      	movs	r0, #100	@ 0x64
 8021714:	f7f5 fef3 	bl	80174fe <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 8021718:	2215      	movs	r2, #21
 802171a:	217e      	movs	r1, #126	@ 0x7e
 802171c:	6878      	ldr	r0, [r7, #4]
 802171e:	f7ff fa94 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8021722:	20fa      	movs	r0, #250	@ 0xfa
 8021724:	f7f5 feeb 	bl	80174fe <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 8021728:	2211      	movs	r2, #17
 802172a:	217e      	movs	r1, #126	@ 0x7e
 802172c:	6878      	ldr	r0, [r7, #4]
 802172e:	f7ff fa8c 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8021732:	20fa      	movs	r0, #250	@ 0xfa
 8021734:	f7f5 fee3 	bl	80174fe <_Z5delaym>
 8021738:	e012      	b.n	8021760 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 802173a:	78fb      	ldrb	r3, [r7, #3]
 802173c:	2b01      	cmp	r3, #1
 802173e:	d10f      	bne.n	8021760 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 8021740:	2210      	movs	r2, #16
 8021742:	217e      	movs	r1, #126	@ 0x7e
 8021744:	6878      	ldr	r0, [r7, #4]
 8021746:	f7ff fa80 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 802174a:	2064      	movs	r0, #100	@ 0x64
 802174c:	f7f5 fed7 	bl	80174fe <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 8021750:	2214      	movs	r2, #20
 8021752:	217e      	movs	r1, #126	@ 0x7e
 8021754:	6878      	ldr	r0, [r7, #4]
 8021756:	f7ff fa78 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 802175a:	2064      	movs	r0, #100	@ 0x64
 802175c:	f7f5 fecf 	bl	80174fe <_Z5delaym>
	}
	return CORE_OK;
 8021760:	2301      	movs	r3, #1
}
 8021762:	4618      	mov	r0, r3
 8021764:	3708      	adds	r7, #8
 8021766:	46bd      	mov	sp, r7
 8021768:	bd80      	pop	{r7, pc}

0802176a <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 802176a:	b580      	push	{r7, lr}
 802176c:	b082      	sub	sp, #8
 802176e:	af00      	add	r7, sp, #0
 8021770:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 8021772:	22b6      	movs	r2, #182	@ 0xb6
 8021774:	217e      	movs	r1, #126	@ 0x7e
 8021776:	6878      	ldr	r0, [r7, #4]
 8021778:	f7ff fa67 	bl	8020c4a <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 802177c:	200a      	movs	r0, #10
 802177e:	f7f5 febe 	bl	80174fe <_Z5delaym>
}
 8021782:	bf00      	nop
 8021784:	3708      	adds	r7, #8
 8021786:	46bd      	mov	sp, r7
 8021788:	bd80      	pop	{r7, pc}

0802178a <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 802178a:	b480      	push	{r7}
 802178c:	b089      	sub	sp, #36	@ 0x24
 802178e:	af00      	add	r7, sp, #0
 8021790:	60f8      	str	r0, [r7, #12]
 8021792:	460b      	mov	r3, r1
 8021794:	607a      	str	r2, [r7, #4]
 8021796:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 802179c:	69fb      	ldr	r3, [r7, #28]
 802179e:	1c5a      	adds	r2, r3, #1
 80217a0:	61fa      	str	r2, [r7, #28]
 80217a2:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 80217a4:	2301      	movs	r3, #1
 80217a6:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 80217a8:	68fb      	ldr	r3, [r7, #12]
 80217aa:	613b      	str	r3, [r7, #16]
 80217ac:	e027      	b.n	80217fe <_Z10cobsEncodePhhS_+0x74>
	{
		if (*byte) // Byte not zero, write it
 80217ae:	693b      	ldr	r3, [r7, #16]
 80217b0:	781b      	ldrb	r3, [r3, #0]
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d008      	beq.n	80217c8 <_Z10cobsEncodePhhS_+0x3e>
			*encode++ = *byte, ++code;
 80217b6:	69fb      	ldr	r3, [r7, #28]
 80217b8:	1c5a      	adds	r2, r3, #1
 80217ba:	61fa      	str	r2, [r7, #28]
 80217bc:	693a      	ldr	r2, [r7, #16]
 80217be:	7812      	ldrb	r2, [r2, #0]
 80217c0:	701a      	strb	r2, [r3, #0]
 80217c2:	7dfb      	ldrb	r3, [r7, #23]
 80217c4:	3301      	adds	r3, #1
 80217c6:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 80217c8:	693b      	ldr	r3, [r7, #16]
 80217ca:	781b      	ldrb	r3, [r3, #0]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d002      	beq.n	80217d6 <_Z10cobsEncodePhhS_+0x4c>
 80217d0:	7dfb      	ldrb	r3, [r7, #23]
 80217d2:	2bff      	cmp	r3, #255	@ 0xff
 80217d4:	d110      	bne.n	80217f8 <_Z10cobsEncodePhhS_+0x6e>
		{
			*codep = code, code = 1, codep = encode;
 80217d6:	69bb      	ldr	r3, [r7, #24]
 80217d8:	7dfa      	ldrb	r2, [r7, #23]
 80217da:	701a      	strb	r2, [r3, #0]
 80217dc:	2301      	movs	r3, #1
 80217de:	75fb      	strb	r3, [r7, #23]
 80217e0:	69fb      	ldr	r3, [r7, #28]
 80217e2:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 80217e4:	693b      	ldr	r3, [r7, #16]
 80217e6:	781b      	ldrb	r3, [r3, #0]
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	d002      	beq.n	80217f2 <_Z10cobsEncodePhhS_+0x68>
 80217ec:	7afb      	ldrb	r3, [r7, #11]
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	d002      	beq.n	80217f8 <_Z10cobsEncodePhhS_+0x6e>
				++encode;
 80217f2:	69fb      	ldr	r3, [r7, #28]
 80217f4:	3301      	adds	r3, #1
 80217f6:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 80217f8:	693b      	ldr	r3, [r7, #16]
 80217fa:	3301      	adds	r3, #1
 80217fc:	613b      	str	r3, [r7, #16]
 80217fe:	7afb      	ldrb	r3, [r7, #11]
 8021800:	1e5a      	subs	r2, r3, #1
 8021802:	72fa      	strb	r2, [r7, #11]
 8021804:	2b00      	cmp	r3, #0
 8021806:	bf14      	ite	ne
 8021808:	2301      	movne	r3, #1
 802180a:	2300      	moveq	r3, #0
 802180c:	b2db      	uxtb	r3, r3
 802180e:	2b00      	cmp	r3, #0
 8021810:	d1cd      	bne.n	80217ae <_Z10cobsEncodePhhS_+0x24>
		}
	}
	*codep = code; // Write final code value
 8021812:	69bb      	ldr	r3, [r7, #24]
 8021814:	7dfa      	ldrb	r2, [r7, #23]
 8021816:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 8021818:	69fa      	ldr	r2, [r7, #28]
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	1ad3      	subs	r3, r2, r3
 802181e:	b2db      	uxtb	r3, r3
}
 8021820:	4618      	mov	r0, r3
 8021822:	3724      	adds	r7, #36	@ 0x24
 8021824:	46bd      	mov	sp, r7
 8021826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802182a:	4770      	bx	lr

0802182c <_Z10cobsDecodePhhS_>:
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
uint8_t cobsDecode(uint8_t *buffer, uint8_t length, uint8_t *data)
{
 802182c:	b480      	push	{r7}
 802182e:	b089      	sub	sp, #36	@ 0x24
 8021830:	af00      	add	r7, sp, #0
 8021832:	60f8      	str	r0, [r7, #12]
 8021834:	460b      	mov	r3, r1
 8021836:	607a      	str	r2, [r7, #4]
 8021838:	72fb      	strb	r3, [r7, #11]

	const uint8_t *byte = buffer; // Encoded input byte pointer
 802183a:	68fb      	ldr	r3, [r7, #12]
 802183c:	61fb      	str	r3, [r7, #28]
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	61bb      	str	r3, [r7, #24]

	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8021842:	23ff      	movs	r3, #255	@ 0xff
 8021844:	75fb      	strb	r3, [r7, #23]
 8021846:	2300      	movs	r3, #0
 8021848:	75bb      	strb	r3, [r7, #22]
 802184a:	e020      	b.n	802188e <_Z10cobsDecodePhhS_+0x62>
	{
		if (block) // Decode block byte
 802184c:	7dbb      	ldrb	r3, [r7, #22]
 802184e:	2b00      	cmp	r3, #0
 8021850:	d008      	beq.n	8021864 <_Z10cobsDecodePhhS_+0x38>
			*decode++ = *byte++;
 8021852:	69fa      	ldr	r2, [r7, #28]
 8021854:	1c53      	adds	r3, r2, #1
 8021856:	61fb      	str	r3, [r7, #28]
 8021858:	69bb      	ldr	r3, [r7, #24]
 802185a:	1c59      	adds	r1, r3, #1
 802185c:	61b9      	str	r1, [r7, #24]
 802185e:	7812      	ldrb	r2, [r2, #0]
 8021860:	701a      	strb	r2, [r3, #0]
 8021862:	e011      	b.n	8021888 <_Z10cobsDecodePhhS_+0x5c>
		else
		{
			if (code != 0xff) // Encoded zero, write it
 8021864:	7dfb      	ldrb	r3, [r7, #23]
 8021866:	2bff      	cmp	r3, #255	@ 0xff
 8021868:	d004      	beq.n	8021874 <_Z10cobsDecodePhhS_+0x48>
				*decode++ = 0;
 802186a:	69bb      	ldr	r3, [r7, #24]
 802186c:	1c5a      	adds	r2, r3, #1
 802186e:	61ba      	str	r2, [r7, #24]
 8021870:	2200      	movs	r2, #0
 8021872:	701a      	strb	r2, [r3, #0]
			block = code = *byte++; // Next block length
 8021874:	69fb      	ldr	r3, [r7, #28]
 8021876:	1c5a      	adds	r2, r3, #1
 8021878:	61fa      	str	r2, [r7, #28]
 802187a:	781b      	ldrb	r3, [r3, #0]
 802187c:	75fb      	strb	r3, [r7, #23]
 802187e:	7dfb      	ldrb	r3, [r7, #23]
 8021880:	75bb      	strb	r3, [r7, #22]
			if (!code) // Delimiter code found
 8021882:	7dfb      	ldrb	r3, [r7, #23]
 8021884:	2b00      	cmp	r3, #0
 8021886:	d009      	beq.n	802189c <_Z10cobsDecodePhhS_+0x70>
	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8021888:	7dbb      	ldrb	r3, [r7, #22]
 802188a:	3b01      	subs	r3, #1
 802188c:	75bb      	strb	r3, [r7, #22]
 802188e:	7afb      	ldrb	r3, [r7, #11]
 8021890:	68fa      	ldr	r2, [r7, #12]
 8021892:	4413      	add	r3, r2
 8021894:	69fa      	ldr	r2, [r7, #28]
 8021896:	429a      	cmp	r2, r3
 8021898:	d3d8      	bcc.n	802184c <_Z10cobsDecodePhhS_+0x20>
 802189a:	e000      	b.n	802189e <_Z10cobsDecodePhhS_+0x72>
				break;
 802189c:	bf00      	nop
		}
	}

	return (uint8_t)(decode - (uint8_t *)data);
 802189e:	69ba      	ldr	r2, [r7, #24]
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	1ad3      	subs	r3, r2, r3
 80218a4:	b2db      	uxtb	r3, r3
}
 80218a6:	4618      	mov	r0, r3
 80218a8:	3724      	adds	r7, #36	@ 0x24
 80218aa:	46bd      	mov	sp, r7
 80218ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b0:	4770      	bx	lr
	...

080218b4 <_Z17cobsDecodeInPlacePhh>:



uint8_t cobsDecodeInPlace(uint8_t *buffer, uint8_t length)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	b084      	sub	sp, #16
 80218b8:	af00      	add	r7, sp, #0
 80218ba:	6078      	str	r0, [r7, #4]
 80218bc:	460b      	mov	r3, r1
 80218be:	70fb      	strb	r3, [r7, #3]
	uint8_t decode_len = cobsDecode(buffer, length, cobsDecodeBuffer);
 80218c0:	78fb      	ldrb	r3, [r7, #3]
 80218c2:	4a0f      	ldr	r2, [pc, #60]	@ (8021900 <_Z17cobsDecodeInPlacePhh+0x4c>)
 80218c4:	4619      	mov	r1, r3
 80218c6:	6878      	ldr	r0, [r7, #4]
 80218c8:	f7ff ffb0 	bl	802182c <_Z10cobsDecodePhhS_>
 80218cc:	4603      	mov	r3, r0
 80218ce:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i<decode_len; i++){
 80218d0:	2300      	movs	r3, #0
 80218d2:	60fb      	str	r3, [r7, #12]
 80218d4:	e00a      	b.n	80218ec <_Z17cobsDecodeInPlacePhh+0x38>
		buffer[i] = cobsDecodeBuffer[i];
 80218d6:	68fb      	ldr	r3, [r7, #12]
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	4413      	add	r3, r2
 80218dc:	4908      	ldr	r1, [pc, #32]	@ (8021900 <_Z17cobsDecodeInPlacePhh+0x4c>)
 80218de:	68fa      	ldr	r2, [r7, #12]
 80218e0:	440a      	add	r2, r1
 80218e2:	7812      	ldrb	r2, [r2, #0]
 80218e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<decode_len; i++){
 80218e6:	68fb      	ldr	r3, [r7, #12]
 80218e8:	3301      	adds	r3, #1
 80218ea:	60fb      	str	r3, [r7, #12]
 80218ec:	7afb      	ldrb	r3, [r7, #11]
 80218ee:	68fa      	ldr	r2, [r7, #12]
 80218f0:	429a      	cmp	r2, r3
 80218f2:	dbf0      	blt.n	80218d6 <_Z17cobsDecodeInPlacePhh+0x22>
	}

	return decode_len;
 80218f4:	7afb      	ldrb	r3, [r7, #11]
}
 80218f6:	4618      	mov	r0, r3
 80218f8:	3710      	adds	r7, #16
 80218fa:	46bd      	mov	sp, r7
 80218fc:	bd80      	pop	{r7, pc}
 80218fe:	bf00      	nop
 8021900:	24022d08 	.word	0x24022d08

08021904 <_Z15uint8_to_uint16hh>:
	temp = ((bytearray[3] << 24) | (bytearray[2] << 16) | (bytearray[1] << 8)
			| bytearray[0]);
	return *((float*) &temp);
}

uint16_t uint8_to_uint16(uint8_t byte1, uint8_t byte2) {
 8021904:	b480      	push	{r7}
 8021906:	b085      	sub	sp, #20
 8021908:	af00      	add	r7, sp, #0
 802190a:	4603      	mov	r3, r0
 802190c:	460a      	mov	r2, r1
 802190e:	71fb      	strb	r3, [r7, #7]
 8021910:	4613      	mov	r3, r2
 8021912:	71bb      	strb	r3, [r7, #6]
	uint16_t out = byte1 << 8 | byte2;
 8021914:	79fb      	ldrb	r3, [r7, #7]
 8021916:	021b      	lsls	r3, r3, #8
 8021918:	b21a      	sxth	r2, r3
 802191a:	79bb      	ldrb	r3, [r7, #6]
 802191c:	b21b      	sxth	r3, r3
 802191e:	4313      	orrs	r3, r2
 8021920:	b21b      	sxth	r3, r3
 8021922:	81fb      	strh	r3, [r7, #14]
	return out;
 8021924:	89fb      	ldrh	r3, [r7, #14]
}
 8021926:	4618      	mov	r0, r3
 8021928:	3714      	adds	r7, #20
 802192a:	46bd      	mov	sp, r7
 802192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021930:	4770      	bx	lr

08021932 <_Z19bytearray_to_uint16Ph>:

uint16_t bytearray_to_uint16(uint8_t *bytearray) {
 8021932:	b480      	push	{r7}
 8021934:	b085      	sub	sp, #20
 8021936:	af00      	add	r7, sp, #0
 8021938:	6078      	str	r0, [r7, #4]
	uint16_t out = bytearray[1] << 8 | bytearray[0];
 802193a:	687b      	ldr	r3, [r7, #4]
 802193c:	3301      	adds	r3, #1
 802193e:	781b      	ldrb	r3, [r3, #0]
 8021940:	021b      	lsls	r3, r3, #8
 8021942:	b21a      	sxth	r2, r3
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	781b      	ldrb	r3, [r3, #0]
 8021948:	b21b      	sxth	r3, r3
 802194a:	4313      	orrs	r3, r2
 802194c:	b21b      	sxth	r3, r3
 802194e:	81fb      	strh	r3, [r7, #14]
	return out;
 8021950:	89fb      	ldrh	r3, [r7, #14]
}
 8021952:	4618      	mov	r0, r3
 8021954:	3714      	adds	r7, #20
 8021956:	46bd      	mov	sp, r7
 8021958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802195c:	4770      	bx	lr

0802195e <_Z18bytearray_to_int16Ph>:

int16_t bytearray_to_int16(uint8_t *bytearray) {
 802195e:	b480      	push	{r7}
 8021960:	b085      	sub	sp, #20
 8021962:	af00      	add	r7, sp, #0
 8021964:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	3301      	adds	r3, #1
 802196a:	781b      	ldrb	r3, [r3, #0]
 802196c:	021b      	lsls	r3, r3, #8
 802196e:	b21a      	sxth	r2, r3
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	781b      	ldrb	r3, [r3, #0]
 8021974:	b21b      	sxth	r3, r3
 8021976:	4313      	orrs	r3, r2
 8021978:	81fb      	strh	r3, [r7, #14]
	return out;
 802197a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 802197e:	4618      	mov	r0, r3
 8021980:	3714      	adds	r7, #20
 8021982:	46bd      	mov	sp, r7
 8021984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021988:	4770      	bx	lr

0802198a <_Z18int32_to_bytearraylPh>:
    bytearray[1] = (l >> 8) & 0x00FF;
    bytearray[2] = (l >> 16) & 0x00FF;
    bytearray[3] = l >> 24;
}

void int32_to_bytearray(int32_t value, uint8_t* bytearray){
 802198a:	b480      	push	{r7}
 802198c:	b083      	sub	sp, #12
 802198e:	af00      	add	r7, sp, #0
 8021990:	6078      	str	r0, [r7, #4]
 8021992:	6039      	str	r1, [r7, #0]
    // Ensure the bytearray pointer is not null

    // Break the int32_t value into 4 bytes and store them in the bytearray (little-endian order)
    bytearray[0] = value & 0xFF;         // Least significant byte
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	b2da      	uxtb	r2, r3
 8021998:	683b      	ldr	r3, [r7, #0]
 802199a:	701a      	strb	r2, [r3, #0]
    bytearray[1] = (value >> 8) & 0xFF;
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	121a      	asrs	r2, r3, #8
 80219a0:	683b      	ldr	r3, [r7, #0]
 80219a2:	3301      	adds	r3, #1
 80219a4:	b2d2      	uxtb	r2, r2
 80219a6:	701a      	strb	r2, [r3, #0]
    bytearray[2] = (value >> 16) & 0xFF;
 80219a8:	687b      	ldr	r3, [r7, #4]
 80219aa:	141a      	asrs	r2, r3, #16
 80219ac:	683b      	ldr	r3, [r7, #0]
 80219ae:	3302      	adds	r3, #2
 80219b0:	b2d2      	uxtb	r2, r2
 80219b2:	701a      	strb	r2, [r3, #0]
    bytearray[3] = (value >> 24) & 0xFF; // Most significant byte
 80219b4:	687b      	ldr	r3, [r7, #4]
 80219b6:	0e1a      	lsrs	r2, r3, #24
 80219b8:	683b      	ldr	r3, [r7, #0]
 80219ba:	3303      	adds	r3, #3
 80219bc:	b2d2      	uxtb	r2, r2
 80219be:	701a      	strb	r2, [r3, #0]
}
 80219c0:	bf00      	nop
 80219c2:	370c      	adds	r7, #12
 80219c4:	46bd      	mov	sp, r7
 80219c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ca:	4770      	bx	lr

080219cc <_Z19uint16_to_bytearraytPh>:
    bytearray[1] = (value >> 8) & 0xFF;
    bytearray[2] = (value >> 16) & 0xFF;
    bytearray[3] = (value >> 24) & 0xFF; // Most significant byte
}

void uint16_to_bytearray(uint16_t value, uint8_t* bytearray){
 80219cc:	b480      	push	{r7}
 80219ce:	b083      	sub	sp, #12
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	4603      	mov	r3, r0
 80219d4:	6039      	str	r1, [r7, #0]
 80219d6:	80fb      	strh	r3, [r7, #6]
    bytearray[0] = value & 0xFF;         // Least significant byte
 80219d8:	88fb      	ldrh	r3, [r7, #6]
 80219da:	b2da      	uxtb	r2, r3
 80219dc:	683b      	ldr	r3, [r7, #0]
 80219de:	701a      	strb	r2, [r3, #0]
    bytearray[1] = (value >> 8) & 0xFF;  // Most significant byte
 80219e0:	88fb      	ldrh	r3, [r7, #6]
 80219e2:	0a1b      	lsrs	r3, r3, #8
 80219e4:	b29a      	uxth	r2, r3
 80219e6:	683b      	ldr	r3, [r7, #0]
 80219e8:	3301      	adds	r3, #1
 80219ea:	b2d2      	uxtb	r2, r2
 80219ec:	701a      	strb	r2, [r3, #0]
}
 80219ee:	bf00      	nop
 80219f0:	370c      	adds	r7, #12
 80219f2:	46bd      	mov	sp, r7
 80219f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219f8:	4770      	bx	lr

080219fa <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 80219fa:	b480      	push	{r7}
 80219fc:	b083      	sub	sp, #12
 80219fe:	af00      	add	r7, sp, #0
 8021a00:	6078      	str	r0, [r7, #4]
	while(1);
 8021a02:	bf00      	nop
 8021a04:	e7fd      	b.n	8021a02 <_Z17core_ErrorHandleri+0x8>

08021a06 <_Z5limitfff>:

	return sum / len;
}


float limit(float data, float min_value, float max_value){
 8021a06:	b480      	push	{r7}
 8021a08:	b085      	sub	sp, #20
 8021a0a:	af00      	add	r7, sp, #0
 8021a0c:	ed87 0a03 	vstr	s0, [r7, #12]
 8021a10:	edc7 0a02 	vstr	s1, [r7, #8]
 8021a14:	ed87 1a01 	vstr	s2, [r7, #4]
	if (data > max_value){
 8021a18:	ed97 7a03 	vldr	s14, [r7, #12]
 8021a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8021a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a28:	dd01      	ble.n	8021a2e <_Z5limitfff+0x28>
		data = max_value;
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	60fb      	str	r3, [r7, #12]
	}
	if (data < min_value){
 8021a2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8021a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8021a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a3e:	d501      	bpl.n	8021a44 <_Z5limitfff+0x3e>
		data = min_value;
 8021a40:	68bb      	ldr	r3, [r7, #8]
 8021a42:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	ee07 3a90 	vmov	s15, r3
}
 8021a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8021a4e:	3714      	adds	r7, #20
 8021a50:	46bd      	mov	sp, r7
 8021a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a56:	4770      	bx	lr

08021a58 <_Z5limitff>:


float limit(float data, float max_value){
 8021a58:	b580      	push	{r7, lr}
 8021a5a:	b082      	sub	sp, #8
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8021a62:	edc7 0a00 	vstr	s1, [r7]
	return limit(data, -max_value, max_value);
 8021a66:	edd7 7a00 	vldr	s15, [r7]
 8021a6a:	eef1 7a67 	vneg.f32	s15, s15
 8021a6e:	ed97 1a00 	vldr	s2, [r7]
 8021a72:	eef0 0a67 	vmov.f32	s1, s15
 8021a76:	ed97 0a01 	vldr	s0, [r7, #4]
 8021a7a:	f7ff ffc4 	bl	8021a06 <_Z5limitfff>
 8021a7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8021a82:	eeb0 0a67 	vmov.f32	s0, s15
 8021a86:	3708      	adds	r7, #8
 8021a88:	46bd      	mov	sp, r7
 8021a8a:	bd80      	pop	{r7, pc}

08021a8c <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>:
#include "core_utils_gpio.h"

static core_utils_Callback<void, void> callbacks[16];
static void execute_gpio_callback(uint16_t gpio_pin);

core_utils_GPIO::core_utils_GPIO(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8021a8c:	b480      	push	{r7}
 8021a8e:	b085      	sub	sp, #20
 8021a90:	af00      	add	r7, sp, #0
 8021a92:	60f8      	str	r0, [r7, #12]
 8021a94:	60b9      	str	r1, [r7, #8]
 8021a96:	4613      	mov	r3, r2
 8021a98:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 8021a9a:	68fb      	ldr	r3, [r7, #12]
 8021a9c:	68ba      	ldr	r2, [r7, #8]
 8021a9e:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8021aa0:	68fb      	ldr	r3, [r7, #12]
 8021aa2:	88fa      	ldrh	r2, [r7, #6]
 8021aa4:	809a      	strh	r2, [r3, #4]
}
 8021aa6:	68fb      	ldr	r3, [r7, #12]
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	3714      	adds	r7, #20
 8021aac:	46bd      	mov	sp, r7
 8021aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ab2:	4770      	bx	lr

08021ab4 <_ZN15core_utils_GPIO6toggleEv>:
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
	}
}

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::toggle() {
 8021ab4:	b580      	push	{r7, lr}
 8021ab6:	b082      	sub	sp, #8
 8021ab8:	af00      	add	r7, sp, #0
 8021aba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, pin);
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	681a      	ldr	r2, [r3, #0]
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	889b      	ldrh	r3, [r3, #4]
 8021ac4:	4619      	mov	r1, r3
 8021ac6:	4610      	mov	r0, r2
 8021ac8:	f7e4 fdef 	bl	80066aa <HAL_GPIO_TogglePin>
}
 8021acc:	bf00      	nop
 8021ace:	3708      	adds	r7, #8
 8021ad0:	46bd      	mov	sp, r7
 8021ad2:	bd80      	pop	{r7, pc}

08021ad4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>:
	core_utils_gpio_registerExtiCallback(line,
			core_utils_Callback<void, void>(function));
}
/* -------------------------------------------------------------------------------- */
void core_utils_gpio_registerExtiCallback(uint16_t line,
		core_utils_Callback<void, void> callback) {
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b082      	sub	sp, #8
 8021ad8:	af00      	add	r7, sp, #0
 8021ada:	4603      	mov	r3, r0
 8021adc:	6039      	str	r1, [r7, #0]
 8021ade:	80fb      	strh	r3, [r7, #6]
	switch (line) {
 8021ae0:	88fb      	ldrh	r3, [r7, #6]
 8021ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021ae6:	f000 80db 	beq.w	8021ca0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1cc>
 8021aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021aee:	f300 80dc 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021af6:	f000 80ce 	beq.w	8021c96 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1c2>
 8021afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021afe:	f300 80d4 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021b06:	f000 80c1 	beq.w	8021c8c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1b8>
 8021b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021b0e:	f300 80cc 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021b16:	f000 80b4 	beq.w	8021c82 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ae>
 8021b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021b1e:	f300 80c4 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8021b26:	f000 80a7 	beq.w	8021c78 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1a4>
 8021b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8021b2e:	f300 80bc 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b36:	f000 809a 	beq.w	8021c6e <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x19a>
 8021b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b3e:	f300 80b4 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021b46:	f000 808d 	beq.w	8021c64 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x190>
 8021b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021b4e:	f300 80ac 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021b56:	f000 8080 	beq.w	8021c5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x186>
 8021b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021b5e:	f300 80a4 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b62:	2b80      	cmp	r3, #128	@ 0x80
 8021b64:	d074      	beq.n	8021c50 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x17c>
 8021b66:	2b80      	cmp	r3, #128	@ 0x80
 8021b68:	f300 809f 	bgt.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b6c:	2b20      	cmp	r3, #32
 8021b6e:	dc49      	bgt.n	8021c04 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x130>
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	f340 809a 	ble.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b76:	3b01      	subs	r3, #1
 8021b78:	2b1f      	cmp	r3, #31
 8021b7a:	f200 8096 	bhi.w	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8021b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8021b84 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0xb0>)
 8021b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b84:	08021c0b 	.word	0x08021c0b
 8021b88:	08021c15 	.word	0x08021c15
 8021b8c:	08021cab 	.word	0x08021cab
 8021b90:	08021c1f 	.word	0x08021c1f
 8021b94:	08021cab 	.word	0x08021cab
 8021b98:	08021cab 	.word	0x08021cab
 8021b9c:	08021cab 	.word	0x08021cab
 8021ba0:	08021c29 	.word	0x08021c29
 8021ba4:	08021cab 	.word	0x08021cab
 8021ba8:	08021cab 	.word	0x08021cab
 8021bac:	08021cab 	.word	0x08021cab
 8021bb0:	08021cab 	.word	0x08021cab
 8021bb4:	08021cab 	.word	0x08021cab
 8021bb8:	08021cab 	.word	0x08021cab
 8021bbc:	08021cab 	.word	0x08021cab
 8021bc0:	08021c33 	.word	0x08021c33
 8021bc4:	08021cab 	.word	0x08021cab
 8021bc8:	08021cab 	.word	0x08021cab
 8021bcc:	08021cab 	.word	0x08021cab
 8021bd0:	08021cab 	.word	0x08021cab
 8021bd4:	08021cab 	.word	0x08021cab
 8021bd8:	08021cab 	.word	0x08021cab
 8021bdc:	08021cab 	.word	0x08021cab
 8021be0:	08021cab 	.word	0x08021cab
 8021be4:	08021cab 	.word	0x08021cab
 8021be8:	08021cab 	.word	0x08021cab
 8021bec:	08021cab 	.word	0x08021cab
 8021bf0:	08021cab 	.word	0x08021cab
 8021bf4:	08021cab 	.word	0x08021cab
 8021bf8:	08021cab 	.word	0x08021cab
 8021bfc:	08021cab 	.word	0x08021cab
 8021c00:	08021c3d 	.word	0x08021c3d
 8021c04:	2b40      	cmp	r3, #64	@ 0x40
 8021c06:	d01e      	beq.n	8021c46 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x172>
	case GPIO_PIN_15: {
		callbacks[15] = callback;
		break;
	}
	}
}
 8021c08:	e04f      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[0] = callback;
 8021c0a:	6839      	ldr	r1, [r7, #0]
 8021c0c:	4829      	ldr	r0, [pc, #164]	@ (8021cb4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e0>)
 8021c0e:	f7f1 fb15 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c12:	e04a      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[1] = callback;
 8021c14:	6839      	ldr	r1, [r7, #0]
 8021c16:	4828      	ldr	r0, [pc, #160]	@ (8021cb8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e4>)
 8021c18:	f7f1 fb10 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c1c:	e045      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[2] = callback;
 8021c1e:	6839      	ldr	r1, [r7, #0]
 8021c20:	4826      	ldr	r0, [pc, #152]	@ (8021cbc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e8>)
 8021c22:	f7f1 fb0b 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c26:	e040      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[3] = callback;
 8021c28:	6839      	ldr	r1, [r7, #0]
 8021c2a:	4825      	ldr	r0, [pc, #148]	@ (8021cc0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ec>)
 8021c2c:	f7f1 fb06 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c30:	e03b      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[4] = callback;
 8021c32:	6839      	ldr	r1, [r7, #0]
 8021c34:	4823      	ldr	r0, [pc, #140]	@ (8021cc4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f0>)
 8021c36:	f7f1 fb01 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c3a:	e036      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[5] = callback;
 8021c3c:	6839      	ldr	r1, [r7, #0]
 8021c3e:	4822      	ldr	r0, [pc, #136]	@ (8021cc8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f4>)
 8021c40:	f7f1 fafc 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c44:	e031      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[6] = callback;
 8021c46:	6839      	ldr	r1, [r7, #0]
 8021c48:	4820      	ldr	r0, [pc, #128]	@ (8021ccc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f8>)
 8021c4a:	f7f1 faf7 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c4e:	e02c      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[7] = callback;
 8021c50:	6839      	ldr	r1, [r7, #0]
 8021c52:	481f      	ldr	r0, [pc, #124]	@ (8021cd0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1fc>)
 8021c54:	f7f1 faf2 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c58:	e027      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[8] = callback;
 8021c5a:	6839      	ldr	r1, [r7, #0]
 8021c5c:	481d      	ldr	r0, [pc, #116]	@ (8021cd4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x200>)
 8021c5e:	f7f1 faed 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c62:	e022      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[9] = callback;
 8021c64:	6839      	ldr	r1, [r7, #0]
 8021c66:	481c      	ldr	r0, [pc, #112]	@ (8021cd8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x204>)
 8021c68:	f7f1 fae8 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c6c:	e01d      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[10] = callback;
 8021c6e:	6839      	ldr	r1, [r7, #0]
 8021c70:	481a      	ldr	r0, [pc, #104]	@ (8021cdc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x208>)
 8021c72:	f7f1 fae3 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c76:	e018      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[11] = callback;
 8021c78:	6839      	ldr	r1, [r7, #0]
 8021c7a:	4819      	ldr	r0, [pc, #100]	@ (8021ce0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x20c>)
 8021c7c:	f7f1 fade 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c80:	e013      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[12] = callback;
 8021c82:	6839      	ldr	r1, [r7, #0]
 8021c84:	4817      	ldr	r0, [pc, #92]	@ (8021ce4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x210>)
 8021c86:	f7f1 fad9 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c8a:	e00e      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[13] = callback;
 8021c8c:	6839      	ldr	r1, [r7, #0]
 8021c8e:	4816      	ldr	r0, [pc, #88]	@ (8021ce8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x214>)
 8021c90:	f7f1 fad4 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c94:	e009      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[14] = callback;
 8021c96:	6839      	ldr	r1, [r7, #0]
 8021c98:	4814      	ldr	r0, [pc, #80]	@ (8021cec <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x218>)
 8021c9a:	f7f1 facf 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021c9e:	e004      	b.n	8021caa <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[15] = callback;
 8021ca0:	6839      	ldr	r1, [r7, #0]
 8021ca2:	4813      	ldr	r0, [pc, #76]	@ (8021cf0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x21c>)
 8021ca4:	f7f1 faca 	bl	801323c <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8021ca8:	bf00      	nop
}
 8021caa:	bf00      	nop
 8021cac:	3708      	adds	r7, #8
 8021cae:	46bd      	mov	sp, r7
 8021cb0:	bd80      	pop	{r7, pc}
 8021cb2:	bf00      	nop
 8021cb4:	24022e08 	.word	0x24022e08
 8021cb8:	24022e28 	.word	0x24022e28
 8021cbc:	24022e48 	.word	0x24022e48
 8021cc0:	24022e68 	.word	0x24022e68
 8021cc4:	24022e88 	.word	0x24022e88
 8021cc8:	24022ea8 	.word	0x24022ea8
 8021ccc:	24022ec8 	.word	0x24022ec8
 8021cd0:	24022ee8 	.word	0x24022ee8
 8021cd4:	24022f08 	.word	0x24022f08
 8021cd8:	24022f28 	.word	0x24022f28
 8021cdc:	24022f48 	.word	0x24022f48
 8021ce0:	24022f68 	.word	0x24022f68
 8021ce4:	24022f88 	.word	0x24022f88
 8021ce8:	24022fa8 	.word	0x24022fa8
 8021cec:	24022fc8 	.word	0x24022fc8
 8021cf0:	24022fe8 	.word	0x24022fe8

08021cf4 <HAL_GPIO_EXTI_Callback>:

/* -------------------------------------------------------------------------------- */
extern "C" {
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 8021cf4:	b580      	push	{r7, lr}
 8021cf6:	b082      	sub	sp, #8
 8021cf8:	af00      	add	r7, sp, #0
 8021cfa:	4603      	mov	r3, r0
 8021cfc:	80fb      	strh	r3, [r7, #6]
	execute_gpio_callback(gpio_pin);
 8021cfe:	88fb      	ldrh	r3, [r7, #6]
 8021d00:	4618      	mov	r0, r3
 8021d02:	f000 f805 	bl	8021d10 <_ZL21execute_gpio_callbackt>
}
 8021d06:	bf00      	nop
 8021d08:	3708      	adds	r7, #8
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	bd80      	pop	{r7, pc}
	...

08021d10 <_ZL21execute_gpio_callbackt>:
}

static void execute_gpio_callback(uint16_t gpio_pin) {
 8021d10:	b580      	push	{r7, lr}
 8021d12:	b082      	sub	sp, #8
 8021d14:	af00      	add	r7, sp, #0
 8021d16:	4603      	mov	r3, r0
 8021d18:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 8021d1a:	88fb      	ldrh	r3, [r7, #6]
 8021d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021d20:	f000 80f6 	beq.w	8021f10 <_ZL21execute_gpio_callbackt+0x200>
 8021d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021d28:	f300 80f9 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021d30:	f000 80e7 	beq.w	8021f02 <_ZL21execute_gpio_callbackt+0x1f2>
 8021d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021d38:	f300 80f1 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021d40:	f000 80d8 	beq.w	8021ef4 <_ZL21execute_gpio_callbackt+0x1e4>
 8021d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021d48:	f300 80e9 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021d50:	f000 80c9 	beq.w	8021ee6 <_ZL21execute_gpio_callbackt+0x1d6>
 8021d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021d58:	f300 80e1 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8021d60:	f000 80ba 	beq.w	8021ed8 <_ZL21execute_gpio_callbackt+0x1c8>
 8021d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8021d68:	f300 80d9 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021d70:	f000 80ab 	beq.w	8021eca <_ZL21execute_gpio_callbackt+0x1ba>
 8021d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021d78:	f300 80d1 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021d80:	f000 809c 	beq.w	8021ebc <_ZL21execute_gpio_callbackt+0x1ac>
 8021d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021d88:	f300 80c9 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021d90:	f000 808d 	beq.w	8021eae <_ZL21execute_gpio_callbackt+0x19e>
 8021d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021d98:	f300 80c1 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021d9c:	2b80      	cmp	r3, #128	@ 0x80
 8021d9e:	d07f      	beq.n	8021ea0 <_ZL21execute_gpio_callbackt+0x190>
 8021da0:	2b80      	cmp	r3, #128	@ 0x80
 8021da2:	f300 80bc 	bgt.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021da6:	2b20      	cmp	r3, #32
 8021da8:	dc4a      	bgt.n	8021e40 <_ZL21execute_gpio_callbackt+0x130>
 8021daa:	2b00      	cmp	r3, #0
 8021dac:	f340 80b7 	ble.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021db0:	3b01      	subs	r3, #1
 8021db2:	2b1f      	cmp	r3, #31
 8021db4:	f200 80b3 	bhi.w	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
 8021db8:	a201      	add	r2, pc, #4	@ (adr r2, 8021dc0 <_ZL21execute_gpio_callbackt+0xb0>)
 8021dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021dbe:	bf00      	nop
 8021dc0:	08021e47 	.word	0x08021e47
 8021dc4:	08021e53 	.word	0x08021e53
 8021dc8:	08021f1f 	.word	0x08021f1f
 8021dcc:	08021e5f 	.word	0x08021e5f
 8021dd0:	08021f1f 	.word	0x08021f1f
 8021dd4:	08021f1f 	.word	0x08021f1f
 8021dd8:	08021f1f 	.word	0x08021f1f
 8021ddc:	08021e6b 	.word	0x08021e6b
 8021de0:	08021f1f 	.word	0x08021f1f
 8021de4:	08021f1f 	.word	0x08021f1f
 8021de8:	08021f1f 	.word	0x08021f1f
 8021dec:	08021f1f 	.word	0x08021f1f
 8021df0:	08021f1f 	.word	0x08021f1f
 8021df4:	08021f1f 	.word	0x08021f1f
 8021df8:	08021f1f 	.word	0x08021f1f
 8021dfc:	08021e77 	.word	0x08021e77
 8021e00:	08021f1f 	.word	0x08021f1f
 8021e04:	08021f1f 	.word	0x08021f1f
 8021e08:	08021f1f 	.word	0x08021f1f
 8021e0c:	08021f1f 	.word	0x08021f1f
 8021e10:	08021f1f 	.word	0x08021f1f
 8021e14:	08021f1f 	.word	0x08021f1f
 8021e18:	08021f1f 	.word	0x08021f1f
 8021e1c:	08021f1f 	.word	0x08021f1f
 8021e20:	08021f1f 	.word	0x08021f1f
 8021e24:	08021f1f 	.word	0x08021f1f
 8021e28:	08021f1f 	.word	0x08021f1f
 8021e2c:	08021f1f 	.word	0x08021f1f
 8021e30:	08021f1f 	.word	0x08021f1f
 8021e34:	08021f1f 	.word	0x08021f1f
 8021e38:	08021f1f 	.word	0x08021f1f
 8021e3c:	08021e85 	.word	0x08021e85
 8021e40:	2b40      	cmp	r3, #64	@ 0x40
 8021e42:	d026      	beq.n	8021e92 <_ZL21execute_gpio_callbackt+0x182>
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 8021e44:	e06b      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[0].call();
 8021e46:	4b38      	ldr	r3, [pc, #224]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	681b      	ldr	r3, [r3, #0]
 8021e4c:	4836      	ldr	r0, [pc, #216]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e4e:	4798      	blx	r3
		break;
 8021e50:	e065      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[1].call();
 8021e52:	4b35      	ldr	r3, [pc, #212]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e54:	6a1b      	ldr	r3, [r3, #32]
 8021e56:	681b      	ldr	r3, [r3, #0]
 8021e58:	4834      	ldr	r0, [pc, #208]	@ (8021f2c <_ZL21execute_gpio_callbackt+0x21c>)
 8021e5a:	4798      	blx	r3
		break;
 8021e5c:	e05f      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[2].call();
 8021e5e:	4b32      	ldr	r3, [pc, #200]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	4832      	ldr	r0, [pc, #200]	@ (8021f30 <_ZL21execute_gpio_callbackt+0x220>)
 8021e66:	4798      	blx	r3
		break;
 8021e68:	e059      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[3].call();
 8021e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	4830      	ldr	r0, [pc, #192]	@ (8021f34 <_ZL21execute_gpio_callbackt+0x224>)
 8021e72:	4798      	blx	r3
		break;
 8021e74:	e053      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[4].call();
 8021e76:	4b2c      	ldr	r3, [pc, #176]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021e7c:	681b      	ldr	r3, [r3, #0]
 8021e7e:	482e      	ldr	r0, [pc, #184]	@ (8021f38 <_ZL21execute_gpio_callbackt+0x228>)
 8021e80:	4798      	blx	r3
		break;
 8021e82:	e04c      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[5].call();
 8021e84:	4b28      	ldr	r3, [pc, #160]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8021e8a:	681b      	ldr	r3, [r3, #0]
 8021e8c:	482b      	ldr	r0, [pc, #172]	@ (8021f3c <_ZL21execute_gpio_callbackt+0x22c>)
 8021e8e:	4798      	blx	r3
		break;
 8021e90:	e045      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[6].call();
 8021e92:	4b25      	ldr	r3, [pc, #148]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021e94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	4829      	ldr	r0, [pc, #164]	@ (8021f40 <_ZL21execute_gpio_callbackt+0x230>)
 8021e9c:	4798      	blx	r3
		break;
 8021e9e:	e03e      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[7].call();
 8021ea0:	4b21      	ldr	r3, [pc, #132]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	4826      	ldr	r0, [pc, #152]	@ (8021f44 <_ZL21execute_gpio_callbackt+0x234>)
 8021eaa:	4798      	blx	r3
		break;
 8021eac:	e037      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[8].call();
 8021eae:	4b1e      	ldr	r3, [pc, #120]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021eb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	4824      	ldr	r0, [pc, #144]	@ (8021f48 <_ZL21execute_gpio_callbackt+0x238>)
 8021eb8:	4798      	blx	r3
		break;
 8021eba:	e030      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[9].call();
 8021ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021ebe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	4821      	ldr	r0, [pc, #132]	@ (8021f4c <_ZL21execute_gpio_callbackt+0x23c>)
 8021ec6:	4798      	blx	r3
		break;
 8021ec8:	e029      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[10].call();
 8021eca:	4b17      	ldr	r3, [pc, #92]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021ecc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8021ed0:	681b      	ldr	r3, [r3, #0]
 8021ed2:	481f      	ldr	r0, [pc, #124]	@ (8021f50 <_ZL21execute_gpio_callbackt+0x240>)
 8021ed4:	4798      	blx	r3
		break;
 8021ed6:	e022      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[11].call();
 8021ed8:	4b13      	ldr	r3, [pc, #76]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021eda:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8021ede:	681b      	ldr	r3, [r3, #0]
 8021ee0:	481c      	ldr	r0, [pc, #112]	@ (8021f54 <_ZL21execute_gpio_callbackt+0x244>)
 8021ee2:	4798      	blx	r3
		break;
 8021ee4:	e01b      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[12].call();
 8021ee6:	4b10      	ldr	r3, [pc, #64]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021ee8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	481a      	ldr	r0, [pc, #104]	@ (8021f58 <_ZL21execute_gpio_callbackt+0x248>)
 8021ef0:	4798      	blx	r3
		break;
 8021ef2:	e014      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[13].call();
 8021ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021ef6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	4817      	ldr	r0, [pc, #92]	@ (8021f5c <_ZL21execute_gpio_callbackt+0x24c>)
 8021efe:	4798      	blx	r3
		break;
 8021f00:	e00d      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[14].call();
 8021f02:	4b09      	ldr	r3, [pc, #36]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021f04:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	4815      	ldr	r0, [pc, #84]	@ (8021f60 <_ZL21execute_gpio_callbackt+0x250>)
 8021f0c:	4798      	blx	r3
		break;
 8021f0e:	e006      	b.n	8021f1e <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[15].call();
 8021f10:	4b05      	ldr	r3, [pc, #20]	@ (8021f28 <_ZL21execute_gpio_callbackt+0x218>)
 8021f12:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8021f16:	681b      	ldr	r3, [r3, #0]
 8021f18:	4812      	ldr	r0, [pc, #72]	@ (8021f64 <_ZL21execute_gpio_callbackt+0x254>)
 8021f1a:	4798      	blx	r3
		break;
 8021f1c:	bf00      	nop
}
 8021f1e:	bf00      	nop
 8021f20:	3708      	adds	r7, #8
 8021f22:	46bd      	mov	sp, r7
 8021f24:	bd80      	pop	{r7, pc}
 8021f26:	bf00      	nop
 8021f28:	24022e08 	.word	0x24022e08
 8021f2c:	24022e28 	.word	0x24022e28
 8021f30:	24022e48 	.word	0x24022e48
 8021f34:	24022e68 	.word	0x24022e68
 8021f38:	24022e88 	.word	0x24022e88
 8021f3c:	24022ea8 	.word	0x24022ea8
 8021f40:	24022ec8 	.word	0x24022ec8
 8021f44:	24022ee8 	.word	0x24022ee8
 8021f48:	24022f08 	.word	0x24022f08
 8021f4c:	24022f28 	.word	0x24022f28
 8021f50:	24022f48 	.word	0x24022f48
 8021f54:	24022f68 	.word	0x24022f68
 8021f58:	24022f88 	.word	0x24022f88
 8021f5c:	24022fa8 	.word	0x24022fa8
 8021f60:	24022fc8 	.word	0x24022fc8
 8021f64:	24022fe8 	.word	0x24022fe8

08021f68 <_Z41__static_initialization_and_destruction_0ii>:
 8021f68:	b5b0      	push	{r4, r5, r7, lr}
 8021f6a:	b082      	sub	sp, #8
 8021f6c:	af00      	add	r7, sp, #0
 8021f6e:	6078      	str	r0, [r7, #4]
 8021f70:	6039      	str	r1, [r7, #0]
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	2b01      	cmp	r3, #1
 8021f76:	d10f      	bne.n	8021f98 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8021f78:	683b      	ldr	r3, [r7, #0]
 8021f7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021f7e:	4293      	cmp	r3, r2
 8021f80:	d10a      	bne.n	8021f98 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 8021f82:	4b07      	ldr	r3, [pc, #28]	@ (8021fa0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8021f84:	240f      	movs	r4, #15
 8021f86:	461d      	mov	r5, r3
 8021f88:	e004      	b.n	8021f94 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8021f8a:	4628      	mov	r0, r5
 8021f8c:	f7f0 fde8 	bl	8012b60 <_ZN19core_utils_CallbackIvvEC1Ev>
 8021f90:	3c01      	subs	r4, #1
 8021f92:	3520      	adds	r5, #32
 8021f94:	2c00      	cmp	r4, #0
 8021f96:	daf8      	bge.n	8021f8a <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8021f98:	bf00      	nop
 8021f9a:	3708      	adds	r7, #8
 8021f9c:	46bd      	mov	sp, r7
 8021f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8021fa0:	24022e08 	.word	0x24022e08

08021fa4 <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 8021fa4:	b580      	push	{r7, lr}
 8021fa6:	af00      	add	r7, sp, #0
 8021fa8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8021fac:	2001      	movs	r0, #1
 8021fae:	f7ff ffdb 	bl	8021f68 <_Z41__static_initialization_and_destruction_0ii>
 8021fb2:	bd80      	pop	{r7, pc}

08021fb4 <_Z6millisv>:

#include "../core_includes.h"

#include "elapsedMillis.h"

uint32_t millis() {
 8021fb4:	b580      	push	{r7, lr}
 8021fb6:	af00      	add	r7, sp, #0
#if CORE_CONFIG_USE_RTOS
	return osKernelGetTickCount();
 8021fb8:	f7ec fccc 	bl	800e954 <osKernelGetTickCount>
 8021fbc:	4603      	mov	r3, r0
#else
	return HAL_GetTick();
#endif
}
 8021fbe:	4618      	mov	r0, r3
 8021fc0:	bd80      	pop	{r7, pc}

08021fc2 <atan2f>:
 8021fc2:	f000 ba21 	b.w	8022408 <__ieee754_atan2f>
	...

08021fc8 <exp>:
 8021fc8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8021fca:	ee10 3a90 	vmov	r3, s1
 8021fce:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8021fd2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8021fd6:	18a2      	adds	r2, r4, r2
 8021fd8:	2a3e      	cmp	r2, #62	@ 0x3e
 8021fda:	ee10 1a10 	vmov	r1, s0
 8021fde:	d922      	bls.n	8022026 <exp+0x5e>
 8021fe0:	2a00      	cmp	r2, #0
 8021fe2:	da06      	bge.n	8021ff2 <exp+0x2a>
 8021fe4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8021fe8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8021fec:	b004      	add	sp, #16
 8021fee:	bcf0      	pop	{r4, r5, r6, r7}
 8021ff0:	4770      	bx	lr
 8021ff2:	f5b4 6f81 	cmp.w	r4, #1032	@ 0x408
 8021ff6:	f04f 0000 	mov.w	r0, #0
 8021ffa:	d913      	bls.n	8022024 <exp+0x5c>
 8021ffc:	f513 1f80 	cmn.w	r3, #1048576	@ 0x100000
 8022000:	bf08      	it	eq
 8022002:	4281      	cmpeq	r1, r0
 8022004:	f000 80a0 	beq.w	8022148 <exp+0x180>
 8022008:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 802200c:	4294      	cmp	r4, r2
 802200e:	d0e9      	beq.n	8021fe4 <exp+0x1c>
 8022010:	4283      	cmp	r3, r0
 8022012:	da03      	bge.n	802201c <exp+0x54>
 8022014:	b004      	add	sp, #16
 8022016:	bcf0      	pop	{r4, r5, r6, r7}
 8022018:	f000 b8ca 	b.w	80221b0 <__math_uflow>
 802201c:	b004      	add	sp, #16
 802201e:	bcf0      	pop	{r4, r5, r6, r7}
 8022020:	f000 b8ce 	b.w	80221c0 <__math_oflow>
 8022024:	4604      	mov	r4, r0
 8022026:	4950      	ldr	r1, [pc, #320]	@ (8022168 <exp+0x1a0>)
 8022028:	ed91 6b02 	vldr	d6, [r1, #8]
 802202c:	ed91 5b00 	vldr	d5, [r1]
 8022030:	eeb0 7b46 	vmov.f64	d7, d6
 8022034:	eea5 7b00 	vfma.f64	d7, d5, d0
 8022038:	ee17 5a10 	vmov	r5, s14
 802203c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022040:	ed91 6b04 	vldr	d6, [r1, #16]
 8022044:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8022048:	eea6 0b07 	vfma.f64	d0, d6, d7
 802204c:	ed91 6b06 	vldr	d6, [r1, #24]
 8022050:	18d8      	adds	r0, r3, r3
 8022052:	f100 030f 	add.w	r3, r0, #15
 8022056:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 802205a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802205e:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8022062:	ee20 7b00 	vmul.f64	d7, d0, d0
 8022066:	ed90 6b1c 	vldr	d6, [r0, #112]	@ 0x70
 802206a:	ed91 4b08 	vldr	d4, [r1, #32]
 802206e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8022072:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8022076:	eea3 4b00 	vfma.f64	d4, d3, d0
 802207a:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 802207e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8022082:	ee27 7b07 	vmul.f64	d7, d7, d7
 8022086:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 802208a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 802208e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8022092:	eea3 4b00 	vfma.f64	d4, d3, d0
 8022096:	2600      	movs	r6, #0
 8022098:	19f2      	adds	r2, r6, r7
 802209a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 802209e:	eea7 6b04 	vfma.f64	d6, d7, d4
 80220a2:	2c00      	cmp	r4, #0
 80220a4:	d14b      	bne.n	802213e <exp+0x176>
 80220a6:	42b5      	cmp	r5, r6
 80220a8:	db10      	blt.n	80220cc <exp+0x104>
 80220aa:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 80220ae:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8022150 <exp+0x188>
 80220b2:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 80220b6:	4610      	mov	r0, r2
 80220b8:	ec41 0b10 	vmov	d0, r0, r1
 80220bc:	eea6 0b00 	vfma.f64	d0, d6, d0
 80220c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80220c4:	b004      	add	sp, #16
 80220c6:	bcf0      	pop	{r4, r5, r6, r7}
 80220c8:	f000 b88e 	b.w	80221e8 <__math_check_oflow>
 80220cc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80220d0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80220d4:	4610      	mov	r0, r2
 80220d6:	ec41 0b17 	vmov	d7, r0, r1
 80220da:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 80220de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80220e2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80220e6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80220ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220ee:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8022158 <exp+0x190>
 80220f2:	d51e      	bpl.n	8022132 <exp+0x16a>
 80220f4:	ee35 3b04 	vadd.f64	d3, d5, d4
 80220f8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80220fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022100:	ee34 6b43 	vsub.f64	d6, d4, d3
 8022104:	ee36 6b05 	vadd.f64	d6, d6, d5
 8022108:	ee36 6b07 	vadd.f64	d6, d6, d7
 802210c:	ee36 6b03 	vadd.f64	d6, d6, d3
 8022110:	ee36 5b44 	vsub.f64	d5, d6, d4
 8022114:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8022118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802211c:	d101      	bne.n	8022122 <exp+0x15a>
 802211e:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8022160 <exp+0x198>
 8022122:	ed8d 0b00 	vstr	d0, [sp]
 8022126:	ed9d 7b00 	vldr	d7, [sp]
 802212a:	ee27 7b00 	vmul.f64	d7, d7, d0
 802212e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022132:	ee25 0b00 	vmul.f64	d0, d5, d0
 8022136:	b004      	add	sp, #16
 8022138:	bcf0      	pop	{r4, r5, r6, r7}
 802213a:	f000 b849 	b.w	80221d0 <__math_check_uflow>
 802213e:	ec43 2b10 	vmov	d0, r2, r3
 8022142:	eea6 0b00 	vfma.f64	d0, d6, d0
 8022146:	e751      	b.n	8021fec <exp+0x24>
 8022148:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8022160 <exp+0x198>
 802214c:	e74e      	b.n	8021fec <exp+0x24>
 802214e:	bf00      	nop
 8022150:	00000000 	.word	0x00000000
 8022154:	7f000000 	.word	0x7f000000
 8022158:	00000000 	.word	0x00000000
 802215c:	00100000 	.word	0x00100000
	...
 8022168:	08026708 	.word	0x08026708

0802216c <with_errno>:
 802216c:	b510      	push	{r4, lr}
 802216e:	ed2d 8b02 	vpush	{d8}
 8022172:	eeb0 8b40 	vmov.f64	d8, d0
 8022176:	4604      	mov	r4, r0
 8022178:	f001 ff0a 	bl	8023f90 <__errno>
 802217c:	eeb0 0b48 	vmov.f64	d0, d8
 8022180:	ecbd 8b02 	vpop	{d8}
 8022184:	6004      	str	r4, [r0, #0]
 8022186:	bd10      	pop	{r4, pc}

08022188 <xflow>:
 8022188:	b082      	sub	sp, #8
 802218a:	b158      	cbz	r0, 80221a4 <xflow+0x1c>
 802218c:	eeb1 7b40 	vneg.f64	d7, d0
 8022190:	ed8d 7b00 	vstr	d7, [sp]
 8022194:	ed9d 7b00 	vldr	d7, [sp]
 8022198:	2022      	movs	r0, #34	@ 0x22
 802219a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802219e:	b002      	add	sp, #8
 80221a0:	f7ff bfe4 	b.w	802216c <with_errno>
 80221a4:	eeb0 7b40 	vmov.f64	d7, d0
 80221a8:	e7f2      	b.n	8022190 <xflow+0x8>
 80221aa:	0000      	movs	r0, r0
 80221ac:	0000      	movs	r0, r0
	...

080221b0 <__math_uflow>:
 80221b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80221b8 <__math_uflow+0x8>
 80221b4:	f7ff bfe8 	b.w	8022188 <xflow>
 80221b8:	00000000 	.word	0x00000000
 80221bc:	10000000 	.word	0x10000000

080221c0 <__math_oflow>:
 80221c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80221c8 <__math_oflow+0x8>
 80221c4:	f7ff bfe0 	b.w	8022188 <xflow>
 80221c8:	00000000 	.word	0x00000000
 80221cc:	70000000 	.word	0x70000000

080221d0 <__math_check_uflow>:
 80221d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80221d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221d8:	d102      	bne.n	80221e0 <__math_check_uflow+0x10>
 80221da:	2022      	movs	r0, #34	@ 0x22
 80221dc:	f7ff bfc6 	b.w	802216c <with_errno>
 80221e0:	4770      	bx	lr
 80221e2:	0000      	movs	r0, r0
 80221e4:	0000      	movs	r0, r0
	...

080221e8 <__math_check_oflow>:
 80221e8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8022208 <__math_check_oflow+0x20>
 80221ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80221f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80221f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221f8:	dd02      	ble.n	8022200 <__math_check_oflow+0x18>
 80221fa:	2022      	movs	r0, #34	@ 0x22
 80221fc:	f7ff bfb6 	b.w	802216c <with_errno>
 8022200:	4770      	bx	lr
 8022202:	bf00      	nop
 8022204:	f3af 8000 	nop.w
 8022208:	ffffffff 	.word	0xffffffff
 802220c:	7fefffff 	.word	0x7fefffff

08022210 <sqrt>:
 8022210:	b508      	push	{r3, lr}
 8022212:	ed2d 8b04 	vpush	{d8-d9}
 8022216:	eeb0 8b40 	vmov.f64	d8, d0
 802221a:	f000 f993 	bl	8022544 <__ieee754_sqrt>
 802221e:	eeb4 8b48 	vcmp.f64	d8, d8
 8022222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022226:	d60c      	bvs.n	8022242 <sqrt+0x32>
 8022228:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8022248 <sqrt+0x38>
 802222c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8022230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022234:	d505      	bpl.n	8022242 <sqrt+0x32>
 8022236:	f001 feab 	bl	8023f90 <__errno>
 802223a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 802223e:	2321      	movs	r3, #33	@ 0x21
 8022240:	6003      	str	r3, [r0, #0]
 8022242:	ecbd 8b04 	vpop	{d8-d9}
 8022246:	bd08      	pop	{r3, pc}
	...

08022250 <fabsf>:
 8022250:	ee10 3a10 	vmov	r3, s0
 8022254:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022258:	ee00 3a10 	vmov	s0, r3
 802225c:	4770      	bx	lr
	...

08022260 <cos>:
 8022260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022262:	eeb0 7b40 	vmov.f64	d7, d0
 8022266:	ee17 3a90 	vmov	r3, s15
 802226a:	4a21      	ldr	r2, [pc, #132]	@ (80222f0 <cos+0x90>)
 802226c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022270:	4293      	cmp	r3, r2
 8022272:	d806      	bhi.n	8022282 <cos+0x22>
 8022274:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80222e8 <cos+0x88>
 8022278:	b005      	add	sp, #20
 802227a:	f85d eb04 	ldr.w	lr, [sp], #4
 802227e:	f000 bd27 	b.w	8022cd0 <__kernel_cos>
 8022282:	4a1c      	ldr	r2, [pc, #112]	@ (80222f4 <cos+0x94>)
 8022284:	4293      	cmp	r3, r2
 8022286:	d904      	bls.n	8022292 <cos+0x32>
 8022288:	ee30 0b40 	vsub.f64	d0, d0, d0
 802228c:	b005      	add	sp, #20
 802228e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022292:	4668      	mov	r0, sp
 8022294:	f000 f95c 	bl	8022550 <__ieee754_rem_pio2>
 8022298:	f000 0003 	and.w	r0, r0, #3
 802229c:	2801      	cmp	r0, #1
 802229e:	d009      	beq.n	80222b4 <cos+0x54>
 80222a0:	2802      	cmp	r0, #2
 80222a2:	d010      	beq.n	80222c6 <cos+0x66>
 80222a4:	b9b0      	cbnz	r0, 80222d4 <cos+0x74>
 80222a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222aa:	ed9d 0b00 	vldr	d0, [sp]
 80222ae:	f000 fd0f 	bl	8022cd0 <__kernel_cos>
 80222b2:	e7eb      	b.n	802228c <cos+0x2c>
 80222b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222b8:	ed9d 0b00 	vldr	d0, [sp]
 80222bc:	f000 fd70 	bl	8022da0 <__kernel_sin>
 80222c0:	eeb1 0b40 	vneg.f64	d0, d0
 80222c4:	e7e2      	b.n	802228c <cos+0x2c>
 80222c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222ca:	ed9d 0b00 	vldr	d0, [sp]
 80222ce:	f000 fcff 	bl	8022cd0 <__kernel_cos>
 80222d2:	e7f5      	b.n	80222c0 <cos+0x60>
 80222d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222d8:	ed9d 0b00 	vldr	d0, [sp]
 80222dc:	2001      	movs	r0, #1
 80222de:	f000 fd5f 	bl	8022da0 <__kernel_sin>
 80222e2:	e7d3      	b.n	802228c <cos+0x2c>
 80222e4:	f3af 8000 	nop.w
	...
 80222f0:	3fe921fb 	.word	0x3fe921fb
 80222f4:	7fefffff 	.word	0x7fefffff

080222f8 <fabs>:
 80222f8:	ec51 0b10 	vmov	r0, r1, d0
 80222fc:	4602      	mov	r2, r0
 80222fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022302:	ec43 2b10 	vmov	d0, r2, r3
 8022306:	4770      	bx	lr

08022308 <sin>:
 8022308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802230a:	eeb0 7b40 	vmov.f64	d7, d0
 802230e:	ee17 3a90 	vmov	r3, s15
 8022312:	4a21      	ldr	r2, [pc, #132]	@ (8022398 <sin+0x90>)
 8022314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022318:	4293      	cmp	r3, r2
 802231a:	d807      	bhi.n	802232c <sin+0x24>
 802231c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8022390 <sin+0x88>
 8022320:	2000      	movs	r0, #0
 8022322:	b005      	add	sp, #20
 8022324:	f85d eb04 	ldr.w	lr, [sp], #4
 8022328:	f000 bd3a 	b.w	8022da0 <__kernel_sin>
 802232c:	4a1b      	ldr	r2, [pc, #108]	@ (802239c <sin+0x94>)
 802232e:	4293      	cmp	r3, r2
 8022330:	d904      	bls.n	802233c <sin+0x34>
 8022332:	ee30 0b40 	vsub.f64	d0, d0, d0
 8022336:	b005      	add	sp, #20
 8022338:	f85d fb04 	ldr.w	pc, [sp], #4
 802233c:	4668      	mov	r0, sp
 802233e:	f000 f907 	bl	8022550 <__ieee754_rem_pio2>
 8022342:	f000 0003 	and.w	r0, r0, #3
 8022346:	2801      	cmp	r0, #1
 8022348:	d00a      	beq.n	8022360 <sin+0x58>
 802234a:	2802      	cmp	r0, #2
 802234c:	d00f      	beq.n	802236e <sin+0x66>
 802234e:	b9c0      	cbnz	r0, 8022382 <sin+0x7a>
 8022350:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022354:	ed9d 0b00 	vldr	d0, [sp]
 8022358:	2001      	movs	r0, #1
 802235a:	f000 fd21 	bl	8022da0 <__kernel_sin>
 802235e:	e7ea      	b.n	8022336 <sin+0x2e>
 8022360:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022364:	ed9d 0b00 	vldr	d0, [sp]
 8022368:	f000 fcb2 	bl	8022cd0 <__kernel_cos>
 802236c:	e7e3      	b.n	8022336 <sin+0x2e>
 802236e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022372:	ed9d 0b00 	vldr	d0, [sp]
 8022376:	2001      	movs	r0, #1
 8022378:	f000 fd12 	bl	8022da0 <__kernel_sin>
 802237c:	eeb1 0b40 	vneg.f64	d0, d0
 8022380:	e7d9      	b.n	8022336 <sin+0x2e>
 8022382:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022386:	ed9d 0b00 	vldr	d0, [sp]
 802238a:	f000 fca1 	bl	8022cd0 <__kernel_cos>
 802238e:	e7f5      	b.n	802237c <sin+0x74>
	...
 8022398:	3fe921fb 	.word	0x3fe921fb
 802239c:	7fefffff 	.word	0x7fefffff

080223a0 <tan>:
 80223a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80223a2:	eeb0 7b40 	vmov.f64	d7, d0
 80223a6:	ee17 3a90 	vmov	r3, s15
 80223aa:	4a15      	ldr	r2, [pc, #84]	@ (8022400 <tan+0x60>)
 80223ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80223b0:	4293      	cmp	r3, r2
 80223b2:	d807      	bhi.n	80223c4 <tan+0x24>
 80223b4:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 80223f8 <tan+0x58>
 80223b8:	2001      	movs	r0, #1
 80223ba:	b005      	add	sp, #20
 80223bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80223c0:	f000 bd46 	b.w	8022e50 <__kernel_tan>
 80223c4:	4a0f      	ldr	r2, [pc, #60]	@ (8022404 <tan+0x64>)
 80223c6:	4293      	cmp	r3, r2
 80223c8:	d904      	bls.n	80223d4 <tan+0x34>
 80223ca:	ee30 0b40 	vsub.f64	d0, d0, d0
 80223ce:	b005      	add	sp, #20
 80223d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80223d4:	4668      	mov	r0, sp
 80223d6:	f000 f8bb 	bl	8022550 <__ieee754_rem_pio2>
 80223da:	0040      	lsls	r0, r0, #1
 80223dc:	f000 0002 	and.w	r0, r0, #2
 80223e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80223e4:	ed9d 0b00 	vldr	d0, [sp]
 80223e8:	f1c0 0001 	rsb	r0, r0, #1
 80223ec:	f000 fd30 	bl	8022e50 <__kernel_tan>
 80223f0:	e7ed      	b.n	80223ce <tan+0x2e>
 80223f2:	bf00      	nop
 80223f4:	f3af 8000 	nop.w
	...
 8022400:	3fe921fb 	.word	0x3fe921fb
 8022404:	7fefffff 	.word	0x7fefffff

08022408 <__ieee754_atan2f>:
 8022408:	ee10 2a90 	vmov	r2, s1
 802240c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8022410:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022414:	b510      	push	{r4, lr}
 8022416:	eef0 7a40 	vmov.f32	s15, s0
 802241a:	d806      	bhi.n	802242a <__ieee754_atan2f+0x22>
 802241c:	ee10 0a10 	vmov	r0, s0
 8022420:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8022424:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022428:	d904      	bls.n	8022434 <__ieee754_atan2f+0x2c>
 802242a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802242e:	eeb0 0a67 	vmov.f32	s0, s15
 8022432:	bd10      	pop	{r4, pc}
 8022434:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022438:	d103      	bne.n	8022442 <__ieee754_atan2f+0x3a>
 802243a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802243e:	f000 be23 	b.w	8023088 <atanf>
 8022442:	1794      	asrs	r4, r2, #30
 8022444:	f004 0402 	and.w	r4, r4, #2
 8022448:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802244c:	b93b      	cbnz	r3, 802245e <__ieee754_atan2f+0x56>
 802244e:	2c02      	cmp	r4, #2
 8022450:	d05c      	beq.n	802250c <__ieee754_atan2f+0x104>
 8022452:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022520 <__ieee754_atan2f+0x118>
 8022456:	2c03      	cmp	r4, #3
 8022458:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802245c:	e7e7      	b.n	802242e <__ieee754_atan2f+0x26>
 802245e:	b939      	cbnz	r1, 8022470 <__ieee754_atan2f+0x68>
 8022460:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8022524 <__ieee754_atan2f+0x11c>
 8022464:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022528 <__ieee754_atan2f+0x120>
 8022468:	2800      	cmp	r0, #0
 802246a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802246e:	e7de      	b.n	802242e <__ieee754_atan2f+0x26>
 8022470:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022474:	d110      	bne.n	8022498 <__ieee754_atan2f+0x90>
 8022476:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802247a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 802247e:	d107      	bne.n	8022490 <__ieee754_atan2f+0x88>
 8022480:	2c02      	cmp	r4, #2
 8022482:	d846      	bhi.n	8022512 <__ieee754_atan2f+0x10a>
 8022484:	4b29      	ldr	r3, [pc, #164]	@ (802252c <__ieee754_atan2f+0x124>)
 8022486:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802248a:	edd3 7a00 	vldr	s15, [r3]
 802248e:	e7ce      	b.n	802242e <__ieee754_atan2f+0x26>
 8022490:	2c02      	cmp	r4, #2
 8022492:	d841      	bhi.n	8022518 <__ieee754_atan2f+0x110>
 8022494:	4b26      	ldr	r3, [pc, #152]	@ (8022530 <__ieee754_atan2f+0x128>)
 8022496:	e7f6      	b.n	8022486 <__ieee754_atan2f+0x7e>
 8022498:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802249c:	d0e0      	beq.n	8022460 <__ieee754_atan2f+0x58>
 802249e:	1a5b      	subs	r3, r3, r1
 80224a0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80224a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80224a8:	da1a      	bge.n	80224e0 <__ieee754_atan2f+0xd8>
 80224aa:	2a00      	cmp	r2, #0
 80224ac:	da01      	bge.n	80224b2 <__ieee754_atan2f+0xaa>
 80224ae:	313c      	adds	r1, #60	@ 0x3c
 80224b0:	db19      	blt.n	80224e6 <__ieee754_atan2f+0xde>
 80224b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80224b6:	f7ff fecb 	bl	8022250 <fabsf>
 80224ba:	f000 fde5 	bl	8023088 <atanf>
 80224be:	eef0 7a40 	vmov.f32	s15, s0
 80224c2:	2c01      	cmp	r4, #1
 80224c4:	d012      	beq.n	80224ec <__ieee754_atan2f+0xe4>
 80224c6:	2c02      	cmp	r4, #2
 80224c8:	d017      	beq.n	80224fa <__ieee754_atan2f+0xf2>
 80224ca:	2c00      	cmp	r4, #0
 80224cc:	d0af      	beq.n	802242e <__ieee754_atan2f+0x26>
 80224ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8022534 <__ieee754_atan2f+0x12c>
 80224d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80224d6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8022538 <__ieee754_atan2f+0x130>
 80224da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80224de:	e7a6      	b.n	802242e <__ieee754_atan2f+0x26>
 80224e0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8022524 <__ieee754_atan2f+0x11c>
 80224e4:	e7ed      	b.n	80224c2 <__ieee754_atan2f+0xba>
 80224e6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802253c <__ieee754_atan2f+0x134>
 80224ea:	e7ea      	b.n	80224c2 <__ieee754_atan2f+0xba>
 80224ec:	ee17 3a90 	vmov	r3, s15
 80224f0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80224f4:	ee07 3a90 	vmov	s15, r3
 80224f8:	e799      	b.n	802242e <__ieee754_atan2f+0x26>
 80224fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8022534 <__ieee754_atan2f+0x12c>
 80224fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022502:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8022538 <__ieee754_atan2f+0x130>
 8022506:	ee77 7a67 	vsub.f32	s15, s14, s15
 802250a:	e790      	b.n	802242e <__ieee754_atan2f+0x26>
 802250c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8022538 <__ieee754_atan2f+0x130>
 8022510:	e78d      	b.n	802242e <__ieee754_atan2f+0x26>
 8022512:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8022540 <__ieee754_atan2f+0x138>
 8022516:	e78a      	b.n	802242e <__ieee754_atan2f+0x26>
 8022518:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802253c <__ieee754_atan2f+0x134>
 802251c:	e787      	b.n	802242e <__ieee754_atan2f+0x26>
 802251e:	bf00      	nop
 8022520:	c0490fdb 	.word	0xc0490fdb
 8022524:	3fc90fdb 	.word	0x3fc90fdb
 8022528:	bfc90fdb 	.word	0xbfc90fdb
 802252c:	08026f84 	.word	0x08026f84
 8022530:	08026f78 	.word	0x08026f78
 8022534:	33bbbd2e 	.word	0x33bbbd2e
 8022538:	40490fdb 	.word	0x40490fdb
 802253c:	00000000 	.word	0x00000000
 8022540:	3f490fdb 	.word	0x3f490fdb

08022544 <__ieee754_sqrt>:
 8022544:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8022548:	4770      	bx	lr
 802254a:	0000      	movs	r0, r0
 802254c:	0000      	movs	r0, r0
	...

08022550 <__ieee754_rem_pio2>:
 8022550:	b570      	push	{r4, r5, r6, lr}
 8022552:	eeb0 7b40 	vmov.f64	d7, d0
 8022556:	ee17 5a90 	vmov	r5, s15
 802255a:	4b99      	ldr	r3, [pc, #612]	@ (80227c0 <__ieee754_rem_pio2+0x270>)
 802255c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8022560:	429e      	cmp	r6, r3
 8022562:	b088      	sub	sp, #32
 8022564:	4604      	mov	r4, r0
 8022566:	d807      	bhi.n	8022578 <__ieee754_rem_pio2+0x28>
 8022568:	2200      	movs	r2, #0
 802256a:	2300      	movs	r3, #0
 802256c:	ed84 0b00 	vstr	d0, [r4]
 8022570:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8022574:	2000      	movs	r0, #0
 8022576:	e01b      	b.n	80225b0 <__ieee754_rem_pio2+0x60>
 8022578:	4b92      	ldr	r3, [pc, #584]	@ (80227c4 <__ieee754_rem_pio2+0x274>)
 802257a:	429e      	cmp	r6, r3
 802257c:	d83b      	bhi.n	80225f6 <__ieee754_rem_pio2+0xa6>
 802257e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8022582:	2d00      	cmp	r5, #0
 8022584:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8022780 <__ieee754_rem_pio2+0x230>
 8022588:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 802258c:	dd19      	ble.n	80225c2 <__ieee754_rem_pio2+0x72>
 802258e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8022592:	429e      	cmp	r6, r3
 8022594:	d00e      	beq.n	80225b4 <__ieee754_rem_pio2+0x64>
 8022596:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8022788 <__ieee754_rem_pio2+0x238>
 802259a:	ee37 6b45 	vsub.f64	d6, d7, d5
 802259e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80225a2:	ed84 6b00 	vstr	d6, [r4]
 80225a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80225aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80225ae:	2001      	movs	r0, #1
 80225b0:	b008      	add	sp, #32
 80225b2:	bd70      	pop	{r4, r5, r6, pc}
 80225b4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8022790 <__ieee754_rem_pio2+0x240>
 80225b8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8022798 <__ieee754_rem_pio2+0x248>
 80225bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80225c0:	e7eb      	b.n	802259a <__ieee754_rem_pio2+0x4a>
 80225c2:	429e      	cmp	r6, r3
 80225c4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80225c8:	d00e      	beq.n	80225e8 <__ieee754_rem_pio2+0x98>
 80225ca:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8022788 <__ieee754_rem_pio2+0x238>
 80225ce:	ee37 6b05 	vadd.f64	d6, d7, d5
 80225d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80225d6:	ed84 6b00 	vstr	d6, [r4]
 80225da:	ee37 7b05 	vadd.f64	d7, d7, d5
 80225de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80225e6:	e7e3      	b.n	80225b0 <__ieee754_rem_pio2+0x60>
 80225e8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8022790 <__ieee754_rem_pio2+0x240>
 80225ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8022798 <__ieee754_rem_pio2+0x248>
 80225f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80225f4:	e7eb      	b.n	80225ce <__ieee754_rem_pio2+0x7e>
 80225f6:	4b74      	ldr	r3, [pc, #464]	@ (80227c8 <__ieee754_rem_pio2+0x278>)
 80225f8:	429e      	cmp	r6, r3
 80225fa:	d870      	bhi.n	80226de <__ieee754_rem_pio2+0x18e>
 80225fc:	f7ff fe7c 	bl	80222f8 <fabs>
 8022600:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8022604:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80227a0 <__ieee754_rem_pio2+0x250>
 8022608:	eea0 7b06 	vfma.f64	d7, d0, d6
 802260c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8022610:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022614:	ee17 0a90 	vmov	r0, s15
 8022618:	eeb1 4b45 	vneg.f64	d4, d5
 802261c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8022780 <__ieee754_rem_pio2+0x230>
 8022620:	eea5 0b47 	vfms.f64	d0, d5, d7
 8022624:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8022788 <__ieee754_rem_pio2+0x238>
 8022628:	281f      	cmp	r0, #31
 802262a:	ee25 7b07 	vmul.f64	d7, d5, d7
 802262e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8022632:	dc05      	bgt.n	8022640 <__ieee754_rem_pio2+0xf0>
 8022634:	4b65      	ldr	r3, [pc, #404]	@ (80227cc <__ieee754_rem_pio2+0x27c>)
 8022636:	1e42      	subs	r2, r0, #1
 8022638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802263c:	42b3      	cmp	r3, r6
 802263e:	d109      	bne.n	8022654 <__ieee754_rem_pio2+0x104>
 8022640:	ee16 3a90 	vmov	r3, s13
 8022644:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8022648:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 802264c:	2b10      	cmp	r3, #16
 802264e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8022652:	dc02      	bgt.n	802265a <__ieee754_rem_pio2+0x10a>
 8022654:	ed84 6b00 	vstr	d6, [r4]
 8022658:	e01a      	b.n	8022690 <__ieee754_rem_pio2+0x140>
 802265a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8022790 <__ieee754_rem_pio2+0x240>
 802265e:	eeb0 6b40 	vmov.f64	d6, d0
 8022662:	eea4 6b03 	vfma.f64	d6, d4, d3
 8022666:	ee30 7b46 	vsub.f64	d7, d0, d6
 802266a:	eea4 7b03 	vfma.f64	d7, d4, d3
 802266e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8022798 <__ieee754_rem_pio2+0x248>
 8022672:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8022676:	ee36 3b47 	vsub.f64	d3, d6, d7
 802267a:	ee13 3a90 	vmov	r3, s7
 802267e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8022682:	1ad3      	subs	r3, r2, r3
 8022684:	2b31      	cmp	r3, #49	@ 0x31
 8022686:	dc17      	bgt.n	80226b8 <__ieee754_rem_pio2+0x168>
 8022688:	eeb0 0b46 	vmov.f64	d0, d6
 802268c:	ed84 3b00 	vstr	d3, [r4]
 8022690:	ed94 6b00 	vldr	d6, [r4]
 8022694:	2d00      	cmp	r5, #0
 8022696:	ee30 0b46 	vsub.f64	d0, d0, d6
 802269a:	ee30 0b47 	vsub.f64	d0, d0, d7
 802269e:	ed84 0b02 	vstr	d0, [r4, #8]
 80226a2:	da85      	bge.n	80225b0 <__ieee754_rem_pio2+0x60>
 80226a4:	eeb1 6b46 	vneg.f64	d6, d6
 80226a8:	eeb1 0b40 	vneg.f64	d0, d0
 80226ac:	ed84 6b00 	vstr	d6, [r4]
 80226b0:	ed84 0b02 	vstr	d0, [r4, #8]
 80226b4:	4240      	negs	r0, r0
 80226b6:	e77b      	b.n	80225b0 <__ieee754_rem_pio2+0x60>
 80226b8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80227a8 <__ieee754_rem_pio2+0x258>
 80226bc:	eeb0 0b46 	vmov.f64	d0, d6
 80226c0:	eea4 0b07 	vfma.f64	d0, d4, d7
 80226c4:	ee36 6b40 	vsub.f64	d6, d6, d0
 80226c8:	eea4 6b07 	vfma.f64	d6, d4, d7
 80226cc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80227b0 <__ieee754_rem_pio2+0x260>
 80226d0:	eeb0 7b46 	vmov.f64	d7, d6
 80226d4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80226d8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80226dc:	e7ba      	b.n	8022654 <__ieee754_rem_pio2+0x104>
 80226de:	4b3c      	ldr	r3, [pc, #240]	@ (80227d0 <__ieee754_rem_pio2+0x280>)
 80226e0:	429e      	cmp	r6, r3
 80226e2:	d906      	bls.n	80226f2 <__ieee754_rem_pio2+0x1a2>
 80226e4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80226e8:	ed80 7b02 	vstr	d7, [r0, #8]
 80226ec:	ed80 7b00 	vstr	d7, [r0]
 80226f0:	e740      	b.n	8022574 <__ieee754_rem_pio2+0x24>
 80226f2:	ee10 3a10 	vmov	r3, s0
 80226f6:	1532      	asrs	r2, r6, #20
 80226f8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80226fc:	4618      	mov	r0, r3
 80226fe:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8022702:	ec41 0b17 	vmov	d7, r0, r1
 8022706:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802270a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80227b8 <__ieee754_rem_pio2+0x268>
 802270e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8022712:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022716:	ed8d 6b02 	vstr	d6, [sp, #8]
 802271a:	ee27 7b05 	vmul.f64	d7, d7, d5
 802271e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8022722:	a808      	add	r0, sp, #32
 8022724:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8022728:	ee37 7b46 	vsub.f64	d7, d7, d6
 802272c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8022730:	ee27 7b05 	vmul.f64	d7, d7, d5
 8022734:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022738:	2103      	movs	r1, #3
 802273a:	ed30 7b02 	vldmdb	r0!, {d7}
 802273e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022746:	460b      	mov	r3, r1
 8022748:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 802274c:	d0f5      	beq.n	802273a <__ieee754_rem_pio2+0x1ea>
 802274e:	4921      	ldr	r1, [pc, #132]	@ (80227d4 <__ieee754_rem_pio2+0x284>)
 8022750:	9101      	str	r1, [sp, #4]
 8022752:	2102      	movs	r1, #2
 8022754:	9100      	str	r1, [sp, #0]
 8022756:	a802      	add	r0, sp, #8
 8022758:	4621      	mov	r1, r4
 802275a:	f000 f83d 	bl	80227d8 <__kernel_rem_pio2>
 802275e:	2d00      	cmp	r5, #0
 8022760:	f6bf af26 	bge.w	80225b0 <__ieee754_rem_pio2+0x60>
 8022764:	ed94 7b00 	vldr	d7, [r4]
 8022768:	eeb1 7b47 	vneg.f64	d7, d7
 802276c:	ed84 7b00 	vstr	d7, [r4]
 8022770:	ed94 7b02 	vldr	d7, [r4, #8]
 8022774:	eeb1 7b47 	vneg.f64	d7, d7
 8022778:	ed84 7b02 	vstr	d7, [r4, #8]
 802277c:	e79a      	b.n	80226b4 <__ieee754_rem_pio2+0x164>
 802277e:	bf00      	nop
 8022780:	54400000 	.word	0x54400000
 8022784:	3ff921fb 	.word	0x3ff921fb
 8022788:	1a626331 	.word	0x1a626331
 802278c:	3dd0b461 	.word	0x3dd0b461
 8022790:	1a600000 	.word	0x1a600000
 8022794:	3dd0b461 	.word	0x3dd0b461
 8022798:	2e037073 	.word	0x2e037073
 802279c:	3ba3198a 	.word	0x3ba3198a
 80227a0:	6dc9c883 	.word	0x6dc9c883
 80227a4:	3fe45f30 	.word	0x3fe45f30
 80227a8:	2e000000 	.word	0x2e000000
 80227ac:	3ba3198a 	.word	0x3ba3198a
 80227b0:	252049c1 	.word	0x252049c1
 80227b4:	397b839a 	.word	0x397b839a
 80227b8:	00000000 	.word	0x00000000
 80227bc:	41700000 	.word	0x41700000
 80227c0:	3fe921fb 	.word	0x3fe921fb
 80227c4:	4002d97b 	.word	0x4002d97b
 80227c8:	413921fb 	.word	0x413921fb
 80227cc:	08026f90 	.word	0x08026f90
 80227d0:	7fefffff 	.word	0x7fefffff
 80227d4:	08027010 	.word	0x08027010

080227d8 <__kernel_rem_pio2>:
 80227d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227dc:	ed2d 8b06 	vpush	{d8-d10}
 80227e0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80227e4:	469b      	mov	fp, r3
 80227e6:	9001      	str	r0, [sp, #4]
 80227e8:	4bbb      	ldr	r3, [pc, #748]	@ (8022ad8 <__kernel_rem_pio2+0x300>)
 80227ea:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80227ec:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80227f0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80227f4:	f112 0f14 	cmn.w	r2, #20
 80227f8:	bfa8      	it	ge
 80227fa:	1ed3      	subge	r3, r2, #3
 80227fc:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8022800:	bfb8      	it	lt
 8022802:	2300      	movlt	r3, #0
 8022804:	f06f 0517 	mvn.w	r5, #23
 8022808:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8022ac0 <__kernel_rem_pio2+0x2e8>
 802280c:	bfa4      	itt	ge
 802280e:	2018      	movge	r0, #24
 8022810:	fb93 f3f0 	sdivge	r3, r3, r0
 8022814:	fb03 5505 	mla	r5, r3, r5, r5
 8022818:	eba3 040a 	sub.w	r4, r3, sl
 802281c:	4415      	add	r5, r2
 802281e:	460f      	mov	r7, r1
 8022820:	eb09 060a 	add.w	r6, r9, sl
 8022824:	a81a      	add	r0, sp, #104	@ 0x68
 8022826:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 802282a:	2200      	movs	r2, #0
 802282c:	42b2      	cmp	r2, r6
 802282e:	dd0e      	ble.n	802284e <__kernel_rem_pio2+0x76>
 8022830:	aa1a      	add	r2, sp, #104	@ 0x68
 8022832:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8022836:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 802283a:	2600      	movs	r6, #0
 802283c:	454e      	cmp	r6, r9
 802283e:	dc25      	bgt.n	802288c <__kernel_rem_pio2+0xb4>
 8022840:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8022ac0 <__kernel_rem_pio2+0x2e8>
 8022844:	f8dd c004 	ldr.w	ip, [sp, #4]
 8022848:	4614      	mov	r4, r2
 802284a:	2000      	movs	r0, #0
 802284c:	e015      	b.n	802287a <__kernel_rem_pio2+0xa2>
 802284e:	42d4      	cmn	r4, r2
 8022850:	d409      	bmi.n	8022866 <__kernel_rem_pio2+0x8e>
 8022852:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8022856:	ee07 1a90 	vmov	s15, r1
 802285a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802285e:	eca0 7b02 	vstmia	r0!, {d7}
 8022862:	3201      	adds	r2, #1
 8022864:	e7e2      	b.n	802282c <__kernel_rem_pio2+0x54>
 8022866:	eeb0 7b46 	vmov.f64	d7, d6
 802286a:	e7f8      	b.n	802285e <__kernel_rem_pio2+0x86>
 802286c:	ecbc 5b02 	vldmia	ip!, {d5}
 8022870:	ed94 6b00 	vldr	d6, [r4]
 8022874:	3001      	adds	r0, #1
 8022876:	eea5 7b06 	vfma.f64	d7, d5, d6
 802287a:	4550      	cmp	r0, sl
 802287c:	f1a4 0408 	sub.w	r4, r4, #8
 8022880:	ddf4      	ble.n	802286c <__kernel_rem_pio2+0x94>
 8022882:	ecae 7b02 	vstmia	lr!, {d7}
 8022886:	3601      	adds	r6, #1
 8022888:	3208      	adds	r2, #8
 802288a:	e7d7      	b.n	802283c <__kernel_rem_pio2+0x64>
 802288c:	aa06      	add	r2, sp, #24
 802288e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8022ac8 <__kernel_rem_pio2+0x2f0>
 8022892:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8022ad0 <__kernel_rem_pio2+0x2f8>
 8022896:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 802289a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 802289e:	9203      	str	r2, [sp, #12]
 80228a0:	9302      	str	r3, [sp, #8]
 80228a2:	464c      	mov	r4, r9
 80228a4:	00e3      	lsls	r3, r4, #3
 80228a6:	9304      	str	r3, [sp, #16]
 80228a8:	ab92      	add	r3, sp, #584	@ 0x248
 80228aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80228ae:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80228b2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80228b4:	ab06      	add	r3, sp, #24
 80228b6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80228ba:	461e      	mov	r6, r3
 80228bc:	4620      	mov	r0, r4
 80228be:	2800      	cmp	r0, #0
 80228c0:	f1a2 0208 	sub.w	r2, r2, #8
 80228c4:	dc4a      	bgt.n	802295c <__kernel_rem_pio2+0x184>
 80228c6:	4628      	mov	r0, r5
 80228c8:	9305      	str	r3, [sp, #20]
 80228ca:	f000 fcb1 	bl	8023230 <scalbn>
 80228ce:	eeb0 8b40 	vmov.f64	d8, d0
 80228d2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80228d6:	ee28 0b00 	vmul.f64	d0, d8, d0
 80228da:	f000 fd29 	bl	8023330 <floor>
 80228de:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80228e2:	eea0 8b47 	vfms.f64	d8, d0, d7
 80228e6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80228ea:	2d00      	cmp	r5, #0
 80228ec:	ee17 8a90 	vmov	r8, s15
 80228f0:	9b05      	ldr	r3, [sp, #20]
 80228f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80228f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80228fa:	dd41      	ble.n	8022980 <__kernel_rem_pio2+0x1a8>
 80228fc:	1e60      	subs	r0, r4, #1
 80228fe:	aa06      	add	r2, sp, #24
 8022900:	f1c5 0c18 	rsb	ip, r5, #24
 8022904:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022908:	fa46 f20c 	asr.w	r2, r6, ip
 802290c:	4490      	add	r8, r2
 802290e:	fa02 f20c 	lsl.w	r2, r2, ip
 8022912:	1ab6      	subs	r6, r6, r2
 8022914:	aa06      	add	r2, sp, #24
 8022916:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 802291a:	f1c5 0217 	rsb	r2, r5, #23
 802291e:	4116      	asrs	r6, r2
 8022920:	2e00      	cmp	r6, #0
 8022922:	dd3c      	ble.n	802299e <__kernel_rem_pio2+0x1c6>
 8022924:	f04f 0c00 	mov.w	ip, #0
 8022928:	f108 0801 	add.w	r8, r8, #1
 802292c:	4660      	mov	r0, ip
 802292e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8022932:	4564      	cmp	r4, ip
 8022934:	dc66      	bgt.n	8022a04 <__kernel_rem_pio2+0x22c>
 8022936:	2d00      	cmp	r5, #0
 8022938:	dd03      	ble.n	8022942 <__kernel_rem_pio2+0x16a>
 802293a:	2d01      	cmp	r5, #1
 802293c:	d072      	beq.n	8022a24 <__kernel_rem_pio2+0x24c>
 802293e:	2d02      	cmp	r5, #2
 8022940:	d07a      	beq.n	8022a38 <__kernel_rem_pio2+0x260>
 8022942:	2e02      	cmp	r6, #2
 8022944:	d12b      	bne.n	802299e <__kernel_rem_pio2+0x1c6>
 8022946:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 802294a:	ee30 8b48 	vsub.f64	d8, d0, d8
 802294e:	b330      	cbz	r0, 802299e <__kernel_rem_pio2+0x1c6>
 8022950:	4628      	mov	r0, r5
 8022952:	f000 fc6d 	bl	8023230 <scalbn>
 8022956:	ee38 8b40 	vsub.f64	d8, d8, d0
 802295a:	e020      	b.n	802299e <__kernel_rem_pio2+0x1c6>
 802295c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8022960:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8022964:	3801      	subs	r0, #1
 8022966:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802296a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 802296e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8022972:	eca6 0a01 	vstmia	r6!, {s0}
 8022976:	ed92 0b00 	vldr	d0, [r2]
 802297a:	ee37 0b00 	vadd.f64	d0, d7, d0
 802297e:	e79e      	b.n	80228be <__kernel_rem_pio2+0xe6>
 8022980:	d105      	bne.n	802298e <__kernel_rem_pio2+0x1b6>
 8022982:	1e62      	subs	r2, r4, #1
 8022984:	a906      	add	r1, sp, #24
 8022986:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 802298a:	15f6      	asrs	r6, r6, #23
 802298c:	e7c8      	b.n	8022920 <__kernel_rem_pio2+0x148>
 802298e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8022992:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8022996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802299a:	da31      	bge.n	8022a00 <__kernel_rem_pio2+0x228>
 802299c:	2600      	movs	r6, #0
 802299e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80229a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229a6:	f040 809b 	bne.w	8022ae0 <__kernel_rem_pio2+0x308>
 80229aa:	1e62      	subs	r2, r4, #1
 80229ac:	2000      	movs	r0, #0
 80229ae:	454a      	cmp	r2, r9
 80229b0:	da49      	bge.n	8022a46 <__kernel_rem_pio2+0x26e>
 80229b2:	2800      	cmp	r0, #0
 80229b4:	d062      	beq.n	8022a7c <__kernel_rem_pio2+0x2a4>
 80229b6:	3c01      	subs	r4, #1
 80229b8:	ab06      	add	r3, sp, #24
 80229ba:	3d18      	subs	r5, #24
 80229bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d0f8      	beq.n	80229b6 <__kernel_rem_pio2+0x1de>
 80229c4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80229c8:	4628      	mov	r0, r5
 80229ca:	f000 fc31 	bl	8023230 <scalbn>
 80229ce:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8022ac8 <__kernel_rem_pio2+0x2f0>
 80229d2:	1c62      	adds	r2, r4, #1
 80229d4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80229d6:	00d3      	lsls	r3, r2, #3
 80229d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80229dc:	4622      	mov	r2, r4
 80229de:	2a00      	cmp	r2, #0
 80229e0:	f280 80a8 	bge.w	8022b34 <__kernel_rem_pio2+0x35c>
 80229e4:	4622      	mov	r2, r4
 80229e6:	2a00      	cmp	r2, #0
 80229e8:	f2c0 80c6 	blt.w	8022b78 <__kernel_rem_pio2+0x3a0>
 80229ec:	a96a      	add	r1, sp, #424	@ 0x1a8
 80229ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80229f2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8022ac0 <__kernel_rem_pio2+0x2e8>
 80229f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8022adc <__kernel_rem_pio2+0x304>
 80229fa:	2000      	movs	r0, #0
 80229fc:	1aa1      	subs	r1, r4, r2
 80229fe:	e0b0      	b.n	8022b62 <__kernel_rem_pio2+0x38a>
 8022a00:	2602      	movs	r6, #2
 8022a02:	e78f      	b.n	8022924 <__kernel_rem_pio2+0x14c>
 8022a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a08:	b948      	cbnz	r0, 8022a1e <__kernel_rem_pio2+0x246>
 8022a0a:	b122      	cbz	r2, 8022a16 <__kernel_rem_pio2+0x23e>
 8022a0c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8022a10:	f843 2c04 	str.w	r2, [r3, #-4]
 8022a14:	2201      	movs	r2, #1
 8022a16:	f10c 0c01 	add.w	ip, ip, #1
 8022a1a:	4610      	mov	r0, r2
 8022a1c:	e789      	b.n	8022932 <__kernel_rem_pio2+0x15a>
 8022a1e:	ebae 0202 	sub.w	r2, lr, r2
 8022a22:	e7f5      	b.n	8022a10 <__kernel_rem_pio2+0x238>
 8022a24:	1e62      	subs	r2, r4, #1
 8022a26:	ab06      	add	r3, sp, #24
 8022a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022a2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022a30:	a906      	add	r1, sp, #24
 8022a32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8022a36:	e784      	b.n	8022942 <__kernel_rem_pio2+0x16a>
 8022a38:	1e62      	subs	r2, r4, #1
 8022a3a:	ab06      	add	r3, sp, #24
 8022a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022a40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022a44:	e7f4      	b.n	8022a30 <__kernel_rem_pio2+0x258>
 8022a46:	ab06      	add	r3, sp, #24
 8022a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022a4c:	3a01      	subs	r2, #1
 8022a4e:	4318      	orrs	r0, r3
 8022a50:	e7ad      	b.n	80229ae <__kernel_rem_pio2+0x1d6>
 8022a52:	3301      	adds	r3, #1
 8022a54:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8022a58:	2800      	cmp	r0, #0
 8022a5a:	d0fa      	beq.n	8022a52 <__kernel_rem_pio2+0x27a>
 8022a5c:	9a04      	ldr	r2, [sp, #16]
 8022a5e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8022a62:	446a      	add	r2, sp
 8022a64:	eb04 000b 	add.w	r0, r4, fp
 8022a68:	a91a      	add	r1, sp, #104	@ 0x68
 8022a6a:	1c66      	adds	r6, r4, #1
 8022a6c:	3a98      	subs	r2, #152	@ 0x98
 8022a6e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8022a72:	4423      	add	r3, r4
 8022a74:	42b3      	cmp	r3, r6
 8022a76:	da04      	bge.n	8022a82 <__kernel_rem_pio2+0x2aa>
 8022a78:	461c      	mov	r4, r3
 8022a7a:	e713      	b.n	80228a4 <__kernel_rem_pio2+0xcc>
 8022a7c:	9a03      	ldr	r2, [sp, #12]
 8022a7e:	2301      	movs	r3, #1
 8022a80:	e7e8      	b.n	8022a54 <__kernel_rem_pio2+0x27c>
 8022a82:	9902      	ldr	r1, [sp, #8]
 8022a84:	f8dd c004 	ldr.w	ip, [sp, #4]
 8022a88:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8022a8c:	9104      	str	r1, [sp, #16]
 8022a8e:	ee07 1a90 	vmov	s15, r1
 8022a92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022a96:	2400      	movs	r4, #0
 8022a98:	eca0 7b02 	vstmia	r0!, {d7}
 8022a9c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8022ac0 <__kernel_rem_pio2+0x2e8>
 8022aa0:	4686      	mov	lr, r0
 8022aa2:	4554      	cmp	r4, sl
 8022aa4:	dd03      	ble.n	8022aae <__kernel_rem_pio2+0x2d6>
 8022aa6:	eca2 7b02 	vstmia	r2!, {d7}
 8022aaa:	3601      	adds	r6, #1
 8022aac:	e7e2      	b.n	8022a74 <__kernel_rem_pio2+0x29c>
 8022aae:	ecbc 5b02 	vldmia	ip!, {d5}
 8022ab2:	ed3e 6b02 	vldmdb	lr!, {d6}
 8022ab6:	3401      	adds	r4, #1
 8022ab8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8022abc:	e7f1      	b.n	8022aa2 <__kernel_rem_pio2+0x2ca>
 8022abe:	bf00      	nop
	...
 8022acc:	3e700000 	.word	0x3e700000
 8022ad0:	00000000 	.word	0x00000000
 8022ad4:	41700000 	.word	0x41700000
 8022ad8:	08027158 	.word	0x08027158
 8022adc:	08027118 	.word	0x08027118
 8022ae0:	4268      	negs	r0, r5
 8022ae2:	eeb0 0b48 	vmov.f64	d0, d8
 8022ae6:	f000 fba3 	bl	8023230 <scalbn>
 8022aea:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8022cb8 <__kernel_rem_pio2+0x4e0>
 8022aee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8022af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022af6:	db17      	blt.n	8022b28 <__kernel_rem_pio2+0x350>
 8022af8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8022cc0 <__kernel_rem_pio2+0x4e8>
 8022afc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8022b00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8022b04:	aa06      	add	r2, sp, #24
 8022b06:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8022b0a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8022b0e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8022b12:	3518      	adds	r5, #24
 8022b14:	ee10 3a10 	vmov	r3, s0
 8022b18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8022b1c:	ee17 3a10 	vmov	r3, s14
 8022b20:	3401      	adds	r4, #1
 8022b22:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8022b26:	e74d      	b.n	80229c4 <__kernel_rem_pio2+0x1ec>
 8022b28:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8022b2c:	aa06      	add	r2, sp, #24
 8022b2e:	ee10 3a10 	vmov	r3, s0
 8022b32:	e7f6      	b.n	8022b22 <__kernel_rem_pio2+0x34a>
 8022b34:	a806      	add	r0, sp, #24
 8022b36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8022b3a:	9001      	str	r0, [sp, #4]
 8022b3c:	ee07 0a90 	vmov	s15, r0
 8022b40:	3a01      	subs	r2, #1
 8022b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022b46:	ee27 7b00 	vmul.f64	d7, d7, d0
 8022b4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8022b4e:	ed21 7b02 	vstmdb	r1!, {d7}
 8022b52:	e744      	b.n	80229de <__kernel_rem_pio2+0x206>
 8022b54:	ecbc 5b02 	vldmia	ip!, {d5}
 8022b58:	ecb5 6b02 	vldmia	r5!, {d6}
 8022b5c:	3001      	adds	r0, #1
 8022b5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8022b62:	4548      	cmp	r0, r9
 8022b64:	dc01      	bgt.n	8022b6a <__kernel_rem_pio2+0x392>
 8022b66:	4281      	cmp	r1, r0
 8022b68:	daf4      	bge.n	8022b54 <__kernel_rem_pio2+0x37c>
 8022b6a:	a842      	add	r0, sp, #264	@ 0x108
 8022b6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8022b70:	ed81 7b00 	vstr	d7, [r1]
 8022b74:	3a01      	subs	r2, #1
 8022b76:	e736      	b.n	80229e6 <__kernel_rem_pio2+0x20e>
 8022b78:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8022b7a:	2a02      	cmp	r2, #2
 8022b7c:	dc0a      	bgt.n	8022b94 <__kernel_rem_pio2+0x3bc>
 8022b7e:	2a00      	cmp	r2, #0
 8022b80:	dc2d      	bgt.n	8022bde <__kernel_rem_pio2+0x406>
 8022b82:	d046      	beq.n	8022c12 <__kernel_rem_pio2+0x43a>
 8022b84:	f008 0007 	and.w	r0, r8, #7
 8022b88:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8022b8c:	ecbd 8b06 	vpop	{d8-d10}
 8022b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b94:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8022b96:	2a03      	cmp	r2, #3
 8022b98:	d1f4      	bne.n	8022b84 <__kernel_rem_pio2+0x3ac>
 8022b9a:	a942      	add	r1, sp, #264	@ 0x108
 8022b9c:	f1a3 0208 	sub.w	r2, r3, #8
 8022ba0:	440a      	add	r2, r1
 8022ba2:	4611      	mov	r1, r2
 8022ba4:	4620      	mov	r0, r4
 8022ba6:	2800      	cmp	r0, #0
 8022ba8:	f1a1 0108 	sub.w	r1, r1, #8
 8022bac:	dc52      	bgt.n	8022c54 <__kernel_rem_pio2+0x47c>
 8022bae:	4621      	mov	r1, r4
 8022bb0:	2901      	cmp	r1, #1
 8022bb2:	f1a2 0208 	sub.w	r2, r2, #8
 8022bb6:	dc5d      	bgt.n	8022c74 <__kernel_rem_pio2+0x49c>
 8022bb8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8022cc8 <__kernel_rem_pio2+0x4f0>
 8022bbc:	aa42      	add	r2, sp, #264	@ 0x108
 8022bbe:	4413      	add	r3, r2
 8022bc0:	2c01      	cmp	r4, #1
 8022bc2:	dc67      	bgt.n	8022c94 <__kernel_rem_pio2+0x4bc>
 8022bc4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8022bc8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8022bcc:	2e00      	cmp	r6, #0
 8022bce:	d167      	bne.n	8022ca0 <__kernel_rem_pio2+0x4c8>
 8022bd0:	ed87 5b00 	vstr	d5, [r7]
 8022bd4:	ed87 6b02 	vstr	d6, [r7, #8]
 8022bd8:	ed87 7b04 	vstr	d7, [r7, #16]
 8022bdc:	e7d2      	b.n	8022b84 <__kernel_rem_pio2+0x3ac>
 8022bde:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8022cc8 <__kernel_rem_pio2+0x4f0>
 8022be2:	aa42      	add	r2, sp, #264	@ 0x108
 8022be4:	4413      	add	r3, r2
 8022be6:	4622      	mov	r2, r4
 8022be8:	2a00      	cmp	r2, #0
 8022bea:	da24      	bge.n	8022c36 <__kernel_rem_pio2+0x45e>
 8022bec:	b34e      	cbz	r6, 8022c42 <__kernel_rem_pio2+0x46a>
 8022bee:	eeb1 7b46 	vneg.f64	d7, d6
 8022bf2:	ed87 7b00 	vstr	d7, [r7]
 8022bf6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8022bfa:	aa44      	add	r2, sp, #272	@ 0x110
 8022bfc:	2301      	movs	r3, #1
 8022bfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022c02:	429c      	cmp	r4, r3
 8022c04:	da20      	bge.n	8022c48 <__kernel_rem_pio2+0x470>
 8022c06:	b10e      	cbz	r6, 8022c0c <__kernel_rem_pio2+0x434>
 8022c08:	eeb1 7b47 	vneg.f64	d7, d7
 8022c0c:	ed87 7b02 	vstr	d7, [r7, #8]
 8022c10:	e7b8      	b.n	8022b84 <__kernel_rem_pio2+0x3ac>
 8022c12:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8022cc8 <__kernel_rem_pio2+0x4f0>
 8022c16:	aa42      	add	r2, sp, #264	@ 0x108
 8022c18:	4413      	add	r3, r2
 8022c1a:	2c00      	cmp	r4, #0
 8022c1c:	da05      	bge.n	8022c2a <__kernel_rem_pio2+0x452>
 8022c1e:	b10e      	cbz	r6, 8022c24 <__kernel_rem_pio2+0x44c>
 8022c20:	eeb1 7b47 	vneg.f64	d7, d7
 8022c24:	ed87 7b00 	vstr	d7, [r7]
 8022c28:	e7ac      	b.n	8022b84 <__kernel_rem_pio2+0x3ac>
 8022c2a:	ed33 6b02 	vldmdb	r3!, {d6}
 8022c2e:	3c01      	subs	r4, #1
 8022c30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022c34:	e7f1      	b.n	8022c1a <__kernel_rem_pio2+0x442>
 8022c36:	ed33 7b02 	vldmdb	r3!, {d7}
 8022c3a:	3a01      	subs	r2, #1
 8022c3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8022c40:	e7d2      	b.n	8022be8 <__kernel_rem_pio2+0x410>
 8022c42:	eeb0 7b46 	vmov.f64	d7, d6
 8022c46:	e7d4      	b.n	8022bf2 <__kernel_rem_pio2+0x41a>
 8022c48:	ecb2 6b02 	vldmia	r2!, {d6}
 8022c4c:	3301      	adds	r3, #1
 8022c4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022c52:	e7d6      	b.n	8022c02 <__kernel_rem_pio2+0x42a>
 8022c54:	ed91 7b00 	vldr	d7, [r1]
 8022c58:	ed91 5b02 	vldr	d5, [r1, #8]
 8022c5c:	3801      	subs	r0, #1
 8022c5e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8022c62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022c66:	ed81 6b00 	vstr	d6, [r1]
 8022c6a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8022c6e:	ed81 7b02 	vstr	d7, [r1, #8]
 8022c72:	e798      	b.n	8022ba6 <__kernel_rem_pio2+0x3ce>
 8022c74:	ed92 7b00 	vldr	d7, [r2]
 8022c78:	ed92 5b02 	vldr	d5, [r2, #8]
 8022c7c:	3901      	subs	r1, #1
 8022c7e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8022c82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022c86:	ed82 6b00 	vstr	d6, [r2]
 8022c8a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8022c8e:	ed82 7b02 	vstr	d7, [r2, #8]
 8022c92:	e78d      	b.n	8022bb0 <__kernel_rem_pio2+0x3d8>
 8022c94:	ed33 6b02 	vldmdb	r3!, {d6}
 8022c98:	3c01      	subs	r4, #1
 8022c9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022c9e:	e78f      	b.n	8022bc0 <__kernel_rem_pio2+0x3e8>
 8022ca0:	eeb1 5b45 	vneg.f64	d5, d5
 8022ca4:	eeb1 6b46 	vneg.f64	d6, d6
 8022ca8:	ed87 5b00 	vstr	d5, [r7]
 8022cac:	eeb1 7b47 	vneg.f64	d7, d7
 8022cb0:	ed87 6b02 	vstr	d6, [r7, #8]
 8022cb4:	e790      	b.n	8022bd8 <__kernel_rem_pio2+0x400>
 8022cb6:	bf00      	nop
 8022cb8:	00000000 	.word	0x00000000
 8022cbc:	41700000 	.word	0x41700000
 8022cc0:	00000000 	.word	0x00000000
 8022cc4:	3e700000 	.word	0x3e700000
	...

08022cd0 <__kernel_cos>:
 8022cd0:	eeb0 5b40 	vmov.f64	d5, d0
 8022cd4:	ee15 1a90 	vmov	r1, s11
 8022cd8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8022cdc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8022ce0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8022ce4:	d204      	bcs.n	8022cf0 <__kernel_cos+0x20>
 8022ce6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8022cea:	ee17 3a90 	vmov	r3, s15
 8022cee:	b343      	cbz	r3, 8022d42 <__kernel_cos+0x72>
 8022cf0:	ee25 6b05 	vmul.f64	d6, d5, d5
 8022cf4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8022cf8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8022d68 <__kernel_cos+0x98>
 8022cfc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8022d70 <__kernel_cos+0xa0>
 8022d00:	eea6 4b07 	vfma.f64	d4, d6, d7
 8022d04:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8022d78 <__kernel_cos+0xa8>
 8022d08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8022d0c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8022d80 <__kernel_cos+0xb0>
 8022d10:	eea7 4b06 	vfma.f64	d4, d7, d6
 8022d14:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8022d88 <__kernel_cos+0xb8>
 8022d18:	4b1f      	ldr	r3, [pc, #124]	@ (8022d98 <__kernel_cos+0xc8>)
 8022d1a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8022d1e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8022d90 <__kernel_cos+0xc0>
 8022d22:	4299      	cmp	r1, r3
 8022d24:	eea7 4b06 	vfma.f64	d4, d7, d6
 8022d28:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8022d2c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8022d30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022d34:	eea6 1b04 	vfma.f64	d1, d6, d4
 8022d38:	d804      	bhi.n	8022d44 <__kernel_cos+0x74>
 8022d3a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8022d3e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8022d42:	4770      	bx	lr
 8022d44:	4b15      	ldr	r3, [pc, #84]	@ (8022d9c <__kernel_cos+0xcc>)
 8022d46:	4299      	cmp	r1, r3
 8022d48:	d809      	bhi.n	8022d5e <__kernel_cos+0x8e>
 8022d4a:	2200      	movs	r2, #0
 8022d4c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8022d50:	ec43 2b16 	vmov	d6, r2, r3
 8022d54:	ee30 0b46 	vsub.f64	d0, d0, d6
 8022d58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8022d5c:	e7ed      	b.n	8022d3a <__kernel_cos+0x6a>
 8022d5e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8022d62:	e7f7      	b.n	8022d54 <__kernel_cos+0x84>
 8022d64:	f3af 8000 	nop.w
 8022d68:	be8838d4 	.word	0xbe8838d4
 8022d6c:	bda8fae9 	.word	0xbda8fae9
 8022d70:	bdb4b1c4 	.word	0xbdb4b1c4
 8022d74:	3e21ee9e 	.word	0x3e21ee9e
 8022d78:	809c52ad 	.word	0x809c52ad
 8022d7c:	be927e4f 	.word	0xbe927e4f
 8022d80:	19cb1590 	.word	0x19cb1590
 8022d84:	3efa01a0 	.word	0x3efa01a0
 8022d88:	16c15177 	.word	0x16c15177
 8022d8c:	bf56c16c 	.word	0xbf56c16c
 8022d90:	5555554c 	.word	0x5555554c
 8022d94:	3fa55555 	.word	0x3fa55555
 8022d98:	3fd33332 	.word	0x3fd33332
 8022d9c:	3fe90000 	.word	0x3fe90000

08022da0 <__kernel_sin>:
 8022da0:	ee10 3a90 	vmov	r3, s1
 8022da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022da8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8022dac:	d204      	bcs.n	8022db8 <__kernel_sin+0x18>
 8022dae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8022db2:	ee17 3a90 	vmov	r3, s15
 8022db6:	b35b      	cbz	r3, 8022e10 <__kernel_sin+0x70>
 8022db8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8022dbc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8022dc0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8022e18 <__kernel_sin+0x78>
 8022dc4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8022e20 <__kernel_sin+0x80>
 8022dc8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8022dcc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8022e28 <__kernel_sin+0x88>
 8022dd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8022dd4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8022e30 <__kernel_sin+0x90>
 8022dd8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8022ddc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8022e38 <__kernel_sin+0x98>
 8022de0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8022de4:	b930      	cbnz	r0, 8022df4 <__kernel_sin+0x54>
 8022de6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8022e40 <__kernel_sin+0xa0>
 8022dea:	eea6 4b07 	vfma.f64	d4, d6, d7
 8022dee:	eea4 0b05 	vfma.f64	d0, d4, d5
 8022df2:	4770      	bx	lr
 8022df4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8022df8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8022dfc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8022e00:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8022e04:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8022e48 <__kernel_sin+0xa8>
 8022e08:	eea5 1b07 	vfma.f64	d1, d5, d7
 8022e0c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8022e10:	4770      	bx	lr
 8022e12:	bf00      	nop
 8022e14:	f3af 8000 	nop.w
 8022e18:	5acfd57c 	.word	0x5acfd57c
 8022e1c:	3de5d93a 	.word	0x3de5d93a
 8022e20:	8a2b9ceb 	.word	0x8a2b9ceb
 8022e24:	be5ae5e6 	.word	0xbe5ae5e6
 8022e28:	57b1fe7d 	.word	0x57b1fe7d
 8022e2c:	3ec71de3 	.word	0x3ec71de3
 8022e30:	19c161d5 	.word	0x19c161d5
 8022e34:	bf2a01a0 	.word	0xbf2a01a0
 8022e38:	1110f8a6 	.word	0x1110f8a6
 8022e3c:	3f811111 	.word	0x3f811111
 8022e40:	55555549 	.word	0x55555549
 8022e44:	bfc55555 	.word	0xbfc55555
 8022e48:	55555549 	.word	0x55555549
 8022e4c:	3fc55555 	.word	0x3fc55555

08022e50 <__kernel_tan>:
 8022e50:	eeb0 7b40 	vmov.f64	d7, d0
 8022e54:	ee17 3a90 	vmov	r3, s15
 8022e58:	4989      	ldr	r1, [pc, #548]	@ (8023080 <__kernel_tan+0x230>)
 8022e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8022e5e:	428a      	cmp	r2, r1
 8022e60:	b510      	push	{r4, lr}
 8022e62:	d833      	bhi.n	8022ecc <__kernel_tan+0x7c>
 8022e64:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8022e68:	ee16 1a90 	vmov	r1, s13
 8022e6c:	2900      	cmp	r1, #0
 8022e6e:	d143      	bne.n	8022ef8 <__kernel_tan+0xa8>
 8022e70:	ee10 4a10 	vmov	r4, s0
 8022e74:	1c43      	adds	r3, r0, #1
 8022e76:	4323      	orrs	r3, r4
 8022e78:	4313      	orrs	r3, r2
 8022e7a:	d108      	bne.n	8022e8e <__kernel_tan+0x3e>
 8022e7c:	f7ff fa3c 	bl	80222f8 <fabs>
 8022e80:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8022e84:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8022e88:	eeb0 0b47 	vmov.f64	d0, d7
 8022e8c:	bd10      	pop	{r4, pc}
 8022e8e:	2801      	cmp	r0, #1
 8022e90:	d0fa      	beq.n	8022e88 <__kernel_tan+0x38>
 8022e92:	ee30 6b01 	vadd.f64	d6, d0, d1
 8022e96:	eebf 7b00 	vmov.f64	d7, #240	@ 0xbf800000 -1.0
 8022e9a:	ec53 2b16 	vmov	r2, r3, d6
 8022e9e:	ee87 3b06 	vdiv.f64	d3, d7, d6
 8022ea2:	460a      	mov	r2, r1
 8022ea4:	ec43 2b15 	vmov	d5, r2, r3
 8022ea8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8022eac:	ec53 2b13 	vmov	r2, r3, d3
 8022eb0:	ee35 4b40 	vsub.f64	d4, d5, d0
 8022eb4:	460a      	mov	r2, r1
 8022eb6:	ec43 2b17 	vmov	d7, r2, r3
 8022eba:	ee31 4b44 	vsub.f64	d4, d1, d4
 8022ebe:	eea5 6b07 	vfma.f64	d6, d5, d7
 8022ec2:	eea4 6b07 	vfma.f64	d6, d4, d7
 8022ec6:	eea6 7b03 	vfma.f64	d7, d6, d3
 8022eca:	e7dd      	b.n	8022e88 <__kernel_tan+0x38>
 8022ecc:	496d      	ldr	r1, [pc, #436]	@ (8023084 <__kernel_tan+0x234>)
 8022ece:	428a      	cmp	r2, r1
 8022ed0:	d912      	bls.n	8022ef8 <__kernel_tan+0xa8>
 8022ed2:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8023000 <__kernel_tan+0x1b0>
 8022ed6:	2b00      	cmp	r3, #0
 8022ed8:	bfb8      	it	lt
 8022eda:	eeb1 7b40 	vneglt.f64	d7, d0
 8022ede:	ee36 6b47 	vsub.f64	d6, d6, d7
 8022ee2:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8023008 <__kernel_tan+0x1b8>
 8022ee6:	bfb8      	it	lt
 8022ee8:	eeb1 1b41 	vneglt.f64	d1, d1
 8022eec:	ee37 7b41 	vsub.f64	d7, d7, d1
 8022ef0:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 8023010 <__kernel_tan+0x1c0>
 8022ef4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022ef8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8022efc:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 8023018 <__kernel_tan+0x1c8>
 8022f00:	ee25 6b05 	vmul.f64	d6, d5, d5
 8022f04:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8023020 <__kernel_tan+0x1d0>
 8022f08:	eea6 4b03 	vfma.f64	d4, d6, d3
 8022f0c:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 8023028 <__kernel_tan+0x1d8>
 8022f10:	eea4 3b06 	vfma.f64	d3, d4, d6
 8022f14:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8023030 <__kernel_tan+0x1e0>
 8022f18:	eea3 4b06 	vfma.f64	d4, d3, d6
 8022f1c:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 8023038 <__kernel_tan+0x1e8>
 8022f20:	eea4 3b06 	vfma.f64	d3, d4, d6
 8022f24:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8023040 <__kernel_tan+0x1f0>
 8022f28:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 8023048 <__kernel_tan+0x1f8>
 8022f2c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8022f30:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 8023050 <__kernel_tan+0x200>
 8022f34:	eea6 3b02 	vfma.f64	d3, d6, d2
 8022f38:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 8023058 <__kernel_tan+0x208>
 8022f3c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8022f40:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 8023060 <__kernel_tan+0x210>
 8022f44:	eea2 3b06 	vfma.f64	d3, d2, d6
 8022f48:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 8023068 <__kernel_tan+0x218>
 8022f4c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8022f50:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 8023070 <__kernel_tan+0x220>
 8022f54:	494b      	ldr	r1, [pc, #300]	@ (8023084 <__kernel_tan+0x234>)
 8022f56:	eea2 3b06 	vfma.f64	d3, d2, d6
 8022f5a:	ee27 2b05 	vmul.f64	d2, d7, d5
 8022f5e:	eeb0 6b44 	vmov.f64	d6, d4
 8022f62:	eeb0 4b41 	vmov.f64	d4, d1
 8022f66:	eea3 6b05 	vfma.f64	d6, d3, d5
 8022f6a:	eea6 4b02 	vfma.f64	d4, d6, d2
 8022f6e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8023078 <__kernel_tan+0x228>
 8022f72:	eea4 1b05 	vfma.f64	d1, d4, d5
 8022f76:	428a      	cmp	r2, r1
 8022f78:	eea2 1b06 	vfma.f64	d1, d2, d6
 8022f7c:	ee37 3b01 	vadd.f64	d3, d7, d1
 8022f80:	d91d      	bls.n	8022fbe <__kernel_tan+0x16e>
 8022f82:	ee23 2b03 	vmul.f64	d2, d3, d3
 8022f86:	179b      	asrs	r3, r3, #30
 8022f88:	ee06 0a90 	vmov	s13, r0
 8022f8c:	f003 0302 	and.w	r3, r3, #2
 8022f90:	f1c3 0301 	rsb	r3, r3, #1
 8022f94:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8022f98:	ee06 3a90 	vmov	s13, r3
 8022f9c:	ee33 3b05 	vadd.f64	d3, d3, d5
 8022fa0:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 8022fa4:	ee82 6b03 	vdiv.f64	d6, d2, d3
 8022fa8:	eeb0 3b00 	vmov.f64	d3, #0	@ 0x40000000  2.0
 8022fac:	ee36 6b41 	vsub.f64	d6, d6, d1
 8022fb0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8022fb4:	eea6 5b43 	vfms.f64	d5, d6, d3
 8022fb8:	ee24 7b05 	vmul.f64	d7, d4, d5
 8022fbc:	e764      	b.n	8022e88 <__kernel_tan+0x38>
 8022fbe:	2801      	cmp	r0, #1
 8022fc0:	d01a      	beq.n	8022ff8 <__kernel_tan+0x1a8>
 8022fc2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8022fc6:	ec51 0b13 	vmov	r0, r1, d3
 8022fca:	2000      	movs	r0, #0
 8022fcc:	ec41 0b14 	vmov	d4, r0, r1
 8022fd0:	ee34 7b47 	vsub.f64	d7, d4, d7
 8022fd4:	ee31 1b47 	vsub.f64	d1, d1, d7
 8022fd8:	eebf 7b00 	vmov.f64	d7, #240	@ 0xbf800000 -1.0
 8022fdc:	ee87 5b03 	vdiv.f64	d5, d7, d3
 8022fe0:	ec53 2b15 	vmov	r2, r3, d5
 8022fe4:	4602      	mov	r2, r0
 8022fe6:	ec43 2b17 	vmov	d7, r2, r3
 8022fea:	eea4 6b07 	vfma.f64	d6, d4, d7
 8022fee:	eea1 6b07 	vfma.f64	d6, d1, d7
 8022ff2:	eea6 7b05 	vfma.f64	d7, d6, d5
 8022ff6:	e747      	b.n	8022e88 <__kernel_tan+0x38>
 8022ff8:	eeb0 7b43 	vmov.f64	d7, d3
 8022ffc:	e744      	b.n	8022e88 <__kernel_tan+0x38>
 8022ffe:	bf00      	nop
 8023000:	54442d18 	.word	0x54442d18
 8023004:	3fe921fb 	.word	0x3fe921fb
 8023008:	33145c07 	.word	0x33145c07
 802300c:	3c81a626 	.word	0x3c81a626
	...
 8023018:	db605373 	.word	0xdb605373
 802301c:	bef375cb 	.word	0xbef375cb
 8023020:	a03792a6 	.word	0xa03792a6
 8023024:	3f147e88 	.word	0x3f147e88
 8023028:	f2f26501 	.word	0xf2f26501
 802302c:	3f4344d8 	.word	0x3f4344d8
 8023030:	c9560328 	.word	0xc9560328
 8023034:	3f6d6d22 	.word	0x3f6d6d22
 8023038:	8406d637 	.word	0x8406d637
 802303c:	3f9664f4 	.word	0x3f9664f4
 8023040:	1110fe7a 	.word	0x1110fe7a
 8023044:	3fc11111 	.word	0x3fc11111
 8023048:	74bf7ad4 	.word	0x74bf7ad4
 802304c:	3efb2a70 	.word	0x3efb2a70
 8023050:	32f0a7e9 	.word	0x32f0a7e9
 8023054:	3f12b80f 	.word	0x3f12b80f
 8023058:	1a8d1068 	.word	0x1a8d1068
 802305c:	3f3026f7 	.word	0x3f3026f7
 8023060:	fee08315 	.word	0xfee08315
 8023064:	3f57dbc8 	.word	0x3f57dbc8
 8023068:	e96e8493 	.word	0xe96e8493
 802306c:	3f8226e3 	.word	0x3f8226e3
 8023070:	1bb341fe 	.word	0x1bb341fe
 8023074:	3faba1ba 	.word	0x3faba1ba
 8023078:	55555563 	.word	0x55555563
 802307c:	3fd55555 	.word	0x3fd55555
 8023080:	3e2fffff 	.word	0x3e2fffff
 8023084:	3fe59427 	.word	0x3fe59427

08023088 <atanf>:
 8023088:	b538      	push	{r3, r4, r5, lr}
 802308a:	ee10 5a10 	vmov	r5, s0
 802308e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8023092:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8023096:	eef0 7a40 	vmov.f32	s15, s0
 802309a:	d30f      	bcc.n	80230bc <atanf+0x34>
 802309c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80230a0:	d904      	bls.n	80230ac <atanf+0x24>
 80230a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80230a6:	eeb0 0a67 	vmov.f32	s0, s15
 80230aa:	bd38      	pop	{r3, r4, r5, pc}
 80230ac:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80231e4 <atanf+0x15c>
 80230b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80231e8 <atanf+0x160>
 80230b4:	2d00      	cmp	r5, #0
 80230b6:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80230ba:	e7f4      	b.n	80230a6 <atanf+0x1e>
 80230bc:	4b4b      	ldr	r3, [pc, #300]	@ (80231ec <atanf+0x164>)
 80230be:	429c      	cmp	r4, r3
 80230c0:	d810      	bhi.n	80230e4 <atanf+0x5c>
 80230c2:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80230c6:	d20a      	bcs.n	80230de <atanf+0x56>
 80230c8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80231f0 <atanf+0x168>
 80230cc:	ee30 7a07 	vadd.f32	s14, s0, s14
 80230d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80230d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80230d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230dc:	dce3      	bgt.n	80230a6 <atanf+0x1e>
 80230de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80230e2:	e013      	b.n	802310c <atanf+0x84>
 80230e4:	f7ff f8b4 	bl	8022250 <fabsf>
 80230e8:	4b42      	ldr	r3, [pc, #264]	@ (80231f4 <atanf+0x16c>)
 80230ea:	429c      	cmp	r4, r3
 80230ec:	d84f      	bhi.n	802318e <atanf+0x106>
 80230ee:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80230f2:	429c      	cmp	r4, r3
 80230f4:	d841      	bhi.n	802317a <atanf+0xf2>
 80230f6:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80230fa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80230fe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023102:	2300      	movs	r3, #0
 8023104:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023108:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802310c:	1c5a      	adds	r2, r3, #1
 802310e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8023112:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80231f8 <atanf+0x170>
 8023116:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80231fc <atanf+0x174>
 802311a:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8023200 <atanf+0x178>
 802311e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8023122:	eee6 5a87 	vfma.f32	s11, s13, s14
 8023126:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8023204 <atanf+0x17c>
 802312a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802312e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8023208 <atanf+0x180>
 8023132:	eee7 5a26 	vfma.f32	s11, s14, s13
 8023136:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802320c <atanf+0x184>
 802313a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802313e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8023210 <atanf+0x188>
 8023142:	eee7 5a26 	vfma.f32	s11, s14, s13
 8023146:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8023214 <atanf+0x18c>
 802314a:	eea6 5a87 	vfma.f32	s10, s13, s14
 802314e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8023218 <atanf+0x190>
 8023152:	eea5 7a26 	vfma.f32	s14, s10, s13
 8023156:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802321c <atanf+0x194>
 802315a:	eea7 5a26 	vfma.f32	s10, s14, s13
 802315e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8023220 <atanf+0x198>
 8023162:	eea5 7a26 	vfma.f32	s14, s10, s13
 8023166:	ee27 7a26 	vmul.f32	s14, s14, s13
 802316a:	eea5 7a86 	vfma.f32	s14, s11, s12
 802316e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8023172:	d121      	bne.n	80231b8 <atanf+0x130>
 8023174:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023178:	e795      	b.n	80230a6 <atanf+0x1e>
 802317a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802317e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8023182:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023186:	2301      	movs	r3, #1
 8023188:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802318c:	e7be      	b.n	802310c <atanf+0x84>
 802318e:	4b25      	ldr	r3, [pc, #148]	@ (8023224 <atanf+0x19c>)
 8023190:	429c      	cmp	r4, r3
 8023192:	d80b      	bhi.n	80231ac <atanf+0x124>
 8023194:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8023198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802319c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80231a0:	2302      	movs	r3, #2
 80231a2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80231a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80231aa:	e7af      	b.n	802310c <atanf+0x84>
 80231ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80231b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80231b4:	2303      	movs	r3, #3
 80231b6:	e7a9      	b.n	802310c <atanf+0x84>
 80231b8:	4a1b      	ldr	r2, [pc, #108]	@ (8023228 <atanf+0x1a0>)
 80231ba:	491c      	ldr	r1, [pc, #112]	@ (802322c <atanf+0x1a4>)
 80231bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80231c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80231c4:	edd3 6a00 	vldr	s13, [r3]
 80231c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80231cc:	2d00      	cmp	r5, #0
 80231ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80231d2:	edd2 7a00 	vldr	s15, [r2]
 80231d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80231da:	bfb8      	it	lt
 80231dc:	eef1 7a67 	vneglt.f32	s15, s15
 80231e0:	e761      	b.n	80230a6 <atanf+0x1e>
 80231e2:	bf00      	nop
 80231e4:	bfc90fdb 	.word	0xbfc90fdb
 80231e8:	3fc90fdb 	.word	0x3fc90fdb
 80231ec:	3edfffff 	.word	0x3edfffff
 80231f0:	7149f2ca 	.word	0x7149f2ca
 80231f4:	3f97ffff 	.word	0x3f97ffff
 80231f8:	3c8569d7 	.word	0x3c8569d7
 80231fc:	3d4bda59 	.word	0x3d4bda59
 8023200:	bd6ef16b 	.word	0xbd6ef16b
 8023204:	3d886b35 	.word	0x3d886b35
 8023208:	3dba2e6e 	.word	0x3dba2e6e
 802320c:	3e124925 	.word	0x3e124925
 8023210:	3eaaaaab 	.word	0x3eaaaaab
 8023214:	bd15a221 	.word	0xbd15a221
 8023218:	bd9d8795 	.word	0xbd9d8795
 802321c:	bde38e38 	.word	0xbde38e38
 8023220:	be4ccccd 	.word	0xbe4ccccd
 8023224:	401bffff 	.word	0x401bffff
 8023228:	08027178 	.word	0x08027178
 802322c:	08027168 	.word	0x08027168

08023230 <scalbn>:
 8023230:	ee10 1a90 	vmov	r1, s1
 8023234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023238:	b98b      	cbnz	r3, 802325e <scalbn+0x2e>
 802323a:	ee10 3a10 	vmov	r3, s0
 802323e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8023242:	4319      	orrs	r1, r3
 8023244:	d00a      	beq.n	802325c <scalbn+0x2c>
 8023246:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80232f8 <scalbn+0xc8>
 802324a:	4b37      	ldr	r3, [pc, #220]	@ (8023328 <scalbn+0xf8>)
 802324c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8023250:	4298      	cmp	r0, r3
 8023252:	da0b      	bge.n	802326c <scalbn+0x3c>
 8023254:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8023300 <scalbn+0xd0>
 8023258:	ee20 0b07 	vmul.f64	d0, d0, d7
 802325c:	4770      	bx	lr
 802325e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8023262:	4293      	cmp	r3, r2
 8023264:	d107      	bne.n	8023276 <scalbn+0x46>
 8023266:	ee30 0b00 	vadd.f64	d0, d0, d0
 802326a:	4770      	bx	lr
 802326c:	ee10 1a90 	vmov	r1, s1
 8023270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023274:	3b36      	subs	r3, #54	@ 0x36
 8023276:	f24c 3250 	movw	r2, #50000	@ 0xc350
 802327a:	4290      	cmp	r0, r2
 802327c:	dd0d      	ble.n	802329a <scalbn+0x6a>
 802327e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8023308 <scalbn+0xd8>
 8023282:	ee10 3a90 	vmov	r3, s1
 8023286:	eeb0 6b47 	vmov.f64	d6, d7
 802328a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8023310 <scalbn+0xe0>
 802328e:	2b00      	cmp	r3, #0
 8023290:	fe27 7b05 	vselge.f64	d7, d7, d5
 8023294:	ee27 0b06 	vmul.f64	d0, d7, d6
 8023298:	4770      	bx	lr
 802329a:	4418      	add	r0, r3
 802329c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80232a0:	4298      	cmp	r0, r3
 80232a2:	dcec      	bgt.n	802327e <scalbn+0x4e>
 80232a4:	2800      	cmp	r0, #0
 80232a6:	dd0a      	ble.n	80232be <scalbn+0x8e>
 80232a8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80232ac:	ec53 2b10 	vmov	r2, r3, d0
 80232b0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80232b4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80232b8:	ec43 2b10 	vmov	d0, r2, r3
 80232bc:	4770      	bx	lr
 80232be:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80232c2:	da09      	bge.n	80232d8 <scalbn+0xa8>
 80232c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8023300 <scalbn+0xd0>
 80232c8:	ee10 3a90 	vmov	r3, s1
 80232cc:	eeb0 6b47 	vmov.f64	d6, d7
 80232d0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8023318 <scalbn+0xe8>
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	e7db      	b.n	8023290 <scalbn+0x60>
 80232d8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80232dc:	ec53 2b10 	vmov	r2, r3, d0
 80232e0:	3036      	adds	r0, #54	@ 0x36
 80232e2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80232e6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80232ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8023320 <scalbn+0xf0>
 80232ee:	ec43 2b10 	vmov	d0, r2, r3
 80232f2:	e7b1      	b.n	8023258 <scalbn+0x28>
 80232f4:	f3af 8000 	nop.w
 80232f8:	00000000 	.word	0x00000000
 80232fc:	43500000 	.word	0x43500000
 8023300:	c2f8f359 	.word	0xc2f8f359
 8023304:	01a56e1f 	.word	0x01a56e1f
 8023308:	8800759c 	.word	0x8800759c
 802330c:	7e37e43c 	.word	0x7e37e43c
 8023310:	8800759c 	.word	0x8800759c
 8023314:	fe37e43c 	.word	0xfe37e43c
 8023318:	c2f8f359 	.word	0xc2f8f359
 802331c:	81a56e1f 	.word	0x81a56e1f
 8023320:	00000000 	.word	0x00000000
 8023324:	3c900000 	.word	0x3c900000
 8023328:	ffff3cb0 	.word	0xffff3cb0
 802332c:	00000000 	.word	0x00000000

08023330 <floor>:
 8023330:	ee10 3a90 	vmov	r3, s1
 8023334:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8023338:	ee10 2a10 	vmov	r2, s0
 802333c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8023340:	2913      	cmp	r1, #19
 8023342:	b530      	push	{r4, r5, lr}
 8023344:	4615      	mov	r5, r2
 8023346:	dc33      	bgt.n	80233b0 <floor+0x80>
 8023348:	2900      	cmp	r1, #0
 802334a:	da18      	bge.n	802337e <floor+0x4e>
 802334c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8023410 <floor+0xe0>
 8023350:	ee30 0b07 	vadd.f64	d0, d0, d7
 8023354:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802335c:	dd0a      	ble.n	8023374 <floor+0x44>
 802335e:	2b00      	cmp	r3, #0
 8023360:	da50      	bge.n	8023404 <floor+0xd4>
 8023362:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023366:	4313      	orrs	r3, r2
 8023368:	2200      	movs	r2, #0
 802336a:	4293      	cmp	r3, r2
 802336c:	4b2a      	ldr	r3, [pc, #168]	@ (8023418 <floor+0xe8>)
 802336e:	bf08      	it	eq
 8023370:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8023374:	4619      	mov	r1, r3
 8023376:	4610      	mov	r0, r2
 8023378:	ec41 0b10 	vmov	d0, r0, r1
 802337c:	e01f      	b.n	80233be <floor+0x8e>
 802337e:	4827      	ldr	r0, [pc, #156]	@ (802341c <floor+0xec>)
 8023380:	4108      	asrs	r0, r1
 8023382:	ea03 0400 	and.w	r4, r3, r0
 8023386:	4314      	orrs	r4, r2
 8023388:	d019      	beq.n	80233be <floor+0x8e>
 802338a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8023410 <floor+0xe0>
 802338e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8023392:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802339a:	ddeb      	ble.n	8023374 <floor+0x44>
 802339c:	2b00      	cmp	r3, #0
 802339e:	bfbe      	ittt	lt
 80233a0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80233a4:	410a      	asrlt	r2, r1
 80233a6:	189b      	addlt	r3, r3, r2
 80233a8:	ea23 0300 	bic.w	r3, r3, r0
 80233ac:	2200      	movs	r2, #0
 80233ae:	e7e1      	b.n	8023374 <floor+0x44>
 80233b0:	2933      	cmp	r1, #51	@ 0x33
 80233b2:	dd05      	ble.n	80233c0 <floor+0x90>
 80233b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80233b8:	d101      	bne.n	80233be <floor+0x8e>
 80233ba:	ee30 0b00 	vadd.f64	d0, d0, d0
 80233be:	bd30      	pop	{r4, r5, pc}
 80233c0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80233c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80233c8:	40e0      	lsrs	r0, r4
 80233ca:	4210      	tst	r0, r2
 80233cc:	d0f7      	beq.n	80233be <floor+0x8e>
 80233ce:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8023410 <floor+0xe0>
 80233d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80233d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80233da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80233de:	ddc9      	ble.n	8023374 <floor+0x44>
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	da02      	bge.n	80233ea <floor+0xba>
 80233e4:	2914      	cmp	r1, #20
 80233e6:	d103      	bne.n	80233f0 <floor+0xc0>
 80233e8:	3301      	adds	r3, #1
 80233ea:	ea22 0200 	bic.w	r2, r2, r0
 80233ee:	e7c1      	b.n	8023374 <floor+0x44>
 80233f0:	2401      	movs	r4, #1
 80233f2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80233f6:	fa04 f101 	lsl.w	r1, r4, r1
 80233fa:	440a      	add	r2, r1
 80233fc:	42aa      	cmp	r2, r5
 80233fe:	bf38      	it	cc
 8023400:	191b      	addcc	r3, r3, r4
 8023402:	e7f2      	b.n	80233ea <floor+0xba>
 8023404:	2200      	movs	r2, #0
 8023406:	4613      	mov	r3, r2
 8023408:	e7b4      	b.n	8023374 <floor+0x44>
 802340a:	bf00      	nop
 802340c:	f3af 8000 	nop.w
 8023410:	8800759c 	.word	0x8800759c
 8023414:	7e37e43c 	.word	0x7e37e43c
 8023418:	bff00000 	.word	0xbff00000
 802341c:	000fffff 	.word	0x000fffff

08023420 <__assert_func>:
 8023420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023422:	4614      	mov	r4, r2
 8023424:	461a      	mov	r2, r3
 8023426:	4b09      	ldr	r3, [pc, #36]	@ (802344c <__assert_func+0x2c>)
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	4605      	mov	r5, r0
 802342c:	68d8      	ldr	r0, [r3, #12]
 802342e:	b954      	cbnz	r4, 8023446 <__assert_func+0x26>
 8023430:	4b07      	ldr	r3, [pc, #28]	@ (8023450 <__assert_func+0x30>)
 8023432:	461c      	mov	r4, r3
 8023434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023438:	9100      	str	r1, [sp, #0]
 802343a:	462b      	mov	r3, r5
 802343c:	4905      	ldr	r1, [pc, #20]	@ (8023454 <__assert_func+0x34>)
 802343e:	f000 fce7 	bl	8023e10 <fiprintf>
 8023442:	f000 fde0 	bl	8024006 <abort>
 8023446:	4b04      	ldr	r3, [pc, #16]	@ (8023458 <__assert_func+0x38>)
 8023448:	e7f4      	b.n	8023434 <__assert_func+0x14>
 802344a:	bf00      	nop
 802344c:	2400004c 	.word	0x2400004c
 8023450:	080271c3 	.word	0x080271c3
 8023454:	08027195 	.word	0x08027195
 8023458:	08027188 	.word	0x08027188

0802345c <__cvt>:
 802345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802345e:	ed2d 8b02 	vpush	{d8}
 8023462:	eeb0 8b40 	vmov.f64	d8, d0
 8023466:	b085      	sub	sp, #20
 8023468:	4617      	mov	r7, r2
 802346a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802346c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802346e:	ee18 2a90 	vmov	r2, s17
 8023472:	f025 0520 	bic.w	r5, r5, #32
 8023476:	2a00      	cmp	r2, #0
 8023478:	bfb6      	itet	lt
 802347a:	222d      	movlt	r2, #45	@ 0x2d
 802347c:	2200      	movge	r2, #0
 802347e:	eeb1 8b40 	vneglt.f64	d8, d0
 8023482:	2d46      	cmp	r5, #70	@ 0x46
 8023484:	460c      	mov	r4, r1
 8023486:	701a      	strb	r2, [r3, #0]
 8023488:	d004      	beq.n	8023494 <__cvt+0x38>
 802348a:	2d45      	cmp	r5, #69	@ 0x45
 802348c:	d100      	bne.n	8023490 <__cvt+0x34>
 802348e:	3401      	adds	r4, #1
 8023490:	2102      	movs	r1, #2
 8023492:	e000      	b.n	8023496 <__cvt+0x3a>
 8023494:	2103      	movs	r1, #3
 8023496:	ab03      	add	r3, sp, #12
 8023498:	9301      	str	r3, [sp, #4]
 802349a:	ab02      	add	r3, sp, #8
 802349c:	9300      	str	r3, [sp, #0]
 802349e:	4622      	mov	r2, r4
 80234a0:	4633      	mov	r3, r6
 80234a2:	eeb0 0b48 	vmov.f64	d0, d8
 80234a6:	f000 fe3f 	bl	8024128 <_dtoa_r>
 80234aa:	2d47      	cmp	r5, #71	@ 0x47
 80234ac:	d114      	bne.n	80234d8 <__cvt+0x7c>
 80234ae:	07fb      	lsls	r3, r7, #31
 80234b0:	d50a      	bpl.n	80234c8 <__cvt+0x6c>
 80234b2:	1902      	adds	r2, r0, r4
 80234b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80234b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234bc:	bf08      	it	eq
 80234be:	9203      	streq	r2, [sp, #12]
 80234c0:	2130      	movs	r1, #48	@ 0x30
 80234c2:	9b03      	ldr	r3, [sp, #12]
 80234c4:	4293      	cmp	r3, r2
 80234c6:	d319      	bcc.n	80234fc <__cvt+0xa0>
 80234c8:	9b03      	ldr	r3, [sp, #12]
 80234ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80234cc:	1a1b      	subs	r3, r3, r0
 80234ce:	6013      	str	r3, [r2, #0]
 80234d0:	b005      	add	sp, #20
 80234d2:	ecbd 8b02 	vpop	{d8}
 80234d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234d8:	2d46      	cmp	r5, #70	@ 0x46
 80234da:	eb00 0204 	add.w	r2, r0, r4
 80234de:	d1e9      	bne.n	80234b4 <__cvt+0x58>
 80234e0:	7803      	ldrb	r3, [r0, #0]
 80234e2:	2b30      	cmp	r3, #48	@ 0x30
 80234e4:	d107      	bne.n	80234f6 <__cvt+0x9a>
 80234e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80234ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234ee:	bf1c      	itt	ne
 80234f0:	f1c4 0401 	rsbne	r4, r4, #1
 80234f4:	6034      	strne	r4, [r6, #0]
 80234f6:	6833      	ldr	r3, [r6, #0]
 80234f8:	441a      	add	r2, r3
 80234fa:	e7db      	b.n	80234b4 <__cvt+0x58>
 80234fc:	1c5c      	adds	r4, r3, #1
 80234fe:	9403      	str	r4, [sp, #12]
 8023500:	7019      	strb	r1, [r3, #0]
 8023502:	e7de      	b.n	80234c2 <__cvt+0x66>

08023504 <__exponent>:
 8023504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023506:	2900      	cmp	r1, #0
 8023508:	bfba      	itte	lt
 802350a:	4249      	neglt	r1, r1
 802350c:	232d      	movlt	r3, #45	@ 0x2d
 802350e:	232b      	movge	r3, #43	@ 0x2b
 8023510:	2909      	cmp	r1, #9
 8023512:	7002      	strb	r2, [r0, #0]
 8023514:	7043      	strb	r3, [r0, #1]
 8023516:	dd29      	ble.n	802356c <__exponent+0x68>
 8023518:	f10d 0307 	add.w	r3, sp, #7
 802351c:	461d      	mov	r5, r3
 802351e:	270a      	movs	r7, #10
 8023520:	461a      	mov	r2, r3
 8023522:	fbb1 f6f7 	udiv	r6, r1, r7
 8023526:	fb07 1416 	mls	r4, r7, r6, r1
 802352a:	3430      	adds	r4, #48	@ 0x30
 802352c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8023530:	460c      	mov	r4, r1
 8023532:	2c63      	cmp	r4, #99	@ 0x63
 8023534:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8023538:	4631      	mov	r1, r6
 802353a:	dcf1      	bgt.n	8023520 <__exponent+0x1c>
 802353c:	3130      	adds	r1, #48	@ 0x30
 802353e:	1e94      	subs	r4, r2, #2
 8023540:	f803 1c01 	strb.w	r1, [r3, #-1]
 8023544:	1c41      	adds	r1, r0, #1
 8023546:	4623      	mov	r3, r4
 8023548:	42ab      	cmp	r3, r5
 802354a:	d30a      	bcc.n	8023562 <__exponent+0x5e>
 802354c:	f10d 0309 	add.w	r3, sp, #9
 8023550:	1a9b      	subs	r3, r3, r2
 8023552:	42ac      	cmp	r4, r5
 8023554:	bf88      	it	hi
 8023556:	2300      	movhi	r3, #0
 8023558:	3302      	adds	r3, #2
 802355a:	4403      	add	r3, r0
 802355c:	1a18      	subs	r0, r3, r0
 802355e:	b003      	add	sp, #12
 8023560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023562:	f813 6b01 	ldrb.w	r6, [r3], #1
 8023566:	f801 6f01 	strb.w	r6, [r1, #1]!
 802356a:	e7ed      	b.n	8023548 <__exponent+0x44>
 802356c:	2330      	movs	r3, #48	@ 0x30
 802356e:	3130      	adds	r1, #48	@ 0x30
 8023570:	7083      	strb	r3, [r0, #2]
 8023572:	70c1      	strb	r1, [r0, #3]
 8023574:	1d03      	adds	r3, r0, #4
 8023576:	e7f1      	b.n	802355c <__exponent+0x58>

08023578 <_printf_float>:
 8023578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802357c:	b08d      	sub	sp, #52	@ 0x34
 802357e:	460c      	mov	r4, r1
 8023580:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8023584:	4616      	mov	r6, r2
 8023586:	461f      	mov	r7, r3
 8023588:	4605      	mov	r5, r0
 802358a:	f000 fca7 	bl	8023edc <_localeconv_r>
 802358e:	f8d0 b000 	ldr.w	fp, [r0]
 8023592:	4658      	mov	r0, fp
 8023594:	f7dc fef4 	bl	8000380 <strlen>
 8023598:	2300      	movs	r3, #0
 802359a:	930a      	str	r3, [sp, #40]	@ 0x28
 802359c:	f8d8 3000 	ldr.w	r3, [r8]
 80235a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80235a4:	6822      	ldr	r2, [r4, #0]
 80235a6:	9005      	str	r0, [sp, #20]
 80235a8:	3307      	adds	r3, #7
 80235aa:	f023 0307 	bic.w	r3, r3, #7
 80235ae:	f103 0108 	add.w	r1, r3, #8
 80235b2:	f8c8 1000 	str.w	r1, [r8]
 80235b6:	ed93 0b00 	vldr	d0, [r3]
 80235ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8023818 <_printf_float+0x2a0>
 80235be:	eeb0 7bc0 	vabs.f64	d7, d0
 80235c2:	eeb4 7b46 	vcmp.f64	d7, d6
 80235c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80235ce:	dd24      	ble.n	802361a <_printf_float+0xa2>
 80235d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80235d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235d8:	d502      	bpl.n	80235e0 <_printf_float+0x68>
 80235da:	232d      	movs	r3, #45	@ 0x2d
 80235dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80235e0:	498f      	ldr	r1, [pc, #572]	@ (8023820 <_printf_float+0x2a8>)
 80235e2:	4b90      	ldr	r3, [pc, #576]	@ (8023824 <_printf_float+0x2ac>)
 80235e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80235e8:	bf94      	ite	ls
 80235ea:	4688      	movls	r8, r1
 80235ec:	4698      	movhi	r8, r3
 80235ee:	f022 0204 	bic.w	r2, r2, #4
 80235f2:	2303      	movs	r3, #3
 80235f4:	6123      	str	r3, [r4, #16]
 80235f6:	6022      	str	r2, [r4, #0]
 80235f8:	f04f 0a00 	mov.w	sl, #0
 80235fc:	9700      	str	r7, [sp, #0]
 80235fe:	4633      	mov	r3, r6
 8023600:	aa0b      	add	r2, sp, #44	@ 0x2c
 8023602:	4621      	mov	r1, r4
 8023604:	4628      	mov	r0, r5
 8023606:	f000 f9d1 	bl	80239ac <_printf_common>
 802360a:	3001      	adds	r0, #1
 802360c:	f040 8089 	bne.w	8023722 <_printf_float+0x1aa>
 8023610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023614:	b00d      	add	sp, #52	@ 0x34
 8023616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802361a:	eeb4 0b40 	vcmp.f64	d0, d0
 802361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023622:	d709      	bvc.n	8023638 <_printf_float+0xc0>
 8023624:	ee10 3a90 	vmov	r3, s1
 8023628:	2b00      	cmp	r3, #0
 802362a:	bfbc      	itt	lt
 802362c:	232d      	movlt	r3, #45	@ 0x2d
 802362e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8023632:	497d      	ldr	r1, [pc, #500]	@ (8023828 <_printf_float+0x2b0>)
 8023634:	4b7d      	ldr	r3, [pc, #500]	@ (802382c <_printf_float+0x2b4>)
 8023636:	e7d5      	b.n	80235e4 <_printf_float+0x6c>
 8023638:	6863      	ldr	r3, [r4, #4]
 802363a:	1c59      	adds	r1, r3, #1
 802363c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8023640:	d139      	bne.n	80236b6 <_printf_float+0x13e>
 8023642:	2306      	movs	r3, #6
 8023644:	6063      	str	r3, [r4, #4]
 8023646:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802364a:	2300      	movs	r3, #0
 802364c:	6022      	str	r2, [r4, #0]
 802364e:	9303      	str	r3, [sp, #12]
 8023650:	ab0a      	add	r3, sp, #40	@ 0x28
 8023652:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023656:	ab09      	add	r3, sp, #36	@ 0x24
 8023658:	9300      	str	r3, [sp, #0]
 802365a:	6861      	ldr	r1, [r4, #4]
 802365c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8023660:	4628      	mov	r0, r5
 8023662:	f7ff fefb 	bl	802345c <__cvt>
 8023666:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802366a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802366c:	4680      	mov	r8, r0
 802366e:	d129      	bne.n	80236c4 <_printf_float+0x14c>
 8023670:	1cc8      	adds	r0, r1, #3
 8023672:	db02      	blt.n	802367a <_printf_float+0x102>
 8023674:	6863      	ldr	r3, [r4, #4]
 8023676:	4299      	cmp	r1, r3
 8023678:	dd41      	ble.n	80236fe <_printf_float+0x186>
 802367a:	f1a9 0902 	sub.w	r9, r9, #2
 802367e:	fa5f f989 	uxtb.w	r9, r9
 8023682:	3901      	subs	r1, #1
 8023684:	464a      	mov	r2, r9
 8023686:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802368a:	9109      	str	r1, [sp, #36]	@ 0x24
 802368c:	f7ff ff3a 	bl	8023504 <__exponent>
 8023690:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023692:	1813      	adds	r3, r2, r0
 8023694:	2a01      	cmp	r2, #1
 8023696:	4682      	mov	sl, r0
 8023698:	6123      	str	r3, [r4, #16]
 802369a:	dc02      	bgt.n	80236a2 <_printf_float+0x12a>
 802369c:	6822      	ldr	r2, [r4, #0]
 802369e:	07d2      	lsls	r2, r2, #31
 80236a0:	d501      	bpl.n	80236a6 <_printf_float+0x12e>
 80236a2:	3301      	adds	r3, #1
 80236a4:	6123      	str	r3, [r4, #16]
 80236a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d0a6      	beq.n	80235fc <_printf_float+0x84>
 80236ae:	232d      	movs	r3, #45	@ 0x2d
 80236b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236b4:	e7a2      	b.n	80235fc <_printf_float+0x84>
 80236b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80236ba:	d1c4      	bne.n	8023646 <_printf_float+0xce>
 80236bc:	2b00      	cmp	r3, #0
 80236be:	d1c2      	bne.n	8023646 <_printf_float+0xce>
 80236c0:	2301      	movs	r3, #1
 80236c2:	e7bf      	b.n	8023644 <_printf_float+0xcc>
 80236c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80236c8:	d9db      	bls.n	8023682 <_printf_float+0x10a>
 80236ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80236ce:	d118      	bne.n	8023702 <_printf_float+0x18a>
 80236d0:	2900      	cmp	r1, #0
 80236d2:	6863      	ldr	r3, [r4, #4]
 80236d4:	dd0b      	ble.n	80236ee <_printf_float+0x176>
 80236d6:	6121      	str	r1, [r4, #16]
 80236d8:	b913      	cbnz	r3, 80236e0 <_printf_float+0x168>
 80236da:	6822      	ldr	r2, [r4, #0]
 80236dc:	07d0      	lsls	r0, r2, #31
 80236de:	d502      	bpl.n	80236e6 <_printf_float+0x16e>
 80236e0:	3301      	adds	r3, #1
 80236e2:	440b      	add	r3, r1
 80236e4:	6123      	str	r3, [r4, #16]
 80236e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80236e8:	f04f 0a00 	mov.w	sl, #0
 80236ec:	e7db      	b.n	80236a6 <_printf_float+0x12e>
 80236ee:	b913      	cbnz	r3, 80236f6 <_printf_float+0x17e>
 80236f0:	6822      	ldr	r2, [r4, #0]
 80236f2:	07d2      	lsls	r2, r2, #31
 80236f4:	d501      	bpl.n	80236fa <_printf_float+0x182>
 80236f6:	3302      	adds	r3, #2
 80236f8:	e7f4      	b.n	80236e4 <_printf_float+0x16c>
 80236fa:	2301      	movs	r3, #1
 80236fc:	e7f2      	b.n	80236e4 <_printf_float+0x16c>
 80236fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8023702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023704:	4299      	cmp	r1, r3
 8023706:	db05      	blt.n	8023714 <_printf_float+0x19c>
 8023708:	6823      	ldr	r3, [r4, #0]
 802370a:	6121      	str	r1, [r4, #16]
 802370c:	07d8      	lsls	r0, r3, #31
 802370e:	d5ea      	bpl.n	80236e6 <_printf_float+0x16e>
 8023710:	1c4b      	adds	r3, r1, #1
 8023712:	e7e7      	b.n	80236e4 <_printf_float+0x16c>
 8023714:	2900      	cmp	r1, #0
 8023716:	bfd4      	ite	le
 8023718:	f1c1 0202 	rsble	r2, r1, #2
 802371c:	2201      	movgt	r2, #1
 802371e:	4413      	add	r3, r2
 8023720:	e7e0      	b.n	80236e4 <_printf_float+0x16c>
 8023722:	6823      	ldr	r3, [r4, #0]
 8023724:	055a      	lsls	r2, r3, #21
 8023726:	d407      	bmi.n	8023738 <_printf_float+0x1c0>
 8023728:	6923      	ldr	r3, [r4, #16]
 802372a:	4642      	mov	r2, r8
 802372c:	4631      	mov	r1, r6
 802372e:	4628      	mov	r0, r5
 8023730:	47b8      	blx	r7
 8023732:	3001      	adds	r0, #1
 8023734:	d12a      	bne.n	802378c <_printf_float+0x214>
 8023736:	e76b      	b.n	8023610 <_printf_float+0x98>
 8023738:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802373c:	f240 80e0 	bls.w	8023900 <_printf_float+0x388>
 8023740:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8023744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802374c:	d133      	bne.n	80237b6 <_printf_float+0x23e>
 802374e:	4a38      	ldr	r2, [pc, #224]	@ (8023830 <_printf_float+0x2b8>)
 8023750:	2301      	movs	r3, #1
 8023752:	4631      	mov	r1, r6
 8023754:	4628      	mov	r0, r5
 8023756:	47b8      	blx	r7
 8023758:	3001      	adds	r0, #1
 802375a:	f43f af59 	beq.w	8023610 <_printf_float+0x98>
 802375e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8023762:	4543      	cmp	r3, r8
 8023764:	db02      	blt.n	802376c <_printf_float+0x1f4>
 8023766:	6823      	ldr	r3, [r4, #0]
 8023768:	07d8      	lsls	r0, r3, #31
 802376a:	d50f      	bpl.n	802378c <_printf_float+0x214>
 802376c:	9b05      	ldr	r3, [sp, #20]
 802376e:	465a      	mov	r2, fp
 8023770:	4631      	mov	r1, r6
 8023772:	4628      	mov	r0, r5
 8023774:	47b8      	blx	r7
 8023776:	3001      	adds	r0, #1
 8023778:	f43f af4a 	beq.w	8023610 <_printf_float+0x98>
 802377c:	f04f 0900 	mov.w	r9, #0
 8023780:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8023784:	f104 0a1a 	add.w	sl, r4, #26
 8023788:	45c8      	cmp	r8, r9
 802378a:	dc09      	bgt.n	80237a0 <_printf_float+0x228>
 802378c:	6823      	ldr	r3, [r4, #0]
 802378e:	079b      	lsls	r3, r3, #30
 8023790:	f100 8107 	bmi.w	80239a2 <_printf_float+0x42a>
 8023794:	68e0      	ldr	r0, [r4, #12]
 8023796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023798:	4298      	cmp	r0, r3
 802379a:	bfb8      	it	lt
 802379c:	4618      	movlt	r0, r3
 802379e:	e739      	b.n	8023614 <_printf_float+0x9c>
 80237a0:	2301      	movs	r3, #1
 80237a2:	4652      	mov	r2, sl
 80237a4:	4631      	mov	r1, r6
 80237a6:	4628      	mov	r0, r5
 80237a8:	47b8      	blx	r7
 80237aa:	3001      	adds	r0, #1
 80237ac:	f43f af30 	beq.w	8023610 <_printf_float+0x98>
 80237b0:	f109 0901 	add.w	r9, r9, #1
 80237b4:	e7e8      	b.n	8023788 <_printf_float+0x210>
 80237b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237b8:	2b00      	cmp	r3, #0
 80237ba:	dc3b      	bgt.n	8023834 <_printf_float+0x2bc>
 80237bc:	4a1c      	ldr	r2, [pc, #112]	@ (8023830 <_printf_float+0x2b8>)
 80237be:	2301      	movs	r3, #1
 80237c0:	4631      	mov	r1, r6
 80237c2:	4628      	mov	r0, r5
 80237c4:	47b8      	blx	r7
 80237c6:	3001      	adds	r0, #1
 80237c8:	f43f af22 	beq.w	8023610 <_printf_float+0x98>
 80237cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80237d0:	ea59 0303 	orrs.w	r3, r9, r3
 80237d4:	d102      	bne.n	80237dc <_printf_float+0x264>
 80237d6:	6823      	ldr	r3, [r4, #0]
 80237d8:	07d9      	lsls	r1, r3, #31
 80237da:	d5d7      	bpl.n	802378c <_printf_float+0x214>
 80237dc:	9b05      	ldr	r3, [sp, #20]
 80237de:	465a      	mov	r2, fp
 80237e0:	4631      	mov	r1, r6
 80237e2:	4628      	mov	r0, r5
 80237e4:	47b8      	blx	r7
 80237e6:	3001      	adds	r0, #1
 80237e8:	f43f af12 	beq.w	8023610 <_printf_float+0x98>
 80237ec:	f04f 0a00 	mov.w	sl, #0
 80237f0:	f104 0b1a 	add.w	fp, r4, #26
 80237f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237f6:	425b      	negs	r3, r3
 80237f8:	4553      	cmp	r3, sl
 80237fa:	dc01      	bgt.n	8023800 <_printf_float+0x288>
 80237fc:	464b      	mov	r3, r9
 80237fe:	e794      	b.n	802372a <_printf_float+0x1b2>
 8023800:	2301      	movs	r3, #1
 8023802:	465a      	mov	r2, fp
 8023804:	4631      	mov	r1, r6
 8023806:	4628      	mov	r0, r5
 8023808:	47b8      	blx	r7
 802380a:	3001      	adds	r0, #1
 802380c:	f43f af00 	beq.w	8023610 <_printf_float+0x98>
 8023810:	f10a 0a01 	add.w	sl, sl, #1
 8023814:	e7ee      	b.n	80237f4 <_printf_float+0x27c>
 8023816:	bf00      	nop
 8023818:	ffffffff 	.word	0xffffffff
 802381c:	7fefffff 	.word	0x7fefffff
 8023820:	080271c4 	.word	0x080271c4
 8023824:	080271c8 	.word	0x080271c8
 8023828:	080271cc 	.word	0x080271cc
 802382c:	080271d0 	.word	0x080271d0
 8023830:	080271d4 	.word	0x080271d4
 8023834:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023836:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802383a:	4553      	cmp	r3, sl
 802383c:	bfa8      	it	ge
 802383e:	4653      	movge	r3, sl
 8023840:	2b00      	cmp	r3, #0
 8023842:	4699      	mov	r9, r3
 8023844:	dc37      	bgt.n	80238b6 <_printf_float+0x33e>
 8023846:	2300      	movs	r3, #0
 8023848:	9307      	str	r3, [sp, #28]
 802384a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802384e:	f104 021a 	add.w	r2, r4, #26
 8023852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023854:	9907      	ldr	r1, [sp, #28]
 8023856:	9306      	str	r3, [sp, #24]
 8023858:	eba3 0309 	sub.w	r3, r3, r9
 802385c:	428b      	cmp	r3, r1
 802385e:	dc31      	bgt.n	80238c4 <_printf_float+0x34c>
 8023860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023862:	459a      	cmp	sl, r3
 8023864:	dc3b      	bgt.n	80238de <_printf_float+0x366>
 8023866:	6823      	ldr	r3, [r4, #0]
 8023868:	07da      	lsls	r2, r3, #31
 802386a:	d438      	bmi.n	80238de <_printf_float+0x366>
 802386c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802386e:	ebaa 0903 	sub.w	r9, sl, r3
 8023872:	9b06      	ldr	r3, [sp, #24]
 8023874:	ebaa 0303 	sub.w	r3, sl, r3
 8023878:	4599      	cmp	r9, r3
 802387a:	bfa8      	it	ge
 802387c:	4699      	movge	r9, r3
 802387e:	f1b9 0f00 	cmp.w	r9, #0
 8023882:	dc34      	bgt.n	80238ee <_printf_float+0x376>
 8023884:	f04f 0800 	mov.w	r8, #0
 8023888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802388c:	f104 0b1a 	add.w	fp, r4, #26
 8023890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023892:	ebaa 0303 	sub.w	r3, sl, r3
 8023896:	eba3 0309 	sub.w	r3, r3, r9
 802389a:	4543      	cmp	r3, r8
 802389c:	f77f af76 	ble.w	802378c <_printf_float+0x214>
 80238a0:	2301      	movs	r3, #1
 80238a2:	465a      	mov	r2, fp
 80238a4:	4631      	mov	r1, r6
 80238a6:	4628      	mov	r0, r5
 80238a8:	47b8      	blx	r7
 80238aa:	3001      	adds	r0, #1
 80238ac:	f43f aeb0 	beq.w	8023610 <_printf_float+0x98>
 80238b0:	f108 0801 	add.w	r8, r8, #1
 80238b4:	e7ec      	b.n	8023890 <_printf_float+0x318>
 80238b6:	4642      	mov	r2, r8
 80238b8:	4631      	mov	r1, r6
 80238ba:	4628      	mov	r0, r5
 80238bc:	47b8      	blx	r7
 80238be:	3001      	adds	r0, #1
 80238c0:	d1c1      	bne.n	8023846 <_printf_float+0x2ce>
 80238c2:	e6a5      	b.n	8023610 <_printf_float+0x98>
 80238c4:	2301      	movs	r3, #1
 80238c6:	4631      	mov	r1, r6
 80238c8:	4628      	mov	r0, r5
 80238ca:	9206      	str	r2, [sp, #24]
 80238cc:	47b8      	blx	r7
 80238ce:	3001      	adds	r0, #1
 80238d0:	f43f ae9e 	beq.w	8023610 <_printf_float+0x98>
 80238d4:	9b07      	ldr	r3, [sp, #28]
 80238d6:	9a06      	ldr	r2, [sp, #24]
 80238d8:	3301      	adds	r3, #1
 80238da:	9307      	str	r3, [sp, #28]
 80238dc:	e7b9      	b.n	8023852 <_printf_float+0x2da>
 80238de:	9b05      	ldr	r3, [sp, #20]
 80238e0:	465a      	mov	r2, fp
 80238e2:	4631      	mov	r1, r6
 80238e4:	4628      	mov	r0, r5
 80238e6:	47b8      	blx	r7
 80238e8:	3001      	adds	r0, #1
 80238ea:	d1bf      	bne.n	802386c <_printf_float+0x2f4>
 80238ec:	e690      	b.n	8023610 <_printf_float+0x98>
 80238ee:	9a06      	ldr	r2, [sp, #24]
 80238f0:	464b      	mov	r3, r9
 80238f2:	4442      	add	r2, r8
 80238f4:	4631      	mov	r1, r6
 80238f6:	4628      	mov	r0, r5
 80238f8:	47b8      	blx	r7
 80238fa:	3001      	adds	r0, #1
 80238fc:	d1c2      	bne.n	8023884 <_printf_float+0x30c>
 80238fe:	e687      	b.n	8023610 <_printf_float+0x98>
 8023900:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8023904:	f1b9 0f01 	cmp.w	r9, #1
 8023908:	dc01      	bgt.n	802390e <_printf_float+0x396>
 802390a:	07db      	lsls	r3, r3, #31
 802390c:	d536      	bpl.n	802397c <_printf_float+0x404>
 802390e:	2301      	movs	r3, #1
 8023910:	4642      	mov	r2, r8
 8023912:	4631      	mov	r1, r6
 8023914:	4628      	mov	r0, r5
 8023916:	47b8      	blx	r7
 8023918:	3001      	adds	r0, #1
 802391a:	f43f ae79 	beq.w	8023610 <_printf_float+0x98>
 802391e:	9b05      	ldr	r3, [sp, #20]
 8023920:	465a      	mov	r2, fp
 8023922:	4631      	mov	r1, r6
 8023924:	4628      	mov	r0, r5
 8023926:	47b8      	blx	r7
 8023928:	3001      	adds	r0, #1
 802392a:	f43f ae71 	beq.w	8023610 <_printf_float+0x98>
 802392e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8023932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802393a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802393e:	d018      	beq.n	8023972 <_printf_float+0x3fa>
 8023940:	464b      	mov	r3, r9
 8023942:	f108 0201 	add.w	r2, r8, #1
 8023946:	4631      	mov	r1, r6
 8023948:	4628      	mov	r0, r5
 802394a:	47b8      	blx	r7
 802394c:	3001      	adds	r0, #1
 802394e:	d10c      	bne.n	802396a <_printf_float+0x3f2>
 8023950:	e65e      	b.n	8023610 <_printf_float+0x98>
 8023952:	2301      	movs	r3, #1
 8023954:	465a      	mov	r2, fp
 8023956:	4631      	mov	r1, r6
 8023958:	4628      	mov	r0, r5
 802395a:	47b8      	blx	r7
 802395c:	3001      	adds	r0, #1
 802395e:	f43f ae57 	beq.w	8023610 <_printf_float+0x98>
 8023962:	f108 0801 	add.w	r8, r8, #1
 8023966:	45c8      	cmp	r8, r9
 8023968:	dbf3      	blt.n	8023952 <_printf_float+0x3da>
 802396a:	4653      	mov	r3, sl
 802396c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8023970:	e6dc      	b.n	802372c <_printf_float+0x1b4>
 8023972:	f04f 0800 	mov.w	r8, #0
 8023976:	f104 0b1a 	add.w	fp, r4, #26
 802397a:	e7f4      	b.n	8023966 <_printf_float+0x3ee>
 802397c:	2301      	movs	r3, #1
 802397e:	4642      	mov	r2, r8
 8023980:	e7e1      	b.n	8023946 <_printf_float+0x3ce>
 8023982:	2301      	movs	r3, #1
 8023984:	464a      	mov	r2, r9
 8023986:	4631      	mov	r1, r6
 8023988:	4628      	mov	r0, r5
 802398a:	47b8      	blx	r7
 802398c:	3001      	adds	r0, #1
 802398e:	f43f ae3f 	beq.w	8023610 <_printf_float+0x98>
 8023992:	f108 0801 	add.w	r8, r8, #1
 8023996:	68e3      	ldr	r3, [r4, #12]
 8023998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802399a:	1a5b      	subs	r3, r3, r1
 802399c:	4543      	cmp	r3, r8
 802399e:	dcf0      	bgt.n	8023982 <_printf_float+0x40a>
 80239a0:	e6f8      	b.n	8023794 <_printf_float+0x21c>
 80239a2:	f04f 0800 	mov.w	r8, #0
 80239a6:	f104 0919 	add.w	r9, r4, #25
 80239aa:	e7f4      	b.n	8023996 <_printf_float+0x41e>

080239ac <_printf_common>:
 80239ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239b0:	4616      	mov	r6, r2
 80239b2:	4698      	mov	r8, r3
 80239b4:	688a      	ldr	r2, [r1, #8]
 80239b6:	690b      	ldr	r3, [r1, #16]
 80239b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80239bc:	4293      	cmp	r3, r2
 80239be:	bfb8      	it	lt
 80239c0:	4613      	movlt	r3, r2
 80239c2:	6033      	str	r3, [r6, #0]
 80239c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80239c8:	4607      	mov	r7, r0
 80239ca:	460c      	mov	r4, r1
 80239cc:	b10a      	cbz	r2, 80239d2 <_printf_common+0x26>
 80239ce:	3301      	adds	r3, #1
 80239d0:	6033      	str	r3, [r6, #0]
 80239d2:	6823      	ldr	r3, [r4, #0]
 80239d4:	0699      	lsls	r1, r3, #26
 80239d6:	bf42      	ittt	mi
 80239d8:	6833      	ldrmi	r3, [r6, #0]
 80239da:	3302      	addmi	r3, #2
 80239dc:	6033      	strmi	r3, [r6, #0]
 80239de:	6825      	ldr	r5, [r4, #0]
 80239e0:	f015 0506 	ands.w	r5, r5, #6
 80239e4:	d106      	bne.n	80239f4 <_printf_common+0x48>
 80239e6:	f104 0a19 	add.w	sl, r4, #25
 80239ea:	68e3      	ldr	r3, [r4, #12]
 80239ec:	6832      	ldr	r2, [r6, #0]
 80239ee:	1a9b      	subs	r3, r3, r2
 80239f0:	42ab      	cmp	r3, r5
 80239f2:	dc26      	bgt.n	8023a42 <_printf_common+0x96>
 80239f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80239f8:	6822      	ldr	r2, [r4, #0]
 80239fa:	3b00      	subs	r3, #0
 80239fc:	bf18      	it	ne
 80239fe:	2301      	movne	r3, #1
 8023a00:	0692      	lsls	r2, r2, #26
 8023a02:	d42b      	bmi.n	8023a5c <_printf_common+0xb0>
 8023a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023a08:	4641      	mov	r1, r8
 8023a0a:	4638      	mov	r0, r7
 8023a0c:	47c8      	blx	r9
 8023a0e:	3001      	adds	r0, #1
 8023a10:	d01e      	beq.n	8023a50 <_printf_common+0xa4>
 8023a12:	6823      	ldr	r3, [r4, #0]
 8023a14:	6922      	ldr	r2, [r4, #16]
 8023a16:	f003 0306 	and.w	r3, r3, #6
 8023a1a:	2b04      	cmp	r3, #4
 8023a1c:	bf02      	ittt	eq
 8023a1e:	68e5      	ldreq	r5, [r4, #12]
 8023a20:	6833      	ldreq	r3, [r6, #0]
 8023a22:	1aed      	subeq	r5, r5, r3
 8023a24:	68a3      	ldr	r3, [r4, #8]
 8023a26:	bf0c      	ite	eq
 8023a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023a2c:	2500      	movne	r5, #0
 8023a2e:	4293      	cmp	r3, r2
 8023a30:	bfc4      	itt	gt
 8023a32:	1a9b      	subgt	r3, r3, r2
 8023a34:	18ed      	addgt	r5, r5, r3
 8023a36:	2600      	movs	r6, #0
 8023a38:	341a      	adds	r4, #26
 8023a3a:	42b5      	cmp	r5, r6
 8023a3c:	d11a      	bne.n	8023a74 <_printf_common+0xc8>
 8023a3e:	2000      	movs	r0, #0
 8023a40:	e008      	b.n	8023a54 <_printf_common+0xa8>
 8023a42:	2301      	movs	r3, #1
 8023a44:	4652      	mov	r2, sl
 8023a46:	4641      	mov	r1, r8
 8023a48:	4638      	mov	r0, r7
 8023a4a:	47c8      	blx	r9
 8023a4c:	3001      	adds	r0, #1
 8023a4e:	d103      	bne.n	8023a58 <_printf_common+0xac>
 8023a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023a58:	3501      	adds	r5, #1
 8023a5a:	e7c6      	b.n	80239ea <_printf_common+0x3e>
 8023a5c:	18e1      	adds	r1, r4, r3
 8023a5e:	1c5a      	adds	r2, r3, #1
 8023a60:	2030      	movs	r0, #48	@ 0x30
 8023a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023a66:	4422      	add	r2, r4
 8023a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023a70:	3302      	adds	r3, #2
 8023a72:	e7c7      	b.n	8023a04 <_printf_common+0x58>
 8023a74:	2301      	movs	r3, #1
 8023a76:	4622      	mov	r2, r4
 8023a78:	4641      	mov	r1, r8
 8023a7a:	4638      	mov	r0, r7
 8023a7c:	47c8      	blx	r9
 8023a7e:	3001      	adds	r0, #1
 8023a80:	d0e6      	beq.n	8023a50 <_printf_common+0xa4>
 8023a82:	3601      	adds	r6, #1
 8023a84:	e7d9      	b.n	8023a3a <_printf_common+0x8e>
	...

08023a88 <_printf_i>:
 8023a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023a8c:	7e0f      	ldrb	r7, [r1, #24]
 8023a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023a90:	2f78      	cmp	r7, #120	@ 0x78
 8023a92:	4691      	mov	r9, r2
 8023a94:	4680      	mov	r8, r0
 8023a96:	460c      	mov	r4, r1
 8023a98:	469a      	mov	sl, r3
 8023a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023a9e:	d807      	bhi.n	8023ab0 <_printf_i+0x28>
 8023aa0:	2f62      	cmp	r7, #98	@ 0x62
 8023aa2:	d80a      	bhi.n	8023aba <_printf_i+0x32>
 8023aa4:	2f00      	cmp	r7, #0
 8023aa6:	f000 80d2 	beq.w	8023c4e <_printf_i+0x1c6>
 8023aaa:	2f58      	cmp	r7, #88	@ 0x58
 8023aac:	f000 80b9 	beq.w	8023c22 <_printf_i+0x19a>
 8023ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023ab8:	e03a      	b.n	8023b30 <_printf_i+0xa8>
 8023aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023abe:	2b15      	cmp	r3, #21
 8023ac0:	d8f6      	bhi.n	8023ab0 <_printf_i+0x28>
 8023ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8023ac8 <_printf_i+0x40>)
 8023ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023ac8:	08023b21 	.word	0x08023b21
 8023acc:	08023b35 	.word	0x08023b35
 8023ad0:	08023ab1 	.word	0x08023ab1
 8023ad4:	08023ab1 	.word	0x08023ab1
 8023ad8:	08023ab1 	.word	0x08023ab1
 8023adc:	08023ab1 	.word	0x08023ab1
 8023ae0:	08023b35 	.word	0x08023b35
 8023ae4:	08023ab1 	.word	0x08023ab1
 8023ae8:	08023ab1 	.word	0x08023ab1
 8023aec:	08023ab1 	.word	0x08023ab1
 8023af0:	08023ab1 	.word	0x08023ab1
 8023af4:	08023c35 	.word	0x08023c35
 8023af8:	08023b5f 	.word	0x08023b5f
 8023afc:	08023bef 	.word	0x08023bef
 8023b00:	08023ab1 	.word	0x08023ab1
 8023b04:	08023ab1 	.word	0x08023ab1
 8023b08:	08023c57 	.word	0x08023c57
 8023b0c:	08023ab1 	.word	0x08023ab1
 8023b10:	08023b5f 	.word	0x08023b5f
 8023b14:	08023ab1 	.word	0x08023ab1
 8023b18:	08023ab1 	.word	0x08023ab1
 8023b1c:	08023bf7 	.word	0x08023bf7
 8023b20:	6833      	ldr	r3, [r6, #0]
 8023b22:	1d1a      	adds	r2, r3, #4
 8023b24:	681b      	ldr	r3, [r3, #0]
 8023b26:	6032      	str	r2, [r6, #0]
 8023b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023b30:	2301      	movs	r3, #1
 8023b32:	e09d      	b.n	8023c70 <_printf_i+0x1e8>
 8023b34:	6833      	ldr	r3, [r6, #0]
 8023b36:	6820      	ldr	r0, [r4, #0]
 8023b38:	1d19      	adds	r1, r3, #4
 8023b3a:	6031      	str	r1, [r6, #0]
 8023b3c:	0606      	lsls	r6, r0, #24
 8023b3e:	d501      	bpl.n	8023b44 <_printf_i+0xbc>
 8023b40:	681d      	ldr	r5, [r3, #0]
 8023b42:	e003      	b.n	8023b4c <_printf_i+0xc4>
 8023b44:	0645      	lsls	r5, r0, #25
 8023b46:	d5fb      	bpl.n	8023b40 <_printf_i+0xb8>
 8023b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023b4c:	2d00      	cmp	r5, #0
 8023b4e:	da03      	bge.n	8023b58 <_printf_i+0xd0>
 8023b50:	232d      	movs	r3, #45	@ 0x2d
 8023b52:	426d      	negs	r5, r5
 8023b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023b58:	4859      	ldr	r0, [pc, #356]	@ (8023cc0 <_printf_i+0x238>)
 8023b5a:	230a      	movs	r3, #10
 8023b5c:	e011      	b.n	8023b82 <_printf_i+0xfa>
 8023b5e:	6821      	ldr	r1, [r4, #0]
 8023b60:	6833      	ldr	r3, [r6, #0]
 8023b62:	0608      	lsls	r0, r1, #24
 8023b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8023b68:	d402      	bmi.n	8023b70 <_printf_i+0xe8>
 8023b6a:	0649      	lsls	r1, r1, #25
 8023b6c:	bf48      	it	mi
 8023b6e:	b2ad      	uxthmi	r5, r5
 8023b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8023b72:	4853      	ldr	r0, [pc, #332]	@ (8023cc0 <_printf_i+0x238>)
 8023b74:	6033      	str	r3, [r6, #0]
 8023b76:	bf14      	ite	ne
 8023b78:	230a      	movne	r3, #10
 8023b7a:	2308      	moveq	r3, #8
 8023b7c:	2100      	movs	r1, #0
 8023b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023b82:	6866      	ldr	r6, [r4, #4]
 8023b84:	60a6      	str	r6, [r4, #8]
 8023b86:	2e00      	cmp	r6, #0
 8023b88:	bfa2      	ittt	ge
 8023b8a:	6821      	ldrge	r1, [r4, #0]
 8023b8c:	f021 0104 	bicge.w	r1, r1, #4
 8023b90:	6021      	strge	r1, [r4, #0]
 8023b92:	b90d      	cbnz	r5, 8023b98 <_printf_i+0x110>
 8023b94:	2e00      	cmp	r6, #0
 8023b96:	d04b      	beq.n	8023c30 <_printf_i+0x1a8>
 8023b98:	4616      	mov	r6, r2
 8023b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8023b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8023ba2:	5dc7      	ldrb	r7, [r0, r7]
 8023ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023ba8:	462f      	mov	r7, r5
 8023baa:	42bb      	cmp	r3, r7
 8023bac:	460d      	mov	r5, r1
 8023bae:	d9f4      	bls.n	8023b9a <_printf_i+0x112>
 8023bb0:	2b08      	cmp	r3, #8
 8023bb2:	d10b      	bne.n	8023bcc <_printf_i+0x144>
 8023bb4:	6823      	ldr	r3, [r4, #0]
 8023bb6:	07df      	lsls	r7, r3, #31
 8023bb8:	d508      	bpl.n	8023bcc <_printf_i+0x144>
 8023bba:	6923      	ldr	r3, [r4, #16]
 8023bbc:	6861      	ldr	r1, [r4, #4]
 8023bbe:	4299      	cmp	r1, r3
 8023bc0:	bfde      	ittt	le
 8023bc2:	2330      	movle	r3, #48	@ 0x30
 8023bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023bc8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8023bcc:	1b92      	subs	r2, r2, r6
 8023bce:	6122      	str	r2, [r4, #16]
 8023bd0:	f8cd a000 	str.w	sl, [sp]
 8023bd4:	464b      	mov	r3, r9
 8023bd6:	aa03      	add	r2, sp, #12
 8023bd8:	4621      	mov	r1, r4
 8023bda:	4640      	mov	r0, r8
 8023bdc:	f7ff fee6 	bl	80239ac <_printf_common>
 8023be0:	3001      	adds	r0, #1
 8023be2:	d14a      	bne.n	8023c7a <_printf_i+0x1f2>
 8023be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023be8:	b004      	add	sp, #16
 8023bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bee:	6823      	ldr	r3, [r4, #0]
 8023bf0:	f043 0320 	orr.w	r3, r3, #32
 8023bf4:	6023      	str	r3, [r4, #0]
 8023bf6:	4833      	ldr	r0, [pc, #204]	@ (8023cc4 <_printf_i+0x23c>)
 8023bf8:	2778      	movs	r7, #120	@ 0x78
 8023bfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023bfe:	6823      	ldr	r3, [r4, #0]
 8023c00:	6831      	ldr	r1, [r6, #0]
 8023c02:	061f      	lsls	r7, r3, #24
 8023c04:	f851 5b04 	ldr.w	r5, [r1], #4
 8023c08:	d402      	bmi.n	8023c10 <_printf_i+0x188>
 8023c0a:	065f      	lsls	r7, r3, #25
 8023c0c:	bf48      	it	mi
 8023c0e:	b2ad      	uxthmi	r5, r5
 8023c10:	6031      	str	r1, [r6, #0]
 8023c12:	07d9      	lsls	r1, r3, #31
 8023c14:	bf44      	itt	mi
 8023c16:	f043 0320 	orrmi.w	r3, r3, #32
 8023c1a:	6023      	strmi	r3, [r4, #0]
 8023c1c:	b11d      	cbz	r5, 8023c26 <_printf_i+0x19e>
 8023c1e:	2310      	movs	r3, #16
 8023c20:	e7ac      	b.n	8023b7c <_printf_i+0xf4>
 8023c22:	4827      	ldr	r0, [pc, #156]	@ (8023cc0 <_printf_i+0x238>)
 8023c24:	e7e9      	b.n	8023bfa <_printf_i+0x172>
 8023c26:	6823      	ldr	r3, [r4, #0]
 8023c28:	f023 0320 	bic.w	r3, r3, #32
 8023c2c:	6023      	str	r3, [r4, #0]
 8023c2e:	e7f6      	b.n	8023c1e <_printf_i+0x196>
 8023c30:	4616      	mov	r6, r2
 8023c32:	e7bd      	b.n	8023bb0 <_printf_i+0x128>
 8023c34:	6833      	ldr	r3, [r6, #0]
 8023c36:	6825      	ldr	r5, [r4, #0]
 8023c38:	6961      	ldr	r1, [r4, #20]
 8023c3a:	1d18      	adds	r0, r3, #4
 8023c3c:	6030      	str	r0, [r6, #0]
 8023c3e:	062e      	lsls	r6, r5, #24
 8023c40:	681b      	ldr	r3, [r3, #0]
 8023c42:	d501      	bpl.n	8023c48 <_printf_i+0x1c0>
 8023c44:	6019      	str	r1, [r3, #0]
 8023c46:	e002      	b.n	8023c4e <_printf_i+0x1c6>
 8023c48:	0668      	lsls	r0, r5, #25
 8023c4a:	d5fb      	bpl.n	8023c44 <_printf_i+0x1bc>
 8023c4c:	8019      	strh	r1, [r3, #0]
 8023c4e:	2300      	movs	r3, #0
 8023c50:	6123      	str	r3, [r4, #16]
 8023c52:	4616      	mov	r6, r2
 8023c54:	e7bc      	b.n	8023bd0 <_printf_i+0x148>
 8023c56:	6833      	ldr	r3, [r6, #0]
 8023c58:	1d1a      	adds	r2, r3, #4
 8023c5a:	6032      	str	r2, [r6, #0]
 8023c5c:	681e      	ldr	r6, [r3, #0]
 8023c5e:	6862      	ldr	r2, [r4, #4]
 8023c60:	2100      	movs	r1, #0
 8023c62:	4630      	mov	r0, r6
 8023c64:	f7dc fb3c 	bl	80002e0 <memchr>
 8023c68:	b108      	cbz	r0, 8023c6e <_printf_i+0x1e6>
 8023c6a:	1b80      	subs	r0, r0, r6
 8023c6c:	6060      	str	r0, [r4, #4]
 8023c6e:	6863      	ldr	r3, [r4, #4]
 8023c70:	6123      	str	r3, [r4, #16]
 8023c72:	2300      	movs	r3, #0
 8023c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023c78:	e7aa      	b.n	8023bd0 <_printf_i+0x148>
 8023c7a:	6923      	ldr	r3, [r4, #16]
 8023c7c:	4632      	mov	r2, r6
 8023c7e:	4649      	mov	r1, r9
 8023c80:	4640      	mov	r0, r8
 8023c82:	47d0      	blx	sl
 8023c84:	3001      	adds	r0, #1
 8023c86:	d0ad      	beq.n	8023be4 <_printf_i+0x15c>
 8023c88:	6823      	ldr	r3, [r4, #0]
 8023c8a:	079b      	lsls	r3, r3, #30
 8023c8c:	d413      	bmi.n	8023cb6 <_printf_i+0x22e>
 8023c8e:	68e0      	ldr	r0, [r4, #12]
 8023c90:	9b03      	ldr	r3, [sp, #12]
 8023c92:	4298      	cmp	r0, r3
 8023c94:	bfb8      	it	lt
 8023c96:	4618      	movlt	r0, r3
 8023c98:	e7a6      	b.n	8023be8 <_printf_i+0x160>
 8023c9a:	2301      	movs	r3, #1
 8023c9c:	4632      	mov	r2, r6
 8023c9e:	4649      	mov	r1, r9
 8023ca0:	4640      	mov	r0, r8
 8023ca2:	47d0      	blx	sl
 8023ca4:	3001      	adds	r0, #1
 8023ca6:	d09d      	beq.n	8023be4 <_printf_i+0x15c>
 8023ca8:	3501      	adds	r5, #1
 8023caa:	68e3      	ldr	r3, [r4, #12]
 8023cac:	9903      	ldr	r1, [sp, #12]
 8023cae:	1a5b      	subs	r3, r3, r1
 8023cb0:	42ab      	cmp	r3, r5
 8023cb2:	dcf2      	bgt.n	8023c9a <_printf_i+0x212>
 8023cb4:	e7eb      	b.n	8023c8e <_printf_i+0x206>
 8023cb6:	2500      	movs	r5, #0
 8023cb8:	f104 0619 	add.w	r6, r4, #25
 8023cbc:	e7f5      	b.n	8023caa <_printf_i+0x222>
 8023cbe:	bf00      	nop
 8023cc0:	080271d6 	.word	0x080271d6
 8023cc4:	080271e7 	.word	0x080271e7

08023cc8 <std>:
 8023cc8:	2300      	movs	r3, #0
 8023cca:	b510      	push	{r4, lr}
 8023ccc:	4604      	mov	r4, r0
 8023cce:	e9c0 3300 	strd	r3, r3, [r0]
 8023cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023cd6:	6083      	str	r3, [r0, #8]
 8023cd8:	8181      	strh	r1, [r0, #12]
 8023cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8023cdc:	81c2      	strh	r2, [r0, #14]
 8023cde:	6183      	str	r3, [r0, #24]
 8023ce0:	4619      	mov	r1, r3
 8023ce2:	2208      	movs	r2, #8
 8023ce4:	305c      	adds	r0, #92	@ 0x5c
 8023ce6:	f000 f8f0 	bl	8023eca <memset>
 8023cea:	4b0d      	ldr	r3, [pc, #52]	@ (8023d20 <std+0x58>)
 8023cec:	6263      	str	r3, [r4, #36]	@ 0x24
 8023cee:	4b0d      	ldr	r3, [pc, #52]	@ (8023d24 <std+0x5c>)
 8023cf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8023d28 <std+0x60>)
 8023cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8023d2c <std+0x64>)
 8023cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8023cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8023d30 <std+0x68>)
 8023cfc:	6224      	str	r4, [r4, #32]
 8023cfe:	429c      	cmp	r4, r3
 8023d00:	d006      	beq.n	8023d10 <std+0x48>
 8023d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023d06:	4294      	cmp	r4, r2
 8023d08:	d002      	beq.n	8023d10 <std+0x48>
 8023d0a:	33d0      	adds	r3, #208	@ 0xd0
 8023d0c:	429c      	cmp	r4, r3
 8023d0e:	d105      	bne.n	8023d1c <std+0x54>
 8023d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d18:	f000 b964 	b.w	8023fe4 <__retarget_lock_init_recursive>
 8023d1c:	bd10      	pop	{r4, pc}
 8023d1e:	bf00      	nop
 8023d20:	080258b5 	.word	0x080258b5
 8023d24:	080258d7 	.word	0x080258d7
 8023d28:	0802590f 	.word	0x0802590f
 8023d2c:	08025933 	.word	0x08025933
 8023d30:	24023008 	.word	0x24023008

08023d34 <stdio_exit_handler>:
 8023d34:	4a02      	ldr	r2, [pc, #8]	@ (8023d40 <stdio_exit_handler+0xc>)
 8023d36:	4903      	ldr	r1, [pc, #12]	@ (8023d44 <stdio_exit_handler+0x10>)
 8023d38:	4803      	ldr	r0, [pc, #12]	@ (8023d48 <stdio_exit_handler+0x14>)
 8023d3a:	f000 b87b 	b.w	8023e34 <_fwalk_sglue>
 8023d3e:	bf00      	nop
 8023d40:	24000040 	.word	0x24000040
 8023d44:	08025149 	.word	0x08025149
 8023d48:	24000050 	.word	0x24000050

08023d4c <cleanup_stdio>:
 8023d4c:	6841      	ldr	r1, [r0, #4]
 8023d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8023d80 <cleanup_stdio+0x34>)
 8023d50:	4299      	cmp	r1, r3
 8023d52:	b510      	push	{r4, lr}
 8023d54:	4604      	mov	r4, r0
 8023d56:	d001      	beq.n	8023d5c <cleanup_stdio+0x10>
 8023d58:	f001 f9f6 	bl	8025148 <_fflush_r>
 8023d5c:	68a1      	ldr	r1, [r4, #8]
 8023d5e:	4b09      	ldr	r3, [pc, #36]	@ (8023d84 <cleanup_stdio+0x38>)
 8023d60:	4299      	cmp	r1, r3
 8023d62:	d002      	beq.n	8023d6a <cleanup_stdio+0x1e>
 8023d64:	4620      	mov	r0, r4
 8023d66:	f001 f9ef 	bl	8025148 <_fflush_r>
 8023d6a:	68e1      	ldr	r1, [r4, #12]
 8023d6c:	4b06      	ldr	r3, [pc, #24]	@ (8023d88 <cleanup_stdio+0x3c>)
 8023d6e:	4299      	cmp	r1, r3
 8023d70:	d004      	beq.n	8023d7c <cleanup_stdio+0x30>
 8023d72:	4620      	mov	r0, r4
 8023d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d78:	f001 b9e6 	b.w	8025148 <_fflush_r>
 8023d7c:	bd10      	pop	{r4, pc}
 8023d7e:	bf00      	nop
 8023d80:	24023008 	.word	0x24023008
 8023d84:	24023070 	.word	0x24023070
 8023d88:	240230d8 	.word	0x240230d8

08023d8c <global_stdio_init.part.0>:
 8023d8c:	b510      	push	{r4, lr}
 8023d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8023dbc <global_stdio_init.part.0+0x30>)
 8023d90:	4c0b      	ldr	r4, [pc, #44]	@ (8023dc0 <global_stdio_init.part.0+0x34>)
 8023d92:	4a0c      	ldr	r2, [pc, #48]	@ (8023dc4 <global_stdio_init.part.0+0x38>)
 8023d94:	601a      	str	r2, [r3, #0]
 8023d96:	4620      	mov	r0, r4
 8023d98:	2200      	movs	r2, #0
 8023d9a:	2104      	movs	r1, #4
 8023d9c:	f7ff ff94 	bl	8023cc8 <std>
 8023da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023da4:	2201      	movs	r2, #1
 8023da6:	2109      	movs	r1, #9
 8023da8:	f7ff ff8e 	bl	8023cc8 <std>
 8023dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023db0:	2202      	movs	r2, #2
 8023db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023db6:	2112      	movs	r1, #18
 8023db8:	f7ff bf86 	b.w	8023cc8 <std>
 8023dbc:	24023140 	.word	0x24023140
 8023dc0:	24023008 	.word	0x24023008
 8023dc4:	08023d35 	.word	0x08023d35

08023dc8 <__sfp_lock_acquire>:
 8023dc8:	4801      	ldr	r0, [pc, #4]	@ (8023dd0 <__sfp_lock_acquire+0x8>)
 8023dca:	f000 b90c 	b.w	8023fe6 <__retarget_lock_acquire_recursive>
 8023dce:	bf00      	nop
 8023dd0:	24023149 	.word	0x24023149

08023dd4 <__sfp_lock_release>:
 8023dd4:	4801      	ldr	r0, [pc, #4]	@ (8023ddc <__sfp_lock_release+0x8>)
 8023dd6:	f000 b907 	b.w	8023fe8 <__retarget_lock_release_recursive>
 8023dda:	bf00      	nop
 8023ddc:	24023149 	.word	0x24023149

08023de0 <__sinit>:
 8023de0:	b510      	push	{r4, lr}
 8023de2:	4604      	mov	r4, r0
 8023de4:	f7ff fff0 	bl	8023dc8 <__sfp_lock_acquire>
 8023de8:	6a23      	ldr	r3, [r4, #32]
 8023dea:	b11b      	cbz	r3, 8023df4 <__sinit+0x14>
 8023dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023df0:	f7ff bff0 	b.w	8023dd4 <__sfp_lock_release>
 8023df4:	4b04      	ldr	r3, [pc, #16]	@ (8023e08 <__sinit+0x28>)
 8023df6:	6223      	str	r3, [r4, #32]
 8023df8:	4b04      	ldr	r3, [pc, #16]	@ (8023e0c <__sinit+0x2c>)
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	d1f5      	bne.n	8023dec <__sinit+0xc>
 8023e00:	f7ff ffc4 	bl	8023d8c <global_stdio_init.part.0>
 8023e04:	e7f2      	b.n	8023dec <__sinit+0xc>
 8023e06:	bf00      	nop
 8023e08:	08023d4d 	.word	0x08023d4d
 8023e0c:	24023140 	.word	0x24023140

08023e10 <fiprintf>:
 8023e10:	b40e      	push	{r1, r2, r3}
 8023e12:	b503      	push	{r0, r1, lr}
 8023e14:	4601      	mov	r1, r0
 8023e16:	ab03      	add	r3, sp, #12
 8023e18:	4805      	ldr	r0, [pc, #20]	@ (8023e30 <fiprintf+0x20>)
 8023e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8023e1e:	6800      	ldr	r0, [r0, #0]
 8023e20:	9301      	str	r3, [sp, #4]
 8023e22:	f000 ff4b 	bl	8024cbc <_vfiprintf_r>
 8023e26:	b002      	add	sp, #8
 8023e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8023e2c:	b003      	add	sp, #12
 8023e2e:	4770      	bx	lr
 8023e30:	2400004c 	.word	0x2400004c

08023e34 <_fwalk_sglue>:
 8023e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e38:	4607      	mov	r7, r0
 8023e3a:	4688      	mov	r8, r1
 8023e3c:	4614      	mov	r4, r2
 8023e3e:	2600      	movs	r6, #0
 8023e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023e44:	f1b9 0901 	subs.w	r9, r9, #1
 8023e48:	d505      	bpl.n	8023e56 <_fwalk_sglue+0x22>
 8023e4a:	6824      	ldr	r4, [r4, #0]
 8023e4c:	2c00      	cmp	r4, #0
 8023e4e:	d1f7      	bne.n	8023e40 <_fwalk_sglue+0xc>
 8023e50:	4630      	mov	r0, r6
 8023e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e56:	89ab      	ldrh	r3, [r5, #12]
 8023e58:	2b01      	cmp	r3, #1
 8023e5a:	d907      	bls.n	8023e6c <_fwalk_sglue+0x38>
 8023e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023e60:	3301      	adds	r3, #1
 8023e62:	d003      	beq.n	8023e6c <_fwalk_sglue+0x38>
 8023e64:	4629      	mov	r1, r5
 8023e66:	4638      	mov	r0, r7
 8023e68:	47c0      	blx	r8
 8023e6a:	4306      	orrs	r6, r0
 8023e6c:	3568      	adds	r5, #104	@ 0x68
 8023e6e:	e7e9      	b.n	8023e44 <_fwalk_sglue+0x10>

08023e70 <strncpy>:
 8023e70:	b510      	push	{r4, lr}
 8023e72:	3901      	subs	r1, #1
 8023e74:	4603      	mov	r3, r0
 8023e76:	b132      	cbz	r2, 8023e86 <strncpy+0x16>
 8023e78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023e7c:	f803 4b01 	strb.w	r4, [r3], #1
 8023e80:	3a01      	subs	r2, #1
 8023e82:	2c00      	cmp	r4, #0
 8023e84:	d1f7      	bne.n	8023e76 <strncpy+0x6>
 8023e86:	441a      	add	r2, r3
 8023e88:	2100      	movs	r1, #0
 8023e8a:	4293      	cmp	r3, r2
 8023e8c:	d100      	bne.n	8023e90 <strncpy+0x20>
 8023e8e:	bd10      	pop	{r4, pc}
 8023e90:	f803 1b01 	strb.w	r1, [r3], #1
 8023e94:	e7f9      	b.n	8023e8a <strncpy+0x1a>

08023e96 <memmove>:
 8023e96:	4288      	cmp	r0, r1
 8023e98:	b510      	push	{r4, lr}
 8023e9a:	eb01 0402 	add.w	r4, r1, r2
 8023e9e:	d902      	bls.n	8023ea6 <memmove+0x10>
 8023ea0:	4284      	cmp	r4, r0
 8023ea2:	4623      	mov	r3, r4
 8023ea4:	d807      	bhi.n	8023eb6 <memmove+0x20>
 8023ea6:	1e43      	subs	r3, r0, #1
 8023ea8:	42a1      	cmp	r1, r4
 8023eaa:	d008      	beq.n	8023ebe <memmove+0x28>
 8023eac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023eb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023eb4:	e7f8      	b.n	8023ea8 <memmove+0x12>
 8023eb6:	4402      	add	r2, r0
 8023eb8:	4601      	mov	r1, r0
 8023eba:	428a      	cmp	r2, r1
 8023ebc:	d100      	bne.n	8023ec0 <memmove+0x2a>
 8023ebe:	bd10      	pop	{r4, pc}
 8023ec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023ec4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023ec8:	e7f7      	b.n	8023eba <memmove+0x24>

08023eca <memset>:
 8023eca:	4402      	add	r2, r0
 8023ecc:	4603      	mov	r3, r0
 8023ece:	4293      	cmp	r3, r2
 8023ed0:	d100      	bne.n	8023ed4 <memset+0xa>
 8023ed2:	4770      	bx	lr
 8023ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8023ed8:	e7f9      	b.n	8023ece <memset+0x4>
	...

08023edc <_localeconv_r>:
 8023edc:	4800      	ldr	r0, [pc, #0]	@ (8023ee0 <_localeconv_r+0x4>)
 8023ede:	4770      	bx	lr
 8023ee0:	2400018c 	.word	0x2400018c

08023ee4 <_reclaim_reent>:
 8023ee4:	4b29      	ldr	r3, [pc, #164]	@ (8023f8c <_reclaim_reent+0xa8>)
 8023ee6:	681b      	ldr	r3, [r3, #0]
 8023ee8:	4283      	cmp	r3, r0
 8023eea:	b570      	push	{r4, r5, r6, lr}
 8023eec:	4604      	mov	r4, r0
 8023eee:	d04b      	beq.n	8023f88 <_reclaim_reent+0xa4>
 8023ef0:	69c3      	ldr	r3, [r0, #28]
 8023ef2:	b1ab      	cbz	r3, 8023f20 <_reclaim_reent+0x3c>
 8023ef4:	68db      	ldr	r3, [r3, #12]
 8023ef6:	b16b      	cbz	r3, 8023f14 <_reclaim_reent+0x30>
 8023ef8:	2500      	movs	r5, #0
 8023efa:	69e3      	ldr	r3, [r4, #28]
 8023efc:	68db      	ldr	r3, [r3, #12]
 8023efe:	5959      	ldr	r1, [r3, r5]
 8023f00:	2900      	cmp	r1, #0
 8023f02:	d13b      	bne.n	8023f7c <_reclaim_reent+0x98>
 8023f04:	3504      	adds	r5, #4
 8023f06:	2d80      	cmp	r5, #128	@ 0x80
 8023f08:	d1f7      	bne.n	8023efa <_reclaim_reent+0x16>
 8023f0a:	69e3      	ldr	r3, [r4, #28]
 8023f0c:	4620      	mov	r0, r4
 8023f0e:	68d9      	ldr	r1, [r3, #12]
 8023f10:	f000 fe60 	bl	8024bd4 <_free_r>
 8023f14:	69e3      	ldr	r3, [r4, #28]
 8023f16:	6819      	ldr	r1, [r3, #0]
 8023f18:	b111      	cbz	r1, 8023f20 <_reclaim_reent+0x3c>
 8023f1a:	4620      	mov	r0, r4
 8023f1c:	f000 fe5a 	bl	8024bd4 <_free_r>
 8023f20:	6961      	ldr	r1, [r4, #20]
 8023f22:	b111      	cbz	r1, 8023f2a <_reclaim_reent+0x46>
 8023f24:	4620      	mov	r0, r4
 8023f26:	f000 fe55 	bl	8024bd4 <_free_r>
 8023f2a:	69e1      	ldr	r1, [r4, #28]
 8023f2c:	b111      	cbz	r1, 8023f34 <_reclaim_reent+0x50>
 8023f2e:	4620      	mov	r0, r4
 8023f30:	f000 fe50 	bl	8024bd4 <_free_r>
 8023f34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8023f36:	b111      	cbz	r1, 8023f3e <_reclaim_reent+0x5a>
 8023f38:	4620      	mov	r0, r4
 8023f3a:	f000 fe4b 	bl	8024bd4 <_free_r>
 8023f3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023f40:	b111      	cbz	r1, 8023f48 <_reclaim_reent+0x64>
 8023f42:	4620      	mov	r0, r4
 8023f44:	f000 fe46 	bl	8024bd4 <_free_r>
 8023f48:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8023f4a:	b111      	cbz	r1, 8023f52 <_reclaim_reent+0x6e>
 8023f4c:	4620      	mov	r0, r4
 8023f4e:	f000 fe41 	bl	8024bd4 <_free_r>
 8023f52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8023f54:	b111      	cbz	r1, 8023f5c <_reclaim_reent+0x78>
 8023f56:	4620      	mov	r0, r4
 8023f58:	f000 fe3c 	bl	8024bd4 <_free_r>
 8023f5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8023f5e:	b111      	cbz	r1, 8023f66 <_reclaim_reent+0x82>
 8023f60:	4620      	mov	r0, r4
 8023f62:	f000 fe37 	bl	8024bd4 <_free_r>
 8023f66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8023f68:	b111      	cbz	r1, 8023f70 <_reclaim_reent+0x8c>
 8023f6a:	4620      	mov	r0, r4
 8023f6c:	f000 fe32 	bl	8024bd4 <_free_r>
 8023f70:	6a23      	ldr	r3, [r4, #32]
 8023f72:	b14b      	cbz	r3, 8023f88 <_reclaim_reent+0xa4>
 8023f74:	4620      	mov	r0, r4
 8023f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023f7a:	4718      	bx	r3
 8023f7c:	680e      	ldr	r6, [r1, #0]
 8023f7e:	4620      	mov	r0, r4
 8023f80:	f000 fe28 	bl	8024bd4 <_free_r>
 8023f84:	4631      	mov	r1, r6
 8023f86:	e7bb      	b.n	8023f00 <_reclaim_reent+0x1c>
 8023f88:	bd70      	pop	{r4, r5, r6, pc}
 8023f8a:	bf00      	nop
 8023f8c:	2400004c 	.word	0x2400004c

08023f90 <__errno>:
 8023f90:	4b01      	ldr	r3, [pc, #4]	@ (8023f98 <__errno+0x8>)
 8023f92:	6818      	ldr	r0, [r3, #0]
 8023f94:	4770      	bx	lr
 8023f96:	bf00      	nop
 8023f98:	2400004c 	.word	0x2400004c

08023f9c <__libc_init_array>:
 8023f9c:	b570      	push	{r4, r5, r6, lr}
 8023f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8023fd4 <__libc_init_array+0x38>)
 8023fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8023fd8 <__libc_init_array+0x3c>)
 8023fa2:	1b64      	subs	r4, r4, r5
 8023fa4:	10a4      	asrs	r4, r4, #2
 8023fa6:	2600      	movs	r6, #0
 8023fa8:	42a6      	cmp	r6, r4
 8023faa:	d109      	bne.n	8023fc0 <__libc_init_array+0x24>
 8023fac:	4d0b      	ldr	r5, [pc, #44]	@ (8023fdc <__libc_init_array+0x40>)
 8023fae:	4c0c      	ldr	r4, [pc, #48]	@ (8023fe0 <__libc_init_array+0x44>)
 8023fb0:	f001 feaa 	bl	8025d08 <_init>
 8023fb4:	1b64      	subs	r4, r4, r5
 8023fb6:	10a4      	asrs	r4, r4, #2
 8023fb8:	2600      	movs	r6, #0
 8023fba:	42a6      	cmp	r6, r4
 8023fbc:	d105      	bne.n	8023fca <__libc_init_array+0x2e>
 8023fbe:	bd70      	pop	{r4, r5, r6, pc}
 8023fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8023fc4:	4798      	blx	r3
 8023fc6:	3601      	adds	r6, #1
 8023fc8:	e7ee      	b.n	8023fa8 <__libc_init_array+0xc>
 8023fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8023fce:	4798      	blx	r3
 8023fd0:	3601      	adds	r6, #1
 8023fd2:	e7f2      	b.n	8023fba <__libc_init_array+0x1e>
 8023fd4:	08027504 	.word	0x08027504
 8023fd8:	08027504 	.word	0x08027504
 8023fdc:	08027504 	.word	0x08027504
 8023fe0:	0802752c 	.word	0x0802752c

08023fe4 <__retarget_lock_init_recursive>:
 8023fe4:	4770      	bx	lr

08023fe6 <__retarget_lock_acquire_recursive>:
 8023fe6:	4770      	bx	lr

08023fe8 <__retarget_lock_release_recursive>:
 8023fe8:	4770      	bx	lr

08023fea <memcpy>:
 8023fea:	440a      	add	r2, r1
 8023fec:	4291      	cmp	r1, r2
 8023fee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8023ff2:	d100      	bne.n	8023ff6 <memcpy+0xc>
 8023ff4:	4770      	bx	lr
 8023ff6:	b510      	push	{r4, lr}
 8023ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024000:	4291      	cmp	r1, r2
 8024002:	d1f9      	bne.n	8023ff8 <memcpy+0xe>
 8024004:	bd10      	pop	{r4, pc}

08024006 <abort>:
 8024006:	b508      	push	{r3, lr}
 8024008:	2006      	movs	r0, #6
 802400a:	f001 fdf9 	bl	8025c00 <raise>
 802400e:	2001      	movs	r0, #1
 8024010:	f7dd fe4c 	bl	8001cac <_exit>

08024014 <quorem>:
 8024014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024018:	6903      	ldr	r3, [r0, #16]
 802401a:	690c      	ldr	r4, [r1, #16]
 802401c:	42a3      	cmp	r3, r4
 802401e:	4607      	mov	r7, r0
 8024020:	db7e      	blt.n	8024120 <quorem+0x10c>
 8024022:	3c01      	subs	r4, #1
 8024024:	f101 0814 	add.w	r8, r1, #20
 8024028:	00a3      	lsls	r3, r4, #2
 802402a:	f100 0514 	add.w	r5, r0, #20
 802402e:	9300      	str	r3, [sp, #0]
 8024030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024034:	9301      	str	r3, [sp, #4]
 8024036:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802403a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802403e:	3301      	adds	r3, #1
 8024040:	429a      	cmp	r2, r3
 8024042:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024046:	fbb2 f6f3 	udiv	r6, r2, r3
 802404a:	d32e      	bcc.n	80240aa <quorem+0x96>
 802404c:	f04f 0a00 	mov.w	sl, #0
 8024050:	46c4      	mov	ip, r8
 8024052:	46ae      	mov	lr, r5
 8024054:	46d3      	mov	fp, sl
 8024056:	f85c 3b04 	ldr.w	r3, [ip], #4
 802405a:	b298      	uxth	r0, r3
 802405c:	fb06 a000 	mla	r0, r6, r0, sl
 8024060:	0c02      	lsrs	r2, r0, #16
 8024062:	0c1b      	lsrs	r3, r3, #16
 8024064:	fb06 2303 	mla	r3, r6, r3, r2
 8024068:	f8de 2000 	ldr.w	r2, [lr]
 802406c:	b280      	uxth	r0, r0
 802406e:	b292      	uxth	r2, r2
 8024070:	1a12      	subs	r2, r2, r0
 8024072:	445a      	add	r2, fp
 8024074:	f8de 0000 	ldr.w	r0, [lr]
 8024078:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802407c:	b29b      	uxth	r3, r3
 802407e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8024082:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8024086:	b292      	uxth	r2, r2
 8024088:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802408c:	45e1      	cmp	r9, ip
 802408e:	f84e 2b04 	str.w	r2, [lr], #4
 8024092:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8024096:	d2de      	bcs.n	8024056 <quorem+0x42>
 8024098:	9b00      	ldr	r3, [sp, #0]
 802409a:	58eb      	ldr	r3, [r5, r3]
 802409c:	b92b      	cbnz	r3, 80240aa <quorem+0x96>
 802409e:	9b01      	ldr	r3, [sp, #4]
 80240a0:	3b04      	subs	r3, #4
 80240a2:	429d      	cmp	r5, r3
 80240a4:	461a      	mov	r2, r3
 80240a6:	d32f      	bcc.n	8024108 <quorem+0xf4>
 80240a8:	613c      	str	r4, [r7, #16]
 80240aa:	4638      	mov	r0, r7
 80240ac:	f001 fafa 	bl	80256a4 <__mcmp>
 80240b0:	2800      	cmp	r0, #0
 80240b2:	db25      	blt.n	8024100 <quorem+0xec>
 80240b4:	4629      	mov	r1, r5
 80240b6:	2000      	movs	r0, #0
 80240b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80240bc:	f8d1 c000 	ldr.w	ip, [r1]
 80240c0:	fa1f fe82 	uxth.w	lr, r2
 80240c4:	fa1f f38c 	uxth.w	r3, ip
 80240c8:	eba3 030e 	sub.w	r3, r3, lr
 80240cc:	4403      	add	r3, r0
 80240ce:	0c12      	lsrs	r2, r2, #16
 80240d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80240d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80240d8:	b29b      	uxth	r3, r3
 80240da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80240de:	45c1      	cmp	r9, r8
 80240e0:	f841 3b04 	str.w	r3, [r1], #4
 80240e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80240e8:	d2e6      	bcs.n	80240b8 <quorem+0xa4>
 80240ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80240ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80240f2:	b922      	cbnz	r2, 80240fe <quorem+0xea>
 80240f4:	3b04      	subs	r3, #4
 80240f6:	429d      	cmp	r5, r3
 80240f8:	461a      	mov	r2, r3
 80240fa:	d30b      	bcc.n	8024114 <quorem+0x100>
 80240fc:	613c      	str	r4, [r7, #16]
 80240fe:	3601      	adds	r6, #1
 8024100:	4630      	mov	r0, r6
 8024102:	b003      	add	sp, #12
 8024104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024108:	6812      	ldr	r2, [r2, #0]
 802410a:	3b04      	subs	r3, #4
 802410c:	2a00      	cmp	r2, #0
 802410e:	d1cb      	bne.n	80240a8 <quorem+0x94>
 8024110:	3c01      	subs	r4, #1
 8024112:	e7c6      	b.n	80240a2 <quorem+0x8e>
 8024114:	6812      	ldr	r2, [r2, #0]
 8024116:	3b04      	subs	r3, #4
 8024118:	2a00      	cmp	r2, #0
 802411a:	d1ef      	bne.n	80240fc <quorem+0xe8>
 802411c:	3c01      	subs	r4, #1
 802411e:	e7ea      	b.n	80240f6 <quorem+0xe2>
 8024120:	2000      	movs	r0, #0
 8024122:	e7ee      	b.n	8024102 <quorem+0xee>
 8024124:	0000      	movs	r0, r0
	...

08024128 <_dtoa_r>:
 8024128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802412c:	ed2d 8b02 	vpush	{d8}
 8024130:	69c7      	ldr	r7, [r0, #28]
 8024132:	b091      	sub	sp, #68	@ 0x44
 8024134:	ed8d 0b02 	vstr	d0, [sp, #8]
 8024138:	ec55 4b10 	vmov	r4, r5, d0
 802413c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802413e:	9107      	str	r1, [sp, #28]
 8024140:	4681      	mov	r9, r0
 8024142:	9209      	str	r2, [sp, #36]	@ 0x24
 8024144:	930d      	str	r3, [sp, #52]	@ 0x34
 8024146:	b97f      	cbnz	r7, 8024168 <_dtoa_r+0x40>
 8024148:	2010      	movs	r0, #16
 802414a:	f000 fecf 	bl	8024eec <malloc>
 802414e:	4602      	mov	r2, r0
 8024150:	f8c9 001c 	str.w	r0, [r9, #28]
 8024154:	b920      	cbnz	r0, 8024160 <_dtoa_r+0x38>
 8024156:	4ba0      	ldr	r3, [pc, #640]	@ (80243d8 <_dtoa_r+0x2b0>)
 8024158:	21ef      	movs	r1, #239	@ 0xef
 802415a:	48a0      	ldr	r0, [pc, #640]	@ (80243dc <_dtoa_r+0x2b4>)
 802415c:	f7ff f960 	bl	8023420 <__assert_func>
 8024160:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8024164:	6007      	str	r7, [r0, #0]
 8024166:	60c7      	str	r7, [r0, #12]
 8024168:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802416c:	6819      	ldr	r1, [r3, #0]
 802416e:	b159      	cbz	r1, 8024188 <_dtoa_r+0x60>
 8024170:	685a      	ldr	r2, [r3, #4]
 8024172:	604a      	str	r2, [r1, #4]
 8024174:	2301      	movs	r3, #1
 8024176:	4093      	lsls	r3, r2
 8024178:	608b      	str	r3, [r1, #8]
 802417a:	4648      	mov	r0, r9
 802417c:	f001 f858 	bl	8025230 <_Bfree>
 8024180:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8024184:	2200      	movs	r2, #0
 8024186:	601a      	str	r2, [r3, #0]
 8024188:	1e2b      	subs	r3, r5, #0
 802418a:	bfbb      	ittet	lt
 802418c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8024190:	9303      	strlt	r3, [sp, #12]
 8024192:	2300      	movge	r3, #0
 8024194:	2201      	movlt	r2, #1
 8024196:	bfac      	ite	ge
 8024198:	6033      	strge	r3, [r6, #0]
 802419a:	6032      	strlt	r2, [r6, #0]
 802419c:	4b90      	ldr	r3, [pc, #576]	@ (80243e0 <_dtoa_r+0x2b8>)
 802419e:	9e03      	ldr	r6, [sp, #12]
 80241a0:	43b3      	bics	r3, r6
 80241a2:	d110      	bne.n	80241c6 <_dtoa_r+0x9e>
 80241a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80241a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80241aa:	6013      	str	r3, [r2, #0]
 80241ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80241b0:	4323      	orrs	r3, r4
 80241b2:	f000 84de 	beq.w	8024b72 <_dtoa_r+0xa4a>
 80241b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80241b8:	4f8a      	ldr	r7, [pc, #552]	@ (80243e4 <_dtoa_r+0x2bc>)
 80241ba:	2b00      	cmp	r3, #0
 80241bc:	f000 84e0 	beq.w	8024b80 <_dtoa_r+0xa58>
 80241c0:	1cfb      	adds	r3, r7, #3
 80241c2:	f000 bcdb 	b.w	8024b7c <_dtoa_r+0xa54>
 80241c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80241ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80241ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241d2:	d10a      	bne.n	80241ea <_dtoa_r+0xc2>
 80241d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80241d6:	2301      	movs	r3, #1
 80241d8:	6013      	str	r3, [r2, #0]
 80241da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80241dc:	b113      	cbz	r3, 80241e4 <_dtoa_r+0xbc>
 80241de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80241e0:	4b81      	ldr	r3, [pc, #516]	@ (80243e8 <_dtoa_r+0x2c0>)
 80241e2:	6013      	str	r3, [r2, #0]
 80241e4:	4f81      	ldr	r7, [pc, #516]	@ (80243ec <_dtoa_r+0x2c4>)
 80241e6:	f000 bccb 	b.w	8024b80 <_dtoa_r+0xa58>
 80241ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80241ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80241ee:	4648      	mov	r0, r9
 80241f0:	eeb0 0b48 	vmov.f64	d0, d8
 80241f4:	f001 fb06 	bl	8025804 <__d2b>
 80241f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80241fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241fe:	9001      	str	r0, [sp, #4]
 8024200:	2b00      	cmp	r3, #0
 8024202:	d045      	beq.n	8024290 <_dtoa_r+0x168>
 8024204:	eeb0 7b48 	vmov.f64	d7, d8
 8024208:	ee18 1a90 	vmov	r1, s17
 802420c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8024210:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8024214:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8024218:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802421c:	2500      	movs	r5, #0
 802421e:	ee07 1a90 	vmov	s15, r1
 8024222:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8024226:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80243c0 <_dtoa_r+0x298>
 802422a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802422e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80243c8 <_dtoa_r+0x2a0>
 8024232:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024236:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80243d0 <_dtoa_r+0x2a8>
 802423a:	ee07 3a90 	vmov	s15, r3
 802423e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8024242:	eeb0 7b46 	vmov.f64	d7, d6
 8024246:	eea4 7b05 	vfma.f64	d7, d4, d5
 802424a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802424e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024256:	ee16 8a90 	vmov	r8, s13
 802425a:	d508      	bpl.n	802426e <_dtoa_r+0x146>
 802425c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8024260:	eeb4 6b47 	vcmp.f64	d6, d7
 8024264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024268:	bf18      	it	ne
 802426a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 802426e:	f1b8 0f16 	cmp.w	r8, #22
 8024272:	d82b      	bhi.n	80242cc <_dtoa_r+0x1a4>
 8024274:	495e      	ldr	r1, [pc, #376]	@ (80243f0 <_dtoa_r+0x2c8>)
 8024276:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802427a:	ed91 7b00 	vldr	d7, [r1]
 802427e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8024282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024286:	d501      	bpl.n	802428c <_dtoa_r+0x164>
 8024288:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802428c:	2100      	movs	r1, #0
 802428e:	e01e      	b.n	80242ce <_dtoa_r+0x1a6>
 8024290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024292:	4413      	add	r3, r2
 8024294:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8024298:	2920      	cmp	r1, #32
 802429a:	bfc1      	itttt	gt
 802429c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80242a0:	408e      	lslgt	r6, r1
 80242a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80242a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80242aa:	bfd6      	itet	le
 80242ac:	f1c1 0120 	rsble	r1, r1, #32
 80242b0:	4331      	orrgt	r1, r6
 80242b2:	fa04 f101 	lslle.w	r1, r4, r1
 80242b6:	ee07 1a90 	vmov	s15, r1
 80242ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80242be:	3b01      	subs	r3, #1
 80242c0:	ee17 1a90 	vmov	r1, s15
 80242c4:	2501      	movs	r5, #1
 80242c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80242ca:	e7a8      	b.n	802421e <_dtoa_r+0xf6>
 80242cc:	2101      	movs	r1, #1
 80242ce:	1ad2      	subs	r2, r2, r3
 80242d0:	1e53      	subs	r3, r2, #1
 80242d2:	9306      	str	r3, [sp, #24]
 80242d4:	bf45      	ittet	mi
 80242d6:	f1c2 0301 	rsbmi	r3, r2, #1
 80242da:	9305      	strmi	r3, [sp, #20]
 80242dc:	2300      	movpl	r3, #0
 80242de:	2300      	movmi	r3, #0
 80242e0:	bf4c      	ite	mi
 80242e2:	9306      	strmi	r3, [sp, #24]
 80242e4:	9305      	strpl	r3, [sp, #20]
 80242e6:	f1b8 0f00 	cmp.w	r8, #0
 80242ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80242ec:	db18      	blt.n	8024320 <_dtoa_r+0x1f8>
 80242ee:	9b06      	ldr	r3, [sp, #24]
 80242f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80242f4:	4443      	add	r3, r8
 80242f6:	9306      	str	r3, [sp, #24]
 80242f8:	2300      	movs	r3, #0
 80242fa:	9a07      	ldr	r2, [sp, #28]
 80242fc:	2a09      	cmp	r2, #9
 80242fe:	d849      	bhi.n	8024394 <_dtoa_r+0x26c>
 8024300:	2a05      	cmp	r2, #5
 8024302:	bfc4      	itt	gt
 8024304:	3a04      	subgt	r2, #4
 8024306:	9207      	strgt	r2, [sp, #28]
 8024308:	9a07      	ldr	r2, [sp, #28]
 802430a:	f1a2 0202 	sub.w	r2, r2, #2
 802430e:	bfcc      	ite	gt
 8024310:	2400      	movgt	r4, #0
 8024312:	2401      	movle	r4, #1
 8024314:	2a03      	cmp	r2, #3
 8024316:	d848      	bhi.n	80243aa <_dtoa_r+0x282>
 8024318:	e8df f002 	tbb	[pc, r2]
 802431c:	3a2c2e0b 	.word	0x3a2c2e0b
 8024320:	9b05      	ldr	r3, [sp, #20]
 8024322:	2200      	movs	r2, #0
 8024324:	eba3 0308 	sub.w	r3, r3, r8
 8024328:	9305      	str	r3, [sp, #20]
 802432a:	920a      	str	r2, [sp, #40]	@ 0x28
 802432c:	f1c8 0300 	rsb	r3, r8, #0
 8024330:	e7e3      	b.n	80242fa <_dtoa_r+0x1d2>
 8024332:	2200      	movs	r2, #0
 8024334:	9208      	str	r2, [sp, #32]
 8024336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024338:	2a00      	cmp	r2, #0
 802433a:	dc39      	bgt.n	80243b0 <_dtoa_r+0x288>
 802433c:	f04f 0b01 	mov.w	fp, #1
 8024340:	46da      	mov	sl, fp
 8024342:	465a      	mov	r2, fp
 8024344:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8024348:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802434c:	2100      	movs	r1, #0
 802434e:	2004      	movs	r0, #4
 8024350:	f100 0614 	add.w	r6, r0, #20
 8024354:	4296      	cmp	r6, r2
 8024356:	d930      	bls.n	80243ba <_dtoa_r+0x292>
 8024358:	6079      	str	r1, [r7, #4]
 802435a:	4648      	mov	r0, r9
 802435c:	9304      	str	r3, [sp, #16]
 802435e:	f000 ff27 	bl	80251b0 <_Balloc>
 8024362:	9b04      	ldr	r3, [sp, #16]
 8024364:	4607      	mov	r7, r0
 8024366:	2800      	cmp	r0, #0
 8024368:	d146      	bne.n	80243f8 <_dtoa_r+0x2d0>
 802436a:	4b22      	ldr	r3, [pc, #136]	@ (80243f4 <_dtoa_r+0x2cc>)
 802436c:	4602      	mov	r2, r0
 802436e:	f240 11af 	movw	r1, #431	@ 0x1af
 8024372:	e6f2      	b.n	802415a <_dtoa_r+0x32>
 8024374:	2201      	movs	r2, #1
 8024376:	e7dd      	b.n	8024334 <_dtoa_r+0x20c>
 8024378:	2200      	movs	r2, #0
 802437a:	9208      	str	r2, [sp, #32]
 802437c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802437e:	eb08 0b02 	add.w	fp, r8, r2
 8024382:	f10b 0a01 	add.w	sl, fp, #1
 8024386:	4652      	mov	r2, sl
 8024388:	2a01      	cmp	r2, #1
 802438a:	bfb8      	it	lt
 802438c:	2201      	movlt	r2, #1
 802438e:	e7db      	b.n	8024348 <_dtoa_r+0x220>
 8024390:	2201      	movs	r2, #1
 8024392:	e7f2      	b.n	802437a <_dtoa_r+0x252>
 8024394:	2401      	movs	r4, #1
 8024396:	2200      	movs	r2, #0
 8024398:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802439c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80243a0:	2100      	movs	r1, #0
 80243a2:	46da      	mov	sl, fp
 80243a4:	2212      	movs	r2, #18
 80243a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80243a8:	e7ce      	b.n	8024348 <_dtoa_r+0x220>
 80243aa:	2201      	movs	r2, #1
 80243ac:	9208      	str	r2, [sp, #32]
 80243ae:	e7f5      	b.n	802439c <_dtoa_r+0x274>
 80243b0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80243b4:	46da      	mov	sl, fp
 80243b6:	465a      	mov	r2, fp
 80243b8:	e7c6      	b.n	8024348 <_dtoa_r+0x220>
 80243ba:	3101      	adds	r1, #1
 80243bc:	0040      	lsls	r0, r0, #1
 80243be:	e7c7      	b.n	8024350 <_dtoa_r+0x228>
 80243c0:	636f4361 	.word	0x636f4361
 80243c4:	3fd287a7 	.word	0x3fd287a7
 80243c8:	8b60c8b3 	.word	0x8b60c8b3
 80243cc:	3fc68a28 	.word	0x3fc68a28
 80243d0:	509f79fb 	.word	0x509f79fb
 80243d4:	3fd34413 	.word	0x3fd34413
 80243d8:	08027205 	.word	0x08027205
 80243dc:	0802721c 	.word	0x0802721c
 80243e0:	7ff00000 	.word	0x7ff00000
 80243e4:	08027201 	.word	0x08027201
 80243e8:	080271d5 	.word	0x080271d5
 80243ec:	080271d4 	.word	0x080271d4
 80243f0:	08027328 	.word	0x08027328
 80243f4:	08027274 	.word	0x08027274
 80243f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80243fc:	f1ba 0f0e 	cmp.w	sl, #14
 8024400:	6010      	str	r0, [r2, #0]
 8024402:	d86f      	bhi.n	80244e4 <_dtoa_r+0x3bc>
 8024404:	2c00      	cmp	r4, #0
 8024406:	d06d      	beq.n	80244e4 <_dtoa_r+0x3bc>
 8024408:	f1b8 0f00 	cmp.w	r8, #0
 802440c:	f340 80c2 	ble.w	8024594 <_dtoa_r+0x46c>
 8024410:	4aca      	ldr	r2, [pc, #808]	@ (802473c <_dtoa_r+0x614>)
 8024412:	f008 010f 	and.w	r1, r8, #15
 8024416:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802441a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802441e:	ed92 7b00 	vldr	d7, [r2]
 8024422:	ea4f 1128 	mov.w	r1, r8, asr #4
 8024426:	f000 80a9 	beq.w	802457c <_dtoa_r+0x454>
 802442a:	4ac5      	ldr	r2, [pc, #788]	@ (8024740 <_dtoa_r+0x618>)
 802442c:	ed92 6b08 	vldr	d6, [r2, #32]
 8024430:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8024434:	ed8d 6b02 	vstr	d6, [sp, #8]
 8024438:	f001 010f 	and.w	r1, r1, #15
 802443c:	2203      	movs	r2, #3
 802443e:	48c0      	ldr	r0, [pc, #768]	@ (8024740 <_dtoa_r+0x618>)
 8024440:	2900      	cmp	r1, #0
 8024442:	f040 809d 	bne.w	8024580 <_dtoa_r+0x458>
 8024446:	ed9d 6b02 	vldr	d6, [sp, #8]
 802444a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802444e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024452:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024458:	2900      	cmp	r1, #0
 802445a:	f000 80c1 	beq.w	80245e0 <_dtoa_r+0x4b8>
 802445e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8024462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8024466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802446a:	f140 80b9 	bpl.w	80245e0 <_dtoa_r+0x4b8>
 802446e:	f1ba 0f00 	cmp.w	sl, #0
 8024472:	f000 80b5 	beq.w	80245e0 <_dtoa_r+0x4b8>
 8024476:	f1bb 0f00 	cmp.w	fp, #0
 802447a:	dd31      	ble.n	80244e0 <_dtoa_r+0x3b8>
 802447c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8024480:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024488:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 802448c:	9104      	str	r1, [sp, #16]
 802448e:	3201      	adds	r2, #1
 8024490:	465c      	mov	r4, fp
 8024492:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024496:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 802449a:	ee07 2a90 	vmov	s15, r2
 802449e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80244a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80244a6:	ee15 2a90 	vmov	r2, s11
 80244aa:	ec51 0b15 	vmov	r0, r1, d5
 80244ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80244b2:	2c00      	cmp	r4, #0
 80244b4:	f040 8098 	bne.w	80245e8 <_dtoa_r+0x4c0>
 80244b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80244bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80244c0:	ec41 0b17 	vmov	d7, r0, r1
 80244c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80244c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244cc:	f300 8261 	bgt.w	8024992 <_dtoa_r+0x86a>
 80244d0:	eeb1 7b47 	vneg.f64	d7, d7
 80244d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80244d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244dc:	f100 80f5 	bmi.w	80246ca <_dtoa_r+0x5a2>
 80244e0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80244e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80244e6:	2a00      	cmp	r2, #0
 80244e8:	f2c0 812c 	blt.w	8024744 <_dtoa_r+0x61c>
 80244ec:	f1b8 0f0e 	cmp.w	r8, #14
 80244f0:	f300 8128 	bgt.w	8024744 <_dtoa_r+0x61c>
 80244f4:	4b91      	ldr	r3, [pc, #580]	@ (802473c <_dtoa_r+0x614>)
 80244f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80244fa:	ed93 6b00 	vldr	d6, [r3]
 80244fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024500:	2b00      	cmp	r3, #0
 8024502:	da03      	bge.n	802450c <_dtoa_r+0x3e4>
 8024504:	f1ba 0f00 	cmp.w	sl, #0
 8024508:	f340 80d2 	ble.w	80246b0 <_dtoa_r+0x588>
 802450c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8024510:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024514:	463e      	mov	r6, r7
 8024516:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802451a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802451e:	ee15 3a10 	vmov	r3, s10
 8024522:	3330      	adds	r3, #48	@ 0x30
 8024524:	f806 3b01 	strb.w	r3, [r6], #1
 8024528:	1bf3      	subs	r3, r6, r7
 802452a:	459a      	cmp	sl, r3
 802452c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8024530:	eea3 7b46 	vfms.f64	d7, d3, d6
 8024534:	f040 80f8 	bne.w	8024728 <_dtoa_r+0x600>
 8024538:	ee37 7b07 	vadd.f64	d7, d7, d7
 802453c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8024540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024544:	f300 80dd 	bgt.w	8024702 <_dtoa_r+0x5da>
 8024548:	eeb4 7b46 	vcmp.f64	d7, d6
 802454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024550:	d104      	bne.n	802455c <_dtoa_r+0x434>
 8024552:	ee15 3a10 	vmov	r3, s10
 8024556:	07db      	lsls	r3, r3, #31
 8024558:	f100 80d3 	bmi.w	8024702 <_dtoa_r+0x5da>
 802455c:	9901      	ldr	r1, [sp, #4]
 802455e:	4648      	mov	r0, r9
 8024560:	f000 fe66 	bl	8025230 <_Bfree>
 8024564:	2300      	movs	r3, #0
 8024566:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024568:	7033      	strb	r3, [r6, #0]
 802456a:	f108 0301 	add.w	r3, r8, #1
 802456e:	6013      	str	r3, [r2, #0]
 8024570:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024572:	2b00      	cmp	r3, #0
 8024574:	f000 8304 	beq.w	8024b80 <_dtoa_r+0xa58>
 8024578:	601e      	str	r6, [r3, #0]
 802457a:	e301      	b.n	8024b80 <_dtoa_r+0xa58>
 802457c:	2202      	movs	r2, #2
 802457e:	e75e      	b.n	802443e <_dtoa_r+0x316>
 8024580:	07cc      	lsls	r4, r1, #31
 8024582:	d504      	bpl.n	802458e <_dtoa_r+0x466>
 8024584:	ed90 6b00 	vldr	d6, [r0]
 8024588:	3201      	adds	r2, #1
 802458a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802458e:	1049      	asrs	r1, r1, #1
 8024590:	3008      	adds	r0, #8
 8024592:	e755      	b.n	8024440 <_dtoa_r+0x318>
 8024594:	d022      	beq.n	80245dc <_dtoa_r+0x4b4>
 8024596:	f1c8 0100 	rsb	r1, r8, #0
 802459a:	4a68      	ldr	r2, [pc, #416]	@ (802473c <_dtoa_r+0x614>)
 802459c:	f001 000f 	and.w	r0, r1, #15
 80245a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80245a4:	ed92 7b00 	vldr	d7, [r2]
 80245a8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80245ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80245b0:	4863      	ldr	r0, [pc, #396]	@ (8024740 <_dtoa_r+0x618>)
 80245b2:	1109      	asrs	r1, r1, #4
 80245b4:	2400      	movs	r4, #0
 80245b6:	2202      	movs	r2, #2
 80245b8:	b929      	cbnz	r1, 80245c6 <_dtoa_r+0x49e>
 80245ba:	2c00      	cmp	r4, #0
 80245bc:	f43f af49 	beq.w	8024452 <_dtoa_r+0x32a>
 80245c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80245c4:	e745      	b.n	8024452 <_dtoa_r+0x32a>
 80245c6:	07ce      	lsls	r6, r1, #31
 80245c8:	d505      	bpl.n	80245d6 <_dtoa_r+0x4ae>
 80245ca:	ed90 6b00 	vldr	d6, [r0]
 80245ce:	3201      	adds	r2, #1
 80245d0:	2401      	movs	r4, #1
 80245d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80245d6:	1049      	asrs	r1, r1, #1
 80245d8:	3008      	adds	r0, #8
 80245da:	e7ed      	b.n	80245b8 <_dtoa_r+0x490>
 80245dc:	2202      	movs	r2, #2
 80245de:	e738      	b.n	8024452 <_dtoa_r+0x32a>
 80245e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80245e4:	4654      	mov	r4, sl
 80245e6:	e754      	b.n	8024492 <_dtoa_r+0x36a>
 80245e8:	4a54      	ldr	r2, [pc, #336]	@ (802473c <_dtoa_r+0x614>)
 80245ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80245ee:	ed12 4b02 	vldr	d4, [r2, #-8]
 80245f2:	9a08      	ldr	r2, [sp, #32]
 80245f4:	ec41 0b17 	vmov	d7, r0, r1
 80245f8:	443c      	add	r4, r7
 80245fa:	b34a      	cbz	r2, 8024650 <_dtoa_r+0x528>
 80245fc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8024600:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8024604:	463e      	mov	r6, r7
 8024606:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802460a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802460e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8024612:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024616:	ee14 2a90 	vmov	r2, s9
 802461a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802461e:	3230      	adds	r2, #48	@ 0x30
 8024620:	ee36 6b45 	vsub.f64	d6, d6, d5
 8024624:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802462c:	f806 2b01 	strb.w	r2, [r6], #1
 8024630:	d438      	bmi.n	80246a4 <_dtoa_r+0x57c>
 8024632:	ee32 5b46 	vsub.f64	d5, d2, d6
 8024636:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802463e:	d462      	bmi.n	8024706 <_dtoa_r+0x5de>
 8024640:	42a6      	cmp	r6, r4
 8024642:	f43f af4d 	beq.w	80244e0 <_dtoa_r+0x3b8>
 8024646:	ee27 7b03 	vmul.f64	d7, d7, d3
 802464a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802464e:	e7e0      	b.n	8024612 <_dtoa_r+0x4ea>
 8024650:	4621      	mov	r1, r4
 8024652:	463e      	mov	r6, r7
 8024654:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024658:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802465c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024660:	ee14 2a90 	vmov	r2, s9
 8024664:	3230      	adds	r2, #48	@ 0x30
 8024666:	f806 2b01 	strb.w	r2, [r6], #1
 802466a:	42a6      	cmp	r6, r4
 802466c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8024670:	ee36 6b45 	vsub.f64	d6, d6, d5
 8024674:	d119      	bne.n	80246aa <_dtoa_r+0x582>
 8024676:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802467a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802467e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8024682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024686:	dc3e      	bgt.n	8024706 <_dtoa_r+0x5de>
 8024688:	ee35 5b47 	vsub.f64	d5, d5, d7
 802468c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8024690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024694:	f57f af24 	bpl.w	80244e0 <_dtoa_r+0x3b8>
 8024698:	460e      	mov	r6, r1
 802469a:	3901      	subs	r1, #1
 802469c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80246a0:	2b30      	cmp	r3, #48	@ 0x30
 80246a2:	d0f9      	beq.n	8024698 <_dtoa_r+0x570>
 80246a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80246a8:	e758      	b.n	802455c <_dtoa_r+0x434>
 80246aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80246ae:	e7d5      	b.n	802465c <_dtoa_r+0x534>
 80246b0:	d10b      	bne.n	80246ca <_dtoa_r+0x5a2>
 80246b2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80246b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80246ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80246be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80246c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246c6:	f2c0 8161 	blt.w	802498c <_dtoa_r+0x864>
 80246ca:	2400      	movs	r4, #0
 80246cc:	4625      	mov	r5, r4
 80246ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246d0:	43db      	mvns	r3, r3
 80246d2:	9304      	str	r3, [sp, #16]
 80246d4:	463e      	mov	r6, r7
 80246d6:	f04f 0800 	mov.w	r8, #0
 80246da:	4621      	mov	r1, r4
 80246dc:	4648      	mov	r0, r9
 80246de:	f000 fda7 	bl	8025230 <_Bfree>
 80246e2:	2d00      	cmp	r5, #0
 80246e4:	d0de      	beq.n	80246a4 <_dtoa_r+0x57c>
 80246e6:	f1b8 0f00 	cmp.w	r8, #0
 80246ea:	d005      	beq.n	80246f8 <_dtoa_r+0x5d0>
 80246ec:	45a8      	cmp	r8, r5
 80246ee:	d003      	beq.n	80246f8 <_dtoa_r+0x5d0>
 80246f0:	4641      	mov	r1, r8
 80246f2:	4648      	mov	r0, r9
 80246f4:	f000 fd9c 	bl	8025230 <_Bfree>
 80246f8:	4629      	mov	r1, r5
 80246fa:	4648      	mov	r0, r9
 80246fc:	f000 fd98 	bl	8025230 <_Bfree>
 8024700:	e7d0      	b.n	80246a4 <_dtoa_r+0x57c>
 8024702:	f8cd 8010 	str.w	r8, [sp, #16]
 8024706:	4633      	mov	r3, r6
 8024708:	461e      	mov	r6, r3
 802470a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802470e:	2a39      	cmp	r2, #57	@ 0x39
 8024710:	d106      	bne.n	8024720 <_dtoa_r+0x5f8>
 8024712:	429f      	cmp	r7, r3
 8024714:	d1f8      	bne.n	8024708 <_dtoa_r+0x5e0>
 8024716:	9a04      	ldr	r2, [sp, #16]
 8024718:	3201      	adds	r2, #1
 802471a:	9204      	str	r2, [sp, #16]
 802471c:	2230      	movs	r2, #48	@ 0x30
 802471e:	703a      	strb	r2, [r7, #0]
 8024720:	781a      	ldrb	r2, [r3, #0]
 8024722:	3201      	adds	r2, #1
 8024724:	701a      	strb	r2, [r3, #0]
 8024726:	e7bd      	b.n	80246a4 <_dtoa_r+0x57c>
 8024728:	ee27 7b04 	vmul.f64	d7, d7, d4
 802472c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024734:	f47f aeef 	bne.w	8024516 <_dtoa_r+0x3ee>
 8024738:	e710      	b.n	802455c <_dtoa_r+0x434>
 802473a:	bf00      	nop
 802473c:	08027328 	.word	0x08027328
 8024740:	08027300 	.word	0x08027300
 8024744:	9908      	ldr	r1, [sp, #32]
 8024746:	2900      	cmp	r1, #0
 8024748:	f000 80e3 	beq.w	8024912 <_dtoa_r+0x7ea>
 802474c:	9907      	ldr	r1, [sp, #28]
 802474e:	2901      	cmp	r1, #1
 8024750:	f300 80c8 	bgt.w	80248e4 <_dtoa_r+0x7bc>
 8024754:	2d00      	cmp	r5, #0
 8024756:	f000 80c1 	beq.w	80248dc <_dtoa_r+0x7b4>
 802475a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802475e:	9e05      	ldr	r6, [sp, #20]
 8024760:	461c      	mov	r4, r3
 8024762:	9304      	str	r3, [sp, #16]
 8024764:	9b05      	ldr	r3, [sp, #20]
 8024766:	4413      	add	r3, r2
 8024768:	9305      	str	r3, [sp, #20]
 802476a:	9b06      	ldr	r3, [sp, #24]
 802476c:	2101      	movs	r1, #1
 802476e:	4413      	add	r3, r2
 8024770:	4648      	mov	r0, r9
 8024772:	9306      	str	r3, [sp, #24]
 8024774:	f000 fe10 	bl	8025398 <__i2b>
 8024778:	9b04      	ldr	r3, [sp, #16]
 802477a:	4605      	mov	r5, r0
 802477c:	b166      	cbz	r6, 8024798 <_dtoa_r+0x670>
 802477e:	9a06      	ldr	r2, [sp, #24]
 8024780:	2a00      	cmp	r2, #0
 8024782:	dd09      	ble.n	8024798 <_dtoa_r+0x670>
 8024784:	42b2      	cmp	r2, r6
 8024786:	9905      	ldr	r1, [sp, #20]
 8024788:	bfa8      	it	ge
 802478a:	4632      	movge	r2, r6
 802478c:	1a89      	subs	r1, r1, r2
 802478e:	9105      	str	r1, [sp, #20]
 8024790:	9906      	ldr	r1, [sp, #24]
 8024792:	1ab6      	subs	r6, r6, r2
 8024794:	1a8a      	subs	r2, r1, r2
 8024796:	9206      	str	r2, [sp, #24]
 8024798:	b1fb      	cbz	r3, 80247da <_dtoa_r+0x6b2>
 802479a:	9a08      	ldr	r2, [sp, #32]
 802479c:	2a00      	cmp	r2, #0
 802479e:	f000 80bc 	beq.w	802491a <_dtoa_r+0x7f2>
 80247a2:	b19c      	cbz	r4, 80247cc <_dtoa_r+0x6a4>
 80247a4:	4629      	mov	r1, r5
 80247a6:	4622      	mov	r2, r4
 80247a8:	4648      	mov	r0, r9
 80247aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80247ac:	f000 feb4 	bl	8025518 <__pow5mult>
 80247b0:	9a01      	ldr	r2, [sp, #4]
 80247b2:	4601      	mov	r1, r0
 80247b4:	4605      	mov	r5, r0
 80247b6:	4648      	mov	r0, r9
 80247b8:	f000 fe04 	bl	80253c4 <__multiply>
 80247bc:	9901      	ldr	r1, [sp, #4]
 80247be:	9004      	str	r0, [sp, #16]
 80247c0:	4648      	mov	r0, r9
 80247c2:	f000 fd35 	bl	8025230 <_Bfree>
 80247c6:	9a04      	ldr	r2, [sp, #16]
 80247c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80247ca:	9201      	str	r2, [sp, #4]
 80247cc:	1b1a      	subs	r2, r3, r4
 80247ce:	d004      	beq.n	80247da <_dtoa_r+0x6b2>
 80247d0:	9901      	ldr	r1, [sp, #4]
 80247d2:	4648      	mov	r0, r9
 80247d4:	f000 fea0 	bl	8025518 <__pow5mult>
 80247d8:	9001      	str	r0, [sp, #4]
 80247da:	2101      	movs	r1, #1
 80247dc:	4648      	mov	r0, r9
 80247de:	f000 fddb 	bl	8025398 <__i2b>
 80247e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80247e4:	4604      	mov	r4, r0
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	f000 81d0 	beq.w	8024b8c <_dtoa_r+0xa64>
 80247ec:	461a      	mov	r2, r3
 80247ee:	4601      	mov	r1, r0
 80247f0:	4648      	mov	r0, r9
 80247f2:	f000 fe91 	bl	8025518 <__pow5mult>
 80247f6:	9b07      	ldr	r3, [sp, #28]
 80247f8:	2b01      	cmp	r3, #1
 80247fa:	4604      	mov	r4, r0
 80247fc:	f300 8095 	bgt.w	802492a <_dtoa_r+0x802>
 8024800:	9b02      	ldr	r3, [sp, #8]
 8024802:	2b00      	cmp	r3, #0
 8024804:	f040 808b 	bne.w	802491e <_dtoa_r+0x7f6>
 8024808:	9b03      	ldr	r3, [sp, #12]
 802480a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802480e:	2a00      	cmp	r2, #0
 8024810:	f040 8087 	bne.w	8024922 <_dtoa_r+0x7fa>
 8024814:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8024818:	0d12      	lsrs	r2, r2, #20
 802481a:	0512      	lsls	r2, r2, #20
 802481c:	2a00      	cmp	r2, #0
 802481e:	f000 8082 	beq.w	8024926 <_dtoa_r+0x7fe>
 8024822:	9b05      	ldr	r3, [sp, #20]
 8024824:	3301      	adds	r3, #1
 8024826:	9305      	str	r3, [sp, #20]
 8024828:	9b06      	ldr	r3, [sp, #24]
 802482a:	3301      	adds	r3, #1
 802482c:	9306      	str	r3, [sp, #24]
 802482e:	2301      	movs	r3, #1
 8024830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024834:	2b00      	cmp	r3, #0
 8024836:	f000 81af 	beq.w	8024b98 <_dtoa_r+0xa70>
 802483a:	6922      	ldr	r2, [r4, #16]
 802483c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8024840:	6910      	ldr	r0, [r2, #16]
 8024842:	f000 fd5d 	bl	8025300 <__hi0bits>
 8024846:	f1c0 0020 	rsb	r0, r0, #32
 802484a:	9b06      	ldr	r3, [sp, #24]
 802484c:	4418      	add	r0, r3
 802484e:	f010 001f 	ands.w	r0, r0, #31
 8024852:	d076      	beq.n	8024942 <_dtoa_r+0x81a>
 8024854:	f1c0 0220 	rsb	r2, r0, #32
 8024858:	2a04      	cmp	r2, #4
 802485a:	dd69      	ble.n	8024930 <_dtoa_r+0x808>
 802485c:	9b05      	ldr	r3, [sp, #20]
 802485e:	f1c0 001c 	rsb	r0, r0, #28
 8024862:	4403      	add	r3, r0
 8024864:	9305      	str	r3, [sp, #20]
 8024866:	9b06      	ldr	r3, [sp, #24]
 8024868:	4406      	add	r6, r0
 802486a:	4403      	add	r3, r0
 802486c:	9306      	str	r3, [sp, #24]
 802486e:	9b05      	ldr	r3, [sp, #20]
 8024870:	2b00      	cmp	r3, #0
 8024872:	dd05      	ble.n	8024880 <_dtoa_r+0x758>
 8024874:	9901      	ldr	r1, [sp, #4]
 8024876:	461a      	mov	r2, r3
 8024878:	4648      	mov	r0, r9
 802487a:	f000 fea7 	bl	80255cc <__lshift>
 802487e:	9001      	str	r0, [sp, #4]
 8024880:	9b06      	ldr	r3, [sp, #24]
 8024882:	2b00      	cmp	r3, #0
 8024884:	dd05      	ble.n	8024892 <_dtoa_r+0x76a>
 8024886:	4621      	mov	r1, r4
 8024888:	461a      	mov	r2, r3
 802488a:	4648      	mov	r0, r9
 802488c:	f000 fe9e 	bl	80255cc <__lshift>
 8024890:	4604      	mov	r4, r0
 8024892:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024894:	2b00      	cmp	r3, #0
 8024896:	d056      	beq.n	8024946 <_dtoa_r+0x81e>
 8024898:	9801      	ldr	r0, [sp, #4]
 802489a:	4621      	mov	r1, r4
 802489c:	f000 ff02 	bl	80256a4 <__mcmp>
 80248a0:	2800      	cmp	r0, #0
 80248a2:	da50      	bge.n	8024946 <_dtoa_r+0x81e>
 80248a4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80248a8:	9304      	str	r3, [sp, #16]
 80248aa:	9901      	ldr	r1, [sp, #4]
 80248ac:	2300      	movs	r3, #0
 80248ae:	220a      	movs	r2, #10
 80248b0:	4648      	mov	r0, r9
 80248b2:	f000 fcdf 	bl	8025274 <__multadd>
 80248b6:	9b08      	ldr	r3, [sp, #32]
 80248b8:	9001      	str	r0, [sp, #4]
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	f000 816e 	beq.w	8024b9c <_dtoa_r+0xa74>
 80248c0:	4629      	mov	r1, r5
 80248c2:	2300      	movs	r3, #0
 80248c4:	220a      	movs	r2, #10
 80248c6:	4648      	mov	r0, r9
 80248c8:	f000 fcd4 	bl	8025274 <__multadd>
 80248cc:	f1bb 0f00 	cmp.w	fp, #0
 80248d0:	4605      	mov	r5, r0
 80248d2:	dc64      	bgt.n	802499e <_dtoa_r+0x876>
 80248d4:	9b07      	ldr	r3, [sp, #28]
 80248d6:	2b02      	cmp	r3, #2
 80248d8:	dc3e      	bgt.n	8024958 <_dtoa_r+0x830>
 80248da:	e060      	b.n	802499e <_dtoa_r+0x876>
 80248dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80248de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80248e2:	e73c      	b.n	802475e <_dtoa_r+0x636>
 80248e4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80248e8:	42a3      	cmp	r3, r4
 80248ea:	bfbf      	itttt	lt
 80248ec:	1ae2      	sublt	r2, r4, r3
 80248ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80248f0:	189b      	addlt	r3, r3, r2
 80248f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80248f4:	bfae      	itee	ge
 80248f6:	1b1c      	subge	r4, r3, r4
 80248f8:	4623      	movlt	r3, r4
 80248fa:	2400      	movlt	r4, #0
 80248fc:	f1ba 0f00 	cmp.w	sl, #0
 8024900:	bfb5      	itete	lt
 8024902:	9a05      	ldrlt	r2, [sp, #20]
 8024904:	9e05      	ldrge	r6, [sp, #20]
 8024906:	eba2 060a 	sublt.w	r6, r2, sl
 802490a:	4652      	movge	r2, sl
 802490c:	bfb8      	it	lt
 802490e:	2200      	movlt	r2, #0
 8024910:	e727      	b.n	8024762 <_dtoa_r+0x63a>
 8024912:	9e05      	ldr	r6, [sp, #20]
 8024914:	9d08      	ldr	r5, [sp, #32]
 8024916:	461c      	mov	r4, r3
 8024918:	e730      	b.n	802477c <_dtoa_r+0x654>
 802491a:	461a      	mov	r2, r3
 802491c:	e758      	b.n	80247d0 <_dtoa_r+0x6a8>
 802491e:	2300      	movs	r3, #0
 8024920:	e786      	b.n	8024830 <_dtoa_r+0x708>
 8024922:	9b02      	ldr	r3, [sp, #8]
 8024924:	e784      	b.n	8024830 <_dtoa_r+0x708>
 8024926:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024928:	e783      	b.n	8024832 <_dtoa_r+0x70a>
 802492a:	2300      	movs	r3, #0
 802492c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802492e:	e784      	b.n	802483a <_dtoa_r+0x712>
 8024930:	d09d      	beq.n	802486e <_dtoa_r+0x746>
 8024932:	9b05      	ldr	r3, [sp, #20]
 8024934:	321c      	adds	r2, #28
 8024936:	4413      	add	r3, r2
 8024938:	9305      	str	r3, [sp, #20]
 802493a:	9b06      	ldr	r3, [sp, #24]
 802493c:	4416      	add	r6, r2
 802493e:	4413      	add	r3, r2
 8024940:	e794      	b.n	802486c <_dtoa_r+0x744>
 8024942:	4602      	mov	r2, r0
 8024944:	e7f5      	b.n	8024932 <_dtoa_r+0x80a>
 8024946:	f1ba 0f00 	cmp.w	sl, #0
 802494a:	f8cd 8010 	str.w	r8, [sp, #16]
 802494e:	46d3      	mov	fp, sl
 8024950:	dc21      	bgt.n	8024996 <_dtoa_r+0x86e>
 8024952:	9b07      	ldr	r3, [sp, #28]
 8024954:	2b02      	cmp	r3, #2
 8024956:	dd1e      	ble.n	8024996 <_dtoa_r+0x86e>
 8024958:	f1bb 0f00 	cmp.w	fp, #0
 802495c:	f47f aeb7 	bne.w	80246ce <_dtoa_r+0x5a6>
 8024960:	4621      	mov	r1, r4
 8024962:	465b      	mov	r3, fp
 8024964:	2205      	movs	r2, #5
 8024966:	4648      	mov	r0, r9
 8024968:	f000 fc84 	bl	8025274 <__multadd>
 802496c:	4601      	mov	r1, r0
 802496e:	4604      	mov	r4, r0
 8024970:	9801      	ldr	r0, [sp, #4]
 8024972:	f000 fe97 	bl	80256a4 <__mcmp>
 8024976:	2800      	cmp	r0, #0
 8024978:	f77f aea9 	ble.w	80246ce <_dtoa_r+0x5a6>
 802497c:	463e      	mov	r6, r7
 802497e:	2331      	movs	r3, #49	@ 0x31
 8024980:	f806 3b01 	strb.w	r3, [r6], #1
 8024984:	9b04      	ldr	r3, [sp, #16]
 8024986:	3301      	adds	r3, #1
 8024988:	9304      	str	r3, [sp, #16]
 802498a:	e6a4      	b.n	80246d6 <_dtoa_r+0x5ae>
 802498c:	f8cd 8010 	str.w	r8, [sp, #16]
 8024990:	4654      	mov	r4, sl
 8024992:	4625      	mov	r5, r4
 8024994:	e7f2      	b.n	802497c <_dtoa_r+0x854>
 8024996:	9b08      	ldr	r3, [sp, #32]
 8024998:	2b00      	cmp	r3, #0
 802499a:	f000 8103 	beq.w	8024ba4 <_dtoa_r+0xa7c>
 802499e:	2e00      	cmp	r6, #0
 80249a0:	dd05      	ble.n	80249ae <_dtoa_r+0x886>
 80249a2:	4629      	mov	r1, r5
 80249a4:	4632      	mov	r2, r6
 80249a6:	4648      	mov	r0, r9
 80249a8:	f000 fe10 	bl	80255cc <__lshift>
 80249ac:	4605      	mov	r5, r0
 80249ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	d058      	beq.n	8024a66 <_dtoa_r+0x93e>
 80249b4:	6869      	ldr	r1, [r5, #4]
 80249b6:	4648      	mov	r0, r9
 80249b8:	f000 fbfa 	bl	80251b0 <_Balloc>
 80249bc:	4606      	mov	r6, r0
 80249be:	b928      	cbnz	r0, 80249cc <_dtoa_r+0x8a4>
 80249c0:	4b82      	ldr	r3, [pc, #520]	@ (8024bcc <_dtoa_r+0xaa4>)
 80249c2:	4602      	mov	r2, r0
 80249c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80249c8:	f7ff bbc7 	b.w	802415a <_dtoa_r+0x32>
 80249cc:	692a      	ldr	r2, [r5, #16]
 80249ce:	3202      	adds	r2, #2
 80249d0:	0092      	lsls	r2, r2, #2
 80249d2:	f105 010c 	add.w	r1, r5, #12
 80249d6:	300c      	adds	r0, #12
 80249d8:	f7ff fb07 	bl	8023fea <memcpy>
 80249dc:	2201      	movs	r2, #1
 80249de:	4631      	mov	r1, r6
 80249e0:	4648      	mov	r0, r9
 80249e2:	f000 fdf3 	bl	80255cc <__lshift>
 80249e6:	1c7b      	adds	r3, r7, #1
 80249e8:	9305      	str	r3, [sp, #20]
 80249ea:	eb07 030b 	add.w	r3, r7, fp
 80249ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80249f0:	9b02      	ldr	r3, [sp, #8]
 80249f2:	f003 0301 	and.w	r3, r3, #1
 80249f6:	46a8      	mov	r8, r5
 80249f8:	9308      	str	r3, [sp, #32]
 80249fa:	4605      	mov	r5, r0
 80249fc:	9b05      	ldr	r3, [sp, #20]
 80249fe:	9801      	ldr	r0, [sp, #4]
 8024a00:	4621      	mov	r1, r4
 8024a02:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8024a06:	f7ff fb05 	bl	8024014 <quorem>
 8024a0a:	4641      	mov	r1, r8
 8024a0c:	9002      	str	r0, [sp, #8]
 8024a0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8024a12:	9801      	ldr	r0, [sp, #4]
 8024a14:	f000 fe46 	bl	80256a4 <__mcmp>
 8024a18:	462a      	mov	r2, r5
 8024a1a:	9006      	str	r0, [sp, #24]
 8024a1c:	4621      	mov	r1, r4
 8024a1e:	4648      	mov	r0, r9
 8024a20:	f000 fe5c 	bl	80256dc <__mdiff>
 8024a24:	68c2      	ldr	r2, [r0, #12]
 8024a26:	4606      	mov	r6, r0
 8024a28:	b9fa      	cbnz	r2, 8024a6a <_dtoa_r+0x942>
 8024a2a:	4601      	mov	r1, r0
 8024a2c:	9801      	ldr	r0, [sp, #4]
 8024a2e:	f000 fe39 	bl	80256a4 <__mcmp>
 8024a32:	4602      	mov	r2, r0
 8024a34:	4631      	mov	r1, r6
 8024a36:	4648      	mov	r0, r9
 8024a38:	920a      	str	r2, [sp, #40]	@ 0x28
 8024a3a:	f000 fbf9 	bl	8025230 <_Bfree>
 8024a3e:	9b07      	ldr	r3, [sp, #28]
 8024a40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a42:	9e05      	ldr	r6, [sp, #20]
 8024a44:	ea43 0102 	orr.w	r1, r3, r2
 8024a48:	9b08      	ldr	r3, [sp, #32]
 8024a4a:	4319      	orrs	r1, r3
 8024a4c:	d10f      	bne.n	8024a6e <_dtoa_r+0x946>
 8024a4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024a52:	d028      	beq.n	8024aa6 <_dtoa_r+0x97e>
 8024a54:	9b06      	ldr	r3, [sp, #24]
 8024a56:	2b00      	cmp	r3, #0
 8024a58:	dd02      	ble.n	8024a60 <_dtoa_r+0x938>
 8024a5a:	9b02      	ldr	r3, [sp, #8]
 8024a5c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8024a60:	f88b a000 	strb.w	sl, [fp]
 8024a64:	e639      	b.n	80246da <_dtoa_r+0x5b2>
 8024a66:	4628      	mov	r0, r5
 8024a68:	e7bd      	b.n	80249e6 <_dtoa_r+0x8be>
 8024a6a:	2201      	movs	r2, #1
 8024a6c:	e7e2      	b.n	8024a34 <_dtoa_r+0x90c>
 8024a6e:	9b06      	ldr	r3, [sp, #24]
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	db04      	blt.n	8024a7e <_dtoa_r+0x956>
 8024a74:	9907      	ldr	r1, [sp, #28]
 8024a76:	430b      	orrs	r3, r1
 8024a78:	9908      	ldr	r1, [sp, #32]
 8024a7a:	430b      	orrs	r3, r1
 8024a7c:	d120      	bne.n	8024ac0 <_dtoa_r+0x998>
 8024a7e:	2a00      	cmp	r2, #0
 8024a80:	ddee      	ble.n	8024a60 <_dtoa_r+0x938>
 8024a82:	9901      	ldr	r1, [sp, #4]
 8024a84:	2201      	movs	r2, #1
 8024a86:	4648      	mov	r0, r9
 8024a88:	f000 fda0 	bl	80255cc <__lshift>
 8024a8c:	4621      	mov	r1, r4
 8024a8e:	9001      	str	r0, [sp, #4]
 8024a90:	f000 fe08 	bl	80256a4 <__mcmp>
 8024a94:	2800      	cmp	r0, #0
 8024a96:	dc03      	bgt.n	8024aa0 <_dtoa_r+0x978>
 8024a98:	d1e2      	bne.n	8024a60 <_dtoa_r+0x938>
 8024a9a:	f01a 0f01 	tst.w	sl, #1
 8024a9e:	d0df      	beq.n	8024a60 <_dtoa_r+0x938>
 8024aa0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024aa4:	d1d9      	bne.n	8024a5a <_dtoa_r+0x932>
 8024aa6:	2339      	movs	r3, #57	@ 0x39
 8024aa8:	f88b 3000 	strb.w	r3, [fp]
 8024aac:	4633      	mov	r3, r6
 8024aae:	461e      	mov	r6, r3
 8024ab0:	3b01      	subs	r3, #1
 8024ab2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8024ab6:	2a39      	cmp	r2, #57	@ 0x39
 8024ab8:	d053      	beq.n	8024b62 <_dtoa_r+0xa3a>
 8024aba:	3201      	adds	r2, #1
 8024abc:	701a      	strb	r2, [r3, #0]
 8024abe:	e60c      	b.n	80246da <_dtoa_r+0x5b2>
 8024ac0:	2a00      	cmp	r2, #0
 8024ac2:	dd07      	ble.n	8024ad4 <_dtoa_r+0x9ac>
 8024ac4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024ac8:	d0ed      	beq.n	8024aa6 <_dtoa_r+0x97e>
 8024aca:	f10a 0301 	add.w	r3, sl, #1
 8024ace:	f88b 3000 	strb.w	r3, [fp]
 8024ad2:	e602      	b.n	80246da <_dtoa_r+0x5b2>
 8024ad4:	9b05      	ldr	r3, [sp, #20]
 8024ad6:	9a05      	ldr	r2, [sp, #20]
 8024ad8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8024adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ade:	4293      	cmp	r3, r2
 8024ae0:	d029      	beq.n	8024b36 <_dtoa_r+0xa0e>
 8024ae2:	9901      	ldr	r1, [sp, #4]
 8024ae4:	2300      	movs	r3, #0
 8024ae6:	220a      	movs	r2, #10
 8024ae8:	4648      	mov	r0, r9
 8024aea:	f000 fbc3 	bl	8025274 <__multadd>
 8024aee:	45a8      	cmp	r8, r5
 8024af0:	9001      	str	r0, [sp, #4]
 8024af2:	f04f 0300 	mov.w	r3, #0
 8024af6:	f04f 020a 	mov.w	r2, #10
 8024afa:	4641      	mov	r1, r8
 8024afc:	4648      	mov	r0, r9
 8024afe:	d107      	bne.n	8024b10 <_dtoa_r+0x9e8>
 8024b00:	f000 fbb8 	bl	8025274 <__multadd>
 8024b04:	4680      	mov	r8, r0
 8024b06:	4605      	mov	r5, r0
 8024b08:	9b05      	ldr	r3, [sp, #20]
 8024b0a:	3301      	adds	r3, #1
 8024b0c:	9305      	str	r3, [sp, #20]
 8024b0e:	e775      	b.n	80249fc <_dtoa_r+0x8d4>
 8024b10:	f000 fbb0 	bl	8025274 <__multadd>
 8024b14:	4629      	mov	r1, r5
 8024b16:	4680      	mov	r8, r0
 8024b18:	2300      	movs	r3, #0
 8024b1a:	220a      	movs	r2, #10
 8024b1c:	4648      	mov	r0, r9
 8024b1e:	f000 fba9 	bl	8025274 <__multadd>
 8024b22:	4605      	mov	r5, r0
 8024b24:	e7f0      	b.n	8024b08 <_dtoa_r+0x9e0>
 8024b26:	f1bb 0f00 	cmp.w	fp, #0
 8024b2a:	bfcc      	ite	gt
 8024b2c:	465e      	movgt	r6, fp
 8024b2e:	2601      	movle	r6, #1
 8024b30:	443e      	add	r6, r7
 8024b32:	f04f 0800 	mov.w	r8, #0
 8024b36:	9901      	ldr	r1, [sp, #4]
 8024b38:	2201      	movs	r2, #1
 8024b3a:	4648      	mov	r0, r9
 8024b3c:	f000 fd46 	bl	80255cc <__lshift>
 8024b40:	4621      	mov	r1, r4
 8024b42:	9001      	str	r0, [sp, #4]
 8024b44:	f000 fdae 	bl	80256a4 <__mcmp>
 8024b48:	2800      	cmp	r0, #0
 8024b4a:	dcaf      	bgt.n	8024aac <_dtoa_r+0x984>
 8024b4c:	d102      	bne.n	8024b54 <_dtoa_r+0xa2c>
 8024b4e:	f01a 0f01 	tst.w	sl, #1
 8024b52:	d1ab      	bne.n	8024aac <_dtoa_r+0x984>
 8024b54:	4633      	mov	r3, r6
 8024b56:	461e      	mov	r6, r3
 8024b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024b5c:	2a30      	cmp	r2, #48	@ 0x30
 8024b5e:	d0fa      	beq.n	8024b56 <_dtoa_r+0xa2e>
 8024b60:	e5bb      	b.n	80246da <_dtoa_r+0x5b2>
 8024b62:	429f      	cmp	r7, r3
 8024b64:	d1a3      	bne.n	8024aae <_dtoa_r+0x986>
 8024b66:	9b04      	ldr	r3, [sp, #16]
 8024b68:	3301      	adds	r3, #1
 8024b6a:	9304      	str	r3, [sp, #16]
 8024b6c:	2331      	movs	r3, #49	@ 0x31
 8024b6e:	703b      	strb	r3, [r7, #0]
 8024b70:	e5b3      	b.n	80246da <_dtoa_r+0x5b2>
 8024b72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b74:	4f16      	ldr	r7, [pc, #88]	@ (8024bd0 <_dtoa_r+0xaa8>)
 8024b76:	b11b      	cbz	r3, 8024b80 <_dtoa_r+0xa58>
 8024b78:	f107 0308 	add.w	r3, r7, #8
 8024b7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024b7e:	6013      	str	r3, [r2, #0]
 8024b80:	4638      	mov	r0, r7
 8024b82:	b011      	add	sp, #68	@ 0x44
 8024b84:	ecbd 8b02 	vpop	{d8}
 8024b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b8c:	9b07      	ldr	r3, [sp, #28]
 8024b8e:	2b01      	cmp	r3, #1
 8024b90:	f77f ae36 	ble.w	8024800 <_dtoa_r+0x6d8>
 8024b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b98:	2001      	movs	r0, #1
 8024b9a:	e656      	b.n	802484a <_dtoa_r+0x722>
 8024b9c:	f1bb 0f00 	cmp.w	fp, #0
 8024ba0:	f77f aed7 	ble.w	8024952 <_dtoa_r+0x82a>
 8024ba4:	463e      	mov	r6, r7
 8024ba6:	9801      	ldr	r0, [sp, #4]
 8024ba8:	4621      	mov	r1, r4
 8024baa:	f7ff fa33 	bl	8024014 <quorem>
 8024bae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8024bb2:	f806 ab01 	strb.w	sl, [r6], #1
 8024bb6:	1bf2      	subs	r2, r6, r7
 8024bb8:	4593      	cmp	fp, r2
 8024bba:	ddb4      	ble.n	8024b26 <_dtoa_r+0x9fe>
 8024bbc:	9901      	ldr	r1, [sp, #4]
 8024bbe:	2300      	movs	r3, #0
 8024bc0:	220a      	movs	r2, #10
 8024bc2:	4648      	mov	r0, r9
 8024bc4:	f000 fb56 	bl	8025274 <__multadd>
 8024bc8:	9001      	str	r0, [sp, #4]
 8024bca:	e7ec      	b.n	8024ba6 <_dtoa_r+0xa7e>
 8024bcc:	08027274 	.word	0x08027274
 8024bd0:	080271f8 	.word	0x080271f8

08024bd4 <_free_r>:
 8024bd4:	b538      	push	{r3, r4, r5, lr}
 8024bd6:	4605      	mov	r5, r0
 8024bd8:	2900      	cmp	r1, #0
 8024bda:	d041      	beq.n	8024c60 <_free_r+0x8c>
 8024bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024be0:	1f0c      	subs	r4, r1, #4
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	bfb8      	it	lt
 8024be6:	18e4      	addlt	r4, r4, r3
 8024be8:	f000 fad6 	bl	8025198 <__malloc_lock>
 8024bec:	4a1d      	ldr	r2, [pc, #116]	@ (8024c64 <_free_r+0x90>)
 8024bee:	6813      	ldr	r3, [r2, #0]
 8024bf0:	b933      	cbnz	r3, 8024c00 <_free_r+0x2c>
 8024bf2:	6063      	str	r3, [r4, #4]
 8024bf4:	6014      	str	r4, [r2, #0]
 8024bf6:	4628      	mov	r0, r5
 8024bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024bfc:	f000 bad2 	b.w	80251a4 <__malloc_unlock>
 8024c00:	42a3      	cmp	r3, r4
 8024c02:	d908      	bls.n	8024c16 <_free_r+0x42>
 8024c04:	6820      	ldr	r0, [r4, #0]
 8024c06:	1821      	adds	r1, r4, r0
 8024c08:	428b      	cmp	r3, r1
 8024c0a:	bf01      	itttt	eq
 8024c0c:	6819      	ldreq	r1, [r3, #0]
 8024c0e:	685b      	ldreq	r3, [r3, #4]
 8024c10:	1809      	addeq	r1, r1, r0
 8024c12:	6021      	streq	r1, [r4, #0]
 8024c14:	e7ed      	b.n	8024bf2 <_free_r+0x1e>
 8024c16:	461a      	mov	r2, r3
 8024c18:	685b      	ldr	r3, [r3, #4]
 8024c1a:	b10b      	cbz	r3, 8024c20 <_free_r+0x4c>
 8024c1c:	42a3      	cmp	r3, r4
 8024c1e:	d9fa      	bls.n	8024c16 <_free_r+0x42>
 8024c20:	6811      	ldr	r1, [r2, #0]
 8024c22:	1850      	adds	r0, r2, r1
 8024c24:	42a0      	cmp	r0, r4
 8024c26:	d10b      	bne.n	8024c40 <_free_r+0x6c>
 8024c28:	6820      	ldr	r0, [r4, #0]
 8024c2a:	4401      	add	r1, r0
 8024c2c:	1850      	adds	r0, r2, r1
 8024c2e:	4283      	cmp	r3, r0
 8024c30:	6011      	str	r1, [r2, #0]
 8024c32:	d1e0      	bne.n	8024bf6 <_free_r+0x22>
 8024c34:	6818      	ldr	r0, [r3, #0]
 8024c36:	685b      	ldr	r3, [r3, #4]
 8024c38:	6053      	str	r3, [r2, #4]
 8024c3a:	4408      	add	r0, r1
 8024c3c:	6010      	str	r0, [r2, #0]
 8024c3e:	e7da      	b.n	8024bf6 <_free_r+0x22>
 8024c40:	d902      	bls.n	8024c48 <_free_r+0x74>
 8024c42:	230c      	movs	r3, #12
 8024c44:	602b      	str	r3, [r5, #0]
 8024c46:	e7d6      	b.n	8024bf6 <_free_r+0x22>
 8024c48:	6820      	ldr	r0, [r4, #0]
 8024c4a:	1821      	adds	r1, r4, r0
 8024c4c:	428b      	cmp	r3, r1
 8024c4e:	bf04      	itt	eq
 8024c50:	6819      	ldreq	r1, [r3, #0]
 8024c52:	685b      	ldreq	r3, [r3, #4]
 8024c54:	6063      	str	r3, [r4, #4]
 8024c56:	bf04      	itt	eq
 8024c58:	1809      	addeq	r1, r1, r0
 8024c5a:	6021      	streq	r1, [r4, #0]
 8024c5c:	6054      	str	r4, [r2, #4]
 8024c5e:	e7ca      	b.n	8024bf6 <_free_r+0x22>
 8024c60:	bd38      	pop	{r3, r4, r5, pc}
 8024c62:	bf00      	nop
 8024c64:	24023150 	.word	0x24023150

08024c68 <__sfputc_r>:
 8024c68:	6893      	ldr	r3, [r2, #8]
 8024c6a:	3b01      	subs	r3, #1
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	b410      	push	{r4}
 8024c70:	6093      	str	r3, [r2, #8]
 8024c72:	da08      	bge.n	8024c86 <__sfputc_r+0x1e>
 8024c74:	6994      	ldr	r4, [r2, #24]
 8024c76:	42a3      	cmp	r3, r4
 8024c78:	db01      	blt.n	8024c7e <__sfputc_r+0x16>
 8024c7a:	290a      	cmp	r1, #10
 8024c7c:	d103      	bne.n	8024c86 <__sfputc_r+0x1e>
 8024c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024c82:	f000 be5a 	b.w	802593a <__swbuf_r>
 8024c86:	6813      	ldr	r3, [r2, #0]
 8024c88:	1c58      	adds	r0, r3, #1
 8024c8a:	6010      	str	r0, [r2, #0]
 8024c8c:	7019      	strb	r1, [r3, #0]
 8024c8e:	4608      	mov	r0, r1
 8024c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024c94:	4770      	bx	lr

08024c96 <__sfputs_r>:
 8024c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c98:	4606      	mov	r6, r0
 8024c9a:	460f      	mov	r7, r1
 8024c9c:	4614      	mov	r4, r2
 8024c9e:	18d5      	adds	r5, r2, r3
 8024ca0:	42ac      	cmp	r4, r5
 8024ca2:	d101      	bne.n	8024ca8 <__sfputs_r+0x12>
 8024ca4:	2000      	movs	r0, #0
 8024ca6:	e007      	b.n	8024cb8 <__sfputs_r+0x22>
 8024ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024cac:	463a      	mov	r2, r7
 8024cae:	4630      	mov	r0, r6
 8024cb0:	f7ff ffda 	bl	8024c68 <__sfputc_r>
 8024cb4:	1c43      	adds	r3, r0, #1
 8024cb6:	d1f3      	bne.n	8024ca0 <__sfputs_r+0xa>
 8024cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024cbc <_vfiprintf_r>:
 8024cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc0:	460d      	mov	r5, r1
 8024cc2:	b09d      	sub	sp, #116	@ 0x74
 8024cc4:	4614      	mov	r4, r2
 8024cc6:	4698      	mov	r8, r3
 8024cc8:	4606      	mov	r6, r0
 8024cca:	b118      	cbz	r0, 8024cd4 <_vfiprintf_r+0x18>
 8024ccc:	6a03      	ldr	r3, [r0, #32]
 8024cce:	b90b      	cbnz	r3, 8024cd4 <_vfiprintf_r+0x18>
 8024cd0:	f7ff f886 	bl	8023de0 <__sinit>
 8024cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024cd6:	07d9      	lsls	r1, r3, #31
 8024cd8:	d405      	bmi.n	8024ce6 <_vfiprintf_r+0x2a>
 8024cda:	89ab      	ldrh	r3, [r5, #12]
 8024cdc:	059a      	lsls	r2, r3, #22
 8024cde:	d402      	bmi.n	8024ce6 <_vfiprintf_r+0x2a>
 8024ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024ce2:	f7ff f980 	bl	8023fe6 <__retarget_lock_acquire_recursive>
 8024ce6:	89ab      	ldrh	r3, [r5, #12]
 8024ce8:	071b      	lsls	r3, r3, #28
 8024cea:	d501      	bpl.n	8024cf0 <_vfiprintf_r+0x34>
 8024cec:	692b      	ldr	r3, [r5, #16]
 8024cee:	b99b      	cbnz	r3, 8024d18 <_vfiprintf_r+0x5c>
 8024cf0:	4629      	mov	r1, r5
 8024cf2:	4630      	mov	r0, r6
 8024cf4:	f000 fe60 	bl	80259b8 <__swsetup_r>
 8024cf8:	b170      	cbz	r0, 8024d18 <_vfiprintf_r+0x5c>
 8024cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024cfc:	07dc      	lsls	r4, r3, #31
 8024cfe:	d504      	bpl.n	8024d0a <_vfiprintf_r+0x4e>
 8024d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d04:	b01d      	add	sp, #116	@ 0x74
 8024d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d0a:	89ab      	ldrh	r3, [r5, #12]
 8024d0c:	0598      	lsls	r0, r3, #22
 8024d0e:	d4f7      	bmi.n	8024d00 <_vfiprintf_r+0x44>
 8024d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024d12:	f7ff f969 	bl	8023fe8 <__retarget_lock_release_recursive>
 8024d16:	e7f3      	b.n	8024d00 <_vfiprintf_r+0x44>
 8024d18:	2300      	movs	r3, #0
 8024d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d1c:	2320      	movs	r3, #32
 8024d1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8024d26:	2330      	movs	r3, #48	@ 0x30
 8024d28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024ed8 <_vfiprintf_r+0x21c>
 8024d2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024d30:	f04f 0901 	mov.w	r9, #1
 8024d34:	4623      	mov	r3, r4
 8024d36:	469a      	mov	sl, r3
 8024d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024d3c:	b10a      	cbz	r2, 8024d42 <_vfiprintf_r+0x86>
 8024d3e:	2a25      	cmp	r2, #37	@ 0x25
 8024d40:	d1f9      	bne.n	8024d36 <_vfiprintf_r+0x7a>
 8024d42:	ebba 0b04 	subs.w	fp, sl, r4
 8024d46:	d00b      	beq.n	8024d60 <_vfiprintf_r+0xa4>
 8024d48:	465b      	mov	r3, fp
 8024d4a:	4622      	mov	r2, r4
 8024d4c:	4629      	mov	r1, r5
 8024d4e:	4630      	mov	r0, r6
 8024d50:	f7ff ffa1 	bl	8024c96 <__sfputs_r>
 8024d54:	3001      	adds	r0, #1
 8024d56:	f000 80a7 	beq.w	8024ea8 <_vfiprintf_r+0x1ec>
 8024d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024d5c:	445a      	add	r2, fp
 8024d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024d60:	f89a 3000 	ldrb.w	r3, [sl]
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	f000 809f 	beq.w	8024ea8 <_vfiprintf_r+0x1ec>
 8024d6a:	2300      	movs	r3, #0
 8024d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024d74:	f10a 0a01 	add.w	sl, sl, #1
 8024d78:	9304      	str	r3, [sp, #16]
 8024d7a:	9307      	str	r3, [sp, #28]
 8024d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8024d82:	4654      	mov	r4, sl
 8024d84:	2205      	movs	r2, #5
 8024d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d8a:	4853      	ldr	r0, [pc, #332]	@ (8024ed8 <_vfiprintf_r+0x21c>)
 8024d8c:	f7db faa8 	bl	80002e0 <memchr>
 8024d90:	9a04      	ldr	r2, [sp, #16]
 8024d92:	b9d8      	cbnz	r0, 8024dcc <_vfiprintf_r+0x110>
 8024d94:	06d1      	lsls	r1, r2, #27
 8024d96:	bf44      	itt	mi
 8024d98:	2320      	movmi	r3, #32
 8024d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024d9e:	0713      	lsls	r3, r2, #28
 8024da0:	bf44      	itt	mi
 8024da2:	232b      	movmi	r3, #43	@ 0x2b
 8024da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024da8:	f89a 3000 	ldrb.w	r3, [sl]
 8024dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8024dae:	d015      	beq.n	8024ddc <_vfiprintf_r+0x120>
 8024db0:	9a07      	ldr	r2, [sp, #28]
 8024db2:	4654      	mov	r4, sl
 8024db4:	2000      	movs	r0, #0
 8024db6:	f04f 0c0a 	mov.w	ip, #10
 8024dba:	4621      	mov	r1, r4
 8024dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024dc0:	3b30      	subs	r3, #48	@ 0x30
 8024dc2:	2b09      	cmp	r3, #9
 8024dc4:	d94b      	bls.n	8024e5e <_vfiprintf_r+0x1a2>
 8024dc6:	b1b0      	cbz	r0, 8024df6 <_vfiprintf_r+0x13a>
 8024dc8:	9207      	str	r2, [sp, #28]
 8024dca:	e014      	b.n	8024df6 <_vfiprintf_r+0x13a>
 8024dcc:	eba0 0308 	sub.w	r3, r0, r8
 8024dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8024dd4:	4313      	orrs	r3, r2
 8024dd6:	9304      	str	r3, [sp, #16]
 8024dd8:	46a2      	mov	sl, r4
 8024dda:	e7d2      	b.n	8024d82 <_vfiprintf_r+0xc6>
 8024ddc:	9b03      	ldr	r3, [sp, #12]
 8024dde:	1d19      	adds	r1, r3, #4
 8024de0:	681b      	ldr	r3, [r3, #0]
 8024de2:	9103      	str	r1, [sp, #12]
 8024de4:	2b00      	cmp	r3, #0
 8024de6:	bfbb      	ittet	lt
 8024de8:	425b      	neglt	r3, r3
 8024dea:	f042 0202 	orrlt.w	r2, r2, #2
 8024dee:	9307      	strge	r3, [sp, #28]
 8024df0:	9307      	strlt	r3, [sp, #28]
 8024df2:	bfb8      	it	lt
 8024df4:	9204      	strlt	r2, [sp, #16]
 8024df6:	7823      	ldrb	r3, [r4, #0]
 8024df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8024dfa:	d10a      	bne.n	8024e12 <_vfiprintf_r+0x156>
 8024dfc:	7863      	ldrb	r3, [r4, #1]
 8024dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8024e00:	d132      	bne.n	8024e68 <_vfiprintf_r+0x1ac>
 8024e02:	9b03      	ldr	r3, [sp, #12]
 8024e04:	1d1a      	adds	r2, r3, #4
 8024e06:	681b      	ldr	r3, [r3, #0]
 8024e08:	9203      	str	r2, [sp, #12]
 8024e0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024e0e:	3402      	adds	r4, #2
 8024e10:	9305      	str	r3, [sp, #20]
 8024e12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024ee8 <_vfiprintf_r+0x22c>
 8024e16:	7821      	ldrb	r1, [r4, #0]
 8024e18:	2203      	movs	r2, #3
 8024e1a:	4650      	mov	r0, sl
 8024e1c:	f7db fa60 	bl	80002e0 <memchr>
 8024e20:	b138      	cbz	r0, 8024e32 <_vfiprintf_r+0x176>
 8024e22:	9b04      	ldr	r3, [sp, #16]
 8024e24:	eba0 000a 	sub.w	r0, r0, sl
 8024e28:	2240      	movs	r2, #64	@ 0x40
 8024e2a:	4082      	lsls	r2, r0
 8024e2c:	4313      	orrs	r3, r2
 8024e2e:	3401      	adds	r4, #1
 8024e30:	9304      	str	r3, [sp, #16]
 8024e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024e36:	4829      	ldr	r0, [pc, #164]	@ (8024edc <_vfiprintf_r+0x220>)
 8024e38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024e3c:	2206      	movs	r2, #6
 8024e3e:	f7db fa4f 	bl	80002e0 <memchr>
 8024e42:	2800      	cmp	r0, #0
 8024e44:	d03f      	beq.n	8024ec6 <_vfiprintf_r+0x20a>
 8024e46:	4b26      	ldr	r3, [pc, #152]	@ (8024ee0 <_vfiprintf_r+0x224>)
 8024e48:	bb1b      	cbnz	r3, 8024e92 <_vfiprintf_r+0x1d6>
 8024e4a:	9b03      	ldr	r3, [sp, #12]
 8024e4c:	3307      	adds	r3, #7
 8024e4e:	f023 0307 	bic.w	r3, r3, #7
 8024e52:	3308      	adds	r3, #8
 8024e54:	9303      	str	r3, [sp, #12]
 8024e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e58:	443b      	add	r3, r7
 8024e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e5c:	e76a      	b.n	8024d34 <_vfiprintf_r+0x78>
 8024e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024e62:	460c      	mov	r4, r1
 8024e64:	2001      	movs	r0, #1
 8024e66:	e7a8      	b.n	8024dba <_vfiprintf_r+0xfe>
 8024e68:	2300      	movs	r3, #0
 8024e6a:	3401      	adds	r4, #1
 8024e6c:	9305      	str	r3, [sp, #20]
 8024e6e:	4619      	mov	r1, r3
 8024e70:	f04f 0c0a 	mov.w	ip, #10
 8024e74:	4620      	mov	r0, r4
 8024e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024e7a:	3a30      	subs	r2, #48	@ 0x30
 8024e7c:	2a09      	cmp	r2, #9
 8024e7e:	d903      	bls.n	8024e88 <_vfiprintf_r+0x1cc>
 8024e80:	2b00      	cmp	r3, #0
 8024e82:	d0c6      	beq.n	8024e12 <_vfiprintf_r+0x156>
 8024e84:	9105      	str	r1, [sp, #20]
 8024e86:	e7c4      	b.n	8024e12 <_vfiprintf_r+0x156>
 8024e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8024e8c:	4604      	mov	r4, r0
 8024e8e:	2301      	movs	r3, #1
 8024e90:	e7f0      	b.n	8024e74 <_vfiprintf_r+0x1b8>
 8024e92:	ab03      	add	r3, sp, #12
 8024e94:	9300      	str	r3, [sp, #0]
 8024e96:	462a      	mov	r2, r5
 8024e98:	4b12      	ldr	r3, [pc, #72]	@ (8024ee4 <_vfiprintf_r+0x228>)
 8024e9a:	a904      	add	r1, sp, #16
 8024e9c:	4630      	mov	r0, r6
 8024e9e:	f7fe fb6b 	bl	8023578 <_printf_float>
 8024ea2:	4607      	mov	r7, r0
 8024ea4:	1c78      	adds	r0, r7, #1
 8024ea6:	d1d6      	bne.n	8024e56 <_vfiprintf_r+0x19a>
 8024ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024eaa:	07d9      	lsls	r1, r3, #31
 8024eac:	d405      	bmi.n	8024eba <_vfiprintf_r+0x1fe>
 8024eae:	89ab      	ldrh	r3, [r5, #12]
 8024eb0:	059a      	lsls	r2, r3, #22
 8024eb2:	d402      	bmi.n	8024eba <_vfiprintf_r+0x1fe>
 8024eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024eb6:	f7ff f897 	bl	8023fe8 <__retarget_lock_release_recursive>
 8024eba:	89ab      	ldrh	r3, [r5, #12]
 8024ebc:	065b      	lsls	r3, r3, #25
 8024ebe:	f53f af1f 	bmi.w	8024d00 <_vfiprintf_r+0x44>
 8024ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ec4:	e71e      	b.n	8024d04 <_vfiprintf_r+0x48>
 8024ec6:	ab03      	add	r3, sp, #12
 8024ec8:	9300      	str	r3, [sp, #0]
 8024eca:	462a      	mov	r2, r5
 8024ecc:	4b05      	ldr	r3, [pc, #20]	@ (8024ee4 <_vfiprintf_r+0x228>)
 8024ece:	a904      	add	r1, sp, #16
 8024ed0:	4630      	mov	r0, r6
 8024ed2:	f7fe fdd9 	bl	8023a88 <_printf_i>
 8024ed6:	e7e4      	b.n	8024ea2 <_vfiprintf_r+0x1e6>
 8024ed8:	08027285 	.word	0x08027285
 8024edc:	0802728f 	.word	0x0802728f
 8024ee0:	08023579 	.word	0x08023579
 8024ee4:	08024c97 	.word	0x08024c97
 8024ee8:	0802728b 	.word	0x0802728b

08024eec <malloc>:
 8024eec:	4b02      	ldr	r3, [pc, #8]	@ (8024ef8 <malloc+0xc>)
 8024eee:	4601      	mov	r1, r0
 8024ef0:	6818      	ldr	r0, [r3, #0]
 8024ef2:	f000 b825 	b.w	8024f40 <_malloc_r>
 8024ef6:	bf00      	nop
 8024ef8:	2400004c 	.word	0x2400004c

08024efc <sbrk_aligned>:
 8024efc:	b570      	push	{r4, r5, r6, lr}
 8024efe:	4e0f      	ldr	r6, [pc, #60]	@ (8024f3c <sbrk_aligned+0x40>)
 8024f00:	460c      	mov	r4, r1
 8024f02:	6831      	ldr	r1, [r6, #0]
 8024f04:	4605      	mov	r5, r0
 8024f06:	b911      	cbnz	r1, 8024f0e <sbrk_aligned+0x12>
 8024f08:	f000 fea8 	bl	8025c5c <_sbrk_r>
 8024f0c:	6030      	str	r0, [r6, #0]
 8024f0e:	4621      	mov	r1, r4
 8024f10:	4628      	mov	r0, r5
 8024f12:	f000 fea3 	bl	8025c5c <_sbrk_r>
 8024f16:	1c43      	adds	r3, r0, #1
 8024f18:	d103      	bne.n	8024f22 <sbrk_aligned+0x26>
 8024f1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8024f1e:	4620      	mov	r0, r4
 8024f20:	bd70      	pop	{r4, r5, r6, pc}
 8024f22:	1cc4      	adds	r4, r0, #3
 8024f24:	f024 0403 	bic.w	r4, r4, #3
 8024f28:	42a0      	cmp	r0, r4
 8024f2a:	d0f8      	beq.n	8024f1e <sbrk_aligned+0x22>
 8024f2c:	1a21      	subs	r1, r4, r0
 8024f2e:	4628      	mov	r0, r5
 8024f30:	f000 fe94 	bl	8025c5c <_sbrk_r>
 8024f34:	3001      	adds	r0, #1
 8024f36:	d1f2      	bne.n	8024f1e <sbrk_aligned+0x22>
 8024f38:	e7ef      	b.n	8024f1a <sbrk_aligned+0x1e>
 8024f3a:	bf00      	nop
 8024f3c:	2402314c 	.word	0x2402314c

08024f40 <_malloc_r>:
 8024f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024f44:	1ccd      	adds	r5, r1, #3
 8024f46:	f025 0503 	bic.w	r5, r5, #3
 8024f4a:	3508      	adds	r5, #8
 8024f4c:	2d0c      	cmp	r5, #12
 8024f4e:	bf38      	it	cc
 8024f50:	250c      	movcc	r5, #12
 8024f52:	2d00      	cmp	r5, #0
 8024f54:	4606      	mov	r6, r0
 8024f56:	db01      	blt.n	8024f5c <_malloc_r+0x1c>
 8024f58:	42a9      	cmp	r1, r5
 8024f5a:	d904      	bls.n	8024f66 <_malloc_r+0x26>
 8024f5c:	230c      	movs	r3, #12
 8024f5e:	6033      	str	r3, [r6, #0]
 8024f60:	2000      	movs	r0, #0
 8024f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802503c <_malloc_r+0xfc>
 8024f6a:	f000 f915 	bl	8025198 <__malloc_lock>
 8024f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8024f72:	461c      	mov	r4, r3
 8024f74:	bb44      	cbnz	r4, 8024fc8 <_malloc_r+0x88>
 8024f76:	4629      	mov	r1, r5
 8024f78:	4630      	mov	r0, r6
 8024f7a:	f7ff ffbf 	bl	8024efc <sbrk_aligned>
 8024f7e:	1c43      	adds	r3, r0, #1
 8024f80:	4604      	mov	r4, r0
 8024f82:	d158      	bne.n	8025036 <_malloc_r+0xf6>
 8024f84:	f8d8 4000 	ldr.w	r4, [r8]
 8024f88:	4627      	mov	r7, r4
 8024f8a:	2f00      	cmp	r7, #0
 8024f8c:	d143      	bne.n	8025016 <_malloc_r+0xd6>
 8024f8e:	2c00      	cmp	r4, #0
 8024f90:	d04b      	beq.n	802502a <_malloc_r+0xea>
 8024f92:	6823      	ldr	r3, [r4, #0]
 8024f94:	4639      	mov	r1, r7
 8024f96:	4630      	mov	r0, r6
 8024f98:	eb04 0903 	add.w	r9, r4, r3
 8024f9c:	f000 fe5e 	bl	8025c5c <_sbrk_r>
 8024fa0:	4581      	cmp	r9, r0
 8024fa2:	d142      	bne.n	802502a <_malloc_r+0xea>
 8024fa4:	6821      	ldr	r1, [r4, #0]
 8024fa6:	1a6d      	subs	r5, r5, r1
 8024fa8:	4629      	mov	r1, r5
 8024faa:	4630      	mov	r0, r6
 8024fac:	f7ff ffa6 	bl	8024efc <sbrk_aligned>
 8024fb0:	3001      	adds	r0, #1
 8024fb2:	d03a      	beq.n	802502a <_malloc_r+0xea>
 8024fb4:	6823      	ldr	r3, [r4, #0]
 8024fb6:	442b      	add	r3, r5
 8024fb8:	6023      	str	r3, [r4, #0]
 8024fba:	f8d8 3000 	ldr.w	r3, [r8]
 8024fbe:	685a      	ldr	r2, [r3, #4]
 8024fc0:	bb62      	cbnz	r2, 802501c <_malloc_r+0xdc>
 8024fc2:	f8c8 7000 	str.w	r7, [r8]
 8024fc6:	e00f      	b.n	8024fe8 <_malloc_r+0xa8>
 8024fc8:	6822      	ldr	r2, [r4, #0]
 8024fca:	1b52      	subs	r2, r2, r5
 8024fcc:	d420      	bmi.n	8025010 <_malloc_r+0xd0>
 8024fce:	2a0b      	cmp	r2, #11
 8024fd0:	d917      	bls.n	8025002 <_malloc_r+0xc2>
 8024fd2:	1961      	adds	r1, r4, r5
 8024fd4:	42a3      	cmp	r3, r4
 8024fd6:	6025      	str	r5, [r4, #0]
 8024fd8:	bf18      	it	ne
 8024fda:	6059      	strne	r1, [r3, #4]
 8024fdc:	6863      	ldr	r3, [r4, #4]
 8024fde:	bf08      	it	eq
 8024fe0:	f8c8 1000 	streq.w	r1, [r8]
 8024fe4:	5162      	str	r2, [r4, r5]
 8024fe6:	604b      	str	r3, [r1, #4]
 8024fe8:	4630      	mov	r0, r6
 8024fea:	f000 f8db 	bl	80251a4 <__malloc_unlock>
 8024fee:	f104 000b 	add.w	r0, r4, #11
 8024ff2:	1d23      	adds	r3, r4, #4
 8024ff4:	f020 0007 	bic.w	r0, r0, #7
 8024ff8:	1ac2      	subs	r2, r0, r3
 8024ffa:	bf1c      	itt	ne
 8024ffc:	1a1b      	subne	r3, r3, r0
 8024ffe:	50a3      	strne	r3, [r4, r2]
 8025000:	e7af      	b.n	8024f62 <_malloc_r+0x22>
 8025002:	6862      	ldr	r2, [r4, #4]
 8025004:	42a3      	cmp	r3, r4
 8025006:	bf0c      	ite	eq
 8025008:	f8c8 2000 	streq.w	r2, [r8]
 802500c:	605a      	strne	r2, [r3, #4]
 802500e:	e7eb      	b.n	8024fe8 <_malloc_r+0xa8>
 8025010:	4623      	mov	r3, r4
 8025012:	6864      	ldr	r4, [r4, #4]
 8025014:	e7ae      	b.n	8024f74 <_malloc_r+0x34>
 8025016:	463c      	mov	r4, r7
 8025018:	687f      	ldr	r7, [r7, #4]
 802501a:	e7b6      	b.n	8024f8a <_malloc_r+0x4a>
 802501c:	461a      	mov	r2, r3
 802501e:	685b      	ldr	r3, [r3, #4]
 8025020:	42a3      	cmp	r3, r4
 8025022:	d1fb      	bne.n	802501c <_malloc_r+0xdc>
 8025024:	2300      	movs	r3, #0
 8025026:	6053      	str	r3, [r2, #4]
 8025028:	e7de      	b.n	8024fe8 <_malloc_r+0xa8>
 802502a:	230c      	movs	r3, #12
 802502c:	6033      	str	r3, [r6, #0]
 802502e:	4630      	mov	r0, r6
 8025030:	f000 f8b8 	bl	80251a4 <__malloc_unlock>
 8025034:	e794      	b.n	8024f60 <_malloc_r+0x20>
 8025036:	6005      	str	r5, [r0, #0]
 8025038:	e7d6      	b.n	8024fe8 <_malloc_r+0xa8>
 802503a:	bf00      	nop
 802503c:	24023150 	.word	0x24023150

08025040 <__sflush_r>:
 8025040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025048:	0716      	lsls	r6, r2, #28
 802504a:	4605      	mov	r5, r0
 802504c:	460c      	mov	r4, r1
 802504e:	d454      	bmi.n	80250fa <__sflush_r+0xba>
 8025050:	684b      	ldr	r3, [r1, #4]
 8025052:	2b00      	cmp	r3, #0
 8025054:	dc02      	bgt.n	802505c <__sflush_r+0x1c>
 8025056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025058:	2b00      	cmp	r3, #0
 802505a:	dd48      	ble.n	80250ee <__sflush_r+0xae>
 802505c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802505e:	2e00      	cmp	r6, #0
 8025060:	d045      	beq.n	80250ee <__sflush_r+0xae>
 8025062:	2300      	movs	r3, #0
 8025064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025068:	682f      	ldr	r7, [r5, #0]
 802506a:	6a21      	ldr	r1, [r4, #32]
 802506c:	602b      	str	r3, [r5, #0]
 802506e:	d030      	beq.n	80250d2 <__sflush_r+0x92>
 8025070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025072:	89a3      	ldrh	r3, [r4, #12]
 8025074:	0759      	lsls	r1, r3, #29
 8025076:	d505      	bpl.n	8025084 <__sflush_r+0x44>
 8025078:	6863      	ldr	r3, [r4, #4]
 802507a:	1ad2      	subs	r2, r2, r3
 802507c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802507e:	b10b      	cbz	r3, 8025084 <__sflush_r+0x44>
 8025080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025082:	1ad2      	subs	r2, r2, r3
 8025084:	2300      	movs	r3, #0
 8025086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025088:	6a21      	ldr	r1, [r4, #32]
 802508a:	4628      	mov	r0, r5
 802508c:	47b0      	blx	r6
 802508e:	1c43      	adds	r3, r0, #1
 8025090:	89a3      	ldrh	r3, [r4, #12]
 8025092:	d106      	bne.n	80250a2 <__sflush_r+0x62>
 8025094:	6829      	ldr	r1, [r5, #0]
 8025096:	291d      	cmp	r1, #29
 8025098:	d82b      	bhi.n	80250f2 <__sflush_r+0xb2>
 802509a:	4a2a      	ldr	r2, [pc, #168]	@ (8025144 <__sflush_r+0x104>)
 802509c:	410a      	asrs	r2, r1
 802509e:	07d6      	lsls	r6, r2, #31
 80250a0:	d427      	bmi.n	80250f2 <__sflush_r+0xb2>
 80250a2:	2200      	movs	r2, #0
 80250a4:	6062      	str	r2, [r4, #4]
 80250a6:	04d9      	lsls	r1, r3, #19
 80250a8:	6922      	ldr	r2, [r4, #16]
 80250aa:	6022      	str	r2, [r4, #0]
 80250ac:	d504      	bpl.n	80250b8 <__sflush_r+0x78>
 80250ae:	1c42      	adds	r2, r0, #1
 80250b0:	d101      	bne.n	80250b6 <__sflush_r+0x76>
 80250b2:	682b      	ldr	r3, [r5, #0]
 80250b4:	b903      	cbnz	r3, 80250b8 <__sflush_r+0x78>
 80250b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80250b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80250ba:	602f      	str	r7, [r5, #0]
 80250bc:	b1b9      	cbz	r1, 80250ee <__sflush_r+0xae>
 80250be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80250c2:	4299      	cmp	r1, r3
 80250c4:	d002      	beq.n	80250cc <__sflush_r+0x8c>
 80250c6:	4628      	mov	r0, r5
 80250c8:	f7ff fd84 	bl	8024bd4 <_free_r>
 80250cc:	2300      	movs	r3, #0
 80250ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80250d0:	e00d      	b.n	80250ee <__sflush_r+0xae>
 80250d2:	2301      	movs	r3, #1
 80250d4:	4628      	mov	r0, r5
 80250d6:	47b0      	blx	r6
 80250d8:	4602      	mov	r2, r0
 80250da:	1c50      	adds	r0, r2, #1
 80250dc:	d1c9      	bne.n	8025072 <__sflush_r+0x32>
 80250de:	682b      	ldr	r3, [r5, #0]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d0c6      	beq.n	8025072 <__sflush_r+0x32>
 80250e4:	2b1d      	cmp	r3, #29
 80250e6:	d001      	beq.n	80250ec <__sflush_r+0xac>
 80250e8:	2b16      	cmp	r3, #22
 80250ea:	d11e      	bne.n	802512a <__sflush_r+0xea>
 80250ec:	602f      	str	r7, [r5, #0]
 80250ee:	2000      	movs	r0, #0
 80250f0:	e022      	b.n	8025138 <__sflush_r+0xf8>
 80250f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80250f6:	b21b      	sxth	r3, r3
 80250f8:	e01b      	b.n	8025132 <__sflush_r+0xf2>
 80250fa:	690f      	ldr	r7, [r1, #16]
 80250fc:	2f00      	cmp	r7, #0
 80250fe:	d0f6      	beq.n	80250ee <__sflush_r+0xae>
 8025100:	0793      	lsls	r3, r2, #30
 8025102:	680e      	ldr	r6, [r1, #0]
 8025104:	bf08      	it	eq
 8025106:	694b      	ldreq	r3, [r1, #20]
 8025108:	600f      	str	r7, [r1, #0]
 802510a:	bf18      	it	ne
 802510c:	2300      	movne	r3, #0
 802510e:	eba6 0807 	sub.w	r8, r6, r7
 8025112:	608b      	str	r3, [r1, #8]
 8025114:	f1b8 0f00 	cmp.w	r8, #0
 8025118:	dde9      	ble.n	80250ee <__sflush_r+0xae>
 802511a:	6a21      	ldr	r1, [r4, #32]
 802511c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802511e:	4643      	mov	r3, r8
 8025120:	463a      	mov	r2, r7
 8025122:	4628      	mov	r0, r5
 8025124:	47b0      	blx	r6
 8025126:	2800      	cmp	r0, #0
 8025128:	dc08      	bgt.n	802513c <__sflush_r+0xfc>
 802512a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802512e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025132:	81a3      	strh	r3, [r4, #12]
 8025134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802513c:	4407      	add	r7, r0
 802513e:	eba8 0800 	sub.w	r8, r8, r0
 8025142:	e7e7      	b.n	8025114 <__sflush_r+0xd4>
 8025144:	dfbffffe 	.word	0xdfbffffe

08025148 <_fflush_r>:
 8025148:	b538      	push	{r3, r4, r5, lr}
 802514a:	690b      	ldr	r3, [r1, #16]
 802514c:	4605      	mov	r5, r0
 802514e:	460c      	mov	r4, r1
 8025150:	b913      	cbnz	r3, 8025158 <_fflush_r+0x10>
 8025152:	2500      	movs	r5, #0
 8025154:	4628      	mov	r0, r5
 8025156:	bd38      	pop	{r3, r4, r5, pc}
 8025158:	b118      	cbz	r0, 8025162 <_fflush_r+0x1a>
 802515a:	6a03      	ldr	r3, [r0, #32]
 802515c:	b90b      	cbnz	r3, 8025162 <_fflush_r+0x1a>
 802515e:	f7fe fe3f 	bl	8023de0 <__sinit>
 8025162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025166:	2b00      	cmp	r3, #0
 8025168:	d0f3      	beq.n	8025152 <_fflush_r+0xa>
 802516a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802516c:	07d0      	lsls	r0, r2, #31
 802516e:	d404      	bmi.n	802517a <_fflush_r+0x32>
 8025170:	0599      	lsls	r1, r3, #22
 8025172:	d402      	bmi.n	802517a <_fflush_r+0x32>
 8025174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025176:	f7fe ff36 	bl	8023fe6 <__retarget_lock_acquire_recursive>
 802517a:	4628      	mov	r0, r5
 802517c:	4621      	mov	r1, r4
 802517e:	f7ff ff5f 	bl	8025040 <__sflush_r>
 8025182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025184:	07da      	lsls	r2, r3, #31
 8025186:	4605      	mov	r5, r0
 8025188:	d4e4      	bmi.n	8025154 <_fflush_r+0xc>
 802518a:	89a3      	ldrh	r3, [r4, #12]
 802518c:	059b      	lsls	r3, r3, #22
 802518e:	d4e1      	bmi.n	8025154 <_fflush_r+0xc>
 8025190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025192:	f7fe ff29 	bl	8023fe8 <__retarget_lock_release_recursive>
 8025196:	e7dd      	b.n	8025154 <_fflush_r+0xc>

08025198 <__malloc_lock>:
 8025198:	4801      	ldr	r0, [pc, #4]	@ (80251a0 <__malloc_lock+0x8>)
 802519a:	f7fe bf24 	b.w	8023fe6 <__retarget_lock_acquire_recursive>
 802519e:	bf00      	nop
 80251a0:	24023148 	.word	0x24023148

080251a4 <__malloc_unlock>:
 80251a4:	4801      	ldr	r0, [pc, #4]	@ (80251ac <__malloc_unlock+0x8>)
 80251a6:	f7fe bf1f 	b.w	8023fe8 <__retarget_lock_release_recursive>
 80251aa:	bf00      	nop
 80251ac:	24023148 	.word	0x24023148

080251b0 <_Balloc>:
 80251b0:	b570      	push	{r4, r5, r6, lr}
 80251b2:	69c6      	ldr	r6, [r0, #28]
 80251b4:	4604      	mov	r4, r0
 80251b6:	460d      	mov	r5, r1
 80251b8:	b976      	cbnz	r6, 80251d8 <_Balloc+0x28>
 80251ba:	2010      	movs	r0, #16
 80251bc:	f7ff fe96 	bl	8024eec <malloc>
 80251c0:	4602      	mov	r2, r0
 80251c2:	61e0      	str	r0, [r4, #28]
 80251c4:	b920      	cbnz	r0, 80251d0 <_Balloc+0x20>
 80251c6:	4b18      	ldr	r3, [pc, #96]	@ (8025228 <_Balloc+0x78>)
 80251c8:	4818      	ldr	r0, [pc, #96]	@ (802522c <_Balloc+0x7c>)
 80251ca:	216b      	movs	r1, #107	@ 0x6b
 80251cc:	f7fe f928 	bl	8023420 <__assert_func>
 80251d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80251d4:	6006      	str	r6, [r0, #0]
 80251d6:	60c6      	str	r6, [r0, #12]
 80251d8:	69e6      	ldr	r6, [r4, #28]
 80251da:	68f3      	ldr	r3, [r6, #12]
 80251dc:	b183      	cbz	r3, 8025200 <_Balloc+0x50>
 80251de:	69e3      	ldr	r3, [r4, #28]
 80251e0:	68db      	ldr	r3, [r3, #12]
 80251e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80251e6:	b9b8      	cbnz	r0, 8025218 <_Balloc+0x68>
 80251e8:	2101      	movs	r1, #1
 80251ea:	fa01 f605 	lsl.w	r6, r1, r5
 80251ee:	1d72      	adds	r2, r6, #5
 80251f0:	0092      	lsls	r2, r2, #2
 80251f2:	4620      	mov	r0, r4
 80251f4:	f000 fd54 	bl	8025ca0 <_calloc_r>
 80251f8:	b160      	cbz	r0, 8025214 <_Balloc+0x64>
 80251fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80251fe:	e00e      	b.n	802521e <_Balloc+0x6e>
 8025200:	2221      	movs	r2, #33	@ 0x21
 8025202:	2104      	movs	r1, #4
 8025204:	4620      	mov	r0, r4
 8025206:	f000 fd4b 	bl	8025ca0 <_calloc_r>
 802520a:	69e3      	ldr	r3, [r4, #28]
 802520c:	60f0      	str	r0, [r6, #12]
 802520e:	68db      	ldr	r3, [r3, #12]
 8025210:	2b00      	cmp	r3, #0
 8025212:	d1e4      	bne.n	80251de <_Balloc+0x2e>
 8025214:	2000      	movs	r0, #0
 8025216:	bd70      	pop	{r4, r5, r6, pc}
 8025218:	6802      	ldr	r2, [r0, #0]
 802521a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802521e:	2300      	movs	r3, #0
 8025220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025224:	e7f7      	b.n	8025216 <_Balloc+0x66>
 8025226:	bf00      	nop
 8025228:	08027205 	.word	0x08027205
 802522c:	08027296 	.word	0x08027296

08025230 <_Bfree>:
 8025230:	b570      	push	{r4, r5, r6, lr}
 8025232:	69c6      	ldr	r6, [r0, #28]
 8025234:	4605      	mov	r5, r0
 8025236:	460c      	mov	r4, r1
 8025238:	b976      	cbnz	r6, 8025258 <_Bfree+0x28>
 802523a:	2010      	movs	r0, #16
 802523c:	f7ff fe56 	bl	8024eec <malloc>
 8025240:	4602      	mov	r2, r0
 8025242:	61e8      	str	r0, [r5, #28]
 8025244:	b920      	cbnz	r0, 8025250 <_Bfree+0x20>
 8025246:	4b09      	ldr	r3, [pc, #36]	@ (802526c <_Bfree+0x3c>)
 8025248:	4809      	ldr	r0, [pc, #36]	@ (8025270 <_Bfree+0x40>)
 802524a:	218f      	movs	r1, #143	@ 0x8f
 802524c:	f7fe f8e8 	bl	8023420 <__assert_func>
 8025250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025254:	6006      	str	r6, [r0, #0]
 8025256:	60c6      	str	r6, [r0, #12]
 8025258:	b13c      	cbz	r4, 802526a <_Bfree+0x3a>
 802525a:	69eb      	ldr	r3, [r5, #28]
 802525c:	6862      	ldr	r2, [r4, #4]
 802525e:	68db      	ldr	r3, [r3, #12]
 8025260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025264:	6021      	str	r1, [r4, #0]
 8025266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802526a:	bd70      	pop	{r4, r5, r6, pc}
 802526c:	08027205 	.word	0x08027205
 8025270:	08027296 	.word	0x08027296

08025274 <__multadd>:
 8025274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025278:	690d      	ldr	r5, [r1, #16]
 802527a:	4607      	mov	r7, r0
 802527c:	460c      	mov	r4, r1
 802527e:	461e      	mov	r6, r3
 8025280:	f101 0c14 	add.w	ip, r1, #20
 8025284:	2000      	movs	r0, #0
 8025286:	f8dc 3000 	ldr.w	r3, [ip]
 802528a:	b299      	uxth	r1, r3
 802528c:	fb02 6101 	mla	r1, r2, r1, r6
 8025290:	0c1e      	lsrs	r6, r3, #16
 8025292:	0c0b      	lsrs	r3, r1, #16
 8025294:	fb02 3306 	mla	r3, r2, r6, r3
 8025298:	b289      	uxth	r1, r1
 802529a:	3001      	adds	r0, #1
 802529c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80252a0:	4285      	cmp	r5, r0
 80252a2:	f84c 1b04 	str.w	r1, [ip], #4
 80252a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80252aa:	dcec      	bgt.n	8025286 <__multadd+0x12>
 80252ac:	b30e      	cbz	r6, 80252f2 <__multadd+0x7e>
 80252ae:	68a3      	ldr	r3, [r4, #8]
 80252b0:	42ab      	cmp	r3, r5
 80252b2:	dc19      	bgt.n	80252e8 <__multadd+0x74>
 80252b4:	6861      	ldr	r1, [r4, #4]
 80252b6:	4638      	mov	r0, r7
 80252b8:	3101      	adds	r1, #1
 80252ba:	f7ff ff79 	bl	80251b0 <_Balloc>
 80252be:	4680      	mov	r8, r0
 80252c0:	b928      	cbnz	r0, 80252ce <__multadd+0x5a>
 80252c2:	4602      	mov	r2, r0
 80252c4:	4b0c      	ldr	r3, [pc, #48]	@ (80252f8 <__multadd+0x84>)
 80252c6:	480d      	ldr	r0, [pc, #52]	@ (80252fc <__multadd+0x88>)
 80252c8:	21ba      	movs	r1, #186	@ 0xba
 80252ca:	f7fe f8a9 	bl	8023420 <__assert_func>
 80252ce:	6922      	ldr	r2, [r4, #16]
 80252d0:	3202      	adds	r2, #2
 80252d2:	f104 010c 	add.w	r1, r4, #12
 80252d6:	0092      	lsls	r2, r2, #2
 80252d8:	300c      	adds	r0, #12
 80252da:	f7fe fe86 	bl	8023fea <memcpy>
 80252de:	4621      	mov	r1, r4
 80252e0:	4638      	mov	r0, r7
 80252e2:	f7ff ffa5 	bl	8025230 <_Bfree>
 80252e6:	4644      	mov	r4, r8
 80252e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80252ec:	3501      	adds	r5, #1
 80252ee:	615e      	str	r6, [r3, #20]
 80252f0:	6125      	str	r5, [r4, #16]
 80252f2:	4620      	mov	r0, r4
 80252f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80252f8:	08027274 	.word	0x08027274
 80252fc:	08027296 	.word	0x08027296

08025300 <__hi0bits>:
 8025300:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8025304:	4603      	mov	r3, r0
 8025306:	bf36      	itet	cc
 8025308:	0403      	lslcc	r3, r0, #16
 802530a:	2000      	movcs	r0, #0
 802530c:	2010      	movcc	r0, #16
 802530e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025312:	bf3c      	itt	cc
 8025314:	021b      	lslcc	r3, r3, #8
 8025316:	3008      	addcc	r0, #8
 8025318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802531c:	bf3c      	itt	cc
 802531e:	011b      	lslcc	r3, r3, #4
 8025320:	3004      	addcc	r0, #4
 8025322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025326:	bf3c      	itt	cc
 8025328:	009b      	lslcc	r3, r3, #2
 802532a:	3002      	addcc	r0, #2
 802532c:	2b00      	cmp	r3, #0
 802532e:	db05      	blt.n	802533c <__hi0bits+0x3c>
 8025330:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8025334:	f100 0001 	add.w	r0, r0, #1
 8025338:	bf08      	it	eq
 802533a:	2020      	moveq	r0, #32
 802533c:	4770      	bx	lr

0802533e <__lo0bits>:
 802533e:	6803      	ldr	r3, [r0, #0]
 8025340:	4602      	mov	r2, r0
 8025342:	f013 0007 	ands.w	r0, r3, #7
 8025346:	d00b      	beq.n	8025360 <__lo0bits+0x22>
 8025348:	07d9      	lsls	r1, r3, #31
 802534a:	d421      	bmi.n	8025390 <__lo0bits+0x52>
 802534c:	0798      	lsls	r0, r3, #30
 802534e:	bf49      	itett	mi
 8025350:	085b      	lsrmi	r3, r3, #1
 8025352:	089b      	lsrpl	r3, r3, #2
 8025354:	2001      	movmi	r0, #1
 8025356:	6013      	strmi	r3, [r2, #0]
 8025358:	bf5c      	itt	pl
 802535a:	6013      	strpl	r3, [r2, #0]
 802535c:	2002      	movpl	r0, #2
 802535e:	4770      	bx	lr
 8025360:	b299      	uxth	r1, r3
 8025362:	b909      	cbnz	r1, 8025368 <__lo0bits+0x2a>
 8025364:	0c1b      	lsrs	r3, r3, #16
 8025366:	2010      	movs	r0, #16
 8025368:	b2d9      	uxtb	r1, r3
 802536a:	b909      	cbnz	r1, 8025370 <__lo0bits+0x32>
 802536c:	3008      	adds	r0, #8
 802536e:	0a1b      	lsrs	r3, r3, #8
 8025370:	0719      	lsls	r1, r3, #28
 8025372:	bf04      	itt	eq
 8025374:	091b      	lsreq	r3, r3, #4
 8025376:	3004      	addeq	r0, #4
 8025378:	0799      	lsls	r1, r3, #30
 802537a:	bf04      	itt	eq
 802537c:	089b      	lsreq	r3, r3, #2
 802537e:	3002      	addeq	r0, #2
 8025380:	07d9      	lsls	r1, r3, #31
 8025382:	d403      	bmi.n	802538c <__lo0bits+0x4e>
 8025384:	085b      	lsrs	r3, r3, #1
 8025386:	f100 0001 	add.w	r0, r0, #1
 802538a:	d003      	beq.n	8025394 <__lo0bits+0x56>
 802538c:	6013      	str	r3, [r2, #0]
 802538e:	4770      	bx	lr
 8025390:	2000      	movs	r0, #0
 8025392:	4770      	bx	lr
 8025394:	2020      	movs	r0, #32
 8025396:	4770      	bx	lr

08025398 <__i2b>:
 8025398:	b510      	push	{r4, lr}
 802539a:	460c      	mov	r4, r1
 802539c:	2101      	movs	r1, #1
 802539e:	f7ff ff07 	bl	80251b0 <_Balloc>
 80253a2:	4602      	mov	r2, r0
 80253a4:	b928      	cbnz	r0, 80253b2 <__i2b+0x1a>
 80253a6:	4b05      	ldr	r3, [pc, #20]	@ (80253bc <__i2b+0x24>)
 80253a8:	4805      	ldr	r0, [pc, #20]	@ (80253c0 <__i2b+0x28>)
 80253aa:	f240 1145 	movw	r1, #325	@ 0x145
 80253ae:	f7fe f837 	bl	8023420 <__assert_func>
 80253b2:	2301      	movs	r3, #1
 80253b4:	6144      	str	r4, [r0, #20]
 80253b6:	6103      	str	r3, [r0, #16]
 80253b8:	bd10      	pop	{r4, pc}
 80253ba:	bf00      	nop
 80253bc:	08027274 	.word	0x08027274
 80253c0:	08027296 	.word	0x08027296

080253c4 <__multiply>:
 80253c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253c8:	4614      	mov	r4, r2
 80253ca:	690a      	ldr	r2, [r1, #16]
 80253cc:	6923      	ldr	r3, [r4, #16]
 80253ce:	429a      	cmp	r2, r3
 80253d0:	bfa8      	it	ge
 80253d2:	4623      	movge	r3, r4
 80253d4:	460f      	mov	r7, r1
 80253d6:	bfa4      	itt	ge
 80253d8:	460c      	movge	r4, r1
 80253da:	461f      	movge	r7, r3
 80253dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80253e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80253e4:	68a3      	ldr	r3, [r4, #8]
 80253e6:	6861      	ldr	r1, [r4, #4]
 80253e8:	eb0a 0609 	add.w	r6, sl, r9
 80253ec:	42b3      	cmp	r3, r6
 80253ee:	b085      	sub	sp, #20
 80253f0:	bfb8      	it	lt
 80253f2:	3101      	addlt	r1, #1
 80253f4:	f7ff fedc 	bl	80251b0 <_Balloc>
 80253f8:	b930      	cbnz	r0, 8025408 <__multiply+0x44>
 80253fa:	4602      	mov	r2, r0
 80253fc:	4b44      	ldr	r3, [pc, #272]	@ (8025510 <__multiply+0x14c>)
 80253fe:	4845      	ldr	r0, [pc, #276]	@ (8025514 <__multiply+0x150>)
 8025400:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8025404:	f7fe f80c 	bl	8023420 <__assert_func>
 8025408:	f100 0514 	add.w	r5, r0, #20
 802540c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8025410:	462b      	mov	r3, r5
 8025412:	2200      	movs	r2, #0
 8025414:	4543      	cmp	r3, r8
 8025416:	d321      	bcc.n	802545c <__multiply+0x98>
 8025418:	f107 0114 	add.w	r1, r7, #20
 802541c:	f104 0214 	add.w	r2, r4, #20
 8025420:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8025424:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8025428:	9302      	str	r3, [sp, #8]
 802542a:	1b13      	subs	r3, r2, r4
 802542c:	3b15      	subs	r3, #21
 802542e:	f023 0303 	bic.w	r3, r3, #3
 8025432:	3304      	adds	r3, #4
 8025434:	f104 0715 	add.w	r7, r4, #21
 8025438:	42ba      	cmp	r2, r7
 802543a:	bf38      	it	cc
 802543c:	2304      	movcc	r3, #4
 802543e:	9301      	str	r3, [sp, #4]
 8025440:	9b02      	ldr	r3, [sp, #8]
 8025442:	9103      	str	r1, [sp, #12]
 8025444:	428b      	cmp	r3, r1
 8025446:	d80c      	bhi.n	8025462 <__multiply+0x9e>
 8025448:	2e00      	cmp	r6, #0
 802544a:	dd03      	ble.n	8025454 <__multiply+0x90>
 802544c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025450:	2b00      	cmp	r3, #0
 8025452:	d05b      	beq.n	802550c <__multiply+0x148>
 8025454:	6106      	str	r6, [r0, #16]
 8025456:	b005      	add	sp, #20
 8025458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802545c:	f843 2b04 	str.w	r2, [r3], #4
 8025460:	e7d8      	b.n	8025414 <__multiply+0x50>
 8025462:	f8b1 a000 	ldrh.w	sl, [r1]
 8025466:	f1ba 0f00 	cmp.w	sl, #0
 802546a:	d024      	beq.n	80254b6 <__multiply+0xf2>
 802546c:	f104 0e14 	add.w	lr, r4, #20
 8025470:	46a9      	mov	r9, r5
 8025472:	f04f 0c00 	mov.w	ip, #0
 8025476:	f85e 7b04 	ldr.w	r7, [lr], #4
 802547a:	f8d9 3000 	ldr.w	r3, [r9]
 802547e:	fa1f fb87 	uxth.w	fp, r7
 8025482:	b29b      	uxth	r3, r3
 8025484:	fb0a 330b 	mla	r3, sl, fp, r3
 8025488:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802548c:	f8d9 7000 	ldr.w	r7, [r9]
 8025490:	4463      	add	r3, ip
 8025492:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8025496:	fb0a c70b 	mla	r7, sl, fp, ip
 802549a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802549e:	b29b      	uxth	r3, r3
 80254a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80254a4:	4572      	cmp	r2, lr
 80254a6:	f849 3b04 	str.w	r3, [r9], #4
 80254aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80254ae:	d8e2      	bhi.n	8025476 <__multiply+0xb2>
 80254b0:	9b01      	ldr	r3, [sp, #4]
 80254b2:	f845 c003 	str.w	ip, [r5, r3]
 80254b6:	9b03      	ldr	r3, [sp, #12]
 80254b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80254bc:	3104      	adds	r1, #4
 80254be:	f1b9 0f00 	cmp.w	r9, #0
 80254c2:	d021      	beq.n	8025508 <__multiply+0x144>
 80254c4:	682b      	ldr	r3, [r5, #0]
 80254c6:	f104 0c14 	add.w	ip, r4, #20
 80254ca:	46ae      	mov	lr, r5
 80254cc:	f04f 0a00 	mov.w	sl, #0
 80254d0:	f8bc b000 	ldrh.w	fp, [ip]
 80254d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80254d8:	fb09 770b 	mla	r7, r9, fp, r7
 80254dc:	4457      	add	r7, sl
 80254de:	b29b      	uxth	r3, r3
 80254e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80254e4:	f84e 3b04 	str.w	r3, [lr], #4
 80254e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80254ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80254f0:	f8be 3000 	ldrh.w	r3, [lr]
 80254f4:	fb09 330a 	mla	r3, r9, sl, r3
 80254f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80254fc:	4562      	cmp	r2, ip
 80254fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025502:	d8e5      	bhi.n	80254d0 <__multiply+0x10c>
 8025504:	9f01      	ldr	r7, [sp, #4]
 8025506:	51eb      	str	r3, [r5, r7]
 8025508:	3504      	adds	r5, #4
 802550a:	e799      	b.n	8025440 <__multiply+0x7c>
 802550c:	3e01      	subs	r6, #1
 802550e:	e79b      	b.n	8025448 <__multiply+0x84>
 8025510:	08027274 	.word	0x08027274
 8025514:	08027296 	.word	0x08027296

08025518 <__pow5mult>:
 8025518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802551c:	4615      	mov	r5, r2
 802551e:	f012 0203 	ands.w	r2, r2, #3
 8025522:	4607      	mov	r7, r0
 8025524:	460e      	mov	r6, r1
 8025526:	d007      	beq.n	8025538 <__pow5mult+0x20>
 8025528:	4c25      	ldr	r4, [pc, #148]	@ (80255c0 <__pow5mult+0xa8>)
 802552a:	3a01      	subs	r2, #1
 802552c:	2300      	movs	r3, #0
 802552e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025532:	f7ff fe9f 	bl	8025274 <__multadd>
 8025536:	4606      	mov	r6, r0
 8025538:	10ad      	asrs	r5, r5, #2
 802553a:	d03d      	beq.n	80255b8 <__pow5mult+0xa0>
 802553c:	69fc      	ldr	r4, [r7, #28]
 802553e:	b97c      	cbnz	r4, 8025560 <__pow5mult+0x48>
 8025540:	2010      	movs	r0, #16
 8025542:	f7ff fcd3 	bl	8024eec <malloc>
 8025546:	4602      	mov	r2, r0
 8025548:	61f8      	str	r0, [r7, #28]
 802554a:	b928      	cbnz	r0, 8025558 <__pow5mult+0x40>
 802554c:	4b1d      	ldr	r3, [pc, #116]	@ (80255c4 <__pow5mult+0xac>)
 802554e:	481e      	ldr	r0, [pc, #120]	@ (80255c8 <__pow5mult+0xb0>)
 8025550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8025554:	f7fd ff64 	bl	8023420 <__assert_func>
 8025558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802555c:	6004      	str	r4, [r0, #0]
 802555e:	60c4      	str	r4, [r0, #12]
 8025560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8025564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8025568:	b94c      	cbnz	r4, 802557e <__pow5mult+0x66>
 802556a:	f240 2171 	movw	r1, #625	@ 0x271
 802556e:	4638      	mov	r0, r7
 8025570:	f7ff ff12 	bl	8025398 <__i2b>
 8025574:	2300      	movs	r3, #0
 8025576:	f8c8 0008 	str.w	r0, [r8, #8]
 802557a:	4604      	mov	r4, r0
 802557c:	6003      	str	r3, [r0, #0]
 802557e:	f04f 0900 	mov.w	r9, #0
 8025582:	07eb      	lsls	r3, r5, #31
 8025584:	d50a      	bpl.n	802559c <__pow5mult+0x84>
 8025586:	4631      	mov	r1, r6
 8025588:	4622      	mov	r2, r4
 802558a:	4638      	mov	r0, r7
 802558c:	f7ff ff1a 	bl	80253c4 <__multiply>
 8025590:	4631      	mov	r1, r6
 8025592:	4680      	mov	r8, r0
 8025594:	4638      	mov	r0, r7
 8025596:	f7ff fe4b 	bl	8025230 <_Bfree>
 802559a:	4646      	mov	r6, r8
 802559c:	106d      	asrs	r5, r5, #1
 802559e:	d00b      	beq.n	80255b8 <__pow5mult+0xa0>
 80255a0:	6820      	ldr	r0, [r4, #0]
 80255a2:	b938      	cbnz	r0, 80255b4 <__pow5mult+0x9c>
 80255a4:	4622      	mov	r2, r4
 80255a6:	4621      	mov	r1, r4
 80255a8:	4638      	mov	r0, r7
 80255aa:	f7ff ff0b 	bl	80253c4 <__multiply>
 80255ae:	6020      	str	r0, [r4, #0]
 80255b0:	f8c0 9000 	str.w	r9, [r0]
 80255b4:	4604      	mov	r4, r0
 80255b6:	e7e4      	b.n	8025582 <__pow5mult+0x6a>
 80255b8:	4630      	mov	r0, r6
 80255ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80255be:	bf00      	nop
 80255c0:	080272f0 	.word	0x080272f0
 80255c4:	08027205 	.word	0x08027205
 80255c8:	08027296 	.word	0x08027296

080255cc <__lshift>:
 80255cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80255d0:	460c      	mov	r4, r1
 80255d2:	6849      	ldr	r1, [r1, #4]
 80255d4:	6923      	ldr	r3, [r4, #16]
 80255d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80255da:	68a3      	ldr	r3, [r4, #8]
 80255dc:	4607      	mov	r7, r0
 80255de:	4691      	mov	r9, r2
 80255e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80255e4:	f108 0601 	add.w	r6, r8, #1
 80255e8:	42b3      	cmp	r3, r6
 80255ea:	db0b      	blt.n	8025604 <__lshift+0x38>
 80255ec:	4638      	mov	r0, r7
 80255ee:	f7ff fddf 	bl	80251b0 <_Balloc>
 80255f2:	4605      	mov	r5, r0
 80255f4:	b948      	cbnz	r0, 802560a <__lshift+0x3e>
 80255f6:	4602      	mov	r2, r0
 80255f8:	4b28      	ldr	r3, [pc, #160]	@ (802569c <__lshift+0xd0>)
 80255fa:	4829      	ldr	r0, [pc, #164]	@ (80256a0 <__lshift+0xd4>)
 80255fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8025600:	f7fd ff0e 	bl	8023420 <__assert_func>
 8025604:	3101      	adds	r1, #1
 8025606:	005b      	lsls	r3, r3, #1
 8025608:	e7ee      	b.n	80255e8 <__lshift+0x1c>
 802560a:	2300      	movs	r3, #0
 802560c:	f100 0114 	add.w	r1, r0, #20
 8025610:	f100 0210 	add.w	r2, r0, #16
 8025614:	4618      	mov	r0, r3
 8025616:	4553      	cmp	r3, sl
 8025618:	db33      	blt.n	8025682 <__lshift+0xb6>
 802561a:	6920      	ldr	r0, [r4, #16]
 802561c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8025620:	f104 0314 	add.w	r3, r4, #20
 8025624:	f019 091f 	ands.w	r9, r9, #31
 8025628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802562c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8025630:	d02b      	beq.n	802568a <__lshift+0xbe>
 8025632:	f1c9 0e20 	rsb	lr, r9, #32
 8025636:	468a      	mov	sl, r1
 8025638:	2200      	movs	r2, #0
 802563a:	6818      	ldr	r0, [r3, #0]
 802563c:	fa00 f009 	lsl.w	r0, r0, r9
 8025640:	4310      	orrs	r0, r2
 8025642:	f84a 0b04 	str.w	r0, [sl], #4
 8025646:	f853 2b04 	ldr.w	r2, [r3], #4
 802564a:	459c      	cmp	ip, r3
 802564c:	fa22 f20e 	lsr.w	r2, r2, lr
 8025650:	d8f3      	bhi.n	802563a <__lshift+0x6e>
 8025652:	ebac 0304 	sub.w	r3, ip, r4
 8025656:	3b15      	subs	r3, #21
 8025658:	f023 0303 	bic.w	r3, r3, #3
 802565c:	3304      	adds	r3, #4
 802565e:	f104 0015 	add.w	r0, r4, #21
 8025662:	4584      	cmp	ip, r0
 8025664:	bf38      	it	cc
 8025666:	2304      	movcc	r3, #4
 8025668:	50ca      	str	r2, [r1, r3]
 802566a:	b10a      	cbz	r2, 8025670 <__lshift+0xa4>
 802566c:	f108 0602 	add.w	r6, r8, #2
 8025670:	3e01      	subs	r6, #1
 8025672:	4638      	mov	r0, r7
 8025674:	612e      	str	r6, [r5, #16]
 8025676:	4621      	mov	r1, r4
 8025678:	f7ff fdda 	bl	8025230 <_Bfree>
 802567c:	4628      	mov	r0, r5
 802567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025682:	f842 0f04 	str.w	r0, [r2, #4]!
 8025686:	3301      	adds	r3, #1
 8025688:	e7c5      	b.n	8025616 <__lshift+0x4a>
 802568a:	3904      	subs	r1, #4
 802568c:	f853 2b04 	ldr.w	r2, [r3], #4
 8025690:	f841 2f04 	str.w	r2, [r1, #4]!
 8025694:	459c      	cmp	ip, r3
 8025696:	d8f9      	bhi.n	802568c <__lshift+0xc0>
 8025698:	e7ea      	b.n	8025670 <__lshift+0xa4>
 802569a:	bf00      	nop
 802569c:	08027274 	.word	0x08027274
 80256a0:	08027296 	.word	0x08027296

080256a4 <__mcmp>:
 80256a4:	690a      	ldr	r2, [r1, #16]
 80256a6:	4603      	mov	r3, r0
 80256a8:	6900      	ldr	r0, [r0, #16]
 80256aa:	1a80      	subs	r0, r0, r2
 80256ac:	b530      	push	{r4, r5, lr}
 80256ae:	d10e      	bne.n	80256ce <__mcmp+0x2a>
 80256b0:	3314      	adds	r3, #20
 80256b2:	3114      	adds	r1, #20
 80256b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80256b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80256bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80256c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80256c4:	4295      	cmp	r5, r2
 80256c6:	d003      	beq.n	80256d0 <__mcmp+0x2c>
 80256c8:	d205      	bcs.n	80256d6 <__mcmp+0x32>
 80256ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256ce:	bd30      	pop	{r4, r5, pc}
 80256d0:	42a3      	cmp	r3, r4
 80256d2:	d3f3      	bcc.n	80256bc <__mcmp+0x18>
 80256d4:	e7fb      	b.n	80256ce <__mcmp+0x2a>
 80256d6:	2001      	movs	r0, #1
 80256d8:	e7f9      	b.n	80256ce <__mcmp+0x2a>
	...

080256dc <__mdiff>:
 80256dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256e0:	4689      	mov	r9, r1
 80256e2:	4606      	mov	r6, r0
 80256e4:	4611      	mov	r1, r2
 80256e6:	4648      	mov	r0, r9
 80256e8:	4614      	mov	r4, r2
 80256ea:	f7ff ffdb 	bl	80256a4 <__mcmp>
 80256ee:	1e05      	subs	r5, r0, #0
 80256f0:	d112      	bne.n	8025718 <__mdiff+0x3c>
 80256f2:	4629      	mov	r1, r5
 80256f4:	4630      	mov	r0, r6
 80256f6:	f7ff fd5b 	bl	80251b0 <_Balloc>
 80256fa:	4602      	mov	r2, r0
 80256fc:	b928      	cbnz	r0, 802570a <__mdiff+0x2e>
 80256fe:	4b3f      	ldr	r3, [pc, #252]	@ (80257fc <__mdiff+0x120>)
 8025700:	f240 2137 	movw	r1, #567	@ 0x237
 8025704:	483e      	ldr	r0, [pc, #248]	@ (8025800 <__mdiff+0x124>)
 8025706:	f7fd fe8b 	bl	8023420 <__assert_func>
 802570a:	2301      	movs	r3, #1
 802570c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8025710:	4610      	mov	r0, r2
 8025712:	b003      	add	sp, #12
 8025714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025718:	bfbc      	itt	lt
 802571a:	464b      	movlt	r3, r9
 802571c:	46a1      	movlt	r9, r4
 802571e:	4630      	mov	r0, r6
 8025720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8025724:	bfba      	itte	lt
 8025726:	461c      	movlt	r4, r3
 8025728:	2501      	movlt	r5, #1
 802572a:	2500      	movge	r5, #0
 802572c:	f7ff fd40 	bl	80251b0 <_Balloc>
 8025730:	4602      	mov	r2, r0
 8025732:	b918      	cbnz	r0, 802573c <__mdiff+0x60>
 8025734:	4b31      	ldr	r3, [pc, #196]	@ (80257fc <__mdiff+0x120>)
 8025736:	f240 2145 	movw	r1, #581	@ 0x245
 802573a:	e7e3      	b.n	8025704 <__mdiff+0x28>
 802573c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8025740:	6926      	ldr	r6, [r4, #16]
 8025742:	60c5      	str	r5, [r0, #12]
 8025744:	f109 0310 	add.w	r3, r9, #16
 8025748:	f109 0514 	add.w	r5, r9, #20
 802574c:	f104 0e14 	add.w	lr, r4, #20
 8025750:	f100 0b14 	add.w	fp, r0, #20
 8025754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8025758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802575c:	9301      	str	r3, [sp, #4]
 802575e:	46d9      	mov	r9, fp
 8025760:	f04f 0c00 	mov.w	ip, #0
 8025764:	9b01      	ldr	r3, [sp, #4]
 8025766:	f85e 0b04 	ldr.w	r0, [lr], #4
 802576a:	f853 af04 	ldr.w	sl, [r3, #4]!
 802576e:	9301      	str	r3, [sp, #4]
 8025770:	fa1f f38a 	uxth.w	r3, sl
 8025774:	4619      	mov	r1, r3
 8025776:	b283      	uxth	r3, r0
 8025778:	1acb      	subs	r3, r1, r3
 802577a:	0c00      	lsrs	r0, r0, #16
 802577c:	4463      	add	r3, ip
 802577e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8025782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8025786:	b29b      	uxth	r3, r3
 8025788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802578c:	4576      	cmp	r6, lr
 802578e:	f849 3b04 	str.w	r3, [r9], #4
 8025792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8025796:	d8e5      	bhi.n	8025764 <__mdiff+0x88>
 8025798:	1b33      	subs	r3, r6, r4
 802579a:	3b15      	subs	r3, #21
 802579c:	f023 0303 	bic.w	r3, r3, #3
 80257a0:	3415      	adds	r4, #21
 80257a2:	3304      	adds	r3, #4
 80257a4:	42a6      	cmp	r6, r4
 80257a6:	bf38      	it	cc
 80257a8:	2304      	movcc	r3, #4
 80257aa:	441d      	add	r5, r3
 80257ac:	445b      	add	r3, fp
 80257ae:	461e      	mov	r6, r3
 80257b0:	462c      	mov	r4, r5
 80257b2:	4544      	cmp	r4, r8
 80257b4:	d30e      	bcc.n	80257d4 <__mdiff+0xf8>
 80257b6:	f108 0103 	add.w	r1, r8, #3
 80257ba:	1b49      	subs	r1, r1, r5
 80257bc:	f021 0103 	bic.w	r1, r1, #3
 80257c0:	3d03      	subs	r5, #3
 80257c2:	45a8      	cmp	r8, r5
 80257c4:	bf38      	it	cc
 80257c6:	2100      	movcc	r1, #0
 80257c8:	440b      	add	r3, r1
 80257ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80257ce:	b191      	cbz	r1, 80257f6 <__mdiff+0x11a>
 80257d0:	6117      	str	r7, [r2, #16]
 80257d2:	e79d      	b.n	8025710 <__mdiff+0x34>
 80257d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80257d8:	46e6      	mov	lr, ip
 80257da:	0c08      	lsrs	r0, r1, #16
 80257dc:	fa1c fc81 	uxtah	ip, ip, r1
 80257e0:	4471      	add	r1, lr
 80257e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80257e6:	b289      	uxth	r1, r1
 80257e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80257ec:	f846 1b04 	str.w	r1, [r6], #4
 80257f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80257f4:	e7dd      	b.n	80257b2 <__mdiff+0xd6>
 80257f6:	3f01      	subs	r7, #1
 80257f8:	e7e7      	b.n	80257ca <__mdiff+0xee>
 80257fa:	bf00      	nop
 80257fc:	08027274 	.word	0x08027274
 8025800:	08027296 	.word	0x08027296

08025804 <__d2b>:
 8025804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025808:	460f      	mov	r7, r1
 802580a:	2101      	movs	r1, #1
 802580c:	ec59 8b10 	vmov	r8, r9, d0
 8025810:	4616      	mov	r6, r2
 8025812:	f7ff fccd 	bl	80251b0 <_Balloc>
 8025816:	4604      	mov	r4, r0
 8025818:	b930      	cbnz	r0, 8025828 <__d2b+0x24>
 802581a:	4602      	mov	r2, r0
 802581c:	4b23      	ldr	r3, [pc, #140]	@ (80258ac <__d2b+0xa8>)
 802581e:	4824      	ldr	r0, [pc, #144]	@ (80258b0 <__d2b+0xac>)
 8025820:	f240 310f 	movw	r1, #783	@ 0x30f
 8025824:	f7fd fdfc 	bl	8023420 <__assert_func>
 8025828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802582c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8025830:	b10d      	cbz	r5, 8025836 <__d2b+0x32>
 8025832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8025836:	9301      	str	r3, [sp, #4]
 8025838:	f1b8 0300 	subs.w	r3, r8, #0
 802583c:	d023      	beq.n	8025886 <__d2b+0x82>
 802583e:	4668      	mov	r0, sp
 8025840:	9300      	str	r3, [sp, #0]
 8025842:	f7ff fd7c 	bl	802533e <__lo0bits>
 8025846:	e9dd 1200 	ldrd	r1, r2, [sp]
 802584a:	b1d0      	cbz	r0, 8025882 <__d2b+0x7e>
 802584c:	f1c0 0320 	rsb	r3, r0, #32
 8025850:	fa02 f303 	lsl.w	r3, r2, r3
 8025854:	430b      	orrs	r3, r1
 8025856:	40c2      	lsrs	r2, r0
 8025858:	6163      	str	r3, [r4, #20]
 802585a:	9201      	str	r2, [sp, #4]
 802585c:	9b01      	ldr	r3, [sp, #4]
 802585e:	61a3      	str	r3, [r4, #24]
 8025860:	2b00      	cmp	r3, #0
 8025862:	bf0c      	ite	eq
 8025864:	2201      	moveq	r2, #1
 8025866:	2202      	movne	r2, #2
 8025868:	6122      	str	r2, [r4, #16]
 802586a:	b1a5      	cbz	r5, 8025896 <__d2b+0x92>
 802586c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8025870:	4405      	add	r5, r0
 8025872:	603d      	str	r5, [r7, #0]
 8025874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8025878:	6030      	str	r0, [r6, #0]
 802587a:	4620      	mov	r0, r4
 802587c:	b003      	add	sp, #12
 802587e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025882:	6161      	str	r1, [r4, #20]
 8025884:	e7ea      	b.n	802585c <__d2b+0x58>
 8025886:	a801      	add	r0, sp, #4
 8025888:	f7ff fd59 	bl	802533e <__lo0bits>
 802588c:	9b01      	ldr	r3, [sp, #4]
 802588e:	6163      	str	r3, [r4, #20]
 8025890:	3020      	adds	r0, #32
 8025892:	2201      	movs	r2, #1
 8025894:	e7e8      	b.n	8025868 <__d2b+0x64>
 8025896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802589a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802589e:	6038      	str	r0, [r7, #0]
 80258a0:	6918      	ldr	r0, [r3, #16]
 80258a2:	f7ff fd2d 	bl	8025300 <__hi0bits>
 80258a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80258aa:	e7e5      	b.n	8025878 <__d2b+0x74>
 80258ac:	08027274 	.word	0x08027274
 80258b0:	08027296 	.word	0x08027296

080258b4 <__sread>:
 80258b4:	b510      	push	{r4, lr}
 80258b6:	460c      	mov	r4, r1
 80258b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258bc:	f000 f9a8 	bl	8025c10 <_read_r>
 80258c0:	2800      	cmp	r0, #0
 80258c2:	bfab      	itete	ge
 80258c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80258c6:	89a3      	ldrhlt	r3, [r4, #12]
 80258c8:	181b      	addge	r3, r3, r0
 80258ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80258ce:	bfac      	ite	ge
 80258d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80258d2:	81a3      	strhlt	r3, [r4, #12]
 80258d4:	bd10      	pop	{r4, pc}

080258d6 <__swrite>:
 80258d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80258da:	461f      	mov	r7, r3
 80258dc:	898b      	ldrh	r3, [r1, #12]
 80258de:	05db      	lsls	r3, r3, #23
 80258e0:	4605      	mov	r5, r0
 80258e2:	460c      	mov	r4, r1
 80258e4:	4616      	mov	r6, r2
 80258e6:	d505      	bpl.n	80258f4 <__swrite+0x1e>
 80258e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258ec:	2302      	movs	r3, #2
 80258ee:	2200      	movs	r2, #0
 80258f0:	f000 f94c 	bl	8025b8c <_lseek_r>
 80258f4:	89a3      	ldrh	r3, [r4, #12]
 80258f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80258fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80258fe:	81a3      	strh	r3, [r4, #12]
 8025900:	4632      	mov	r2, r6
 8025902:	463b      	mov	r3, r7
 8025904:	4628      	mov	r0, r5
 8025906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802590a:	f000 b9b7 	b.w	8025c7c <_write_r>

0802590e <__sseek>:
 802590e:	b510      	push	{r4, lr}
 8025910:	460c      	mov	r4, r1
 8025912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025916:	f000 f939 	bl	8025b8c <_lseek_r>
 802591a:	1c43      	adds	r3, r0, #1
 802591c:	89a3      	ldrh	r3, [r4, #12]
 802591e:	bf15      	itete	ne
 8025920:	6560      	strne	r0, [r4, #84]	@ 0x54
 8025922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802592a:	81a3      	strheq	r3, [r4, #12]
 802592c:	bf18      	it	ne
 802592e:	81a3      	strhne	r3, [r4, #12]
 8025930:	bd10      	pop	{r4, pc}

08025932 <__sclose>:
 8025932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025936:	f000 b8f7 	b.w	8025b28 <_close_r>

0802593a <__swbuf_r>:
 802593a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802593c:	460e      	mov	r6, r1
 802593e:	4614      	mov	r4, r2
 8025940:	4605      	mov	r5, r0
 8025942:	b118      	cbz	r0, 802594c <__swbuf_r+0x12>
 8025944:	6a03      	ldr	r3, [r0, #32]
 8025946:	b90b      	cbnz	r3, 802594c <__swbuf_r+0x12>
 8025948:	f7fe fa4a 	bl	8023de0 <__sinit>
 802594c:	69a3      	ldr	r3, [r4, #24]
 802594e:	60a3      	str	r3, [r4, #8]
 8025950:	89a3      	ldrh	r3, [r4, #12]
 8025952:	071a      	lsls	r2, r3, #28
 8025954:	d501      	bpl.n	802595a <__swbuf_r+0x20>
 8025956:	6923      	ldr	r3, [r4, #16]
 8025958:	b943      	cbnz	r3, 802596c <__swbuf_r+0x32>
 802595a:	4621      	mov	r1, r4
 802595c:	4628      	mov	r0, r5
 802595e:	f000 f82b 	bl	80259b8 <__swsetup_r>
 8025962:	b118      	cbz	r0, 802596c <__swbuf_r+0x32>
 8025964:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025968:	4638      	mov	r0, r7
 802596a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802596c:	6823      	ldr	r3, [r4, #0]
 802596e:	6922      	ldr	r2, [r4, #16]
 8025970:	1a98      	subs	r0, r3, r2
 8025972:	6963      	ldr	r3, [r4, #20]
 8025974:	b2f6      	uxtb	r6, r6
 8025976:	4283      	cmp	r3, r0
 8025978:	4637      	mov	r7, r6
 802597a:	dc05      	bgt.n	8025988 <__swbuf_r+0x4e>
 802597c:	4621      	mov	r1, r4
 802597e:	4628      	mov	r0, r5
 8025980:	f7ff fbe2 	bl	8025148 <_fflush_r>
 8025984:	2800      	cmp	r0, #0
 8025986:	d1ed      	bne.n	8025964 <__swbuf_r+0x2a>
 8025988:	68a3      	ldr	r3, [r4, #8]
 802598a:	3b01      	subs	r3, #1
 802598c:	60a3      	str	r3, [r4, #8]
 802598e:	6823      	ldr	r3, [r4, #0]
 8025990:	1c5a      	adds	r2, r3, #1
 8025992:	6022      	str	r2, [r4, #0]
 8025994:	701e      	strb	r6, [r3, #0]
 8025996:	6962      	ldr	r2, [r4, #20]
 8025998:	1c43      	adds	r3, r0, #1
 802599a:	429a      	cmp	r2, r3
 802599c:	d004      	beq.n	80259a8 <__swbuf_r+0x6e>
 802599e:	89a3      	ldrh	r3, [r4, #12]
 80259a0:	07db      	lsls	r3, r3, #31
 80259a2:	d5e1      	bpl.n	8025968 <__swbuf_r+0x2e>
 80259a4:	2e0a      	cmp	r6, #10
 80259a6:	d1df      	bne.n	8025968 <__swbuf_r+0x2e>
 80259a8:	4621      	mov	r1, r4
 80259aa:	4628      	mov	r0, r5
 80259ac:	f7ff fbcc 	bl	8025148 <_fflush_r>
 80259b0:	2800      	cmp	r0, #0
 80259b2:	d0d9      	beq.n	8025968 <__swbuf_r+0x2e>
 80259b4:	e7d6      	b.n	8025964 <__swbuf_r+0x2a>
	...

080259b8 <__swsetup_r>:
 80259b8:	b538      	push	{r3, r4, r5, lr}
 80259ba:	4b29      	ldr	r3, [pc, #164]	@ (8025a60 <__swsetup_r+0xa8>)
 80259bc:	4605      	mov	r5, r0
 80259be:	6818      	ldr	r0, [r3, #0]
 80259c0:	460c      	mov	r4, r1
 80259c2:	b118      	cbz	r0, 80259cc <__swsetup_r+0x14>
 80259c4:	6a03      	ldr	r3, [r0, #32]
 80259c6:	b90b      	cbnz	r3, 80259cc <__swsetup_r+0x14>
 80259c8:	f7fe fa0a 	bl	8023de0 <__sinit>
 80259cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80259d0:	0719      	lsls	r1, r3, #28
 80259d2:	d422      	bmi.n	8025a1a <__swsetup_r+0x62>
 80259d4:	06da      	lsls	r2, r3, #27
 80259d6:	d407      	bmi.n	80259e8 <__swsetup_r+0x30>
 80259d8:	2209      	movs	r2, #9
 80259da:	602a      	str	r2, [r5, #0]
 80259dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80259e0:	81a3      	strh	r3, [r4, #12]
 80259e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80259e6:	e033      	b.n	8025a50 <__swsetup_r+0x98>
 80259e8:	0758      	lsls	r0, r3, #29
 80259ea:	d512      	bpl.n	8025a12 <__swsetup_r+0x5a>
 80259ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80259ee:	b141      	cbz	r1, 8025a02 <__swsetup_r+0x4a>
 80259f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80259f4:	4299      	cmp	r1, r3
 80259f6:	d002      	beq.n	80259fe <__swsetup_r+0x46>
 80259f8:	4628      	mov	r0, r5
 80259fa:	f7ff f8eb 	bl	8024bd4 <_free_r>
 80259fe:	2300      	movs	r3, #0
 8025a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8025a02:	89a3      	ldrh	r3, [r4, #12]
 8025a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8025a08:	81a3      	strh	r3, [r4, #12]
 8025a0a:	2300      	movs	r3, #0
 8025a0c:	6063      	str	r3, [r4, #4]
 8025a0e:	6923      	ldr	r3, [r4, #16]
 8025a10:	6023      	str	r3, [r4, #0]
 8025a12:	89a3      	ldrh	r3, [r4, #12]
 8025a14:	f043 0308 	orr.w	r3, r3, #8
 8025a18:	81a3      	strh	r3, [r4, #12]
 8025a1a:	6923      	ldr	r3, [r4, #16]
 8025a1c:	b94b      	cbnz	r3, 8025a32 <__swsetup_r+0x7a>
 8025a1e:	89a3      	ldrh	r3, [r4, #12]
 8025a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025a28:	d003      	beq.n	8025a32 <__swsetup_r+0x7a>
 8025a2a:	4621      	mov	r1, r4
 8025a2c:	4628      	mov	r0, r5
 8025a2e:	f000 f83f 	bl	8025ab0 <__smakebuf_r>
 8025a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025a36:	f013 0201 	ands.w	r2, r3, #1
 8025a3a:	d00a      	beq.n	8025a52 <__swsetup_r+0x9a>
 8025a3c:	2200      	movs	r2, #0
 8025a3e:	60a2      	str	r2, [r4, #8]
 8025a40:	6962      	ldr	r2, [r4, #20]
 8025a42:	4252      	negs	r2, r2
 8025a44:	61a2      	str	r2, [r4, #24]
 8025a46:	6922      	ldr	r2, [r4, #16]
 8025a48:	b942      	cbnz	r2, 8025a5c <__swsetup_r+0xa4>
 8025a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025a4e:	d1c5      	bne.n	80259dc <__swsetup_r+0x24>
 8025a50:	bd38      	pop	{r3, r4, r5, pc}
 8025a52:	0799      	lsls	r1, r3, #30
 8025a54:	bf58      	it	pl
 8025a56:	6962      	ldrpl	r2, [r4, #20]
 8025a58:	60a2      	str	r2, [r4, #8]
 8025a5a:	e7f4      	b.n	8025a46 <__swsetup_r+0x8e>
 8025a5c:	2000      	movs	r0, #0
 8025a5e:	e7f7      	b.n	8025a50 <__swsetup_r+0x98>
 8025a60:	2400004c 	.word	0x2400004c

08025a64 <__swhatbuf_r>:
 8025a64:	b570      	push	{r4, r5, r6, lr}
 8025a66:	460c      	mov	r4, r1
 8025a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a6c:	2900      	cmp	r1, #0
 8025a6e:	b096      	sub	sp, #88	@ 0x58
 8025a70:	4615      	mov	r5, r2
 8025a72:	461e      	mov	r6, r3
 8025a74:	da0d      	bge.n	8025a92 <__swhatbuf_r+0x2e>
 8025a76:	89a3      	ldrh	r3, [r4, #12]
 8025a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025a7c:	f04f 0100 	mov.w	r1, #0
 8025a80:	bf14      	ite	ne
 8025a82:	2340      	movne	r3, #64	@ 0x40
 8025a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8025a88:	2000      	movs	r0, #0
 8025a8a:	6031      	str	r1, [r6, #0]
 8025a8c:	602b      	str	r3, [r5, #0]
 8025a8e:	b016      	add	sp, #88	@ 0x58
 8025a90:	bd70      	pop	{r4, r5, r6, pc}
 8025a92:	466a      	mov	r2, sp
 8025a94:	f000 f858 	bl	8025b48 <_fstat_r>
 8025a98:	2800      	cmp	r0, #0
 8025a9a:	dbec      	blt.n	8025a76 <__swhatbuf_r+0x12>
 8025a9c:	9901      	ldr	r1, [sp, #4]
 8025a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8025aa6:	4259      	negs	r1, r3
 8025aa8:	4159      	adcs	r1, r3
 8025aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025aae:	e7eb      	b.n	8025a88 <__swhatbuf_r+0x24>

08025ab0 <__smakebuf_r>:
 8025ab0:	898b      	ldrh	r3, [r1, #12]
 8025ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025ab4:	079d      	lsls	r5, r3, #30
 8025ab6:	4606      	mov	r6, r0
 8025ab8:	460c      	mov	r4, r1
 8025aba:	d507      	bpl.n	8025acc <__smakebuf_r+0x1c>
 8025abc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8025ac0:	6023      	str	r3, [r4, #0]
 8025ac2:	6123      	str	r3, [r4, #16]
 8025ac4:	2301      	movs	r3, #1
 8025ac6:	6163      	str	r3, [r4, #20]
 8025ac8:	b003      	add	sp, #12
 8025aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025acc:	ab01      	add	r3, sp, #4
 8025ace:	466a      	mov	r2, sp
 8025ad0:	f7ff ffc8 	bl	8025a64 <__swhatbuf_r>
 8025ad4:	9f00      	ldr	r7, [sp, #0]
 8025ad6:	4605      	mov	r5, r0
 8025ad8:	4639      	mov	r1, r7
 8025ada:	4630      	mov	r0, r6
 8025adc:	f7ff fa30 	bl	8024f40 <_malloc_r>
 8025ae0:	b948      	cbnz	r0, 8025af6 <__smakebuf_r+0x46>
 8025ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ae6:	059a      	lsls	r2, r3, #22
 8025ae8:	d4ee      	bmi.n	8025ac8 <__smakebuf_r+0x18>
 8025aea:	f023 0303 	bic.w	r3, r3, #3
 8025aee:	f043 0302 	orr.w	r3, r3, #2
 8025af2:	81a3      	strh	r3, [r4, #12]
 8025af4:	e7e2      	b.n	8025abc <__smakebuf_r+0xc>
 8025af6:	89a3      	ldrh	r3, [r4, #12]
 8025af8:	6020      	str	r0, [r4, #0]
 8025afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025afe:	81a3      	strh	r3, [r4, #12]
 8025b00:	9b01      	ldr	r3, [sp, #4]
 8025b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8025b06:	b15b      	cbz	r3, 8025b20 <__smakebuf_r+0x70>
 8025b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025b0c:	4630      	mov	r0, r6
 8025b0e:	f000 f82d 	bl	8025b6c <_isatty_r>
 8025b12:	b128      	cbz	r0, 8025b20 <__smakebuf_r+0x70>
 8025b14:	89a3      	ldrh	r3, [r4, #12]
 8025b16:	f023 0303 	bic.w	r3, r3, #3
 8025b1a:	f043 0301 	orr.w	r3, r3, #1
 8025b1e:	81a3      	strh	r3, [r4, #12]
 8025b20:	89a3      	ldrh	r3, [r4, #12]
 8025b22:	431d      	orrs	r5, r3
 8025b24:	81a5      	strh	r5, [r4, #12]
 8025b26:	e7cf      	b.n	8025ac8 <__smakebuf_r+0x18>

08025b28 <_close_r>:
 8025b28:	b538      	push	{r3, r4, r5, lr}
 8025b2a:	4d06      	ldr	r5, [pc, #24]	@ (8025b44 <_close_r+0x1c>)
 8025b2c:	2300      	movs	r3, #0
 8025b2e:	4604      	mov	r4, r0
 8025b30:	4608      	mov	r0, r1
 8025b32:	602b      	str	r3, [r5, #0]
 8025b34:	f7dc f8fe 	bl	8001d34 <_close>
 8025b38:	1c43      	adds	r3, r0, #1
 8025b3a:	d102      	bne.n	8025b42 <_close_r+0x1a>
 8025b3c:	682b      	ldr	r3, [r5, #0]
 8025b3e:	b103      	cbz	r3, 8025b42 <_close_r+0x1a>
 8025b40:	6023      	str	r3, [r4, #0]
 8025b42:	bd38      	pop	{r3, r4, r5, pc}
 8025b44:	24023144 	.word	0x24023144

08025b48 <_fstat_r>:
 8025b48:	b538      	push	{r3, r4, r5, lr}
 8025b4a:	4d07      	ldr	r5, [pc, #28]	@ (8025b68 <_fstat_r+0x20>)
 8025b4c:	2300      	movs	r3, #0
 8025b4e:	4604      	mov	r4, r0
 8025b50:	4608      	mov	r0, r1
 8025b52:	4611      	mov	r1, r2
 8025b54:	602b      	str	r3, [r5, #0]
 8025b56:	f7dc f8f9 	bl	8001d4c <_fstat>
 8025b5a:	1c43      	adds	r3, r0, #1
 8025b5c:	d102      	bne.n	8025b64 <_fstat_r+0x1c>
 8025b5e:	682b      	ldr	r3, [r5, #0]
 8025b60:	b103      	cbz	r3, 8025b64 <_fstat_r+0x1c>
 8025b62:	6023      	str	r3, [r4, #0]
 8025b64:	bd38      	pop	{r3, r4, r5, pc}
 8025b66:	bf00      	nop
 8025b68:	24023144 	.word	0x24023144

08025b6c <_isatty_r>:
 8025b6c:	b538      	push	{r3, r4, r5, lr}
 8025b6e:	4d06      	ldr	r5, [pc, #24]	@ (8025b88 <_isatty_r+0x1c>)
 8025b70:	2300      	movs	r3, #0
 8025b72:	4604      	mov	r4, r0
 8025b74:	4608      	mov	r0, r1
 8025b76:	602b      	str	r3, [r5, #0]
 8025b78:	f7dc f8f8 	bl	8001d6c <_isatty>
 8025b7c:	1c43      	adds	r3, r0, #1
 8025b7e:	d102      	bne.n	8025b86 <_isatty_r+0x1a>
 8025b80:	682b      	ldr	r3, [r5, #0]
 8025b82:	b103      	cbz	r3, 8025b86 <_isatty_r+0x1a>
 8025b84:	6023      	str	r3, [r4, #0]
 8025b86:	bd38      	pop	{r3, r4, r5, pc}
 8025b88:	24023144 	.word	0x24023144

08025b8c <_lseek_r>:
 8025b8c:	b538      	push	{r3, r4, r5, lr}
 8025b8e:	4d07      	ldr	r5, [pc, #28]	@ (8025bac <_lseek_r+0x20>)
 8025b90:	4604      	mov	r4, r0
 8025b92:	4608      	mov	r0, r1
 8025b94:	4611      	mov	r1, r2
 8025b96:	2200      	movs	r2, #0
 8025b98:	602a      	str	r2, [r5, #0]
 8025b9a:	461a      	mov	r2, r3
 8025b9c:	f7dc f8f1 	bl	8001d82 <_lseek>
 8025ba0:	1c43      	adds	r3, r0, #1
 8025ba2:	d102      	bne.n	8025baa <_lseek_r+0x1e>
 8025ba4:	682b      	ldr	r3, [r5, #0]
 8025ba6:	b103      	cbz	r3, 8025baa <_lseek_r+0x1e>
 8025ba8:	6023      	str	r3, [r4, #0]
 8025baa:	bd38      	pop	{r3, r4, r5, pc}
 8025bac:	24023144 	.word	0x24023144

08025bb0 <_raise_r>:
 8025bb0:	291f      	cmp	r1, #31
 8025bb2:	b538      	push	{r3, r4, r5, lr}
 8025bb4:	4605      	mov	r5, r0
 8025bb6:	460c      	mov	r4, r1
 8025bb8:	d904      	bls.n	8025bc4 <_raise_r+0x14>
 8025bba:	2316      	movs	r3, #22
 8025bbc:	6003      	str	r3, [r0, #0]
 8025bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025bc2:	bd38      	pop	{r3, r4, r5, pc}
 8025bc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8025bc6:	b112      	cbz	r2, 8025bce <_raise_r+0x1e>
 8025bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025bcc:	b94b      	cbnz	r3, 8025be2 <_raise_r+0x32>
 8025bce:	4628      	mov	r0, r5
 8025bd0:	f000 f842 	bl	8025c58 <_getpid_r>
 8025bd4:	4622      	mov	r2, r4
 8025bd6:	4601      	mov	r1, r0
 8025bd8:	4628      	mov	r0, r5
 8025bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025bde:	f000 b829 	b.w	8025c34 <_kill_r>
 8025be2:	2b01      	cmp	r3, #1
 8025be4:	d00a      	beq.n	8025bfc <_raise_r+0x4c>
 8025be6:	1c59      	adds	r1, r3, #1
 8025be8:	d103      	bne.n	8025bf2 <_raise_r+0x42>
 8025bea:	2316      	movs	r3, #22
 8025bec:	6003      	str	r3, [r0, #0]
 8025bee:	2001      	movs	r0, #1
 8025bf0:	e7e7      	b.n	8025bc2 <_raise_r+0x12>
 8025bf2:	2100      	movs	r1, #0
 8025bf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8025bf8:	4620      	mov	r0, r4
 8025bfa:	4798      	blx	r3
 8025bfc:	2000      	movs	r0, #0
 8025bfe:	e7e0      	b.n	8025bc2 <_raise_r+0x12>

08025c00 <raise>:
 8025c00:	4b02      	ldr	r3, [pc, #8]	@ (8025c0c <raise+0xc>)
 8025c02:	4601      	mov	r1, r0
 8025c04:	6818      	ldr	r0, [r3, #0]
 8025c06:	f7ff bfd3 	b.w	8025bb0 <_raise_r>
 8025c0a:	bf00      	nop
 8025c0c:	2400004c 	.word	0x2400004c

08025c10 <_read_r>:
 8025c10:	b538      	push	{r3, r4, r5, lr}
 8025c12:	4d07      	ldr	r5, [pc, #28]	@ (8025c30 <_read_r+0x20>)
 8025c14:	4604      	mov	r4, r0
 8025c16:	4608      	mov	r0, r1
 8025c18:	4611      	mov	r1, r2
 8025c1a:	2200      	movs	r2, #0
 8025c1c:	602a      	str	r2, [r5, #0]
 8025c1e:	461a      	mov	r2, r3
 8025c20:	f7dc f84f 	bl	8001cc2 <_read>
 8025c24:	1c43      	adds	r3, r0, #1
 8025c26:	d102      	bne.n	8025c2e <_read_r+0x1e>
 8025c28:	682b      	ldr	r3, [r5, #0]
 8025c2a:	b103      	cbz	r3, 8025c2e <_read_r+0x1e>
 8025c2c:	6023      	str	r3, [r4, #0]
 8025c2e:	bd38      	pop	{r3, r4, r5, pc}
 8025c30:	24023144 	.word	0x24023144

08025c34 <_kill_r>:
 8025c34:	b538      	push	{r3, r4, r5, lr}
 8025c36:	4d07      	ldr	r5, [pc, #28]	@ (8025c54 <_kill_r+0x20>)
 8025c38:	2300      	movs	r3, #0
 8025c3a:	4604      	mov	r4, r0
 8025c3c:	4608      	mov	r0, r1
 8025c3e:	4611      	mov	r1, r2
 8025c40:	602b      	str	r3, [r5, #0]
 8025c42:	f7dc f823 	bl	8001c8c <_kill>
 8025c46:	1c43      	adds	r3, r0, #1
 8025c48:	d102      	bne.n	8025c50 <_kill_r+0x1c>
 8025c4a:	682b      	ldr	r3, [r5, #0]
 8025c4c:	b103      	cbz	r3, 8025c50 <_kill_r+0x1c>
 8025c4e:	6023      	str	r3, [r4, #0]
 8025c50:	bd38      	pop	{r3, r4, r5, pc}
 8025c52:	bf00      	nop
 8025c54:	24023144 	.word	0x24023144

08025c58 <_getpid_r>:
 8025c58:	f7dc b810 	b.w	8001c7c <_getpid>

08025c5c <_sbrk_r>:
 8025c5c:	b538      	push	{r3, r4, r5, lr}
 8025c5e:	4d06      	ldr	r5, [pc, #24]	@ (8025c78 <_sbrk_r+0x1c>)
 8025c60:	2300      	movs	r3, #0
 8025c62:	4604      	mov	r4, r0
 8025c64:	4608      	mov	r0, r1
 8025c66:	602b      	str	r3, [r5, #0]
 8025c68:	f7dc f898 	bl	8001d9c <_sbrk>
 8025c6c:	1c43      	adds	r3, r0, #1
 8025c6e:	d102      	bne.n	8025c76 <_sbrk_r+0x1a>
 8025c70:	682b      	ldr	r3, [r5, #0]
 8025c72:	b103      	cbz	r3, 8025c76 <_sbrk_r+0x1a>
 8025c74:	6023      	str	r3, [r4, #0]
 8025c76:	bd38      	pop	{r3, r4, r5, pc}
 8025c78:	24023144 	.word	0x24023144

08025c7c <_write_r>:
 8025c7c:	b538      	push	{r3, r4, r5, lr}
 8025c7e:	4d07      	ldr	r5, [pc, #28]	@ (8025c9c <_write_r+0x20>)
 8025c80:	4604      	mov	r4, r0
 8025c82:	4608      	mov	r0, r1
 8025c84:	4611      	mov	r1, r2
 8025c86:	2200      	movs	r2, #0
 8025c88:	602a      	str	r2, [r5, #0]
 8025c8a:	461a      	mov	r2, r3
 8025c8c:	f7dc f836 	bl	8001cfc <_write>
 8025c90:	1c43      	adds	r3, r0, #1
 8025c92:	d102      	bne.n	8025c9a <_write_r+0x1e>
 8025c94:	682b      	ldr	r3, [r5, #0]
 8025c96:	b103      	cbz	r3, 8025c9a <_write_r+0x1e>
 8025c98:	6023      	str	r3, [r4, #0]
 8025c9a:	bd38      	pop	{r3, r4, r5, pc}
 8025c9c:	24023144 	.word	0x24023144

08025ca0 <_calloc_r>:
 8025ca0:	b570      	push	{r4, r5, r6, lr}
 8025ca2:	fba1 5402 	umull	r5, r4, r1, r2
 8025ca6:	b93c      	cbnz	r4, 8025cb8 <_calloc_r+0x18>
 8025ca8:	4629      	mov	r1, r5
 8025caa:	f7ff f949 	bl	8024f40 <_malloc_r>
 8025cae:	4606      	mov	r6, r0
 8025cb0:	b928      	cbnz	r0, 8025cbe <_calloc_r+0x1e>
 8025cb2:	2600      	movs	r6, #0
 8025cb4:	4630      	mov	r0, r6
 8025cb6:	bd70      	pop	{r4, r5, r6, pc}
 8025cb8:	220c      	movs	r2, #12
 8025cba:	6002      	str	r2, [r0, #0]
 8025cbc:	e7f9      	b.n	8025cb2 <_calloc_r+0x12>
 8025cbe:	462a      	mov	r2, r5
 8025cc0:	4621      	mov	r1, r4
 8025cc2:	f7fe f902 	bl	8023eca <memset>
 8025cc6:	e7f5      	b.n	8025cb4 <_calloc_r+0x14>

08025cc8 <__ascii_mbtowc>:
 8025cc8:	b082      	sub	sp, #8
 8025cca:	b901      	cbnz	r1, 8025cce <__ascii_mbtowc+0x6>
 8025ccc:	a901      	add	r1, sp, #4
 8025cce:	b142      	cbz	r2, 8025ce2 <__ascii_mbtowc+0x1a>
 8025cd0:	b14b      	cbz	r3, 8025ce6 <__ascii_mbtowc+0x1e>
 8025cd2:	7813      	ldrb	r3, [r2, #0]
 8025cd4:	600b      	str	r3, [r1, #0]
 8025cd6:	7812      	ldrb	r2, [r2, #0]
 8025cd8:	1e10      	subs	r0, r2, #0
 8025cda:	bf18      	it	ne
 8025cdc:	2001      	movne	r0, #1
 8025cde:	b002      	add	sp, #8
 8025ce0:	4770      	bx	lr
 8025ce2:	4610      	mov	r0, r2
 8025ce4:	e7fb      	b.n	8025cde <__ascii_mbtowc+0x16>
 8025ce6:	f06f 0001 	mvn.w	r0, #1
 8025cea:	e7f8      	b.n	8025cde <__ascii_mbtowc+0x16>

08025cec <__ascii_wctomb>:
 8025cec:	4603      	mov	r3, r0
 8025cee:	4608      	mov	r0, r1
 8025cf0:	b141      	cbz	r1, 8025d04 <__ascii_wctomb+0x18>
 8025cf2:	2aff      	cmp	r2, #255	@ 0xff
 8025cf4:	d904      	bls.n	8025d00 <__ascii_wctomb+0x14>
 8025cf6:	228a      	movs	r2, #138	@ 0x8a
 8025cf8:	601a      	str	r2, [r3, #0]
 8025cfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025cfe:	4770      	bx	lr
 8025d00:	700a      	strb	r2, [r1, #0]
 8025d02:	2001      	movs	r0, #1
 8025d04:	4770      	bx	lr
	...

08025d08 <_init>:
 8025d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d0a:	bf00      	nop
 8025d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d0e:	bc08      	pop	{r3}
 8025d10:	469e      	mov	lr, r3
 8025d12:	4770      	bx	lr

08025d14 <_fini>:
 8025d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d16:	bf00      	nop
 8025d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d1a:	bc08      	pop	{r3}
 8025d1c:	469e      	mov	lr, r3
 8025d1e:	4770      	bx	lr
